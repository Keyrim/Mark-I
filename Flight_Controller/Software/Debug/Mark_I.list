
Mark_I.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1b4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e0  0800b33c  0800b33c  0001b33c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b81c  0800b81c  00020158  2**0
                  CONTENTS
  4 .ARM          00000008  0800b81c  0800b81c  0001b81c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b824  0800b824  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b824  0800b824  0001b824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b828  0800b828  0001b828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  0800b82c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020158  2**0
                  CONTENTS
 10 .bss          00001718  20000158  20000158  00020158  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001870  20001870  00020158  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024032  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000487a  00000000  00000000  000441ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001398  00000000  00000000  00048a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011c8  00000000  00000000  00049dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002462c  00000000  00000000  0004af98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f9c1  00000000  00000000  0006f5c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5140  00000000  00000000  0008ef85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001540c5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004fe4  00000000  00000000  00154118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000158 	.word	0x20000158
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b324 	.word	0x0800b324

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000015c 	.word	0x2000015c
 80001c4:	0800b324 	.word	0x0800b324

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <COMPLEMENTARY_FILTER_Init>:

/* Static function prototype */
static void angle_180(float * x);

void COMPLEMENTARY_FILTER_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	filter.gyro = MPU_Get_Gyro_Ptr();
 80004c4:	f002 fa04 	bl	80028d0 <MPU_Get_Gyro_Ptr>
 80004c8:	4603      	mov	r3, r0
 80004ca:	4a09      	ldr	r2, [pc, #36]	; (80004f0 <COMPLEMENTARY_FILTER_Init+0x30>)
 80004cc:	6013      	str	r3, [r2, #0]
	filter.gyro_raw = NULL;
 80004ce:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <COMPLEMENTARY_FILTER_Init+0x30>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	605a      	str	r2, [r3, #4]
	filter.acc = MPU_Get_Acc_Ptr();
 80004d4:	f002 fa06 	bl	80028e4 <MPU_Get_Acc_Ptr>
 80004d8:	4603      	mov	r3, r0
 80004da:	4a05      	ldr	r2, [pc, #20]	; (80004f0 <COMPLEMENTARY_FILTER_Init+0x30>)
 80004dc:	6093      	str	r3, [r2, #8]
	filter.alpha_gyro = ALPHA;
 80004de:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <COMPLEMENTARY_FILTER_Init+0x30>)
 80004e0:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <COMPLEMENTARY_FILTER_Init+0x34>)
 80004e2:	62da      	str	r2, [r3, #44]	; 0x2c
	filter.alpha_acc = 1.0f - ALPHA;
 80004e4:	4b02      	ldr	r3, [pc, #8]	; (80004f0 <COMPLEMENTARY_FILTER_Init+0x30>)
 80004e6:	4a04      	ldr	r2, [pc, #16]	; (80004f8 <COMPLEMENTARY_FILTER_Init+0x38>)
 80004e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	20000000 	.word	0x20000000
 80004f4:	3f7f7cee 	.word	0x3f7f7cee
 80004f8:	3b031200 	.word	0x3b031200

080004fc <COMPLEMENTARY_FILTER_Process>:

void COMPLEMENTARY_FILTER_Process(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af00      	add	r7, sp, #0
	/* Total acceleration */
	float acc_total = filter.acc[0] * filter.acc[0];
 8000502:	4baf      	ldr	r3, [pc, #700]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000504:	689b      	ldr	r3, [r3, #8]
 8000506:	ed93 7a00 	vldr	s14, [r3]
 800050a:	4bad      	ldr	r3, [pc, #692]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800050c:	689b      	ldr	r3, [r3, #8]
 800050e:	edd3 7a00 	vldr	s15, [r3]
 8000512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000516:	edc7 7a05 	vstr	s15, [r7, #20]
	acc_total += filter.acc[1] * filter.acc[1];
 800051a:	4ba9      	ldr	r3, [pc, #676]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800051c:	689b      	ldr	r3, [r3, #8]
 800051e:	3304      	adds	r3, #4
 8000520:	ed93 7a00 	vldr	s14, [r3]
 8000524:	4ba6      	ldr	r3, [pc, #664]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000526:	689b      	ldr	r3, [r3, #8]
 8000528:	3304      	adds	r3, #4
 800052a:	edd3 7a00 	vldr	s15, [r3]
 800052e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000532:	ed97 7a05 	vldr	s14, [r7, #20]
 8000536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800053a:	edc7 7a05 	vstr	s15, [r7, #20]
	acc_total += filter.acc[2] * filter.acc[2];
 800053e:	4ba0      	ldr	r3, [pc, #640]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000540:	689b      	ldr	r3, [r3, #8]
 8000542:	3308      	adds	r3, #8
 8000544:	ed93 7a00 	vldr	s14, [r3]
 8000548:	4b9d      	ldr	r3, [pc, #628]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	3308      	adds	r3, #8
 800054e:	edd3 7a00 	vldr	s15, [r3]
 8000552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000556:	ed97 7a05 	vldr	s14, [r7, #20]
 800055a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800055e:	edc7 7a05 	vstr	s15, [r7, #20]
	acc_total = sqrtf(acc_total);
 8000562:	ed97 0a05 	vldr	s0, [r7, #20]
 8000566:	f00a f89d 	bl	800a6a4 <sqrtf>
 800056a:	ed87 0a05 	vstr	s0, [r7, #20]

	/* Guess the angles according to the accelerometer and some trigonometry */
	if(acc_total)
 800056e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000572:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800057a:	d06c      	beq.n	8000656 <COMPLEMENTARY_FILTER_Process+0x15a>
	{
		float inv_acc_total = 1.0f / acc_total;
 800057c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000580:	ed97 7a05 	vldr	s14, [r7, #20]
 8000584:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000588:	edc7 7a04 	vstr	s15, [r7, #16]
		if(absolute(filter.acc[axe_eROLL]) < acc_total)
 800058c:	4b8c      	ldr	r3, [pc, #560]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	edd3 7a00 	vldr	s15, [r3]
 8000594:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800059c:	db04      	blt.n	80005a8 <COMPLEMENTARY_FILTER_Process+0xac>
 800059e:	4b88      	ldr	r3, [pc, #544]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80005a0:	689b      	ldr	r3, [r3, #8]
 80005a2:	edd3 7a00 	vldr	s15, [r3]
 80005a6:	e005      	b.n	80005b4 <COMPLEMENTARY_FILTER_Process+0xb8>
 80005a8:	4b85      	ldr	r3, [pc, #532]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	edd3 7a00 	vldr	s15, [r3]
 80005b0:	eef1 7a67 	vneg.f32	s15, s15
 80005b4:	ed97 7a05 	vldr	s14, [r7, #20]
 80005b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005c0:	d516      	bpl.n	80005f0 <COMPLEMENTARY_FILTER_Process+0xf4>
		{
			filter.angle_acc[axe_ePITCH] = 	-asinf(filter.acc[axe_eROLL] * inv_acc_total) * RAD_TO_DEG;
 80005c2:	4b7f      	ldr	r3, [pc, #508]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80005c4:	689b      	ldr	r3, [r3, #8]
 80005c6:	ed93 7a00 	vldr	s14, [r3]
 80005ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80005ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005d2:	eeb0 0a67 	vmov.f32	s0, s15
 80005d6:	f00a f833 	bl	800a640 <asinf>
 80005da:	eef0 7a40 	vmov.f32	s15, s0
 80005de:	eef1 7a67 	vneg.f32	s15, s15
 80005e2:	ed9f 7a78 	vldr	s14, [pc, #480]	; 80007c4 <COMPLEMENTARY_FILTER_Process+0x2c8>
 80005e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005ea:	4b75      	ldr	r3, [pc, #468]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80005ec:	edc3 7a07 	vstr	s15, [r3, #28]
		}
		if(absolute(filter.acc[axe_ePITCH]) < acc_total)
 80005f0:	4b73      	ldr	r3, [pc, #460]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	3304      	adds	r3, #4
 80005f6:	edd3 7a00 	vldr	s15, [r3]
 80005fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80005fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000602:	db04      	blt.n	800060e <COMPLEMENTARY_FILTER_Process+0x112>
 8000604:	4b6e      	ldr	r3, [pc, #440]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	edd3 7a01 	vldr	s15, [r3, #4]
 800060c:	e006      	b.n	800061c <COMPLEMENTARY_FILTER_Process+0x120>
 800060e:	4b6c      	ldr	r3, [pc, #432]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000610:	689b      	ldr	r3, [r3, #8]
 8000612:	3304      	adds	r3, #4
 8000614:	edd3 7a00 	vldr	s15, [r3]
 8000618:	eef1 7a67 	vneg.f32	s15, s15
 800061c:	ed97 7a05 	vldr	s14, [r7, #20]
 8000620:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000628:	d515      	bpl.n	8000656 <COMPLEMENTARY_FILTER_Process+0x15a>
		{
			filter.angle_acc[axe_eROLL] = 	asinf(filter.acc[axe_ePITCH] * inv_acc_total) * RAD_TO_DEG;
 800062a:	4b65      	ldr	r3, [pc, #404]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800062c:	689b      	ldr	r3, [r3, #8]
 800062e:	3304      	adds	r3, #4
 8000630:	ed93 7a00 	vldr	s14, [r3]
 8000634:	edd7 7a04 	vldr	s15, [r7, #16]
 8000638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800063c:	eeb0 0a67 	vmov.f32	s0, s15
 8000640:	f009 fffe 	bl	800a640 <asinf>
 8000644:	eef0 7a40 	vmov.f32	s15, s0
 8000648:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80007c4 <COMPLEMENTARY_FILTER_Process+0x2c8>
 800064c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000650:	4b5b      	ldr	r3, [pc, #364]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000652:	edc3 7a06 	vstr	s15, [r3, #24]
		}
	}

	if(!filter.used_once)
 8000656:	4b5a      	ldr	r3, [pc, #360]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000658:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800065c:	2b00      	cmp	r3, #0
 800065e:	d110      	bne.n	8000682 <COMPLEMENTARY_FILTER_Process+0x186>
	{
		filter.used_once = TRUE;
 8000660:	4b57      	ldr	r3, [pc, #348]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000662:	2201      	movs	r2, #1
 8000664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		filter.angle[axe_eROLL] = filter.angle_acc[axe_eROLL];
 8000668:	4b55      	ldr	r3, [pc, #340]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	4a54      	ldr	r2, [pc, #336]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800066e:	60d3      	str	r3, [r2, #12]
		filter.angle[axe_ePITCH] = filter.angle_acc[axe_ePITCH];
 8000670:	4b53      	ldr	r3, [pc, #332]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000672:	69db      	ldr	r3, [r3, #28]
 8000674:	4a52      	ldr	r2, [pc, #328]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000676:	6113      	str	r3, [r2, #16]
		filter.angle[axe_eYAW] = 0;
 8000678:	4b51      	ldr	r3, [pc, #324]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800067a:	f04f 0200 	mov.w	r2, #0
 800067e:	615a      	str	r2, [r3, #20]
		/* Finally, the complementary filter */
		filter.angle[axe_eROLL] = filter.alpha_gyro * filter.angle[axe_eROLL] + filter.alpha_acc * filter.angle_acc[axe_eROLL];
		filter.angle[axe_ePITCH] = filter.alpha_gyro * filter.angle[axe_ePITCH] + filter.alpha_acc * filter.angle_acc[axe_ePITCH];
	}

}
 8000680:	e09a      	b.n	80007b8 <COMPLEMENTARY_FILTER_Process+0x2bc>
		float dx = filter.gyro[axe_eROLL] * filter.period;
 8000682:	4b4f      	ldr	r3, [pc, #316]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	ed93 7a00 	vldr	s14, [r3]
 800068a:	4b4d      	ldr	r3, [pc, #308]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800068c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000694:	edc7 7a03 	vstr	s15, [r7, #12]
		float dy = filter.gyro[axe_ePITCH] * filter.period;
 8000698:	4b49      	ldr	r3, [pc, #292]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	3304      	adds	r3, #4
 800069e:	ed93 7a00 	vldr	s14, [r3]
 80006a2:	4b47      	ldr	r3, [pc, #284]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006a4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80006a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006ac:	edc7 7a02 	vstr	s15, [r7, #8]
		float dz = filter.gyro[axe_eYAW] * filter.period;
 80006b0:	4b43      	ldr	r3, [pc, #268]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	3308      	adds	r3, #8
 80006b6:	ed93 7a00 	vldr	s14, [r3]
 80006ba:	4b41      	ldr	r3, [pc, #260]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006bc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80006c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006c4:	edc7 7a01 	vstr	s15, [r7, #4]
		filter.angle[axe_eROLL] += dx;
 80006c8:	4b3d      	ldr	r3, [pc, #244]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006ca:	ed93 7a03 	vldr	s14, [r3, #12]
 80006ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80006d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006d6:	4b3a      	ldr	r3, [pc, #232]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006d8:	edc3 7a03 	vstr	s15, [r3, #12]
		filter.angle[axe_ePITCH] += dy;
 80006dc:	4b38      	ldr	r3, [pc, #224]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006de:	ed93 7a04 	vldr	s14, [r3, #16]
 80006e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80006e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006ea:	4b35      	ldr	r3, [pc, #212]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006ec:	edc3 7a04 	vstr	s15, [r3, #16]
		filter.angle[axe_eYAW] += dz;
 80006f0:	4b33      	ldr	r3, [pc, #204]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006f2:	ed93 7a05 	vldr	s14, [r3, #20]
 80006f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80006fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006fe:	4b30      	ldr	r3, [pc, #192]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000700:	edc3 7a05 	vstr	s15, [r3, #20]
		float sin_dz = sinf(DEG_TO_RAD * dz);
 8000704:	edd7 7a01 	vldr	s15, [r7, #4]
 8000708:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80007c8 <COMPLEMENTARY_FILTER_Process+0x2cc>
 800070c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000710:	eeb0 0a67 	vmov.f32	s0, s15
 8000714:	f009 ff52 	bl	800a5bc <sinf>
 8000718:	ed87 0a00 	vstr	s0, [r7]
		filter.angle[axe_eROLL] += sin_dz * filter.angle[axe_ePITCH];
 800071c:	4b28      	ldr	r3, [pc, #160]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800071e:	ed93 7a03 	vldr	s14, [r3, #12]
 8000722:	4b27      	ldr	r3, [pc, #156]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000724:	edd3 6a04 	vldr	s13, [r3, #16]
 8000728:	edd7 7a00 	vldr	s15, [r7]
 800072c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000734:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000736:	edc3 7a03 	vstr	s15, [r3, #12]
		filter.angle[axe_ePITCH] -= sin_dz * filter.angle[axe_eROLL];
 800073a:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800073c:	ed93 7a04 	vldr	s14, [r3, #16]
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000742:	edd3 6a03 	vldr	s13, [r3, #12]
 8000746:	edd7 7a00 	vldr	s15, [r7]
 800074a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800074e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000752:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000754:	edc3 7a04 	vstr	s15, [r3, #16]
		angle_180(&filter.angle[axe_eROLL]);
 8000758:	481c      	ldr	r0, [pc, #112]	; (80007cc <COMPLEMENTARY_FILTER_Process+0x2d0>)
 800075a:	f000 f845 	bl	80007e8 <angle_180>
		angle_180(&filter.angle[axe_ePITCH]);
 800075e:	481c      	ldr	r0, [pc, #112]	; (80007d0 <COMPLEMENTARY_FILTER_Process+0x2d4>)
 8000760:	f000 f842 	bl	80007e8 <angle_180>
		filter.angle[axe_eROLL] = filter.alpha_gyro * filter.angle[axe_eROLL] + filter.alpha_acc * filter.angle_acc[axe_eROLL];
 8000764:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000766:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800076c:	edd3 7a03 	vldr	s15, [r3, #12]
 8000770:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000776:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800077c:	edd3 7a06 	vldr	s15, [r3, #24]
 8000780:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000784:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000788:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800078a:	edc3 7a03 	vstr	s15, [r3, #12]
		filter.angle[axe_ePITCH] = filter.alpha_gyro * filter.angle[axe_ePITCH] + filter.alpha_acc * filter.angle_acc[axe_ePITCH];
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000790:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000794:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000796:	edd3 7a04 	vldr	s15, [r3, #16]
 800079a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80007a0:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80007a6:	edd3 7a07 	vldr	s15, [r3, #28]
 80007aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007b2:	4b03      	ldr	r3, [pc, #12]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80007b4:	edc3 7a04 	vstr	s15, [r3, #16]
}
 80007b8:	bf00      	nop
 80007ba:	3718      	adds	r7, #24
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000000 	.word	0x20000000
 80007c4:	42652ee1 	.word	0x42652ee1
 80007c8:	3c8efa34 	.word	0x3c8efa34
 80007cc:	2000000c 	.word	0x2000000c
 80007d0:	20000010 	.word	0x20000010

080007d4 <COMPLEMENTARY_FILTER_Get_Angles>:

float * COMPLEMENTARY_FILTER_Get_Angles(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
	return filter.angle;
 80007d8:	4b02      	ldr	r3, [pc, #8]	; (80007e4 <COMPLEMENTARY_FILTER_Get_Angles+0x10>)
}
 80007da:	4618      	mov	r0, r3
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	2000000c 	.word	0x2000000c

080007e8 <angle_180>:
{
	return filter.angle_acc;
}

static void angle_180(float * x)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	if(*x > 180)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	edd3 7a00 	vldr	s15, [r3]
 80007f6:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000850 <angle_180+0x68>
 80007fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000802:	dd0a      	ble.n	800081a <angle_180+0x32>
	{
		*x -= 360;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	edd3 7a00 	vldr	s15, [r3]
 800080a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000854 <angle_180+0x6c>
 800080e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	edc3 7a00 	vstr	s15, [r3]
	}
	else if( *x < -180)
	{
		*x += 360 ;
	}
}
 8000818:	e014      	b.n	8000844 <angle_180+0x5c>
	else if( *x < -180)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	edd3 7a00 	vldr	s15, [r3]
 8000820:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000858 <angle_180+0x70>
 8000824:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800082c:	d400      	bmi.n	8000830 <angle_180+0x48>
}
 800082e:	e009      	b.n	8000844 <angle_180+0x5c>
		*x += 360 ;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	edd3 7a00 	vldr	s15, [r3]
 8000836:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000854 <angle_180+0x6c>
 800083a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	edc3 7a00 	vstr	s15, [r3]
}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	43340000 	.word	0x43340000
 8000854:	43b40000 	.word	0x43b40000
 8000858:	c3340000 	.word	0xc3340000

0800085c <CONTROLLER_Init>:
		.angle_kp = 			{5.0f, 		5.0f, 		0},
		.angle_speed_kp = 		{1.0f, 		1.0f, 		3.0f},
};

void CONTROLLER_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	controller.angle = COMPLEMENTARY_FILTER_Get_Angles();
 8000860:	f7ff ffb8 	bl	80007d4 <COMPLEMENTARY_FILTER_Get_Angles>
 8000864:	4603      	mov	r3, r0
 8000866:	4a09      	ldr	r2, [pc, #36]	; (800088c <CONTROLLER_Init+0x30>)
 8000868:	6013      	str	r3, [r2, #0]
	controller.angle_speed = MPU_Get_Gyro_Ptr();
 800086a:	f002 f831 	bl	80028d0 <MPU_Get_Gyro_Ptr>
 800086e:	4603      	mov	r3, r0
 8000870:	4a06      	ldr	r2, [pc, #24]	; (800088c <CONTROLLER_Init+0x30>)
 8000872:	6293      	str	r3, [r2, #40]	; 0x28
	controller.output = MOTOR_MIXER_Get_Angle_Input_Ptr();
 8000874:	f001 f8de 	bl	8001a34 <MOTOR_MIXER_Get_Angle_Input_Ptr>
 8000878:	4603      	mov	r3, r0
 800087a:	4a04      	ldr	r2, [pc, #16]	; (800088c <CONTROLLER_Init+0x30>)
 800087c:	6513      	str	r3, [r2, #80]	; 0x50

	controller.state = controller_state_eDISABLED;
 800087e:	4b03      	ldr	r3, [pc, #12]	; (800088c <CONTROLLER_Init+0x30>)
 8000880:	2200      	movs	r2, #0
 8000882:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000038 	.word	0x20000038

08000890 <CONTROLLER_Process>:

void CONTROLLER_Process(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
	if(controller.new_state != controller.state)
 8000894:	4b55      	ldr	r3, [pc, #340]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000896:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 800089a:	4b54      	ldr	r3, [pc, #336]	; (80009ec <CONTROLLER_Process+0x15c>)
 800089c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d005      	beq.n	80008b0 <CONTROLLER_Process+0x20>
	{
		controller.state = controller.new_state;
 80008a4:	4b51      	ldr	r3, [pc, #324]	; (80009ec <CONTROLLER_Process+0x15c>)
 80008a6:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 80008aa:	4b50      	ldr	r3, [pc, #320]	; (80009ec <CONTROLLER_Process+0x15c>)
 80008ac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	}
	if(controller.state)
 80008b0:	4b4e      	ldr	r3, [pc, #312]	; (80009ec <CONTROLLER_Process+0x15c>)
 80008b2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	f000 8081 	beq.w	80009be <CONTROLLER_Process+0x12e>
	{
		/* A first PID to correct angle errors when we are in angle mode */
		if(controller.state == controller_state_eANGLE)
 80008bc:	4b4b      	ldr	r3, [pc, #300]	; (80009ec <CONTROLLER_Process+0x15c>)
 80008be:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80008c2:	2b02      	cmp	r3, #2
 80008c4:	d12e      	bne.n	8000924 <CONTROLLER_Process+0x94>
		{
			/* Compute angle errors */
			controller.angle_error[axe_eROLL] = controller.target_angle[axe_eROLL] - controller.angle[axe_eROLL];
 80008c6:	4b49      	ldr	r3, [pc, #292]	; (80009ec <CONTROLLER_Process+0x15c>)
 80008c8:	ed93 7a01 	vldr	s14, [r3, #4]
 80008cc:	4b47      	ldr	r3, [pc, #284]	; (80009ec <CONTROLLER_Process+0x15c>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	edd3 7a00 	vldr	s15, [r3]
 80008d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008d8:	4b44      	ldr	r3, [pc, #272]	; (80009ec <CONTROLLER_Process+0x15c>)
 80008da:	edc3 7a04 	vstr	s15, [r3, #16]
			controller.angle_error[axe_ePITCH] = controller.target_angle[axe_ePITCH] - controller.angle[axe_ePITCH];
 80008de:	4b43      	ldr	r3, [pc, #268]	; (80009ec <CONTROLLER_Process+0x15c>)
 80008e0:	ed93 7a02 	vldr	s14, [r3, #8]
 80008e4:	4b41      	ldr	r3, [pc, #260]	; (80009ec <CONTROLLER_Process+0x15c>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	3304      	adds	r3, #4
 80008ea:	edd3 7a00 	vldr	s15, [r3]
 80008ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008f2:	4b3e      	ldr	r3, [pc, #248]	; (80009ec <CONTROLLER_Process+0x15c>)
 80008f4:	edc3 7a05 	vstr	s15, [r3, #20]
			/* Handle angle continuity at -PI and + PI */
			//TODO ASAP
			/* Compute PID on angles */
			controller.target_angle_speed[axe_eROLL] = controller.angle_kp[axe_eROLL] * controller.angle_error[axe_eROLL];
 80008f8:	4b3c      	ldr	r3, [pc, #240]	; (80009ec <CONTROLLER_Process+0x15c>)
 80008fa:	ed93 7a07 	vldr	s14, [r3, #28]
 80008fe:	4b3b      	ldr	r3, [pc, #236]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000900:	edd3 7a04 	vldr	s15, [r3, #16]
 8000904:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000908:	4b38      	ldr	r3, [pc, #224]	; (80009ec <CONTROLLER_Process+0x15c>)
 800090a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			controller.target_angle_speed[axe_ePITCH] = controller.angle_kp[axe_ePITCH] * controller.angle_error[axe_ePITCH];
 800090e:	4b37      	ldr	r3, [pc, #220]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000910:	ed93 7a08 	vldr	s14, [r3, #32]
 8000914:	4b35      	ldr	r3, [pc, #212]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000916:	edd3 7a05 	vldr	s15, [r3, #20]
 800091a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800091e:	4b33      	ldr	r3, [pc, #204]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000920:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		}
		/* Angular speed regulation */
		/* First thing first, errors */
		controller.angle_speed_error[axe_eROLL] = controller.target_angle_speed[axe_eROLL] - controller.angle_speed[axe_eROLL];
 8000924:	4b31      	ldr	r3, [pc, #196]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000926:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800092a:	4b30      	ldr	r3, [pc, #192]	; (80009ec <CONTROLLER_Process+0x15c>)
 800092c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800092e:	edd3 7a00 	vldr	s15, [r3]
 8000932:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000936:	4b2d      	ldr	r3, [pc, #180]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000938:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		controller.angle_speed_error[axe_ePITCH] = controller.target_angle_speed[axe_ePITCH] - controller.angle_speed[axe_ePITCH];
 800093c:	4b2b      	ldr	r3, [pc, #172]	; (80009ec <CONTROLLER_Process+0x15c>)
 800093e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000942:	4b2a      	ldr	r3, [pc, #168]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000946:	3304      	adds	r3, #4
 8000948:	edd3 7a00 	vldr	s15, [r3]
 800094c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000950:	4b26      	ldr	r3, [pc, #152]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000952:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		controller.angle_speed_error[axe_eYAW] = controller.target_angle_speed[axe_eYAW] - controller.angle_speed[axe_eYAW];
 8000956:	4b25      	ldr	r3, [pc, #148]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000958:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800095c:	4b23      	ldr	r3, [pc, #140]	; (80009ec <CONTROLLER_Process+0x15c>)
 800095e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000960:	3308      	adds	r3, #8
 8000962:	edd3 7a00 	vldr	s15, [r3]
 8000966:	ee77 7a67 	vsub.f32	s15, s14, s15
 800096a:	4b20      	ldr	r3, [pc, #128]	; (80009ec <CONTROLLER_Process+0x15c>)
 800096c:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

		/* Now, PID's time ! */
		controller.output[axe_eROLL] = controller.angle_speed_error[axe_eROLL] * controller.angle_speed_kp[axe_eROLL];
 8000970:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000972:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8000976:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000978:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800097c:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <CONTROLLER_Process+0x15c>)
 800097e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000980:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000984:	edc3 7a00 	vstr	s15, [r3]
		controller.output[axe_ePITCH] = controller.angle_speed_error[axe_ePITCH] * controller.angle_speed_kp[axe_ePITCH];
 8000988:	4b18      	ldr	r3, [pc, #96]	; (80009ec <CONTROLLER_Process+0x15c>)
 800098a:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800098e:	4b17      	ldr	r3, [pc, #92]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000990:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8000994:	4b15      	ldr	r3, [pc, #84]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000998:	3304      	adds	r3, #4
 800099a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800099e:	edc3 7a00 	vstr	s15, [r3]
		controller.output[axe_eYAW] = controller.angle_speed_error[axe_eYAW] * controller.angle_speed_kp[axe_eYAW];
 80009a2:	4b12      	ldr	r3, [pc, #72]	; (80009ec <CONTROLLER_Process+0x15c>)
 80009a4:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80009a8:	4b10      	ldr	r3, [pc, #64]	; (80009ec <CONTROLLER_Process+0x15c>)
 80009aa:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80009ae:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <CONTROLLER_Process+0x15c>)
 80009b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009b2:	3308      	adds	r3, #8
 80009b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009b8:	edc3 7a00 	vstr	s15, [r3]
	{
		controller.output[axe_eROLL] = 0;
		controller.output[axe_ePITCH] = 0;
		controller.output[axe_eYAW] = 0;
	}
}
 80009bc:	e010      	b.n	80009e0 <CONTROLLER_Process+0x150>
		controller.output[axe_eROLL] = 0;
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <CONTROLLER_Process+0x15c>)
 80009c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009c2:	f04f 0200 	mov.w	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
		controller.output[axe_ePITCH] = 0;
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <CONTROLLER_Process+0x15c>)
 80009ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009cc:	3304      	adds	r3, #4
 80009ce:	f04f 0200 	mov.w	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
		controller.output[axe_eYAW] = 0;
 80009d4:	4b05      	ldr	r3, [pc, #20]	; (80009ec <CONTROLLER_Process+0x15c>)
 80009d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009d8:	3308      	adds	r3, #8
 80009da:	f04f 0200 	mov.w	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	20000038 	.word	0x20000038

080009f0 <CONTROLLER_Set_State>:

void CONTROLLER_Set_State(controller_state_e new_state)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	71fb      	strb	r3, [r7, #7]
	controller.new_state = new_state;
 80009fa:	4a05      	ldr	r2, [pc, #20]	; (8000a10 <CONTROLLER_Set_State+0x20>)
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	20000038 	.word	0x20000038

08000a14 <CONTROLLER_Get_Angle_Target>:

float * CONTROLLER_Get_Angle_Target(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
	return controller.target_angle;
 8000a18:	4b02      	ldr	r3, [pc, #8]	; (8000a24 <CONTROLLER_Get_Angle_Target+0x10>)
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	2000003c 	.word	0x2000003c

08000a28 <CONTROLLER_Get_Angle_Speed_Target>:

float * CONTROLLER_Get_Angle_Speed_Target(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
	return controller.target_angle_speed;
 8000a2c:	4b02      	ldr	r3, [pc, #8]	; (8000a38 <CONTROLLER_Get_Angle_Speed_Target+0x10>)
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	20000064 	.word	0x20000064

08000a3c <DATA_LOGGER_Init>:
/*
 * @brief Declare every data
 * @param mark1_ pointer to a system_t structure
 */
void DATA_LOGGER_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
	/* Retrieve structure from modules */
	float * gyro = MPU_Get_Gyro_Ptr();
 8000a42:	f001 ff45 	bl	80028d0 <MPU_Get_Gyro_Ptr>
 8000a46:	60f8      	str	r0, [r7, #12]
	float * acc = MPU_Get_Acc_Ptr();
 8000a48:	f001 ff4c 	bl	80028e4 <MPU_Get_Acc_Ptr>
 8000a4c:	60b8      	str	r0, [r7, #8]
	float * angle = COMPLEMENTARY_FILTER_Get_Angles();
 8000a4e:	f7ff fec1 	bl	80007d4 <COMPLEMENTARY_FILTER_Get_Angles>
 8000a52:	6078      	str	r0, [r7, #4]

	/* -------------- Outputs ----------------- */
	DEFINE_DATA(data_id_eANGLE_ROLL,			(void*)&angle[axe_eROLL],	data_format_e16B_FLOAT_2D,		"Angle Roll",		use_format_eAS_OUTPUT);
 8000a54:	4b8b      	ldr	r3, [pc, #556]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000a56:	2203      	movs	r2, #3
 8000a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000a5c:	4a89      	ldr	r2, [pc, #548]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6413      	str	r3, [r2, #64]	; 0x40
 8000a62:	4b88      	ldr	r3, [pc, #544]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000a64:	222a      	movs	r2, #42	; 0x2a
 8000a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000a6a:	4b86      	ldr	r3, [pc, #536]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000a6c:	4a86      	ldr	r2, [pc, #536]	; (8000c88 <DATA_LOGGER_Init+0x24c>)
 8000a6e:	649a      	str	r2, [r3, #72]	; 0x48
 8000a70:	4b84      	ldr	r3, [pc, #528]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000a72:	220a      	movs	r2, #10
 8000a74:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8000a78:	4b82      	ldr	r3, [pc, #520]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	DEFINE_DATA(data_id_eANGLE_PITCH,			(void*)&angle[axe_ePITCH],	data_format_e16B_FLOAT_2D,		"Angle Pitch",		use_format_eNOT_USED);
 8000a80:	4b80      	ldr	r3, [pc, #512]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000a82:	2204      	movs	r2, #4
 8000a84:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3304      	adds	r3, #4
 8000a8c:	4a7d      	ldr	r2, [pc, #500]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000a8e:	6553      	str	r3, [r2, #84]	; 0x54
 8000a90:	4b7c      	ldr	r3, [pc, #496]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000a92:	222a      	movs	r2, #42	; 0x2a
 8000a94:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8000a98:	4b7a      	ldr	r3, [pc, #488]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000a9a:	4a7c      	ldr	r2, [pc, #496]	; (8000c8c <DATA_LOGGER_Init+0x250>)
 8000a9c:	65da      	str	r2, [r3, #92]	; 0x5c
 8000a9e:	4b79      	ldr	r3, [pc, #484]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000aa0:	220b      	movs	r2, #11
 8000aa2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8000aa6:	4b77      	ldr	r3, [pc, #476]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	DEFINE_DATA(data_id_eANGLE_YAW,				(void*)&angle[axe_eYAW],	data_format_e16B_FLOAT_2D,		"Angle Yaw",		use_format_eNOT_USED);
 8000aae:	4b75      	ldr	r3, [pc, #468]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000ab0:	2205      	movs	r2, #5
 8000ab2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	3308      	adds	r3, #8
 8000aba:	4a72      	ldr	r2, [pc, #456]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000abc:	6693      	str	r3, [r2, #104]	; 0x68
 8000abe:	4b71      	ldr	r3, [pc, #452]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000ac0:	222a      	movs	r2, #42	; 0x2a
 8000ac2:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
 8000ac6:	4b6f      	ldr	r3, [pc, #444]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000ac8:	4a71      	ldr	r2, [pc, #452]	; (8000c90 <DATA_LOGGER_Init+0x254>)
 8000aca:	671a      	str	r2, [r3, #112]	; 0x70
 8000acc:	4b6d      	ldr	r3, [pc, #436]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000ace:	2209      	movs	r2, #9
 8000ad0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8000ad4:	4b6b      	ldr	r3, [pc, #428]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	DEFINE_DATA(data_id_eGYRO_ROLL,				(void*)&gyro[axe_eROLL],	data_format_e16B_FLOAT_2D,		"Gyro Roll",		use_format_eNOT_USED);
 8000adc:	4b69      	ldr	r3, [pc, #420]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000ade:	2206      	movs	r2, #6
 8000ae0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8000ae4:	4a67      	ldr	r2, [pc, #412]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	67d3      	str	r3, [r2, #124]	; 0x7c
 8000aea:	4b66      	ldr	r3, [pc, #408]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000aec:	222a      	movs	r2, #42	; 0x2a
 8000aee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 8000af2:	4b64      	ldr	r3, [pc, #400]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000af4:	4a67      	ldr	r2, [pc, #412]	; (8000c94 <DATA_LOGGER_Init+0x258>)
 8000af6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8000afa:	4b62      	ldr	r3, [pc, #392]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000afc:	2209      	movs	r2, #9
 8000afe:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8000b02:	4b60      	ldr	r3, [pc, #384]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
	DEFINE_DATA(data_id_eGYRO_PITCH,			(void*)&gyro[axe_ePITCH],	data_format_e16B_FLOAT_2D,		"Gyro Pitch",		use_format_eNOT_USED);
 8000b0a:	4b5e      	ldr	r3, [pc, #376]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000b0c:	2207      	movs	r2, #7
 8000b0e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	3304      	adds	r3, #4
 8000b16:	4a5b      	ldr	r2, [pc, #364]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000b18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000b1c:	4b59      	ldr	r3, [pc, #356]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000b1e:	222a      	movs	r2, #42	; 0x2a
 8000b20:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8000b24:	4b57      	ldr	r3, [pc, #348]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000b26:	4a5c      	ldr	r2, [pc, #368]	; (8000c98 <DATA_LOGGER_Init+0x25c>)
 8000b28:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8000b2c:	4b55      	ldr	r3, [pc, #340]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000b2e:	220a      	movs	r2, #10
 8000b30:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8000b34:	4b53      	ldr	r3, [pc, #332]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	DEFINE_DATA(data_id_eGYRO_YAW,				(void*)&gyro[axe_eYAW],		data_format_e16B_FLOAT_2D,		"Gyro Yaw",			use_format_eNOT_USED);
 8000b3c:	4b51      	ldr	r3, [pc, #324]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000b3e:	2208      	movs	r2, #8
 8000b40:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	3308      	adds	r3, #8
 8000b48:	4a4e      	ldr	r2, [pc, #312]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000b4a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000b4e:	4b4d      	ldr	r3, [pc, #308]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000b50:	222a      	movs	r2, #42	; 0x2a
 8000b52:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 8000b56:	4b4b      	ldr	r3, [pc, #300]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000b58:	4a50      	ldr	r2, [pc, #320]	; (8000c9c <DATA_LOGGER_Init+0x260>)
 8000b5a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8000b5e:	4b49      	ldr	r3, [pc, #292]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000b60:	2208      	movs	r2, #8
 8000b62:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 8000b66:	4b47      	ldr	r3, [pc, #284]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	DEFINE_DATA(data_id_eACC_ROLL,				(void*)&acc[axe_eROLL],		data_format_e16B_FLOAT_2D,		"Gyro Roll",		use_format_eNOT_USED);
 8000b6e:	4b45      	ldr	r3, [pc, #276]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000b70:	220c      	movs	r2, #12
 8000b72:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
 8000b76:	4a43      	ldr	r2, [pc, #268]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b7e:	4b41      	ldr	r3, [pc, #260]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000b80:	222a      	movs	r2, #42	; 0x2a
 8000b82:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
 8000b86:	4b3f      	ldr	r3, [pc, #252]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000b88:	4a42      	ldr	r2, [pc, #264]	; (8000c94 <DATA_LOGGER_Init+0x258>)
 8000b8a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 8000b8e:	4b3d      	ldr	r3, [pc, #244]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000b90:	2209      	movs	r2, #9
 8000b92:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8000b96:	4b3b      	ldr	r3, [pc, #236]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
	DEFINE_DATA(data_id_eACC_PITCH,				(void*)&acc[axe_ePITCH],	data_format_e16B_FLOAT_2D,		"Gyro Pitch",		use_format_eNOT_USED);
 8000b9e:	4b39      	ldr	r3, [pc, #228]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000ba0:	220d      	movs	r2, #13
 8000ba2:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	3304      	adds	r3, #4
 8000baa:	4a36      	ldr	r2, [pc, #216]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000bac:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
 8000bb0:	4b34      	ldr	r3, [pc, #208]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000bb2:	222a      	movs	r2, #42	; 0x2a
 8000bb4:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
 8000bb8:	4b32      	ldr	r3, [pc, #200]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000bba:	4a37      	ldr	r2, [pc, #220]	; (8000c98 <DATA_LOGGER_Init+0x25c>)
 8000bbc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8000bc0:	4b30      	ldr	r3, [pc, #192]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000bc2:	220a      	movs	r2, #10
 8000bc4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 8000bc8:	4b2e      	ldr	r3, [pc, #184]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
	DEFINE_DATA(data_id_eACC_YAW,				(void*)&acc[axe_eYAW],		data_format_e16B_FLOAT_2D,		"Gyro Yaw",			use_format_eNOT_USED);
 8000bd0:	4b2c      	ldr	r3, [pc, #176]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000bd2:	220e      	movs	r2, #14
 8000bd4:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	3308      	adds	r3, #8
 8000bdc:	4a29      	ldr	r2, [pc, #164]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000bde:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
 8000be2:	4b28      	ldr	r3, [pc, #160]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000be4:	222a      	movs	r2, #42	; 0x2a
 8000be6:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
 8000bea:	4b26      	ldr	r3, [pc, #152]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000bec:	4a2b      	ldr	r2, [pc, #172]	; (8000c9c <DATA_LOGGER_Init+0x260>)
 8000bee:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 8000bf2:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000bf4:	2208      	movs	r2, #8
 8000bf6:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 8000bfa:	4b22      	ldr	r3, [pc, #136]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129

	/* -------------- Inputs ----------------- */
	DEFINE_DATA(data_id_eCONFIG_REQUEST,		NULL,	data_format_e0B_BUTTON,		"Send Configuration",	use_format_eAS_INPUT);
 8000c02:	4b20      	ldr	r3, [pc, #128]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	721a      	strb	r2, [r3, #8]
 8000c08:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	725a      	strb	r2, [r3, #9]
 8000c14:	4b1b      	ldr	r3, [pc, #108]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000c16:	4a22      	ldr	r2, [pc, #136]	; (8000ca0 <DATA_LOGGER_Init+0x264>)
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000c1c:	2212      	movs	r2, #18
 8000c1e:	741a      	strb	r2, [r3, #16]
 8000c20:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000c22:	2202      	movs	r2, #2
 8000c24:	745a      	strb	r2, [r3, #17]
	DEFINE_DATA(data_id_eSTART_TRANSFER,		NULL,	data_format_e0B_BUTTON,		"Start Transfer",		use_format_eAS_INPUT);
 8000c26:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	771a      	strb	r2, [r3, #28]
 8000c2c:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	619a      	str	r2, [r3, #24]
 8000c32:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	775a      	strb	r2, [r3, #29]
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000c3a:	4a1a      	ldr	r2, [pc, #104]	; (8000ca4 <DATA_LOGGER_Init+0x268>)
 8000c3c:	621a      	str	r2, [r3, #32]
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000c40:	220e      	movs	r2, #14
 8000c42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000c46:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000c48:	2202      	movs	r2, #2
 8000c4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	DEFINE_DATA(data_id_eSTOP_TRANSFER,			NULL,	data_format_e0B_BUTTON,		"Stop Transfer",		use_format_eAS_INPUT);
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000c50:	2202      	movs	r2, #2
 8000c52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000c66:	4a10      	ldr	r2, [pc, #64]	; (8000ca8 <DATA_LOGGER_Init+0x26c>)
 8000c68:	635a      	str	r2, [r3, #52]	; 0x34
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000c6c:	220d      	movs	r2, #13
 8000c6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8000c72:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000c74:	2202      	movs	r2, #2
 8000c76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8000c7a:	bf00      	nop
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000174 	.word	0x20000174
 8000c88:	0800b33c 	.word	0x0800b33c
 8000c8c:	0800b348 	.word	0x0800b348
 8000c90:	0800b354 	.word	0x0800b354
 8000c94:	0800b360 	.word	0x0800b360
 8000c98:	0800b36c 	.word	0x0800b36c
 8000c9c:	0800b378 	.word	0x0800b378
 8000ca0:	0800b384 	.word	0x0800b384
 8000ca4:	0800b398 	.word	0x0800b398
 8000ca8:	0800b3a8 	.word	0x0800b3a8

08000cac <DATA_LOGGER_Start>:
/*
 * @brief Request to start logging data
 */
void DATA_LOGGER_Start()
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
	start_flag = TRUE;
 8000cb0:	4b03      	ldr	r3, [pc, #12]	; (8000cc0 <DATA_LOGGER_Start+0x14>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	701a      	strb	r2, [r3, #0]
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	200002a0 	.word	0x200002a0

08000cc4 <DATA_LOGGER_Stop>:
/*
 * @brief Request to stop logging data
 */
void DATA_LOGGER_Stop()
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
	stop_flag = TRUE;
 8000cc8:	4b03      	ldr	r3, [pc, #12]	; (8000cd8 <DATA_LOGGER_Stop+0x14>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	701a      	strb	r2, [r3, #0]
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	200002a2 	.word	0x200002a2

08000cdc <DATA_LOGGER_Main>:

/*
 * @brief Call the state machine and the uart parser
 */
void DATA_LOGGER_Main(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
	state_machine();
 8000ce0:	f000 fab0 	bl	8001244 <state_machine>
	parse_uart();
 8000ce4:	f000 fbc2 	bl	800146c <parse_uart>
}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}

08000cec <DATA_LOGGER_Reception>:
/*
 * @brief Parse input data
 * @param input_buffer Buffer to use to parse the data
 */
void DATA_LOGGER_Reception(uint8_t * input_buffer)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	uint8_t id = input_buffer[0];
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp_uint_16 = 0 ;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	81bb      	strh	r3, [r7, #12]
	int16_t tmp_int_16 = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	817b      	strh	r3, [r7, #10]
	switch(data_list[id].format)
 8000d02:	7bfa      	ldrb	r2, [r7, #15]
 8000d04:	4954      	ldr	r1, [pc, #336]	; (8000e58 <DATA_LOGGER_Reception+0x16c>)
 8000d06:	4613      	mov	r3, r2
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	4413      	add	r3, r2
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	440b      	add	r3, r1
 8000d10:	3309      	adds	r3, #9
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b2d      	cmp	r3, #45	; 0x2d
 8000d16:	f200 809a 	bhi.w	8000e4e <DATA_LOGGER_Reception+0x162>
 8000d1a:	a201      	add	r2, pc, #4	; (adr r2, 8000d20 <DATA_LOGGER_Reception+0x34>)
 8000d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d20:	08000dd9 	.word	0x08000dd9
 8000d24:	08000e4f 	.word	0x08000e4f
 8000d28:	08000e4f 	.word	0x08000e4f
 8000d2c:	08000e4f 	.word	0x08000e4f
 8000d30:	08000e4f 	.word	0x08000e4f
 8000d34:	08000e4f 	.word	0x08000e4f
 8000d38:	08000e4f 	.word	0x08000e4f
 8000d3c:	08000e4f 	.word	0x08000e4f
 8000d40:	08000e4f 	.word	0x08000e4f
 8000d44:	08000e4f 	.word	0x08000e4f
 8000d48:	08000e4f 	.word	0x08000e4f
 8000d4c:	08000e4f 	.word	0x08000e4f
 8000d50:	08000e4f 	.word	0x08000e4f
 8000d54:	08000e4f 	.word	0x08000e4f
 8000d58:	08000e4f 	.word	0x08000e4f
 8000d5c:	08000e4f 	.word	0x08000e4f
 8000d60:	08000e4f 	.word	0x08000e4f
 8000d64:	08000e4f 	.word	0x08000e4f
 8000d68:	08000e4f 	.word	0x08000e4f
 8000d6c:	08000e4f 	.word	0x08000e4f
 8000d70:	08000e4f 	.word	0x08000e4f
 8000d74:	08000e05 	.word	0x08000e05
 8000d78:	08000e4f 	.word	0x08000e4f
 8000d7c:	08000e4f 	.word	0x08000e4f
 8000d80:	08000e4f 	.word	0x08000e4f
 8000d84:	08000e4f 	.word	0x08000e4f
 8000d88:	08000e4f 	.word	0x08000e4f
 8000d8c:	08000e4f 	.word	0x08000e4f
 8000d90:	08000e4f 	.word	0x08000e4f
 8000d94:	08000e4f 	.word	0x08000e4f
 8000d98:	08000e4f 	.word	0x08000e4f
 8000d9c:	08000e4f 	.word	0x08000e4f
 8000da0:	08000e4f 	.word	0x08000e4f
 8000da4:	08000e4f 	.word	0x08000e4f
 8000da8:	08000e4f 	.word	0x08000e4f
 8000dac:	08000e4f 	.word	0x08000e4f
 8000db0:	08000e4f 	.word	0x08000e4f
 8000db4:	08000e4f 	.word	0x08000e4f
 8000db8:	08000e4f 	.word	0x08000e4f
 8000dbc:	08000e4f 	.word	0x08000e4f
 8000dc0:	08000e4f 	.word	0x08000e4f
 8000dc4:	08000e4f 	.word	0x08000e4f
 8000dc8:	08000e4f 	.word	0x08000e4f
 8000dcc:	08000e4f 	.word	0x08000e4f
 8000dd0:	08000e31 	.word	0x08000e31
 8000dd4:	08000e13 	.word	0x08000e13
	{
		case data_format_e0B_BUTTON:
			/* Link an action to each id */
			switch(id)
 8000dd8:	7bfb      	ldrb	r3, [r7, #15]
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d00d      	beq.n	8000dfa <DATA_LOGGER_Reception+0x10e>
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	dc0e      	bgt.n	8000e00 <DATA_LOGGER_Reception+0x114>
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d002      	beq.n	8000dec <DATA_LOGGER_Reception+0x100>
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d004      	beq.n	8000df4 <DATA_LOGGER_Reception+0x108>
			{
				default:
					break;
 8000dea:	e009      	b.n	8000e00 <DATA_LOGGER_Reception+0x114>
				case data_id_eCONFIG_REQUEST:
					send_config_flag = TRUE;
 8000dec:	4b1b      	ldr	r3, [pc, #108]	; (8000e5c <DATA_LOGGER_Reception+0x170>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	701a      	strb	r2, [r3, #0]
					break;
 8000df2:	e006      	b.n	8000e02 <DATA_LOGGER_Reception+0x116>
				case data_id_eSTART_TRANSFER:
					DATA_LOGGER_Start();
 8000df4:	f7ff ff5a 	bl	8000cac <DATA_LOGGER_Start>
					break;
 8000df8:	e003      	b.n	8000e02 <DATA_LOGGER_Reception+0x116>
				case data_id_eSTOP_TRANSFER:
					DATA_LOGGER_Stop();
 8000dfa:	f7ff ff63 	bl	8000cc4 <DATA_LOGGER_Stop>
					break;
 8000dfe:	e000      	b.n	8000e02 <DATA_LOGGER_Reception+0x116>
					break;
 8000e00:	bf00      	nop
			}
			break;
 8000e02:	e025      	b.n	8000e50 <DATA_LOGGER_Reception+0x164>
		case data_format_e8B_FLOAT_0D:
			break;
		case data_format_e8B_FLOAT_1D:
			break;
		case data_format_e8B_PWM:
			tmp_uint_16 = 4*input_buffer[1];
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3301      	adds	r3, #1
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	81bb      	strh	r3, [r7, #12]
			break;
 8000e10:	e01e      	b.n	8000e50 <DATA_LOGGER_Reception+0x164>
		case data_format_e16B_INT16:
			tmp_int_16 = (int16_t)input_buffer[1] << 8;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	3301      	adds	r3, #1
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	021b      	lsls	r3, r3, #8
 8000e1a:	817b      	strh	r3, [r7, #10]
			tmp_int_16 += (int16_t)input_buffer[2];
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3302      	adds	r3, #2
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	b29a      	uxth	r2, r3
 8000e24:	897b      	ldrh	r3, [r7, #10]
 8000e26:	4413      	add	r3, r2
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	817b      	strh	r3, [r7, #10]
			switch(id)
			{
				default:
					break;
 8000e2c:	bf00      	nop
			}

			break;
 8000e2e:	e00f      	b.n	8000e50 <DATA_LOGGER_Reception+0x164>
		case data_format_e16B_UINT16:
			tmp_uint_16 = (uint16_t)input_buffer[1] << 8;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3301      	adds	r3, #1
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	021b      	lsls	r3, r3, #8
 8000e3a:	81bb      	strh	r3, [r7, #12]
			tmp_uint_16 += (uint16_t)input_buffer[2];
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3302      	adds	r3, #2
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	89bb      	ldrh	r3, [r7, #12]
 8000e46:	4413      	add	r3, r2
 8000e48:	81bb      	strh	r3, [r7, #12]
			switch(id)
			{
				default:
					break;
 8000e4a:	bf00      	nop
			}

		case data_format_e16B_FLOAT_1D:
			break;
 8000e4c:	e000      	b.n	8000e50 <DATA_LOGGER_Reception+0x164>
		default:
			break;
 8000e4e:	bf00      	nop

	}
}
 8000e50:	bf00      	nop
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000174 	.word	0x20000174
 8000e5c:	200002a1 	.word	0x200002a1

08000e60 <DATA_LOGGER_Get_Data_Value>:
 * @param id Id of the data
 * @param buffer Buffer array
 * @return Number of bytes written
 */
uint8_t DATA_LOGGER_Get_Data_Value(data_id_e id, uint8_t * buffer)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b087      	sub	sp, #28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	73fb      	strb	r3, [r7, #15]

	/* Local temporary variables */
	int16_t tmp_16 = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	82fb      	strh	r3, [r7, #22]
	float tmp_float = 0;
 8000e70:	f04f 0300 	mov.w	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]

	/* First byte is reserved for the id */
	buffer[0] = id ;
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	7bfa      	ldrb	r2, [r7, #15]
 8000e7a:	701a      	strb	r2, [r3, #0]
	switch(data_list[id].format)
 8000e7c:	7bfa      	ldrb	r2, [r7, #15]
 8000e7e:	498f      	ldr	r1, [pc, #572]	; (80010bc <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000e80:	4613      	mov	r3, r2
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	4413      	add	r3, r2
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	440b      	add	r3, r1
 8000e8a:	3309      	adds	r3, #9
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	3b14      	subs	r3, #20
 8000e90:	2b19      	cmp	r3, #25
 8000e92:	f200 80fb 	bhi.w	800108c <DATA_LOGGER_Get_Data_Value+0x22c>
 8000e96:	a201      	add	r2, pc, #4	; (adr r2, 8000e9c <DATA_LOGGER_Get_Data_Value+0x3c>)
 8000e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e9c:	08000f05 	.word	0x08000f05
 8000ea0:	0800108d 	.word	0x0800108d
 8000ea4:	0800108d 	.word	0x0800108d
 8000ea8:	08000f21 	.word	0x08000f21
 8000eac:	0800108d 	.word	0x0800108d
 8000eb0:	0800108d 	.word	0x0800108d
 8000eb4:	0800108d 	.word	0x0800108d
 8000eb8:	0800108d 	.word	0x0800108d
 8000ebc:	0800108d 	.word	0x0800108d
 8000ec0:	0800108d 	.word	0x0800108d
 8000ec4:	0800108d 	.word	0x0800108d
 8000ec8:	0800108d 	.word	0x0800108d
 8000ecc:	0800108d 	.word	0x0800108d
 8000ed0:	0800108d 	.word	0x0800108d
 8000ed4:	0800108d 	.word	0x0800108d
 8000ed8:	0800108d 	.word	0x0800108d
 8000edc:	0800108d 	.word	0x0800108d
 8000ee0:	0800108d 	.word	0x0800108d
 8000ee4:	0800108d 	.word	0x0800108d
 8000ee8:	0800108d 	.word	0x0800108d
 8000eec:	0800108d 	.word	0x0800108d
 8000ef0:	08000f51 	.word	0x08000f51
 8000ef4:	08000f99 	.word	0x08000f99
 8000ef8:	08000fe1 	.word	0x08000fe1
 8000efc:	08001029 	.word	0x08001029
 8000f00:	0800105b 	.word	0x0800105b
	{
		case data_format_e8B:
			buffer[1] = *(uint8_t*)data_list[id].data ;
 8000f04:	7bfa      	ldrb	r2, [r7, #15]
 8000f06:	496d      	ldr	r1, [pc, #436]	; (80010bc <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000f08:	4613      	mov	r3, r2
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	4413      	add	r3, r2
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	440b      	add	r3, r1
 8000f12:	3304      	adds	r3, #4
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	7812      	ldrb	r2, [r2, #0]
 8000f1c:	701a      	strb	r2, [r3, #0]
			break;
 8000f1e:	e0b6      	b.n	800108e <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e8B_PWM:
			break;
		case data_format_e8B_FLOAT_0D:
			tmp_float = *(float*)data_list[id].data ;
 8000f20:	7bfa      	ldrb	r2, [r7, #15]
 8000f22:	4966      	ldr	r1, [pc, #408]	; (80010bc <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000f24:	4613      	mov	r3, r2
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	4413      	add	r3, r2
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	440b      	add	r3, r1
 8000f2e:	3304      	adds	r3, #4
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	613b      	str	r3, [r7, #16]
			buffer[1] = (int8_t)tmp_float;
 8000f36:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f3e:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f42:	793b      	ldrb	r3, [r7, #4]
 8000f44:	b25a      	sxtb	r2, r3
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	b2d2      	uxtb	r2, r2
 8000f4c:	701a      	strb	r2, [r3, #0]
			break;
 8000f4e:	e09e      	b.n	800108e <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e8B_FLOAT_1D:
			break;
		case data_format_e16B:
			break;
		case data_format_e16B_FLOAT_1D:
			tmp_float = *(float*)data_list[id].data;
 8000f50:	7bfa      	ldrb	r2, [r7, #15]
 8000f52:	495a      	ldr	r1, [pc, #360]	; (80010bc <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000f54:	4613      	mov	r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	4413      	add	r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	440b      	add	r3, r1
 8000f5e:	3304      	adds	r3, #4
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 10;
 8000f66:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f6a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000f6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f76:	ee17 3a90 	vmov	r3, s15
 8000f7a:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8000f7c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f80:	121b      	asrs	r3, r3, #8
 8000f82:	b21a      	sxth	r2, r3
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	3301      	adds	r3, #1
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	3302      	adds	r3, #2
 8000f90:	8afa      	ldrh	r2, [r7, #22]
 8000f92:	b2d2      	uxtb	r2, r2
 8000f94:	701a      	strb	r2, [r3, #0]
			break;
 8000f96:	e07a      	b.n	800108e <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e16B_FLOAT_2D:
			tmp_float = *(float*)data_list[id].data;
 8000f98:	7bfa      	ldrb	r2, [r7, #15]
 8000f9a:	4948      	ldr	r1, [pc, #288]	; (80010bc <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	3304      	adds	r3, #4
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 100;
 8000fae:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fb2:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80010c0 <DATA_LOGGER_Get_Data_Value+0x260>
 8000fb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fbe:	ee17 3a90 	vmov	r3, s15
 8000fc2:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8000fc4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000fc8:	121b      	asrs	r3, r3, #8
 8000fca:	b21a      	sxth	r2, r3
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	b2d2      	uxtb	r2, r2
 8000fd2:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	3302      	adds	r3, #2
 8000fd8:	8afa      	ldrh	r2, [r7, #22]
 8000fda:	b2d2      	uxtb	r2, r2
 8000fdc:	701a      	strb	r2, [r3, #0]
			break;
 8000fde:	e056      	b.n	800108e <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e16B_FLOAT_3D:
			tmp_float = *(float*)data_list[id].data;
 8000fe0:	7bfa      	ldrb	r2, [r7, #15]
 8000fe2:	4936      	ldr	r1, [pc, #216]	; (80010bc <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	4413      	add	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	440b      	add	r3, r1
 8000fee:	3304      	adds	r3, #4
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 1000;
 8000ff6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ffa:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80010c4 <DATA_LOGGER_Get_Data_Value+0x264>
 8000ffe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001002:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001006:	ee17 3a90 	vmov	r3, s15
 800100a:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 800100c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001010:	121b      	asrs	r3, r3, #8
 8001012:	b21a      	sxth	r2, r3
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	3301      	adds	r3, #1
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	3302      	adds	r3, #2
 8001020:	8afa      	ldrh	r2, [r7, #22]
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	701a      	strb	r2, [r3, #0]
			break;
 8001026:	e032      	b.n	800108e <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e16B_UINT16:
			tmp_16 = *(uint16_t*)data_list[id].data ;
 8001028:	7bfa      	ldrb	r2, [r7, #15]
 800102a:	4924      	ldr	r1, [pc, #144]	; (80010bc <DATA_LOGGER_Get_Data_Value+0x25c>)
 800102c:	4613      	mov	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4413      	add	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	440b      	add	r3, r1
 8001036:	3304      	adds	r3, #4
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	881b      	ldrh	r3, [r3, #0]
 800103c:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 800103e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001042:	121b      	asrs	r3, r3, #8
 8001044:	b21a      	sxth	r2, r3
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	3301      	adds	r3, #1
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	3302      	adds	r3, #2
 8001052:	8afa      	ldrh	r2, [r7, #22]
 8001054:	b2d2      	uxtb	r2, r2
 8001056:	701a      	strb	r2, [r3, #0]
			break;
 8001058:	e019      	b.n	800108e <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e16B_INT16:
			tmp_16 = *(int16_t*)data_list[id].data ;
 800105a:	7bfa      	ldrb	r2, [r7, #15]
 800105c:	4917      	ldr	r1, [pc, #92]	; (80010bc <DATA_LOGGER_Get_Data_Value+0x25c>)
 800105e:	4613      	mov	r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4413      	add	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	440b      	add	r3, r1
 8001068:	3304      	adds	r3, #4
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8001070:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001074:	121b      	asrs	r3, r3, #8
 8001076:	b21a      	sxth	r2, r3
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	3301      	adds	r3, #1
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	3302      	adds	r3, #2
 8001084:	8afa      	ldrh	r2, [r7, #22]
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	701a      	strb	r2, [r3, #0]
			break;
 800108a:	e000      	b.n	800108e <DATA_LOGGER_Get_Data_Value+0x22e>
		default:
			break;
 800108c:	bf00      	nop
	}
	/* Length of the data array */
	return (data_list[id].format / 20) + 1;
 800108e:	7bfa      	ldrb	r2, [r7, #15]
 8001090:	490a      	ldr	r1, [pc, #40]	; (80010bc <DATA_LOGGER_Get_Data_Value+0x25c>)
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	440b      	add	r3, r1
 800109c:	3309      	adds	r3, #9
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	4a09      	ldr	r2, [pc, #36]	; (80010c8 <DATA_LOGGER_Get_Data_Value+0x268>)
 80010a2:	fba2 2303 	umull	r2, r3, r2, r3
 80010a6:	091b      	lsrs	r3, r3, #4
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	3301      	adds	r3, #1
 80010ac:	b2db      	uxtb	r3, r3
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	371c      	adds	r7, #28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000174 	.word	0x20000174
 80010c0:	42c80000 	.word	0x42c80000
 80010c4:	447a0000 	.word	0x447a0000
 80010c8:	cccccccd 	.word	0xcccccccd

080010cc <DATA_LOGGER_Get_Data_Config>:
 * @param id Id of the data
 * @param buffer Buffer array to write the configuration into
 * @return Number of bytes we wrote in the buffer
 */
uint8_t DATA_LOGGER_Get_Data_Config(data_id_e id, uint8_t * buffer)
{
 80010cc:	b590      	push	{r4, r7, lr}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	6039      	str	r1, [r7, #0]
 80010d6:	71fb      	strb	r3, [r7, #7]
	/* We send a configuration so it must start with 0xFF */
	buffer[0] = 0xFF;
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	22ff      	movs	r2, #255	; 0xff
 80010dc:	701a      	strb	r2, [r3, #0]
	/* Then we put the length of the name */
	buffer[1] = data_list[id].len_name;
 80010de:	79fa      	ldrb	r2, [r7, #7]
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	1c59      	adds	r1, r3, #1
 80010e4:	4828      	ldr	r0, [pc, #160]	; (8001188 <DATA_LOGGER_Get_Data_Config+0xbc>)
 80010e6:	4613      	mov	r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	4413      	add	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4403      	add	r3, r0
 80010f0:	3310      	adds	r3, #16
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	700b      	strb	r3, [r1, #0]
	/* Then we write the data format */
	buffer[2] = data_list[id].format;
 80010f6:	79fa      	ldrb	r2, [r7, #7]
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	1c99      	adds	r1, r3, #2
 80010fc:	4822      	ldr	r0, [pc, #136]	; (8001188 <DATA_LOGGER_Get_Data_Config+0xbc>)
 80010fe:	4613      	mov	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	4413      	add	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4403      	add	r3, r0
 8001108:	3309      	adds	r3, #9
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	700b      	strb	r3, [r1, #0]
	/* Then the id of the data */
	buffer[3] = id;
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	3303      	adds	r3, #3
 8001112:	79fa      	ldrb	r2, [r7, #7]
 8001114:	701a      	strb	r2, [r3, #0]
	/* When the data is used as output, we add 128 to the id */
	if(data_list[id].use_format == use_format_eAS_INPUT)
 8001116:	79fa      	ldrb	r2, [r7, #7]
 8001118:	491b      	ldr	r1, [pc, #108]	; (8001188 <DATA_LOGGER_Get_Data_Config+0xbc>)
 800111a:	4613      	mov	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4413      	add	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	440b      	add	r3, r1
 8001124:	3311      	adds	r3, #17
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b02      	cmp	r3, #2
 800112a:	d107      	bne.n	800113c <DATA_LOGGER_Get_Data_Config+0x70>
	{
		buffer[3] += 128 ;
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	3303      	adds	r3, #3
 8001130:	781a      	ldrb	r2, [r3, #0]
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	3303      	adds	r3, #3
 8001136:	3a80      	subs	r2, #128	; 0x80
 8001138:	b2d2      	uxtb	r2, r2
 800113a:	701a      	strb	r2, [r3, #0]
	}
	/* Finally we write the name */
	memcpy(&buffer[4], data_list[id].name, data_list[id].len_name);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	1d18      	adds	r0, r3, #4
 8001140:	79fa      	ldrb	r2, [r7, #7]
 8001142:	4911      	ldr	r1, [pc, #68]	; (8001188 <DATA_LOGGER_Get_Data_Config+0xbc>)
 8001144:	4613      	mov	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4413      	add	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	440b      	add	r3, r1
 800114e:	330c      	adds	r3, #12
 8001150:	6819      	ldr	r1, [r3, #0]
 8001152:	79fa      	ldrb	r2, [r7, #7]
 8001154:	4c0c      	ldr	r4, [pc, #48]	; (8001188 <DATA_LOGGER_Get_Data_Config+0xbc>)
 8001156:	4613      	mov	r3, r2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4413      	add	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	4423      	add	r3, r4
 8001160:	3310      	adds	r3, #16
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	f009 fa13 	bl	800a590 <memcpy>

	return 4 + data_list[id].len_name ;
 800116a:	79fa      	ldrb	r2, [r7, #7]
 800116c:	4906      	ldr	r1, [pc, #24]	; (8001188 <DATA_LOGGER_Get_Data_Config+0xbc>)
 800116e:	4613      	mov	r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	4413      	add	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	440b      	add	r3, r1
 8001178:	3310      	adds	r3, #16
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	3304      	adds	r3, #4
 800117e:	b2db      	uxtb	r3, r3
}
 8001180:	4618      	mov	r0, r3
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	bd90      	pop	{r4, r7, pc}
 8001188:	20000174 	.word	0x20000174

0800118c <DATA_LOGGER_Get_Data>:
 * @brief Get data
 * @param id Id of the data
 * @return pointer to the data structure with the corresponding ID
 */
data_t * DATA_LOGGER_Get_Data(data_id_e id)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	71fb      	strb	r3, [r7, #7]
	return &data_list[id];
 8001196:	79fa      	ldrb	r2, [r7, #7]
 8001198:	4613      	mov	r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4413      	add	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4a03      	ldr	r2, [pc, #12]	; (80011b0 <DATA_LOGGER_Get_Data+0x24>)
 80011a2:	4413      	add	r3, r2
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	20000174 	.word	0x20000174

080011b4 <push_data_to_uart>:
 * @brief Add the start byte and checksum to a message
 * @param buffer Data array to send
 * @param len Number of bytes to send
 */
void push_data_to_uart(uint8_t * buffer, uint8_t len)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b098      	sub	sp, #96	; 0x60
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	70fb      	strb	r3, [r7, #3]
	uint8_t buffer_new[80];
	uint32_t checksum = 0 ;
 80011c0:	2300      	movs	r3, #0
 80011c2:	65fb      	str	r3, [r7, #92]	; 0x5c
	buffer_new[0] = '$';
 80011c4:	2324      	movs	r3, #36	; 0x24
 80011c6:	723b      	strb	r3, [r7, #8]
	for(uint8_t b = 0; b < len; b++)
 80011c8:	2300      	movs	r3, #0
 80011ca:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80011ce:	e01d      	b.n	800120c <push_data_to_uart+0x58>
	{
		buffer_new[1 + b] = buffer[b];
 80011d0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	441a      	add	r2, r3
 80011d8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80011dc:	3301      	adds	r3, #1
 80011de:	7812      	ldrb	r2, [r2, #0]
 80011e0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80011e4:	440b      	add	r3, r1
 80011e6:	f803 2c58 	strb.w	r2, [r3, #-88]
		checksum += (uint32_t)buffer_new[1 + b];
 80011ea:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80011ee:	3301      	adds	r3, #1
 80011f0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80011f4:	4413      	add	r3, r2
 80011f6:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 80011fa:	461a      	mov	r2, r3
 80011fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011fe:	4413      	add	r3, r2
 8001200:	65fb      	str	r3, [r7, #92]	; 0x5c
	for(uint8_t b = 0; b < len; b++)
 8001202:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001206:	3301      	adds	r3, #1
 8001208:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800120c:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8001210:	78fb      	ldrb	r3, [r7, #3]
 8001212:	429a      	cmp	r2, r3
 8001214:	d3dc      	bcc.n	80011d0 <push_data_to_uart+0x1c>
	}
	buffer_new[1 + len] = (uint8_t)(checksum % 256) ;
 8001216:	78fb      	ldrb	r3, [r7, #3]
 8001218:	3301      	adds	r3, #1
 800121a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001222:	440b      	add	r3, r1
 8001224:	f803 2c58 	strb.w	r2, [r3, #-88]
	UART_Transmit(UART_TELEMETRY, buffer_new, len+2);
 8001228:	78fb      	ldrb	r3, [r7, #3]
 800122a:	b29b      	uxth	r3, r3
 800122c:	3302      	adds	r3, #2
 800122e:	b29a      	uxth	r2, r3
 8001230:	f107 0308 	add.w	r3, r7, #8
 8001234:	4619      	mov	r1, r3
 8001236:	2000      	movs	r0, #0
 8001238:	f001 f84a 	bl	80022d0 <UART_Transmit>
}
 800123c:	bf00      	nop
 800123e:	3760      	adds	r7, #96	; 0x60
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <state_machine>:

/*
 * @brief data logger state machine
 */
static void state_machine(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
	/* Time management for periodic transmissions */
	static uint32_t next_time_state_machine = 0;
	static uint32_t current_period = PERIODE_PING;
	uint32_t time_ms = HAL_GetTick();
 800124a:	f002 fd95 	bl	8003d78 <HAL_GetTick>
 800124e:	60b8      	str	r0, [r7, #8]
	if(time_ms < next_time_state_machine)
 8001250:	4b79      	ldr	r3, [pc, #484]	; (8001438 <state_machine+0x1f4>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	68ba      	ldr	r2, [r7, #8]
 8001256:	429a      	cmp	r2, r3
 8001258:	f0c0 80e8 	bcc.w	800142c <state_machine+0x1e8>
	{
		return;
	}
	next_time_state_machine = time_ms + current_period;
 800125c:	4b77      	ldr	r3, [pc, #476]	; (800143c <state_machine+0x1f8>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	4413      	add	r3, r2
 8001264:	4a74      	ldr	r2, [pc, #464]	; (8001438 <state_machine+0x1f4>)
 8001266:	6013      	str	r3, [r2, #0]

	/* State machine variables */
	static data_logger_state_e state = data_logger_state_eIDLE;
	static data_logger_state_e previous_state = data_logger_state_eTRANSMIT_CONFIG ;
	bool_e entrance = previous_state != state ;
 8001268:	4b75      	ldr	r3, [pc, #468]	; (8001440 <state_machine+0x1fc>)
 800126a:	781a      	ldrb	r2, [r3, #0]
 800126c:	4b75      	ldr	r3, [pc, #468]	; (8001444 <state_machine+0x200>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	429a      	cmp	r2, r3
 8001272:	bf14      	ite	ne
 8001274:	2301      	movne	r3, #1
 8001276:	2300      	moveq	r3, #0
 8001278:	b2db      	uxtb	r3, r3
 800127a:	71fb      	strb	r3, [r7, #7]
	previous_state = state ;
 800127c:	4b71      	ldr	r3, [pc, #452]	; (8001444 <state_machine+0x200>)
 800127e:	781a      	ldrb	r2, [r3, #0]
 8001280:	4b6f      	ldr	r3, [pc, #444]	; (8001440 <state_machine+0x1fc>)
 8001282:	701a      	strb	r2, [r3, #0]
	switch(state)
 8001284:	4b6f      	ldr	r3, [pc, #444]	; (8001444 <state_machine+0x200>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b02      	cmp	r3, #2
 800128a:	f000 8092 	beq.w	80013b2 <state_machine+0x16e>
 800128e:	2b02      	cmp	r3, #2
 8001290:	f300 80cf 	bgt.w	8001432 <state_machine+0x1ee>
 8001294:	2b00      	cmp	r3, #0
 8001296:	d002      	beq.n	800129e <state_machine+0x5a>
 8001298:	2b01      	cmp	r3, #1
 800129a:	d043      	beq.n	8001324 <state_machine+0xe0>
 800129c:	e0c9      	b.n	8001432 <state_machine+0x1ee>
	{
		case data_logger_state_eIDLE :
			if(entrance)
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d003      	beq.n	80012ac <state_machine+0x68>
			{
				/* When we are in the idle mode, we just ping the device at PERIODE_PING µs interval */
				current_period = PERIODE_PING;
 80012a4:	4b65      	ldr	r3, [pc, #404]	; (800143c <state_machine+0x1f8>)
 80012a6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80012aa:	601a      	str	r2, [r3, #0]
			}

			tmp_len = DATA_LOGGER_Get_Data_Config(data_id_eCONFIG_REQUEST, tmp);
 80012ac:	4966      	ldr	r1, [pc, #408]	; (8001448 <state_machine+0x204>)
 80012ae:	2000      	movs	r0, #0
 80012b0:	f7ff ff0c 	bl	80010cc <DATA_LOGGER_Get_Data_Config>
 80012b4:	4603      	mov	r3, r0
 80012b6:	461a      	mov	r2, r3
 80012b8:	4b64      	ldr	r3, [pc, #400]	; (800144c <state_machine+0x208>)
 80012ba:	701a      	strb	r2, [r3, #0]
			push_data_to_uart(tmp, tmp_len);
 80012bc:	4b63      	ldr	r3, [pc, #396]	; (800144c <state_machine+0x208>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	4619      	mov	r1, r3
 80012c2:	4861      	ldr	r0, [pc, #388]	; (8001448 <state_machine+0x204>)
 80012c4:	f7ff ff76 	bl	80011b4 <push_data_to_uart>

			/* If we receive a configuration request, we change the state */
			if(send_config_flag)
 80012c8:	4b61      	ldr	r3, [pc, #388]	; (8001450 <state_machine+0x20c>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d01a      	beq.n	8001306 <state_machine+0xc2>
			{
				/* Reset flags */
				start_flag = FALSE;
 80012d0:	4b60      	ldr	r3, [pc, #384]	; (8001454 <state_machine+0x210>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	701a      	strb	r2, [r3, #0]
				stop_flag = FALSE;
 80012d6:	4b60      	ldr	r3, [pc, #384]	; (8001458 <state_machine+0x214>)
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]
				send_config_flag = FALSE;
 80012dc:	4b5c      	ldr	r3, [pc, #368]	; (8001450 <state_machine+0x20c>)
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
				/* Change the state */
				/* We send the configuration only if we did not send it before */
				if(config_not_sent)
 80012e2:	4b5e      	ldr	r3, [pc, #376]	; (800145c <state_machine+0x218>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d009      	beq.n	80012fe <state_machine+0xba>
				{
					id_init_counter = 0;
 80012ea:	4b5d      	ldr	r3, [pc, #372]	; (8001460 <state_machine+0x21c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
					is_any_data_used = FALSE;
 80012f0:	4b5c      	ldr	r3, [pc, #368]	; (8001464 <state_machine+0x220>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]
					state = data_logger_state_eTRANSMIT_CONFIG;
 80012f6:	4b53      	ldr	r3, [pc, #332]	; (8001444 <state_machine+0x200>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	701a      	strb	r2, [r3, #0]
			{
				start_flag = FALSE;
				stop_flag = FALSE;
				state = data_logger_state_eLOG;
			}
			break;
 80012fc:	e098      	b.n	8001430 <state_machine+0x1ec>
					state = data_logger_state_eLOG;
 80012fe:	4b51      	ldr	r3, [pc, #324]	; (8001444 <state_machine+0x200>)
 8001300:	2202      	movs	r2, #2
 8001302:	701a      	strb	r2, [r3, #0]
			break;
 8001304:	e094      	b.n	8001430 <state_machine+0x1ec>
			else if(start_flag)
 8001306:	4b53      	ldr	r3, [pc, #332]	; (8001454 <state_machine+0x210>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 8090 	beq.w	8001430 <state_machine+0x1ec>
				start_flag = FALSE;
 8001310:	4b50      	ldr	r3, [pc, #320]	; (8001454 <state_machine+0x210>)
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]
				stop_flag = FALSE;
 8001316:	4b50      	ldr	r3, [pc, #320]	; (8001458 <state_machine+0x214>)
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
				state = data_logger_state_eLOG;
 800131c:	4b49      	ldr	r3, [pc, #292]	; (8001444 <state_machine+0x200>)
 800131e:	2202      	movs	r2, #2
 8001320:	701a      	strb	r2, [r3, #0]
			break;
 8001322:	e085      	b.n	8001430 <state_machine+0x1ec>

		case data_logger_state_eTRANSMIT_CONFIG :
			/* Change the data logger task period to send configuration slowly */
			if(entrance)
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00a      	beq.n	8001340 <state_machine+0xfc>
			{
				current_period = PERIODE_CONFIG_SEND;
 800132a:	4b44      	ldr	r3, [pc, #272]	; (800143c <state_machine+0x1f8>)
 800132c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001330:	601a      	str	r2, [r3, #0]
			}
			while(data_list[id_init_counter].use_format == use_format_eNOT_USED && id_init_counter < data_id_eCOUNT)
 8001332:	e005      	b.n	8001340 <state_machine+0xfc>
			{
				id_init_counter ++ ;
 8001334:	4b4a      	ldr	r3, [pc, #296]	; (8001460 <state_machine+0x21c>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	3301      	adds	r3, #1
 800133a:	b2da      	uxtb	r2, r3
 800133c:	4b48      	ldr	r3, [pc, #288]	; (8001460 <state_machine+0x21c>)
 800133e:	701a      	strb	r2, [r3, #0]
			while(data_list[id_init_counter].use_format == use_format_eNOT_USED && id_init_counter < data_id_eCOUNT)
 8001340:	4b47      	ldr	r3, [pc, #284]	; (8001460 <state_machine+0x21c>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	4619      	mov	r1, r3
 8001346:	4a48      	ldr	r2, [pc, #288]	; (8001468 <state_machine+0x224>)
 8001348:	460b      	mov	r3, r1
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	440b      	add	r3, r1
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	3311      	adds	r3, #17
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d103      	bne.n	8001362 <state_machine+0x11e>
 800135a:	4b41      	ldr	r3, [pc, #260]	; (8001460 <state_machine+0x21c>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b0e      	cmp	r3, #14
 8001360:	d9e8      	bls.n	8001334 <state_machine+0xf0>
			}
			if(id_init_counter < data_id_eCOUNT)
 8001362:	4b3f      	ldr	r3, [pc, #252]	; (8001460 <state_machine+0x21c>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b0e      	cmp	r3, #14
 8001368:	d817      	bhi.n	800139a <state_machine+0x156>
			{
				is_any_data_used = TRUE;
 800136a:	4b3e      	ldr	r3, [pc, #248]	; (8001464 <state_machine+0x220>)
 800136c:	2201      	movs	r2, #1
 800136e:	701a      	strb	r2, [r3, #0]
				/* Get data configuration */
				tmp_len = DATA_LOGGER_Get_Data_Config(id_init_counter++, tmp);
 8001370:	4b3b      	ldr	r3, [pc, #236]	; (8001460 <state_machine+0x21c>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	1c5a      	adds	r2, r3, #1
 8001376:	b2d1      	uxtb	r1, r2
 8001378:	4a39      	ldr	r2, [pc, #228]	; (8001460 <state_machine+0x21c>)
 800137a:	7011      	strb	r1, [r2, #0]
 800137c:	4932      	ldr	r1, [pc, #200]	; (8001448 <state_machine+0x204>)
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fea4 	bl	80010cc <DATA_LOGGER_Get_Data_Config>
 8001384:	4603      	mov	r3, r0
 8001386:	461a      	mov	r2, r3
 8001388:	4b30      	ldr	r3, [pc, #192]	; (800144c <state_machine+0x208>)
 800138a:	701a      	strb	r2, [r3, #0]
				/* Send the configuration */
				push_data_to_uart(tmp, tmp_len);
 800138c:	4b2f      	ldr	r3, [pc, #188]	; (800144c <state_machine+0x208>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	4619      	mov	r1, r3
 8001392:	482d      	ldr	r0, [pc, #180]	; (8001448 <state_machine+0x204>)
 8001394:	f7ff ff0e 	bl	80011b4 <push_data_to_uart>
				else
				{
					state = data_logger_state_eIDLE ;
				}
			}
			break;
 8001398:	e04b      	b.n	8001432 <state_machine+0x1ee>
				if(is_any_data_used)
 800139a:	4b32      	ldr	r3, [pc, #200]	; (8001464 <state_machine+0x220>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <state_machine+0x166>
					state = data_logger_state_eLOG ;
 80013a2:	4b28      	ldr	r3, [pc, #160]	; (8001444 <state_machine+0x200>)
 80013a4:	2202      	movs	r2, #2
 80013a6:	701a      	strb	r2, [r3, #0]
			break;
 80013a8:	e043      	b.n	8001432 <state_machine+0x1ee>
					state = data_logger_state_eIDLE ;
 80013aa:	4b26      	ldr	r3, [pc, #152]	; (8001444 <state_machine+0x200>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]
			break;
 80013b0:	e03f      	b.n	8001432 <state_machine+0x1ee>

		case data_logger_state_eLOG:
			if(entrance)
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d003      	beq.n	80013c0 <state_machine+0x17c>
			{
				current_period = PERIODE_SEND;
 80013b8:	4b20      	ldr	r3, [pc, #128]	; (800143c <state_machine+0x1f8>)
 80013ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013be:	601a      	str	r2, [r3, #0]
			}
			if(stop_flag)
 80013c0:	4b25      	ldr	r3, [pc, #148]	; (8001458 <state_machine+0x214>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d002      	beq.n	80013ce <state_machine+0x18a>
			{
				state = data_logger_state_eIDLE;
 80013c8:	4b1e      	ldr	r3, [pc, #120]	; (8001444 <state_machine+0x200>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	701a      	strb	r2, [r3, #0]
			}
			for(uint8_t d = 0; d < data_id_eCOUNT; d++)
 80013ce:	2300      	movs	r3, #0
 80013d0:	73fb      	strb	r3, [r7, #15]
 80013d2:	e027      	b.n	8001424 <state_machine+0x1e0>
			{
				if(data_list[d].use_format == use_format_eAS_OUTPUT && (data_list[d].data != NULL))
 80013d4:	7bfa      	ldrb	r2, [r7, #15]
 80013d6:	4924      	ldr	r1, [pc, #144]	; (8001468 <state_machine+0x224>)
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	440b      	add	r3, r1
 80013e2:	3311      	adds	r3, #17
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d119      	bne.n	800141e <state_machine+0x1da>
 80013ea:	7bfa      	ldrb	r2, [r7, #15]
 80013ec:	491e      	ldr	r1, [pc, #120]	; (8001468 <state_machine+0x224>)
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	440b      	add	r3, r1
 80013f8:	3304      	adds	r3, #4
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d00e      	beq.n	800141e <state_machine+0x1da>
				{
					tmp_len = DATA_LOGGER_Get_Data_Value(d, tmp);
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	4911      	ldr	r1, [pc, #68]	; (8001448 <state_machine+0x204>)
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fd2b 	bl	8000e60 <DATA_LOGGER_Get_Data_Value>
 800140a:	4603      	mov	r3, r0
 800140c:	461a      	mov	r2, r3
 800140e:	4b0f      	ldr	r3, [pc, #60]	; (800144c <state_machine+0x208>)
 8001410:	701a      	strb	r2, [r3, #0]
					push_data_to_uart(tmp, tmp_len);
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <state_machine+0x208>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	4619      	mov	r1, r3
 8001418:	480b      	ldr	r0, [pc, #44]	; (8001448 <state_machine+0x204>)
 800141a:	f7ff fecb 	bl	80011b4 <push_data_to_uart>
			for(uint8_t d = 0; d < data_id_eCOUNT; d++)
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	3301      	adds	r3, #1
 8001422:	73fb      	strb	r3, [r7, #15]
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	2b0e      	cmp	r3, #14
 8001428:	d9d4      	bls.n	80013d4 <state_machine+0x190>
				}
			}
			break;
 800142a:	e002      	b.n	8001432 <state_machine+0x1ee>
		return;
 800142c:	bf00      	nop
 800142e:	e000      	b.n	8001432 <state_machine+0x1ee>
			break;
 8001430:	bf00      	nop
	}
}
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	200002dc 	.word	0x200002dc
 800143c:	20000094 	.word	0x20000094
 8001440:	20000098 	.word	0x20000098
 8001444:	200002e0 	.word	0x200002e0
 8001448:	200002a4 	.word	0x200002a4
 800144c:	200002d6 	.word	0x200002d6
 8001450:	200002a1 	.word	0x200002a1
 8001454:	200002a0 	.word	0x200002a0
 8001458:	200002a2 	.word	0x200002a2
 800145c:	20000090 	.word	0x20000090
 8001460:	200002d7 	.word	0x200002d7
 8001464:	200002d8 	.word	0x200002d8
 8001468:	20000174 	.word	0x20000174

0800146c <parse_uart>:

/*
 * @brief Parse incoming bytes
 */
static void parse_uart(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
	static uint8_t trame[20] = { 0 };
	static uint8_t nb_byte_to_buffer = 0;
	static uint8_t buffer_counter = 0;
	static uint16_t checksum = 0;
	/* Check for available data */
	if(UART_Availables(UART_TELEMETRY))
 8001472:	2000      	movs	r0, #0
 8001474:	f000 fe82 	bl	800217c <UART_Availables>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d06c      	beq.n	8001558 <parse_uart+0xec>
	{
		uint8_t c;
		UART_Get(UART_TELEMETRY, &c);
 800147e:	1dfb      	adds	r3, r7, #7
 8001480:	4619      	mov	r1, r3
 8001482:	2000      	movs	r0, #0
 8001484:	f000 fe88 	bl	8002198 <UART_Get>
		switch(state)
 8001488:	4b35      	ldr	r3, [pc, #212]	; (8001560 <parse_uart+0xf4>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b03      	cmp	r3, #3
 800148e:	d863      	bhi.n	8001558 <parse_uart+0xec>
 8001490:	a201      	add	r2, pc, #4	; (adr r2, 8001498 <parse_uart+0x2c>)
 8001492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001496:	bf00      	nop
 8001498:	080014a9 	.word	0x080014a9
 800149c:	080014b7 	.word	0x080014b7
 80014a0:	080014fd 	.word	0x080014fd
 80014a4:	08001535 	.word	0x08001535
		{
			case parser_state_eSTART_BYTE:
				if(c == '$')
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	2b24      	cmp	r3, #36	; 0x24
 80014ac:	d14f      	bne.n	800154e <parse_uart+0xe2>
				{
					state = parser_state_eID;
 80014ae:	4b2c      	ldr	r3, [pc, #176]	; (8001560 <parse_uart+0xf4>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	701a      	strb	r2, [r3, #0]
				}
				break;
 80014b4:	e04b      	b.n	800154e <parse_uart+0xe2>

			case parser_state_eID:
				if(c < data_id_eCOUNT)
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	2b0e      	cmp	r3, #14
 80014ba:	d84a      	bhi.n	8001552 <parse_uart+0xe6>
				{
					/* Store the id for later use */
					trame[0] = c;
 80014bc:	79fa      	ldrb	r2, [r7, #7]
 80014be:	4b29      	ldr	r3, [pc, #164]	; (8001564 <parse_uart+0xf8>)
 80014c0:	701a      	strb	r2, [r3, #0]
					/* Reset the checksum */
					checksum = c;
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	4b28      	ldr	r3, [pc, #160]	; (8001568 <parse_uart+0xfc>)
 80014c8:	801a      	strh	r2, [r3, #0]
					/* Get the data length according to the data format */
					nb_byte_to_buffer = (DATA_LOGGER_Get_Data(c)->format / 20);
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fe5d 	bl	800118c <DATA_LOGGER_Get_Data>
 80014d2:	4603      	mov	r3, r0
 80014d4:	7a5b      	ldrb	r3, [r3, #9]
 80014d6:	4a25      	ldr	r2, [pc, #148]	; (800156c <parse_uart+0x100>)
 80014d8:	fba2 2303 	umull	r2, r3, r2, r3
 80014dc:	091b      	lsrs	r3, r3, #4
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	4b23      	ldr	r3, [pc, #140]	; (8001570 <parse_uart+0x104>)
 80014e2:	701a      	strb	r2, [r3, #0]
					if(nb_byte_to_buffer)
 80014e4:	4b22      	ldr	r3, [pc, #136]	; (8001570 <parse_uart+0x104>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <parse_uart+0x88>
					{
						state = parser_state_eDATA;
 80014ec:	4b1c      	ldr	r3, [pc, #112]	; (8001560 <parse_uart+0xf4>)
 80014ee:	2202      	movs	r2, #2
 80014f0:	701a      	strb	r2, [r3, #0]
					else
					{
						state = parser_state_eCHECKSUM;
					}
				}
				break;
 80014f2:	e02e      	b.n	8001552 <parse_uart+0xe6>
						state = parser_state_eCHECKSUM;
 80014f4:	4b1a      	ldr	r3, [pc, #104]	; (8001560 <parse_uart+0xf4>)
 80014f6:	2203      	movs	r2, #3
 80014f8:	701a      	strb	r2, [r3, #0]
				break;
 80014fa:	e02a      	b.n	8001552 <parse_uart+0xe6>
			case parser_state_eDATA:
				trame[1+buffer_counter++] = c;
 80014fc:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <parse_uart+0x108>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	1c5a      	adds	r2, r3, #1
 8001502:	b2d1      	uxtb	r1, r2
 8001504:	4a1b      	ldr	r2, [pc, #108]	; (8001574 <parse_uart+0x108>)
 8001506:	7011      	strb	r1, [r2, #0]
 8001508:	3301      	adds	r3, #1
 800150a:	79f9      	ldrb	r1, [r7, #7]
 800150c:	4a15      	ldr	r2, [pc, #84]	; (8001564 <parse_uart+0xf8>)
 800150e:	54d1      	strb	r1, [r2, r3]
				checksum += c;
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	b29a      	uxth	r2, r3
 8001514:	4b14      	ldr	r3, [pc, #80]	; (8001568 <parse_uart+0xfc>)
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	4413      	add	r3, r2
 800151a:	b29a      	uxth	r2, r3
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <parse_uart+0xfc>)
 800151e:	801a      	strh	r2, [r3, #0]
				if(buffer_counter == nb_byte_to_buffer)
 8001520:	4b14      	ldr	r3, [pc, #80]	; (8001574 <parse_uart+0x108>)
 8001522:	781a      	ldrb	r2, [r3, #0]
 8001524:	4b12      	ldr	r3, [pc, #72]	; (8001570 <parse_uart+0x104>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	429a      	cmp	r2, r3
 800152a:	d114      	bne.n	8001556 <parse_uart+0xea>
				{
					state = parser_state_eCHECKSUM;
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <parse_uart+0xf4>)
 800152e:	2203      	movs	r2, #3
 8001530:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001532:	e010      	b.n	8001556 <parse_uart+0xea>
			case parser_state_eCHECKSUM:
				if(checksum == c)
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	b29a      	uxth	r2, r3
 8001538:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <parse_uart+0xfc>)
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	429a      	cmp	r2, r3
 800153e:	d102      	bne.n	8001546 <parse_uart+0xda>
				{
					DATA_LOGGER_Reception(trame);
 8001540:	4808      	ldr	r0, [pc, #32]	; (8001564 <parse_uart+0xf8>)
 8001542:	f7ff fbd3 	bl	8000cec <DATA_LOGGER_Reception>
				}
				state = parser_state_eSTART_BYTE;
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <parse_uart+0xf4>)
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]
				break;
 800154c:	e004      	b.n	8001558 <parse_uart+0xec>
				break;
 800154e:	bf00      	nop
 8001550:	e002      	b.n	8001558 <parse_uart+0xec>
				break;
 8001552:	bf00      	nop
 8001554:	e000      	b.n	8001558 <parse_uart+0xec>
				break;
 8001556:	bf00      	nop


		}
	}

}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	200002e1 	.word	0x200002e1
 8001564:	200002e4 	.word	0x200002e4
 8001568:	200002f8 	.word	0x200002f8
 800156c:	cccccccd 	.word	0xcccccccd
 8001570:	200002fa 	.word	0x200002fa
 8001574:	200002fb 	.word	0x200002fb

08001578 <HIGH_LEVEL_Init>:
#define RADIO_TO_ANGLE_RATE_YAW	((float)1.0f)

static high_level_t high_level = { 0 };

void HIGH_LEVEL_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
	high_level.radio = RADIO_Get_Channel();
 800157c:	f001 f8d8 	bl	8002730 <RADIO_Get_Channel>
 8001580:	4603      	mov	r3, r0
 8001582:	4a0c      	ldr	r2, [pc, #48]	; (80015b4 <HIGH_LEVEL_Init+0x3c>)
 8001584:	6053      	str	r3, [r2, #4]
	high_level.target_angle = CONTROLLER_Get_Angle_Target();
 8001586:	f7ff fa45 	bl	8000a14 <CONTROLLER_Get_Angle_Target>
 800158a:	4603      	mov	r3, r0
 800158c:	4a09      	ldr	r2, [pc, #36]	; (80015b4 <HIGH_LEVEL_Init+0x3c>)
 800158e:	60d3      	str	r3, [r2, #12]
	high_level.target_angle_speed = CONTROLLER_Get_Angle_Speed_Target();
 8001590:	f7ff fa4a 	bl	8000a28 <CONTROLLER_Get_Angle_Speed_Target>
 8001594:	4603      	mov	r3, r0
 8001596:	4a07      	ldr	r2, [pc, #28]	; (80015b4 <HIGH_LEVEL_Init+0x3c>)
 8001598:	6113      	str	r3, [r2, #16]
	high_level.power = MOTOR_MIXER_Get_Power_Input_Ptr();
 800159a:	f000 fa55 	bl	8001a48 <MOTOR_MIXER_Get_Power_Input_Ptr>
 800159e:	4603      	mov	r3, r0
 80015a0:	4a04      	ldr	r2, [pc, #16]	; (80015b4 <HIGH_LEVEL_Init+0x3c>)
 80015a2:	6093      	str	r3, [r2, #8]
	high_level.state = high_level_eGROUND;
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <HIGH_LEVEL_Init+0x3c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	701a      	strb	r2, [r3, #0]
	high_level.previous_state = high_level_eACCRO;
 80015aa:	4b02      	ldr	r3, [pc, #8]	; (80015b4 <HIGH_LEVEL_Init+0x3c>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	705a      	strb	r2, [r3, #1]
}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	200002fc 	.word	0x200002fc

080015b8 <HIGH_LEVEL_Process_Main>:

void HIGH_LEVEL_Process_Main(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
	/* entrance is used to know if we changed of state */
	bool_e entrance = high_level.state == high_level.previous_state;
 80015be:	4b98      	ldr	r3, [pc, #608]	; (8001820 <HIGH_LEVEL_Process_Main+0x268>)
 80015c0:	781a      	ldrb	r2, [r3, #0]
 80015c2:	4b97      	ldr	r3, [pc, #604]	; (8001820 <HIGH_LEVEL_Process_Main+0x268>)
 80015c4:	785b      	ldrb	r3, [r3, #1]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	bf0c      	ite	eq
 80015ca:	2301      	moveq	r3, #1
 80015cc:	2300      	movne	r3, #0
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	71fb      	strb	r3, [r7, #7]
	high_level.previous_state = high_level.state;
 80015d2:	4b93      	ldr	r3, [pc, #588]	; (8001820 <HIGH_LEVEL_Process_Main+0x268>)
 80015d4:	781a      	ldrb	r2, [r3, #0]
 80015d6:	4b92      	ldr	r3, [pc, #584]	; (8001820 <HIGH_LEVEL_Process_Main+0x268>)
 80015d8:	705a      	strb	r2, [r3, #1]
	/* state machine */
	bool_e is_fly_allowed = MPU_Is_Ok();						/* We need the gyro to fly */
 80015da:	f001 fa5b 	bl	8002a94 <MPU_Is_Ok>
 80015de:	4603      	mov	r3, r0
 80015e0:	71bb      	strb	r3, [r7, #6]
	is_fly_allowed &= high_level.radio[4] > 1500;				/* And the "Arm" switch */
 80015e2:	4b8f      	ldr	r3, [pc, #572]	; (8001820 <HIGH_LEVEL_Process_Main+0x268>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	3308      	adds	r3, #8
 80015e8:	881b      	ldrh	r3, [r3, #0]
 80015ea:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80015ee:	4293      	cmp	r3, r2
 80015f0:	bf8c      	ite	hi
 80015f2:	2301      	movhi	r3, #1
 80015f4:	2300      	movls	r3, #0
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	b25a      	sxtb	r2, r3
 80015fa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80015fe:	4013      	ands	r3, r2
 8001600:	b25b      	sxtb	r3, r3
 8001602:	71bb      	strb	r3, [r7, #6]
	is_fly_allowed &= (RADIO_Get_State() == radio_state_eOK);	/* We also need a working radio so it doesn't fly away */
 8001604:	f001 f888 	bl	8002718 <RADIO_Get_State>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	bf0c      	ite	eq
 800160e:	2301      	moveq	r3, #1
 8001610:	2300      	movne	r3, #0
 8001612:	b2db      	uxtb	r3, r3
 8001614:	b25a      	sxtb	r2, r3
 8001616:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800161a:	4013      	ands	r3, r2
 800161c:	b25b      	sxtb	r3, r3
 800161e:	71bb      	strb	r3, [r7, #6]
	switch(high_level.state)
 8001620:	4b7f      	ldr	r3, [pc, #508]	; (8001820 <HIGH_LEVEL_Process_Main+0x268>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b02      	cmp	r3, #2
 8001626:	d039      	beq.n	800169c <HIGH_LEVEL_Process_Main+0xe4>
 8001628:	2b02      	cmp	r3, #2
 800162a:	f300 80f4 	bgt.w	8001816 <HIGH_LEVEL_Process_Main+0x25e>
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HIGH_LEVEL_Process_Main+0x82>
 8001632:	2b01      	cmp	r3, #1
 8001634:	f000 808e 	beq.w	8001754 <HIGH_LEVEL_Process_Main+0x19c>
			{
				high_level.state = high_level_eANGLE;
			}
			break;
	}
}
 8001638:	e0ed      	b.n	8001816 <HIGH_LEVEL_Process_Main+0x25e>
			if(entrance)
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d007      	beq.n	8001650 <HIGH_LEVEL_Process_Main+0x98>
				CONTROLLER_Set_State(controller_state_eDISABLED);
 8001640:	2000      	movs	r0, #0
 8001642:	f7ff f9d5 	bl	80009f0 <CONTROLLER_Set_State>
				*high_level.power = 0;
 8001646:	4b76      	ldr	r3, [pc, #472]	; (8001820 <HIGH_LEVEL_Process_Main+0x268>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f04f 0200 	mov.w	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
			if(is_fly_allowed && high_level.radio[2] < 1050)
 8001650:	79bb      	ldrb	r3, [r7, #6]
 8001652:	2b00      	cmp	r3, #0
 8001654:	f000 80da 	beq.w	800180c <HIGH_LEVEL_Process_Main+0x254>
 8001658:	4b71      	ldr	r3, [pc, #452]	; (8001820 <HIGH_LEVEL_Process_Main+0x268>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	3304      	adds	r3, #4
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	f240 4219 	movw	r2, #1049	; 0x419
 8001664:	4293      	cmp	r3, r2
 8001666:	f200 80d1 	bhi.w	800180c <HIGH_LEVEL_Process_Main+0x254>
				if(high_level.radio[5] < 1300)
 800166a:	4b6d      	ldr	r3, [pc, #436]	; (8001820 <HIGH_LEVEL_Process_Main+0x268>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	330a      	adds	r3, #10
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	f240 5213 	movw	r2, #1299	; 0x513
 8001676:	4293      	cmp	r3, r2
 8001678:	d803      	bhi.n	8001682 <HIGH_LEVEL_Process_Main+0xca>
					high_level.state = high_level_eANGLE;
 800167a:	4b69      	ldr	r3, [pc, #420]	; (8001820 <HIGH_LEVEL_Process_Main+0x268>)
 800167c:	2202      	movs	r2, #2
 800167e:	701a      	strb	r2, [r3, #0]
			break;
 8001680:	e0c4      	b.n	800180c <HIGH_LEVEL_Process_Main+0x254>
				else if(high_level.radio[5] > 1300)
 8001682:	4b67      	ldr	r3, [pc, #412]	; (8001820 <HIGH_LEVEL_Process_Main+0x268>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	330a      	adds	r3, #10
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	f240 5214 	movw	r2, #1300	; 0x514
 800168e:	4293      	cmp	r3, r2
 8001690:	f240 80bc 	bls.w	800180c <HIGH_LEVEL_Process_Main+0x254>
					high_level.state = high_level_eACCRO;
 8001694:	4b62      	ldr	r3, [pc, #392]	; (8001820 <HIGH_LEVEL_Process_Main+0x268>)
 8001696:	2201      	movs	r2, #1
 8001698:	701a      	strb	r2, [r3, #0]
			break;
 800169a:	e0b7      	b.n	800180c <HIGH_LEVEL_Process_Main+0x254>
			if(entrance)
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d002      	beq.n	80016a8 <HIGH_LEVEL_Process_Main+0xf0>
				CONTROLLER_Set_State(controller_state_eANGLE);
 80016a2:	2002      	movs	r0, #2
 80016a4:	f7ff f9a4 	bl	80009f0 <CONTROLLER_Set_State>
			high_level.target_angle[axe_eROLL] = (float)(high_level.radio[0]-1500) * RADIO_TO_ANGLE;
 80016a8:	4b5d      	ldr	r3, [pc, #372]	; (8001820 <HIGH_LEVEL_Process_Main+0x268>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80016b2:	ee07 3a90 	vmov	s15, r3
 80016b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ba:	4b59      	ldr	r3, [pc, #356]	; (8001820 <HIGH_LEVEL_Process_Main+0x268>)
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8001824 <HIGH_LEVEL_Process_Main+0x26c>
 80016c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016c6:	edc3 7a00 	vstr	s15, [r3]
			high_level.target_angle[axe_ePITCH] = (float)(high_level.radio[1]-1500) * RADIO_TO_ANGLE;
 80016ca:	4b55      	ldr	r3, [pc, #340]	; (8001820 <HIGH_LEVEL_Process_Main+0x268>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	3302      	adds	r3, #2
 80016d0:	881b      	ldrh	r3, [r3, #0]
 80016d2:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80016d6:	ee07 3a90 	vmov	s15, r3
 80016da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016de:	4b50      	ldr	r3, [pc, #320]	; (8001820 <HIGH_LEVEL_Process_Main+0x268>)
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	3304      	adds	r3, #4
 80016e4:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001824 <HIGH_LEVEL_Process_Main+0x26c>
 80016e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ec:	edc3 7a00 	vstr	s15, [r3]
			high_level.target_angle_speed[axe_eYAW] = -(float)(high_level.radio[3]-1500) * RADIO_TO_ANGLE_RATE_YAW;
 80016f0:	4b4b      	ldr	r3, [pc, #300]	; (8001820 <HIGH_LEVEL_Process_Main+0x268>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	3306      	adds	r3, #6
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80016fc:	ee07 3a90 	vmov	s15, r3
 8001700:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001704:	4b46      	ldr	r3, [pc, #280]	; (8001820 <HIGH_LEVEL_Process_Main+0x268>)
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	3308      	adds	r3, #8
 800170a:	eef1 7a67 	vneg.f32	s15, s15
 800170e:	edc3 7a00 	vstr	s15, [r3]
			*high_level.power = high_level.radio[2]-1000;
 8001712:	4b43      	ldr	r3, [pc, #268]	; (8001820 <HIGH_LEVEL_Process_Main+0x268>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	3304      	adds	r3, #4
 8001718:	881b      	ldrh	r3, [r3, #0]
 800171a:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 800171e:	4b40      	ldr	r3, [pc, #256]	; (8001820 <HIGH_LEVEL_Process_Main+0x268>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	ee07 2a90 	vmov	s15, r2
 8001726:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800172a:	edc3 7a00 	vstr	s15, [r3]
			if(!is_fly_allowed)
 800172e:	79bb      	ldrb	r3, [r7, #6]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d103      	bne.n	800173c <HIGH_LEVEL_Process_Main+0x184>
				high_level.state = high_level_eGROUND;
 8001734:	4b3a      	ldr	r3, [pc, #232]	; (8001820 <HIGH_LEVEL_Process_Main+0x268>)
 8001736:	2200      	movs	r2, #0
 8001738:	701a      	strb	r2, [r3, #0]
			break;
 800173a:	e069      	b.n	8001810 <HIGH_LEVEL_Process_Main+0x258>
			else if(high_level.radio[5] > 1300)
 800173c:	4b38      	ldr	r3, [pc, #224]	; (8001820 <HIGH_LEVEL_Process_Main+0x268>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	330a      	adds	r3, #10
 8001742:	881b      	ldrh	r3, [r3, #0]
 8001744:	f240 5214 	movw	r2, #1300	; 0x514
 8001748:	4293      	cmp	r3, r2
 800174a:	d961      	bls.n	8001810 <HIGH_LEVEL_Process_Main+0x258>
				high_level.state = high_level_eACCRO;
 800174c:	4b34      	ldr	r3, [pc, #208]	; (8001820 <HIGH_LEVEL_Process_Main+0x268>)
 800174e:	2201      	movs	r2, #1
 8001750:	701a      	strb	r2, [r3, #0]
			break;
 8001752:	e05d      	b.n	8001810 <HIGH_LEVEL_Process_Main+0x258>
			if(entrance)
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d002      	beq.n	8001760 <HIGH_LEVEL_Process_Main+0x1a8>
				CONTROLLER_Set_State(controller_state_eSPEED);
 800175a:	2001      	movs	r0, #1
 800175c:	f7ff f948 	bl	80009f0 <CONTROLLER_Set_State>
			high_level.target_angle_speed[axe_eROLL] = (float)(high_level.radio[0]-1500) * RADIO_TO_ANGLE_RATE;
 8001760:	4b2f      	ldr	r3, [pc, #188]	; (8001820 <HIGH_LEVEL_Process_Main+0x268>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	881b      	ldrh	r3, [r3, #0]
 8001766:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800176a:	ee07 3a90 	vmov	s15, r3
 800176e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001772:	4b2b      	ldr	r3, [pc, #172]	; (8001820 <HIGH_LEVEL_Process_Main+0x268>)
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001828 <HIGH_LEVEL_Process_Main+0x270>
 800177a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800177e:	edc3 7a00 	vstr	s15, [r3]
			high_level.target_angle_speed[axe_ePITCH] = (float)(high_level.radio[1]-1500) * RADIO_TO_ANGLE_RATE;
 8001782:	4b27      	ldr	r3, [pc, #156]	; (8001820 <HIGH_LEVEL_Process_Main+0x268>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	3302      	adds	r3, #2
 8001788:	881b      	ldrh	r3, [r3, #0]
 800178a:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800178e:	ee07 3a90 	vmov	s15, r3
 8001792:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001796:	4b22      	ldr	r3, [pc, #136]	; (8001820 <HIGH_LEVEL_Process_Main+0x268>)
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	3304      	adds	r3, #4
 800179c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001828 <HIGH_LEVEL_Process_Main+0x270>
 80017a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017a4:	edc3 7a00 	vstr	s15, [r3]
			high_level.target_angle_speed[axe_eYAW] = -(float)(high_level.radio[3]-1500) * RADIO_TO_ANGLE_RATE_YAW;
 80017a8:	4b1d      	ldr	r3, [pc, #116]	; (8001820 <HIGH_LEVEL_Process_Main+0x268>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	3306      	adds	r3, #6
 80017ae:	881b      	ldrh	r3, [r3, #0]
 80017b0:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80017b4:	ee07 3a90 	vmov	s15, r3
 80017b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017bc:	4b18      	ldr	r3, [pc, #96]	; (8001820 <HIGH_LEVEL_Process_Main+0x268>)
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	3308      	adds	r3, #8
 80017c2:	eef1 7a67 	vneg.f32	s15, s15
 80017c6:	edc3 7a00 	vstr	s15, [r3]
			*high_level.power = high_level.radio[2]-1000;
 80017ca:	4b15      	ldr	r3, [pc, #84]	; (8001820 <HIGH_LEVEL_Process_Main+0x268>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	3304      	adds	r3, #4
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 80017d6:	4b12      	ldr	r3, [pc, #72]	; (8001820 <HIGH_LEVEL_Process_Main+0x268>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	ee07 2a90 	vmov	s15, r2
 80017de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017e2:	edc3 7a00 	vstr	s15, [r3]
			if(!is_fly_allowed)
 80017e6:	79bb      	ldrb	r3, [r7, #6]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d103      	bne.n	80017f4 <HIGH_LEVEL_Process_Main+0x23c>
				high_level.state = high_level_eGROUND;
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <HIGH_LEVEL_Process_Main+0x268>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]
			break;
 80017f2:	e00f      	b.n	8001814 <HIGH_LEVEL_Process_Main+0x25c>
			else if(high_level.radio[5] < 1300)
 80017f4:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <HIGH_LEVEL_Process_Main+0x268>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	330a      	adds	r3, #10
 80017fa:	881b      	ldrh	r3, [r3, #0]
 80017fc:	f240 5213 	movw	r2, #1299	; 0x513
 8001800:	4293      	cmp	r3, r2
 8001802:	d807      	bhi.n	8001814 <HIGH_LEVEL_Process_Main+0x25c>
				high_level.state = high_level_eANGLE;
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <HIGH_LEVEL_Process_Main+0x268>)
 8001806:	2202      	movs	r2, #2
 8001808:	701a      	strb	r2, [r3, #0]
			break;
 800180a:	e003      	b.n	8001814 <HIGH_LEVEL_Process_Main+0x25c>
			break;
 800180c:	bf00      	nop
 800180e:	e002      	b.n	8001816 <HIGH_LEVEL_Process_Main+0x25e>
			break;
 8001810:	bf00      	nop
 8001812:	e000      	b.n	8001816 <HIGH_LEVEL_Process_Main+0x25e>
			break;
 8001814:	bf00      	nop
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200002fc 	.word	0x200002fc
 8001824:	3d4ccccd 	.word	0x3d4ccccd
 8001828:	3e4ccccd 	.word	0x3e4ccccd

0800182c <Led_main_ms>:

/*
 * @brief called by main_ms, turn the led on or off to follow the sequence
 */
void Led_main_ms(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
	for (uint8_t led = 0; led < led_eCOUNT; led++)
 8001832:	2300      	movs	r3, #0
 8001834:	71fb      	strb	r3, [r7, #7]
 8001836:	e043      	b.n	80018c0 <Led_main_ms+0x94>
	{
		if (current_sequence[led] != led_sequence_eSEQUENCE_DISABLED)
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	4a25      	ldr	r2, [pc, #148]	; (80018d0 <Led_main_ms+0xa4>)
 800183c:	5cd3      	ldrb	r3, [r2, r3]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d03b      	beq.n	80018ba <Led_main_ms+0x8e>
		{
			counter[led]++;
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	4a23      	ldr	r2, [pc, #140]	; (80018d4 <Led_main_ms+0xa8>)
 8001846:	5cd2      	ldrb	r2, [r2, r3]
 8001848:	3201      	adds	r2, #1
 800184a:	b2d1      	uxtb	r1, r2
 800184c:	4a21      	ldr	r2, [pc, #132]	; (80018d4 <Led_main_ms+0xa8>)
 800184e:	54d1      	strb	r1, [r2, r3]
			if (counter[led] == LED_PERIOD)
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	4a20      	ldr	r2, [pc, #128]	; (80018d4 <Led_main_ms+0xa8>)
 8001854:	5cd3      	ldrb	r3, [r2, r3]
 8001856:	2bc8      	cmp	r3, #200	; 0xc8
 8001858:	d12f      	bne.n	80018ba <Led_main_ms+0x8e>
			{
				uint8_t current_bit = 1	<< ((SEQUENCE_LENGTH - 1) - sequence_index[led]);
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	4a1e      	ldr	r2, [pc, #120]	; (80018d8 <Led_main_ms+0xac>)
 800185e:	5cd3      	ldrb	r3, [r2, r3]
 8001860:	f1c3 0307 	rsb	r3, r3, #7
 8001864:	2201      	movs	r2, #1
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	71bb      	strb	r3, [r7, #6]
				if (current_sequence[led] & current_bit)
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	4a18      	ldr	r2, [pc, #96]	; (80018d0 <Led_main_ms+0xa4>)
 8001870:	5cd2      	ldrb	r2, [r2, r3]
 8001872:	79bb      	ldrb	r3, [r7, #6]
 8001874:	4013      	ands	r3, r2
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b00      	cmp	r3, #0
 800187a:	d005      	beq.n	8001888 <Led_main_ms+0x5c>
				{
					Led_Set(led, LED_HIGH);
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	2101      	movs	r1, #1
 8001880:	4618      	mov	r0, r3
 8001882:	f000 f82b 	bl	80018dc <Led_Set>
 8001886:	e004      	b.n	8001892 <Led_main_ms+0x66>
				}
				else
				{
					Led_Set(led, LED_LOW);
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	2100      	movs	r1, #0
 800188c:	4618      	mov	r0, r3
 800188e:	f000 f825 	bl	80018dc <Led_Set>
				}
				sequence_index[led]++;
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	4a10      	ldr	r2, [pc, #64]	; (80018d8 <Led_main_ms+0xac>)
 8001896:	5cd2      	ldrb	r2, [r2, r3]
 8001898:	3201      	adds	r2, #1
 800189a:	b2d1      	uxtb	r1, r2
 800189c:	4a0e      	ldr	r2, [pc, #56]	; (80018d8 <Led_main_ms+0xac>)
 800189e:	54d1      	strb	r1, [r2, r3]
				counter[led] = 0;
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	4a0c      	ldr	r2, [pc, #48]	; (80018d4 <Led_main_ms+0xa8>)
 80018a4:	2100      	movs	r1, #0
 80018a6:	54d1      	strb	r1, [r2, r3]
				if (sequence_index[led] == 8)
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	4a0b      	ldr	r2, [pc, #44]	; (80018d8 <Led_main_ms+0xac>)
 80018ac:	5cd3      	ldrb	r3, [r2, r3]
 80018ae:	2b08      	cmp	r3, #8
 80018b0:	d103      	bne.n	80018ba <Led_main_ms+0x8e>
				{
					sequence_index[led] = 0;
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	4a08      	ldr	r2, [pc, #32]	; (80018d8 <Led_main_ms+0xac>)
 80018b6:	2100      	movs	r1, #0
 80018b8:	54d1      	strb	r1, [r2, r3]
	for (uint8_t led = 0; led < led_eCOUNT; led++)
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	3301      	adds	r3, #1
 80018be:	71fb      	strb	r3, [r7, #7]
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d9b8      	bls.n	8001838 <Led_main_ms+0xc>
				}
			}
		}
	}
}
 80018c6:	bf00      	nop
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000310 	.word	0x20000310
 80018d4:	20000318 	.word	0x20000318
 80018d8:	20000314 	.word	0x20000314

080018dc <Led_Set>:
/*
 * @brief Set the state of the led
 * @param state State of the led to set
 */
void Led_Set(led_t led, LED_state_e state)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	460a      	mov	r2, r1
 80018e6:	71fb      	strb	r3, [r7, #7]
 80018e8:	4613      	mov	r3, r2
 80018ea:	71bb      	strb	r3, [r7, #6]
	switch (led)
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d002      	beq.n	80018f8 <Led_Set+0x1c>
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d008      	beq.n	8001908 <Led_Set+0x2c>
			break;
		case led_eSTATE2:
			GPIO_Write_Pin(LED_STATE2_GPIO_Port, LED_STATE2_Pin, (GPIO_state_e) state);
			break;
		default:
			break;
 80018f6:	e00f      	b.n	8001918 <Led_Set+0x3c>
			GPIO_Write_Pin(LED_STATE_GPIO_Port, LED_STATE_Pin, (GPIO_state_e) state);
 80018f8:	79bb      	ldrb	r3, [r7, #6]
 80018fa:	461a      	mov	r2, r3
 80018fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001900:	4807      	ldr	r0, [pc, #28]	; (8001920 <Led_Set+0x44>)
 8001902:	f000 fa25 	bl	8001d50 <GPIO_Write_Pin>
			break;
 8001906:	e007      	b.n	8001918 <Led_Set+0x3c>
			GPIO_Write_Pin(LED_STATE2_GPIO_Port, LED_STATE2_Pin, (GPIO_state_e) state);
 8001908:	79bb      	ldrb	r3, [r7, #6]
 800190a:	461a      	mov	r2, r3
 800190c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001910:	4803      	ldr	r0, [pc, #12]	; (8001920 <Led_Set+0x44>)
 8001912:	f000 fa1d 	bl	8001d50 <GPIO_Write_Pin>
			break;
 8001916:	bf00      	nop
	}
}
 8001918:	bf00      	nop
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40020800 	.word	0x40020800

08001924 <Led_Set_Sequence>:
/*
 * @brief Set the current led sequence
 * @param sequence The new sequence
 */
void Led_Set_Sequence(led_t led, led_sequence_e sequence)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	460a      	mov	r2, r1
 800192e:	71fb      	strb	r3, [r7, #7]
 8001930:	4613      	mov	r3, r2
 8001932:	71bb      	strb	r3, [r7, #6]
	if(current_sequence[led] == sequence)
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	4a0c      	ldr	r2, [pc, #48]	; (8001968 <Led_Set_Sequence+0x44>)
 8001938:	5cd3      	ldrb	r3, [r2, r3]
 800193a:	79ba      	ldrb	r2, [r7, #6]
 800193c:	429a      	cmp	r2, r3
 800193e:	d00c      	beq.n	800195a <Led_Set_Sequence+0x36>
	{
		return;
	}
	/* Change the current led sequence */
	current_sequence[led] = sequence;
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	4909      	ldr	r1, [pc, #36]	; (8001968 <Led_Set_Sequence+0x44>)
 8001944:	79ba      	ldrb	r2, [r7, #6]
 8001946:	54ca      	strb	r2, [r1, r3]
	/* Reset counters to start from the beginning of the sequence */
	counter[led] = 0;
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	4a08      	ldr	r2, [pc, #32]	; (800196c <Led_Set_Sequence+0x48>)
 800194c:	2100      	movs	r1, #0
 800194e:	54d1      	strb	r1, [r2, r3]
	sequence_index[led] = 0;
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	4a07      	ldr	r2, [pc, #28]	; (8001970 <Led_Set_Sequence+0x4c>)
 8001954:	2100      	movs	r1, #0
 8001956:	54d1      	strb	r1, [r2, r3]
 8001958:	e000      	b.n	800195c <Led_Set_Sequence+0x38>
		return;
 800195a:	bf00      	nop
}
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	20000310 	.word	0x20000310
 800196c:	20000318 	.word	0x20000318
 8001970:	20000314 	.word	0x20000314

08001974 <MOTOR_MIXER_Process>:
#include "Motor_Mixer.h"

static motor_mixer_t motor_mixer = { 0 };

void MOTOR_MIXER_Process(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
	motor_mixer.output[motor_eFRONT_LEFT] = 	motor_mixer.input_power + motor_mixer.input_angle[axe_eROLL] - motor_mixer.input_angle[axe_ePITCH] - motor_mixer.input_angle[axe_eYAW];
 8001978:	4b2c      	ldr	r3, [pc, #176]	; (8001a2c <MOTOR_MIXER_Process+0xb8>)
 800197a:	ed93 7a03 	vldr	s14, [r3, #12]
 800197e:	4b2b      	ldr	r3, [pc, #172]	; (8001a2c <MOTOR_MIXER_Process+0xb8>)
 8001980:	edd3 7a00 	vldr	s15, [r3]
 8001984:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001988:	4b28      	ldr	r3, [pc, #160]	; (8001a2c <MOTOR_MIXER_Process+0xb8>)
 800198a:	edd3 7a01 	vldr	s15, [r3, #4]
 800198e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001992:	4b26      	ldr	r3, [pc, #152]	; (8001a2c <MOTOR_MIXER_Process+0xb8>)
 8001994:	edd3 7a02 	vldr	s15, [r3, #8]
 8001998:	ee77 7a67 	vsub.f32	s15, s14, s15
 800199c:	4b23      	ldr	r3, [pc, #140]	; (8001a2c <MOTOR_MIXER_Process+0xb8>)
 800199e:	edc3 7a07 	vstr	s15, [r3, #28]
	motor_mixer.output[motor_eFRONT_RIGHT] = 	motor_mixer.input_power - motor_mixer.input_angle[axe_eROLL] - motor_mixer.input_angle[axe_ePITCH] + motor_mixer.input_angle[axe_eYAW];
 80019a2:	4b22      	ldr	r3, [pc, #136]	; (8001a2c <MOTOR_MIXER_Process+0xb8>)
 80019a4:	ed93 7a03 	vldr	s14, [r3, #12]
 80019a8:	4b20      	ldr	r3, [pc, #128]	; (8001a2c <MOTOR_MIXER_Process+0xb8>)
 80019aa:	edd3 7a00 	vldr	s15, [r3]
 80019ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019b2:	4b1e      	ldr	r3, [pc, #120]	; (8001a2c <MOTOR_MIXER_Process+0xb8>)
 80019b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80019b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019bc:	4b1b      	ldr	r3, [pc, #108]	; (8001a2c <MOTOR_MIXER_Process+0xb8>)
 80019be:	edd3 7a02 	vldr	s15, [r3, #8]
 80019c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c6:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <MOTOR_MIXER_Process+0xb8>)
 80019c8:	edc3 7a05 	vstr	s15, [r3, #20]
	motor_mixer.output[motor_eBACK_RIGHT] = 	motor_mixer.input_power - motor_mixer.input_angle[axe_eROLL] + motor_mixer.input_angle[axe_ePITCH] - motor_mixer.input_angle[axe_eYAW];
 80019cc:	4b17      	ldr	r3, [pc, #92]	; (8001a2c <MOTOR_MIXER_Process+0xb8>)
 80019ce:	ed93 7a03 	vldr	s14, [r3, #12]
 80019d2:	4b16      	ldr	r3, [pc, #88]	; (8001a2c <MOTOR_MIXER_Process+0xb8>)
 80019d4:	edd3 7a00 	vldr	s15, [r3]
 80019d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019dc:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <MOTOR_MIXER_Process+0xb8>)
 80019de:	edd3 7a01 	vldr	s15, [r3, #4]
 80019e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019e6:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <MOTOR_MIXER_Process+0xb8>)
 80019e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80019ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019f0:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <MOTOR_MIXER_Process+0xb8>)
 80019f2:	edc3 7a04 	vstr	s15, [r3, #16]
	motor_mixer.output[motor_eBACK_LEFT] = 		motor_mixer.input_power + motor_mixer.input_angle[axe_eROLL] + motor_mixer.input_angle[axe_ePITCH] + motor_mixer.input_angle[axe_eYAW];
 80019f6:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <MOTOR_MIXER_Process+0xb8>)
 80019f8:	ed93 7a03 	vldr	s14, [r3, #12]
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <MOTOR_MIXER_Process+0xb8>)
 80019fe:	edd3 7a00 	vldr	s15, [r3]
 8001a02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <MOTOR_MIXER_Process+0xb8>)
 8001a08:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <MOTOR_MIXER_Process+0xb8>)
 8001a12:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a1a:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <MOTOR_MIXER_Process+0xb8>)
 8001a1c:	edc3 7a06 	vstr	s15, [r3, #24]

	MOTOR_Set(motor_mixer.output);
 8001a20:	4803      	ldr	r0, [pc, #12]	; (8001a30 <MOTOR_MIXER_Process+0xbc>)
 8001a22:	f000 f863 	bl	8001aec <MOTOR_Set>
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	2000031c 	.word	0x2000031c
 8001a30:	2000032c 	.word	0x2000032c

08001a34 <MOTOR_MIXER_Get_Angle_Input_Ptr>:
float * MOTOR_MIXER_Get_Angle_Input_Ptr(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
	return motor_mixer.input_angle;
 8001a38:	4b02      	ldr	r3, [pc, #8]	; (8001a44 <MOTOR_MIXER_Get_Angle_Input_Ptr+0x10>)
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	2000031c 	.word	0x2000031c

08001a48 <MOTOR_MIXER_Get_Power_Input_Ptr>:
float * MOTOR_MIXER_Get_Power_Input_Ptr(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
	return &motor_mixer.input_power;
 8001a4c:	4b02      	ldr	r3, [pc, #8]	; (8001a58 <MOTOR_MIXER_Get_Power_Input_Ptr+0x10>)
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	20000328 	.word	0x20000328

08001a5c <MOTOR_Init>:
static bool_e flag_stop = FALSE;



void MOTOR_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
	 TIMER_Start_All_Channels(TIMER_MOTOR);
 8001a60:	2000      	movs	r0, #0
 8001a62:	f000 fa0b 	bl	8001e7c <TIMER_Start_All_Channels>
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
	...

08001a6c <MOTOR_Process>:

void MOTOR_Process(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
	if(flag_stop)
 8001a70:	4b1a      	ldr	r3, [pc, #104]	; (8001adc <MOTOR_Process+0x70>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d009      	beq.n	8001a8c <MOTOR_Process+0x20>
	{
		/* Clear flag */
		flag_stop = FALSE;
 8001a78:	4b18      	ldr	r3, [pc, #96]	; (8001adc <MOTOR_Process+0x70>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	701a      	strb	r2, [r3, #0]
		/* Stop pwm on every channel */
		TIMER_Stop_All_Channels(TIMER_MOTOR);
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f000 fa28 	bl	8001ed4 <TIMER_Stop_All_Channels>
		motor.is_enabled = FALSE;
 8001a84:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <MOTOR_Process+0x74>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	701a      	strb	r2, [r3, #0]
 8001a8a:	e01c      	b.n	8001ac6 <MOTOR_Process+0x5a>
	}
	else if(flag_start)
 8001a8c:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <MOTOR_Process+0x78>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d018      	beq.n	8001ac6 <MOTOR_Process+0x5a>
	{
		/* Clear flag */
		flag_start = FALSE;
 8001a94:	4b13      	ldr	r3, [pc, #76]	; (8001ae4 <MOTOR_Process+0x78>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	701a      	strb	r2, [r3, #0]
		/* Reset target to 0 */
		motor.output[0] = 1000;
 8001a9a:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <MOTOR_Process+0x74>)
 8001a9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001aa0:	805a      	strh	r2, [r3, #2]
		motor.output[1] = 1000;
 8001aa2:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <MOTOR_Process+0x74>)
 8001aa4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001aa8:	809a      	strh	r2, [r3, #4]
		motor.output[2] = 1000;
 8001aaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ae0 <MOTOR_Process+0x74>)
 8001aac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ab0:	80da      	strh	r2, [r3, #6]
		motor.output[3] = 1000;
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <MOTOR_Process+0x74>)
 8001ab4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ab8:	811a      	strh	r2, [r3, #8]
		/* Start the pwm */
		TIMER_Start_All_Channels(TIMER_MOTOR);
 8001aba:	2000      	movs	r0, #0
 8001abc:	f000 f9de 	bl	8001e7c <TIMER_Start_All_Channels>
		motor.is_enabled = TRUE;
 8001ac0:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <MOTOR_Process+0x74>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	701a      	strb	r2, [r3, #0]
	}
	if(motor.is_enabled)
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <MOTOR_Process+0x74>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <MOTOR_Process+0x6a>
	{
		TIMER_Set_All_CCR(TIMER_MOTOR, motor.output);
 8001ace:	4906      	ldr	r1, [pc, #24]	; (8001ae8 <MOTOR_Process+0x7c>)
 8001ad0:	2000      	movs	r0, #0
 8001ad2:	f000 fa2b 	bl	8001f2c <TIMER_Set_All_CCR>
	}
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000346 	.word	0x20000346
 8001ae0:	2000033c 	.word	0x2000033c
 8001ae4:	20000099 	.word	0x20000099
 8001ae8:	2000033e 	.word	0x2000033e

08001aec <MOTOR_Set>:
/*
 * @brief update motor target values
 * @param array of new float values
 */
void MOTOR_Set(float * target)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
	target[0] = (uint16_t)MAX(target[0], 0);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	edd3 7a00 	vldr	s15, [r3]
 8001afa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b02:	dd0c      	ble.n	8001b1e <MOTOR_Set+0x32>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	edd3 7a00 	vldr	s15, [r3]
 8001b0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b0e:	ee17 3a90 	vmov	r3, s15
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	ee07 3a90 	vmov	s15, r3
 8001b18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b1c:	e001      	b.n	8001b22 <MOTOR_Set+0x36>
 8001b1e:	eddf 7a89 	vldr	s15, [pc, #548]	; 8001d44 <MOTOR_Set+0x258>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	edc3 7a00 	vstr	s15, [r3]
	target[1] = (uint16_t)MAX(target[1], 0);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3304      	adds	r3, #4
 8001b2c:	edd3 7a00 	vldr	s15, [r3]
 8001b30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b38:	dd0d      	ble.n	8001b56 <MOTOR_Set+0x6a>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	edd3 7a00 	vldr	s15, [r3]
 8001b42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b46:	ee17 3a90 	vmov	r3, s15
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	ee07 3a90 	vmov	s15, r3
 8001b50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b54:	e001      	b.n	8001b5a <MOTOR_Set+0x6e>
 8001b56:	eddf 7a7b 	vldr	s15, [pc, #492]	; 8001d44 <MOTOR_Set+0x258>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	edc3 7a00 	vstr	s15, [r3]
	target[2] = (uint16_t)MAX(target[2], 0);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3308      	adds	r3, #8
 8001b66:	edd3 7a00 	vldr	s15, [r3]
 8001b6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b72:	dd0d      	ble.n	8001b90 <MOTOR_Set+0xa4>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3308      	adds	r3, #8
 8001b78:	edd3 7a00 	vldr	s15, [r3]
 8001b7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b80:	ee17 3a90 	vmov	r3, s15
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	ee07 3a90 	vmov	s15, r3
 8001b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b8e:	e001      	b.n	8001b94 <MOTOR_Set+0xa8>
 8001b90:	eddf 7a6c 	vldr	s15, [pc, #432]	; 8001d44 <MOTOR_Set+0x258>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3308      	adds	r3, #8
 8001b98:	edc3 7a00 	vstr	s15, [r3]
	target[3] = (uint16_t)MAX(target[3], 0);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	330c      	adds	r3, #12
 8001ba0:	edd3 7a00 	vldr	s15, [r3]
 8001ba4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bac:	dd0d      	ble.n	8001bca <MOTOR_Set+0xde>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	330c      	adds	r3, #12
 8001bb2:	edd3 7a00 	vldr	s15, [r3]
 8001bb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bba:	ee17 3a90 	vmov	r3, s15
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	ee07 3a90 	vmov	s15, r3
 8001bc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bc8:	e001      	b.n	8001bce <MOTOR_Set+0xe2>
 8001bca:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8001d44 <MOTOR_Set+0x258>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	330c      	adds	r3, #12
 8001bd2:	edc3 7a00 	vstr	s15, [r3]

	target[0] = (uint16_t)MIN(target[0], MOTOR_SIGNAL_MAX);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	edd3 7a00 	vldr	s15, [r3]
 8001bdc:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001d48 <MOTOR_Set+0x25c>
 8001be0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be8:	dd02      	ble.n	8001bf0 <MOTOR_Set+0x104>
 8001bea:	eddf 7a57 	vldr	s15, [pc, #348]	; 8001d48 <MOTOR_Set+0x25c>
 8001bee:	e00b      	b.n	8001c08 <MOTOR_Set+0x11c>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	edd3 7a00 	vldr	s15, [r3]
 8001bf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bfa:	ee17 3a90 	vmov	r3, s15
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	ee07 3a90 	vmov	s15, r3
 8001c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	edc3 7a00 	vstr	s15, [r3]
	target[1] = (uint16_t)MIN(target[1], MOTOR_SIGNAL_MAX);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3304      	adds	r3, #4
 8001c12:	edd3 7a00 	vldr	s15, [r3]
 8001c16:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001d48 <MOTOR_Set+0x25c>
 8001c1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c22:	dd02      	ble.n	8001c2a <MOTOR_Set+0x13e>
 8001c24:	eddf 7a48 	vldr	s15, [pc, #288]	; 8001d48 <MOTOR_Set+0x25c>
 8001c28:	e00c      	b.n	8001c44 <MOTOR_Set+0x158>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	edd3 7a00 	vldr	s15, [r3]
 8001c32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c36:	ee17 3a90 	vmov	r3, s15
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	ee07 3a90 	vmov	s15, r3
 8001c40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3304      	adds	r3, #4
 8001c48:	edc3 7a00 	vstr	s15, [r3]
	target[2] = (uint16_t)MIN(target[2], MOTOR_SIGNAL_MAX);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3308      	adds	r3, #8
 8001c50:	edd3 7a00 	vldr	s15, [r3]
 8001c54:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001d48 <MOTOR_Set+0x25c>
 8001c58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c60:	dd02      	ble.n	8001c68 <MOTOR_Set+0x17c>
 8001c62:	eddf 7a39 	vldr	s15, [pc, #228]	; 8001d48 <MOTOR_Set+0x25c>
 8001c66:	e00c      	b.n	8001c82 <MOTOR_Set+0x196>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3308      	adds	r3, #8
 8001c6c:	edd3 7a00 	vldr	s15, [r3]
 8001c70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c74:	ee17 3a90 	vmov	r3, s15
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	ee07 3a90 	vmov	s15, r3
 8001c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	3308      	adds	r3, #8
 8001c86:	edc3 7a00 	vstr	s15, [r3]
	target[3] = (uint16_t)MIN(target[3], MOTOR_SIGNAL_MAX);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	330c      	adds	r3, #12
 8001c8e:	edd3 7a00 	vldr	s15, [r3]
 8001c92:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001d48 <MOTOR_Set+0x25c>
 8001c96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c9e:	dd02      	ble.n	8001ca6 <MOTOR_Set+0x1ba>
 8001ca0:	eddf 7a29 	vldr	s15, [pc, #164]	; 8001d48 <MOTOR_Set+0x25c>
 8001ca4:	e00c      	b.n	8001cc0 <MOTOR_Set+0x1d4>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	330c      	adds	r3, #12
 8001caa:	edd3 7a00 	vldr	s15, [r3]
 8001cae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cb2:	ee17 3a90 	vmov	r3, s15
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	ee07 3a90 	vmov	s15, r3
 8001cbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	330c      	adds	r3, #12
 8001cc4:	edc3 7a00 	vstr	s15, [r3]

	motor.output[0] = (uint16_t)target[0]+1000;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	edd3 7a00 	vldr	s15, [r3]
 8001cce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cd2:	ee17 3a90 	vmov	r3, s15
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	4b1b      	ldr	r3, [pc, #108]	; (8001d4c <MOTOR_Set+0x260>)
 8001ce0:	805a      	strh	r2, [r3, #2]
	motor.output[1] = (uint16_t)target[1]+1000;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	edd3 7a00 	vldr	s15, [r3]
 8001cea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cee:	ee17 3a90 	vmov	r3, s15
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	4b14      	ldr	r3, [pc, #80]	; (8001d4c <MOTOR_Set+0x260>)
 8001cfc:	809a      	strh	r2, [r3, #4]
	motor.output[2] = (uint16_t)target[2]+1000;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3308      	adds	r3, #8
 8001d02:	edd3 7a00 	vldr	s15, [r3]
 8001d06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d0a:	ee17 3a90 	vmov	r3, s15
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	4b0d      	ldr	r3, [pc, #52]	; (8001d4c <MOTOR_Set+0x260>)
 8001d18:	80da      	strh	r2, [r3, #6]
	motor.output[3] = (uint16_t)target[3]+1000;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	330c      	adds	r3, #12
 8001d1e:	edd3 7a00 	vldr	s15, [r3]
 8001d22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d26:	ee17 3a90 	vmov	r3, s15
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <MOTOR_Set+0x260>)
 8001d34:	811a      	strh	r2, [r3, #8]
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	00000000 	.word	0x00000000
 8001d48:	43fa0000 	.word	0x43fa0000
 8001d4c:	2000033c 	.word	0x2000033c

08001d50 <GPIO_Write_Pin>:
 * @param GPIOx pointer to an hal gpio handler structure
 * @param GPIO_Pin Number of the pin
 * @param state State to write to the pin
 */
void GPIO_Write_Pin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_state_e state)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	807b      	strh	r3, [r7, #2]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	707b      	strb	r3, [r7, #1]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, state);
 8001d60:	787a      	ldrb	r2, [r7, #1]
 8001d62:	887b      	ldrh	r3, [r7, #2]
 8001d64:	4619      	mov	r1, r3
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f002 ff00 	bl	8004b6c <HAL_GPIO_WritePin>
}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <I2C_Mem_Write>:

void I2C_Init(void)
{
}
HAL_StatusTypeDef I2C_Mem_Write(i2c_e i2c_id, uint8_t device_address, uint8_t mem_address, uint8_t * data, uint8_t size)
{
 8001d74:	b590      	push	{r4, r7, lr}
 8001d76:	b087      	sub	sp, #28
 8001d78:	af04      	add	r7, sp, #16
 8001d7a:	603b      	str	r3, [r7, #0]
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	71fb      	strb	r3, [r7, #7]
 8001d80:	460b      	mov	r3, r1
 8001d82:	71bb      	strb	r3, [r7, #6]
 8001d84:	4613      	mov	r3, r2
 8001d86:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Write(i2c[i2c_id].hi2c, device_address, mem_address, I2C_MEMADD_SIZE_8BIT, data, size, I2C_OPERATION_TIMEOUT);
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	4a0b      	ldr	r2, [pc, #44]	; (8001db8 <I2C_Mem_Write+0x44>)
 8001d8c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001d90:	79bb      	ldrb	r3, [r7, #6]
 8001d92:	b299      	uxth	r1, r3
 8001d94:	797b      	ldrb	r3, [r7, #5]
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	7e3b      	ldrb	r3, [r7, #24]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	240a      	movs	r4, #10
 8001d9e:	9402      	str	r4, [sp, #8]
 8001da0:	9301      	str	r3, [sp, #4]
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	2301      	movs	r3, #1
 8001da8:	f003 f83e 	bl	8004e28 <HAL_I2C_Mem_Write>
 8001dac:	4603      	mov	r3, r0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd90      	pop	{r4, r7, pc}
 8001db6:	bf00      	nop
 8001db8:	2000009c 	.word	0x2000009c

08001dbc <I2C_Mem_Read>:

HAL_StatusTypeDef I2C_Mem_Read(i2c_e i2c_id, uint8_t device_address, uint8_t mem_address, uint8_t * data, uint8_t size)
{
 8001dbc:	b590      	push	{r4, r7, lr}
 8001dbe:	b087      	sub	sp, #28
 8001dc0:	af04      	add	r7, sp, #16
 8001dc2:	603b      	str	r3, [r7, #0]
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	71fb      	strb	r3, [r7, #7]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	71bb      	strb	r3, [r7, #6]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Read(i2c[i2c_id].hi2c, device_address, mem_address, I2C_MEMADD_SIZE_8BIT, data, size, I2C_OPERATION_TIMEOUT);
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	4a0b      	ldr	r2, [pc, #44]	; (8001e00 <I2C_Mem_Read+0x44>)
 8001dd4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001dd8:	79bb      	ldrb	r3, [r7, #6]
 8001dda:	b299      	uxth	r1, r3
 8001ddc:	797b      	ldrb	r3, [r7, #5]
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	7e3b      	ldrb	r3, [r7, #24]
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	240a      	movs	r4, #10
 8001de6:	9402      	str	r4, [sp, #8]
 8001de8:	9301      	str	r3, [sp, #4]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	2301      	movs	r3, #1
 8001df0:	f003 f914 	bl	800501c <HAL_I2C_Mem_Read>
 8001df4:	4603      	mov	r3, r0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd90      	pop	{r4, r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	2000009c 	.word	0x2000009c

08001e04 <I2C_Mem_Read_Dma>:

HAL_StatusTypeDef I2C_Mem_Read_Dma(i2c_e i2c_id, uint8_t device_address, uint8_t mem_address, uint8_t * data, uint8_t size)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af02      	add	r7, sp, #8
 8001e0a:	603b      	str	r3, [r7, #0]
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	71fb      	strb	r3, [r7, #7]
 8001e10:	460b      	mov	r3, r1
 8001e12:	71bb      	strb	r3, [r7, #6]
 8001e14:	4613      	mov	r3, r2
 8001e16:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Read_DMA(i2c[i2c_id].hi2c, device_address, mem_address, I2C_MEMADD_SIZE_8BIT, data, size);
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	4a0a      	ldr	r2, [pc, #40]	; (8001e44 <I2C_Mem_Read_Dma+0x40>)
 8001e1c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001e20:	79bb      	ldrb	r3, [r7, #6]
 8001e22:	b299      	uxth	r1, r3
 8001e24:	797b      	ldrb	r3, [r7, #5]
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	7c3b      	ldrb	r3, [r7, #16]
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	9301      	str	r3, [sp, #4]
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	2301      	movs	r3, #1
 8001e34:	f003 fb18 	bl	8005468 <HAL_I2C_Mem_Read_DMA>
 8001e38:	4603      	mov	r3, r0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	2000009c 	.word	0x2000009c

08001e48 <I2C_Is_Device_Ready>:

HAL_StatusTypeDef I2C_Is_Device_Ready(i2c_e i2c_id, uint8_t device_address)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	460a      	mov	r2, r1
 8001e52:	71fb      	strb	r3, [r7, #7]
 8001e54:	4613      	mov	r3, r2
 8001e56:	71bb      	strb	r3, [r7, #6]
	return HAL_I2C_IsDeviceReady(i2c[i2c_id].hi2c, device_address, 10, 10);
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	4a07      	ldr	r2, [pc, #28]	; (8001e78 <I2C_Is_Device_Ready+0x30>)
 8001e5c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001e60:	79bb      	ldrb	r3, [r7, #6]
 8001e62:	b299      	uxth	r1, r3
 8001e64:	230a      	movs	r3, #10
 8001e66:	220a      	movs	r2, #10
 8001e68:	f003 fc92 	bl	8005790 <HAL_I2C_IsDeviceReady>
 8001e6c:	4603      	mov	r3, r0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	2000009c 	.word	0x2000009c

08001e7c <TIMER_Start_All_Channels>:
/*
 * @brief Start all channels of a timer
 * @param timer_id id of the timer
 */
void TIMER_Start_All_Channels(timer_e timer_id)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	71fb      	strb	r3, [r7, #7]
	HAL_TIM_PWM_Start(timer[timer_id].htim, TIM_CHANNEL_1);
 8001e86:	79fb      	ldrb	r3, [r7, #7]
 8001e88:	4a11      	ldr	r2, [pc, #68]	; (8001ed0 <TIMER_Start_All_Channels+0x54>)
 8001e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e8e:	2100      	movs	r1, #0
 8001e90:	4618      	mov	r0, r3
 8001e92:	f006 fbcf 	bl	8008634 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer[timer_id].htim, TIM_CHANNEL_2);
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	4a0d      	ldr	r2, [pc, #52]	; (8001ed0 <TIMER_Start_All_Channels+0x54>)
 8001e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9e:	2104      	movs	r1, #4
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f006 fbc7 	bl	8008634 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer[timer_id].htim, TIM_CHANNEL_3);
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	4a09      	ldr	r2, [pc, #36]	; (8001ed0 <TIMER_Start_All_Channels+0x54>)
 8001eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eae:	2108      	movs	r1, #8
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f006 fbbf 	bl	8008634 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer[timer_id].htim, TIM_CHANNEL_4);
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	4a05      	ldr	r2, [pc, #20]	; (8001ed0 <TIMER_Start_All_Channels+0x54>)
 8001eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ebe:	210c      	movs	r1, #12
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f006 fbb7 	bl	8008634 <HAL_TIM_PWM_Start>
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	200000a0 	.word	0x200000a0

08001ed4 <TIMER_Stop_All_Channels>:
/*
 * @brief Stop all channels of a timer
 * @param timer_id id of the timer
 */
void TIMER_Stop_All_Channels(timer_e timer_id)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	71fb      	strb	r3, [r7, #7]
	HAL_TIM_PWM_Stop(timer[timer_id].htim, TIM_CHANNEL_1);
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	4a11      	ldr	r2, [pc, #68]	; (8001f28 <TIMER_Stop_All_Channels+0x54>)
 8001ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f006 fc6b 	bl	80087c4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(timer[timer_id].htim, TIM_CHANNEL_2);
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	4a0d      	ldr	r2, [pc, #52]	; (8001f28 <TIMER_Stop_All_Channels+0x54>)
 8001ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef6:	2104      	movs	r1, #4
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f006 fc63 	bl	80087c4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(timer[timer_id].htim, TIM_CHANNEL_3);
 8001efe:	79fb      	ldrb	r3, [r7, #7]
 8001f00:	4a09      	ldr	r2, [pc, #36]	; (8001f28 <TIMER_Stop_All_Channels+0x54>)
 8001f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f06:	2108      	movs	r1, #8
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f006 fc5b 	bl	80087c4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(timer[timer_id].htim, TIM_CHANNEL_4);
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
 8001f10:	4a05      	ldr	r2, [pc, #20]	; (8001f28 <TIMER_Stop_All_Channels+0x54>)
 8001f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f16:	210c      	movs	r1, #12
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f006 fc53 	bl	80087c4 <HAL_TIM_PWM_Stop>
}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	200000a0 	.word	0x200000a0

08001f2c <TIMER_Set_All_CCR>:
 * @brief Set new capture compare values
 * @param tiemr_id The timer to use
 * @param values The new values
 */
void TIMER_Set_All_CCR(timer_e timer_id, uint16_t * values)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	6039      	str	r1, [r7, #0]
 8001f36:	71fb      	strb	r3, [r7, #7]
	timer[timer_id].htim->Instance->CCR1 = values[0];
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	8819      	ldrh	r1, [r3, #0]
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	4a15      	ldr	r2, [pc, #84]	; (8001f94 <TIMER_Set_All_CCR+0x68>)
 8001f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	460a      	mov	r2, r1
 8001f48:	635a      	str	r2, [r3, #52]	; 0x34
	timer[timer_id].htim->Instance->CCR2 = values[1];
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	3302      	adds	r3, #2
 8001f4e:	8819      	ldrh	r1, [r3, #0]
 8001f50:	79fb      	ldrb	r3, [r7, #7]
 8001f52:	4a10      	ldr	r2, [pc, #64]	; (8001f94 <TIMER_Set_All_CCR+0x68>)
 8001f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	460a      	mov	r2, r1
 8001f5c:	639a      	str	r2, [r3, #56]	; 0x38
	timer[timer_id].htim->Instance->CCR3 = values[2];
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	3304      	adds	r3, #4
 8001f62:	8819      	ldrh	r1, [r3, #0]
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	4a0b      	ldr	r2, [pc, #44]	; (8001f94 <TIMER_Set_All_CCR+0x68>)
 8001f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	460a      	mov	r2, r1
 8001f70:	63da      	str	r2, [r3, #60]	; 0x3c
	timer[timer_id].htim->Instance->CCR4 = values[3];
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	3306      	adds	r3, #6
 8001f76:	8819      	ldrh	r1, [r3, #0]
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	4a06      	ldr	r2, [pc, #24]	; (8001f94 <TIMER_Set_All_CCR+0x68>)
 8001f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	460a      	mov	r2, r1
 8001f84:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	200000a0 	.word	0x200000a0

08001f98 <UART_Idle_Line_Callback>:
/* -------------------------- Public callback functions -------------------------- */
/*
 * @brief Update the read index when the idle flag is raised
 */
void UART_Idle_Line_Callback(uart_e id)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	71fb      	strb	r3, [r7, #7]
	if(__HAL_UART_GET_FLAG(uart[id].huart, UART_FLAG_IDLE))
 8001fa2:	79fa      	ldrb	r2, [r7, #7]
 8001fa4:	4922      	ldr	r1, [pc, #136]	; (8002030 <UART_Idle_Line_Callback+0x98>)
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	019b      	lsls	r3, r3, #6
 8001faa:	4413      	add	r3, r2
 8001fac:	011b      	lsls	r3, r3, #4
 8001fae:	440b      	add	r3, r1
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0310 	and.w	r3, r3, #16
 8001fba:	2b10      	cmp	r3, #16
 8001fbc:	d132      	bne.n	8002024 <UART_Idle_Line_Callback+0x8c>
	{
		uart[id].index_write_rx = LEN_BUFFER - uart[id].huart->hdmarx->Instance->NDTR ;
 8001fbe:	79fa      	ldrb	r2, [r7, #7]
 8001fc0:	491b      	ldr	r1, [pc, #108]	; (8002030 <UART_Idle_Line_Callback+0x98>)
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	019b      	lsls	r3, r3, #6
 8001fc6:	4413      	add	r3, r2
 8001fc8:	011b      	lsls	r3, r3, #4
 8001fca:	440b      	add	r3, r1
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	79fa      	ldrb	r2, [r7, #7]
 8001fd8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001fdc:	b298      	uxth	r0, r3
 8001fde:	4914      	ldr	r1, [pc, #80]	; (8002030 <UART_Idle_Line_Callback+0x98>)
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	019b      	lsls	r3, r3, #6
 8001fe4:	4413      	add	r3, r2
 8001fe6:	011b      	lsls	r3, r3, #4
 8001fe8:	440b      	add	r3, r1
 8001fea:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8001fee:	4602      	mov	r2, r0
 8001ff0:	801a      	strh	r2, [r3, #0]
	  __HAL_UART_CLEAR_IDLEFLAG(uart[id].huart);
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	79fa      	ldrb	r2, [r7, #7]
 8001ff8:	490d      	ldr	r1, [pc, #52]	; (8002030 <UART_Idle_Line_Callback+0x98>)
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	019b      	lsls	r3, r3, #6
 8001ffe:	4413      	add	r3, r2
 8002000:	011b      	lsls	r3, r3, #4
 8002002:	440b      	add	r3, r1
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	79fa      	ldrb	r2, [r7, #7]
 800200e:	4908      	ldr	r1, [pc, #32]	; (8002030 <UART_Idle_Line_Callback+0x98>)
 8002010:	4613      	mov	r3, r2
 8002012:	019b      	lsls	r3, r3, #6
 8002014:	4413      	add	r3, r2
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	440b      	add	r3, r1
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	68fb      	ldr	r3, [r7, #12]
	}
}
 8002024:	bf00      	nop
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	20000348 	.word	0x20000348

08002034 <UART_Transfer_Complete_Callback>:

/*
 * @brief Re start the dma transfer if there is data to send or reset the transmission state to idle
 */
void UART_Transfer_Complete_Callback(uart_e id)
{
 8002034:	b590      	push	{r4, r7, lr}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	71fb      	strb	r3, [r7, #7]
	if(uart[id].index_write_tx != uart[id].index_read_tx)
 800203e:	79fa      	ldrb	r2, [r7, #7]
 8002040:	494d      	ldr	r1, [pc, #308]	; (8002178 <UART_Transfer_Complete_Callback+0x144>)
 8002042:	4613      	mov	r3, r2
 8002044:	019b      	lsls	r3, r3, #6
 8002046:	4413      	add	r3, r2
 8002048:	011b      	lsls	r3, r3, #4
 800204a:	440b      	add	r3, r1
 800204c:	f203 2306 	addw	r3, r3, #518	; 0x206
 8002050:	8819      	ldrh	r1, [r3, #0]
 8002052:	79fa      	ldrb	r2, [r7, #7]
 8002054:	4848      	ldr	r0, [pc, #288]	; (8002178 <UART_Transfer_Complete_Callback+0x144>)
 8002056:	4613      	mov	r3, r2
 8002058:	019b      	lsls	r3, r3, #6
 800205a:	4413      	add	r3, r2
 800205c:	011b      	lsls	r3, r3, #4
 800205e:	4403      	add	r3, r0
 8002060:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	4299      	cmp	r1, r3
 8002068:	d077      	beq.n	800215a <UART_Transfer_Complete_Callback+0x126>
	{
		uint16_t nb_bytes_to_read = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	81fb      	strh	r3, [r7, #14]
		if(uart[id].index_write_tx > uart[id].index_read_rx)
 800206e:	79fa      	ldrb	r2, [r7, #7]
 8002070:	4941      	ldr	r1, [pc, #260]	; (8002178 <UART_Transfer_Complete_Callback+0x144>)
 8002072:	4613      	mov	r3, r2
 8002074:	019b      	lsls	r3, r3, #6
 8002076:	4413      	add	r3, r2
 8002078:	011b      	lsls	r3, r3, #4
 800207a:	440b      	add	r3, r1
 800207c:	f203 2306 	addw	r3, r3, #518	; 0x206
 8002080:	8819      	ldrh	r1, [r3, #0]
 8002082:	79fa      	ldrb	r2, [r7, #7]
 8002084:	483c      	ldr	r0, [pc, #240]	; (8002178 <UART_Transfer_Complete_Callback+0x144>)
 8002086:	4613      	mov	r3, r2
 8002088:	019b      	lsls	r3, r3, #6
 800208a:	4413      	add	r3, r2
 800208c:	011b      	lsls	r3, r3, #4
 800208e:	4403      	add	r3, r0
 8002090:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002094:	881b      	ldrh	r3, [r3, #0]
 8002096:	4299      	cmp	r1, r3
 8002098:	d916      	bls.n	80020c8 <UART_Transfer_Complete_Callback+0x94>
		{
			nb_bytes_to_read = uart[id].index_write_tx - uart[id].index_read_tx;
 800209a:	79fa      	ldrb	r2, [r7, #7]
 800209c:	4936      	ldr	r1, [pc, #216]	; (8002178 <UART_Transfer_Complete_Callback+0x144>)
 800209e:	4613      	mov	r3, r2
 80020a0:	019b      	lsls	r3, r3, #6
 80020a2:	4413      	add	r3, r2
 80020a4:	011b      	lsls	r3, r3, #4
 80020a6:	440b      	add	r3, r1
 80020a8:	f203 2306 	addw	r3, r3, #518	; 0x206
 80020ac:	8819      	ldrh	r1, [r3, #0]
 80020ae:	79fa      	ldrb	r2, [r7, #7]
 80020b0:	4831      	ldr	r0, [pc, #196]	; (8002178 <UART_Transfer_Complete_Callback+0x144>)
 80020b2:	4613      	mov	r3, r2
 80020b4:	019b      	lsls	r3, r3, #6
 80020b6:	4413      	add	r3, r2
 80020b8:	011b      	lsls	r3, r3, #4
 80020ba:	4403      	add	r3, r0
 80020bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	1acb      	subs	r3, r1, r3
 80020c4:	81fb      	strh	r3, [r7, #14]
 80020c6:	e00c      	b.n	80020e2 <UART_Transfer_Complete_Callback+0xae>
		}
		else
		{
			nb_bytes_to_read = LEN_BUFFER - uart[id].index_read_tx;
 80020c8:	79fa      	ldrb	r2, [r7, #7]
 80020ca:	492b      	ldr	r1, [pc, #172]	; (8002178 <UART_Transfer_Complete_Callback+0x144>)
 80020cc:	4613      	mov	r3, r2
 80020ce:	019b      	lsls	r3, r3, #6
 80020d0:	4413      	add	r3, r2
 80020d2:	011b      	lsls	r3, r3, #4
 80020d4:	440b      	add	r3, r1
 80020d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020da:	881b      	ldrh	r3, [r3, #0]
 80020dc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80020e0:	81fb      	strh	r3, [r7, #14]
		}
		HAL_UART_Transmit_DMA(uart[id].huart, &uart[id].buffer_tx[uart[id].index_read_tx], nb_bytes_to_read);
 80020e2:	79fa      	ldrb	r2, [r7, #7]
 80020e4:	4924      	ldr	r1, [pc, #144]	; (8002178 <UART_Transfer_Complete_Callback+0x144>)
 80020e6:	4613      	mov	r3, r2
 80020e8:	019b      	lsls	r3, r3, #6
 80020ea:	4413      	add	r3, r2
 80020ec:	011b      	lsls	r3, r3, #4
 80020ee:	440b      	add	r3, r1
 80020f0:	6818      	ldr	r0, [r3, #0]
 80020f2:	79fa      	ldrb	r2, [r7, #7]
 80020f4:	79f9      	ldrb	r1, [r7, #7]
 80020f6:	4c20      	ldr	r4, [pc, #128]	; (8002178 <UART_Transfer_Complete_Callback+0x144>)
 80020f8:	460b      	mov	r3, r1
 80020fa:	019b      	lsls	r3, r3, #6
 80020fc:	440b      	add	r3, r1
 80020fe:	011b      	lsls	r3, r3, #4
 8002100:	4423      	add	r3, r4
 8002102:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	4619      	mov	r1, r3
 800210a:	4613      	mov	r3, r2
 800210c:	019b      	lsls	r3, r3, #6
 800210e:	4413      	add	r3, r2
 8002110:	011b      	lsls	r3, r3, #4
 8002112:	440b      	add	r3, r1
 8002114:	4a18      	ldr	r2, [pc, #96]	; (8002178 <UART_Transfer_Complete_Callback+0x144>)
 8002116:	4413      	add	r3, r2
 8002118:	3306      	adds	r3, #6
 800211a:	89fa      	ldrh	r2, [r7, #14]
 800211c:	4619      	mov	r1, r3
 800211e:	f007 f925 	bl	800936c <HAL_UART_Transmit_DMA>
		uart[id].index_read_tx = (uart[id].index_read_tx + nb_bytes_to_read) % LEN_BUFFER;
 8002122:	79fa      	ldrb	r2, [r7, #7]
 8002124:	4914      	ldr	r1, [pc, #80]	; (8002178 <UART_Transfer_Complete_Callback+0x144>)
 8002126:	4613      	mov	r3, r2
 8002128:	019b      	lsls	r3, r3, #6
 800212a:	4413      	add	r3, r2
 800212c:	011b      	lsls	r3, r3, #4
 800212e:	440b      	add	r3, r1
 8002130:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002134:	881a      	ldrh	r2, [r3, #0]
 8002136:	89fb      	ldrh	r3, [r7, #14]
 8002138:	4413      	add	r3, r2
 800213a:	b29b      	uxth	r3, r3
 800213c:	79fa      	ldrb	r2, [r7, #7]
 800213e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002142:	b298      	uxth	r0, r3
 8002144:	490c      	ldr	r1, [pc, #48]	; (8002178 <UART_Transfer_Complete_Callback+0x144>)
 8002146:	4613      	mov	r3, r2
 8002148:	019b      	lsls	r3, r3, #6
 800214a:	4413      	add	r3, r2
 800214c:	011b      	lsls	r3, r3, #4
 800214e:	440b      	add	r3, r1
 8002150:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002154:	4602      	mov	r2, r0
 8002156:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		uart[id].transmission_state = transmission_state_eIDLE;
	}
}
 8002158:	e009      	b.n	800216e <UART_Transfer_Complete_Callback+0x13a>
		uart[id].transmission_state = transmission_state_eIDLE;
 800215a:	79fa      	ldrb	r2, [r7, #7]
 800215c:	4906      	ldr	r1, [pc, #24]	; (8002178 <UART_Transfer_Complete_Callback+0x144>)
 800215e:	4613      	mov	r3, r2
 8002160:	019b      	lsls	r3, r3, #6
 8002162:	4413      	add	r3, r2
 8002164:	011b      	lsls	r3, r3, #4
 8002166:	440b      	add	r3, r1
 8002168:	3305      	adds	r3, #5
 800216a:	2200      	movs	r2, #0
 800216c:	701a      	strb	r2, [r3, #0]
}
 800216e:	bf00      	nop
 8002170:	3714      	adds	r7, #20
 8002172:	46bd      	mov	sp, r7
 8002174:	bd90      	pop	{r4, r7, pc}
 8002176:	bf00      	nop
 8002178:	20000348 	.word	0x20000348

0800217c <UART_Availables>:
 * @brief Number of byte available in the RX buffer
 * @param id Id of the uart we are interested in
 * @return Number of bytes
 */
uint16_t UART_Availables(uart_e id)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	71fb      	strb	r3, [r7, #7]
	return get_nb_bytes_available(id);
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	4618      	mov	r0, r3
 800218a:	f000 f955 	bl	8002438 <get_nb_bytes_available>
 800218e:	4603      	mov	r3, r0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <UART_Get>:
 * 		  Does nothing if there are no characters available
 * @param id Id of the uart
 * @param c Buffer to write the character into
 */
void UART_Get(uart_e id, uint8_t * c)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	6039      	str	r1, [r7, #0]
 80021a2:	71fb      	strb	r3, [r7, #7]
	if(get_nb_bytes_available(id))
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f000 f946 	bl	8002438 <get_nb_bytes_available>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d035      	beq.n	800221e <UART_Get+0x86>
	{
		*c = uart[id].buffer_rx[uart[id].index_read_rx];
 80021b2:	79fa      	ldrb	r2, [r7, #7]
 80021b4:	79f9      	ldrb	r1, [r7, #7]
 80021b6:	481c      	ldr	r0, [pc, #112]	; (8002228 <UART_Get+0x90>)
 80021b8:	460b      	mov	r3, r1
 80021ba:	019b      	lsls	r3, r3, #6
 80021bc:	440b      	add	r3, r1
 80021be:	011b      	lsls	r3, r3, #4
 80021c0:	4403      	add	r3, r0
 80021c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80021c6:	881b      	ldrh	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	4917      	ldr	r1, [pc, #92]	; (8002228 <UART_Get+0x90>)
 80021cc:	4613      	mov	r3, r2
 80021ce:	019b      	lsls	r3, r3, #6
 80021d0:	4413      	add	r3, r2
 80021d2:	011b      	lsls	r3, r3, #4
 80021d4:	440b      	add	r3, r1
 80021d6:	4403      	add	r3, r0
 80021d8:	f203 230a 	addw	r3, r3, #522	; 0x20a
 80021dc:	781a      	ldrb	r2, [r3, #0]
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	701a      	strb	r2, [r3, #0]
		uart[id].index_read_rx = (uart[id].index_read_rx + 1) % LEN_BUFFER;
 80021e2:	79fa      	ldrb	r2, [r7, #7]
 80021e4:	4910      	ldr	r1, [pc, #64]	; (8002228 <UART_Get+0x90>)
 80021e6:	4613      	mov	r3, r2
 80021e8:	019b      	lsls	r3, r3, #6
 80021ea:	4413      	add	r3, r2
 80021ec:	011b      	lsls	r3, r3, #4
 80021ee:	440b      	add	r3, r1
 80021f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80021f4:	881b      	ldrh	r3, [r3, #0]
 80021f6:	3301      	adds	r3, #1
 80021f8:	425a      	negs	r2, r3
 80021fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002202:	bf58      	it	pl
 8002204:	4253      	negpl	r3, r2
 8002206:	79fa      	ldrb	r2, [r7, #7]
 8002208:	b298      	uxth	r0, r3
 800220a:	4907      	ldr	r1, [pc, #28]	; (8002228 <UART_Get+0x90>)
 800220c:	4613      	mov	r3, r2
 800220e:	019b      	lsls	r3, r3, #6
 8002210:	4413      	add	r3, r2
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	440b      	add	r3, r1
 8002216:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800221a:	4602      	mov	r2, r0
 800221c:	801a      	strh	r2, [r3, #0]
	}
}
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20000348 	.word	0x20000348

0800222c <UART_Init>:

/*
 * @brief Initialize every uarts and start dma reception
 */
void UART_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
	/* Link  huarts to the right uarts structures */
	uart[uart_e1].huart = &huart1;
 8002232:	4b23      	ldr	r3, [pc, #140]	; (80022c0 <UART_Init+0x94>)
 8002234:	4a23      	ldr	r2, [pc, #140]	; (80022c4 <UART_Init+0x98>)
 8002236:	601a      	str	r2, [r3, #0]
	uart[uart_e3].huart = &huart3;
 8002238:	4b21      	ldr	r3, [pc, #132]	; (80022c0 <UART_Init+0x94>)
 800223a:	4a23      	ldr	r2, [pc, #140]	; (80022c8 <UART_Init+0x9c>)
 800223c:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
	uart[uart_e4].huart = &huart4;
 8002240:	4b1f      	ldr	r3, [pc, #124]	; (80022c0 <UART_Init+0x94>)
 8002242:	4a22      	ldr	r2, [pc, #136]	; (80022cc <UART_Init+0xa0>)
 8002244:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820

	/* Initialization */
	for(uint8_t u = 0; u < uart_eCOUNT; u ++)
 8002248:	2300      	movs	r3, #0
 800224a:	71fb      	strb	r3, [r7, #7]
 800224c:	e02f      	b.n	80022ae <UART_Init+0x82>
	{
		__HAL_UART_ENABLE_IT(uart[u].huart, UART_IT_IDLE);
 800224e:	79fa      	ldrb	r2, [r7, #7]
 8002250:	491b      	ldr	r1, [pc, #108]	; (80022c0 <UART_Init+0x94>)
 8002252:	4613      	mov	r3, r2
 8002254:	019b      	lsls	r3, r3, #6
 8002256:	4413      	add	r3, r2
 8002258:	011b      	lsls	r3, r3, #4
 800225a:	440b      	add	r3, r1
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68d9      	ldr	r1, [r3, #12]
 8002262:	79fa      	ldrb	r2, [r7, #7]
 8002264:	4816      	ldr	r0, [pc, #88]	; (80022c0 <UART_Init+0x94>)
 8002266:	4613      	mov	r3, r2
 8002268:	019b      	lsls	r3, r3, #6
 800226a:	4413      	add	r3, r2
 800226c:	011b      	lsls	r3, r3, #4
 800226e:	4403      	add	r3, r0
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f041 0210 	orr.w	r2, r1, #16
 8002278:	60da      	str	r2, [r3, #12]
		HAL_UART_Receive_DMA(uart[u].huart, uart[u].buffer_rx, LEN_BUFFER);
 800227a:	79fa      	ldrb	r2, [r7, #7]
 800227c:	4910      	ldr	r1, [pc, #64]	; (80022c0 <UART_Init+0x94>)
 800227e:	4613      	mov	r3, r2
 8002280:	019b      	lsls	r3, r3, #6
 8002282:	4413      	add	r3, r2
 8002284:	011b      	lsls	r3, r3, #4
 8002286:	440b      	add	r3, r1
 8002288:	6818      	ldr	r0, [r3, #0]
 800228a:	79fa      	ldrb	r2, [r7, #7]
 800228c:	4613      	mov	r3, r2
 800228e:	019b      	lsls	r3, r3, #6
 8002290:	4413      	add	r3, r2
 8002292:	011b      	lsls	r3, r3, #4
 8002294:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002298:	4a09      	ldr	r2, [pc, #36]	; (80022c0 <UART_Init+0x94>)
 800229a:	4413      	add	r3, r2
 800229c:	3302      	adds	r3, #2
 800229e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022a2:	4619      	mov	r1, r3
 80022a4:	f007 f8e0 	bl	8009468 <HAL_UART_Receive_DMA>
	for(uint8_t u = 0; u < uart_eCOUNT; u ++)
 80022a8:	79fb      	ldrb	r3, [r7, #7]
 80022aa:	3301      	adds	r3, #1
 80022ac:	71fb      	strb	r3, [r7, #7]
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d9cc      	bls.n	800224e <UART_Init+0x22>
	}
}
 80022b4:	bf00      	nop
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	20000348 	.word	0x20000348
 80022c4:	20001784 	.word	0x20001784
 80022c8:	20001620 	.word	0x20001620
 80022cc:	200017c8 	.word	0x200017c8

080022d0 <UART_Transmit>:
 * @param id Id of the uart to use
 * @param data Array with the data
 * @param len Length of the data array
 */
void UART_Transmit(uart_e id, uint8_t * data, uint16_t len)
{
 80022d0:	b590      	push	{r4, r7, lr}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	6039      	str	r1, [r7, #0]
 80022da:	71fb      	strb	r3, [r7, #7]
 80022dc:	4613      	mov	r3, r2
 80022de:	80bb      	strh	r3, [r7, #4]
	for(uint16_t c = 0; c < len; c ++)
 80022e0:	2300      	movs	r3, #0
 80022e2:	81fb      	strh	r3, [r7, #14]
 80022e4:	e020      	b.n	8002328 <UART_Transmit+0x58>
	{
		uart[id].buffer_tx[(uart[id].index_write_tx + c) % LEN_BUFFER] = data[c];
 80022e6:	89fb      	ldrh	r3, [r7, #14]
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	18d0      	adds	r0, r2, r3
 80022ec:	79fa      	ldrb	r2, [r7, #7]
 80022ee:	79f9      	ldrb	r1, [r7, #7]
 80022f0:	4c50      	ldr	r4, [pc, #320]	; (8002434 <UART_Transmit+0x164>)
 80022f2:	460b      	mov	r3, r1
 80022f4:	019b      	lsls	r3, r3, #6
 80022f6:	440b      	add	r3, r1
 80022f8:	011b      	lsls	r3, r3, #4
 80022fa:	4423      	add	r3, r4
 80022fc:	f203 2306 	addw	r3, r3, #518	; 0x206
 8002300:	8819      	ldrh	r1, [r3, #0]
 8002302:	89fb      	ldrh	r3, [r7, #14]
 8002304:	440b      	add	r3, r1
 8002306:	b29b      	uxth	r3, r3
 8002308:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800230c:	7804      	ldrb	r4, [r0, #0]
 800230e:	4849      	ldr	r0, [pc, #292]	; (8002434 <UART_Transmit+0x164>)
 8002310:	4613      	mov	r3, r2
 8002312:	019b      	lsls	r3, r3, #6
 8002314:	4413      	add	r3, r2
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	4403      	add	r3, r0
 800231a:	440b      	add	r3, r1
 800231c:	3306      	adds	r3, #6
 800231e:	4622      	mov	r2, r4
 8002320:	701a      	strb	r2, [r3, #0]
	for(uint16_t c = 0; c < len; c ++)
 8002322:	89fb      	ldrh	r3, [r7, #14]
 8002324:	3301      	adds	r3, #1
 8002326:	81fb      	strh	r3, [r7, #14]
 8002328:	89fa      	ldrh	r2, [r7, #14]
 800232a:	88bb      	ldrh	r3, [r7, #4]
 800232c:	429a      	cmp	r2, r3
 800232e:	d3da      	bcc.n	80022e6 <UART_Transmit+0x16>
	}
	uart[id].index_write_tx = (uart[id].index_write_tx + len) % LEN_BUFFER;
 8002330:	79fa      	ldrb	r2, [r7, #7]
 8002332:	4940      	ldr	r1, [pc, #256]	; (8002434 <UART_Transmit+0x164>)
 8002334:	4613      	mov	r3, r2
 8002336:	019b      	lsls	r3, r3, #6
 8002338:	4413      	add	r3, r2
 800233a:	011b      	lsls	r3, r3, #4
 800233c:	440b      	add	r3, r1
 800233e:	f203 2306 	addw	r3, r3, #518	; 0x206
 8002342:	881a      	ldrh	r2, [r3, #0]
 8002344:	88bb      	ldrh	r3, [r7, #4]
 8002346:	4413      	add	r3, r2
 8002348:	b29b      	uxth	r3, r3
 800234a:	79fa      	ldrb	r2, [r7, #7]
 800234c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002350:	b298      	uxth	r0, r3
 8002352:	4938      	ldr	r1, [pc, #224]	; (8002434 <UART_Transmit+0x164>)
 8002354:	4613      	mov	r3, r2
 8002356:	019b      	lsls	r3, r3, #6
 8002358:	4413      	add	r3, r2
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	440b      	add	r3, r1
 800235e:	f203 2306 	addw	r3, r3, #518	; 0x206
 8002362:	4602      	mov	r2, r0
 8002364:	801a      	strh	r2, [r3, #0]
	if(uart[id].transmission_state == transmission_state_eIDLE)
 8002366:	79fa      	ldrb	r2, [r7, #7]
 8002368:	4932      	ldr	r1, [pc, #200]	; (8002434 <UART_Transmit+0x164>)
 800236a:	4613      	mov	r3, r2
 800236c:	019b      	lsls	r3, r3, #6
 800236e:	4413      	add	r3, r2
 8002370:	011b      	lsls	r3, r3, #4
 8002372:	440b      	add	r3, r1
 8002374:	3305      	adds	r3, #5
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d157      	bne.n	800242c <UART_Transmit+0x15c>
	{
		uart[id].transmission_state = transmission_state_eIN_PROGRESS;
 800237c:	79fa      	ldrb	r2, [r7, #7]
 800237e:	492d      	ldr	r1, [pc, #180]	; (8002434 <UART_Transmit+0x164>)
 8002380:	4613      	mov	r3, r2
 8002382:	019b      	lsls	r3, r3, #6
 8002384:	4413      	add	r3, r2
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	440b      	add	r3, r1
 800238a:	3305      	adds	r3, #5
 800238c:	2201      	movs	r2, #1
 800238e:	701a      	strb	r2, [r3, #0]
		uint16_t nb_bytes_before_end_of_buffer = LEN_BUFFER - uart[id].index_read_tx;
 8002390:	79fa      	ldrb	r2, [r7, #7]
 8002392:	4928      	ldr	r1, [pc, #160]	; (8002434 <UART_Transmit+0x164>)
 8002394:	4613      	mov	r3, r2
 8002396:	019b      	lsls	r3, r3, #6
 8002398:	4413      	add	r3, r2
 800239a:	011b      	lsls	r3, r3, #4
 800239c:	440b      	add	r3, r1
 800239e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80023a8:	81bb      	strh	r3, [r7, #12]
		len = MIN(len, nb_bytes_before_end_of_buffer);
 80023aa:	88ba      	ldrh	r2, [r7, #4]
 80023ac:	89bb      	ldrh	r3, [r7, #12]
 80023ae:	4293      	cmp	r3, r2
 80023b0:	bf28      	it	cs
 80023b2:	4613      	movcs	r3, r2
 80023b4:	80bb      	strh	r3, [r7, #4]
		HAL_UART_Transmit_DMA(uart[id].huart, &uart[id].buffer_tx[uart[id].index_read_tx], len);
 80023b6:	79fa      	ldrb	r2, [r7, #7]
 80023b8:	491e      	ldr	r1, [pc, #120]	; (8002434 <UART_Transmit+0x164>)
 80023ba:	4613      	mov	r3, r2
 80023bc:	019b      	lsls	r3, r3, #6
 80023be:	4413      	add	r3, r2
 80023c0:	011b      	lsls	r3, r3, #4
 80023c2:	440b      	add	r3, r1
 80023c4:	6818      	ldr	r0, [r3, #0]
 80023c6:	79fa      	ldrb	r2, [r7, #7]
 80023c8:	79f9      	ldrb	r1, [r7, #7]
 80023ca:	4c1a      	ldr	r4, [pc, #104]	; (8002434 <UART_Transmit+0x164>)
 80023cc:	460b      	mov	r3, r1
 80023ce:	019b      	lsls	r3, r3, #6
 80023d0:	440b      	add	r3, r1
 80023d2:	011b      	lsls	r3, r3, #4
 80023d4:	4423      	add	r3, r4
 80023d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023da:	881b      	ldrh	r3, [r3, #0]
 80023dc:	4619      	mov	r1, r3
 80023de:	4613      	mov	r3, r2
 80023e0:	019b      	lsls	r3, r3, #6
 80023e2:	4413      	add	r3, r2
 80023e4:	011b      	lsls	r3, r3, #4
 80023e6:	440b      	add	r3, r1
 80023e8:	4a12      	ldr	r2, [pc, #72]	; (8002434 <UART_Transmit+0x164>)
 80023ea:	4413      	add	r3, r2
 80023ec:	3306      	adds	r3, #6
 80023ee:	88ba      	ldrh	r2, [r7, #4]
 80023f0:	4619      	mov	r1, r3
 80023f2:	f006 ffbb 	bl	800936c <HAL_UART_Transmit_DMA>
		uart[id].index_read_tx = (uart[id].index_read_tx + len) % LEN_BUFFER;
 80023f6:	79fa      	ldrb	r2, [r7, #7]
 80023f8:	490e      	ldr	r1, [pc, #56]	; (8002434 <UART_Transmit+0x164>)
 80023fa:	4613      	mov	r3, r2
 80023fc:	019b      	lsls	r3, r3, #6
 80023fe:	4413      	add	r3, r2
 8002400:	011b      	lsls	r3, r3, #4
 8002402:	440b      	add	r3, r1
 8002404:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002408:	881a      	ldrh	r2, [r3, #0]
 800240a:	88bb      	ldrh	r3, [r7, #4]
 800240c:	4413      	add	r3, r2
 800240e:	b29b      	uxth	r3, r3
 8002410:	79fa      	ldrb	r2, [r7, #7]
 8002412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002416:	b298      	uxth	r0, r3
 8002418:	4906      	ldr	r1, [pc, #24]	; (8002434 <UART_Transmit+0x164>)
 800241a:	4613      	mov	r3, r2
 800241c:	019b      	lsls	r3, r3, #6
 800241e:	4413      	add	r3, r2
 8002420:	011b      	lsls	r3, r3, #4
 8002422:	440b      	add	r3, r1
 8002424:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002428:	4602      	mov	r2, r0
 800242a:	801a      	strh	r2, [r3, #0]
	}
}
 800242c:	bf00      	nop
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	bd90      	pop	{r4, r7, pc}
 8002434:	20000348 	.word	0x20000348

08002438 <get_nb_bytes_available>:
 * @brief Compute the numbers of byte available in the buffer
 * @param id Id of the uart
 * @return nb of bytes available
 */
uint16_t get_nb_bytes_available(uart_e id)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	71fb      	strb	r3, [r7, #7]
	uint16_t nb = 0 ;
 8002442:	2300      	movs	r3, #0
 8002444:	81fb      	strh	r3, [r7, #14]
	if(uart[id].index_write_rx > uart[id].index_read_rx)
 8002446:	79fa      	ldrb	r2, [r7, #7]
 8002448:	4932      	ldr	r1, [pc, #200]	; (8002514 <get_nb_bytes_available+0xdc>)
 800244a:	4613      	mov	r3, r2
 800244c:	019b      	lsls	r3, r3, #6
 800244e:	4413      	add	r3, r2
 8002450:	011b      	lsls	r3, r3, #4
 8002452:	440b      	add	r3, r1
 8002454:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8002458:	881b      	ldrh	r3, [r3, #0]
 800245a:	b299      	uxth	r1, r3
 800245c:	79fa      	ldrb	r2, [r7, #7]
 800245e:	482d      	ldr	r0, [pc, #180]	; (8002514 <get_nb_bytes_available+0xdc>)
 8002460:	4613      	mov	r3, r2
 8002462:	019b      	lsls	r3, r3, #6
 8002464:	4413      	add	r3, r2
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	4403      	add	r3, r0
 800246a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800246e:	881b      	ldrh	r3, [r3, #0]
 8002470:	4299      	cmp	r1, r3
 8002472:	d917      	bls.n	80024a4 <get_nb_bytes_available+0x6c>
	{
		nb = uart[id].index_write_rx - uart[id].index_read_rx ;
 8002474:	79fa      	ldrb	r2, [r7, #7]
 8002476:	4927      	ldr	r1, [pc, #156]	; (8002514 <get_nb_bytes_available+0xdc>)
 8002478:	4613      	mov	r3, r2
 800247a:	019b      	lsls	r3, r3, #6
 800247c:	4413      	add	r3, r2
 800247e:	011b      	lsls	r3, r3, #4
 8002480:	440b      	add	r3, r1
 8002482:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	b299      	uxth	r1, r3
 800248a:	79fa      	ldrb	r2, [r7, #7]
 800248c:	4821      	ldr	r0, [pc, #132]	; (8002514 <get_nb_bytes_available+0xdc>)
 800248e:	4613      	mov	r3, r2
 8002490:	019b      	lsls	r3, r3, #6
 8002492:	4413      	add	r3, r2
 8002494:	011b      	lsls	r3, r3, #4
 8002496:	4403      	add	r3, r0
 8002498:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800249c:	881b      	ldrh	r3, [r3, #0]
 800249e:	1acb      	subs	r3, r1, r3
 80024a0:	81fb      	strh	r3, [r7, #14]
 80024a2:	e030      	b.n	8002506 <get_nb_bytes_available+0xce>
	}
	else if(uart[id].index_write_rx < uart[id].index_read_rx)
 80024a4:	79fa      	ldrb	r2, [r7, #7]
 80024a6:	491b      	ldr	r1, [pc, #108]	; (8002514 <get_nb_bytes_available+0xdc>)
 80024a8:	4613      	mov	r3, r2
 80024aa:	019b      	lsls	r3, r3, #6
 80024ac:	4413      	add	r3, r2
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	440b      	add	r3, r1
 80024b2:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 80024b6:	881b      	ldrh	r3, [r3, #0]
 80024b8:	b299      	uxth	r1, r3
 80024ba:	79fa      	ldrb	r2, [r7, #7]
 80024bc:	4815      	ldr	r0, [pc, #84]	; (8002514 <get_nb_bytes_available+0xdc>)
 80024be:	4613      	mov	r3, r2
 80024c0:	019b      	lsls	r3, r3, #6
 80024c2:	4413      	add	r3, r2
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	4403      	add	r3, r0
 80024c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	4299      	cmp	r1, r3
 80024d0:	d219      	bcs.n	8002506 <get_nb_bytes_available+0xce>
	{
		nb = LEN_BUFFER - uart[id].index_read_rx + uart[id].index_write_rx ;
 80024d2:	79fa      	ldrb	r2, [r7, #7]
 80024d4:	490f      	ldr	r1, [pc, #60]	; (8002514 <get_nb_bytes_available+0xdc>)
 80024d6:	4613      	mov	r3, r2
 80024d8:	019b      	lsls	r3, r3, #6
 80024da:	4413      	add	r3, r2
 80024dc:	011b      	lsls	r3, r3, #4
 80024de:	440b      	add	r3, r1
 80024e0:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	b299      	uxth	r1, r3
 80024e8:	79fa      	ldrb	r2, [r7, #7]
 80024ea:	480a      	ldr	r0, [pc, #40]	; (8002514 <get_nb_bytes_available+0xdc>)
 80024ec:	4613      	mov	r3, r2
 80024ee:	019b      	lsls	r3, r3, #6
 80024f0:	4413      	add	r3, r2
 80024f2:	011b      	lsls	r3, r3, #4
 80024f4:	4403      	add	r3, r0
 80024f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	1acb      	subs	r3, r1, r3
 80024fe:	b29b      	uxth	r3, r3
 8002500:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002504:	81fb      	strh	r3, [r7, #14]
	}
	return nb;
 8002506:	89fb      	ldrh	r3, [r7, #14]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	20000348 	.word	0x20000348

08002518 <IBUS_Init>:
#define NB_BYTE_MAX_PER_PROCESS		50

static ibus_t ibus = { 0 };

void IBUS_Init(uint16_t * channels)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
	ibus.channels = channels;
 8002520:	4a04      	ldr	r2, [pc, #16]	; (8002534 <IBUS_Init+0x1c>)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6013      	str	r3, [r2, #0]
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	20000f78 	.word	0x20000f78

08002538 <IBUS_Process>:
/*
 * @brief Check for new data on the uart and update channels array
 * @return True when a new have been successfully read
 */
bool_e IBUS_Process(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
	uint16_t nb_to_read = UART_Availables(UART_IBUS);
 800253e:	2001      	movs	r0, #1
 8002540:	f7ff fe1c 	bl	800217c <UART_Availables>
 8002544:	4603      	mov	r3, r0
 8002546:	81fb      	strh	r3, [r7, #14]
	if(!nb_to_read)
 8002548:	89fb      	ldrh	r3, [r7, #14]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <IBUS_Process+0x1a>
	{
		return FALSE;
 800254e:	2300      	movs	r3, #0
 8002550:	e092      	b.n	8002678 <IBUS_Process+0x140>
	}
	nb_to_read = MIN(nb_to_read, NB_BYTE_MAX_PER_PROCESS);
 8002552:	89fb      	ldrh	r3, [r7, #14]
 8002554:	2b32      	cmp	r3, #50	; 0x32
 8002556:	bf28      	it	cs
 8002558:	2332      	movcs	r3, #50	; 0x32
 800255a:	81fb      	strh	r3, [r7, #14]
	bool_e to_return = FALSE;
 800255c:	2300      	movs	r3, #0
 800255e:	737b      	strb	r3, [r7, #13]
	uint8_t c = 0;
 8002560:	2300      	movs	r3, #0
 8002562:	70fb      	strb	r3, [r7, #3]
	while(nb_to_read)
 8002564:	e083      	b.n	800266e <IBUS_Process+0x136>
	{
		UART_Get(UART_IBUS, &c);
 8002566:	1cfb      	adds	r3, r7, #3
 8002568:	4619      	mov	r1, r3
 800256a:	2001      	movs	r0, #1
 800256c:	f7ff fe14 	bl	8002198 <UART_Get>
		switch(ibus.state)
 8002570:	4b43      	ldr	r3, [pc, #268]	; (8002680 <IBUS_Process+0x148>)
 8002572:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002576:	2b02      	cmp	r3, #2
 8002578:	d027      	beq.n	80025ca <IBUS_Process+0x92>
 800257a:	2b02      	cmp	r3, #2
 800257c:	dc74      	bgt.n	8002668 <IBUS_Process+0x130>
 800257e:	2b00      	cmp	r3, #0
 8002580:	d002      	beq.n	8002588 <IBUS_Process+0x50>
 8002582:	2b01      	cmp	r3, #1
 8002584:	d00b      	beq.n	800259e <IBUS_Process+0x66>
 8002586:	e06f      	b.n	8002668 <IBUS_Process+0x130>
		{
			case STATE_IBUS_LENGTH :
				if(c == 0x20)
 8002588:	78fb      	ldrb	r3, [r7, #3]
 800258a:	2b20      	cmp	r3, #32
 800258c:	d167      	bne.n	800265e <IBUS_Process+0x126>
				{
					ibus.state = STATE_IBUS_COMMAND ;
 800258e:	4b3c      	ldr	r3, [pc, #240]	; (8002680 <IBUS_Process+0x148>)
 8002590:	2201      	movs	r2, #1
 8002592:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
					ibus.buffer[0] = c ;
 8002596:	78fa      	ldrb	r2, [r7, #3]
 8002598:	4b39      	ldr	r3, [pc, #228]	; (8002680 <IBUS_Process+0x148>)
 800259a:	711a      	strb	r2, [r3, #4]
				}
				break;
 800259c:	e05f      	b.n	800265e <IBUS_Process+0x126>
			case STATE_IBUS_COMMAND :
				if(c == 0x40)
 800259e:	78fb      	ldrb	r3, [r7, #3]
 80025a0:	2b40      	cmp	r3, #64	; 0x40
 80025a2:	d10a      	bne.n	80025ba <IBUS_Process+0x82>
				{
					ibus.state = STATE_IBUS_CHANNELS ;
 80025a4:	4b36      	ldr	r3, [pc, #216]	; (8002680 <IBUS_Process+0x148>)
 80025a6:	2202      	movs	r2, #2
 80025a8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
					ibus.buffer[1] = c ;
 80025ac:	78fa      	ldrb	r2, [r7, #3]
 80025ae:	4b34      	ldr	r3, [pc, #208]	; (8002680 <IBUS_Process+0x148>)
 80025b0:	715a      	strb	r2, [r3, #5]
					ibus.compteur = 2 ;
 80025b2:	4b33      	ldr	r3, [pc, #204]	; (8002680 <IBUS_Process+0x148>)
 80025b4:	2202      	movs	r2, #2
 80025b6:	849a      	strh	r2, [r3, #36]	; 0x24
				}
				else if(c != 0x20)
				{
					ibus.state = STATE_IBUS_LENGTH ;
				}
				break ;
 80025b8:	e053      	b.n	8002662 <IBUS_Process+0x12a>
				else if(c != 0x20)
 80025ba:	78fb      	ldrb	r3, [r7, #3]
 80025bc:	2b20      	cmp	r3, #32
 80025be:	d050      	beq.n	8002662 <IBUS_Process+0x12a>
					ibus.state = STATE_IBUS_LENGTH ;
 80025c0:	4b2f      	ldr	r3, [pc, #188]	; (8002680 <IBUS_Process+0x148>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				break ;
 80025c8:	e04b      	b.n	8002662 <IBUS_Process+0x12a>

			case STATE_IBUS_CHANNELS :
				ibus.buffer[ibus.compteur++] = c ;
 80025ca:	4b2d      	ldr	r3, [pc, #180]	; (8002680 <IBUS_Process+0x148>)
 80025cc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80025ce:	1c5a      	adds	r2, r3, #1
 80025d0:	b291      	uxth	r1, r2
 80025d2:	4a2b      	ldr	r2, [pc, #172]	; (8002680 <IBUS_Process+0x148>)
 80025d4:	8491      	strh	r1, [r2, #36]	; 0x24
 80025d6:	4619      	mov	r1, r3
 80025d8:	78fa      	ldrb	r2, [r7, #3]
 80025da:	4b29      	ldr	r3, [pc, #164]	; (8002680 <IBUS_Process+0x148>)
 80025dc:	440b      	add	r3, r1
 80025de:	711a      	strb	r2, [r3, #4]
				if(ibus.compteur == 32)
 80025e0:	4b27      	ldr	r3, [pc, #156]	; (8002680 <IBUS_Process+0x148>)
 80025e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80025e4:	2b20      	cmp	r3, #32
 80025e6:	d13e      	bne.n	8002666 <IBUS_Process+0x12e>
				{
					uint32_t cs = (uint32_t)(ibus.buffer[30] | (ibus.buffer[31] << 8)) ;
 80025e8:	4b25      	ldr	r3, [pc, #148]	; (8002680 <IBUS_Process+0x148>)
 80025ea:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80025ee:	461a      	mov	r2, r3
 80025f0:	4b23      	ldr	r3, [pc, #140]	; (8002680 <IBUS_Process+0x148>)
 80025f2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80025f6:	021b      	lsls	r3, r3, #8
 80025f8:	4313      	orrs	r3, r2
 80025fa:	607b      	str	r3, [r7, #4]
					if(0xFFFF - check_sum_f(ibus.buffer)== cs)
 80025fc:	4821      	ldr	r0, [pc, #132]	; (8002684 <IBUS_Process+0x14c>)
 80025fe:	f000 f843 	bl	8002688 <check_sum_f>
 8002602:	4603      	mov	r3, r0
 8002604:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002608:	33ff      	adds	r3, #255	; 0xff
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	429a      	cmp	r2, r3
 800260e:	d121      	bne.n	8002654 <IBUS_Process+0x11c>
					{
						for(uint32_t radio = 0; radio < 28; radio +=2)
 8002610:	2300      	movs	r3, #0
 8002612:	60bb      	str	r3, [r7, #8]
 8002614:	e019      	b.n	800264a <IBUS_Process+0x112>
						{
							ibus.channels[radio / 2] = (int32_t)(ibus.buffer[radio+2] | (ibus.buffer[radio + 3] << 8));
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	3302      	adds	r3, #2
 800261a:	4a19      	ldr	r2, [pc, #100]	; (8002680 <IBUS_Process+0x148>)
 800261c:	4413      	add	r3, r2
 800261e:	791b      	ldrb	r3, [r3, #4]
 8002620:	b21a      	sxth	r2, r3
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	3303      	adds	r3, #3
 8002626:	4916      	ldr	r1, [pc, #88]	; (8002680 <IBUS_Process+0x148>)
 8002628:	440b      	add	r3, r1
 800262a:	791b      	ldrb	r3, [r3, #4]
 800262c:	021b      	lsls	r3, r3, #8
 800262e:	b21b      	sxth	r3, r3
 8002630:	4313      	orrs	r3, r2
 8002632:	b219      	sxth	r1, r3
 8002634:	4b12      	ldr	r3, [pc, #72]	; (8002680 <IBUS_Process+0x148>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	f023 0301 	bic.w	r3, r3, #1
 800263e:	4413      	add	r3, r2
 8002640:	b28a      	uxth	r2, r1
 8002642:	801a      	strh	r2, [r3, #0]
						for(uint32_t radio = 0; radio < 28; radio +=2)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	3302      	adds	r3, #2
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	2b1b      	cmp	r3, #27
 800264e:	d9e2      	bls.n	8002616 <IBUS_Process+0xde>
						}
						to_return = TRUE;
 8002650:	2301      	movs	r3, #1
 8002652:	737b      	strb	r3, [r7, #13]
					}
					ibus.state = STATE_IBUS_LENGTH ;
 8002654:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <IBUS_Process+0x148>)
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				}
				break;
 800265c:	e003      	b.n	8002666 <IBUS_Process+0x12e>
				break;
 800265e:	bf00      	nop
 8002660:	e002      	b.n	8002668 <IBUS_Process+0x130>
				break ;
 8002662:	bf00      	nop
 8002664:	e000      	b.n	8002668 <IBUS_Process+0x130>
				break;
 8002666:	bf00      	nop
		}
		nb_to_read --;
 8002668:	89fb      	ldrh	r3, [r7, #14]
 800266a:	3b01      	subs	r3, #1
 800266c:	81fb      	strh	r3, [r7, #14]
	while(nb_to_read)
 800266e:	89fb      	ldrh	r3, [r7, #14]
 8002670:	2b00      	cmp	r3, #0
 8002672:	f47f af78 	bne.w	8002566 <IBUS_Process+0x2e>
	}

	return to_return;
 8002676:	7b7b      	ldrb	r3, [r7, #13]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	20000f78 	.word	0x20000f78
 8002684:	20000f7c 	.word	0x20000f7c

08002688 <check_sum_f>:

uint32_t check_sum_f(uint8_t * buffer)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
	uint32_t sum = 0 ;
 8002690:	2300      	movs	r3, #0
 8002692:	60fb      	str	r3, [r7, #12]
	for(uint8_t b=0; b <30; b++)
 8002694:	2300      	movs	r3, #0
 8002696:	72fb      	strb	r3, [r7, #11]
 8002698:	e00a      	b.n	80026b0 <check_sum_f+0x28>
		sum += (uint32_t)buffer[b];
 800269a:	7afb      	ldrb	r3, [r7, #11]
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	4413      	add	r3, r2
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	461a      	mov	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	4413      	add	r3, r2
 80026a8:	60fb      	str	r3, [r7, #12]
	for(uint8_t b=0; b <30; b++)
 80026aa:	7afb      	ldrb	r3, [r7, #11]
 80026ac:	3301      	adds	r3, #1
 80026ae:	72fb      	strb	r3, [r7, #11]
 80026b0:	7afb      	ldrb	r3, [r7, #11]
 80026b2:	2b1d      	cmp	r3, #29
 80026b4:	d9f1      	bls.n	800269a <check_sum_f+0x12>
	return sum ;
 80026b6:	68fb      	ldr	r3, [r7, #12]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <RADIO_Process_Init>:
#define TIMEOUT_RADIO_MS	50

static radio_t radio = { 0 };

void RADIO_Process_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
#if USE_IBUS
	IBUS_Init(radio.channels);
 80026c8:	4802      	ldr	r0, [pc, #8]	; (80026d4 <RADIO_Process_Init+0x10>)
 80026ca:	f7ff ff25 	bl	8002518 <IBUS_Init>
#endif
}
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	20000fa4 	.word	0x20000fa4

080026d8 <RADIO_Process_Main>:

void RADIO_Process_Main(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0

#if USE_IBUS
	if(IBUS_Process())
 80026dc:	f7ff ff2c 	bl	8002538 <IBUS_Process>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d009      	beq.n	80026fa <RADIO_Process_Main+0x22>
	{
		radio.next_update = HAL_GetTick() + TIMEOUT_RADIO_MS;
 80026e6:	f001 fb47 	bl	8003d78 <HAL_GetTick>
 80026ea:	4603      	mov	r3, r0
 80026ec:	3332      	adds	r3, #50	; 0x32
 80026ee:	4a09      	ldr	r2, [pc, #36]	; (8002714 <RADIO_Process_Main+0x3c>)
 80026f0:	6213      	str	r3, [r2, #32]
		radio.state = radio_state_eOK;
 80026f2:	4b08      	ldr	r3, [pc, #32]	; (8002714 <RADIO_Process_Main+0x3c>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	771a      	strb	r2, [r3, #28]
	else if(HAL_GetTick() > radio.next_update)
	{
		radio.state = radio_state_eTIMEOUT;
	}
#endif
}
 80026f8:	e009      	b.n	800270e <RADIO_Process_Main+0x36>
	else if(HAL_GetTick() > radio.next_update)
 80026fa:	f001 fb3d 	bl	8003d78 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	4b04      	ldr	r3, [pc, #16]	; (8002714 <RADIO_Process_Main+0x3c>)
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	429a      	cmp	r2, r3
 8002706:	d902      	bls.n	800270e <RADIO_Process_Main+0x36>
		radio.state = radio_state_eTIMEOUT;
 8002708:	4b02      	ldr	r3, [pc, #8]	; (8002714 <RADIO_Process_Main+0x3c>)
 800270a:	2201      	movs	r2, #1
 800270c:	771a      	strb	r2, [r3, #28]
}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20000fa4 	.word	0x20000fa4

08002718 <RADIO_Get_State>:

radio_state_e RADIO_Get_State(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
	return radio.state;
 800271c:	4b03      	ldr	r3, [pc, #12]	; (800272c <RADIO_Get_State+0x14>)
 800271e:	7f1b      	ldrb	r3, [r3, #28]
}
 8002720:	4618      	mov	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	20000fa4 	.word	0x20000fa4

08002730 <RADIO_Get_Channel>:

uint16_t * RADIO_Get_Channel(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
	return radio.channels;
 8002734:	4b02      	ldr	r3, [pc, #8]	; (8002740 <RADIO_Get_Channel+0x10>)
}
 8002736:	4618      	mov	r0, r3
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	20000fa4 	.word	0x20000fa4

08002744 <MPU_Init>:
/*
 * @brief Wake up the MPU6000
 *		  Configure the Gyroscope and the Accelerometer
 */
void MPU_Init(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af02      	add	r7, sp, #8
	/* Set the Gyroscope and Accelerometer data buffer */
	mpu.gyro_data = &mpu.data[8];
 800274a:	4b59      	ldr	r3, [pc, #356]	; (80028b0 <MPU_Init+0x16c>)
 800274c:	4a59      	ldr	r2, [pc, #356]	; (80028b4 <MPU_Init+0x170>)
 800274e:	611a      	str	r2, [r3, #16]
	mpu.acc_data = &mpu.data[0];
 8002750:	4b57      	ldr	r3, [pc, #348]	; (80028b0 <MPU_Init+0x16c>)
 8002752:	4a59      	ldr	r2, [pc, #356]	; (80028b8 <MPU_Init+0x174>)
 8002754:	625a      	str	r2, [r3, #36]	; 0x24
	/* Disable I2C */
	SPI_Transmit(SPI_MPU, CS_MPU, mpu_disable_i2c, 2);
	HAL_Delay(150);
#else
	/* Check is the mpu responds */
	if(I2C_Is_Device_Ready(I2C_MPU, MPU6050_I2C_ADDR))
 8002756:	21d0      	movs	r1, #208	; 0xd0
 8002758:	2000      	movs	r0, #0
 800275a:	f7ff fb75 	bl	8001e48 <I2C_Is_Device_Ready>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d003      	beq.n	800276c <MPU_Init+0x28>
	{
		mpu.state = mpu_state_eERROR;
 8002764:	4b52      	ldr	r3, [pc, #328]	; (80028b0 <MPU_Init+0x16c>)
 8002766:	2201      	movs	r2, #1
 8002768:	701a      	strb	r2, [r3, #0]
 800276a:	e09d      	b.n	80028a8 <MPU_Init+0x164>
		return;
	}
	/* Power up the mpu an wait for it to start */
	HAL_GPIO_WritePin(MPU_POWER_GPIO_Port, MPU_POWER_Pin, GPIO_PIN_SET);
 800276c:	2201      	movs	r2, #1
 800276e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002772:	4852      	ldr	r0, [pc, #328]	; (80028bc <MPU_Init+0x178>)
 8002774:	f002 f9fa 	bl	8004b6c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8002778:	20c8      	movs	r0, #200	; 0xc8
 800277a:	f001 fb09 	bl	8003d90 <HAL_Delay>
	/* Wake up the mpu */
	uint8_t wakeup_data = 0x80;
 800277e:	2380      	movs	r3, #128	; 0x80
 8002780:	71fb      	strb	r3, [r7, #7]
	I2C_Mem_Write(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_PWR_MGMT_1, &wakeup_data, 1);
 8002782:	1dfb      	adds	r3, r7, #7
 8002784:	2201      	movs	r2, #1
 8002786:	9200      	str	r2, [sp, #0]
 8002788:	226b      	movs	r2, #107	; 0x6b
 800278a:	21d0      	movs	r1, #208	; 0xd0
 800278c:	2000      	movs	r0, #0
 800278e:	f7ff faf1 	bl	8001d74 <I2C_Mem_Write>
	HAL_Delay(15);
 8002792:	200f      	movs	r0, #15
 8002794:	f001 fafc 	bl	8003d90 <HAL_Delay>
	/* Select the clock */
	uint8_t clock_select = 0x03;
 8002798:	2303      	movs	r3, #3
 800279a:	71bb      	strb	r3, [r7, #6]
	I2C_Mem_Write(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_PWR_MGMT_1, &clock_select, 1);
 800279c:	1dbb      	adds	r3, r7, #6
 800279e:	2201      	movs	r2, #1
 80027a0:	9200      	str	r2, [sp, #0]
 80027a2:	226b      	movs	r2, #107	; 0x6b
 80027a4:	21d0      	movs	r1, #208	; 0xd0
 80027a6:	2000      	movs	r0, #0
 80027a8:	f7ff fae4 	bl	8001d74 <I2C_Mem_Write>
	SPI_Transmit(SPI_MPU, CS_MPU, temp_write, 2);
	HAL_Delay(150);
#else
	/* Sensitivity configuration */
	uint8_t temp;
	I2C_Mem_Read(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_GYRO_CONFIG, &temp, 1);
 80027ac:	1d7b      	adds	r3, r7, #5
 80027ae:	2201      	movs	r2, #1
 80027b0:	9200      	str	r2, [sp, #0]
 80027b2:	221b      	movs	r2, #27
 80027b4:	21d0      	movs	r1, #208	; 0xd0
 80027b6:	2000      	movs	r0, #0
 80027b8:	f7ff fb00 	bl	8001dbc <I2C_Mem_Read>
	temp = (temp & 0xE7) | (uint8_t)mpu.gyro_range << 3;
 80027bc:	797b      	ldrb	r3, [r7, #5]
 80027be:	b25b      	sxtb	r3, r3
 80027c0:	f023 0318 	bic.w	r3, r3, #24
 80027c4:	b25a      	sxtb	r2, r3
 80027c6:	4b3a      	ldr	r3, [pc, #232]	; (80028b0 <MPU_Init+0x16c>)
 80027c8:	7bdb      	ldrb	r3, [r3, #15]
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	b25b      	sxtb	r3, r3
 80027ce:	4313      	orrs	r3, r2
 80027d0:	b25b      	sxtb	r3, r3
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	717b      	strb	r3, [r7, #5]
	I2C_Mem_Write(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_GYRO_CONFIG, &temp, 1);
 80027d6:	1d7b      	adds	r3, r7, #5
 80027d8:	2201      	movs	r2, #1
 80027da:	9200      	str	r2, [sp, #0]
 80027dc:	221b      	movs	r2, #27
 80027de:	21d0      	movs	r1, #208	; 0xd0
 80027e0:	2000      	movs	r0, #0
 80027e2:	f7ff fac7 	bl	8001d74 <I2C_Mem_Write>
#endif
	switch(mpu.gyro_range)
 80027e6:	4b32      	ldr	r3, [pc, #200]	; (80028b0 <MPU_Init+0x16c>)
 80027e8:	7bdb      	ldrb	r3, [r3, #15]
 80027ea:	2b03      	cmp	r3, #3
 80027ec:	d81a      	bhi.n	8002824 <MPU_Init+0xe0>
 80027ee:	a201      	add	r2, pc, #4	; (adr r2, 80027f4 <MPU_Init+0xb0>)
 80027f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f4:	08002805 	.word	0x08002805
 80027f8:	0800280d 	.word	0x0800280d
 80027fc:	08002815 	.word	0x08002815
 8002800:	0800281d 	.word	0x0800281d
	{
		case MPU_GYRO_250s :
			mpu.gyro_conversion = (float)1 / MPU6050_GYRO_SENS_250 ;
 8002804:	4b2a      	ldr	r3, [pc, #168]	; (80028b0 <MPU_Init+0x16c>)
 8002806:	4a2e      	ldr	r2, [pc, #184]	; (80028c0 <MPU_Init+0x17c>)
 8002808:	615a      	str	r2, [r3, #20]
			break;
 800280a:	e00b      	b.n	8002824 <MPU_Init+0xe0>
		case MPU_GYRO_500s :
			mpu.gyro_conversion = (float)1 / MPU6050_GYRO_SENS_500 ;
 800280c:	4b28      	ldr	r3, [pc, #160]	; (80028b0 <MPU_Init+0x16c>)
 800280e:	4a2d      	ldr	r2, [pc, #180]	; (80028c4 <MPU_Init+0x180>)
 8002810:	615a      	str	r2, [r3, #20]
			break;
 8002812:	e007      	b.n	8002824 <MPU_Init+0xe0>
		case MPU_GYRO_1000s :
			mpu.gyro_conversion = (float)1 / MPU6050_GYRO_SENS_1000 ;
 8002814:	4b26      	ldr	r3, [pc, #152]	; (80028b0 <MPU_Init+0x16c>)
 8002816:	4a2c      	ldr	r2, [pc, #176]	; (80028c8 <MPU_Init+0x184>)
 8002818:	615a      	str	r2, [r3, #20]
			break;
 800281a:	e003      	b.n	8002824 <MPU_Init+0xe0>
		case MPU_GYRO_2000s :
			mpu.gyro_conversion = (float)1 / MPU6050_GYRO_SENS_2000 ;
 800281c:	4b24      	ldr	r3, [pc, #144]	; (80028b0 <MPU_Init+0x16c>)
 800281e:	4a2b      	ldr	r2, [pc, #172]	; (80028cc <MPU_Init+0x188>)
 8002820:	615a      	str	r2, [r3, #20]
			break;
 8002822:	bf00      	nop
	temp_write[1] = (temp_read[1] & 0xE7) | (uint8_t)mpu.acc_range << 3;
	SPI_Transmit(SPI_MPU, CS_MPU, temp_write, 2);
	HAL_Delay(150);
#else
	/* Sensitivity configuration */
	I2C_Mem_Read(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_ACCEL_CONFIG, &temp, 1);
 8002824:	1d7b      	adds	r3, r7, #5
 8002826:	2201      	movs	r2, #1
 8002828:	9200      	str	r2, [sp, #0]
 800282a:	221c      	movs	r2, #28
 800282c:	21d0      	movs	r1, #208	; 0xd0
 800282e:	2000      	movs	r0, #0
 8002830:	f7ff fac4 	bl	8001dbc <I2C_Mem_Read>
	temp = (temp & 0xE7) | (uint8_t)mpu.acc_range << 3;
 8002834:	797b      	ldrb	r3, [r7, #5]
 8002836:	b25b      	sxtb	r3, r3
 8002838:	f023 0318 	bic.w	r3, r3, #24
 800283c:	b25a      	sxtb	r2, r3
 800283e:	4b1c      	ldr	r3, [pc, #112]	; (80028b0 <MPU_Init+0x16c>)
 8002840:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	b25b      	sxtb	r3, r3
 8002848:	4313      	orrs	r3, r2
 800284a:	b25b      	sxtb	r3, r3
 800284c:	b2db      	uxtb	r3, r3
 800284e:	717b      	strb	r3, [r7, #5]
	I2C_Mem_Write(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_ACCEL_CONFIG, &temp, 1);
 8002850:	1d7b      	adds	r3, r7, #5
 8002852:	2201      	movs	r2, #1
 8002854:	9200      	str	r2, [sp, #0]
 8002856:	221c      	movs	r2, #28
 8002858:	21d0      	movs	r1, #208	; 0xd0
 800285a:	2000      	movs	r0, #0
 800285c:	f7ff fa8a 	bl	8001d74 <I2C_Mem_Write>
#endif
	switch(mpu.acc_range)
 8002860:	4b13      	ldr	r3, [pc, #76]	; (80028b0 <MPU_Init+0x16c>)
 8002862:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002866:	2b03      	cmp	r3, #3
 8002868:	d81e      	bhi.n	80028a8 <MPU_Init+0x164>
 800286a:	a201      	add	r2, pc, #4	; (adr r2, 8002870 <MPU_Init+0x12c>)
 800286c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002870:	08002881 	.word	0x08002881
 8002874:	0800288b 	.word	0x0800288b
 8002878:	08002895 	.word	0x08002895
 800287c:	0800289f 	.word	0x0800289f
	{
		case MPU_ACC_2G :
			mpu.acc_conversion = (float)1 / MPU6050_ACCE_SENS_2 ;
 8002880:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <MPU_Init+0x16c>)
 8002882:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8002886:	62da      	str	r2, [r3, #44]	; 0x2c
			break;
 8002888:	e00e      	b.n	80028a8 <MPU_Init+0x164>
		case MPU_ACC_4G :
			mpu.acc_conversion = (float)1 / MPU6050_ACCE_SENS_4 ;
 800288a:	4b09      	ldr	r3, [pc, #36]	; (80028b0 <MPU_Init+0x16c>)
 800288c:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8002890:	62da      	str	r2, [r3, #44]	; 0x2c
			break;
 8002892:	e009      	b.n	80028a8 <MPU_Init+0x164>
		case MPU_ACC_8G :
			mpu.acc_conversion = (float)1 / MPU6050_ACCE_SENS_8 ;
 8002894:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <MPU_Init+0x16c>)
 8002896:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800289a:	62da      	str	r2, [r3, #44]	; 0x2c
			break;
 800289c:	e004      	b.n	80028a8 <MPU_Init+0x164>
		case MPU_ACC_16G :
			mpu.acc_conversion = (float)1 / MPU6050_ACCE_SENS_16 ;
 800289e:	4b04      	ldr	r3, [pc, #16]	; (80028b0 <MPU_Init+0x16c>)
 80028a0:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 80028a4:	62da      	str	r2, [r3, #44]	; 0x2c
			break;
 80028a6:	bf00      	nop
	}
}
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	200000a4 	.word	0x200000a4
 80028b4:	200000ad 	.word	0x200000ad
 80028b8:	200000a5 	.word	0x200000a5
 80028bc:	40020800 	.word	0x40020800
 80028c0:	3bfa232d 	.word	0x3bfa232d
 80028c4:	3c7a232d 	.word	0x3c7a232d
 80028c8:	3cf9c190 	.word	0x3cf9c190
 80028cc:	3d79c190 	.word	0x3d79c190

080028d0 <MPU_Get_Gyro_Ptr>:
float * MPU_Get_Gyro_Ptr(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
	return mpu.gyro;
 80028d4:	4b02      	ldr	r3, [pc, #8]	; (80028e0 <MPU_Get_Gyro_Ptr+0x10>)
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	200000bc 	.word	0x200000bc

080028e4 <MPU_Get_Acc_Ptr>:

float * MPU_Get_Acc_Ptr(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
	return mpu.acc;
 80028e8:	4b02      	ldr	r3, [pc, #8]	; (80028f4 <MPU_Get_Acc_Ptr+0x10>)
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	200000d4 	.word	0x200000d4

080028f8 <MPU_Read_All_Dma>:
	MPU_Convert_Acc_Data();
	MPU_Convert_Gyro_Data();
}

void MPU_Read_All_Dma(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af02      	add	r7, sp, #8
	if(mpu.state == mpu_state_eERROR)
 80028fe:	4b0f      	ldr	r3, [pc, #60]	; (800293c <MPU_Read_All_Dma+0x44>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d015      	beq.n	8002932 <MPU_Read_All_Dma+0x3a>
	}
#if USE_SPI
	uint8_t registers [14] = {MPU6050_ACCEL_XOUT_H | MPU6050_READ};
	SPI_Transmit_Receive(SPI_MPU, CS_MPU, registers, mpu.data, 14);
#else
	HAL_StatusTypeDef state = I2C_Mem_Read_Dma(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_ACCEL_XOUT_H, mpu.data, 14);
 8002906:	230e      	movs	r3, #14
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	4b0d      	ldr	r3, [pc, #52]	; (8002940 <MPU_Read_All_Dma+0x48>)
 800290c:	223b      	movs	r2, #59	; 0x3b
 800290e:	21d0      	movs	r1, #208	; 0xd0
 8002910:	2000      	movs	r0, #0
 8002912:	f7ff fa77 	bl	8001e04 <I2C_Mem_Read_Dma>
 8002916:	4603      	mov	r3, r0
 8002918:	71fb      	strb	r3, [r7, #7]
	if(state)
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d003      	beq.n	8002928 <MPU_Read_All_Dma+0x30>
	{
		mpu.state = mpu_state_eERROR;
 8002920:	4b06      	ldr	r3, [pc, #24]	; (800293c <MPU_Read_All_Dma+0x44>)
 8002922:	2201      	movs	r2, #1
 8002924:	701a      	strb	r2, [r3, #0]
		return;
 8002926:	e005      	b.n	8002934 <MPU_Read_All_Dma+0x3c>
	}
	mpu.dma_state = dma_state_eIN_PORGRESS_ALL;
 8002928:	4b04      	ldr	r3, [pc, #16]	; (800293c <MPU_Read_All_Dma+0x44>)
 800292a:	2203      	movs	r2, #3
 800292c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002930:	e000      	b.n	8002934 <MPU_Read_All_Dma+0x3c>
		return;
 8002932:	bf00      	nop
#endif
}
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	200000a4 	.word	0x200000a4
 8002940:	200000a5 	.word	0x200000a5

08002944 <MPU_Convert_Acc_Data>:

/*
 * @brief Convert acc bytes to measurement
 */
void MPU_Convert_Acc_Data(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
	mpu.acc[0] = (int16_t)(mpu.acc_data[1] | (mpu.acc_data[0] << 8)) * mpu.acc_conversion;
 8002948:	4b27      	ldr	r3, [pc, #156]	; (80029e8 <MPU_Convert_Acc_Data+0xa4>)
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	3301      	adds	r3, #1
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	b21a      	sxth	r2, r3
 8002952:	4b25      	ldr	r3, [pc, #148]	; (80029e8 <MPU_Convert_Acc_Data+0xa4>)
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	021b      	lsls	r3, r3, #8
 800295a:	b21b      	sxth	r3, r3
 800295c:	4313      	orrs	r3, r2
 800295e:	b21b      	sxth	r3, r3
 8002960:	ee07 3a90 	vmov	s15, r3
 8002964:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002968:	4b1f      	ldr	r3, [pc, #124]	; (80029e8 <MPU_Convert_Acc_Data+0xa4>)
 800296a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800296e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002972:	4b1d      	ldr	r3, [pc, #116]	; (80029e8 <MPU_Convert_Acc_Data+0xa4>)
 8002974:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	mpu.acc[1] = (int16_t)(mpu.acc_data[3] | (mpu.acc_data[2] << 8)) * mpu.acc_conversion;
 8002978:	4b1b      	ldr	r3, [pc, #108]	; (80029e8 <MPU_Convert_Acc_Data+0xa4>)
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	3303      	adds	r3, #3
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	b21a      	sxth	r2, r3
 8002982:	4b19      	ldr	r3, [pc, #100]	; (80029e8 <MPU_Convert_Acc_Data+0xa4>)
 8002984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002986:	3302      	adds	r3, #2
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	021b      	lsls	r3, r3, #8
 800298c:	b21b      	sxth	r3, r3
 800298e:	4313      	orrs	r3, r2
 8002990:	b21b      	sxth	r3, r3
 8002992:	ee07 3a90 	vmov	s15, r3
 8002996:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800299a:	4b13      	ldr	r3, [pc, #76]	; (80029e8 <MPU_Convert_Acc_Data+0xa4>)
 800299c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80029a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029a4:	4b10      	ldr	r3, [pc, #64]	; (80029e8 <MPU_Convert_Acc_Data+0xa4>)
 80029a6:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	mpu.acc[2] = (int16_t)(mpu.acc_data[5] | (mpu.acc_data[4] << 8)) * mpu.acc_conversion;
 80029aa:	4b0f      	ldr	r3, [pc, #60]	; (80029e8 <MPU_Convert_Acc_Data+0xa4>)
 80029ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ae:	3305      	adds	r3, #5
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	b21a      	sxth	r2, r3
 80029b4:	4b0c      	ldr	r3, [pc, #48]	; (80029e8 <MPU_Convert_Acc_Data+0xa4>)
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	3304      	adds	r3, #4
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	021b      	lsls	r3, r3, #8
 80029be:	b21b      	sxth	r3, r3
 80029c0:	4313      	orrs	r3, r2
 80029c2:	b21b      	sxth	r3, r3
 80029c4:	ee07 3a90 	vmov	s15, r3
 80029c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029cc:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <MPU_Convert_Acc_Data+0xa4>)
 80029ce:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80029d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029d6:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <MPU_Convert_Acc_Data+0xa4>)
 80029d8:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
}
 80029dc:	bf00      	nop
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	200000a4 	.word	0x200000a4

080029ec <MPU_Convert_Gyro_Data>:

/*
 * @brief Convert gyro bytes to measurement
 */
void MPU_Convert_Gyro_Data(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
	mpu.gyro[0] = (int16_t)(mpu.gyro_data[1] | (mpu.gyro_data[0] << 8)) * mpu.gyro_conversion;
 80029f0:	4b27      	ldr	r3, [pc, #156]	; (8002a90 <MPU_Convert_Gyro_Data+0xa4>)
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	3301      	adds	r3, #1
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	b21a      	sxth	r2, r3
 80029fa:	4b25      	ldr	r3, [pc, #148]	; (8002a90 <MPU_Convert_Gyro_Data+0xa4>)
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	021b      	lsls	r3, r3, #8
 8002a02:	b21b      	sxth	r3, r3
 8002a04:	4313      	orrs	r3, r2
 8002a06:	b21b      	sxth	r3, r3
 8002a08:	ee07 3a90 	vmov	s15, r3
 8002a0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a10:	4b1f      	ldr	r3, [pc, #124]	; (8002a90 <MPU_Convert_Gyro_Data+0xa4>)
 8002a12:	edd3 7a05 	vldr	s15, [r3, #20]
 8002a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a1a:	4b1d      	ldr	r3, [pc, #116]	; (8002a90 <MPU_Convert_Gyro_Data+0xa4>)
 8002a1c:	edc3 7a06 	vstr	s15, [r3, #24]
	mpu.gyro[1] = (int16_t)(mpu.gyro_data[3] | (mpu.gyro_data[2] << 8)) * mpu.gyro_conversion;
 8002a20:	4b1b      	ldr	r3, [pc, #108]	; (8002a90 <MPU_Convert_Gyro_Data+0xa4>)
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	3303      	adds	r3, #3
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	b21a      	sxth	r2, r3
 8002a2a:	4b19      	ldr	r3, [pc, #100]	; (8002a90 <MPU_Convert_Gyro_Data+0xa4>)
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	3302      	adds	r3, #2
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	021b      	lsls	r3, r3, #8
 8002a34:	b21b      	sxth	r3, r3
 8002a36:	4313      	orrs	r3, r2
 8002a38:	b21b      	sxth	r3, r3
 8002a3a:	ee07 3a90 	vmov	s15, r3
 8002a3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a42:	4b13      	ldr	r3, [pc, #76]	; (8002a90 <MPU_Convert_Gyro_Data+0xa4>)
 8002a44:	edd3 7a05 	vldr	s15, [r3, #20]
 8002a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a4c:	4b10      	ldr	r3, [pc, #64]	; (8002a90 <MPU_Convert_Gyro_Data+0xa4>)
 8002a4e:	edc3 7a07 	vstr	s15, [r3, #28]
	mpu.gyro[2] = (int16_t)(mpu.gyro_data[5] | (mpu.gyro_data[4] << 8)) * mpu.gyro_conversion;
 8002a52:	4b0f      	ldr	r3, [pc, #60]	; (8002a90 <MPU_Convert_Gyro_Data+0xa4>)
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	3305      	adds	r3, #5
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	b21a      	sxth	r2, r3
 8002a5c:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <MPU_Convert_Gyro_Data+0xa4>)
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	3304      	adds	r3, #4
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	021b      	lsls	r3, r3, #8
 8002a66:	b21b      	sxth	r3, r3
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	b21b      	sxth	r3, r3
 8002a6c:	ee07 3a90 	vmov	s15, r3
 8002a70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a74:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <MPU_Convert_Gyro_Data+0xa4>)
 8002a76:	edd3 7a05 	vldr	s15, [r3, #20]
 8002a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a7e:	4b04      	ldr	r3, [pc, #16]	; (8002a90 <MPU_Convert_Gyro_Data+0xa4>)
 8002a80:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8002a84:	bf00      	nop
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	200000a4 	.word	0x200000a4

08002a94 <MPU_Is_Ok>:

/*
 * @brief get state of the mpu
 */
bool_e MPU_Is_Ok(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
	return mpu.state == mpu_state_eOK;
 8002a98:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <MPU_Is_Ok+0x1c>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	bf0c      	ite	eq
 8002aa0:	2301      	moveq	r3, #1
 8002aa2:	2300      	movne	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	200000a4 	.word	0x200000a4

08002ab4 <MPU_Rx_Complete_Callback>:

/*
 * @brief Called back on half rx cplt it
 */
bool_e MPU_Rx_Complete_Callback(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
	if(mpu.dma_state)
 8002ab8:	4b12      	ldr	r3, [pc, #72]	; (8002b04 <MPU_Rx_Complete_Callback+0x50>)
 8002aba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d01d      	beq.n	8002afe <MPU_Rx_Complete_Callback+0x4a>
	{
		switch(mpu.dma_state)
 8002ac2:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <MPU_Rx_Complete_Callback+0x50>)
 8002ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d00c      	beq.n	8002ae6 <MPU_Rx_Complete_Callback+0x32>
 8002acc:	2b03      	cmp	r3, #3
 8002ace:	dc0f      	bgt.n	8002af0 <MPU_Rx_Complete_Callback+0x3c>
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d002      	beq.n	8002ada <MPU_Rx_Complete_Callback+0x26>
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d003      	beq.n	8002ae0 <MPU_Rx_Complete_Callback+0x2c>
			case dma_state_eIN_PORGRESS_ALL:
				MPU_Convert_Acc_Data();
				MPU_Convert_Gyro_Data();
				break;
			default:
				break;
 8002ad8:	e00a      	b.n	8002af0 <MPU_Rx_Complete_Callback+0x3c>
				MPU_Convert_Gyro_Data();
 8002ada:	f7ff ff87 	bl	80029ec <MPU_Convert_Gyro_Data>
				break;
 8002ade:	e008      	b.n	8002af2 <MPU_Rx_Complete_Callback+0x3e>
				MPU_Convert_Acc_Data();
 8002ae0:	f7ff ff30 	bl	8002944 <MPU_Convert_Acc_Data>
				break;
 8002ae4:	e005      	b.n	8002af2 <MPU_Rx_Complete_Callback+0x3e>
				MPU_Convert_Acc_Data();
 8002ae6:	f7ff ff2d 	bl	8002944 <MPU_Convert_Acc_Data>
				MPU_Convert_Gyro_Data();
 8002aea:	f7ff ff7f 	bl	80029ec <MPU_Convert_Gyro_Data>
				break;
 8002aee:	e000      	b.n	8002af2 <MPU_Rx_Complete_Callback+0x3e>
				break;
 8002af0:	bf00      	nop
		}
		mpu.dma_state = dma_state_eIDLE;
 8002af2:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <MPU_Rx_Complete_Callback+0x50>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		return TRUE;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e000      	b.n	8002b00 <MPU_Rx_Complete_Callback+0x4c>
	}
	return FALSE;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	200000a4 	.word	0x200000a4

08002b08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	607b      	str	r3, [r7, #4]
 8002b12:	4b2f      	ldr	r3, [pc, #188]	; (8002bd0 <MX_DMA_Init+0xc8>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	4a2e      	ldr	r2, [pc, #184]	; (8002bd0 <MX_DMA_Init+0xc8>)
 8002b18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b1e:	4b2c      	ldr	r3, [pc, #176]	; (8002bd0 <MX_DMA_Init+0xc8>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b26:	607b      	str	r3, [r7, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	603b      	str	r3, [r7, #0]
 8002b2e:	4b28      	ldr	r3, [pc, #160]	; (8002bd0 <MX_DMA_Init+0xc8>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	4a27      	ldr	r2, [pc, #156]	; (8002bd0 <MX_DMA_Init+0xc8>)
 8002b34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b38:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3a:	4b25      	ldr	r3, [pc, #148]	; (8002bd0 <MX_DMA_Init+0xc8>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b42:	603b      	str	r3, [r7, #0]
 8002b44:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002b46:	2200      	movs	r2, #0
 8002b48:	2100      	movs	r1, #0
 8002b4a:	200b      	movs	r0, #11
 8002b4c:	f001 fa1f 	bl	8003f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002b50:	200b      	movs	r0, #11
 8002b52:	f001 fa38 	bl	8003fc6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002b56:	2200      	movs	r2, #0
 8002b58:	2100      	movs	r1, #0
 8002b5a:	200c      	movs	r0, #12
 8002b5c:	f001 fa17 	bl	8003f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002b60:	200c      	movs	r0, #12
 8002b62:	f001 fa30 	bl	8003fc6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002b66:	2200      	movs	r2, #0
 8002b68:	2100      	movs	r1, #0
 8002b6a:	200d      	movs	r0, #13
 8002b6c:	f001 fa0f 	bl	8003f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002b70:	200d      	movs	r0, #13
 8002b72:	f001 fa28 	bl	8003fc6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002b76:	2200      	movs	r2, #0
 8002b78:	2100      	movs	r1, #0
 8002b7a:	200e      	movs	r0, #14
 8002b7c:	f001 fa07 	bl	8003f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002b80:	200e      	movs	r0, #14
 8002b82:	f001 fa20 	bl	8003fc6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002b86:	2200      	movs	r2, #0
 8002b88:	2100      	movs	r1, #0
 8002b8a:	200f      	movs	r0, #15
 8002b8c:	f001 f9ff 	bl	8003f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002b90:	200f      	movs	r0, #15
 8002b92:	f001 fa18 	bl	8003fc6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002b96:	2200      	movs	r2, #0
 8002b98:	2100      	movs	r1, #0
 8002b9a:	2011      	movs	r0, #17
 8002b9c:	f001 f9f7 	bl	8003f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002ba0:	2011      	movs	r0, #17
 8002ba2:	f001 fa10 	bl	8003fc6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	2100      	movs	r1, #0
 8002baa:	203a      	movs	r0, #58	; 0x3a
 8002bac:	f001 f9ef 	bl	8003f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002bb0:	203a      	movs	r0, #58	; 0x3a
 8002bb2:	f001 fa08 	bl	8003fc6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	2100      	movs	r1, #0
 8002bba:	2046      	movs	r0, #70	; 0x46
 8002bbc:	f001 f9e7 	bl	8003f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002bc0:	2046      	movs	r0, #70	; 0x46
 8002bc2:	f001 fa00 	bl	8003fc6 <HAL_NVIC_EnableIRQ>

}
 8002bc6:	bf00      	nop
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40023800 	.word	0x40023800

08002bd4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b088      	sub	sp, #32
 8002bd8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bda:	f107 030c 	add.w	r3, r7, #12
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	605a      	str	r2, [r3, #4]
 8002be4:	609a      	str	r2, [r3, #8]
 8002be6:	60da      	str	r2, [r3, #12]
 8002be8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	60bb      	str	r3, [r7, #8]
 8002bee:	4b20      	ldr	r3, [pc, #128]	; (8002c70 <MX_GPIO_Init+0x9c>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	4a1f      	ldr	r2, [pc, #124]	; (8002c70 <MX_GPIO_Init+0x9c>)
 8002bf4:	f043 0304 	orr.w	r3, r3, #4
 8002bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfa:	4b1d      	ldr	r3, [pc, #116]	; (8002c70 <MX_GPIO_Init+0x9c>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	60bb      	str	r3, [r7, #8]
 8002c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	607b      	str	r3, [r7, #4]
 8002c0a:	4b19      	ldr	r3, [pc, #100]	; (8002c70 <MX_GPIO_Init+0x9c>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	4a18      	ldr	r2, [pc, #96]	; (8002c70 <MX_GPIO_Init+0x9c>)
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	6313      	str	r3, [r2, #48]	; 0x30
 8002c16:	4b16      	ldr	r3, [pc, #88]	; (8002c70 <MX_GPIO_Init+0x9c>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	607b      	str	r3, [r7, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	603b      	str	r3, [r7, #0]
 8002c26:	4b12      	ldr	r3, [pc, #72]	; (8002c70 <MX_GPIO_Init+0x9c>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	4a11      	ldr	r2, [pc, #68]	; (8002c70 <MX_GPIO_Init+0x9c>)
 8002c2c:	f043 0302 	orr.w	r3, r3, #2
 8002c30:	6313      	str	r3, [r2, #48]	; 0x30
 8002c32:	4b0f      	ldr	r3, [pc, #60]	; (8002c70 <MX_GPIO_Init+0x9c>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	603b      	str	r3, [r7, #0]
 8002c3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_STATE_Pin|LED_STATE2_Pin|MPU_POWER_Pin, GPIO_PIN_RESET);
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8002c44:	480b      	ldr	r0, [pc, #44]	; (8002c74 <MX_GPIO_Init+0xa0>)
 8002c46:	f001 ff91 	bl	8004b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_STATE_Pin|LED_STATE2_Pin|MPU_POWER_Pin;
 8002c4a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002c4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c50:	2301      	movs	r3, #1
 8002c52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c54:	2300      	movs	r3, #0
 8002c56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c5c:	f107 030c 	add.w	r3, r7, #12
 8002c60:	4619      	mov	r1, r3
 8002c62:	4804      	ldr	r0, [pc, #16]	; (8002c74 <MX_GPIO_Init+0xa0>)
 8002c64:	f001 fde6 	bl	8004834 <HAL_GPIO_Init>

}
 8002c68:	bf00      	nop
 8002c6a:	3720      	adds	r7, #32
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40023800 	.word	0x40023800
 8002c74:	40020800 	.word	0x40020800

08002c78 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002c7c:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <MX_I2C1_Init+0x50>)
 8002c7e:	4a13      	ldr	r2, [pc, #76]	; (8002ccc <MX_I2C1_Init+0x54>)
 8002c80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002c82:	4b11      	ldr	r3, [pc, #68]	; (8002cc8 <MX_I2C1_Init+0x50>)
 8002c84:	4a12      	ldr	r2, [pc, #72]	; (8002cd0 <MX_I2C1_Init+0x58>)
 8002c86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c88:	4b0f      	ldr	r3, [pc, #60]	; (8002cc8 <MX_I2C1_Init+0x50>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002c8e:	4b0e      	ldr	r3, [pc, #56]	; (8002cc8 <MX_I2C1_Init+0x50>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c94:	4b0c      	ldr	r3, [pc, #48]	; (8002cc8 <MX_I2C1_Init+0x50>)
 8002c96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c9c:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <MX_I2C1_Init+0x50>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002ca2:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <MX_I2C1_Init+0x50>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ca8:	4b07      	ldr	r3, [pc, #28]	; (8002cc8 <MX_I2C1_Init+0x50>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cae:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <MX_I2C1_Init+0x50>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002cb4:	4804      	ldr	r0, [pc, #16]	; (8002cc8 <MX_I2C1_Init+0x50>)
 8002cb6:	f001 ff73 	bl	8004ba0 <HAL_I2C_Init>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002cc0:	f000 f9d6 	bl	8003070 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002cc4:	bf00      	nop
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	20001464 	.word	0x20001464
 8002ccc:	40005400 	.word	0x40005400
 8002cd0:	00061a80 	.word	0x00061a80

08002cd4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b08a      	sub	sp, #40	; 0x28
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cdc:	f107 0314 	add.w	r3, r7, #20
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	605a      	str	r2, [r3, #4]
 8002ce6:	609a      	str	r2, [r3, #8]
 8002ce8:	60da      	str	r2, [r3, #12]
 8002cea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a50      	ldr	r2, [pc, #320]	; (8002e34 <HAL_I2C_MspInit+0x160>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	f040 8099 	bne.w	8002e2a <HAL_I2C_MspInit+0x156>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	4b4e      	ldr	r3, [pc, #312]	; (8002e38 <HAL_I2C_MspInit+0x164>)
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d00:	4a4d      	ldr	r2, [pc, #308]	; (8002e38 <HAL_I2C_MspInit+0x164>)
 8002d02:	f043 0302 	orr.w	r3, r3, #2
 8002d06:	6313      	str	r3, [r2, #48]	; 0x30
 8002d08:	4b4b      	ldr	r3, [pc, #300]	; (8002e38 <HAL_I2C_MspInit+0x164>)
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d14:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d1a:	2312      	movs	r3, #18
 8002d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d22:	2303      	movs	r3, #3
 8002d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d26:	2304      	movs	r3, #4
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d2a:	f107 0314 	add.w	r3, r7, #20
 8002d2e:	4619      	mov	r1, r3
 8002d30:	4842      	ldr	r0, [pc, #264]	; (8002e3c <HAL_I2C_MspInit+0x168>)
 8002d32:	f001 fd7f 	bl	8004834 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	4b3f      	ldr	r3, [pc, #252]	; (8002e38 <HAL_I2C_MspInit+0x164>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	4a3e      	ldr	r2, [pc, #248]	; (8002e38 <HAL_I2C_MspInit+0x164>)
 8002d40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d44:	6413      	str	r3, [r2, #64]	; 0x40
 8002d46:	4b3c      	ldr	r3, [pc, #240]	; (8002e38 <HAL_I2C_MspInit+0x164>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8002d52:	4b3b      	ldr	r3, [pc, #236]	; (8002e40 <HAL_I2C_MspInit+0x16c>)
 8002d54:	4a3b      	ldr	r2, [pc, #236]	; (8002e44 <HAL_I2C_MspInit+0x170>)
 8002d56:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002d58:	4b39      	ldr	r3, [pc, #228]	; (8002e40 <HAL_I2C_MspInit+0x16c>)
 8002d5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d5e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d60:	4b37      	ldr	r3, [pc, #220]	; (8002e40 <HAL_I2C_MspInit+0x16c>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d66:	4b36      	ldr	r3, [pc, #216]	; (8002e40 <HAL_I2C_MspInit+0x16c>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d6c:	4b34      	ldr	r3, [pc, #208]	; (8002e40 <HAL_I2C_MspInit+0x16c>)
 8002d6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d72:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d74:	4b32      	ldr	r3, [pc, #200]	; (8002e40 <HAL_I2C_MspInit+0x16c>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d7a:	4b31      	ldr	r3, [pc, #196]	; (8002e40 <HAL_I2C_MspInit+0x16c>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002d80:	4b2f      	ldr	r3, [pc, #188]	; (8002e40 <HAL_I2C_MspInit+0x16c>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d86:	4b2e      	ldr	r3, [pc, #184]	; (8002e40 <HAL_I2C_MspInit+0x16c>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d8c:	4b2c      	ldr	r3, [pc, #176]	; (8002e40 <HAL_I2C_MspInit+0x16c>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002d92:	482b      	ldr	r0, [pc, #172]	; (8002e40 <HAL_I2C_MspInit+0x16c>)
 8002d94:	f001 f932 	bl	8003ffc <HAL_DMA_Init>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8002d9e:	f000 f967 	bl	8003070 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a26      	ldr	r2, [pc, #152]	; (8002e40 <HAL_I2C_MspInit+0x16c>)
 8002da6:	639a      	str	r2, [r3, #56]	; 0x38
 8002da8:	4a25      	ldr	r2, [pc, #148]	; (8002e40 <HAL_I2C_MspInit+0x16c>)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8002dae:	4b26      	ldr	r3, [pc, #152]	; (8002e48 <HAL_I2C_MspInit+0x174>)
 8002db0:	4a26      	ldr	r2, [pc, #152]	; (8002e4c <HAL_I2C_MspInit+0x178>)
 8002db2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8002db4:	4b24      	ldr	r3, [pc, #144]	; (8002e48 <HAL_I2C_MspInit+0x174>)
 8002db6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dba:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002dbc:	4b22      	ldr	r3, [pc, #136]	; (8002e48 <HAL_I2C_MspInit+0x174>)
 8002dbe:	2240      	movs	r2, #64	; 0x40
 8002dc0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dc2:	4b21      	ldr	r3, [pc, #132]	; (8002e48 <HAL_I2C_MspInit+0x174>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002dc8:	4b1f      	ldr	r3, [pc, #124]	; (8002e48 <HAL_I2C_MspInit+0x174>)
 8002dca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dce:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dd0:	4b1d      	ldr	r3, [pc, #116]	; (8002e48 <HAL_I2C_MspInit+0x174>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dd6:	4b1c      	ldr	r3, [pc, #112]	; (8002e48 <HAL_I2C_MspInit+0x174>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002ddc:	4b1a      	ldr	r3, [pc, #104]	; (8002e48 <HAL_I2C_MspInit+0x174>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002de2:	4b19      	ldr	r3, [pc, #100]	; (8002e48 <HAL_I2C_MspInit+0x174>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002de8:	4b17      	ldr	r3, [pc, #92]	; (8002e48 <HAL_I2C_MspInit+0x174>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002dee:	4816      	ldr	r0, [pc, #88]	; (8002e48 <HAL_I2C_MspInit+0x174>)
 8002df0:	f001 f904 	bl	8003ffc <HAL_DMA_Init>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8002dfa:	f000 f939 	bl	8003070 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a11      	ldr	r2, [pc, #68]	; (8002e48 <HAL_I2C_MspInit+0x174>)
 8002e02:	635a      	str	r2, [r3, #52]	; 0x34
 8002e04:	4a10      	ldr	r2, [pc, #64]	; (8002e48 <HAL_I2C_MspInit+0x174>)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	201f      	movs	r0, #31
 8002e10:	f001 f8bd 	bl	8003f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002e14:	201f      	movs	r0, #31
 8002e16:	f001 f8d6 	bl	8003fc6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	2020      	movs	r0, #32
 8002e20:	f001 f8b5 	bl	8003f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002e24:	2020      	movs	r0, #32
 8002e26:	f001 f8ce 	bl	8003fc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002e2a:	bf00      	nop
 8002e2c:	3728      	adds	r7, #40	; 0x28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40005400 	.word	0x40005400
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	40020400 	.word	0x40020400
 8002e40:	200014b8 	.word	0x200014b8
 8002e44:	40026010 	.word	0x40026010
 8002e48:	20001404 	.word	0x20001404
 8002e4c:	400260a0 	.word	0x400260a0

08002e50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e56:	f000 ff29 	bl	8003cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e5a:	f000 f89f 	bl	8002f9c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e5e:	f7ff feb9 	bl	8002bd4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002e62:	f7ff fe51 	bl	8002b08 <MX_DMA_Init>
  MX_UART4_Init();
 8002e66:	f000 fb41 	bl	80034ec <MX_UART4_Init>
  MX_USART1_UART_Init();
 8002e6a:	f000 fb69 	bl	8003540 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002e6e:	f000 fa29 	bl	80032c4 <MX_TIM3_Init>
  MX_I2C1_Init();
 8002e72:	f7ff ff01 	bl	8002c78 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8002e76:	f000 fb8d 	bl	8003594 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Wait for everyone to start */
  HAL_Delay(15);
 8002e7a:	200f      	movs	r0, #15
 8002e7c:	f000 ff88 	bl	8003d90 <HAL_Delay>
  /* Peripherals initialization */
  UART_Init();
 8002e80:	f7ff f9d4 	bl	800222c <UART_Init>
  /* Task definition 	Name						Init process					Main process						1ms it process						Gyro data callback process */
  TASK_MANAGER_Add_Task("Gyro", 					MPU_Init, 						NULL, 								MPU_Read_All_Dma,  					NULL);
 8002e84:	2300      	movs	r3, #0
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	4b29      	ldr	r3, [pc, #164]	; (8002f30 <main+0xe0>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	4929      	ldr	r1, [pc, #164]	; (8002f34 <main+0xe4>)
 8002e8e:	482a      	ldr	r0, [pc, #168]	; (8002f38 <main+0xe8>)
 8002e90:	f000 feaa 	bl	8003be8 <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("Complementary Filter", 	COMPLEMENTARY_FILTER_Init, 		NULL, 								NULL,								COMPLEMENTARY_FILTER_Process);
 8002e94:	4b29      	ldr	r3, [pc, #164]	; (8002f3c <main+0xec>)
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	2300      	movs	r3, #0
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	4928      	ldr	r1, [pc, #160]	; (8002f40 <main+0xf0>)
 8002e9e:	4829      	ldr	r0, [pc, #164]	; (8002f44 <main+0xf4>)
 8002ea0:	f000 fea2 	bl	8003be8 <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("Controller", 				CONTROLLER_Init, 				NULL, 								NULL, 								CONTROLLER_Process);
 8002ea4:	4b28      	ldr	r3, [pc, #160]	; (8002f48 <main+0xf8>)
 8002ea6:	9300      	str	r3, [sp, #0]
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	2200      	movs	r2, #0
 8002eac:	4927      	ldr	r1, [pc, #156]	; (8002f4c <main+0xfc>)
 8002eae:	4828      	ldr	r0, [pc, #160]	; (8002f50 <main+0x100>)
 8002eb0:	f000 fe9a 	bl	8003be8 <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("Motor Mixer", 				NULL, 							NULL, 								MOTOR_MIXER_Process, 				MOTOR_MIXER_Process);
 8002eb4:	4b27      	ldr	r3, [pc, #156]	; (8002f54 <main+0x104>)
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	4b26      	ldr	r3, [pc, #152]	; (8002f54 <main+0x104>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	4826      	ldr	r0, [pc, #152]	; (8002f58 <main+0x108>)
 8002ec0:	f000 fe92 	bl	8003be8 <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("Motors",					MOTOR_Init, 					NULL, 								NULL, 								MOTOR_Process);
 8002ec4:	4b25      	ldr	r3, [pc, #148]	; (8002f5c <main+0x10c>)
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	2300      	movs	r3, #0
 8002eca:	2200      	movs	r2, #0
 8002ecc:	4924      	ldr	r1, [pc, #144]	; (8002f60 <main+0x110>)
 8002ece:	4825      	ldr	r0, [pc, #148]	; (8002f64 <main+0x114>)
 8002ed0:	f000 fe8a 	bl	8003be8 <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("Radio", 					RADIO_Process_Init, 			RADIO_Process_Main, 				NULL, 								NULL);
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	2300      	movs	r3, #0
 8002eda:	4a23      	ldr	r2, [pc, #140]	; (8002f68 <main+0x118>)
 8002edc:	4923      	ldr	r1, [pc, #140]	; (8002f6c <main+0x11c>)
 8002ede:	4824      	ldr	r0, [pc, #144]	; (8002f70 <main+0x120>)
 8002ee0:	f000 fe82 	bl	8003be8 <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("Data Logger", 				DATA_LOGGER_Init, 				DATA_LOGGER_Main, 					NULL, 								NULL);
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	2300      	movs	r3, #0
 8002eea:	4a22      	ldr	r2, [pc, #136]	; (8002f74 <main+0x124>)
 8002eec:	4922      	ldr	r1, [pc, #136]	; (8002f78 <main+0x128>)
 8002eee:	4823      	ldr	r0, [pc, #140]	; (8002f7c <main+0x12c>)
 8002ef0:	f000 fe7a 	bl	8003be8 <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("High Level", 				HIGH_LEVEL_Init, 				HIGH_LEVEL_Process_Main, 			NULL, 								NULL);
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	2300      	movs	r3, #0
 8002efa:	4a21      	ldr	r2, [pc, #132]	; (8002f80 <main+0x130>)
 8002efc:	4921      	ldr	r1, [pc, #132]	; (8002f84 <main+0x134>)
 8002efe:	4822      	ldr	r0, [pc, #136]	; (8002f88 <main+0x138>)
 8002f00:	f000 fe72 	bl	8003be8 <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("Led", 						NULL, 							NULL, 								Led_main_ms, NULL);
 8002f04:	2300      	movs	r3, #0
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	4b20      	ldr	r3, [pc, #128]	; (8002f8c <main+0x13c>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	4820      	ldr	r0, [pc, #128]	; (8002f90 <main+0x140>)
 8002f10:	f000 fe6a 	bl	8003be8 <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("Supervisor", 				NULL, 							NULL, 								SUPERVISOR_Process_Ms, NULL);
 8002f14:	2300      	movs	r3, #0
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	4b1e      	ldr	r3, [pc, #120]	; (8002f94 <main+0x144>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	481e      	ldr	r0, [pc, #120]	; (8002f98 <main+0x148>)
 8002f20:	f000 fe62 	bl	8003be8 <TASK_MANAGER_Add_Task>

  /* System initialization */
  TASK_MANAGER_Init();
 8002f24:	f000 fda6 	bl	8003a74 <TASK_MANAGER_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  TASK_MANAGER_Main();
 8002f28:	f000 fdd4 	bl	8003ad4 <TASK_MANAGER_Main>
 8002f2c:	e7fc      	b.n	8002f28 <main+0xd8>
 8002f2e:	bf00      	nop
 8002f30:	080028f9 	.word	0x080028f9
 8002f34:	08002745 	.word	0x08002745
 8002f38:	0800b3b8 	.word	0x0800b3b8
 8002f3c:	080004fd 	.word	0x080004fd
 8002f40:	080004c1 	.word	0x080004c1
 8002f44:	0800b3c0 	.word	0x0800b3c0
 8002f48:	08000891 	.word	0x08000891
 8002f4c:	0800085d 	.word	0x0800085d
 8002f50:	0800b3d8 	.word	0x0800b3d8
 8002f54:	08001975 	.word	0x08001975
 8002f58:	0800b3e4 	.word	0x0800b3e4
 8002f5c:	08001a6d 	.word	0x08001a6d
 8002f60:	08001a5d 	.word	0x08001a5d
 8002f64:	0800b3f0 	.word	0x0800b3f0
 8002f68:	080026d9 	.word	0x080026d9
 8002f6c:	080026c5 	.word	0x080026c5
 8002f70:	0800b3f8 	.word	0x0800b3f8
 8002f74:	08000cdd 	.word	0x08000cdd
 8002f78:	08000a3d 	.word	0x08000a3d
 8002f7c:	0800b400 	.word	0x0800b400
 8002f80:	080015b9 	.word	0x080015b9
 8002f84:	08001579 	.word	0x08001579
 8002f88:	0800b40c 	.word	0x0800b40c
 8002f8c:	0800182d 	.word	0x0800182d
 8002f90:	0800b418 	.word	0x0800b418
 8002f94:	08003a3b 	.word	0x08003a3b
 8002f98:	0800b41c 	.word	0x0800b41c

08002f9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b094      	sub	sp, #80	; 0x50
 8002fa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fa2:	f107 0320 	add.w	r3, r7, #32
 8002fa6:	2230      	movs	r2, #48	; 0x30
 8002fa8:	2100      	movs	r1, #0
 8002faa:	4618      	mov	r0, r3
 8002fac:	f007 fafe 	bl	800a5ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fb0:	f107 030c 	add.w	r3, r7, #12
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	605a      	str	r2, [r3, #4]
 8002fba:	609a      	str	r2, [r3, #8]
 8002fbc:	60da      	str	r2, [r3, #12]
 8002fbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60bb      	str	r3, [r7, #8]
 8002fc4:	4b28      	ldr	r3, [pc, #160]	; (8003068 <SystemClock_Config+0xcc>)
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc8:	4a27      	ldr	r2, [pc, #156]	; (8003068 <SystemClock_Config+0xcc>)
 8002fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fce:	6413      	str	r3, [r2, #64]	; 0x40
 8002fd0:	4b25      	ldr	r3, [pc, #148]	; (8003068 <SystemClock_Config+0xcc>)
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd8:	60bb      	str	r3, [r7, #8]
 8002fda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fdc:	2300      	movs	r3, #0
 8002fde:	607b      	str	r3, [r7, #4]
 8002fe0:	4b22      	ldr	r3, [pc, #136]	; (800306c <SystemClock_Config+0xd0>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a21      	ldr	r2, [pc, #132]	; (800306c <SystemClock_Config+0xd0>)
 8002fe6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fea:	6013      	str	r3, [r2, #0]
 8002fec:	4b1f      	ldr	r3, [pc, #124]	; (800306c <SystemClock_Config+0xd0>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ff4:	607b      	str	r3, [r7, #4]
 8002ff6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003000:	2310      	movs	r3, #16
 8003002:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003004:	2302      	movs	r3, #2
 8003006:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003008:	2300      	movs	r3, #0
 800300a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800300c:	2308      	movs	r3, #8
 800300e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003010:	23a8      	movs	r3, #168	; 0xa8
 8003012:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003014:	2302      	movs	r3, #2
 8003016:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003018:	2304      	movs	r3, #4
 800301a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800301c:	f107 0320 	add.w	r3, r7, #32
 8003020:	4618      	mov	r0, r3
 8003022:	f004 fe17 	bl	8007c54 <HAL_RCC_OscConfig>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800302c:	f000 f820 	bl	8003070 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003030:	230f      	movs	r3, #15
 8003032:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003034:	2302      	movs	r3, #2
 8003036:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800303c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003040:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003046:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003048:	f107 030c 	add.w	r3, r7, #12
 800304c:	2105      	movs	r1, #5
 800304e:	4618      	mov	r0, r3
 8003050:	f005 f878 	bl	8008144 <HAL_RCC_ClockConfig>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800305a:	f000 f809 	bl	8003070 <Error_Handler>
  }
}
 800305e:	bf00      	nop
 8003060:	3750      	adds	r7, #80	; 0x50
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40023800 	.word	0x40023800
 800306c:	40007000 	.word	0x40007000

08003070 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003074:	b672      	cpsid	i
}
 8003076:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003078:	e7fe      	b.n	8003078 <Error_Handler+0x8>
	...

0800307c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003082:	2300      	movs	r3, #0
 8003084:	607b      	str	r3, [r7, #4]
 8003086:	4b10      	ldr	r3, [pc, #64]	; (80030c8 <HAL_MspInit+0x4c>)
 8003088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308a:	4a0f      	ldr	r2, [pc, #60]	; (80030c8 <HAL_MspInit+0x4c>)
 800308c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003090:	6453      	str	r3, [r2, #68]	; 0x44
 8003092:	4b0d      	ldr	r3, [pc, #52]	; (80030c8 <HAL_MspInit+0x4c>)
 8003094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800309a:	607b      	str	r3, [r7, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800309e:	2300      	movs	r3, #0
 80030a0:	603b      	str	r3, [r7, #0]
 80030a2:	4b09      	ldr	r3, [pc, #36]	; (80030c8 <HAL_MspInit+0x4c>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	4a08      	ldr	r2, [pc, #32]	; (80030c8 <HAL_MspInit+0x4c>)
 80030a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ac:	6413      	str	r3, [r2, #64]	; 0x40
 80030ae:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <HAL_MspInit+0x4c>)
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b6:	603b      	str	r3, [r7, #0]
 80030b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	40023800 	.word	0x40023800

080030cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030d0:	e7fe      	b.n	80030d0 <NMI_Handler+0x4>

080030d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030d2:	b480      	push	{r7}
 80030d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030d6:	e7fe      	b.n	80030d6 <HardFault_Handler+0x4>

080030d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030dc:	e7fe      	b.n	80030dc <MemManage_Handler+0x4>

080030de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030de:	b480      	push	{r7}
 80030e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030e2:	e7fe      	b.n	80030e2 <BusFault_Handler+0x4>

080030e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030e8:	e7fe      	b.n	80030e8 <UsageFault_Handler+0x4>

080030ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030ea:	b480      	push	{r7}
 80030ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030ee:	bf00      	nop
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030fc:	bf00      	nop
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003106:	b480      	push	{r7}
 8003108:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800310a:	bf00      	nop
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003118:	f000 fe1a 	bl	8003d50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  TASK_MANAGER_It_ms();
 800311c:	f000 fd06 	bl	8003b2c <TASK_MANAGER_It_ms>
  /* USER CODE END SysTick_IRQn 1 */
}
 8003120:	bf00      	nop
 8003122:	bd80      	pop	{r7, pc}

08003124 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003128:	4802      	ldr	r0, [pc, #8]	; (8003134 <DMA1_Stream0_IRQHandler+0x10>)
 800312a:	f001 f8ff 	bl	800432c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800312e:	bf00      	nop
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	200014b8 	.word	0x200014b8

08003138 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800313c:	4802      	ldr	r0, [pc, #8]	; (8003148 <DMA1_Stream1_IRQHandler+0x10>)
 800313e:	f001 f8f5 	bl	800432c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003142:	bf00      	nop
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	200015c0 	.word	0x200015c0

0800314c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003150:	4802      	ldr	r0, [pc, #8]	; (800315c <DMA1_Stream2_IRQHandler+0x10>)
 8003152:	f001 f8eb 	bl	800432c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003156:	bf00      	nop
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	20001560 	.word	0x20001560

08003160 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003164:	4802      	ldr	r0, [pc, #8]	; (8003170 <DMA1_Stream3_IRQHandler+0x10>)
 8003166:	f001 f8e1 	bl	800432c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800316a:	bf00      	nop
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	20001664 	.word	0x20001664

08003174 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8003178:	4802      	ldr	r0, [pc, #8]	; (8003184 <DMA1_Stream4_IRQHandler+0x10>)
 800317a:	f001 f8d7 	bl	800432c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800317e:	bf00      	nop
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	2000180c 	.word	0x2000180c

08003188 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800318c:	4802      	ldr	r0, [pc, #8]	; (8003198 <DMA1_Stream6_IRQHandler+0x10>)
 800318e:	f001 f8cd 	bl	800432c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003192:	bf00      	nop
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	20001404 	.word	0x20001404

0800319c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80031a0:	4802      	ldr	r0, [pc, #8]	; (80031ac <I2C1_EV_IRQHandler+0x10>)
 80031a2:	f002 fc23 	bl	80059ec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80031a6:	bf00      	nop
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	20001464 	.word	0x20001464

080031b0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80031b4:	4802      	ldr	r0, [pc, #8]	; (80031c0 <I2C1_ER_IRQHandler+0x10>)
 80031b6:	f002 fd8a 	bl	8005cce <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80031ba:	bf00      	nop
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	20001464 	.word	0x20001464

080031c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80031c8:	4803      	ldr	r0, [pc, #12]	; (80031d8 <USART1_IRQHandler+0x14>)
 80031ca:	f006 f97d 	bl	80094c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  UART_Idle_Line_Callback(uart_e1);
 80031ce:	2000      	movs	r0, #0
 80031d0:	f7fe fee2 	bl	8001f98 <UART_Idle_Line_Callback>
  /* USER CODE END USART1_IRQn 1 */
}
 80031d4:	bf00      	nop
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	20001784 	.word	0x20001784

080031dc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80031e0:	4803      	ldr	r0, [pc, #12]	; (80031f0 <USART3_IRQHandler+0x14>)
 80031e2:	f006 f971 	bl	80094c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  UART_Idle_Line_Callback(uart_e3);
 80031e6:	2001      	movs	r0, #1
 80031e8:	f7fe fed6 	bl	8001f98 <UART_Idle_Line_Callback>
  /* USER CODE END USART3_IRQn 1 */
}
 80031ec:	bf00      	nop
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	20001620 	.word	0x20001620

080031f4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80031f8:	4803      	ldr	r0, [pc, #12]	; (8003208 <UART4_IRQHandler+0x14>)
 80031fa:	f006 f965 	bl	80094c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  UART_Idle_Line_Callback(uart_e4);
 80031fe:	2002      	movs	r0, #2
 8003200:	f7fe feca 	bl	8001f98 <UART_Idle_Line_Callback>
  /* USER CODE END UART4_IRQn 1 */
}
 8003204:	bf00      	nop
 8003206:	bd80      	pop	{r7, pc}
 8003208:	200017c8 	.word	0x200017c8

0800320c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003210:	4802      	ldr	r0, [pc, #8]	; (800321c <DMA2_Stream2_IRQHandler+0x10>)
 8003212:	f001 f88b 	bl	800432c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003216:	bf00      	nop
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	20001724 	.word	0x20001724

08003220 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003224:	4802      	ldr	r0, [pc, #8]	; (8003230 <DMA2_Stream7_IRQHandler+0x10>)
 8003226:	f001 f881 	bl	800432c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800322a:	bf00      	nop
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	200016c4 	.word	0x200016c4

08003234 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
	if(huart == &huart4)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a0d      	ldr	r2, [pc, #52]	; (8003274 <HAL_UART_TxCpltCallback+0x40>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d103      	bne.n	800324c <HAL_UART_TxCpltCallback+0x18>
	{
		UART_Transfer_Complete_Callback(uart_e4);
 8003244:	2002      	movs	r0, #2
 8003246:	f7fe fef5 	bl	8002034 <UART_Transfer_Complete_Callback>
	}
	else if(huart == &huart3)
	{
		UART_Transfer_Complete_Callback(uart_e3);
	}
}
 800324a:	e00e      	b.n	800326a <HAL_UART_TxCpltCallback+0x36>
	else if(huart == &huart1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a0a      	ldr	r2, [pc, #40]	; (8003278 <HAL_UART_TxCpltCallback+0x44>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d103      	bne.n	800325c <HAL_UART_TxCpltCallback+0x28>
		UART_Transfer_Complete_Callback(uart_e1);
 8003254:	2000      	movs	r0, #0
 8003256:	f7fe feed 	bl	8002034 <UART_Transfer_Complete_Callback>
}
 800325a:	e006      	b.n	800326a <HAL_UART_TxCpltCallback+0x36>
	else if(huart == &huart3)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a07      	ldr	r2, [pc, #28]	; (800327c <HAL_UART_TxCpltCallback+0x48>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d102      	bne.n	800326a <HAL_UART_TxCpltCallback+0x36>
		UART_Transfer_Complete_Callback(uart_e3);
 8003264:	2001      	movs	r0, #1
 8003266:	f7fe fee5 	bl	8002034 <UART_Transfer_Complete_Callback>
}
 800326a:	bf00      	nop
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	200017c8 	.word	0x200017c8
 8003278:	20001784 	.word	0x20001784
 800327c:	20001620 	.word	0x20001620

08003280 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
	if(MPU_Rx_Complete_Callback())
 8003288:	f7ff fc14 	bl	8002ab4 <MPU_Rx_Complete_Callback>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <HAL_I2C_MemRxCpltCallback+0x16>
	{
	  TASK_MANAGER_Gyro_Data_Ready();
 8003292:	f000 fc7d 	bl	8003b90 <TASK_MANAGER_Gyro_Data_Ready>
	}
}
 8003296:	bf00      	nop
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
	...

080032a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032a4:	4b06      	ldr	r3, [pc, #24]	; (80032c0 <SystemInit+0x20>)
 80032a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032aa:	4a05      	ldr	r2, [pc, #20]	; (80032c0 <SystemInit+0x20>)
 80032ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032b4:	bf00      	nop
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	e000ed00 	.word	0xe000ed00

080032c4 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b08e      	sub	sp, #56	; 0x38
 80032c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032ce:	2200      	movs	r2, #0
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	605a      	str	r2, [r3, #4]
 80032d4:	609a      	str	r2, [r3, #8]
 80032d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032d8:	f107 0320 	add.w	r3, r7, #32
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032e2:	1d3b      	adds	r3, r7, #4
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	605a      	str	r2, [r3, #4]
 80032ea:	609a      	str	r2, [r3, #8]
 80032ec:	60da      	str	r2, [r3, #12]
 80032ee:	611a      	str	r2, [r3, #16]
 80032f0:	615a      	str	r2, [r3, #20]
 80032f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80032f4:	4b3d      	ldr	r3, [pc, #244]	; (80033ec <MX_TIM3_Init+0x128>)
 80032f6:	4a3e      	ldr	r2, [pc, #248]	; (80033f0 <MX_TIM3_Init+0x12c>)
 80032f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 80032fa:	4b3c      	ldr	r3, [pc, #240]	; (80033ec <MX_TIM3_Init+0x128>)
 80032fc:	2253      	movs	r2, #83	; 0x53
 80032fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003300:	4b3a      	ldr	r3, [pc, #232]	; (80033ec <MX_TIM3_Init+0x128>)
 8003302:	2200      	movs	r2, #0
 8003304:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3999;
 8003306:	4b39      	ldr	r3, [pc, #228]	; (80033ec <MX_TIM3_Init+0x128>)
 8003308:	f640 729f 	movw	r2, #3999	; 0xf9f
 800330c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800330e:	4b37      	ldr	r3, [pc, #220]	; (80033ec <MX_TIM3_Init+0x128>)
 8003310:	2200      	movs	r2, #0
 8003312:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003314:	4b35      	ldr	r3, [pc, #212]	; (80033ec <MX_TIM3_Init+0x128>)
 8003316:	2280      	movs	r2, #128	; 0x80
 8003318:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800331a:	4834      	ldr	r0, [pc, #208]	; (80033ec <MX_TIM3_Init+0x128>)
 800331c:	f005 f8e2 	bl	80084e4 <HAL_TIM_Base_Init>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003326:	f7ff fea3 	bl	8003070 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800332a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800332e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003330:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003334:	4619      	mov	r1, r3
 8003336:	482d      	ldr	r0, [pc, #180]	; (80033ec <MX_TIM3_Init+0x128>)
 8003338:	f005 fb76 	bl	8008a28 <HAL_TIM_ConfigClockSource>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003342:	f7ff fe95 	bl	8003070 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003346:	4829      	ldr	r0, [pc, #164]	; (80033ec <MX_TIM3_Init+0x128>)
 8003348:	f005 f91b 	bl	8008582 <HAL_TIM_PWM_Init>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003352:	f7ff fe8d 	bl	8003070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003356:	2300      	movs	r3, #0
 8003358:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800335a:	2300      	movs	r3, #0
 800335c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800335e:	f107 0320 	add.w	r3, r7, #32
 8003362:	4619      	mov	r1, r3
 8003364:	4821      	ldr	r0, [pc, #132]	; (80033ec <MX_TIM3_Init+0x128>)
 8003366:	f005 ff37 	bl	80091d8 <HAL_TIMEx_MasterConfigSynchronization>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003370:	f7ff fe7e 	bl	8003070 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003374:	2360      	movs	r3, #96	; 0x60
 8003376:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 999;
 8003378:	f240 33e7 	movw	r3, #999	; 0x3e7
 800337c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800337e:	2300      	movs	r3, #0
 8003380:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003382:	2300      	movs	r3, #0
 8003384:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003386:	1d3b      	adds	r3, r7, #4
 8003388:	2200      	movs	r2, #0
 800338a:	4619      	mov	r1, r3
 800338c:	4817      	ldr	r0, [pc, #92]	; (80033ec <MX_TIM3_Init+0x128>)
 800338e:	f005 fa89 	bl	80088a4 <HAL_TIM_PWM_ConfigChannel>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003398:	f7ff fe6a 	bl	8003070 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800339c:	1d3b      	adds	r3, r7, #4
 800339e:	2204      	movs	r2, #4
 80033a0:	4619      	mov	r1, r3
 80033a2:	4812      	ldr	r0, [pc, #72]	; (80033ec <MX_TIM3_Init+0x128>)
 80033a4:	f005 fa7e 	bl	80088a4 <HAL_TIM_PWM_ConfigChannel>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80033ae:	f7ff fe5f 	bl	8003070 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80033b2:	1d3b      	adds	r3, r7, #4
 80033b4:	2208      	movs	r2, #8
 80033b6:	4619      	mov	r1, r3
 80033b8:	480c      	ldr	r0, [pc, #48]	; (80033ec <MX_TIM3_Init+0x128>)
 80033ba:	f005 fa73 	bl	80088a4 <HAL_TIM_PWM_ConfigChannel>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80033c4:	f7ff fe54 	bl	8003070 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80033c8:	1d3b      	adds	r3, r7, #4
 80033ca:	220c      	movs	r2, #12
 80033cc:	4619      	mov	r1, r3
 80033ce:	4807      	ldr	r0, [pc, #28]	; (80033ec <MX_TIM3_Init+0x128>)
 80033d0:	f005 fa68 	bl	80088a4 <HAL_TIM_PWM_ConfigChannel>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 80033da:	f7ff fe49 	bl	8003070 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80033de:	4803      	ldr	r0, [pc, #12]	; (80033ec <MX_TIM3_Init+0x128>)
 80033e0:	f000 f82a 	bl	8003438 <HAL_TIM_MspPostInit>

}
 80033e4:	bf00      	nop
 80033e6:	3738      	adds	r7, #56	; 0x38
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	20001518 	.word	0x20001518
 80033f0:	40000400 	.word	0x40000400

080033f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a0b      	ldr	r2, [pc, #44]	; (8003430 <HAL_TIM_Base_MspInit+0x3c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d10d      	bne.n	8003422 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003406:	2300      	movs	r3, #0
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	4b0a      	ldr	r3, [pc, #40]	; (8003434 <HAL_TIM_Base_MspInit+0x40>)
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	4a09      	ldr	r2, [pc, #36]	; (8003434 <HAL_TIM_Base_MspInit+0x40>)
 8003410:	f043 0302 	orr.w	r3, r3, #2
 8003414:	6413      	str	r3, [r2, #64]	; 0x40
 8003416:	4b07      	ldr	r3, [pc, #28]	; (8003434 <HAL_TIM_Base_MspInit+0x40>)
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	60fb      	str	r3, [r7, #12]
 8003420:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003422:	bf00      	nop
 8003424:	3714      	adds	r7, #20
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	40000400 	.word	0x40000400
 8003434:	40023800 	.word	0x40023800

08003438 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b08a      	sub	sp, #40	; 0x28
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003440:	f107 0314 	add.w	r3, r7, #20
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	605a      	str	r2, [r3, #4]
 800344a:	609a      	str	r2, [r3, #8]
 800344c:	60da      	str	r2, [r3, #12]
 800344e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a21      	ldr	r2, [pc, #132]	; (80034dc <HAL_TIM_MspPostInit+0xa4>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d13b      	bne.n	80034d2 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800345a:	2300      	movs	r3, #0
 800345c:	613b      	str	r3, [r7, #16]
 800345e:	4b20      	ldr	r3, [pc, #128]	; (80034e0 <HAL_TIM_MspPostInit+0xa8>)
 8003460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003462:	4a1f      	ldr	r2, [pc, #124]	; (80034e0 <HAL_TIM_MspPostInit+0xa8>)
 8003464:	f043 0301 	orr.w	r3, r3, #1
 8003468:	6313      	str	r3, [r2, #48]	; 0x30
 800346a:	4b1d      	ldr	r3, [pc, #116]	; (80034e0 <HAL_TIM_MspPostInit+0xa8>)
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	613b      	str	r3, [r7, #16]
 8003474:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003476:	2300      	movs	r3, #0
 8003478:	60fb      	str	r3, [r7, #12]
 800347a:	4b19      	ldr	r3, [pc, #100]	; (80034e0 <HAL_TIM_MspPostInit+0xa8>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	4a18      	ldr	r2, [pc, #96]	; (80034e0 <HAL_TIM_MspPostInit+0xa8>)
 8003480:	f043 0302 	orr.w	r3, r3, #2
 8003484:	6313      	str	r3, [r2, #48]	; 0x30
 8003486:	4b16      	ldr	r3, [pc, #88]	; (80034e0 <HAL_TIM_MspPostInit+0xa8>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003492:	23c0      	movs	r3, #192	; 0xc0
 8003494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003496:	2302      	movs	r3, #2
 8003498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349a:	2300      	movs	r3, #0
 800349c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800349e:	2300      	movs	r3, #0
 80034a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80034a2:	2302      	movs	r3, #2
 80034a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034a6:	f107 0314 	add.w	r3, r7, #20
 80034aa:	4619      	mov	r1, r3
 80034ac:	480d      	ldr	r0, [pc, #52]	; (80034e4 <HAL_TIM_MspPostInit+0xac>)
 80034ae:	f001 f9c1 	bl	8004834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80034b2:	2303      	movs	r3, #3
 80034b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b6:	2302      	movs	r3, #2
 80034b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ba:	2300      	movs	r3, #0
 80034bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034be:	2300      	movs	r3, #0
 80034c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80034c2:	2302      	movs	r3, #2
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034c6:	f107 0314 	add.w	r3, r7, #20
 80034ca:	4619      	mov	r1, r3
 80034cc:	4806      	ldr	r0, [pc, #24]	; (80034e8 <HAL_TIM_MspPostInit+0xb0>)
 80034ce:	f001 f9b1 	bl	8004834 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80034d2:	bf00      	nop
 80034d4:	3728      	adds	r7, #40	; 0x28
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	40000400 	.word	0x40000400
 80034e0:	40023800 	.word	0x40023800
 80034e4:	40020000 	.word	0x40020000
 80034e8:	40020400 	.word	0x40020400

080034ec <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80034f0:	4b11      	ldr	r3, [pc, #68]	; (8003538 <MX_UART4_Init+0x4c>)
 80034f2:	4a12      	ldr	r2, [pc, #72]	; (800353c <MX_UART4_Init+0x50>)
 80034f4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80034f6:	4b10      	ldr	r3, [pc, #64]	; (8003538 <MX_UART4_Init+0x4c>)
 80034f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80034fc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80034fe:	4b0e      	ldr	r3, [pc, #56]	; (8003538 <MX_UART4_Init+0x4c>)
 8003500:	2200      	movs	r2, #0
 8003502:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003504:	4b0c      	ldr	r3, [pc, #48]	; (8003538 <MX_UART4_Init+0x4c>)
 8003506:	2200      	movs	r2, #0
 8003508:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800350a:	4b0b      	ldr	r3, [pc, #44]	; (8003538 <MX_UART4_Init+0x4c>)
 800350c:	2200      	movs	r2, #0
 800350e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003510:	4b09      	ldr	r3, [pc, #36]	; (8003538 <MX_UART4_Init+0x4c>)
 8003512:	220c      	movs	r2, #12
 8003514:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003516:	4b08      	ldr	r3, [pc, #32]	; (8003538 <MX_UART4_Init+0x4c>)
 8003518:	2200      	movs	r2, #0
 800351a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800351c:	4b06      	ldr	r3, [pc, #24]	; (8003538 <MX_UART4_Init+0x4c>)
 800351e:	2200      	movs	r2, #0
 8003520:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003522:	4805      	ldr	r0, [pc, #20]	; (8003538 <MX_UART4_Init+0x4c>)
 8003524:	f005 fed4 	bl	80092d0 <HAL_UART_Init>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800352e:	f7ff fd9f 	bl	8003070 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003532:	bf00      	nop
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	200017c8 	.word	0x200017c8
 800353c:	40004c00 	.word	0x40004c00

08003540 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003544:	4b11      	ldr	r3, [pc, #68]	; (800358c <MX_USART1_UART_Init+0x4c>)
 8003546:	4a12      	ldr	r2, [pc, #72]	; (8003590 <MX_USART1_UART_Init+0x50>)
 8003548:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800354a:	4b10      	ldr	r3, [pc, #64]	; (800358c <MX_USART1_UART_Init+0x4c>)
 800354c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003550:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003552:	4b0e      	ldr	r3, [pc, #56]	; (800358c <MX_USART1_UART_Init+0x4c>)
 8003554:	2200      	movs	r2, #0
 8003556:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003558:	4b0c      	ldr	r3, [pc, #48]	; (800358c <MX_USART1_UART_Init+0x4c>)
 800355a:	2200      	movs	r2, #0
 800355c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800355e:	4b0b      	ldr	r3, [pc, #44]	; (800358c <MX_USART1_UART_Init+0x4c>)
 8003560:	2200      	movs	r2, #0
 8003562:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003564:	4b09      	ldr	r3, [pc, #36]	; (800358c <MX_USART1_UART_Init+0x4c>)
 8003566:	220c      	movs	r2, #12
 8003568:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800356a:	4b08      	ldr	r3, [pc, #32]	; (800358c <MX_USART1_UART_Init+0x4c>)
 800356c:	2200      	movs	r2, #0
 800356e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003570:	4b06      	ldr	r3, [pc, #24]	; (800358c <MX_USART1_UART_Init+0x4c>)
 8003572:	2200      	movs	r2, #0
 8003574:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003576:	4805      	ldr	r0, [pc, #20]	; (800358c <MX_USART1_UART_Init+0x4c>)
 8003578:	f005 feaa 	bl	80092d0 <HAL_UART_Init>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003582:	f7ff fd75 	bl	8003070 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003586:	bf00      	nop
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	20001784 	.word	0x20001784
 8003590:	40011000 	.word	0x40011000

08003594 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003598:	4b11      	ldr	r3, [pc, #68]	; (80035e0 <MX_USART3_UART_Init+0x4c>)
 800359a:	4a12      	ldr	r2, [pc, #72]	; (80035e4 <MX_USART3_UART_Init+0x50>)
 800359c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800359e:	4b10      	ldr	r3, [pc, #64]	; (80035e0 <MX_USART3_UART_Init+0x4c>)
 80035a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80035a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80035a6:	4b0e      	ldr	r3, [pc, #56]	; (80035e0 <MX_USART3_UART_Init+0x4c>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80035ac:	4b0c      	ldr	r3, [pc, #48]	; (80035e0 <MX_USART3_UART_Init+0x4c>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80035b2:	4b0b      	ldr	r3, [pc, #44]	; (80035e0 <MX_USART3_UART_Init+0x4c>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80035b8:	4b09      	ldr	r3, [pc, #36]	; (80035e0 <MX_USART3_UART_Init+0x4c>)
 80035ba:	220c      	movs	r2, #12
 80035bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035be:	4b08      	ldr	r3, [pc, #32]	; (80035e0 <MX_USART3_UART_Init+0x4c>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80035c4:	4b06      	ldr	r3, [pc, #24]	; (80035e0 <MX_USART3_UART_Init+0x4c>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80035ca:	4805      	ldr	r0, [pc, #20]	; (80035e0 <MX_USART3_UART_Init+0x4c>)
 80035cc:	f005 fe80 	bl	80092d0 <HAL_UART_Init>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80035d6:	f7ff fd4b 	bl	8003070 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80035da:	bf00      	nop
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	20001620 	.word	0x20001620
 80035e4:	40004800 	.word	0x40004800

080035e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08e      	sub	sp, #56	; 0x38
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	605a      	str	r2, [r3, #4]
 80035fa:	609a      	str	r2, [r3, #8]
 80035fc:	60da      	str	r2, [r3, #12]
 80035fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a96      	ldr	r2, [pc, #600]	; (8003860 <HAL_UART_MspInit+0x278>)
 8003606:	4293      	cmp	r3, r2
 8003608:	f040 8092 	bne.w	8003730 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800360c:	2300      	movs	r3, #0
 800360e:	623b      	str	r3, [r7, #32]
 8003610:	4b94      	ldr	r3, [pc, #592]	; (8003864 <HAL_UART_MspInit+0x27c>)
 8003612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003614:	4a93      	ldr	r2, [pc, #588]	; (8003864 <HAL_UART_MspInit+0x27c>)
 8003616:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800361a:	6413      	str	r3, [r2, #64]	; 0x40
 800361c:	4b91      	ldr	r3, [pc, #580]	; (8003864 <HAL_UART_MspInit+0x27c>)
 800361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003620:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003624:	623b      	str	r3, [r7, #32]
 8003626:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003628:	2300      	movs	r3, #0
 800362a:	61fb      	str	r3, [r7, #28]
 800362c:	4b8d      	ldr	r3, [pc, #564]	; (8003864 <HAL_UART_MspInit+0x27c>)
 800362e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003630:	4a8c      	ldr	r2, [pc, #560]	; (8003864 <HAL_UART_MspInit+0x27c>)
 8003632:	f043 0301 	orr.w	r3, r3, #1
 8003636:	6313      	str	r3, [r2, #48]	; 0x30
 8003638:	4b8a      	ldr	r3, [pc, #552]	; (8003864 <HAL_UART_MspInit+0x27c>)
 800363a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	61fb      	str	r3, [r7, #28]
 8003642:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003644:	2303      	movs	r3, #3
 8003646:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003648:	2302      	movs	r3, #2
 800364a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364c:	2300      	movs	r3, #0
 800364e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003650:	2303      	movs	r3, #3
 8003652:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003654:	2308      	movs	r3, #8
 8003656:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800365c:	4619      	mov	r1, r3
 800365e:	4882      	ldr	r0, [pc, #520]	; (8003868 <HAL_UART_MspInit+0x280>)
 8003660:	f001 f8e8 	bl	8004834 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8003664:	4b81      	ldr	r3, [pc, #516]	; (800386c <HAL_UART_MspInit+0x284>)
 8003666:	4a82      	ldr	r2, [pc, #520]	; (8003870 <HAL_UART_MspInit+0x288>)
 8003668:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800366a:	4b80      	ldr	r3, [pc, #512]	; (800386c <HAL_UART_MspInit+0x284>)
 800366c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003670:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003672:	4b7e      	ldr	r3, [pc, #504]	; (800386c <HAL_UART_MspInit+0x284>)
 8003674:	2200      	movs	r2, #0
 8003676:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003678:	4b7c      	ldr	r3, [pc, #496]	; (800386c <HAL_UART_MspInit+0x284>)
 800367a:	2200      	movs	r2, #0
 800367c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800367e:	4b7b      	ldr	r3, [pc, #492]	; (800386c <HAL_UART_MspInit+0x284>)
 8003680:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003684:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003686:	4b79      	ldr	r3, [pc, #484]	; (800386c <HAL_UART_MspInit+0x284>)
 8003688:	2200      	movs	r2, #0
 800368a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800368c:	4b77      	ldr	r3, [pc, #476]	; (800386c <HAL_UART_MspInit+0x284>)
 800368e:	2200      	movs	r2, #0
 8003690:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8003692:	4b76      	ldr	r3, [pc, #472]	; (800386c <HAL_UART_MspInit+0x284>)
 8003694:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003698:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800369a:	4b74      	ldr	r3, [pc, #464]	; (800386c <HAL_UART_MspInit+0x284>)
 800369c:	2200      	movs	r2, #0
 800369e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036a0:	4b72      	ldr	r3, [pc, #456]	; (800386c <HAL_UART_MspInit+0x284>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80036a6:	4871      	ldr	r0, [pc, #452]	; (800386c <HAL_UART_MspInit+0x284>)
 80036a8:	f000 fca8 	bl	8003ffc <HAL_DMA_Init>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80036b2:	f7ff fcdd 	bl	8003070 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a6c      	ldr	r2, [pc, #432]	; (800386c <HAL_UART_MspInit+0x284>)
 80036ba:	639a      	str	r2, [r3, #56]	; 0x38
 80036bc:	4a6b      	ldr	r2, [pc, #428]	; (800386c <HAL_UART_MspInit+0x284>)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80036c2:	4b6c      	ldr	r3, [pc, #432]	; (8003874 <HAL_UART_MspInit+0x28c>)
 80036c4:	4a6c      	ldr	r2, [pc, #432]	; (8003878 <HAL_UART_MspInit+0x290>)
 80036c6:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 80036c8:	4b6a      	ldr	r3, [pc, #424]	; (8003874 <HAL_UART_MspInit+0x28c>)
 80036ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80036ce:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036d0:	4b68      	ldr	r3, [pc, #416]	; (8003874 <HAL_UART_MspInit+0x28c>)
 80036d2:	2240      	movs	r2, #64	; 0x40
 80036d4:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036d6:	4b67      	ldr	r3, [pc, #412]	; (8003874 <HAL_UART_MspInit+0x28c>)
 80036d8:	2200      	movs	r2, #0
 80036da:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80036dc:	4b65      	ldr	r3, [pc, #404]	; (8003874 <HAL_UART_MspInit+0x28c>)
 80036de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036e2:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036e4:	4b63      	ldr	r3, [pc, #396]	; (8003874 <HAL_UART_MspInit+0x28c>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036ea:	4b62      	ldr	r3, [pc, #392]	; (8003874 <HAL_UART_MspInit+0x28c>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80036f0:	4b60      	ldr	r3, [pc, #384]	; (8003874 <HAL_UART_MspInit+0x28c>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80036f6:	4b5f      	ldr	r3, [pc, #380]	; (8003874 <HAL_UART_MspInit+0x28c>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036fc:	4b5d      	ldr	r3, [pc, #372]	; (8003874 <HAL_UART_MspInit+0x28c>)
 80036fe:	2200      	movs	r2, #0
 8003700:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8003702:	485c      	ldr	r0, [pc, #368]	; (8003874 <HAL_UART_MspInit+0x28c>)
 8003704:	f000 fc7a 	bl	8003ffc <HAL_DMA_Init>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800370e:	f7ff fcaf 	bl	8003070 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a57      	ldr	r2, [pc, #348]	; (8003874 <HAL_UART_MspInit+0x28c>)
 8003716:	635a      	str	r2, [r3, #52]	; 0x34
 8003718:	4a56      	ldr	r2, [pc, #344]	; (8003874 <HAL_UART_MspInit+0x28c>)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800371e:	2200      	movs	r2, #0
 8003720:	2100      	movs	r1, #0
 8003722:	2034      	movs	r0, #52	; 0x34
 8003724:	f000 fc33 	bl	8003f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003728:	2034      	movs	r0, #52	; 0x34
 800372a:	f000 fc4c 	bl	8003fc6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800372e:	e149      	b.n	80039c4 <HAL_UART_MspInit+0x3dc>
  else if(uartHandle->Instance==USART1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a51      	ldr	r2, [pc, #324]	; (800387c <HAL_UART_MspInit+0x294>)
 8003736:	4293      	cmp	r3, r2
 8003738:	f040 80ac 	bne.w	8003894 <HAL_UART_MspInit+0x2ac>
    __HAL_RCC_USART1_CLK_ENABLE();
 800373c:	2300      	movs	r3, #0
 800373e:	61bb      	str	r3, [r7, #24]
 8003740:	4b48      	ldr	r3, [pc, #288]	; (8003864 <HAL_UART_MspInit+0x27c>)
 8003742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003744:	4a47      	ldr	r2, [pc, #284]	; (8003864 <HAL_UART_MspInit+0x27c>)
 8003746:	f043 0310 	orr.w	r3, r3, #16
 800374a:	6453      	str	r3, [r2, #68]	; 0x44
 800374c:	4b45      	ldr	r3, [pc, #276]	; (8003864 <HAL_UART_MspInit+0x27c>)
 800374e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003750:	f003 0310 	and.w	r3, r3, #16
 8003754:	61bb      	str	r3, [r7, #24]
 8003756:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003758:	2300      	movs	r3, #0
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	4b41      	ldr	r3, [pc, #260]	; (8003864 <HAL_UART_MspInit+0x27c>)
 800375e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003760:	4a40      	ldr	r2, [pc, #256]	; (8003864 <HAL_UART_MspInit+0x27c>)
 8003762:	f043 0302 	orr.w	r3, r3, #2
 8003766:	6313      	str	r3, [r2, #48]	; 0x30
 8003768:	4b3e      	ldr	r3, [pc, #248]	; (8003864 <HAL_UART_MspInit+0x27c>)
 800376a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	617b      	str	r3, [r7, #20]
 8003772:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003774:	23c0      	movs	r3, #192	; 0xc0
 8003776:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003778:	2302      	movs	r3, #2
 800377a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377c:	2300      	movs	r3, #0
 800377e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003780:	2303      	movs	r3, #3
 8003782:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003784:	2307      	movs	r3, #7
 8003786:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800378c:	4619      	mov	r1, r3
 800378e:	483c      	ldr	r0, [pc, #240]	; (8003880 <HAL_UART_MspInit+0x298>)
 8003790:	f001 f850 	bl	8004834 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003794:	4b3b      	ldr	r3, [pc, #236]	; (8003884 <HAL_UART_MspInit+0x29c>)
 8003796:	4a3c      	ldr	r2, [pc, #240]	; (8003888 <HAL_UART_MspInit+0x2a0>)
 8003798:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800379a:	4b3a      	ldr	r3, [pc, #232]	; (8003884 <HAL_UART_MspInit+0x29c>)
 800379c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037a0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037a2:	4b38      	ldr	r3, [pc, #224]	; (8003884 <HAL_UART_MspInit+0x29c>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037a8:	4b36      	ldr	r3, [pc, #216]	; (8003884 <HAL_UART_MspInit+0x29c>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037ae:	4b35      	ldr	r3, [pc, #212]	; (8003884 <HAL_UART_MspInit+0x29c>)
 80037b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037b4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037b6:	4b33      	ldr	r3, [pc, #204]	; (8003884 <HAL_UART_MspInit+0x29c>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037bc:	4b31      	ldr	r3, [pc, #196]	; (8003884 <HAL_UART_MspInit+0x29c>)
 80037be:	2200      	movs	r2, #0
 80037c0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80037c2:	4b30      	ldr	r3, [pc, #192]	; (8003884 <HAL_UART_MspInit+0x29c>)
 80037c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037c8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80037ca:	4b2e      	ldr	r3, [pc, #184]	; (8003884 <HAL_UART_MspInit+0x29c>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037d0:	4b2c      	ldr	r3, [pc, #176]	; (8003884 <HAL_UART_MspInit+0x29c>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80037d6:	482b      	ldr	r0, [pc, #172]	; (8003884 <HAL_UART_MspInit+0x29c>)
 80037d8:	f000 fc10 	bl	8003ffc <HAL_DMA_Init>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <HAL_UART_MspInit+0x1fe>
      Error_Handler();
 80037e2:	f7ff fc45 	bl	8003070 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a26      	ldr	r2, [pc, #152]	; (8003884 <HAL_UART_MspInit+0x29c>)
 80037ea:	639a      	str	r2, [r3, #56]	; 0x38
 80037ec:	4a25      	ldr	r2, [pc, #148]	; (8003884 <HAL_UART_MspInit+0x29c>)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80037f2:	4b26      	ldr	r3, [pc, #152]	; (800388c <HAL_UART_MspInit+0x2a4>)
 80037f4:	4a26      	ldr	r2, [pc, #152]	; (8003890 <HAL_UART_MspInit+0x2a8>)
 80037f6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80037f8:	4b24      	ldr	r3, [pc, #144]	; (800388c <HAL_UART_MspInit+0x2a4>)
 80037fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037fe:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003800:	4b22      	ldr	r3, [pc, #136]	; (800388c <HAL_UART_MspInit+0x2a4>)
 8003802:	2240      	movs	r2, #64	; 0x40
 8003804:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003806:	4b21      	ldr	r3, [pc, #132]	; (800388c <HAL_UART_MspInit+0x2a4>)
 8003808:	2200      	movs	r2, #0
 800380a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800380c:	4b1f      	ldr	r3, [pc, #124]	; (800388c <HAL_UART_MspInit+0x2a4>)
 800380e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003812:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003814:	4b1d      	ldr	r3, [pc, #116]	; (800388c <HAL_UART_MspInit+0x2a4>)
 8003816:	2200      	movs	r2, #0
 8003818:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800381a:	4b1c      	ldr	r3, [pc, #112]	; (800388c <HAL_UART_MspInit+0x2a4>)
 800381c:	2200      	movs	r2, #0
 800381e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003820:	4b1a      	ldr	r3, [pc, #104]	; (800388c <HAL_UART_MspInit+0x2a4>)
 8003822:	2200      	movs	r2, #0
 8003824:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003826:	4b19      	ldr	r3, [pc, #100]	; (800388c <HAL_UART_MspInit+0x2a4>)
 8003828:	2200      	movs	r2, #0
 800382a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800382c:	4b17      	ldr	r3, [pc, #92]	; (800388c <HAL_UART_MspInit+0x2a4>)
 800382e:	2200      	movs	r2, #0
 8003830:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003832:	4816      	ldr	r0, [pc, #88]	; (800388c <HAL_UART_MspInit+0x2a4>)
 8003834:	f000 fbe2 	bl	8003ffc <HAL_DMA_Init>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <HAL_UART_MspInit+0x25a>
      Error_Handler();
 800383e:	f7ff fc17 	bl	8003070 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a11      	ldr	r2, [pc, #68]	; (800388c <HAL_UART_MspInit+0x2a4>)
 8003846:	635a      	str	r2, [r3, #52]	; 0x34
 8003848:	4a10      	ldr	r2, [pc, #64]	; (800388c <HAL_UART_MspInit+0x2a4>)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800384e:	2200      	movs	r2, #0
 8003850:	2100      	movs	r1, #0
 8003852:	2025      	movs	r0, #37	; 0x25
 8003854:	f000 fb9b 	bl	8003f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003858:	2025      	movs	r0, #37	; 0x25
 800385a:	f000 fbb4 	bl	8003fc6 <HAL_NVIC_EnableIRQ>
}
 800385e:	e0b1      	b.n	80039c4 <HAL_UART_MspInit+0x3dc>
 8003860:	40004c00 	.word	0x40004c00
 8003864:	40023800 	.word	0x40023800
 8003868:	40020000 	.word	0x40020000
 800386c:	20001560 	.word	0x20001560
 8003870:	40026040 	.word	0x40026040
 8003874:	2000180c 	.word	0x2000180c
 8003878:	40026070 	.word	0x40026070
 800387c:	40011000 	.word	0x40011000
 8003880:	40020400 	.word	0x40020400
 8003884:	20001724 	.word	0x20001724
 8003888:	40026440 	.word	0x40026440
 800388c:	200016c4 	.word	0x200016c4
 8003890:	400264b8 	.word	0x400264b8
  else if(uartHandle->Instance==USART3)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a4c      	ldr	r2, [pc, #304]	; (80039cc <HAL_UART_MspInit+0x3e4>)
 800389a:	4293      	cmp	r3, r2
 800389c:	f040 8092 	bne.w	80039c4 <HAL_UART_MspInit+0x3dc>
    __HAL_RCC_USART3_CLK_ENABLE();
 80038a0:	2300      	movs	r3, #0
 80038a2:	613b      	str	r3, [r7, #16]
 80038a4:	4b4a      	ldr	r3, [pc, #296]	; (80039d0 <HAL_UART_MspInit+0x3e8>)
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	4a49      	ldr	r2, [pc, #292]	; (80039d0 <HAL_UART_MspInit+0x3e8>)
 80038aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038ae:	6413      	str	r3, [r2, #64]	; 0x40
 80038b0:	4b47      	ldr	r3, [pc, #284]	; (80039d0 <HAL_UART_MspInit+0x3e8>)
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038b8:	613b      	str	r3, [r7, #16]
 80038ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038bc:	2300      	movs	r3, #0
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	4b43      	ldr	r3, [pc, #268]	; (80039d0 <HAL_UART_MspInit+0x3e8>)
 80038c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c4:	4a42      	ldr	r2, [pc, #264]	; (80039d0 <HAL_UART_MspInit+0x3e8>)
 80038c6:	f043 0302 	orr.w	r3, r3, #2
 80038ca:	6313      	str	r3, [r2, #48]	; 0x30
 80038cc:	4b40      	ldr	r3, [pc, #256]	; (80039d0 <HAL_UART_MspInit+0x3e8>)
 80038ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80038d8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80038dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038de:	2302      	movs	r3, #2
 80038e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e2:	2300      	movs	r3, #0
 80038e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038e6:	2303      	movs	r3, #3
 80038e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80038ea:	2307      	movs	r3, #7
 80038ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038f2:	4619      	mov	r1, r3
 80038f4:	4837      	ldr	r0, [pc, #220]	; (80039d4 <HAL_UART_MspInit+0x3ec>)
 80038f6:	f000 ff9d 	bl	8004834 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80038fa:	4b37      	ldr	r3, [pc, #220]	; (80039d8 <HAL_UART_MspInit+0x3f0>)
 80038fc:	4a37      	ldr	r2, [pc, #220]	; (80039dc <HAL_UART_MspInit+0x3f4>)
 80038fe:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003900:	4b35      	ldr	r3, [pc, #212]	; (80039d8 <HAL_UART_MspInit+0x3f0>)
 8003902:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003906:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003908:	4b33      	ldr	r3, [pc, #204]	; (80039d8 <HAL_UART_MspInit+0x3f0>)
 800390a:	2200      	movs	r2, #0
 800390c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800390e:	4b32      	ldr	r3, [pc, #200]	; (80039d8 <HAL_UART_MspInit+0x3f0>)
 8003910:	2200      	movs	r2, #0
 8003912:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003914:	4b30      	ldr	r3, [pc, #192]	; (80039d8 <HAL_UART_MspInit+0x3f0>)
 8003916:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800391a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800391c:	4b2e      	ldr	r3, [pc, #184]	; (80039d8 <HAL_UART_MspInit+0x3f0>)
 800391e:	2200      	movs	r2, #0
 8003920:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003922:	4b2d      	ldr	r3, [pc, #180]	; (80039d8 <HAL_UART_MspInit+0x3f0>)
 8003924:	2200      	movs	r2, #0
 8003926:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003928:	4b2b      	ldr	r3, [pc, #172]	; (80039d8 <HAL_UART_MspInit+0x3f0>)
 800392a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800392e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003930:	4b29      	ldr	r3, [pc, #164]	; (80039d8 <HAL_UART_MspInit+0x3f0>)
 8003932:	2200      	movs	r2, #0
 8003934:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003936:	4b28      	ldr	r3, [pc, #160]	; (80039d8 <HAL_UART_MspInit+0x3f0>)
 8003938:	2200      	movs	r2, #0
 800393a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800393c:	4826      	ldr	r0, [pc, #152]	; (80039d8 <HAL_UART_MspInit+0x3f0>)
 800393e:	f000 fb5d 	bl	8003ffc <HAL_DMA_Init>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <HAL_UART_MspInit+0x364>
      Error_Handler();
 8003948:	f7ff fb92 	bl	8003070 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a22      	ldr	r2, [pc, #136]	; (80039d8 <HAL_UART_MspInit+0x3f0>)
 8003950:	639a      	str	r2, [r3, #56]	; 0x38
 8003952:	4a21      	ldr	r2, [pc, #132]	; (80039d8 <HAL_UART_MspInit+0x3f0>)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003958:	4b21      	ldr	r3, [pc, #132]	; (80039e0 <HAL_UART_MspInit+0x3f8>)
 800395a:	4a22      	ldr	r2, [pc, #136]	; (80039e4 <HAL_UART_MspInit+0x3fc>)
 800395c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800395e:	4b20      	ldr	r3, [pc, #128]	; (80039e0 <HAL_UART_MspInit+0x3f8>)
 8003960:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003964:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003966:	4b1e      	ldr	r3, [pc, #120]	; (80039e0 <HAL_UART_MspInit+0x3f8>)
 8003968:	2240      	movs	r2, #64	; 0x40
 800396a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800396c:	4b1c      	ldr	r3, [pc, #112]	; (80039e0 <HAL_UART_MspInit+0x3f8>)
 800396e:	2200      	movs	r2, #0
 8003970:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003972:	4b1b      	ldr	r3, [pc, #108]	; (80039e0 <HAL_UART_MspInit+0x3f8>)
 8003974:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003978:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800397a:	4b19      	ldr	r3, [pc, #100]	; (80039e0 <HAL_UART_MspInit+0x3f8>)
 800397c:	2200      	movs	r2, #0
 800397e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003980:	4b17      	ldr	r3, [pc, #92]	; (80039e0 <HAL_UART_MspInit+0x3f8>)
 8003982:	2200      	movs	r2, #0
 8003984:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003986:	4b16      	ldr	r3, [pc, #88]	; (80039e0 <HAL_UART_MspInit+0x3f8>)
 8003988:	2200      	movs	r2, #0
 800398a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800398c:	4b14      	ldr	r3, [pc, #80]	; (80039e0 <HAL_UART_MspInit+0x3f8>)
 800398e:	2200      	movs	r2, #0
 8003990:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003992:	4b13      	ldr	r3, [pc, #76]	; (80039e0 <HAL_UART_MspInit+0x3f8>)
 8003994:	2200      	movs	r2, #0
 8003996:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003998:	4811      	ldr	r0, [pc, #68]	; (80039e0 <HAL_UART_MspInit+0x3f8>)
 800399a:	f000 fb2f 	bl	8003ffc <HAL_DMA_Init>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <HAL_UART_MspInit+0x3c0>
      Error_Handler();
 80039a4:	f7ff fb64 	bl	8003070 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a0d      	ldr	r2, [pc, #52]	; (80039e0 <HAL_UART_MspInit+0x3f8>)
 80039ac:	635a      	str	r2, [r3, #52]	; 0x34
 80039ae:	4a0c      	ldr	r2, [pc, #48]	; (80039e0 <HAL_UART_MspInit+0x3f8>)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80039b4:	2200      	movs	r2, #0
 80039b6:	2100      	movs	r1, #0
 80039b8:	2027      	movs	r0, #39	; 0x27
 80039ba:	f000 fae8 	bl	8003f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80039be:	2027      	movs	r0, #39	; 0x27
 80039c0:	f000 fb01 	bl	8003fc6 <HAL_NVIC_EnableIRQ>
}
 80039c4:	bf00      	nop
 80039c6:	3738      	adds	r7, #56	; 0x38
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	40004800 	.word	0x40004800
 80039d0:	40023800 	.word	0x40023800
 80039d4:	40020400 	.word	0x40020400
 80039d8:	200015c0 	.word	0x200015c0
 80039dc:	40026028 	.word	0x40026028
 80039e0:	20001664 	.word	0x20001664
 80039e4:	40026058 	.word	0x40026058

080039e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80039e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80039ec:	480d      	ldr	r0, [pc, #52]	; (8003a24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80039ee:	490e      	ldr	r1, [pc, #56]	; (8003a28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80039f0:	4a0e      	ldr	r2, [pc, #56]	; (8003a2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80039f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039f4:	e002      	b.n	80039fc <LoopCopyDataInit>

080039f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039fa:	3304      	adds	r3, #4

080039fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a00:	d3f9      	bcc.n	80039f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a02:	4a0b      	ldr	r2, [pc, #44]	; (8003a30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003a04:	4c0b      	ldr	r4, [pc, #44]	; (8003a34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a08:	e001      	b.n	8003a0e <LoopFillZerobss>

08003a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a0c:	3204      	adds	r2, #4

08003a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a10:	d3fb      	bcc.n	8003a0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003a12:	f7ff fc45 	bl	80032a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a16:	f006 fd97 	bl	800a548 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a1a:	f7ff fa19 	bl	8002e50 <main>
  bx  lr    
 8003a1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003a20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003a24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a28:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8003a2c:	0800b82c 	.word	0x0800b82c
  ldr r2, =_sbss
 8003a30:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8003a34:	20001870 	.word	0x20001870

08003a38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a38:	e7fe      	b.n	8003a38 <ADC_IRQHandler>

08003a3a <SUPERVISOR_Process_Ms>:
#include "../Sensors/Mpu.h"
#include "../Led/Led.h"
#include "../Radio/Radio.h"

void SUPERVISOR_Process_Ms(void)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	af00      	add	r7, sp, #0
	if(!MPU_Is_Ok())
 8003a3e:	f7ff f829 	bl	8002a94 <MPU_Is_Ok>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d104      	bne.n	8003a52 <SUPERVISOR_Process_Ms+0x18>
	{
		Led_Set_Sequence(led_eSTATE, led_sequence_eGYRO_OFF);
 8003a48:	21a0      	movs	r1, #160	; 0xa0
 8003a4a:	2000      	movs	r0, #0
 8003a4c:	f7fd ff6a 	bl	8001924 <Led_Set_Sequence>
	}
	else
	{
		Led_Set_Sequence(led_eSTATE, led_sequence_eOK);
	}
}
 8003a50:	e00d      	b.n	8003a6e <SUPERVISOR_Process_Ms+0x34>
	else if(RADIO_Get_State() == radio_state_eTIMEOUT)
 8003a52:	f7fe fe61 	bl	8002718 <RADIO_Get_State>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d104      	bne.n	8003a66 <SUPERVISOR_Process_Ms+0x2c>
		Led_Set_Sequence(led_eSTATE, led_sequence_eRADIO_TIMEOUT);
 8003a5c:	21a8      	movs	r1, #168	; 0xa8
 8003a5e:	2000      	movs	r0, #0
 8003a60:	f7fd ff60 	bl	8001924 <Led_Set_Sequence>
}
 8003a64:	e003      	b.n	8003a6e <SUPERVISOR_Process_Ms+0x34>
		Led_Set_Sequence(led_eSTATE, led_sequence_eOK);
 8003a66:	2180      	movs	r1, #128	; 0x80
 8003a68:	2000      	movs	r0, #0
 8003a6a:	f7fd ff5b 	bl	8001924 <Led_Set_Sequence>
}
 8003a6e:	bf00      	nop
 8003a70:	bd80      	pop	{r7, pc}
	...

08003a74 <TASK_MANAGER_Init>:
static task_t task[MAX_NUMBER_OF_TASK] = { 0 };
static bool_e is_initialized = FALSE;
static uint8_t task_count = 0;

void TASK_MANAGER_Init(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
	for(uint8_t t = 0; t < task_count; t++)
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	71fb      	strb	r3, [r7, #7]
 8003a7e:	e017      	b.n	8003ab0 <TASK_MANAGER_Init+0x3c>
	{
		if(task[t].init.call)
 8003a80:	79fa      	ldrb	r2, [r7, #7]
 8003a82:	4911      	ldr	r1, [pc, #68]	; (8003ac8 <TASK_MANAGER_Init+0x54>)
 8003a84:	4613      	mov	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	4413      	add	r3, r2
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	440b      	add	r3, r1
 8003a8e:	3308      	adds	r3, #8
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d009      	beq.n	8003aaa <TASK_MANAGER_Init+0x36>
		{
			task[t].init.call();
 8003a96:	79fa      	ldrb	r2, [r7, #7]
 8003a98:	490b      	ldr	r1, [pc, #44]	; (8003ac8 <TASK_MANAGER_Init+0x54>)
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	4413      	add	r3, r2
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	440b      	add	r3, r1
 8003aa4:	3308      	adds	r3, #8
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4798      	blx	r3
	for(uint8_t t = 0; t < task_count; t++)
 8003aaa:	79fb      	ldrb	r3, [r7, #7]
 8003aac:	3301      	adds	r3, #1
 8003aae:	71fb      	strb	r3, [r7, #7]
 8003ab0:	4b06      	ldr	r3, [pc, #24]	; (8003acc <TASK_MANAGER_Init+0x58>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	79fa      	ldrb	r2, [r7, #7]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d3e2      	bcc.n	8003a80 <TASK_MANAGER_Init+0xc>
		}
	}
	is_initialized = TRUE;
 8003aba:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <TASK_MANAGER_Init+0x5c>)
 8003abc:	2201      	movs	r2, #1
 8003abe:	701a      	strb	r2, [r3, #0]
}
 8003ac0:	bf00      	nop
 8003ac2:	3708      	adds	r7, #8
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	20000fc8 	.word	0x20000fc8
 8003acc:	20001401 	.word	0x20001401
 8003ad0:	20001400 	.word	0x20001400

08003ad4 <TASK_MANAGER_Main>:


void TASK_MANAGER_Main(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
	for(uint8_t t = 0; t < task_count; t++)
 8003ada:	2300      	movs	r3, #0
 8003adc:	71fb      	strb	r3, [r7, #7]
 8003ade:	e017      	b.n	8003b10 <TASK_MANAGER_Main+0x3c>
	{
		if(task[t].main.call)
 8003ae0:	79fa      	ldrb	r2, [r7, #7]
 8003ae2:	4910      	ldr	r1, [pc, #64]	; (8003b24 <TASK_MANAGER_Main+0x50>)
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	4413      	add	r3, r2
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	440b      	add	r3, r1
 8003aee:	3318      	adds	r3, #24
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d009      	beq.n	8003b0a <TASK_MANAGER_Main+0x36>
		{
			task[t].main.call();
 8003af6:	79fa      	ldrb	r2, [r7, #7]
 8003af8:	490a      	ldr	r1, [pc, #40]	; (8003b24 <TASK_MANAGER_Main+0x50>)
 8003afa:	4613      	mov	r3, r2
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	4413      	add	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	440b      	add	r3, r1
 8003b04:	3318      	adds	r3, #24
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4798      	blx	r3
	for(uint8_t t = 0; t < task_count; t++)
 8003b0a:	79fb      	ldrb	r3, [r7, #7]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	71fb      	strb	r3, [r7, #7]
 8003b10:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <TASK_MANAGER_Main+0x54>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	79fa      	ldrb	r2, [r7, #7]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d3e2      	bcc.n	8003ae0 <TASK_MANAGER_Main+0xc>
		}
	}
}
 8003b1a:	bf00      	nop
 8003b1c:	bf00      	nop
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	20000fc8 	.word	0x20000fc8
 8003b28:	20001401 	.word	0x20001401

08003b2c <TASK_MANAGER_It_ms>:

void TASK_MANAGER_It_ms(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
	if(!is_initialized)
 8003b32:	4b14      	ldr	r3, [pc, #80]	; (8003b84 <TASK_MANAGER_It_ms+0x58>)
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d020      	beq.n	8003b7c <TASK_MANAGER_It_ms+0x50>
	{
		return;
	}
	for(uint8_t t = 0; t < task_count; t++)
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	71fb      	strb	r3, [r7, #7]
 8003b3e:	e017      	b.n	8003b70 <TASK_MANAGER_It_ms+0x44>
	{
		if(task[t].it.call)
 8003b40:	79fa      	ldrb	r2, [r7, #7]
 8003b42:	4911      	ldr	r1, [pc, #68]	; (8003b88 <TASK_MANAGER_It_ms+0x5c>)
 8003b44:	4613      	mov	r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	4413      	add	r3, r2
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	440b      	add	r3, r1
 8003b4e:	3328      	adds	r3, #40	; 0x28
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d009      	beq.n	8003b6a <TASK_MANAGER_It_ms+0x3e>
		{
			task[t].it.call();
 8003b56:	79fa      	ldrb	r2, [r7, #7]
 8003b58:	490b      	ldr	r1, [pc, #44]	; (8003b88 <TASK_MANAGER_It_ms+0x5c>)
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	4413      	add	r3, r2
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	440b      	add	r3, r1
 8003b64:	3328      	adds	r3, #40	; 0x28
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4798      	blx	r3
	for(uint8_t t = 0; t < task_count; t++)
 8003b6a:	79fb      	ldrb	r3, [r7, #7]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	71fb      	strb	r3, [r7, #7]
 8003b70:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <TASK_MANAGER_It_ms+0x60>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	79fa      	ldrb	r2, [r7, #7]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d3e2      	bcc.n	8003b40 <TASK_MANAGER_It_ms+0x14>
 8003b7a:	e000      	b.n	8003b7e <TASK_MANAGER_It_ms+0x52>
		return;
 8003b7c:	bf00      	nop
		}
	}
}
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	20001400 	.word	0x20001400
 8003b88:	20000fc8 	.word	0x20000fc8
 8003b8c:	20001401 	.word	0x20001401

08003b90 <TASK_MANAGER_Gyro_Data_Ready>:

void TASK_MANAGER_Gyro_Data_Ready(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
	for(uint8_t t = 0; t < task_count; t++)
 8003b96:	2300      	movs	r3, #0
 8003b98:	71fb      	strb	r3, [r7, #7]
 8003b9a:	e017      	b.n	8003bcc <TASK_MANAGER_Gyro_Data_Ready+0x3c>
	{
		if(task[t].gyro_data_ready.call)
 8003b9c:	79fa      	ldrb	r2, [r7, #7]
 8003b9e:	4910      	ldr	r1, [pc, #64]	; (8003be0 <TASK_MANAGER_Gyro_Data_Ready+0x50>)
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	4413      	add	r3, r2
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	440b      	add	r3, r1
 8003baa:	3338      	adds	r3, #56	; 0x38
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d009      	beq.n	8003bc6 <TASK_MANAGER_Gyro_Data_Ready+0x36>
		{
			task[t].gyro_data_ready.call();
 8003bb2:	79fa      	ldrb	r2, [r7, #7]
 8003bb4:	490a      	ldr	r1, [pc, #40]	; (8003be0 <TASK_MANAGER_Gyro_Data_Ready+0x50>)
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	4413      	add	r3, r2
 8003bbc:	00db      	lsls	r3, r3, #3
 8003bbe:	440b      	add	r3, r1
 8003bc0:	3338      	adds	r3, #56	; 0x38
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4798      	blx	r3
	for(uint8_t t = 0; t < task_count; t++)
 8003bc6:	79fb      	ldrb	r3, [r7, #7]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	71fb      	strb	r3, [r7, #7]
 8003bcc:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <TASK_MANAGER_Gyro_Data_Ready+0x54>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	79fa      	ldrb	r2, [r7, #7]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d3e2      	bcc.n	8003b9c <TASK_MANAGER_Gyro_Data_Ready+0xc>
		}
	}
}
 8003bd6:	bf00      	nop
 8003bd8:	bf00      	nop
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	20000fc8 	.word	0x20000fc8
 8003be4:	20001401 	.word	0x20001401

08003be8 <TASK_MANAGER_Add_Task>:

void TASK_MANAGER_Add_Task(char * name, void(*init)(void), void(*main)(void), void(*it)(void), void(*gyro)(void))
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	603b      	str	r3, [r7, #0]
	if(task_count == MAX_NUMBER_OF_TASK)
 8003bf6:	4b2b      	ldr	r3, [pc, #172]	; (8003ca4 <TASK_MANAGER_Add_Task+0xbc>)
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	2b0f      	cmp	r3, #15
 8003bfc:	d04b      	beq.n	8003c96 <TASK_MANAGER_Add_Task+0xae>
	{
		return;
	}
	task[task_count].name = name;
 8003bfe:	4b29      	ldr	r3, [pc, #164]	; (8003ca4 <TASK_MANAGER_Add_Task+0xbc>)
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	4619      	mov	r1, r3
 8003c04:	4a28      	ldr	r2, [pc, #160]	; (8003ca8 <TASK_MANAGER_Add_Task+0xc0>)
 8003c06:	460b      	mov	r3, r1
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	440b      	add	r3, r1
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	4413      	add	r3, r2
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	601a      	str	r2, [r3, #0]
	task[task_count].name_len = sizeof(name) - 1;
 8003c14:	4b23      	ldr	r3, [pc, #140]	; (8003ca4 <TASK_MANAGER_Add_Task+0xbc>)
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4a23      	ldr	r2, [pc, #140]	; (8003ca8 <TASK_MANAGER_Add_Task+0xc0>)
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	440b      	add	r3, r1
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	4413      	add	r3, r2
 8003c26:	3304      	adds	r3, #4
 8003c28:	2203      	movs	r2, #3
 8003c2a:	701a      	strb	r2, [r3, #0]
	task[task_count].init.call = init;
 8003c2c:	4b1d      	ldr	r3, [pc, #116]	; (8003ca4 <TASK_MANAGER_Add_Task+0xbc>)
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	4619      	mov	r1, r3
 8003c32:	4a1d      	ldr	r2, [pc, #116]	; (8003ca8 <TASK_MANAGER_Add_Task+0xc0>)
 8003c34:	460b      	mov	r3, r1
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	440b      	add	r3, r1
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	4413      	add	r3, r2
 8003c3e:	3308      	adds	r3, #8
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	601a      	str	r2, [r3, #0]
	task[task_count].main.call = main;
 8003c44:	4b17      	ldr	r3, [pc, #92]	; (8003ca4 <TASK_MANAGER_Add_Task+0xbc>)
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4a17      	ldr	r2, [pc, #92]	; (8003ca8 <TASK_MANAGER_Add_Task+0xc0>)
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	440b      	add	r3, r1
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	4413      	add	r3, r2
 8003c56:	3318      	adds	r3, #24
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	601a      	str	r2, [r3, #0]
	task[task_count].it.call = it;
 8003c5c:	4b11      	ldr	r3, [pc, #68]	; (8003ca4 <TASK_MANAGER_Add_Task+0xbc>)
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	4619      	mov	r1, r3
 8003c62:	4a11      	ldr	r2, [pc, #68]	; (8003ca8 <TASK_MANAGER_Add_Task+0xc0>)
 8003c64:	460b      	mov	r3, r1
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	440b      	add	r3, r1
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	4413      	add	r3, r2
 8003c6e:	3328      	adds	r3, #40	; 0x28
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	601a      	str	r2, [r3, #0]
	task[task_count++].gyro_data_ready.call = gyro;
 8003c74:	4b0b      	ldr	r3, [pc, #44]	; (8003ca4 <TASK_MANAGER_Add_Task+0xbc>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	1c5a      	adds	r2, r3, #1
 8003c7a:	b2d1      	uxtb	r1, r2
 8003c7c:	4a09      	ldr	r2, [pc, #36]	; (8003ca4 <TASK_MANAGER_Add_Task+0xbc>)
 8003c7e:	7011      	strb	r1, [r2, #0]
 8003c80:	4619      	mov	r1, r3
 8003c82:	4a09      	ldr	r2, [pc, #36]	; (8003ca8 <TASK_MANAGER_Add_Task+0xc0>)
 8003c84:	460b      	mov	r3, r1
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	440b      	add	r3, r1
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	4413      	add	r3, r2
 8003c8e:	3338      	adds	r3, #56	; 0x38
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	e000      	b.n	8003c98 <TASK_MANAGER_Add_Task+0xb0>
		return;
 8003c96:	bf00      	nop
}
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	20001401 	.word	0x20001401
 8003ca8:	20000fc8 	.word	0x20000fc8

08003cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003cb0:	4b0e      	ldr	r3, [pc, #56]	; (8003cec <HAL_Init+0x40>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a0d      	ldr	r2, [pc, #52]	; (8003cec <HAL_Init+0x40>)
 8003cb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003cbc:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <HAL_Init+0x40>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a0a      	ldr	r2, [pc, #40]	; (8003cec <HAL_Init+0x40>)
 8003cc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003cc8:	4b08      	ldr	r3, [pc, #32]	; (8003cec <HAL_Init+0x40>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a07      	ldr	r2, [pc, #28]	; (8003cec <HAL_Init+0x40>)
 8003cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cd4:	2003      	movs	r0, #3
 8003cd6:	f000 f94f 	bl	8003f78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cda:	200f      	movs	r0, #15
 8003cdc:	f000 f808 	bl	8003cf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ce0:	f7ff f9cc 	bl	800307c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40023c00 	.word	0x40023c00

08003cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003cf8:	4b12      	ldr	r3, [pc, #72]	; (8003d44 <HAL_InitTick+0x54>)
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	4b12      	ldr	r3, [pc, #72]	; (8003d48 <HAL_InitTick+0x58>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	4619      	mov	r1, r3
 8003d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d06:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 f967 	bl	8003fe2 <HAL_SYSTICK_Config>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e00e      	b.n	8003d3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b0f      	cmp	r3, #15
 8003d22:	d80a      	bhi.n	8003d3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d24:	2200      	movs	r2, #0
 8003d26:	6879      	ldr	r1, [r7, #4]
 8003d28:	f04f 30ff 	mov.w	r0, #4294967295
 8003d2c:	f000 f92f 	bl	8003f8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d30:	4a06      	ldr	r2, [pc, #24]	; (8003d4c <HAL_InitTick+0x5c>)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
 8003d38:	e000      	b.n	8003d3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	200000e4 	.word	0x200000e4
 8003d48:	200000ec 	.word	0x200000ec
 8003d4c:	200000e8 	.word	0x200000e8

08003d50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d54:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <HAL_IncTick+0x20>)
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	461a      	mov	r2, r3
 8003d5a:	4b06      	ldr	r3, [pc, #24]	; (8003d74 <HAL_IncTick+0x24>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4413      	add	r3, r2
 8003d60:	4a04      	ldr	r2, [pc, #16]	; (8003d74 <HAL_IncTick+0x24>)
 8003d62:	6013      	str	r3, [r2, #0]
}
 8003d64:	bf00      	nop
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	200000ec 	.word	0x200000ec
 8003d74:	2000186c 	.word	0x2000186c

08003d78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d7c:	4b03      	ldr	r3, [pc, #12]	; (8003d8c <HAL_GetTick+0x14>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	2000186c 	.word	0x2000186c

08003d90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d98:	f7ff ffee 	bl	8003d78 <HAL_GetTick>
 8003d9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da8:	d005      	beq.n	8003db6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003daa:	4b0a      	ldr	r3, [pc, #40]	; (8003dd4 <HAL_Delay+0x44>)
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	461a      	mov	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4413      	add	r3, r2
 8003db4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003db6:	bf00      	nop
 8003db8:	f7ff ffde 	bl	8003d78 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d8f7      	bhi.n	8003db8 <HAL_Delay+0x28>
  {
  }
}
 8003dc8:	bf00      	nop
 8003dca:	bf00      	nop
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	200000ec 	.word	0x200000ec

08003dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f003 0307 	and.w	r3, r3, #7
 8003de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003de8:	4b0c      	ldr	r3, [pc, #48]	; (8003e1c <__NVIC_SetPriorityGrouping+0x44>)
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dee:	68ba      	ldr	r2, [r7, #8]
 8003df0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003df4:	4013      	ands	r3, r2
 8003df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e0a:	4a04      	ldr	r2, [pc, #16]	; (8003e1c <__NVIC_SetPriorityGrouping+0x44>)
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	60d3      	str	r3, [r2, #12]
}
 8003e10:	bf00      	nop
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr
 8003e1c:	e000ed00 	.word	0xe000ed00

08003e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e20:	b480      	push	{r7}
 8003e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e24:	4b04      	ldr	r3, [pc, #16]	; (8003e38 <__NVIC_GetPriorityGrouping+0x18>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	0a1b      	lsrs	r3, r3, #8
 8003e2a:	f003 0307 	and.w	r3, r3, #7
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr
 8003e38:	e000ed00 	.word	0xe000ed00

08003e3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	4603      	mov	r3, r0
 8003e44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	db0b      	blt.n	8003e66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e4e:	79fb      	ldrb	r3, [r7, #7]
 8003e50:	f003 021f 	and.w	r2, r3, #31
 8003e54:	4907      	ldr	r1, [pc, #28]	; (8003e74 <__NVIC_EnableIRQ+0x38>)
 8003e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5a:	095b      	lsrs	r3, r3, #5
 8003e5c:	2001      	movs	r0, #1
 8003e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e66:	bf00      	nop
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	e000e100 	.word	0xe000e100

08003e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	4603      	mov	r3, r0
 8003e80:	6039      	str	r1, [r7, #0]
 8003e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	db0a      	blt.n	8003ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	b2da      	uxtb	r2, r3
 8003e90:	490c      	ldr	r1, [pc, #48]	; (8003ec4 <__NVIC_SetPriority+0x4c>)
 8003e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e96:	0112      	lsls	r2, r2, #4
 8003e98:	b2d2      	uxtb	r2, r2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ea0:	e00a      	b.n	8003eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	b2da      	uxtb	r2, r3
 8003ea6:	4908      	ldr	r1, [pc, #32]	; (8003ec8 <__NVIC_SetPriority+0x50>)
 8003ea8:	79fb      	ldrb	r3, [r7, #7]
 8003eaa:	f003 030f 	and.w	r3, r3, #15
 8003eae:	3b04      	subs	r3, #4
 8003eb0:	0112      	lsls	r2, r2, #4
 8003eb2:	b2d2      	uxtb	r2, r2
 8003eb4:	440b      	add	r3, r1
 8003eb6:	761a      	strb	r2, [r3, #24]
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	e000e100 	.word	0xe000e100
 8003ec8:	e000ed00 	.word	0xe000ed00

08003ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b089      	sub	sp, #36	; 0x24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f003 0307 	and.w	r3, r3, #7
 8003ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	f1c3 0307 	rsb	r3, r3, #7
 8003ee6:	2b04      	cmp	r3, #4
 8003ee8:	bf28      	it	cs
 8003eea:	2304      	movcs	r3, #4
 8003eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	3304      	adds	r3, #4
 8003ef2:	2b06      	cmp	r3, #6
 8003ef4:	d902      	bls.n	8003efc <NVIC_EncodePriority+0x30>
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	3b03      	subs	r3, #3
 8003efa:	e000      	b.n	8003efe <NVIC_EncodePriority+0x32>
 8003efc:	2300      	movs	r3, #0
 8003efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f00:	f04f 32ff 	mov.w	r2, #4294967295
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	43da      	mvns	r2, r3
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	401a      	ands	r2, r3
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f14:	f04f 31ff 	mov.w	r1, #4294967295
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1e:	43d9      	mvns	r1, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f24:	4313      	orrs	r3, r2
         );
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3724      	adds	r7, #36	; 0x24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
	...

08003f34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f44:	d301      	bcc.n	8003f4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f46:	2301      	movs	r3, #1
 8003f48:	e00f      	b.n	8003f6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f4a:	4a0a      	ldr	r2, [pc, #40]	; (8003f74 <SysTick_Config+0x40>)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f52:	210f      	movs	r1, #15
 8003f54:	f04f 30ff 	mov.w	r0, #4294967295
 8003f58:	f7ff ff8e 	bl	8003e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f5c:	4b05      	ldr	r3, [pc, #20]	; (8003f74 <SysTick_Config+0x40>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f62:	4b04      	ldr	r3, [pc, #16]	; (8003f74 <SysTick_Config+0x40>)
 8003f64:	2207      	movs	r2, #7
 8003f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	e000e010 	.word	0xe000e010

08003f78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f7ff ff29 	bl	8003dd8 <__NVIC_SetPriorityGrouping>
}
 8003f86:	bf00      	nop
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b086      	sub	sp, #24
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	4603      	mov	r3, r0
 8003f96:	60b9      	str	r1, [r7, #8]
 8003f98:	607a      	str	r2, [r7, #4]
 8003f9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003fa0:	f7ff ff3e 	bl	8003e20 <__NVIC_GetPriorityGrouping>
 8003fa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	68b9      	ldr	r1, [r7, #8]
 8003faa:	6978      	ldr	r0, [r7, #20]
 8003fac:	f7ff ff8e 	bl	8003ecc <NVIC_EncodePriority>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fb6:	4611      	mov	r1, r2
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7ff ff5d 	bl	8003e78 <__NVIC_SetPriority>
}
 8003fbe:	bf00      	nop
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b082      	sub	sp, #8
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	4603      	mov	r3, r0
 8003fce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff ff31 	bl	8003e3c <__NVIC_EnableIRQ>
}
 8003fda:	bf00      	nop
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b082      	sub	sp, #8
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7ff ffa2 	bl	8003f34 <SysTick_Config>
 8003ff0:	4603      	mov	r3, r0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
	...

08003ffc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004004:	2300      	movs	r3, #0
 8004006:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004008:	f7ff feb6 	bl	8003d78 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d101      	bne.n	8004018 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e099      	b.n	800414c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2202      	movs	r2, #2
 800401c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 0201 	bic.w	r2, r2, #1
 8004036:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004038:	e00f      	b.n	800405a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800403a:	f7ff fe9d 	bl	8003d78 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b05      	cmp	r3, #5
 8004046:	d908      	bls.n	800405a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2220      	movs	r2, #32
 800404c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2203      	movs	r2, #3
 8004052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e078      	b.n	800414c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1e8      	bne.n	800403a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	4b38      	ldr	r3, [pc, #224]	; (8004154 <HAL_DMA_Init+0x158>)
 8004074:	4013      	ands	r3, r2
 8004076:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004086:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004092:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800409e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	2b04      	cmp	r3, #4
 80040b2:	d107      	bne.n	80040c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040bc:	4313      	orrs	r3, r2
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	f023 0307 	bic.w	r3, r3, #7
 80040da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	d117      	bne.n	800411e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00e      	beq.n	800411e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 fb1b 	bl	800473c <DMA_CheckFifoParam>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d008      	beq.n	800411e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2240      	movs	r2, #64	; 0x40
 8004110:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800411a:	2301      	movs	r3, #1
 800411c:	e016      	b.n	800414c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 fad2 	bl	80046d0 <DMA_CalcBaseAndBitshift>
 800412c:	4603      	mov	r3, r0
 800412e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004134:	223f      	movs	r2, #63	; 0x3f
 8004136:	409a      	lsls	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3718      	adds	r7, #24
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	f010803f 	.word	0xf010803f

08004158 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
 8004164:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004166:	2300      	movs	r3, #0
 8004168:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004176:	2b01      	cmp	r3, #1
 8004178:	d101      	bne.n	800417e <HAL_DMA_Start_IT+0x26>
 800417a:	2302      	movs	r3, #2
 800417c:	e040      	b.n	8004200 <HAL_DMA_Start_IT+0xa8>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b01      	cmp	r3, #1
 8004190:	d12f      	bne.n	80041f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2202      	movs	r2, #2
 8004196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	68b9      	ldr	r1, [r7, #8]
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f000 fa64 	bl	8004674 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b0:	223f      	movs	r2, #63	; 0x3f
 80041b2:	409a      	lsls	r2, r3
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 0216 	orr.w	r2, r2, #22
 80041c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d007      	beq.n	80041e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f042 0208 	orr.w	r2, r2, #8
 80041de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 0201 	orr.w	r2, r2, #1
 80041ee:	601a      	str	r2, [r3, #0]
 80041f0:	e005      	b.n	80041fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80041fa:	2302      	movs	r3, #2
 80041fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80041fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004200:	4618      	mov	r0, r3
 8004202:	3718      	adds	r7, #24
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004214:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004216:	f7ff fdaf 	bl	8003d78 <HAL_GetTick>
 800421a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d008      	beq.n	800423a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2280      	movs	r2, #128	; 0x80
 800422c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e052      	b.n	80042e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0216 	bic.w	r2, r2, #22
 8004248:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	695a      	ldr	r2, [r3, #20]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004258:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	2b00      	cmp	r3, #0
 8004260:	d103      	bne.n	800426a <HAL_DMA_Abort+0x62>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004266:	2b00      	cmp	r3, #0
 8004268:	d007      	beq.n	800427a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 0208 	bic.w	r2, r2, #8
 8004278:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f022 0201 	bic.w	r2, r2, #1
 8004288:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800428a:	e013      	b.n	80042b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800428c:	f7ff fd74 	bl	8003d78 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b05      	cmp	r3, #5
 8004298:	d90c      	bls.n	80042b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2220      	movs	r2, #32
 800429e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2203      	movs	r2, #3
 80042a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e015      	b.n	80042e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1e4      	bne.n	800428c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c6:	223f      	movs	r2, #63	; 0x3f
 80042c8:	409a      	lsls	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d004      	beq.n	8004306 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2280      	movs	r2, #128	; 0x80
 8004300:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e00c      	b.n	8004320 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2205      	movs	r2, #5
 800430a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 0201 	bic.w	r2, r2, #1
 800431c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004334:	2300      	movs	r3, #0
 8004336:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004338:	4b92      	ldr	r3, [pc, #584]	; (8004584 <HAL_DMA_IRQHandler+0x258>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a92      	ldr	r2, [pc, #584]	; (8004588 <HAL_DMA_IRQHandler+0x25c>)
 800433e:	fba2 2303 	umull	r2, r3, r2, r3
 8004342:	0a9b      	lsrs	r3, r3, #10
 8004344:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004356:	2208      	movs	r2, #8
 8004358:	409a      	lsls	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	4013      	ands	r3, r2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d01a      	beq.n	8004398 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	2b00      	cmp	r3, #0
 800436e:	d013      	beq.n	8004398 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 0204 	bic.w	r2, r2, #4
 800437e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004384:	2208      	movs	r2, #8
 8004386:	409a      	lsls	r2, r3
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004390:	f043 0201 	orr.w	r2, r3, #1
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800439c:	2201      	movs	r2, #1
 800439e:	409a      	lsls	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	4013      	ands	r3, r2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d012      	beq.n	80043ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00b      	beq.n	80043ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ba:	2201      	movs	r2, #1
 80043bc:	409a      	lsls	r2, r3
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c6:	f043 0202 	orr.w	r2, r3, #2
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d2:	2204      	movs	r2, #4
 80043d4:	409a      	lsls	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	4013      	ands	r3, r2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d012      	beq.n	8004404 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00b      	beq.n	8004404 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f0:	2204      	movs	r2, #4
 80043f2:	409a      	lsls	r2, r3
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043fc:	f043 0204 	orr.w	r2, r3, #4
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004408:	2210      	movs	r2, #16
 800440a:	409a      	lsls	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4013      	ands	r3, r2
 8004410:	2b00      	cmp	r3, #0
 8004412:	d043      	beq.n	800449c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b00      	cmp	r3, #0
 8004420:	d03c      	beq.n	800449c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004426:	2210      	movs	r2, #16
 8004428:	409a      	lsls	r2, r3
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d018      	beq.n	800446e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d108      	bne.n	800445c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	2b00      	cmp	r3, #0
 8004450:	d024      	beq.n	800449c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	4798      	blx	r3
 800445a:	e01f      	b.n	800449c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004460:	2b00      	cmp	r3, #0
 8004462:	d01b      	beq.n	800449c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	4798      	blx	r3
 800446c:	e016      	b.n	800449c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004478:	2b00      	cmp	r3, #0
 800447a:	d107      	bne.n	800448c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 0208 	bic.w	r2, r2, #8
 800448a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004490:	2b00      	cmp	r3, #0
 8004492:	d003      	beq.n	800449c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a0:	2220      	movs	r2, #32
 80044a2:	409a      	lsls	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4013      	ands	r3, r2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f000 808e 	beq.w	80045ca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0310 	and.w	r3, r3, #16
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 8086 	beq.w	80045ca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c2:	2220      	movs	r2, #32
 80044c4:	409a      	lsls	r2, r3
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b05      	cmp	r3, #5
 80044d4:	d136      	bne.n	8004544 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f022 0216 	bic.w	r2, r2, #22
 80044e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	695a      	ldr	r2, [r3, #20]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d103      	bne.n	8004506 <HAL_DMA_IRQHandler+0x1da>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004502:	2b00      	cmp	r3, #0
 8004504:	d007      	beq.n	8004516 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 0208 	bic.w	r2, r2, #8
 8004514:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800451a:	223f      	movs	r2, #63	; 0x3f
 800451c:	409a      	lsls	r2, r3
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004536:	2b00      	cmp	r3, #0
 8004538:	d07d      	beq.n	8004636 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	4798      	blx	r3
        }
        return;
 8004542:	e078      	b.n	8004636 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d01c      	beq.n	800458c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d108      	bne.n	8004572 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004564:	2b00      	cmp	r3, #0
 8004566:	d030      	beq.n	80045ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	4798      	blx	r3
 8004570:	e02b      	b.n	80045ca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004576:	2b00      	cmp	r3, #0
 8004578:	d027      	beq.n	80045ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	4798      	blx	r3
 8004582:	e022      	b.n	80045ca <HAL_DMA_IRQHandler+0x29e>
 8004584:	200000e4 	.word	0x200000e4
 8004588:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10f      	bne.n	80045ba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 0210 	bic.w	r2, r2, #16
 80045a8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d032      	beq.n	8004638 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d022      	beq.n	8004624 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2205      	movs	r2, #5
 80045e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 0201 	bic.w	r2, r2, #1
 80045f4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	3301      	adds	r3, #1
 80045fa:	60bb      	str	r3, [r7, #8]
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d307      	bcc.n	8004612 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1f2      	bne.n	80045f6 <HAL_DMA_IRQHandler+0x2ca>
 8004610:	e000      	b.n	8004614 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004612:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004628:	2b00      	cmp	r3, #0
 800462a:	d005      	beq.n	8004638 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	4798      	blx	r3
 8004634:	e000      	b.n	8004638 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004636:	bf00      	nop
    }
  }
}
 8004638:	3718      	adds	r7, #24
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop

08004640 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800464e:	b2db      	uxtb	r3, r3
}
 8004650:	4618      	mov	r0, r3
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004668:	4618      	mov	r0, r3
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
 8004680:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004690:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	2b40      	cmp	r3, #64	; 0x40
 80046a0:	d108      	bne.n	80046b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80046b2:	e007      	b.n	80046c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	60da      	str	r2, [r3, #12]
}
 80046c4:	bf00      	nop
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	3b10      	subs	r3, #16
 80046e0:	4a14      	ldr	r2, [pc, #80]	; (8004734 <DMA_CalcBaseAndBitshift+0x64>)
 80046e2:	fba2 2303 	umull	r2, r3, r2, r3
 80046e6:	091b      	lsrs	r3, r3, #4
 80046e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80046ea:	4a13      	ldr	r2, [pc, #76]	; (8004738 <DMA_CalcBaseAndBitshift+0x68>)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	4413      	add	r3, r2
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	461a      	mov	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2b03      	cmp	r3, #3
 80046fc:	d909      	bls.n	8004712 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004706:	f023 0303 	bic.w	r3, r3, #3
 800470a:	1d1a      	adds	r2, r3, #4
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	659a      	str	r2, [r3, #88]	; 0x58
 8004710:	e007      	b.n	8004722 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800471a:	f023 0303 	bic.w	r3, r3, #3
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004726:	4618      	mov	r0, r3
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	aaaaaaab 	.word	0xaaaaaaab
 8004738:	0800b440 	.word	0x0800b440

0800473c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004744:	2300      	movs	r3, #0
 8004746:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d11f      	bne.n	8004796 <DMA_CheckFifoParam+0x5a>
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2b03      	cmp	r3, #3
 800475a:	d856      	bhi.n	800480a <DMA_CheckFifoParam+0xce>
 800475c:	a201      	add	r2, pc, #4	; (adr r2, 8004764 <DMA_CheckFifoParam+0x28>)
 800475e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004762:	bf00      	nop
 8004764:	08004775 	.word	0x08004775
 8004768:	08004787 	.word	0x08004787
 800476c:	08004775 	.word	0x08004775
 8004770:	0800480b 	.word	0x0800480b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004778:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d046      	beq.n	800480e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004784:	e043      	b.n	800480e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800478e:	d140      	bne.n	8004812 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004794:	e03d      	b.n	8004812 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800479e:	d121      	bne.n	80047e4 <DMA_CheckFifoParam+0xa8>
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	2b03      	cmp	r3, #3
 80047a4:	d837      	bhi.n	8004816 <DMA_CheckFifoParam+0xda>
 80047a6:	a201      	add	r2, pc, #4	; (adr r2, 80047ac <DMA_CheckFifoParam+0x70>)
 80047a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ac:	080047bd 	.word	0x080047bd
 80047b0:	080047c3 	.word	0x080047c3
 80047b4:	080047bd 	.word	0x080047bd
 80047b8:	080047d5 	.word	0x080047d5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	73fb      	strb	r3, [r7, #15]
      break;
 80047c0:	e030      	b.n	8004824 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d025      	beq.n	800481a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047d2:	e022      	b.n	800481a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80047dc:	d11f      	bne.n	800481e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80047e2:	e01c      	b.n	800481e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d903      	bls.n	80047f2 <DMA_CheckFifoParam+0xb6>
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2b03      	cmp	r3, #3
 80047ee:	d003      	beq.n	80047f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80047f0:	e018      	b.n	8004824 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	73fb      	strb	r3, [r7, #15]
      break;
 80047f6:	e015      	b.n	8004824 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00e      	beq.n	8004822 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	73fb      	strb	r3, [r7, #15]
      break;
 8004808:	e00b      	b.n	8004822 <DMA_CheckFifoParam+0xe6>
      break;
 800480a:	bf00      	nop
 800480c:	e00a      	b.n	8004824 <DMA_CheckFifoParam+0xe8>
      break;
 800480e:	bf00      	nop
 8004810:	e008      	b.n	8004824 <DMA_CheckFifoParam+0xe8>
      break;
 8004812:	bf00      	nop
 8004814:	e006      	b.n	8004824 <DMA_CheckFifoParam+0xe8>
      break;
 8004816:	bf00      	nop
 8004818:	e004      	b.n	8004824 <DMA_CheckFifoParam+0xe8>
      break;
 800481a:	bf00      	nop
 800481c:	e002      	b.n	8004824 <DMA_CheckFifoParam+0xe8>
      break;   
 800481e:	bf00      	nop
 8004820:	e000      	b.n	8004824 <DMA_CheckFifoParam+0xe8>
      break;
 8004822:	bf00      	nop
    }
  } 
  
  return status; 
 8004824:	7bfb      	ldrb	r3, [r7, #15]
}
 8004826:	4618      	mov	r0, r3
 8004828:	3714      	adds	r7, #20
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop

08004834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004834:	b480      	push	{r7}
 8004836:	b089      	sub	sp, #36	; 0x24
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800483e:	2300      	movs	r3, #0
 8004840:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004842:	2300      	movs	r3, #0
 8004844:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004846:	2300      	movs	r3, #0
 8004848:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800484a:	2300      	movs	r3, #0
 800484c:	61fb      	str	r3, [r7, #28]
 800484e:	e16b      	b.n	8004b28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004850:	2201      	movs	r2, #1
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	fa02 f303 	lsl.w	r3, r2, r3
 8004858:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	4013      	ands	r3, r2
 8004862:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	429a      	cmp	r2, r3
 800486a:	f040 815a 	bne.w	8004b22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	2b01      	cmp	r3, #1
 8004878:	d005      	beq.n	8004886 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004882:	2b02      	cmp	r3, #2
 8004884:	d130      	bne.n	80048e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	005b      	lsls	r3, r3, #1
 8004890:	2203      	movs	r2, #3
 8004892:	fa02 f303 	lsl.w	r3, r2, r3
 8004896:	43db      	mvns	r3, r3
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	4013      	ands	r3, r2
 800489c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	68da      	ldr	r2, [r3, #12]
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	fa02 f303 	lsl.w	r3, r2, r3
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048bc:	2201      	movs	r2, #1
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	fa02 f303 	lsl.w	r3, r2, r3
 80048c4:	43db      	mvns	r3, r3
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	4013      	ands	r3, r2
 80048ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	091b      	lsrs	r3, r3, #4
 80048d2:	f003 0201 	and.w	r2, r3, #1
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	fa02 f303 	lsl.w	r3, r2, r3
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	4313      	orrs	r3, r2
 80048e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f003 0303 	and.w	r3, r3, #3
 80048f0:	2b03      	cmp	r3, #3
 80048f2:	d017      	beq.n	8004924 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	2203      	movs	r2, #3
 8004900:	fa02 f303 	lsl.w	r3, r2, r3
 8004904:	43db      	mvns	r3, r3
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	4013      	ands	r3, r2
 800490a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	fa02 f303 	lsl.w	r3, r2, r3
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	4313      	orrs	r3, r2
 800491c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f003 0303 	and.w	r3, r3, #3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d123      	bne.n	8004978 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	08da      	lsrs	r2, r3, #3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	3208      	adds	r2, #8
 8004938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800493c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	220f      	movs	r2, #15
 8004948:	fa02 f303 	lsl.w	r3, r2, r3
 800494c:	43db      	mvns	r3, r3
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	4013      	ands	r3, r2
 8004952:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	691a      	ldr	r2, [r3, #16]
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	f003 0307 	and.w	r3, r3, #7
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	fa02 f303 	lsl.w	r3, r2, r3
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	4313      	orrs	r3, r2
 8004968:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	08da      	lsrs	r2, r3, #3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	3208      	adds	r2, #8
 8004972:	69b9      	ldr	r1, [r7, #24]
 8004974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	005b      	lsls	r3, r3, #1
 8004982:	2203      	movs	r2, #3
 8004984:	fa02 f303 	lsl.w	r3, r2, r3
 8004988:	43db      	mvns	r3, r3
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	4013      	ands	r3, r2
 800498e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f003 0203 	and.w	r2, r3, #3
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	fa02 f303 	lsl.w	r3, r2, r3
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 80b4 	beq.w	8004b22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049ba:	2300      	movs	r3, #0
 80049bc:	60fb      	str	r3, [r7, #12]
 80049be:	4b60      	ldr	r3, [pc, #384]	; (8004b40 <HAL_GPIO_Init+0x30c>)
 80049c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c2:	4a5f      	ldr	r2, [pc, #380]	; (8004b40 <HAL_GPIO_Init+0x30c>)
 80049c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049c8:	6453      	str	r3, [r2, #68]	; 0x44
 80049ca:	4b5d      	ldr	r3, [pc, #372]	; (8004b40 <HAL_GPIO_Init+0x30c>)
 80049cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049d2:	60fb      	str	r3, [r7, #12]
 80049d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049d6:	4a5b      	ldr	r2, [pc, #364]	; (8004b44 <HAL_GPIO_Init+0x310>)
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	089b      	lsrs	r3, r3, #2
 80049dc:	3302      	adds	r3, #2
 80049de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	f003 0303 	and.w	r3, r3, #3
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	220f      	movs	r2, #15
 80049ee:	fa02 f303 	lsl.w	r3, r2, r3
 80049f2:	43db      	mvns	r3, r3
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	4013      	ands	r3, r2
 80049f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a52      	ldr	r2, [pc, #328]	; (8004b48 <HAL_GPIO_Init+0x314>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d02b      	beq.n	8004a5a <HAL_GPIO_Init+0x226>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a51      	ldr	r2, [pc, #324]	; (8004b4c <HAL_GPIO_Init+0x318>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d025      	beq.n	8004a56 <HAL_GPIO_Init+0x222>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a50      	ldr	r2, [pc, #320]	; (8004b50 <HAL_GPIO_Init+0x31c>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d01f      	beq.n	8004a52 <HAL_GPIO_Init+0x21e>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a4f      	ldr	r2, [pc, #316]	; (8004b54 <HAL_GPIO_Init+0x320>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d019      	beq.n	8004a4e <HAL_GPIO_Init+0x21a>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a4e      	ldr	r2, [pc, #312]	; (8004b58 <HAL_GPIO_Init+0x324>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d013      	beq.n	8004a4a <HAL_GPIO_Init+0x216>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a4d      	ldr	r2, [pc, #308]	; (8004b5c <HAL_GPIO_Init+0x328>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d00d      	beq.n	8004a46 <HAL_GPIO_Init+0x212>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a4c      	ldr	r2, [pc, #304]	; (8004b60 <HAL_GPIO_Init+0x32c>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d007      	beq.n	8004a42 <HAL_GPIO_Init+0x20e>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a4b      	ldr	r2, [pc, #300]	; (8004b64 <HAL_GPIO_Init+0x330>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d101      	bne.n	8004a3e <HAL_GPIO_Init+0x20a>
 8004a3a:	2307      	movs	r3, #7
 8004a3c:	e00e      	b.n	8004a5c <HAL_GPIO_Init+0x228>
 8004a3e:	2308      	movs	r3, #8
 8004a40:	e00c      	b.n	8004a5c <HAL_GPIO_Init+0x228>
 8004a42:	2306      	movs	r3, #6
 8004a44:	e00a      	b.n	8004a5c <HAL_GPIO_Init+0x228>
 8004a46:	2305      	movs	r3, #5
 8004a48:	e008      	b.n	8004a5c <HAL_GPIO_Init+0x228>
 8004a4a:	2304      	movs	r3, #4
 8004a4c:	e006      	b.n	8004a5c <HAL_GPIO_Init+0x228>
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e004      	b.n	8004a5c <HAL_GPIO_Init+0x228>
 8004a52:	2302      	movs	r3, #2
 8004a54:	e002      	b.n	8004a5c <HAL_GPIO_Init+0x228>
 8004a56:	2301      	movs	r3, #1
 8004a58:	e000      	b.n	8004a5c <HAL_GPIO_Init+0x228>
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	69fa      	ldr	r2, [r7, #28]
 8004a5e:	f002 0203 	and.w	r2, r2, #3
 8004a62:	0092      	lsls	r2, r2, #2
 8004a64:	4093      	lsls	r3, r2
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a6c:	4935      	ldr	r1, [pc, #212]	; (8004b44 <HAL_GPIO_Init+0x310>)
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	089b      	lsrs	r3, r3, #2
 8004a72:	3302      	adds	r3, #2
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a7a:	4b3b      	ldr	r3, [pc, #236]	; (8004b68 <HAL_GPIO_Init+0x334>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	43db      	mvns	r3, r3
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	4013      	ands	r3, r2
 8004a88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004a96:	69ba      	ldr	r2, [r7, #24]
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a9e:	4a32      	ldr	r2, [pc, #200]	; (8004b68 <HAL_GPIO_Init+0x334>)
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004aa4:	4b30      	ldr	r3, [pc, #192]	; (8004b68 <HAL_GPIO_Init+0x334>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	43db      	mvns	r3, r3
 8004aae:	69ba      	ldr	r2, [r7, #24]
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d003      	beq.n	8004ac8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ac8:	4a27      	ldr	r2, [pc, #156]	; (8004b68 <HAL_GPIO_Init+0x334>)
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ace:	4b26      	ldr	r3, [pc, #152]	; (8004b68 <HAL_GPIO_Init+0x334>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	43db      	mvns	r3, r3
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	4013      	ands	r3, r2
 8004adc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d003      	beq.n	8004af2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004aea:	69ba      	ldr	r2, [r7, #24]
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004af2:	4a1d      	ldr	r2, [pc, #116]	; (8004b68 <HAL_GPIO_Init+0x334>)
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004af8:	4b1b      	ldr	r3, [pc, #108]	; (8004b68 <HAL_GPIO_Init+0x334>)
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	43db      	mvns	r3, r3
 8004b02:	69ba      	ldr	r2, [r7, #24]
 8004b04:	4013      	ands	r3, r2
 8004b06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004b14:	69ba      	ldr	r2, [r7, #24]
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b1c:	4a12      	ldr	r2, [pc, #72]	; (8004b68 <HAL_GPIO_Init+0x334>)
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	3301      	adds	r3, #1
 8004b26:	61fb      	str	r3, [r7, #28]
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	2b0f      	cmp	r3, #15
 8004b2c:	f67f ae90 	bls.w	8004850 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b30:	bf00      	nop
 8004b32:	bf00      	nop
 8004b34:	3724      	adds	r7, #36	; 0x24
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	40023800 	.word	0x40023800
 8004b44:	40013800 	.word	0x40013800
 8004b48:	40020000 	.word	0x40020000
 8004b4c:	40020400 	.word	0x40020400
 8004b50:	40020800 	.word	0x40020800
 8004b54:	40020c00 	.word	0x40020c00
 8004b58:	40021000 	.word	0x40021000
 8004b5c:	40021400 	.word	0x40021400
 8004b60:	40021800 	.word	0x40021800
 8004b64:	40021c00 	.word	0x40021c00
 8004b68:	40013c00 	.word	0x40013c00

08004b6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	460b      	mov	r3, r1
 8004b76:	807b      	strh	r3, [r7, #2]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b7c:	787b      	ldrb	r3, [r7, #1]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b82:	887a      	ldrh	r2, [r7, #2]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b88:	e003      	b.n	8004b92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b8a:	887b      	ldrh	r3, [r7, #2]
 8004b8c:	041a      	lsls	r2, r3, #16
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	619a      	str	r2, [r3, #24]
}
 8004b92:	bf00      	nop
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
	...

08004ba0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e12b      	b.n	8004e0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d106      	bne.n	8004bcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f7fe f884 	bl	8002cd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2224      	movs	r2, #36	; 0x24
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f022 0201 	bic.w	r2, r2, #1
 8004be2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bf2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c04:	f003 fc46 	bl	8008494 <HAL_RCC_GetPCLK1Freq>
 8004c08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	4a81      	ldr	r2, [pc, #516]	; (8004e14 <HAL_I2C_Init+0x274>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d807      	bhi.n	8004c24 <HAL_I2C_Init+0x84>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4a80      	ldr	r2, [pc, #512]	; (8004e18 <HAL_I2C_Init+0x278>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	bf94      	ite	ls
 8004c1c:	2301      	movls	r3, #1
 8004c1e:	2300      	movhi	r3, #0
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	e006      	b.n	8004c32 <HAL_I2C_Init+0x92>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4a7d      	ldr	r2, [pc, #500]	; (8004e1c <HAL_I2C_Init+0x27c>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	bf94      	ite	ls
 8004c2c:	2301      	movls	r3, #1
 8004c2e:	2300      	movhi	r3, #0
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e0e7      	b.n	8004e0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	4a78      	ldr	r2, [pc, #480]	; (8004e20 <HAL_I2C_Init+0x280>)
 8004c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c42:	0c9b      	lsrs	r3, r3, #18
 8004c44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	430a      	orrs	r2, r1
 8004c58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
 8004c60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	4a6a      	ldr	r2, [pc, #424]	; (8004e14 <HAL_I2C_Init+0x274>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d802      	bhi.n	8004c74 <HAL_I2C_Init+0xd4>
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	3301      	adds	r3, #1
 8004c72:	e009      	b.n	8004c88 <HAL_I2C_Init+0xe8>
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c7a:	fb02 f303 	mul.w	r3, r2, r3
 8004c7e:	4a69      	ldr	r2, [pc, #420]	; (8004e24 <HAL_I2C_Init+0x284>)
 8004c80:	fba2 2303 	umull	r2, r3, r2, r3
 8004c84:	099b      	lsrs	r3, r3, #6
 8004c86:	3301      	adds	r3, #1
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	6812      	ldr	r2, [r2, #0]
 8004c8c:	430b      	orrs	r3, r1
 8004c8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	495c      	ldr	r1, [pc, #368]	; (8004e14 <HAL_I2C_Init+0x274>)
 8004ca4:	428b      	cmp	r3, r1
 8004ca6:	d819      	bhi.n	8004cdc <HAL_I2C_Init+0x13c>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	1e59      	subs	r1, r3, #1
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cb6:	1c59      	adds	r1, r3, #1
 8004cb8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004cbc:	400b      	ands	r3, r1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00a      	beq.n	8004cd8 <HAL_I2C_Init+0x138>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	1e59      	subs	r1, r3, #1
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	005b      	lsls	r3, r3, #1
 8004ccc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cd6:	e051      	b.n	8004d7c <HAL_I2C_Init+0x1dc>
 8004cd8:	2304      	movs	r3, #4
 8004cda:	e04f      	b.n	8004d7c <HAL_I2C_Init+0x1dc>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d111      	bne.n	8004d08 <HAL_I2C_Init+0x168>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	1e58      	subs	r0, r3, #1
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6859      	ldr	r1, [r3, #4]
 8004cec:	460b      	mov	r3, r1
 8004cee:	005b      	lsls	r3, r3, #1
 8004cf0:	440b      	add	r3, r1
 8004cf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	bf0c      	ite	eq
 8004d00:	2301      	moveq	r3, #1
 8004d02:	2300      	movne	r3, #0
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	e012      	b.n	8004d2e <HAL_I2C_Init+0x18e>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	1e58      	subs	r0, r3, #1
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6859      	ldr	r1, [r3, #4]
 8004d10:	460b      	mov	r3, r1
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	440b      	add	r3, r1
 8004d16:	0099      	lsls	r1, r3, #2
 8004d18:	440b      	add	r3, r1
 8004d1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d1e:	3301      	adds	r3, #1
 8004d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	bf0c      	ite	eq
 8004d28:	2301      	moveq	r3, #1
 8004d2a:	2300      	movne	r3, #0
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <HAL_I2C_Init+0x196>
 8004d32:	2301      	movs	r3, #1
 8004d34:	e022      	b.n	8004d7c <HAL_I2C_Init+0x1dc>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10e      	bne.n	8004d5c <HAL_I2C_Init+0x1bc>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	1e58      	subs	r0, r3, #1
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6859      	ldr	r1, [r3, #4]
 8004d46:	460b      	mov	r3, r1
 8004d48:	005b      	lsls	r3, r3, #1
 8004d4a:	440b      	add	r3, r1
 8004d4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d50:	3301      	adds	r3, #1
 8004d52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d5a:	e00f      	b.n	8004d7c <HAL_I2C_Init+0x1dc>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	1e58      	subs	r0, r3, #1
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6859      	ldr	r1, [r3, #4]
 8004d64:	460b      	mov	r3, r1
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	440b      	add	r3, r1
 8004d6a:	0099      	lsls	r1, r3, #2
 8004d6c:	440b      	add	r3, r1
 8004d6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d72:	3301      	adds	r3, #1
 8004d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d7c:	6879      	ldr	r1, [r7, #4]
 8004d7e:	6809      	ldr	r1, [r1, #0]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	69da      	ldr	r2, [r3, #28]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	431a      	orrs	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004daa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	6911      	ldr	r1, [r2, #16]
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	68d2      	ldr	r2, [r2, #12]
 8004db6:	4311      	orrs	r1, r2
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	6812      	ldr	r2, [r2, #0]
 8004dbc:	430b      	orrs	r3, r1
 8004dbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	695a      	ldr	r2, [r3, #20]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f042 0201 	orr.w	r2, r2, #1
 8004dea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2220      	movs	r2, #32
 8004df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	000186a0 	.word	0x000186a0
 8004e18:	001e847f 	.word	0x001e847f
 8004e1c:	003d08ff 	.word	0x003d08ff
 8004e20:	431bde83 	.word	0x431bde83
 8004e24:	10624dd3 	.word	0x10624dd3

08004e28 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b088      	sub	sp, #32
 8004e2c:	af02      	add	r7, sp, #8
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	4608      	mov	r0, r1
 8004e32:	4611      	mov	r1, r2
 8004e34:	461a      	mov	r2, r3
 8004e36:	4603      	mov	r3, r0
 8004e38:	817b      	strh	r3, [r7, #10]
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	813b      	strh	r3, [r7, #8]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e42:	f7fe ff99 	bl	8003d78 <HAL_GetTick>
 8004e46:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b20      	cmp	r3, #32
 8004e52:	f040 80d9 	bne.w	8005008 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	2319      	movs	r3, #25
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	496d      	ldr	r1, [pc, #436]	; (8005014 <HAL_I2C_Mem_Write+0x1ec>)
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f002 fccd 	bl	8007800 <I2C_WaitOnFlagUntilTimeout>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d001      	beq.n	8004e70 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	e0cc      	b.n	800500a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d101      	bne.n	8004e7e <HAL_I2C_Mem_Write+0x56>
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	e0c5      	b.n	800500a <HAL_I2C_Mem_Write+0x1e2>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d007      	beq.n	8004ea4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f042 0201 	orr.w	r2, r2, #1
 8004ea2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004eb2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2221      	movs	r2, #33	; 0x21
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2240      	movs	r2, #64	; 0x40
 8004ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6a3a      	ldr	r2, [r7, #32]
 8004ece:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ed4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4a4d      	ldr	r2, [pc, #308]	; (8005018 <HAL_I2C_Mem_Write+0x1f0>)
 8004ee4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ee6:	88f8      	ldrh	r0, [r7, #6]
 8004ee8:	893a      	ldrh	r2, [r7, #8]
 8004eea:	8979      	ldrh	r1, [r7, #10]
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	9301      	str	r3, [sp, #4]
 8004ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f002 f94a 	bl	8007190 <I2C_RequestMemoryWrite>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d052      	beq.n	8004fa8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e081      	b.n	800500a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f002 fd4e 	bl	80079ac <I2C_WaitOnTXEFlagUntilTimeout>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00d      	beq.n	8004f32 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1a:	2b04      	cmp	r3, #4
 8004f1c:	d107      	bne.n	8004f2e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e06b      	b.n	800500a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f36:	781a      	ldrb	r2, [r3, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	1c5a      	adds	r2, r3, #1
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	f003 0304 	and.w	r3, r3, #4
 8004f6c:	2b04      	cmp	r3, #4
 8004f6e:	d11b      	bne.n	8004fa8 <HAL_I2C_Mem_Write+0x180>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d017      	beq.n	8004fa8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7c:	781a      	ldrb	r2, [r3, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	1c5a      	adds	r2, r3, #1
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f92:	3b01      	subs	r3, #1
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1aa      	bne.n	8004f06 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f002 fd3a 	bl	8007a2e <I2C_WaitOnBTFFlagUntilTimeout>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00d      	beq.n	8004fdc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc4:	2b04      	cmp	r3, #4
 8004fc6:	d107      	bne.n	8004fd8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fd6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e016      	b.n	800500a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005004:	2300      	movs	r3, #0
 8005006:	e000      	b.n	800500a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005008:	2302      	movs	r3, #2
  }
}
 800500a:	4618      	mov	r0, r3
 800500c:	3718      	adds	r7, #24
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	00100002 	.word	0x00100002
 8005018:	ffff0000 	.word	0xffff0000

0800501c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b08c      	sub	sp, #48	; 0x30
 8005020:	af02      	add	r7, sp, #8
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	4608      	mov	r0, r1
 8005026:	4611      	mov	r1, r2
 8005028:	461a      	mov	r2, r3
 800502a:	4603      	mov	r3, r0
 800502c:	817b      	strh	r3, [r7, #10]
 800502e:	460b      	mov	r3, r1
 8005030:	813b      	strh	r3, [r7, #8]
 8005032:	4613      	mov	r3, r2
 8005034:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005036:	f7fe fe9f 	bl	8003d78 <HAL_GetTick>
 800503a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005042:	b2db      	uxtb	r3, r3
 8005044:	2b20      	cmp	r3, #32
 8005046:	f040 8208 	bne.w	800545a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504c:	9300      	str	r3, [sp, #0]
 800504e:	2319      	movs	r3, #25
 8005050:	2201      	movs	r2, #1
 8005052:	497b      	ldr	r1, [pc, #492]	; (8005240 <HAL_I2C_Mem_Read+0x224>)
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f002 fbd3 	bl	8007800 <I2C_WaitOnFlagUntilTimeout>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d001      	beq.n	8005064 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005060:	2302      	movs	r3, #2
 8005062:	e1fb      	b.n	800545c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800506a:	2b01      	cmp	r3, #1
 800506c:	d101      	bne.n	8005072 <HAL_I2C_Mem_Read+0x56>
 800506e:	2302      	movs	r3, #2
 8005070:	e1f4      	b.n	800545c <HAL_I2C_Mem_Read+0x440>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0301 	and.w	r3, r3, #1
 8005084:	2b01      	cmp	r3, #1
 8005086:	d007      	beq.n	8005098 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f042 0201 	orr.w	r2, r2, #1
 8005096:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2222      	movs	r2, #34	; 0x22
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2240      	movs	r2, #64	; 0x40
 80050b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80050c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4a5b      	ldr	r2, [pc, #364]	; (8005244 <HAL_I2C_Mem_Read+0x228>)
 80050d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050da:	88f8      	ldrh	r0, [r7, #6]
 80050dc:	893a      	ldrh	r2, [r7, #8]
 80050de:	8979      	ldrh	r1, [r7, #10]
 80050e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e2:	9301      	str	r3, [sp, #4]
 80050e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	4603      	mov	r3, r0
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f002 f8e6 	bl	80072bc <I2C_RequestMemoryRead>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e1b0      	b.n	800545c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d113      	bne.n	800512a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005102:	2300      	movs	r3, #0
 8005104:	623b      	str	r3, [r7, #32]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	695b      	ldr	r3, [r3, #20]
 800510c:	623b      	str	r3, [r7, #32]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	623b      	str	r3, [r7, #32]
 8005116:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005126:	601a      	str	r2, [r3, #0]
 8005128:	e184      	b.n	8005434 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800512e:	2b01      	cmp	r3, #1
 8005130:	d11b      	bne.n	800516a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005140:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005142:	2300      	movs	r3, #0
 8005144:	61fb      	str	r3, [r7, #28]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	61fb      	str	r3, [r7, #28]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	61fb      	str	r3, [r7, #28]
 8005156:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	e164      	b.n	8005434 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800516e:	2b02      	cmp	r3, #2
 8005170:	d11b      	bne.n	80051aa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005180:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005190:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005192:	2300      	movs	r3, #0
 8005194:	61bb      	str	r3, [r7, #24]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	695b      	ldr	r3, [r3, #20]
 800519c:	61bb      	str	r3, [r7, #24]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	61bb      	str	r3, [r7, #24]
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	e144      	b.n	8005434 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051aa:	2300      	movs	r3, #0
 80051ac:	617b      	str	r3, [r7, #20]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	617b      	str	r3, [r7, #20]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	617b      	str	r3, [r7, #20]
 80051be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80051c0:	e138      	b.n	8005434 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c6:	2b03      	cmp	r3, #3
 80051c8:	f200 80f1 	bhi.w	80053ae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d123      	bne.n	800521c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f002 fc9b 	bl	8007b14 <I2C_WaitOnRXNEFlagUntilTimeout>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d001      	beq.n	80051e8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e139      	b.n	800545c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	691a      	ldr	r2, [r3, #16]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f2:	b2d2      	uxtb	r2, r2
 80051f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fa:	1c5a      	adds	r2, r3, #1
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005204:	3b01      	subs	r3, #1
 8005206:	b29a      	uxth	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005210:	b29b      	uxth	r3, r3
 8005212:	3b01      	subs	r3, #1
 8005214:	b29a      	uxth	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	855a      	strh	r2, [r3, #42]	; 0x2a
 800521a:	e10b      	b.n	8005434 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005220:	2b02      	cmp	r3, #2
 8005222:	d14e      	bne.n	80052c2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522a:	2200      	movs	r2, #0
 800522c:	4906      	ldr	r1, [pc, #24]	; (8005248 <HAL_I2C_Mem_Read+0x22c>)
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f002 fae6 	bl	8007800 <I2C_WaitOnFlagUntilTimeout>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d008      	beq.n	800524c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e10e      	b.n	800545c <HAL_I2C_Mem_Read+0x440>
 800523e:	bf00      	nop
 8005240:	00100002 	.word	0x00100002
 8005244:	ffff0000 	.word	0xffff0000
 8005248:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800525a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	691a      	ldr	r2, [r3, #16]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005266:	b2d2      	uxtb	r2, r2
 8005268:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	1c5a      	adds	r2, r3, #1
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005278:	3b01      	subs	r3, #1
 800527a:	b29a      	uxth	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005284:	b29b      	uxth	r3, r3
 8005286:	3b01      	subs	r3, #1
 8005288:	b29a      	uxth	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	691a      	ldr	r2, [r3, #16]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005298:	b2d2      	uxtb	r2, r2
 800529a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a0:	1c5a      	adds	r2, r3, #1
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052aa:	3b01      	subs	r3, #1
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	3b01      	subs	r3, #1
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052c0:	e0b8      	b.n	8005434 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c8:	2200      	movs	r2, #0
 80052ca:	4966      	ldr	r1, [pc, #408]	; (8005464 <HAL_I2C_Mem_Read+0x448>)
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f002 fa97 	bl	8007800 <I2C_WaitOnFlagUntilTimeout>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e0bf      	b.n	800545c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	691a      	ldr	r2, [r3, #16]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f6:	b2d2      	uxtb	r2, r2
 80052f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fe:	1c5a      	adds	r2, r3, #1
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005308:	3b01      	subs	r3, #1
 800530a:	b29a      	uxth	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005314:	b29b      	uxth	r3, r3
 8005316:	3b01      	subs	r3, #1
 8005318:	b29a      	uxth	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	9300      	str	r3, [sp, #0]
 8005322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005324:	2200      	movs	r2, #0
 8005326:	494f      	ldr	r1, [pc, #316]	; (8005464 <HAL_I2C_Mem_Read+0x448>)
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f002 fa69 	bl	8007800 <I2C_WaitOnFlagUntilTimeout>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d001      	beq.n	8005338 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e091      	b.n	800545c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005346:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	691a      	ldr	r2, [r3, #16]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005352:	b2d2      	uxtb	r2, r2
 8005354:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535a:	1c5a      	adds	r2, r3, #1
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005364:	3b01      	subs	r3, #1
 8005366:	b29a      	uxth	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005370:	b29b      	uxth	r3, r3
 8005372:	3b01      	subs	r3, #1
 8005374:	b29a      	uxth	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	691a      	ldr	r2, [r3, #16]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005384:	b2d2      	uxtb	r2, r2
 8005386:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538c:	1c5a      	adds	r2, r3, #1
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005396:	3b01      	subs	r3, #1
 8005398:	b29a      	uxth	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	3b01      	subs	r3, #1
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80053ac:	e042      	b.n	8005434 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f002 fbae 	bl	8007b14 <I2C_WaitOnRXNEFlagUntilTimeout>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e04c      	b.n	800545c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	691a      	ldr	r2, [r3, #16]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053cc:	b2d2      	uxtb	r2, r2
 80053ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d4:	1c5a      	adds	r2, r3, #1
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053de:	3b01      	subs	r3, #1
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	3b01      	subs	r3, #1
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	f003 0304 	and.w	r3, r3, #4
 80053fe:	2b04      	cmp	r3, #4
 8005400:	d118      	bne.n	8005434 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	691a      	ldr	r2, [r3, #16]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540c:	b2d2      	uxtb	r2, r2
 800540e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005414:	1c5a      	adds	r2, r3, #1
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800541e:	3b01      	subs	r3, #1
 8005420:	b29a      	uxth	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800542a:	b29b      	uxth	r3, r3
 800542c:	3b01      	subs	r3, #1
 800542e:	b29a      	uxth	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005438:	2b00      	cmp	r3, #0
 800543a:	f47f aec2 	bne.w	80051c2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2220      	movs	r2, #32
 8005442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005456:	2300      	movs	r3, #0
 8005458:	e000      	b.n	800545c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800545a:	2302      	movs	r3, #2
  }
}
 800545c:	4618      	mov	r0, r3
 800545e:	3728      	adds	r7, #40	; 0x28
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	00010004 	.word	0x00010004

08005468 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b08c      	sub	sp, #48	; 0x30
 800546c:	af02      	add	r7, sp, #8
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	4608      	mov	r0, r1
 8005472:	4611      	mov	r1, r2
 8005474:	461a      	mov	r2, r3
 8005476:	4603      	mov	r3, r0
 8005478:	817b      	strh	r3, [r7, #10]
 800547a:	460b      	mov	r3, r1
 800547c:	813b      	strh	r3, [r7, #8]
 800547e:	4613      	mov	r3, r2
 8005480:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005482:	f7fe fc79 	bl	8003d78 <HAL_GetTick>
 8005486:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8005488:	2300      	movs	r3, #0
 800548a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b20      	cmp	r3, #32
 8005496:	f040 8176 	bne.w	8005786 <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800549a:	4b95      	ldr	r3, [pc, #596]	; (80056f0 <HAL_I2C_Mem_Read_DMA+0x288>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	08db      	lsrs	r3, r3, #3
 80054a0:	4a94      	ldr	r2, [pc, #592]	; (80056f4 <HAL_I2C_Mem_Read_DMA+0x28c>)
 80054a2:	fba2 2303 	umull	r2, r3, r2, r3
 80054a6:	0a1a      	lsrs	r2, r3, #8
 80054a8:	4613      	mov	r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	4413      	add	r3, r2
 80054ae:	009a      	lsls	r2, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	3b01      	subs	r3, #1
 80054b8:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d116      	bne.n	80054ee <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2220      	movs	r2, #32
 80054ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054da:	f043 0220 	orr.w	r2, r3, #32
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e14c      	b.n	8005788 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	f003 0302 	and.w	r3, r3, #2
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d0db      	beq.n	80054b4 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005502:	2b01      	cmp	r3, #1
 8005504:	d101      	bne.n	800550a <HAL_I2C_Mem_Read_DMA+0xa2>
 8005506:	2302      	movs	r3, #2
 8005508:	e13e      	b.n	8005788 <HAL_I2C_Mem_Read_DMA+0x320>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	2b01      	cmp	r3, #1
 800551e:	d007      	beq.n	8005530 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f042 0201 	orr.w	r2, r2, #1
 800552e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800553e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2222      	movs	r2, #34	; 0x22
 8005544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2240      	movs	r2, #64	; 0x40
 800554c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800555a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005560:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005566:	b29a      	uxth	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4a62      	ldr	r2, [pc, #392]	; (80056f8 <HAL_I2C_Mem_Read_DMA+0x290>)
 8005570:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8005572:	897a      	ldrh	r2, [r7, #10]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8005578:	893a      	ldrh	r2, [r7, #8]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800557e:	88fa      	ldrh	r2, [r7, #6]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800558e:	2b00      	cmp	r3, #0
 8005590:	f000 80cc 	beq.w	800572c <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005598:	2b00      	cmp	r3, #0
 800559a:	d02d      	beq.n	80055f8 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a0:	4a56      	ldr	r2, [pc, #344]	; (80056fc <HAL_I2C_Mem_Read_DMA+0x294>)
 80055a2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a8:	4a55      	ldr	r2, [pc, #340]	; (8005700 <HAL_I2C_Mem_Read_DMA+0x298>)
 80055aa:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b0:	2200      	movs	r2, #0
 80055b2:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b8:	2200      	movs	r2, #0
 80055ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c0:	2200      	movs	r2, #0
 80055c2:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c8:	2200      	movs	r2, #0
 80055ca:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	3310      	adds	r3, #16
 80055d6:	4619      	mov	r1, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055dc:	461a      	mov	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055e2:	f7fe fdb9 	bl	8004158 <HAL_DMA_Start_IT>
 80055e6:	4603      	mov	r3, r0
 80055e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80055ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f040 8087 	bne.w	8005704 <HAL_I2C_Mem_Read_DMA+0x29c>
 80055f6:	e013      	b.n	8005620 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2220      	movs	r2, #32
 80055fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e0b3      	b.n	8005788 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005620:	88f8      	ldrh	r0, [r7, #6]
 8005622:	893a      	ldrh	r2, [r7, #8]
 8005624:	8979      	ldrh	r1, [r7, #10]
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	9301      	str	r3, [sp, #4]
 800562a:	2323      	movs	r3, #35	; 0x23
 800562c:	9300      	str	r3, [sp, #0]
 800562e:	4603      	mov	r3, r0
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f001 fe43 	bl	80072bc <I2C_RequestMemoryRead>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d023      	beq.n	8005684 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005640:	4618      	mov	r0, r3
 8005642:	f7fe fe51 	bl	80042e8 <HAL_DMA_Abort_IT>
 8005646:	4603      	mov	r3, r0
 8005648:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005650:	2200      	movs	r2, #0
 8005652:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005662:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f022 0201 	bic.w	r2, r2, #1
 800567e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e081      	b.n	8005788 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005688:	2b01      	cmp	r3, #1
 800568a:	d108      	bne.n	800569e <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800569a:	601a      	str	r2, [r3, #0]
 800569c:	e007      	b.n	80056ae <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80056ac:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ae:	2300      	movs	r3, #0
 80056b0:	61bb      	str	r3, [r7, #24]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	695b      	ldr	r3, [r3, #20]
 80056b8:	61bb      	str	r3, [r7, #24]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	61bb      	str	r3, [r7, #24]
 80056c2:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056da:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056ea:	605a      	str	r2, [r3, #4]
 80056ec:	e049      	b.n	8005782 <HAL_I2C_Mem_Read_DMA+0x31a>
 80056ee:	bf00      	nop
 80056f0:	200000e4 	.word	0x200000e4
 80056f4:	14f8b589 	.word	0x14f8b589
 80056f8:	ffff0000 	.word	0xffff0000
 80056fc:	0800748d 	.word	0x0800748d
 8005700:	08007637 	.word	0x08007637
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2220      	movs	r2, #32
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005718:	f043 0210 	orr.w	r2, r3, #16
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e02d      	b.n	8005788 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800572c:	88f8      	ldrh	r0, [r7, #6]
 800572e:	893a      	ldrh	r2, [r7, #8]
 8005730:	8979      	ldrh	r1, [r7, #10]
 8005732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005734:	9301      	str	r3, [sp, #4]
 8005736:	2323      	movs	r3, #35	; 0x23
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	4603      	mov	r3, r0
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f001 fdbd 	bl	80072bc <I2C_RequestMemoryRead>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e01d      	b.n	8005788 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800574c:	2300      	movs	r3, #0
 800574e:	617b      	str	r3, [r7, #20]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	617b      	str	r3, [r7, #20]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	617b      	str	r3, [r7, #20]
 8005760:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005770:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2220      	movs	r2, #32
 8005776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8005782:	2300      	movs	r3, #0
 8005784:	e000      	b.n	8005788 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 8005786:	2302      	movs	r3, #2
  }
}
 8005788:	4618      	mov	r0, r3
 800578a:	3728      	adds	r7, #40	; 0x28
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b08a      	sub	sp, #40	; 0x28
 8005794:	af02      	add	r7, sp, #8
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	607a      	str	r2, [r7, #4]
 800579a:	603b      	str	r3, [r7, #0]
 800579c:	460b      	mov	r3, r1
 800579e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80057a0:	f7fe faea 	bl	8003d78 <HAL_GetTick>
 80057a4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80057a6:	2301      	movs	r3, #1
 80057a8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b20      	cmp	r3, #32
 80057b4:	f040 8111 	bne.w	80059da <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	2319      	movs	r3, #25
 80057be:	2201      	movs	r2, #1
 80057c0:	4988      	ldr	r1, [pc, #544]	; (80059e4 <HAL_I2C_IsDeviceReady+0x254>)
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f002 f81c 	bl	8007800 <I2C_WaitOnFlagUntilTimeout>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d001      	beq.n	80057d2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80057ce:	2302      	movs	r3, #2
 80057d0:	e104      	b.n	80059dc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d101      	bne.n	80057e0 <HAL_I2C_IsDeviceReady+0x50>
 80057dc:	2302      	movs	r3, #2
 80057de:	e0fd      	b.n	80059dc <HAL_I2C_IsDeviceReady+0x24c>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d007      	beq.n	8005806 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f042 0201 	orr.w	r2, r2, #1
 8005804:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005814:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2224      	movs	r2, #36	; 0x24
 800581a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4a70      	ldr	r2, [pc, #448]	; (80059e8 <HAL_I2C_IsDeviceReady+0x258>)
 8005828:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005838:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	2200      	movs	r2, #0
 8005842:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f001 ffda 	bl	8007800 <I2C_WaitOnFlagUntilTimeout>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00d      	beq.n	800586e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800585c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005860:	d103      	bne.n	800586a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005868:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e0b6      	b.n	80059dc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800586e:	897b      	ldrh	r3, [r7, #10]
 8005870:	b2db      	uxtb	r3, r3
 8005872:	461a      	mov	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800587c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800587e:	f7fe fa7b 	bl	8003d78 <HAL_GetTick>
 8005882:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	f003 0302 	and.w	r3, r3, #2
 800588e:	2b02      	cmp	r3, #2
 8005890:	bf0c      	ite	eq
 8005892:	2301      	moveq	r3, #1
 8005894:	2300      	movne	r3, #0
 8005896:	b2db      	uxtb	r3, r3
 8005898:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058a8:	bf0c      	ite	eq
 80058aa:	2301      	moveq	r3, #1
 80058ac:	2300      	movne	r3, #0
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80058b2:	e025      	b.n	8005900 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80058b4:	f7fe fa60 	bl	8003d78 <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d302      	bcc.n	80058ca <HAL_I2C_IsDeviceReady+0x13a>
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d103      	bne.n	80058d2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	22a0      	movs	r2, #160	; 0xa0
 80058ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	695b      	ldr	r3, [r3, #20]
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b02      	cmp	r3, #2
 80058de:	bf0c      	ite	eq
 80058e0:	2301      	moveq	r3, #1
 80058e2:	2300      	movne	r3, #0
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058f6:	bf0c      	ite	eq
 80058f8:	2301      	moveq	r3, #1
 80058fa:	2300      	movne	r3, #0
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005906:	b2db      	uxtb	r3, r3
 8005908:	2ba0      	cmp	r3, #160	; 0xa0
 800590a:	d005      	beq.n	8005918 <HAL_I2C_IsDeviceReady+0x188>
 800590c:	7dfb      	ldrb	r3, [r7, #23]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d102      	bne.n	8005918 <HAL_I2C_IsDeviceReady+0x188>
 8005912:	7dbb      	ldrb	r3, [r7, #22]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d0cd      	beq.n	80058b4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2220      	movs	r2, #32
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	f003 0302 	and.w	r3, r3, #2
 800592a:	2b02      	cmp	r3, #2
 800592c:	d129      	bne.n	8005982 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800593c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800593e:	2300      	movs	r3, #0
 8005940:	613b      	str	r3, [r7, #16]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	613b      	str	r3, [r7, #16]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	613b      	str	r3, [r7, #16]
 8005952:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	9300      	str	r3, [sp, #0]
 8005958:	2319      	movs	r3, #25
 800595a:	2201      	movs	r2, #1
 800595c:	4921      	ldr	r1, [pc, #132]	; (80059e4 <HAL_I2C_IsDeviceReady+0x254>)
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f001 ff4e 	bl	8007800 <I2C_WaitOnFlagUntilTimeout>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d001      	beq.n	800596e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e036      	b.n	80059dc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2220      	movs	r2, #32
 8005972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800597e:	2300      	movs	r3, #0
 8005980:	e02c      	b.n	80059dc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005990:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800599a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	9300      	str	r3, [sp, #0]
 80059a0:	2319      	movs	r3, #25
 80059a2:	2201      	movs	r2, #1
 80059a4:	490f      	ldr	r1, [pc, #60]	; (80059e4 <HAL_I2C_IsDeviceReady+0x254>)
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	f001 ff2a 	bl	8007800 <I2C_WaitOnFlagUntilTimeout>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e012      	b.n	80059dc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	3301      	adds	r3, #1
 80059ba:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	f4ff af32 	bcc.w	800582a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2220      	movs	r2, #32
 80059ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e000      	b.n	80059dc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80059da:	2302      	movs	r3, #2
  }
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3720      	adds	r7, #32
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	00100002 	.word	0x00100002
 80059e8:	ffff0000 	.word	0xffff0000

080059ec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b088      	sub	sp, #32
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a04:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a0c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a14:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005a16:	7bfb      	ldrb	r3, [r7, #15]
 8005a18:	2b10      	cmp	r3, #16
 8005a1a:	d003      	beq.n	8005a24 <HAL_I2C_EV_IRQHandler+0x38>
 8005a1c:	7bfb      	ldrb	r3, [r7, #15]
 8005a1e:	2b40      	cmp	r3, #64	; 0x40
 8005a20:	f040 80c1 	bne.w	8005ba6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10d      	bne.n	8005a5a <HAL_I2C_EV_IRQHandler+0x6e>
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005a44:	d003      	beq.n	8005a4e <HAL_I2C_EV_IRQHandler+0x62>
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005a4c:	d101      	bne.n	8005a52 <HAL_I2C_EV_IRQHandler+0x66>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e000      	b.n	8005a54 <HAL_I2C_EV_IRQHandler+0x68>
 8005a52:	2300      	movs	r3, #0
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	f000 8132 	beq.w	8005cbe <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	f003 0301 	and.w	r3, r3, #1
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00c      	beq.n	8005a7e <HAL_I2C_EV_IRQHandler+0x92>
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	0a5b      	lsrs	r3, r3, #9
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d006      	beq.n	8005a7e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f002 f8d4 	bl	8007c1e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fd6f 	bl	800655a <I2C_Master_SB>
 8005a7c:	e092      	b.n	8005ba4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	08db      	lsrs	r3, r3, #3
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d009      	beq.n	8005a9e <HAL_I2C_EV_IRQHandler+0xb2>
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	0a5b      	lsrs	r3, r3, #9
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d003      	beq.n	8005a9e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fde5 	bl	8006666 <I2C_Master_ADD10>
 8005a9c:	e082      	b.n	8005ba4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	085b      	lsrs	r3, r3, #1
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d009      	beq.n	8005abe <HAL_I2C_EV_IRQHandler+0xd2>
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	0a5b      	lsrs	r3, r3, #9
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d003      	beq.n	8005abe <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 fdff 	bl	80066ba <I2C_Master_ADDR>
 8005abc:	e072      	b.n	8005ba4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	089b      	lsrs	r3, r3, #2
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d03b      	beq.n	8005b42 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ad4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ad8:	f000 80f3 	beq.w	8005cc2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	09db      	lsrs	r3, r3, #7
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00f      	beq.n	8005b08 <HAL_I2C_EV_IRQHandler+0x11c>
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	0a9b      	lsrs	r3, r3, #10
 8005aec:	f003 0301 	and.w	r3, r3, #1
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d009      	beq.n	8005b08 <HAL_I2C_EV_IRQHandler+0x11c>
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	089b      	lsrs	r3, r3, #2
 8005af8:	f003 0301 	and.w	r3, r3, #1
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d103      	bne.n	8005b08 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 f9e9 	bl	8005ed8 <I2C_MasterTransmit_TXE>
 8005b06:	e04d      	b.n	8005ba4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	089b      	lsrs	r3, r3, #2
 8005b0c:	f003 0301 	and.w	r3, r3, #1
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f000 80d6 	beq.w	8005cc2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	0a5b      	lsrs	r3, r3, #9
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f000 80cf 	beq.w	8005cc2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005b24:	7bbb      	ldrb	r3, [r7, #14]
 8005b26:	2b21      	cmp	r3, #33	; 0x21
 8005b28:	d103      	bne.n	8005b32 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 fa70 	bl	8006010 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b30:	e0c7      	b.n	8005cc2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005b32:	7bfb      	ldrb	r3, [r7, #15]
 8005b34:	2b40      	cmp	r3, #64	; 0x40
 8005b36:	f040 80c4 	bne.w	8005cc2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 fade 	bl	80060fc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b40:	e0bf      	b.n	8005cc2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b50:	f000 80b7 	beq.w	8005cc2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	099b      	lsrs	r3, r3, #6
 8005b58:	f003 0301 	and.w	r3, r3, #1
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00f      	beq.n	8005b80 <HAL_I2C_EV_IRQHandler+0x194>
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	0a9b      	lsrs	r3, r3, #10
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d009      	beq.n	8005b80 <HAL_I2C_EV_IRQHandler+0x194>
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	089b      	lsrs	r3, r3, #2
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d103      	bne.n	8005b80 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 fb53 	bl	8006224 <I2C_MasterReceive_RXNE>
 8005b7e:	e011      	b.n	8005ba4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	089b      	lsrs	r3, r3, #2
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f000 809a 	beq.w	8005cc2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	0a5b      	lsrs	r3, r3, #9
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f000 8093 	beq.w	8005cc2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 fbf2 	bl	8006386 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ba2:	e08e      	b.n	8005cc2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005ba4:	e08d      	b.n	8005cc2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d004      	beq.n	8005bb8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	61fb      	str	r3, [r7, #28]
 8005bb6:	e007      	b.n	8005bc8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	085b      	lsrs	r3, r3, #1
 8005bcc:	f003 0301 	and.w	r3, r3, #1
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d012      	beq.n	8005bfa <HAL_I2C_EV_IRQHandler+0x20e>
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	0a5b      	lsrs	r3, r3, #9
 8005bd8:	f003 0301 	and.w	r3, r3, #1
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00c      	beq.n	8005bfa <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d003      	beq.n	8005bf0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005bf0:	69b9      	ldr	r1, [r7, #24]
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 ffb0 	bl	8006b58 <I2C_Slave_ADDR>
 8005bf8:	e066      	b.n	8005cc8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	091b      	lsrs	r3, r3, #4
 8005bfe:	f003 0301 	and.w	r3, r3, #1
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d009      	beq.n	8005c1a <HAL_I2C_EV_IRQHandler+0x22e>
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	0a5b      	lsrs	r3, r3, #9
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d003      	beq.n	8005c1a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 ffea 	bl	8006bec <I2C_Slave_STOPF>
 8005c18:	e056      	b.n	8005cc8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005c1a:	7bbb      	ldrb	r3, [r7, #14]
 8005c1c:	2b21      	cmp	r3, #33	; 0x21
 8005c1e:	d002      	beq.n	8005c26 <HAL_I2C_EV_IRQHandler+0x23a>
 8005c20:	7bbb      	ldrb	r3, [r7, #14]
 8005c22:	2b29      	cmp	r3, #41	; 0x29
 8005c24:	d125      	bne.n	8005c72 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	09db      	lsrs	r3, r3, #7
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00f      	beq.n	8005c52 <HAL_I2C_EV_IRQHandler+0x266>
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	0a9b      	lsrs	r3, r3, #10
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d009      	beq.n	8005c52 <HAL_I2C_EV_IRQHandler+0x266>
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	089b      	lsrs	r3, r3, #2
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d103      	bne.n	8005c52 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 fec6 	bl	80069dc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c50:	e039      	b.n	8005cc6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	089b      	lsrs	r3, r3, #2
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d033      	beq.n	8005cc6 <HAL_I2C_EV_IRQHandler+0x2da>
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	0a5b      	lsrs	r3, r3, #9
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d02d      	beq.n	8005cc6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 fef3 	bl	8006a56 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c70:	e029      	b.n	8005cc6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	099b      	lsrs	r3, r3, #6
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00f      	beq.n	8005c9e <HAL_I2C_EV_IRQHandler+0x2b2>
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	0a9b      	lsrs	r3, r3, #10
 8005c82:	f003 0301 	and.w	r3, r3, #1
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d009      	beq.n	8005c9e <HAL_I2C_EV_IRQHandler+0x2b2>
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	089b      	lsrs	r3, r3, #2
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d103      	bne.n	8005c9e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fefe 	bl	8006a98 <I2C_SlaveReceive_RXNE>
 8005c9c:	e014      	b.n	8005cc8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	089b      	lsrs	r3, r3, #2
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00e      	beq.n	8005cc8 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	0a5b      	lsrs	r3, r3, #9
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d008      	beq.n	8005cc8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 ff2c 	bl	8006b14 <I2C_SlaveReceive_BTF>
 8005cbc:	e004      	b.n	8005cc8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005cbe:	bf00      	nop
 8005cc0:	e002      	b.n	8005cc8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005cc2:	bf00      	nop
 8005cc4:	e000      	b.n	8005cc8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005cc6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005cc8:	3720      	adds	r7, #32
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b08a      	sub	sp, #40	; 0x28
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cf0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005cf2:	6a3b      	ldr	r3, [r7, #32]
 8005cf4:	0a1b      	lsrs	r3, r3, #8
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00e      	beq.n	8005d1c <HAL_I2C_ER_IRQHandler+0x4e>
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	0a1b      	lsrs	r3, r3, #8
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d008      	beq.n	8005d1c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0c:	f043 0301 	orr.w	r3, r3, #1
 8005d10:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005d1a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005d1c:	6a3b      	ldr	r3, [r7, #32]
 8005d1e:	0a5b      	lsrs	r3, r3, #9
 8005d20:	f003 0301 	and.w	r3, r3, #1
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00e      	beq.n	8005d46 <HAL_I2C_ER_IRQHandler+0x78>
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	0a1b      	lsrs	r3, r3, #8
 8005d2c:	f003 0301 	and.w	r3, r3, #1
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d008      	beq.n	8005d46 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d36:	f043 0302 	orr.w	r3, r3, #2
 8005d3a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005d44:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005d46:	6a3b      	ldr	r3, [r7, #32]
 8005d48:	0a9b      	lsrs	r3, r3, #10
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d03f      	beq.n	8005dd2 <HAL_I2C_ER_IRQHandler+0x104>
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	0a1b      	lsrs	r3, r3, #8
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d039      	beq.n	8005dd2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005d5e:	7efb      	ldrb	r3, [r7, #27]
 8005d60:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d70:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d76:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005d78:	7ebb      	ldrb	r3, [r7, #26]
 8005d7a:	2b20      	cmp	r3, #32
 8005d7c:	d112      	bne.n	8005da4 <HAL_I2C_ER_IRQHandler+0xd6>
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d10f      	bne.n	8005da4 <HAL_I2C_ER_IRQHandler+0xd6>
 8005d84:	7cfb      	ldrb	r3, [r7, #19]
 8005d86:	2b21      	cmp	r3, #33	; 0x21
 8005d88:	d008      	beq.n	8005d9c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005d8a:	7cfb      	ldrb	r3, [r7, #19]
 8005d8c:	2b29      	cmp	r3, #41	; 0x29
 8005d8e:	d005      	beq.n	8005d9c <HAL_I2C_ER_IRQHandler+0xce>
 8005d90:	7cfb      	ldrb	r3, [r7, #19]
 8005d92:	2b28      	cmp	r3, #40	; 0x28
 8005d94:	d106      	bne.n	8005da4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2b21      	cmp	r3, #33	; 0x21
 8005d9a:	d103      	bne.n	8005da4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f001 f855 	bl	8006e4c <I2C_Slave_AF>
 8005da2:	e016      	b.n	8005dd2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005dac:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db0:	f043 0304 	orr.w	r3, r3, #4
 8005db4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005db6:	7efb      	ldrb	r3, [r7, #27]
 8005db8:	2b10      	cmp	r3, #16
 8005dba:	d002      	beq.n	8005dc2 <HAL_I2C_ER_IRQHandler+0xf4>
 8005dbc:	7efb      	ldrb	r3, [r7, #27]
 8005dbe:	2b40      	cmp	r3, #64	; 0x40
 8005dc0:	d107      	bne.n	8005dd2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dd0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005dd2:	6a3b      	ldr	r3, [r7, #32]
 8005dd4:	0adb      	lsrs	r3, r3, #11
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00e      	beq.n	8005dfc <HAL_I2C_ER_IRQHandler+0x12e>
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	0a1b      	lsrs	r3, r3, #8
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d008      	beq.n	8005dfc <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	f043 0308 	orr.w	r3, r3, #8
 8005df0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005dfa:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d008      	beq.n	8005e14 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e08:	431a      	orrs	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f001 f88c 	bl	8006f2c <I2C_ITError>
  }
}
 8005e14:	bf00      	nop
 8005e16:	3728      	adds	r7, #40	; 0x28
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	460b      	mov	r3, r1
 8005e76:	70fb      	strb	r3, [r7, #3]
 8005e78:	4613      	mov	r3, r2
 8005e7a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ee6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005eee:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d150      	bne.n	8005fa0 <I2C_MasterTransmit_TXE+0xc8>
 8005efe:	7bfb      	ldrb	r3, [r7, #15]
 8005f00:	2b21      	cmp	r3, #33	; 0x21
 8005f02:	d14d      	bne.n	8005fa0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	2b08      	cmp	r3, #8
 8005f08:	d01d      	beq.n	8005f46 <I2C_MasterTransmit_TXE+0x6e>
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	2b20      	cmp	r3, #32
 8005f0e:	d01a      	beq.n	8005f46 <I2C_MasterTransmit_TXE+0x6e>
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f16:	d016      	beq.n	8005f46 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f26:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2211      	movs	r2, #17
 8005f2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2220      	movs	r2, #32
 8005f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7ff ff6c 	bl	8005e1c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005f44:	e060      	b.n	8006008 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f54:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f64:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2220      	movs	r2, #32
 8005f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	2b40      	cmp	r3, #64	; 0x40
 8005f7e:	d107      	bne.n	8005f90 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f7ff ff87 	bl	8005e9c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005f8e:	e03b      	b.n	8006008 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f7ff ff3f 	bl	8005e1c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005f9e:	e033      	b.n	8006008 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005fa0:	7bfb      	ldrb	r3, [r7, #15]
 8005fa2:	2b21      	cmp	r3, #33	; 0x21
 8005fa4:	d005      	beq.n	8005fb2 <I2C_MasterTransmit_TXE+0xda>
 8005fa6:	7bbb      	ldrb	r3, [r7, #14]
 8005fa8:	2b40      	cmp	r3, #64	; 0x40
 8005faa:	d12d      	bne.n	8006008 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005fac:	7bfb      	ldrb	r3, [r7, #15]
 8005fae:	2b22      	cmp	r3, #34	; 0x22
 8005fb0:	d12a      	bne.n	8006008 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d108      	bne.n	8005fce <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	685a      	ldr	r2, [r3, #4]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fca:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005fcc:	e01c      	b.n	8006008 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b40      	cmp	r3, #64	; 0x40
 8005fd8:	d103      	bne.n	8005fe2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 f88e 	bl	80060fc <I2C_MemoryTransmit_TXE_BTF>
}
 8005fe0:	e012      	b.n	8006008 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe6:	781a      	ldrb	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff2:	1c5a      	adds	r2, r3, #1
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	3b01      	subs	r3, #1
 8006000:	b29a      	uxth	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006006:	e7ff      	b.n	8006008 <I2C_MasterTransmit_TXE+0x130>
 8006008:	bf00      	nop
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b21      	cmp	r3, #33	; 0x21
 8006028:	d164      	bne.n	80060f4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800602e:	b29b      	uxth	r3, r3
 8006030:	2b00      	cmp	r3, #0
 8006032:	d012      	beq.n	800605a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006038:	781a      	ldrb	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006044:	1c5a      	adds	r2, r3, #1
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800604e:	b29b      	uxth	r3, r3
 8006050:	3b01      	subs	r3, #1
 8006052:	b29a      	uxth	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006058:	e04c      	b.n	80060f4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2b08      	cmp	r3, #8
 800605e:	d01d      	beq.n	800609c <I2C_MasterTransmit_BTF+0x8c>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2b20      	cmp	r3, #32
 8006064:	d01a      	beq.n	800609c <I2C_MasterTransmit_BTF+0x8c>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800606c:	d016      	beq.n	800609c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	685a      	ldr	r2, [r3, #4]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800607c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2211      	movs	r2, #17
 8006082:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2220      	movs	r2, #32
 8006090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f7ff fec1 	bl	8005e1c <HAL_I2C_MasterTxCpltCallback>
}
 800609a:	e02b      	b.n	80060f4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	685a      	ldr	r2, [r3, #4]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80060aa:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060ba:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2220      	movs	r2, #32
 80060c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b40      	cmp	r3, #64	; 0x40
 80060d4:	d107      	bne.n	80060e6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f7ff fedc 	bl	8005e9c <HAL_I2C_MemTxCpltCallback>
}
 80060e4:	e006      	b.n	80060f4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f7ff fe94 	bl	8005e1c <HAL_I2C_MasterTxCpltCallback>
}
 80060f4:	bf00      	nop
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800610a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006110:	2b00      	cmp	r3, #0
 8006112:	d11d      	bne.n	8006150 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006118:	2b01      	cmp	r3, #1
 800611a:	d10b      	bne.n	8006134 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006120:	b2da      	uxtb	r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800612c:	1c9a      	adds	r2, r3, #2
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006132:	e073      	b.n	800621c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006138:	b29b      	uxth	r3, r3
 800613a:	121b      	asrs	r3, r3, #8
 800613c:	b2da      	uxtb	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006148:	1c5a      	adds	r2, r3, #1
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800614e:	e065      	b.n	800621c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006154:	2b01      	cmp	r3, #1
 8006156:	d10b      	bne.n	8006170 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800615c:	b2da      	uxtb	r2, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006168:	1c5a      	adds	r2, r3, #1
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800616e:	e055      	b.n	800621c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006174:	2b02      	cmp	r3, #2
 8006176:	d151      	bne.n	800621c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006178:	7bfb      	ldrb	r3, [r7, #15]
 800617a:	2b22      	cmp	r3, #34	; 0x22
 800617c:	d10d      	bne.n	800619a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800618c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006192:	1c5a      	adds	r2, r3, #1
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006198:	e040      	b.n	800621c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800619e:	b29b      	uxth	r3, r3
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d015      	beq.n	80061d0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80061a4:	7bfb      	ldrb	r3, [r7, #15]
 80061a6:	2b21      	cmp	r3, #33	; 0x21
 80061a8:	d112      	bne.n	80061d0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ae:	781a      	ldrb	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ba:	1c5a      	adds	r2, r3, #1
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	3b01      	subs	r3, #1
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80061ce:	e025      	b.n	800621c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d120      	bne.n	800621c <I2C_MemoryTransmit_TXE_BTF+0x120>
 80061da:	7bfb      	ldrb	r3, [r7, #15]
 80061dc:	2b21      	cmp	r3, #33	; 0x21
 80061de:	d11d      	bne.n	800621c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	685a      	ldr	r2, [r3, #4]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80061ee:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061fe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2220      	movs	r2, #32
 800620a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f7ff fe40 	bl	8005e9c <HAL_I2C_MemTxCpltCallback>
}
 800621c:	bf00      	nop
 800621e:	3710      	adds	r7, #16
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006232:	b2db      	uxtb	r3, r3
 8006234:	2b22      	cmp	r3, #34	; 0x22
 8006236:	f040 80a2 	bne.w	800637e <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800623e:	b29b      	uxth	r3, r3
 8006240:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2b03      	cmp	r3, #3
 8006246:	d921      	bls.n	800628c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	691a      	ldr	r2, [r3, #16]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006252:	b2d2      	uxtb	r2, r2
 8006254:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625a:	1c5a      	adds	r2, r3, #1
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006264:	b29b      	uxth	r3, r3
 8006266:	3b01      	subs	r3, #1
 8006268:	b29a      	uxth	r2, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006272:	b29b      	uxth	r3, r3
 8006274:	2b03      	cmp	r3, #3
 8006276:	f040 8082 	bne.w	800637e <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	685a      	ldr	r2, [r3, #4]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006288:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800628a:	e078      	b.n	800637e <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006290:	2b02      	cmp	r3, #2
 8006292:	d074      	beq.n	800637e <I2C_MasterReceive_RXNE+0x15a>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d002      	beq.n	80062a0 <I2C_MasterReceive_RXNE+0x7c>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d16e      	bne.n	800637e <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f001 fc05 	bl	8007ab0 <I2C_WaitOnSTOPRequestThroughIT>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d142      	bne.n	8006332 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062ba:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685a      	ldr	r2, [r3, #4]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80062ca:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	691a      	ldr	r2, [r3, #16]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d6:	b2d2      	uxtb	r2, r2
 80062d8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062de:	1c5a      	adds	r2, r3, #1
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	3b01      	subs	r3, #1
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2220      	movs	r2, #32
 80062f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b40      	cmp	r3, #64	; 0x40
 8006304:	d10a      	bne.n	800631c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f7fc ffb3 	bl	8003280 <HAL_I2C_MemRxCpltCallback>
}
 800631a:	e030      	b.n	800637e <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2212      	movs	r2, #18
 8006328:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f7ff fd80 	bl	8005e30 <HAL_I2C_MasterRxCpltCallback>
}
 8006330:	e025      	b.n	800637e <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	685a      	ldr	r2, [r3, #4]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006340:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	691a      	ldr	r2, [r3, #16]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634c:	b2d2      	uxtb	r2, r2
 800634e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006354:	1c5a      	adds	r2, r3, #1
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800635e:	b29b      	uxth	r3, r3
 8006360:	3b01      	subs	r3, #1
 8006362:	b29a      	uxth	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2220      	movs	r2, #32
 800636c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f7ff fd99 	bl	8005eb0 <HAL_I2C_ErrorCallback>
}
 800637e:	bf00      	nop
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b084      	sub	sp, #16
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006392:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006398:	b29b      	uxth	r3, r3
 800639a:	2b04      	cmp	r3, #4
 800639c:	d11b      	bne.n	80063d6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063ac:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	691a      	ldr	r2, [r3, #16]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b8:	b2d2      	uxtb	r2, r2
 80063ba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c0:	1c5a      	adds	r2, r3, #1
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	3b01      	subs	r3, #1
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80063d4:	e0bd      	b.n	8006552 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063da:	b29b      	uxth	r3, r3
 80063dc:	2b03      	cmp	r3, #3
 80063de:	d129      	bne.n	8006434 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063ee:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2b04      	cmp	r3, #4
 80063f4:	d00a      	beq.n	800640c <I2C_MasterReceive_BTF+0x86>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d007      	beq.n	800640c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800640a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	691a      	ldr	r2, [r3, #16]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006416:	b2d2      	uxtb	r2, r2
 8006418:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641e:	1c5a      	adds	r2, r3, #1
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006428:	b29b      	uxth	r3, r3
 800642a:	3b01      	subs	r3, #1
 800642c:	b29a      	uxth	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006432:	e08e      	b.n	8006552 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006438:	b29b      	uxth	r3, r3
 800643a:	2b02      	cmp	r3, #2
 800643c:	d176      	bne.n	800652c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d002      	beq.n	800644a <I2C_MasterReceive_BTF+0xc4>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2b10      	cmp	r3, #16
 8006448:	d108      	bne.n	800645c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006458:	601a      	str	r2, [r3, #0]
 800645a:	e019      	b.n	8006490 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2b04      	cmp	r3, #4
 8006460:	d002      	beq.n	8006468 <I2C_MasterReceive_BTF+0xe2>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2b02      	cmp	r3, #2
 8006466:	d108      	bne.n	800647a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006476:	601a      	str	r2, [r3, #0]
 8006478:	e00a      	b.n	8006490 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2b10      	cmp	r3, #16
 800647e:	d007      	beq.n	8006490 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800648e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	691a      	ldr	r2, [r3, #16]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649a:	b2d2      	uxtb	r2, r2
 800649c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a2:	1c5a      	adds	r2, r3, #1
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	3b01      	subs	r3, #1
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	691a      	ldr	r2, [r3, #16]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c0:	b2d2      	uxtb	r2, r2
 80064c2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c8:	1c5a      	adds	r2, r3, #1
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	3b01      	subs	r3, #1
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	685a      	ldr	r2, [r3, #4]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80064ea:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2220      	movs	r2, #32
 80064f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	2b40      	cmp	r3, #64	; 0x40
 80064fe:	d10a      	bne.n	8006516 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f7fc feb6 	bl	8003280 <HAL_I2C_MemRxCpltCallback>
}
 8006514:	e01d      	b.n	8006552 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2212      	movs	r2, #18
 8006522:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f7ff fc83 	bl	8005e30 <HAL_I2C_MasterRxCpltCallback>
}
 800652a:	e012      	b.n	8006552 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	691a      	ldr	r2, [r3, #16]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006536:	b2d2      	uxtb	r2, r2
 8006538:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653e:	1c5a      	adds	r2, r3, #1
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006548:	b29b      	uxth	r3, r3
 800654a:	3b01      	subs	r3, #1
 800654c:	b29a      	uxth	r2, r3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006552:	bf00      	nop
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800655a:	b480      	push	{r7}
 800655c:	b083      	sub	sp, #12
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b40      	cmp	r3, #64	; 0x40
 800656c:	d117      	bne.n	800659e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006572:	2b00      	cmp	r3, #0
 8006574:	d109      	bne.n	800658a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800657a:	b2db      	uxtb	r3, r3
 800657c:	461a      	mov	r2, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006586:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006588:	e067      	b.n	800665a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800658e:	b2db      	uxtb	r3, r3
 8006590:	f043 0301 	orr.w	r3, r3, #1
 8006594:	b2da      	uxtb	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	611a      	str	r2, [r3, #16]
}
 800659c:	e05d      	b.n	800665a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065a6:	d133      	bne.n	8006610 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	2b21      	cmp	r3, #33	; 0x21
 80065b2:	d109      	bne.n	80065c8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	461a      	mov	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80065c4:	611a      	str	r2, [r3, #16]
 80065c6:	e008      	b.n	80065da <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	f043 0301 	orr.w	r3, r3, #1
 80065d2:	b2da      	uxtb	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d004      	beq.n	80065ec <I2C_Master_SB+0x92>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d108      	bne.n	80065fe <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d032      	beq.n	800665a <I2C_Master_SB+0x100>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d02d      	beq.n	800665a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	685a      	ldr	r2, [r3, #4]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800660c:	605a      	str	r2, [r3, #4]
}
 800660e:	e024      	b.n	800665a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10e      	bne.n	8006636 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800661c:	b29b      	uxth	r3, r3
 800661e:	11db      	asrs	r3, r3, #7
 8006620:	b2db      	uxtb	r3, r3
 8006622:	f003 0306 	and.w	r3, r3, #6
 8006626:	b2db      	uxtb	r3, r3
 8006628:	f063 030f 	orn	r3, r3, #15
 800662c:	b2da      	uxtb	r2, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	611a      	str	r2, [r3, #16]
}
 8006634:	e011      	b.n	800665a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800663a:	2b01      	cmp	r3, #1
 800663c:	d10d      	bne.n	800665a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006642:	b29b      	uxth	r3, r3
 8006644:	11db      	asrs	r3, r3, #7
 8006646:	b2db      	uxtb	r3, r3
 8006648:	f003 0306 	and.w	r3, r3, #6
 800664c:	b2db      	uxtb	r3, r3
 800664e:	f063 030e 	orn	r3, r3, #14
 8006652:	b2da      	uxtb	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	611a      	str	r2, [r3, #16]
}
 800665a:	bf00      	nop
 800665c:	370c      	adds	r7, #12
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr

08006666 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006666:	b480      	push	{r7}
 8006668:	b083      	sub	sp, #12
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006672:	b2da      	uxtb	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800667e:	2b00      	cmp	r3, #0
 8006680:	d004      	beq.n	800668c <I2C_Master_ADD10+0x26>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006688:	2b00      	cmp	r3, #0
 800668a:	d108      	bne.n	800669e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00c      	beq.n	80066ae <I2C_Master_ADD10+0x48>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800669a:	2b00      	cmp	r3, #0
 800669c:	d007      	beq.n	80066ae <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	685a      	ldr	r2, [r3, #4]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066ac:	605a      	str	r2, [r3, #4]
  }
}
 80066ae:	bf00      	nop
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80066ba:	b480      	push	{r7}
 80066bc:	b091      	sub	sp, #68	; 0x44
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	2b22      	cmp	r3, #34	; 0x22
 80066e2:	f040 8169 	bne.w	80069b8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d10f      	bne.n	800670e <I2C_Master_ADDR+0x54>
 80066ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80066f2:	2b40      	cmp	r3, #64	; 0x40
 80066f4:	d10b      	bne.n	800670e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066f6:	2300      	movs	r3, #0
 80066f8:	633b      	str	r3, [r7, #48]	; 0x30
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	695b      	ldr	r3, [r3, #20]
 8006700:	633b      	str	r3, [r7, #48]	; 0x30
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	633b      	str	r3, [r7, #48]	; 0x30
 800670a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670c:	e160      	b.n	80069d0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006712:	2b00      	cmp	r3, #0
 8006714:	d11d      	bne.n	8006752 <I2C_Master_ADDR+0x98>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800671e:	d118      	bne.n	8006752 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006720:	2300      	movs	r3, #0
 8006722:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006734:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006744:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800674a:	1c5a      	adds	r2, r3, #1
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	651a      	str	r2, [r3, #80]	; 0x50
 8006750:	e13e      	b.n	80069d0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006756:	b29b      	uxth	r3, r3
 8006758:	2b00      	cmp	r3, #0
 800675a:	d113      	bne.n	8006784 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800675c:	2300      	movs	r3, #0
 800675e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	62bb      	str	r3, [r7, #40]	; 0x28
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006770:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006780:	601a      	str	r2, [r3, #0]
 8006782:	e115      	b.n	80069b0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006788:	b29b      	uxth	r3, r3
 800678a:	2b01      	cmp	r3, #1
 800678c:	f040 808a 	bne.w	80068a4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006792:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006796:	d137      	bne.n	8006808 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067a6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067b6:	d113      	bne.n	80067e0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067c6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067c8:	2300      	movs	r3, #0
 80067ca:	627b      	str	r3, [r7, #36]	; 0x24
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	627b      	str	r3, [r7, #36]	; 0x24
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	627b      	str	r3, [r7, #36]	; 0x24
 80067dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067de:	e0e7      	b.n	80069b0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067e0:	2300      	movs	r3, #0
 80067e2:	623b      	str	r3, [r7, #32]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	695b      	ldr	r3, [r3, #20]
 80067ea:	623b      	str	r3, [r7, #32]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	623b      	str	r3, [r7, #32]
 80067f4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006804:	601a      	str	r2, [r3, #0]
 8006806:	e0d3      	b.n	80069b0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680a:	2b08      	cmp	r3, #8
 800680c:	d02e      	beq.n	800686c <I2C_Master_ADDR+0x1b2>
 800680e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006810:	2b20      	cmp	r3, #32
 8006812:	d02b      	beq.n	800686c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006816:	2b12      	cmp	r3, #18
 8006818:	d102      	bne.n	8006820 <I2C_Master_ADDR+0x166>
 800681a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681c:	2b01      	cmp	r3, #1
 800681e:	d125      	bne.n	800686c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006822:	2b04      	cmp	r3, #4
 8006824:	d00e      	beq.n	8006844 <I2C_Master_ADDR+0x18a>
 8006826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006828:	2b02      	cmp	r3, #2
 800682a:	d00b      	beq.n	8006844 <I2C_Master_ADDR+0x18a>
 800682c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800682e:	2b10      	cmp	r3, #16
 8006830:	d008      	beq.n	8006844 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006840:	601a      	str	r2, [r3, #0]
 8006842:	e007      	b.n	8006854 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006852:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006854:	2300      	movs	r3, #0
 8006856:	61fb      	str	r3, [r7, #28]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	695b      	ldr	r3, [r3, #20]
 800685e:	61fb      	str	r3, [r7, #28]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	61fb      	str	r3, [r7, #28]
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	e0a1      	b.n	80069b0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800687a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800687c:	2300      	movs	r3, #0
 800687e:	61bb      	str	r3, [r7, #24]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	61bb      	str	r3, [r7, #24]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	61bb      	str	r3, [r7, #24]
 8006890:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068a0:	601a      	str	r2, [r3, #0]
 80068a2:	e085      	b.n	80069b0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d14d      	bne.n	800694a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80068ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b0:	2b04      	cmp	r3, #4
 80068b2:	d016      	beq.n	80068e2 <I2C_Master_ADDR+0x228>
 80068b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	d013      	beq.n	80068e2 <I2C_Master_ADDR+0x228>
 80068ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068bc:	2b10      	cmp	r3, #16
 80068be:	d010      	beq.n	80068e2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068ce:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068de:	601a      	str	r2, [r3, #0]
 80068e0:	e007      	b.n	80068f2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80068f0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006900:	d117      	bne.n	8006932 <I2C_Master_ADDR+0x278>
 8006902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006904:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006908:	d00b      	beq.n	8006922 <I2C_Master_ADDR+0x268>
 800690a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690c:	2b01      	cmp	r3, #1
 800690e:	d008      	beq.n	8006922 <I2C_Master_ADDR+0x268>
 8006910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006912:	2b08      	cmp	r3, #8
 8006914:	d005      	beq.n	8006922 <I2C_Master_ADDR+0x268>
 8006916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006918:	2b10      	cmp	r3, #16
 800691a:	d002      	beq.n	8006922 <I2C_Master_ADDR+0x268>
 800691c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691e:	2b20      	cmp	r3, #32
 8006920:	d107      	bne.n	8006932 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	685a      	ldr	r2, [r3, #4]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006930:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006932:	2300      	movs	r3, #0
 8006934:	617b      	str	r3, [r7, #20]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	695b      	ldr	r3, [r3, #20]
 800693c:	617b      	str	r3, [r7, #20]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	699b      	ldr	r3, [r3, #24]
 8006944:	617b      	str	r3, [r7, #20]
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	e032      	b.n	80069b0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006958:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006964:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006968:	d117      	bne.n	800699a <I2C_Master_ADDR+0x2e0>
 800696a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006970:	d00b      	beq.n	800698a <I2C_Master_ADDR+0x2d0>
 8006972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006974:	2b01      	cmp	r3, #1
 8006976:	d008      	beq.n	800698a <I2C_Master_ADDR+0x2d0>
 8006978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697a:	2b08      	cmp	r3, #8
 800697c:	d005      	beq.n	800698a <I2C_Master_ADDR+0x2d0>
 800697e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006980:	2b10      	cmp	r3, #16
 8006982:	d002      	beq.n	800698a <I2C_Master_ADDR+0x2d0>
 8006984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006986:	2b20      	cmp	r3, #32
 8006988:	d107      	bne.n	800699a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	685a      	ldr	r2, [r3, #4]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006998:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800699a:	2300      	movs	r3, #0
 800699c:	613b      	str	r3, [r7, #16]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	695b      	ldr	r3, [r3, #20]
 80069a4:	613b      	str	r3, [r7, #16]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	613b      	str	r3, [r7, #16]
 80069ae:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80069b6:	e00b      	b.n	80069d0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069b8:	2300      	movs	r3, #0
 80069ba:	60fb      	str	r3, [r7, #12]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	60fb      	str	r3, [r7, #12]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	60fb      	str	r3, [r7, #12]
 80069cc:	68fb      	ldr	r3, [r7, #12]
}
 80069ce:	e7ff      	b.n	80069d0 <I2C_Master_ADDR+0x316>
 80069d0:	bf00      	nop
 80069d2:	3744      	adds	r7, #68	; 0x44
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069ea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d02b      	beq.n	8006a4e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fa:	781a      	ldrb	r2, [r3, #0]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a06:	1c5a      	adds	r2, r3, #1
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	3b01      	subs	r3, #1
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d114      	bne.n	8006a4e <I2C_SlaveTransmit_TXE+0x72>
 8006a24:	7bfb      	ldrb	r3, [r7, #15]
 8006a26:	2b29      	cmp	r3, #41	; 0x29
 8006a28:	d111      	bne.n	8006a4e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	685a      	ldr	r2, [r3, #4]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a38:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2221      	movs	r2, #33	; 0x21
 8006a3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2228      	movs	r2, #40	; 0x28
 8006a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f7ff f9fb 	bl	8005e44 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006a4e:	bf00      	nop
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b083      	sub	sp, #12
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d011      	beq.n	8006a8c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6c:	781a      	ldrb	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a78:	1c5a      	adds	r2, r3, #1
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	3b01      	subs	r3, #1
 8006a86:	b29a      	uxth	r2, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006a8c:	bf00      	nop
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aa6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d02c      	beq.n	8006b0c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	691a      	ldr	r2, [r3, #16]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abc:	b2d2      	uxtb	r2, r2
 8006abe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac4:	1c5a      	adds	r2, r3, #1
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	3b01      	subs	r3, #1
 8006ad2:	b29a      	uxth	r2, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d114      	bne.n	8006b0c <I2C_SlaveReceive_RXNE+0x74>
 8006ae2:	7bfb      	ldrb	r3, [r7, #15]
 8006ae4:	2b2a      	cmp	r3, #42	; 0x2a
 8006ae6:	d111      	bne.n	8006b0c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	685a      	ldr	r2, [r3, #4]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006af6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2222      	movs	r2, #34	; 0x22
 8006afc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2228      	movs	r2, #40	; 0x28
 8006b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7ff f9a6 	bl	8005e58 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006b0c:	bf00      	nop
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d012      	beq.n	8006b4c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	691a      	ldr	r2, [r3, #16]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b30:	b2d2      	uxtb	r2, r2
 8006b32:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b38:	1c5a      	adds	r2, r3, #1
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	3b01      	subs	r3, #1
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006b62:	2300      	movs	r3, #0
 8006b64:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006b72:	2b28      	cmp	r3, #40	; 0x28
 8006b74:	d127      	bne.n	8006bc6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	685a      	ldr	r2, [r3, #4]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b84:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	089b      	lsrs	r3, r3, #2
 8006b8a:	f003 0301 	and.w	r3, r3, #1
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006b92:	2301      	movs	r3, #1
 8006b94:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	09db      	lsrs	r3, r3, #7
 8006b9a:	f003 0301 	and.w	r3, r3, #1
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d103      	bne.n	8006baa <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	81bb      	strh	r3, [r7, #12]
 8006ba8:	e002      	b.n	8006bb0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	699b      	ldr	r3, [r3, #24]
 8006bae:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006bb8:	89ba      	ldrh	r2, [r7, #12]
 8006bba:	7bfb      	ldrb	r3, [r7, #15]
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f7ff f954 	bl	8005e6c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006bc4:	e00e      	b.n	8006be4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	60bb      	str	r3, [r7, #8]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	695b      	ldr	r3, [r3, #20]
 8006bd0:	60bb      	str	r3, [r7, #8]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	699b      	ldr	r3, [r3, #24]
 8006bd8:	60bb      	str	r3, [r7, #8]
 8006bda:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006be4:	bf00      	nop
 8006be6:	3710      	adds	r7, #16
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bfa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	685a      	ldr	r2, [r3, #4]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c0a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	60bb      	str	r3, [r7, #8]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	695b      	ldr	r3, [r3, #20]
 8006c16:	60bb      	str	r3, [r7, #8]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f042 0201 	orr.w	r2, r2, #1
 8006c26:	601a      	str	r2, [r3, #0]
 8006c28:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c38:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c48:	d172      	bne.n	8006d30 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006c4a:	7bfb      	ldrb	r3, [r7, #15]
 8006c4c:	2b22      	cmp	r3, #34	; 0x22
 8006c4e:	d002      	beq.n	8006c56 <I2C_Slave_STOPF+0x6a>
 8006c50:	7bfb      	ldrb	r3, [r7, #15]
 8006c52:	2b2a      	cmp	r3, #42	; 0x2a
 8006c54:	d135      	bne.n	8006cc2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	b29a      	uxth	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d005      	beq.n	8006c7a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c72:	f043 0204 	orr.w	r2, r3, #4
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	685a      	ldr	r2, [r3, #4]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c88:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7fd fcd6 	bl	8004640 <HAL_DMA_GetState>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d049      	beq.n	8006d2e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9e:	4a69      	ldr	r2, [pc, #420]	; (8006e44 <I2C_Slave_STOPF+0x258>)
 8006ca0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7fd fb1e 	bl	80042e8 <HAL_DMA_Abort_IT>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d03d      	beq.n	8006d2e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006cbc:	4610      	mov	r0, r2
 8006cbe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006cc0:	e035      	b.n	8006d2e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d005      	beq.n	8006ce6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cde:	f043 0204 	orr.w	r2, r3, #4
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	685a      	ldr	r2, [r3, #4]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cf4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7fd fca0 	bl	8004640 <HAL_DMA_GetState>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d014      	beq.n	8006d30 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d0a:	4a4e      	ldr	r2, [pc, #312]	; (8006e44 <I2C_Slave_STOPF+0x258>)
 8006d0c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7fd fae8 	bl	80042e8 <HAL_DMA_Abort_IT>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d008      	beq.n	8006d30 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006d28:	4610      	mov	r0, r2
 8006d2a:	4798      	blx	r3
 8006d2c:	e000      	b.n	8006d30 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006d2e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d03e      	beq.n	8006db8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	695b      	ldr	r3, [r3, #20]
 8006d40:	f003 0304 	and.w	r3, r3, #4
 8006d44:	2b04      	cmp	r3, #4
 8006d46:	d112      	bne.n	8006d6e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	691a      	ldr	r2, [r3, #16]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d52:	b2d2      	uxtb	r2, r2
 8006d54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5a:	1c5a      	adds	r2, r3, #1
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	3b01      	subs	r3, #1
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	695b      	ldr	r3, [r3, #20]
 8006d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d78:	2b40      	cmp	r3, #64	; 0x40
 8006d7a:	d112      	bne.n	8006da2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	691a      	ldr	r2, [r3, #16]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d86:	b2d2      	uxtb	r2, r2
 8006d88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8e:	1c5a      	adds	r2, r3, #1
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	b29a      	uxth	r2, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d005      	beq.n	8006db8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db0:	f043 0204 	orr.w	r2, r3, #4
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d003      	beq.n	8006dc8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 f8b3 	bl	8006f2c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006dc6:	e039      	b.n	8006e3c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006dc8:	7bfb      	ldrb	r3, [r7, #15]
 8006dca:	2b2a      	cmp	r3, #42	; 0x2a
 8006dcc:	d109      	bne.n	8006de2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2228      	movs	r2, #40	; 0x28
 8006dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f7ff f83b 	bl	8005e58 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	2b28      	cmp	r3, #40	; 0x28
 8006dec:	d111      	bne.n	8006e12 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a15      	ldr	r2, [pc, #84]	; (8006e48 <I2C_Slave_STOPF+0x25c>)
 8006df2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2220      	movs	r2, #32
 8006dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7ff f83c 	bl	8005e88 <HAL_I2C_ListenCpltCallback>
}
 8006e10:	e014      	b.n	8006e3c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e16:	2b22      	cmp	r3, #34	; 0x22
 8006e18:	d002      	beq.n	8006e20 <I2C_Slave_STOPF+0x234>
 8006e1a:	7bfb      	ldrb	r3, [r7, #15]
 8006e1c:	2b22      	cmp	r3, #34	; 0x22
 8006e1e:	d10d      	bne.n	8006e3c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2220      	movs	r2, #32
 8006e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f7ff f80e 	bl	8005e58 <HAL_I2C_SlaveRxCpltCallback>
}
 8006e3c:	bf00      	nop
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	080076b1 	.word	0x080076b1
 8006e48:	ffff0000 	.word	0xffff0000

08006e4c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e5a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e60:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	2b08      	cmp	r3, #8
 8006e66:	d002      	beq.n	8006e6e <I2C_Slave_AF+0x22>
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	2b20      	cmp	r3, #32
 8006e6c:	d129      	bne.n	8006ec2 <I2C_Slave_AF+0x76>
 8006e6e:	7bfb      	ldrb	r3, [r7, #15]
 8006e70:	2b28      	cmp	r3, #40	; 0x28
 8006e72:	d126      	bne.n	8006ec2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a2c      	ldr	r2, [pc, #176]	; (8006f28 <I2C_Slave_AF+0xdc>)
 8006e78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	685a      	ldr	r2, [r3, #4]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e88:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e92:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ea2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2220      	movs	r2, #32
 8006eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f7fe ffe4 	bl	8005e88 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006ec0:	e02e      	b.n	8006f20 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006ec2:	7bfb      	ldrb	r3, [r7, #15]
 8006ec4:	2b21      	cmp	r3, #33	; 0x21
 8006ec6:	d126      	bne.n	8006f16 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a17      	ldr	r2, [pc, #92]	; (8006f28 <I2C_Slave_AF+0xdc>)
 8006ecc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2221      	movs	r2, #33	; 0x21
 8006ed2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2220      	movs	r2, #32
 8006ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	685a      	ldr	r2, [r3, #4]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ef2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006efc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f0c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f7fe ff98 	bl	8005e44 <HAL_I2C_SlaveTxCpltCallback>
}
 8006f14:	e004      	b.n	8006f20 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f1e:	615a      	str	r2, [r3, #20]
}
 8006f20:	bf00      	nop
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	ffff0000 	.word	0xffff0000

08006f2c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f3a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f42:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006f44:	7bbb      	ldrb	r3, [r7, #14]
 8006f46:	2b10      	cmp	r3, #16
 8006f48:	d002      	beq.n	8006f50 <I2C_ITError+0x24>
 8006f4a:	7bbb      	ldrb	r3, [r7, #14]
 8006f4c:	2b40      	cmp	r3, #64	; 0x40
 8006f4e:	d10a      	bne.n	8006f66 <I2C_ITError+0x3a>
 8006f50:	7bfb      	ldrb	r3, [r7, #15]
 8006f52:	2b22      	cmp	r3, #34	; 0x22
 8006f54:	d107      	bne.n	8006f66 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f64:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f66:	7bfb      	ldrb	r3, [r7, #15]
 8006f68:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006f6c:	2b28      	cmp	r3, #40	; 0x28
 8006f6e:	d107      	bne.n	8006f80 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2228      	movs	r2, #40	; 0x28
 8006f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006f7e:	e015      	b.n	8006fac <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f8e:	d00a      	beq.n	8006fa6 <I2C_ITError+0x7a>
 8006f90:	7bfb      	ldrb	r3, [r7, #15]
 8006f92:	2b60      	cmp	r3, #96	; 0x60
 8006f94:	d007      	beq.n	8006fa6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2220      	movs	r2, #32
 8006f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fba:	d162      	bne.n	8007082 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	685a      	ldr	r2, [r3, #4]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006fca:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d020      	beq.n	800701c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fde:	4a6a      	ldr	r2, [pc, #424]	; (8007188 <I2C_ITError+0x25c>)
 8006fe0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7fd f97e 	bl	80042e8 <HAL_DMA_Abort_IT>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	f000 8089 	beq.w	8007106 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f022 0201 	bic.w	r2, r2, #1
 8007002:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2220      	movs	r2, #32
 8007008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007016:	4610      	mov	r0, r2
 8007018:	4798      	blx	r3
 800701a:	e074      	b.n	8007106 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007020:	4a59      	ldr	r2, [pc, #356]	; (8007188 <I2C_ITError+0x25c>)
 8007022:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007028:	4618      	mov	r0, r3
 800702a:	f7fd f95d 	bl	80042e8 <HAL_DMA_Abort_IT>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d068      	beq.n	8007106 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800703e:	2b40      	cmp	r3, #64	; 0x40
 8007040:	d10b      	bne.n	800705a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	691a      	ldr	r2, [r3, #16]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704c:	b2d2      	uxtb	r2, r2
 800704e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007054:	1c5a      	adds	r2, r3, #1
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f022 0201 	bic.w	r2, r2, #1
 8007068:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2220      	movs	r2, #32
 800706e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800707c:	4610      	mov	r0, r2
 800707e:	4798      	blx	r3
 8007080:	e041      	b.n	8007106 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007088:	b2db      	uxtb	r3, r3
 800708a:	2b60      	cmp	r3, #96	; 0x60
 800708c:	d125      	bne.n	80070da <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2220      	movs	r2, #32
 8007092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a6:	2b40      	cmp	r3, #64	; 0x40
 80070a8:	d10b      	bne.n	80070c2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	691a      	ldr	r2, [r3, #16]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b4:	b2d2      	uxtb	r2, r2
 80070b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070bc:	1c5a      	adds	r2, r3, #1
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f022 0201 	bic.w	r2, r2, #1
 80070d0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f7fe fef6 	bl	8005ec4 <HAL_I2C_AbortCpltCallback>
 80070d8:	e015      	b.n	8007106 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	695b      	ldr	r3, [r3, #20]
 80070e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070e4:	2b40      	cmp	r3, #64	; 0x40
 80070e6:	d10b      	bne.n	8007100 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	691a      	ldr	r2, [r3, #16]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f2:	b2d2      	uxtb	r2, r2
 80070f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fa:	1c5a      	adds	r2, r3, #1
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f7fe fed5 	bl	8005eb0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	f003 0301 	and.w	r3, r3, #1
 8007112:	2b00      	cmp	r3, #0
 8007114:	d10e      	bne.n	8007134 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800711c:	2b00      	cmp	r3, #0
 800711e:	d109      	bne.n	8007134 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007126:	2b00      	cmp	r3, #0
 8007128:	d104      	bne.n	8007134 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007130:	2b00      	cmp	r3, #0
 8007132:	d007      	beq.n	8007144 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	685a      	ldr	r2, [r3, #4]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007142:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800714a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007150:	f003 0304 	and.w	r3, r3, #4
 8007154:	2b04      	cmp	r3, #4
 8007156:	d113      	bne.n	8007180 <I2C_ITError+0x254>
 8007158:	7bfb      	ldrb	r3, [r7, #15]
 800715a:	2b28      	cmp	r3, #40	; 0x28
 800715c:	d110      	bne.n	8007180 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a0a      	ldr	r2, [pc, #40]	; (800718c <I2C_ITError+0x260>)
 8007162:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2220      	movs	r2, #32
 800716e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f7fe fe84 	bl	8005e88 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007180:	bf00      	nop
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	080076b1 	.word	0x080076b1
 800718c:	ffff0000 	.word	0xffff0000

08007190 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b088      	sub	sp, #32
 8007194:	af02      	add	r7, sp, #8
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	4608      	mov	r0, r1
 800719a:	4611      	mov	r1, r2
 800719c:	461a      	mov	r2, r3
 800719e:	4603      	mov	r3, r0
 80071a0:	817b      	strh	r3, [r7, #10]
 80071a2:	460b      	mov	r3, r1
 80071a4:	813b      	strh	r3, [r7, #8]
 80071a6:	4613      	mov	r3, r2
 80071a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071bc:	9300      	str	r3, [sp, #0]
 80071be:	6a3b      	ldr	r3, [r7, #32]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80071c6:	68f8      	ldr	r0, [r7, #12]
 80071c8:	f000 fb1a 	bl	8007800 <I2C_WaitOnFlagUntilTimeout>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00d      	beq.n	80071ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071e0:	d103      	bne.n	80071ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80071ea:	2303      	movs	r3, #3
 80071ec:	e05f      	b.n	80072ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80071ee:	897b      	ldrh	r3, [r7, #10]
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	461a      	mov	r2, r3
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80071fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80071fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007200:	6a3a      	ldr	r2, [r7, #32]
 8007202:	492d      	ldr	r1, [pc, #180]	; (80072b8 <I2C_RequestMemoryWrite+0x128>)
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f000 fb52 	bl	80078ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d001      	beq.n	8007214 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	e04c      	b.n	80072ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007214:	2300      	movs	r3, #0
 8007216:	617b      	str	r3, [r7, #20]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	695b      	ldr	r3, [r3, #20]
 800721e:	617b      	str	r3, [r7, #20]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	617b      	str	r3, [r7, #20]
 8007228:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800722a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800722c:	6a39      	ldr	r1, [r7, #32]
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f000 fbbc 	bl	80079ac <I2C_WaitOnTXEFlagUntilTimeout>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00d      	beq.n	8007256 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723e:	2b04      	cmp	r3, #4
 8007240:	d107      	bne.n	8007252 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007250:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e02b      	b.n	80072ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007256:	88fb      	ldrh	r3, [r7, #6]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d105      	bne.n	8007268 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800725c:	893b      	ldrh	r3, [r7, #8]
 800725e:	b2da      	uxtb	r2, r3
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	611a      	str	r2, [r3, #16]
 8007266:	e021      	b.n	80072ac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007268:	893b      	ldrh	r3, [r7, #8]
 800726a:	0a1b      	lsrs	r3, r3, #8
 800726c:	b29b      	uxth	r3, r3
 800726e:	b2da      	uxtb	r2, r3
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007278:	6a39      	ldr	r1, [r7, #32]
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f000 fb96 	bl	80079ac <I2C_WaitOnTXEFlagUntilTimeout>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00d      	beq.n	80072a2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728a:	2b04      	cmp	r3, #4
 800728c:	d107      	bne.n	800729e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800729c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e005      	b.n	80072ae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80072a2:	893b      	ldrh	r3, [r7, #8]
 80072a4:	b2da      	uxtb	r2, r3
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3718      	adds	r7, #24
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	00010002 	.word	0x00010002

080072bc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b088      	sub	sp, #32
 80072c0:	af02      	add	r7, sp, #8
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	4608      	mov	r0, r1
 80072c6:	4611      	mov	r1, r2
 80072c8:	461a      	mov	r2, r3
 80072ca:	4603      	mov	r3, r0
 80072cc:	817b      	strh	r3, [r7, #10]
 80072ce:	460b      	mov	r3, r1
 80072d0:	813b      	strh	r3, [r7, #8]
 80072d2:	4613      	mov	r3, r2
 80072d4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80072e4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80072f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f8:	9300      	str	r3, [sp, #0]
 80072fa:	6a3b      	ldr	r3, [r7, #32]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f000 fa7c 	bl	8007800 <I2C_WaitOnFlagUntilTimeout>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00d      	beq.n	800732a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800731c:	d103      	bne.n	8007326 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007324:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007326:	2303      	movs	r3, #3
 8007328:	e0aa      	b.n	8007480 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800732a:	897b      	ldrh	r3, [r7, #10]
 800732c:	b2db      	uxtb	r3, r3
 800732e:	461a      	mov	r2, r3
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007338:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800733a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733c:	6a3a      	ldr	r2, [r7, #32]
 800733e:	4952      	ldr	r1, [pc, #328]	; (8007488 <I2C_RequestMemoryRead+0x1cc>)
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f000 fab4 	bl	80078ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d001      	beq.n	8007350 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	e097      	b.n	8007480 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007350:	2300      	movs	r3, #0
 8007352:	617b      	str	r3, [r7, #20]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	695b      	ldr	r3, [r3, #20]
 800735a:	617b      	str	r3, [r7, #20]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	699b      	ldr	r3, [r3, #24]
 8007362:	617b      	str	r3, [r7, #20]
 8007364:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007368:	6a39      	ldr	r1, [r7, #32]
 800736a:	68f8      	ldr	r0, [r7, #12]
 800736c:	f000 fb1e 	bl	80079ac <I2C_WaitOnTXEFlagUntilTimeout>
 8007370:	4603      	mov	r3, r0
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00d      	beq.n	8007392 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737a:	2b04      	cmp	r3, #4
 800737c:	d107      	bne.n	800738e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800738c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	e076      	b.n	8007480 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007392:	88fb      	ldrh	r3, [r7, #6]
 8007394:	2b01      	cmp	r3, #1
 8007396:	d105      	bne.n	80073a4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007398:	893b      	ldrh	r3, [r7, #8]
 800739a:	b2da      	uxtb	r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	611a      	str	r2, [r3, #16]
 80073a2:	e021      	b.n	80073e8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80073a4:	893b      	ldrh	r3, [r7, #8]
 80073a6:	0a1b      	lsrs	r3, r3, #8
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	b2da      	uxtb	r2, r3
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073b4:	6a39      	ldr	r1, [r7, #32]
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f000 faf8 	bl	80079ac <I2C_WaitOnTXEFlagUntilTimeout>
 80073bc:	4603      	mov	r3, r0
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00d      	beq.n	80073de <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c6:	2b04      	cmp	r3, #4
 80073c8:	d107      	bne.n	80073da <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	e050      	b.n	8007480 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80073de:	893b      	ldrh	r3, [r7, #8]
 80073e0:	b2da      	uxtb	r2, r3
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073ea:	6a39      	ldr	r1, [r7, #32]
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f000 fadd 	bl	80079ac <I2C_WaitOnTXEFlagUntilTimeout>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00d      	beq.n	8007414 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fc:	2b04      	cmp	r3, #4
 80073fe:	d107      	bne.n	8007410 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800740e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	e035      	b.n	8007480 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007422:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	6a3b      	ldr	r3, [r7, #32]
 800742a:	2200      	movs	r2, #0
 800742c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	f000 f9e5 	bl	8007800 <I2C_WaitOnFlagUntilTimeout>
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00d      	beq.n	8007458 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800744a:	d103      	bne.n	8007454 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007452:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007454:	2303      	movs	r3, #3
 8007456:	e013      	b.n	8007480 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007458:	897b      	ldrh	r3, [r7, #10]
 800745a:	b2db      	uxtb	r3, r3
 800745c:	f043 0301 	orr.w	r3, r3, #1
 8007460:	b2da      	uxtb	r2, r3
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746a:	6a3a      	ldr	r2, [r7, #32]
 800746c:	4906      	ldr	r1, [pc, #24]	; (8007488 <I2C_RequestMemoryRead+0x1cc>)
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f000 fa1d 	bl	80078ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d001      	beq.n	800747e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e000      	b.n	8007480 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3718      	adds	r7, #24
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	00010002 	.word	0x00010002

0800748c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b086      	sub	sp, #24
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007498:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074a0:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074a8:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ae:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	685a      	ldr	r2, [r3, #4]
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80074be:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d003      	beq.n	80074d0 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074cc:	2200      	movs	r2, #0
 80074ce:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d003      	beq.n	80074e0 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074dc:	2200      	movs	r2, #0
 80074de:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80074e0:	7cfb      	ldrb	r3, [r7, #19]
 80074e2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80074e6:	2b21      	cmp	r3, #33	; 0x21
 80074e8:	d007      	beq.n	80074fa <I2C_DMAXferCplt+0x6e>
 80074ea:	7cfb      	ldrb	r3, [r7, #19]
 80074ec:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80074f0:	2b22      	cmp	r3, #34	; 0x22
 80074f2:	d131      	bne.n	8007558 <I2C_DMAXferCplt+0xcc>
 80074f4:	7cbb      	ldrb	r3, [r7, #18]
 80074f6:	2b20      	cmp	r3, #32
 80074f8:	d12e      	bne.n	8007558 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	685a      	ldr	r2, [r3, #4]
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007508:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	2200      	movs	r2, #0
 800750e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007510:	7cfb      	ldrb	r3, [r7, #19]
 8007512:	2b29      	cmp	r3, #41	; 0x29
 8007514:	d10a      	bne.n	800752c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	2221      	movs	r2, #33	; 0x21
 800751a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	2228      	movs	r2, #40	; 0x28
 8007520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007524:	6978      	ldr	r0, [r7, #20]
 8007526:	f7fe fc8d 	bl	8005e44 <HAL_I2C_SlaveTxCpltCallback>
 800752a:	e00c      	b.n	8007546 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800752c:	7cfb      	ldrb	r3, [r7, #19]
 800752e:	2b2a      	cmp	r3, #42	; 0x2a
 8007530:	d109      	bne.n	8007546 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	2222      	movs	r2, #34	; 0x22
 8007536:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	2228      	movs	r2, #40	; 0x28
 800753c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007540:	6978      	ldr	r0, [r7, #20]
 8007542:	f7fe fc89 	bl	8005e58 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	685a      	ldr	r2, [r3, #4]
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8007554:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007556:	e06a      	b.n	800762e <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800755e:	b2db      	uxtb	r3, r3
 8007560:	2b00      	cmp	r3, #0
 8007562:	d064      	beq.n	800762e <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007568:	b29b      	uxth	r3, r3
 800756a:	2b01      	cmp	r3, #1
 800756c:	d107      	bne.n	800757e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800757c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	685a      	ldr	r2, [r3, #4]
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800758c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007594:	d009      	beq.n	80075aa <I2C_DMAXferCplt+0x11e>
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2b08      	cmp	r3, #8
 800759a:	d006      	beq.n	80075aa <I2C_DMAXferCplt+0x11e>
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80075a2:	d002      	beq.n	80075aa <I2C_DMAXferCplt+0x11e>
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2b20      	cmp	r3, #32
 80075a8:	d107      	bne.n	80075ba <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075b8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	685a      	ldr	r2, [r3, #4]
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80075c8:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	685a      	ldr	r2, [r3, #4]
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075d8:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	2200      	movs	r2, #0
 80075de:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d003      	beq.n	80075f0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80075e8:	6978      	ldr	r0, [r7, #20]
 80075ea:	f7fe fc61 	bl	8005eb0 <HAL_I2C_ErrorCallback>
}
 80075ee:	e01e      	b.n	800762e <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	2220      	movs	r2, #32
 80075f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	2b40      	cmp	r3, #64	; 0x40
 8007602:	d10a      	bne.n	800761a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	2200      	movs	r2, #0
 8007608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	2200      	movs	r2, #0
 8007610:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8007612:	6978      	ldr	r0, [r7, #20]
 8007614:	f7fb fe34 	bl	8003280 <HAL_I2C_MemRxCpltCallback>
}
 8007618:	e009      	b.n	800762e <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	2200      	movs	r2, #0
 800761e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	2212      	movs	r2, #18
 8007626:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8007628:	6978      	ldr	r0, [r7, #20]
 800762a:	f7fe fc01 	bl	8005e30 <HAL_I2C_MasterRxCpltCallback>
}
 800762e:	bf00      	nop
 8007630:	3718      	adds	r7, #24
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b084      	sub	sp, #16
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007642:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007648:	2b00      	cmp	r3, #0
 800764a:	d003      	beq.n	8007654 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007650:	2200      	movs	r2, #0
 8007652:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007658:	2b00      	cmp	r3, #0
 800765a:	d003      	beq.n	8007664 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007660:	2200      	movs	r2, #0
 8007662:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f7fc fff9 	bl	800465c <HAL_DMA_GetError>
 800766a:	4603      	mov	r3, r0
 800766c:	2b02      	cmp	r3, #2
 800766e:	d01b      	beq.n	80076a8 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800767e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2200      	movs	r2, #0
 8007684:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2220      	movs	r2, #32
 800768a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769a:	f043 0210 	orr.w	r2, r3, #16
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f7fe fc04 	bl	8005eb0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80076a8:	bf00      	nop
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b086      	sub	sp, #24
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076b8:	2300      	movs	r3, #0
 80076ba:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076c8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80076ca:	4b4b      	ldr	r3, [pc, #300]	; (80077f8 <I2C_DMAAbort+0x148>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	08db      	lsrs	r3, r3, #3
 80076d0:	4a4a      	ldr	r2, [pc, #296]	; (80077fc <I2C_DMAAbort+0x14c>)
 80076d2:	fba2 2303 	umull	r2, r3, r2, r3
 80076d6:	0a1a      	lsrs	r2, r3, #8
 80076d8:	4613      	mov	r3, r2
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4413      	add	r3, r2
 80076de:	00da      	lsls	r2, r3, #3
 80076e0:	1ad3      	subs	r3, r2, r3
 80076e2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d106      	bne.n	80076f8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ee:	f043 0220 	orr.w	r2, r3, #32
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80076f6:	e00a      	b.n	800770e <I2C_DMAAbort+0x5e>
    }
    count--;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	3b01      	subs	r3, #1
 80076fc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800770c:	d0ea      	beq.n	80076e4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007712:	2b00      	cmp	r3, #0
 8007714:	d003      	beq.n	800771e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800771a:	2200      	movs	r2, #0
 800771c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007722:	2b00      	cmp	r3, #0
 8007724:	d003      	beq.n	800772e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800772a:	2200      	movs	r2, #0
 800772c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800773c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	2200      	movs	r2, #0
 8007742:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007748:	2b00      	cmp	r3, #0
 800774a:	d003      	beq.n	8007754 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007750:	2200      	movs	r2, #0
 8007752:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007758:	2b00      	cmp	r3, #0
 800775a:	d003      	beq.n	8007764 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007760:	2200      	movs	r2, #0
 8007762:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f022 0201 	bic.w	r2, r2, #1
 8007772:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800777a:	b2db      	uxtb	r3, r3
 800777c:	2b60      	cmp	r3, #96	; 0x60
 800777e:	d10e      	bne.n	800779e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	2220      	movs	r2, #32
 8007784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	2200      	movs	r2, #0
 800778c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	2200      	movs	r2, #0
 8007794:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007796:	6978      	ldr	r0, [r7, #20]
 8007798:	f7fe fb94 	bl	8005ec4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800779c:	e027      	b.n	80077ee <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800779e:	7cfb      	ldrb	r3, [r7, #19]
 80077a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80077a4:	2b28      	cmp	r3, #40	; 0x28
 80077a6:	d117      	bne.n	80077d8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f042 0201 	orr.w	r2, r2, #1
 80077b6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80077c6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	2200      	movs	r2, #0
 80077cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	2228      	movs	r2, #40	; 0x28
 80077d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80077d6:	e007      	b.n	80077e8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	2220      	movs	r2, #32
 80077dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80077e8:	6978      	ldr	r0, [r7, #20]
 80077ea:	f7fe fb61 	bl	8005eb0 <HAL_I2C_ErrorCallback>
}
 80077ee:	bf00      	nop
 80077f0:	3718      	adds	r7, #24
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	200000e4 	.word	0x200000e4
 80077fc:	14f8b589 	.word	0x14f8b589

08007800 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	60b9      	str	r1, [r7, #8]
 800780a:	603b      	str	r3, [r7, #0]
 800780c:	4613      	mov	r3, r2
 800780e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007810:	e025      	b.n	800785e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007818:	d021      	beq.n	800785e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800781a:	f7fc faad 	bl	8003d78 <HAL_GetTick>
 800781e:	4602      	mov	r2, r0
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	1ad3      	subs	r3, r2, r3
 8007824:	683a      	ldr	r2, [r7, #0]
 8007826:	429a      	cmp	r2, r3
 8007828:	d302      	bcc.n	8007830 <I2C_WaitOnFlagUntilTimeout+0x30>
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d116      	bne.n	800785e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2200      	movs	r2, #0
 8007834:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2220      	movs	r2, #32
 800783a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784a:	f043 0220 	orr.w	r2, r3, #32
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2200      	movs	r2, #0
 8007856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	e023      	b.n	80078a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	0c1b      	lsrs	r3, r3, #16
 8007862:	b2db      	uxtb	r3, r3
 8007864:	2b01      	cmp	r3, #1
 8007866:	d10d      	bne.n	8007884 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	695b      	ldr	r3, [r3, #20]
 800786e:	43da      	mvns	r2, r3
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	4013      	ands	r3, r2
 8007874:	b29b      	uxth	r3, r3
 8007876:	2b00      	cmp	r3, #0
 8007878:	bf0c      	ite	eq
 800787a:	2301      	moveq	r3, #1
 800787c:	2300      	movne	r3, #0
 800787e:	b2db      	uxtb	r3, r3
 8007880:	461a      	mov	r2, r3
 8007882:	e00c      	b.n	800789e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	699b      	ldr	r3, [r3, #24]
 800788a:	43da      	mvns	r2, r3
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	4013      	ands	r3, r2
 8007890:	b29b      	uxth	r3, r3
 8007892:	2b00      	cmp	r3, #0
 8007894:	bf0c      	ite	eq
 8007896:	2301      	moveq	r3, #1
 8007898:	2300      	movne	r3, #0
 800789a:	b2db      	uxtb	r3, r3
 800789c:	461a      	mov	r2, r3
 800789e:	79fb      	ldrb	r3, [r7, #7]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d0b6      	beq.n	8007812 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b084      	sub	sp, #16
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	60f8      	str	r0, [r7, #12]
 80078b6:	60b9      	str	r1, [r7, #8]
 80078b8:	607a      	str	r2, [r7, #4]
 80078ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80078bc:	e051      	b.n	8007962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	695b      	ldr	r3, [r3, #20]
 80078c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078cc:	d123      	bne.n	8007916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80078e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2200      	movs	r2, #0
 80078ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2220      	movs	r2, #32
 80078f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007902:	f043 0204 	orr.w	r2, r3, #4
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e046      	b.n	80079a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800791c:	d021      	beq.n	8007962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800791e:	f7fc fa2b 	bl	8003d78 <HAL_GetTick>
 8007922:	4602      	mov	r2, r0
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	1ad3      	subs	r3, r2, r3
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	429a      	cmp	r2, r3
 800792c:	d302      	bcc.n	8007934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d116      	bne.n	8007962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2220      	movs	r2, #32
 800793e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2200      	movs	r2, #0
 8007946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800794e:	f043 0220 	orr.w	r2, r3, #32
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	e020      	b.n	80079a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	0c1b      	lsrs	r3, r3, #16
 8007966:	b2db      	uxtb	r3, r3
 8007968:	2b01      	cmp	r3, #1
 800796a:	d10c      	bne.n	8007986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	695b      	ldr	r3, [r3, #20]
 8007972:	43da      	mvns	r2, r3
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	4013      	ands	r3, r2
 8007978:	b29b      	uxth	r3, r3
 800797a:	2b00      	cmp	r3, #0
 800797c:	bf14      	ite	ne
 800797e:	2301      	movne	r3, #1
 8007980:	2300      	moveq	r3, #0
 8007982:	b2db      	uxtb	r3, r3
 8007984:	e00b      	b.n	800799e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	699b      	ldr	r3, [r3, #24]
 800798c:	43da      	mvns	r2, r3
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	4013      	ands	r3, r2
 8007992:	b29b      	uxth	r3, r3
 8007994:	2b00      	cmp	r3, #0
 8007996:	bf14      	ite	ne
 8007998:	2301      	movne	r3, #1
 800799a:	2300      	moveq	r3, #0
 800799c:	b2db      	uxtb	r3, r3
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d18d      	bne.n	80078be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3710      	adds	r7, #16
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80079b8:	e02d      	b.n	8007a16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80079ba:	68f8      	ldr	r0, [r7, #12]
 80079bc:	f000 f900 	bl	8007bc0 <I2C_IsAcknowledgeFailed>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d001      	beq.n	80079ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	e02d      	b.n	8007a26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d0:	d021      	beq.n	8007a16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079d2:	f7fc f9d1 	bl	8003d78 <HAL_GetTick>
 80079d6:	4602      	mov	r2, r0
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	1ad3      	subs	r3, r2, r3
 80079dc:	68ba      	ldr	r2, [r7, #8]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d302      	bcc.n	80079e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d116      	bne.n	8007a16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2200      	movs	r2, #0
 80079ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2220      	movs	r2, #32
 80079f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a02:	f043 0220 	orr.w	r2, r3, #32
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e007      	b.n	8007a26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	695b      	ldr	r3, [r3, #20]
 8007a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a20:	2b80      	cmp	r3, #128	; 0x80
 8007a22:	d1ca      	bne.n	80079ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3710      	adds	r7, #16
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}

08007a2e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a2e:	b580      	push	{r7, lr}
 8007a30:	b084      	sub	sp, #16
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	60f8      	str	r0, [r7, #12]
 8007a36:	60b9      	str	r1, [r7, #8]
 8007a38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007a3a:	e02d      	b.n	8007a98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	f000 f8bf 	bl	8007bc0 <I2C_IsAcknowledgeFailed>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d001      	beq.n	8007a4c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e02d      	b.n	8007aa8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a52:	d021      	beq.n	8007a98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a54:	f7fc f990 	bl	8003d78 <HAL_GetTick>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	1ad3      	subs	r3, r2, r3
 8007a5e:	68ba      	ldr	r2, [r7, #8]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d302      	bcc.n	8007a6a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d116      	bne.n	8007a98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2220      	movs	r2, #32
 8007a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a84:	f043 0220 	orr.w	r2, r3, #32
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	e007      	b.n	8007aa8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	695b      	ldr	r3, [r3, #20]
 8007a9e:	f003 0304 	and.w	r3, r3, #4
 8007aa2:	2b04      	cmp	r3, #4
 8007aa4:	d1ca      	bne.n	8007a3c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b085      	sub	sp, #20
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007abc:	4b13      	ldr	r3, [pc, #76]	; (8007b0c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	08db      	lsrs	r3, r3, #3
 8007ac2:	4a13      	ldr	r2, [pc, #76]	; (8007b10 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ac8:	0a1a      	lsrs	r2, r3, #8
 8007aca:	4613      	mov	r3, r2
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	4413      	add	r3, r2
 8007ad0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	3b01      	subs	r3, #1
 8007ad6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d107      	bne.n	8007aee <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae2:	f043 0220 	orr.w	r2, r3, #32
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	e008      	b.n	8007b00 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007afc:	d0e9      	beq.n	8007ad2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3714      	adds	r7, #20
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr
 8007b0c:	200000e4 	.word	0x200000e4
 8007b10:	14f8b589 	.word	0x14f8b589

08007b14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007b20:	e042      	b.n	8007ba8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	695b      	ldr	r3, [r3, #20]
 8007b28:	f003 0310 	and.w	r3, r3, #16
 8007b2c:	2b10      	cmp	r3, #16
 8007b2e:	d119      	bne.n	8007b64 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f06f 0210 	mvn.w	r2, #16
 8007b38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2220      	movs	r2, #32
 8007b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	e029      	b.n	8007bb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b64:	f7fc f908 	bl	8003d78 <HAL_GetTick>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	1ad3      	subs	r3, r2, r3
 8007b6e:	68ba      	ldr	r2, [r7, #8]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d302      	bcc.n	8007b7a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d116      	bne.n	8007ba8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2220      	movs	r2, #32
 8007b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b94:	f043 0220 	orr.w	r2, r3, #32
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e007      	b.n	8007bb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	695b      	ldr	r3, [r3, #20]
 8007bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bb2:	2b40      	cmp	r3, #64	; 0x40
 8007bb4:	d1b5      	bne.n	8007b22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3710      	adds	r7, #16
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	695b      	ldr	r3, [r3, #20]
 8007bce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bd6:	d11b      	bne.n	8007c10 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007be0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2220      	movs	r2, #32
 8007bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bfc:	f043 0204 	orr.w	r2, r3, #4
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e000      	b.n	8007c12 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	370c      	adds	r7, #12
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr

08007c1e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b083      	sub	sp, #12
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007c2e:	d103      	bne.n	8007c38 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007c36:	e007      	b.n	8007c48 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007c40:	d102      	bne.n	8007c48 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2208      	movs	r2, #8
 8007c46:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007c48:	bf00      	nop
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b086      	sub	sp, #24
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d101      	bne.n	8007c66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	e264      	b.n	8008130 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f003 0301 	and.w	r3, r3, #1
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d075      	beq.n	8007d5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007c72:	4ba3      	ldr	r3, [pc, #652]	; (8007f00 <HAL_RCC_OscConfig+0x2ac>)
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	f003 030c 	and.w	r3, r3, #12
 8007c7a:	2b04      	cmp	r3, #4
 8007c7c:	d00c      	beq.n	8007c98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c7e:	4ba0      	ldr	r3, [pc, #640]	; (8007f00 <HAL_RCC_OscConfig+0x2ac>)
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007c86:	2b08      	cmp	r3, #8
 8007c88:	d112      	bne.n	8007cb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c8a:	4b9d      	ldr	r3, [pc, #628]	; (8007f00 <HAL_RCC_OscConfig+0x2ac>)
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c96:	d10b      	bne.n	8007cb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c98:	4b99      	ldr	r3, [pc, #612]	; (8007f00 <HAL_RCC_OscConfig+0x2ac>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d05b      	beq.n	8007d5c <HAL_RCC_OscConfig+0x108>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d157      	bne.n	8007d5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	e23f      	b.n	8008130 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cb8:	d106      	bne.n	8007cc8 <HAL_RCC_OscConfig+0x74>
 8007cba:	4b91      	ldr	r3, [pc, #580]	; (8007f00 <HAL_RCC_OscConfig+0x2ac>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a90      	ldr	r2, [pc, #576]	; (8007f00 <HAL_RCC_OscConfig+0x2ac>)
 8007cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cc4:	6013      	str	r3, [r2, #0]
 8007cc6:	e01d      	b.n	8007d04 <HAL_RCC_OscConfig+0xb0>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007cd0:	d10c      	bne.n	8007cec <HAL_RCC_OscConfig+0x98>
 8007cd2:	4b8b      	ldr	r3, [pc, #556]	; (8007f00 <HAL_RCC_OscConfig+0x2ac>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a8a      	ldr	r2, [pc, #552]	; (8007f00 <HAL_RCC_OscConfig+0x2ac>)
 8007cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007cdc:	6013      	str	r3, [r2, #0]
 8007cde:	4b88      	ldr	r3, [pc, #544]	; (8007f00 <HAL_RCC_OscConfig+0x2ac>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a87      	ldr	r2, [pc, #540]	; (8007f00 <HAL_RCC_OscConfig+0x2ac>)
 8007ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ce8:	6013      	str	r3, [r2, #0]
 8007cea:	e00b      	b.n	8007d04 <HAL_RCC_OscConfig+0xb0>
 8007cec:	4b84      	ldr	r3, [pc, #528]	; (8007f00 <HAL_RCC_OscConfig+0x2ac>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a83      	ldr	r2, [pc, #524]	; (8007f00 <HAL_RCC_OscConfig+0x2ac>)
 8007cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cf6:	6013      	str	r3, [r2, #0]
 8007cf8:	4b81      	ldr	r3, [pc, #516]	; (8007f00 <HAL_RCC_OscConfig+0x2ac>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a80      	ldr	r2, [pc, #512]	; (8007f00 <HAL_RCC_OscConfig+0x2ac>)
 8007cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d013      	beq.n	8007d34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d0c:	f7fc f834 	bl	8003d78 <HAL_GetTick>
 8007d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d12:	e008      	b.n	8007d26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d14:	f7fc f830 	bl	8003d78 <HAL_GetTick>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	1ad3      	subs	r3, r2, r3
 8007d1e:	2b64      	cmp	r3, #100	; 0x64
 8007d20:	d901      	bls.n	8007d26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007d22:	2303      	movs	r3, #3
 8007d24:	e204      	b.n	8008130 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d26:	4b76      	ldr	r3, [pc, #472]	; (8007f00 <HAL_RCC_OscConfig+0x2ac>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d0f0      	beq.n	8007d14 <HAL_RCC_OscConfig+0xc0>
 8007d32:	e014      	b.n	8007d5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d34:	f7fc f820 	bl	8003d78 <HAL_GetTick>
 8007d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d3a:	e008      	b.n	8007d4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d3c:	f7fc f81c 	bl	8003d78 <HAL_GetTick>
 8007d40:	4602      	mov	r2, r0
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	2b64      	cmp	r3, #100	; 0x64
 8007d48:	d901      	bls.n	8007d4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	e1f0      	b.n	8008130 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d4e:	4b6c      	ldr	r3, [pc, #432]	; (8007f00 <HAL_RCC_OscConfig+0x2ac>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d1f0      	bne.n	8007d3c <HAL_RCC_OscConfig+0xe8>
 8007d5a:	e000      	b.n	8007d5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f003 0302 	and.w	r3, r3, #2
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d063      	beq.n	8007e32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007d6a:	4b65      	ldr	r3, [pc, #404]	; (8007f00 <HAL_RCC_OscConfig+0x2ac>)
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	f003 030c 	and.w	r3, r3, #12
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00b      	beq.n	8007d8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d76:	4b62      	ldr	r3, [pc, #392]	; (8007f00 <HAL_RCC_OscConfig+0x2ac>)
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007d7e:	2b08      	cmp	r3, #8
 8007d80:	d11c      	bne.n	8007dbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d82:	4b5f      	ldr	r3, [pc, #380]	; (8007f00 <HAL_RCC_OscConfig+0x2ac>)
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d116      	bne.n	8007dbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d8e:	4b5c      	ldr	r3, [pc, #368]	; (8007f00 <HAL_RCC_OscConfig+0x2ac>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f003 0302 	and.w	r3, r3, #2
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d005      	beq.n	8007da6 <HAL_RCC_OscConfig+0x152>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d001      	beq.n	8007da6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	e1c4      	b.n	8008130 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007da6:	4b56      	ldr	r3, [pc, #344]	; (8007f00 <HAL_RCC_OscConfig+0x2ac>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	00db      	lsls	r3, r3, #3
 8007db4:	4952      	ldr	r1, [pc, #328]	; (8007f00 <HAL_RCC_OscConfig+0x2ac>)
 8007db6:	4313      	orrs	r3, r2
 8007db8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007dba:	e03a      	b.n	8007e32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d020      	beq.n	8007e06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007dc4:	4b4f      	ldr	r3, [pc, #316]	; (8007f04 <HAL_RCC_OscConfig+0x2b0>)
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dca:	f7fb ffd5 	bl	8003d78 <HAL_GetTick>
 8007dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007dd0:	e008      	b.n	8007de4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007dd2:	f7fb ffd1 	bl	8003d78 <HAL_GetTick>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	1ad3      	subs	r3, r2, r3
 8007ddc:	2b02      	cmp	r3, #2
 8007dde:	d901      	bls.n	8007de4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007de0:	2303      	movs	r3, #3
 8007de2:	e1a5      	b.n	8008130 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007de4:	4b46      	ldr	r3, [pc, #280]	; (8007f00 <HAL_RCC_OscConfig+0x2ac>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 0302 	and.w	r3, r3, #2
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d0f0      	beq.n	8007dd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007df0:	4b43      	ldr	r3, [pc, #268]	; (8007f00 <HAL_RCC_OscConfig+0x2ac>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	00db      	lsls	r3, r3, #3
 8007dfe:	4940      	ldr	r1, [pc, #256]	; (8007f00 <HAL_RCC_OscConfig+0x2ac>)
 8007e00:	4313      	orrs	r3, r2
 8007e02:	600b      	str	r3, [r1, #0]
 8007e04:	e015      	b.n	8007e32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e06:	4b3f      	ldr	r3, [pc, #252]	; (8007f04 <HAL_RCC_OscConfig+0x2b0>)
 8007e08:	2200      	movs	r2, #0
 8007e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e0c:	f7fb ffb4 	bl	8003d78 <HAL_GetTick>
 8007e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e12:	e008      	b.n	8007e26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e14:	f7fb ffb0 	bl	8003d78 <HAL_GetTick>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	1ad3      	subs	r3, r2, r3
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d901      	bls.n	8007e26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007e22:	2303      	movs	r3, #3
 8007e24:	e184      	b.n	8008130 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e26:	4b36      	ldr	r3, [pc, #216]	; (8007f00 <HAL_RCC_OscConfig+0x2ac>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f003 0302 	and.w	r3, r3, #2
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d1f0      	bne.n	8007e14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 0308 	and.w	r3, r3, #8
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d030      	beq.n	8007ea0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	695b      	ldr	r3, [r3, #20]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d016      	beq.n	8007e74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e46:	4b30      	ldr	r3, [pc, #192]	; (8007f08 <HAL_RCC_OscConfig+0x2b4>)
 8007e48:	2201      	movs	r2, #1
 8007e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e4c:	f7fb ff94 	bl	8003d78 <HAL_GetTick>
 8007e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e52:	e008      	b.n	8007e66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e54:	f7fb ff90 	bl	8003d78 <HAL_GetTick>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	1ad3      	subs	r3, r2, r3
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d901      	bls.n	8007e66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007e62:	2303      	movs	r3, #3
 8007e64:	e164      	b.n	8008130 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e66:	4b26      	ldr	r3, [pc, #152]	; (8007f00 <HAL_RCC_OscConfig+0x2ac>)
 8007e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e6a:	f003 0302 	and.w	r3, r3, #2
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d0f0      	beq.n	8007e54 <HAL_RCC_OscConfig+0x200>
 8007e72:	e015      	b.n	8007ea0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e74:	4b24      	ldr	r3, [pc, #144]	; (8007f08 <HAL_RCC_OscConfig+0x2b4>)
 8007e76:	2200      	movs	r2, #0
 8007e78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e7a:	f7fb ff7d 	bl	8003d78 <HAL_GetTick>
 8007e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e80:	e008      	b.n	8007e94 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e82:	f7fb ff79 	bl	8003d78 <HAL_GetTick>
 8007e86:	4602      	mov	r2, r0
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	1ad3      	subs	r3, r2, r3
 8007e8c:	2b02      	cmp	r3, #2
 8007e8e:	d901      	bls.n	8007e94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007e90:	2303      	movs	r3, #3
 8007e92:	e14d      	b.n	8008130 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e94:	4b1a      	ldr	r3, [pc, #104]	; (8007f00 <HAL_RCC_OscConfig+0x2ac>)
 8007e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e98:	f003 0302 	and.w	r3, r3, #2
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d1f0      	bne.n	8007e82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f003 0304 	and.w	r3, r3, #4
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f000 80a0 	beq.w	8007fee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007eb2:	4b13      	ldr	r3, [pc, #76]	; (8007f00 <HAL_RCC_OscConfig+0x2ac>)
 8007eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d10f      	bne.n	8007ede <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	60bb      	str	r3, [r7, #8]
 8007ec2:	4b0f      	ldr	r3, [pc, #60]	; (8007f00 <HAL_RCC_OscConfig+0x2ac>)
 8007ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec6:	4a0e      	ldr	r2, [pc, #56]	; (8007f00 <HAL_RCC_OscConfig+0x2ac>)
 8007ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8007ece:	4b0c      	ldr	r3, [pc, #48]	; (8007f00 <HAL_RCC_OscConfig+0x2ac>)
 8007ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ed6:	60bb      	str	r3, [r7, #8]
 8007ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007eda:	2301      	movs	r3, #1
 8007edc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ede:	4b0b      	ldr	r3, [pc, #44]	; (8007f0c <HAL_RCC_OscConfig+0x2b8>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d121      	bne.n	8007f2e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007eea:	4b08      	ldr	r3, [pc, #32]	; (8007f0c <HAL_RCC_OscConfig+0x2b8>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a07      	ldr	r2, [pc, #28]	; (8007f0c <HAL_RCC_OscConfig+0x2b8>)
 8007ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ef6:	f7fb ff3f 	bl	8003d78 <HAL_GetTick>
 8007efa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007efc:	e011      	b.n	8007f22 <HAL_RCC_OscConfig+0x2ce>
 8007efe:	bf00      	nop
 8007f00:	40023800 	.word	0x40023800
 8007f04:	42470000 	.word	0x42470000
 8007f08:	42470e80 	.word	0x42470e80
 8007f0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f10:	f7fb ff32 	bl	8003d78 <HAL_GetTick>
 8007f14:	4602      	mov	r2, r0
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	2b02      	cmp	r3, #2
 8007f1c:	d901      	bls.n	8007f22 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007f1e:	2303      	movs	r3, #3
 8007f20:	e106      	b.n	8008130 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f22:	4b85      	ldr	r3, [pc, #532]	; (8008138 <HAL_RCC_OscConfig+0x4e4>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d0f0      	beq.n	8007f10 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d106      	bne.n	8007f44 <HAL_RCC_OscConfig+0x2f0>
 8007f36:	4b81      	ldr	r3, [pc, #516]	; (800813c <HAL_RCC_OscConfig+0x4e8>)
 8007f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f3a:	4a80      	ldr	r2, [pc, #512]	; (800813c <HAL_RCC_OscConfig+0x4e8>)
 8007f3c:	f043 0301 	orr.w	r3, r3, #1
 8007f40:	6713      	str	r3, [r2, #112]	; 0x70
 8007f42:	e01c      	b.n	8007f7e <HAL_RCC_OscConfig+0x32a>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	2b05      	cmp	r3, #5
 8007f4a:	d10c      	bne.n	8007f66 <HAL_RCC_OscConfig+0x312>
 8007f4c:	4b7b      	ldr	r3, [pc, #492]	; (800813c <HAL_RCC_OscConfig+0x4e8>)
 8007f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f50:	4a7a      	ldr	r2, [pc, #488]	; (800813c <HAL_RCC_OscConfig+0x4e8>)
 8007f52:	f043 0304 	orr.w	r3, r3, #4
 8007f56:	6713      	str	r3, [r2, #112]	; 0x70
 8007f58:	4b78      	ldr	r3, [pc, #480]	; (800813c <HAL_RCC_OscConfig+0x4e8>)
 8007f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f5c:	4a77      	ldr	r2, [pc, #476]	; (800813c <HAL_RCC_OscConfig+0x4e8>)
 8007f5e:	f043 0301 	orr.w	r3, r3, #1
 8007f62:	6713      	str	r3, [r2, #112]	; 0x70
 8007f64:	e00b      	b.n	8007f7e <HAL_RCC_OscConfig+0x32a>
 8007f66:	4b75      	ldr	r3, [pc, #468]	; (800813c <HAL_RCC_OscConfig+0x4e8>)
 8007f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f6a:	4a74      	ldr	r2, [pc, #464]	; (800813c <HAL_RCC_OscConfig+0x4e8>)
 8007f6c:	f023 0301 	bic.w	r3, r3, #1
 8007f70:	6713      	str	r3, [r2, #112]	; 0x70
 8007f72:	4b72      	ldr	r3, [pc, #456]	; (800813c <HAL_RCC_OscConfig+0x4e8>)
 8007f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f76:	4a71      	ldr	r2, [pc, #452]	; (800813c <HAL_RCC_OscConfig+0x4e8>)
 8007f78:	f023 0304 	bic.w	r3, r3, #4
 8007f7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d015      	beq.n	8007fb2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f86:	f7fb fef7 	bl	8003d78 <HAL_GetTick>
 8007f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f8c:	e00a      	b.n	8007fa4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f8e:	f7fb fef3 	bl	8003d78 <HAL_GetTick>
 8007f92:	4602      	mov	r2, r0
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	1ad3      	subs	r3, r2, r3
 8007f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d901      	bls.n	8007fa4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	e0c5      	b.n	8008130 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fa4:	4b65      	ldr	r3, [pc, #404]	; (800813c <HAL_RCC_OscConfig+0x4e8>)
 8007fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fa8:	f003 0302 	and.w	r3, r3, #2
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d0ee      	beq.n	8007f8e <HAL_RCC_OscConfig+0x33a>
 8007fb0:	e014      	b.n	8007fdc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007fb2:	f7fb fee1 	bl	8003d78 <HAL_GetTick>
 8007fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007fb8:	e00a      	b.n	8007fd0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007fba:	f7fb fedd 	bl	8003d78 <HAL_GetTick>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	1ad3      	subs	r3, r2, r3
 8007fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d901      	bls.n	8007fd0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007fcc:	2303      	movs	r3, #3
 8007fce:	e0af      	b.n	8008130 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007fd0:	4b5a      	ldr	r3, [pc, #360]	; (800813c <HAL_RCC_OscConfig+0x4e8>)
 8007fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fd4:	f003 0302 	and.w	r3, r3, #2
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d1ee      	bne.n	8007fba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007fdc:	7dfb      	ldrb	r3, [r7, #23]
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d105      	bne.n	8007fee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007fe2:	4b56      	ldr	r3, [pc, #344]	; (800813c <HAL_RCC_OscConfig+0x4e8>)
 8007fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe6:	4a55      	ldr	r2, [pc, #340]	; (800813c <HAL_RCC_OscConfig+0x4e8>)
 8007fe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	699b      	ldr	r3, [r3, #24]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	f000 809b 	beq.w	800812e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007ff8:	4b50      	ldr	r3, [pc, #320]	; (800813c <HAL_RCC_OscConfig+0x4e8>)
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	f003 030c 	and.w	r3, r3, #12
 8008000:	2b08      	cmp	r3, #8
 8008002:	d05c      	beq.n	80080be <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	699b      	ldr	r3, [r3, #24]
 8008008:	2b02      	cmp	r3, #2
 800800a:	d141      	bne.n	8008090 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800800c:	4b4c      	ldr	r3, [pc, #304]	; (8008140 <HAL_RCC_OscConfig+0x4ec>)
 800800e:	2200      	movs	r2, #0
 8008010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008012:	f7fb feb1 	bl	8003d78 <HAL_GetTick>
 8008016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008018:	e008      	b.n	800802c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800801a:	f7fb fead 	bl	8003d78 <HAL_GetTick>
 800801e:	4602      	mov	r2, r0
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	1ad3      	subs	r3, r2, r3
 8008024:	2b02      	cmp	r3, #2
 8008026:	d901      	bls.n	800802c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008028:	2303      	movs	r3, #3
 800802a:	e081      	b.n	8008130 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800802c:	4b43      	ldr	r3, [pc, #268]	; (800813c <HAL_RCC_OscConfig+0x4e8>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008034:	2b00      	cmp	r3, #0
 8008036:	d1f0      	bne.n	800801a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	69da      	ldr	r2, [r3, #28]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6a1b      	ldr	r3, [r3, #32]
 8008040:	431a      	orrs	r2, r3
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008046:	019b      	lsls	r3, r3, #6
 8008048:	431a      	orrs	r2, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800804e:	085b      	lsrs	r3, r3, #1
 8008050:	3b01      	subs	r3, #1
 8008052:	041b      	lsls	r3, r3, #16
 8008054:	431a      	orrs	r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800805a:	061b      	lsls	r3, r3, #24
 800805c:	4937      	ldr	r1, [pc, #220]	; (800813c <HAL_RCC_OscConfig+0x4e8>)
 800805e:	4313      	orrs	r3, r2
 8008060:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008062:	4b37      	ldr	r3, [pc, #220]	; (8008140 <HAL_RCC_OscConfig+0x4ec>)
 8008064:	2201      	movs	r2, #1
 8008066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008068:	f7fb fe86 	bl	8003d78 <HAL_GetTick>
 800806c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800806e:	e008      	b.n	8008082 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008070:	f7fb fe82 	bl	8003d78 <HAL_GetTick>
 8008074:	4602      	mov	r2, r0
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	1ad3      	subs	r3, r2, r3
 800807a:	2b02      	cmp	r3, #2
 800807c:	d901      	bls.n	8008082 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800807e:	2303      	movs	r3, #3
 8008080:	e056      	b.n	8008130 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008082:	4b2e      	ldr	r3, [pc, #184]	; (800813c <HAL_RCC_OscConfig+0x4e8>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800808a:	2b00      	cmp	r3, #0
 800808c:	d0f0      	beq.n	8008070 <HAL_RCC_OscConfig+0x41c>
 800808e:	e04e      	b.n	800812e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008090:	4b2b      	ldr	r3, [pc, #172]	; (8008140 <HAL_RCC_OscConfig+0x4ec>)
 8008092:	2200      	movs	r2, #0
 8008094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008096:	f7fb fe6f 	bl	8003d78 <HAL_GetTick>
 800809a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800809c:	e008      	b.n	80080b0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800809e:	f7fb fe6b 	bl	8003d78 <HAL_GetTick>
 80080a2:	4602      	mov	r2, r0
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	1ad3      	subs	r3, r2, r3
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d901      	bls.n	80080b0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80080ac:	2303      	movs	r3, #3
 80080ae:	e03f      	b.n	8008130 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080b0:	4b22      	ldr	r3, [pc, #136]	; (800813c <HAL_RCC_OscConfig+0x4e8>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d1f0      	bne.n	800809e <HAL_RCC_OscConfig+0x44a>
 80080bc:	e037      	b.n	800812e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	699b      	ldr	r3, [r3, #24]
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d101      	bne.n	80080ca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	e032      	b.n	8008130 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80080ca:	4b1c      	ldr	r3, [pc, #112]	; (800813c <HAL_RCC_OscConfig+0x4e8>)
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	699b      	ldr	r3, [r3, #24]
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d028      	beq.n	800812a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d121      	bne.n	800812a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d11a      	bne.n	800812a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80080fa:	4013      	ands	r3, r2
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008100:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008102:	4293      	cmp	r3, r2
 8008104:	d111      	bne.n	800812a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008110:	085b      	lsrs	r3, r3, #1
 8008112:	3b01      	subs	r3, #1
 8008114:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008116:	429a      	cmp	r2, r3
 8008118:	d107      	bne.n	800812a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008124:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008126:	429a      	cmp	r2, r3
 8008128:	d001      	beq.n	800812e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	e000      	b.n	8008130 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800812e:	2300      	movs	r3, #0
}
 8008130:	4618      	mov	r0, r3
 8008132:	3718      	adds	r7, #24
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}
 8008138:	40007000 	.word	0x40007000
 800813c:	40023800 	.word	0x40023800
 8008140:	42470060 	.word	0x42470060

08008144 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d101      	bne.n	8008158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	e0cc      	b.n	80082f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008158:	4b68      	ldr	r3, [pc, #416]	; (80082fc <HAL_RCC_ClockConfig+0x1b8>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 0307 	and.w	r3, r3, #7
 8008160:	683a      	ldr	r2, [r7, #0]
 8008162:	429a      	cmp	r2, r3
 8008164:	d90c      	bls.n	8008180 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008166:	4b65      	ldr	r3, [pc, #404]	; (80082fc <HAL_RCC_ClockConfig+0x1b8>)
 8008168:	683a      	ldr	r2, [r7, #0]
 800816a:	b2d2      	uxtb	r2, r2
 800816c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800816e:	4b63      	ldr	r3, [pc, #396]	; (80082fc <HAL_RCC_ClockConfig+0x1b8>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f003 0307 	and.w	r3, r3, #7
 8008176:	683a      	ldr	r2, [r7, #0]
 8008178:	429a      	cmp	r2, r3
 800817a:	d001      	beq.n	8008180 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	e0b8      	b.n	80082f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f003 0302 	and.w	r3, r3, #2
 8008188:	2b00      	cmp	r3, #0
 800818a:	d020      	beq.n	80081ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f003 0304 	and.w	r3, r3, #4
 8008194:	2b00      	cmp	r3, #0
 8008196:	d005      	beq.n	80081a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008198:	4b59      	ldr	r3, [pc, #356]	; (8008300 <HAL_RCC_ClockConfig+0x1bc>)
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	4a58      	ldr	r2, [pc, #352]	; (8008300 <HAL_RCC_ClockConfig+0x1bc>)
 800819e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80081a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 0308 	and.w	r3, r3, #8
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d005      	beq.n	80081bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80081b0:	4b53      	ldr	r3, [pc, #332]	; (8008300 <HAL_RCC_ClockConfig+0x1bc>)
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	4a52      	ldr	r2, [pc, #328]	; (8008300 <HAL_RCC_ClockConfig+0x1bc>)
 80081b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80081ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081bc:	4b50      	ldr	r3, [pc, #320]	; (8008300 <HAL_RCC_ClockConfig+0x1bc>)
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	494d      	ldr	r1, [pc, #308]	; (8008300 <HAL_RCC_ClockConfig+0x1bc>)
 80081ca:	4313      	orrs	r3, r2
 80081cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f003 0301 	and.w	r3, r3, #1
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d044      	beq.n	8008264 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d107      	bne.n	80081f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80081e2:	4b47      	ldr	r3, [pc, #284]	; (8008300 <HAL_RCC_ClockConfig+0x1bc>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d119      	bne.n	8008222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e07f      	b.n	80082f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	2b02      	cmp	r3, #2
 80081f8:	d003      	beq.n	8008202 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80081fe:	2b03      	cmp	r3, #3
 8008200:	d107      	bne.n	8008212 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008202:	4b3f      	ldr	r3, [pc, #252]	; (8008300 <HAL_RCC_ClockConfig+0x1bc>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800820a:	2b00      	cmp	r3, #0
 800820c:	d109      	bne.n	8008222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	e06f      	b.n	80082f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008212:	4b3b      	ldr	r3, [pc, #236]	; (8008300 <HAL_RCC_ClockConfig+0x1bc>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f003 0302 	and.w	r3, r3, #2
 800821a:	2b00      	cmp	r3, #0
 800821c:	d101      	bne.n	8008222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	e067      	b.n	80082f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008222:	4b37      	ldr	r3, [pc, #220]	; (8008300 <HAL_RCC_ClockConfig+0x1bc>)
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	f023 0203 	bic.w	r2, r3, #3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	4934      	ldr	r1, [pc, #208]	; (8008300 <HAL_RCC_ClockConfig+0x1bc>)
 8008230:	4313      	orrs	r3, r2
 8008232:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008234:	f7fb fda0 	bl	8003d78 <HAL_GetTick>
 8008238:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800823a:	e00a      	b.n	8008252 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800823c:	f7fb fd9c 	bl	8003d78 <HAL_GetTick>
 8008240:	4602      	mov	r2, r0
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	1ad3      	subs	r3, r2, r3
 8008246:	f241 3288 	movw	r2, #5000	; 0x1388
 800824a:	4293      	cmp	r3, r2
 800824c:	d901      	bls.n	8008252 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800824e:	2303      	movs	r3, #3
 8008250:	e04f      	b.n	80082f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008252:	4b2b      	ldr	r3, [pc, #172]	; (8008300 <HAL_RCC_ClockConfig+0x1bc>)
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	f003 020c 	and.w	r2, r3, #12
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	429a      	cmp	r2, r3
 8008262:	d1eb      	bne.n	800823c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008264:	4b25      	ldr	r3, [pc, #148]	; (80082fc <HAL_RCC_ClockConfig+0x1b8>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f003 0307 	and.w	r3, r3, #7
 800826c:	683a      	ldr	r2, [r7, #0]
 800826e:	429a      	cmp	r2, r3
 8008270:	d20c      	bcs.n	800828c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008272:	4b22      	ldr	r3, [pc, #136]	; (80082fc <HAL_RCC_ClockConfig+0x1b8>)
 8008274:	683a      	ldr	r2, [r7, #0]
 8008276:	b2d2      	uxtb	r2, r2
 8008278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800827a:	4b20      	ldr	r3, [pc, #128]	; (80082fc <HAL_RCC_ClockConfig+0x1b8>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 0307 	and.w	r3, r3, #7
 8008282:	683a      	ldr	r2, [r7, #0]
 8008284:	429a      	cmp	r2, r3
 8008286:	d001      	beq.n	800828c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	e032      	b.n	80082f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 0304 	and.w	r3, r3, #4
 8008294:	2b00      	cmp	r3, #0
 8008296:	d008      	beq.n	80082aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008298:	4b19      	ldr	r3, [pc, #100]	; (8008300 <HAL_RCC_ClockConfig+0x1bc>)
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	4916      	ldr	r1, [pc, #88]	; (8008300 <HAL_RCC_ClockConfig+0x1bc>)
 80082a6:	4313      	orrs	r3, r2
 80082a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f003 0308 	and.w	r3, r3, #8
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d009      	beq.n	80082ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80082b6:	4b12      	ldr	r3, [pc, #72]	; (8008300 <HAL_RCC_ClockConfig+0x1bc>)
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	691b      	ldr	r3, [r3, #16]
 80082c2:	00db      	lsls	r3, r3, #3
 80082c4:	490e      	ldr	r1, [pc, #56]	; (8008300 <HAL_RCC_ClockConfig+0x1bc>)
 80082c6:	4313      	orrs	r3, r2
 80082c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80082ca:	f000 f821 	bl	8008310 <HAL_RCC_GetSysClockFreq>
 80082ce:	4602      	mov	r2, r0
 80082d0:	4b0b      	ldr	r3, [pc, #44]	; (8008300 <HAL_RCC_ClockConfig+0x1bc>)
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	091b      	lsrs	r3, r3, #4
 80082d6:	f003 030f 	and.w	r3, r3, #15
 80082da:	490a      	ldr	r1, [pc, #40]	; (8008304 <HAL_RCC_ClockConfig+0x1c0>)
 80082dc:	5ccb      	ldrb	r3, [r1, r3]
 80082de:	fa22 f303 	lsr.w	r3, r2, r3
 80082e2:	4a09      	ldr	r2, [pc, #36]	; (8008308 <HAL_RCC_ClockConfig+0x1c4>)
 80082e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80082e6:	4b09      	ldr	r3, [pc, #36]	; (800830c <HAL_RCC_ClockConfig+0x1c8>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4618      	mov	r0, r3
 80082ec:	f7fb fd00 	bl	8003cf0 <HAL_InitTick>

  return HAL_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3710      	adds	r7, #16
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	40023c00 	.word	0x40023c00
 8008300:	40023800 	.word	0x40023800
 8008304:	0800b428 	.word	0x0800b428
 8008308:	200000e4 	.word	0x200000e4
 800830c:	200000e8 	.word	0x200000e8

08008310 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008310:	b5b0      	push	{r4, r5, r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008316:	2100      	movs	r1, #0
 8008318:	6079      	str	r1, [r7, #4]
 800831a:	2100      	movs	r1, #0
 800831c:	60f9      	str	r1, [r7, #12]
 800831e:	2100      	movs	r1, #0
 8008320:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008322:	2100      	movs	r1, #0
 8008324:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008326:	4952      	ldr	r1, [pc, #328]	; (8008470 <HAL_RCC_GetSysClockFreq+0x160>)
 8008328:	6889      	ldr	r1, [r1, #8]
 800832a:	f001 010c 	and.w	r1, r1, #12
 800832e:	2908      	cmp	r1, #8
 8008330:	d00d      	beq.n	800834e <HAL_RCC_GetSysClockFreq+0x3e>
 8008332:	2908      	cmp	r1, #8
 8008334:	f200 8094 	bhi.w	8008460 <HAL_RCC_GetSysClockFreq+0x150>
 8008338:	2900      	cmp	r1, #0
 800833a:	d002      	beq.n	8008342 <HAL_RCC_GetSysClockFreq+0x32>
 800833c:	2904      	cmp	r1, #4
 800833e:	d003      	beq.n	8008348 <HAL_RCC_GetSysClockFreq+0x38>
 8008340:	e08e      	b.n	8008460 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008342:	4b4c      	ldr	r3, [pc, #304]	; (8008474 <HAL_RCC_GetSysClockFreq+0x164>)
 8008344:	60bb      	str	r3, [r7, #8]
       break;
 8008346:	e08e      	b.n	8008466 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008348:	4b4b      	ldr	r3, [pc, #300]	; (8008478 <HAL_RCC_GetSysClockFreq+0x168>)
 800834a:	60bb      	str	r3, [r7, #8]
      break;
 800834c:	e08b      	b.n	8008466 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800834e:	4948      	ldr	r1, [pc, #288]	; (8008470 <HAL_RCC_GetSysClockFreq+0x160>)
 8008350:	6849      	ldr	r1, [r1, #4]
 8008352:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8008356:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008358:	4945      	ldr	r1, [pc, #276]	; (8008470 <HAL_RCC_GetSysClockFreq+0x160>)
 800835a:	6849      	ldr	r1, [r1, #4]
 800835c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8008360:	2900      	cmp	r1, #0
 8008362:	d024      	beq.n	80083ae <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008364:	4942      	ldr	r1, [pc, #264]	; (8008470 <HAL_RCC_GetSysClockFreq+0x160>)
 8008366:	6849      	ldr	r1, [r1, #4]
 8008368:	0989      	lsrs	r1, r1, #6
 800836a:	4608      	mov	r0, r1
 800836c:	f04f 0100 	mov.w	r1, #0
 8008370:	f240 14ff 	movw	r4, #511	; 0x1ff
 8008374:	f04f 0500 	mov.w	r5, #0
 8008378:	ea00 0204 	and.w	r2, r0, r4
 800837c:	ea01 0305 	and.w	r3, r1, r5
 8008380:	493d      	ldr	r1, [pc, #244]	; (8008478 <HAL_RCC_GetSysClockFreq+0x168>)
 8008382:	fb01 f003 	mul.w	r0, r1, r3
 8008386:	2100      	movs	r1, #0
 8008388:	fb01 f102 	mul.w	r1, r1, r2
 800838c:	1844      	adds	r4, r0, r1
 800838e:	493a      	ldr	r1, [pc, #232]	; (8008478 <HAL_RCC_GetSysClockFreq+0x168>)
 8008390:	fba2 0101 	umull	r0, r1, r2, r1
 8008394:	1863      	adds	r3, r4, r1
 8008396:	4619      	mov	r1, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	461a      	mov	r2, r3
 800839c:	f04f 0300 	mov.w	r3, #0
 80083a0:	f7f7 ff12 	bl	80001c8 <__aeabi_uldivmod>
 80083a4:	4602      	mov	r2, r0
 80083a6:	460b      	mov	r3, r1
 80083a8:	4613      	mov	r3, r2
 80083aa:	60fb      	str	r3, [r7, #12]
 80083ac:	e04a      	b.n	8008444 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80083ae:	4b30      	ldr	r3, [pc, #192]	; (8008470 <HAL_RCC_GetSysClockFreq+0x160>)
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	099b      	lsrs	r3, r3, #6
 80083b4:	461a      	mov	r2, r3
 80083b6:	f04f 0300 	mov.w	r3, #0
 80083ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80083be:	f04f 0100 	mov.w	r1, #0
 80083c2:	ea02 0400 	and.w	r4, r2, r0
 80083c6:	ea03 0501 	and.w	r5, r3, r1
 80083ca:	4620      	mov	r0, r4
 80083cc:	4629      	mov	r1, r5
 80083ce:	f04f 0200 	mov.w	r2, #0
 80083d2:	f04f 0300 	mov.w	r3, #0
 80083d6:	014b      	lsls	r3, r1, #5
 80083d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80083dc:	0142      	lsls	r2, r0, #5
 80083de:	4610      	mov	r0, r2
 80083e0:	4619      	mov	r1, r3
 80083e2:	1b00      	subs	r0, r0, r4
 80083e4:	eb61 0105 	sbc.w	r1, r1, r5
 80083e8:	f04f 0200 	mov.w	r2, #0
 80083ec:	f04f 0300 	mov.w	r3, #0
 80083f0:	018b      	lsls	r3, r1, #6
 80083f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80083f6:	0182      	lsls	r2, r0, #6
 80083f8:	1a12      	subs	r2, r2, r0
 80083fa:	eb63 0301 	sbc.w	r3, r3, r1
 80083fe:	f04f 0000 	mov.w	r0, #0
 8008402:	f04f 0100 	mov.w	r1, #0
 8008406:	00d9      	lsls	r1, r3, #3
 8008408:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800840c:	00d0      	lsls	r0, r2, #3
 800840e:	4602      	mov	r2, r0
 8008410:	460b      	mov	r3, r1
 8008412:	1912      	adds	r2, r2, r4
 8008414:	eb45 0303 	adc.w	r3, r5, r3
 8008418:	f04f 0000 	mov.w	r0, #0
 800841c:	f04f 0100 	mov.w	r1, #0
 8008420:	0299      	lsls	r1, r3, #10
 8008422:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008426:	0290      	lsls	r0, r2, #10
 8008428:	4602      	mov	r2, r0
 800842a:	460b      	mov	r3, r1
 800842c:	4610      	mov	r0, r2
 800842e:	4619      	mov	r1, r3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	461a      	mov	r2, r3
 8008434:	f04f 0300 	mov.w	r3, #0
 8008438:	f7f7 fec6 	bl	80001c8 <__aeabi_uldivmod>
 800843c:	4602      	mov	r2, r0
 800843e:	460b      	mov	r3, r1
 8008440:	4613      	mov	r3, r2
 8008442:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008444:	4b0a      	ldr	r3, [pc, #40]	; (8008470 <HAL_RCC_GetSysClockFreq+0x160>)
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	0c1b      	lsrs	r3, r3, #16
 800844a:	f003 0303 	and.w	r3, r3, #3
 800844e:	3301      	adds	r3, #1
 8008450:	005b      	lsls	r3, r3, #1
 8008452:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	fbb2 f3f3 	udiv	r3, r2, r3
 800845c:	60bb      	str	r3, [r7, #8]
      break;
 800845e:	e002      	b.n	8008466 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008460:	4b04      	ldr	r3, [pc, #16]	; (8008474 <HAL_RCC_GetSysClockFreq+0x164>)
 8008462:	60bb      	str	r3, [r7, #8]
      break;
 8008464:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008466:	68bb      	ldr	r3, [r7, #8]
}
 8008468:	4618      	mov	r0, r3
 800846a:	3710      	adds	r7, #16
 800846c:	46bd      	mov	sp, r7
 800846e:	bdb0      	pop	{r4, r5, r7, pc}
 8008470:	40023800 	.word	0x40023800
 8008474:	00f42400 	.word	0x00f42400
 8008478:	017d7840 	.word	0x017d7840

0800847c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800847c:	b480      	push	{r7}
 800847e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008480:	4b03      	ldr	r3, [pc, #12]	; (8008490 <HAL_RCC_GetHCLKFreq+0x14>)
 8008482:	681b      	ldr	r3, [r3, #0]
}
 8008484:	4618      	mov	r0, r3
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	200000e4 	.word	0x200000e4

08008494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008498:	f7ff fff0 	bl	800847c <HAL_RCC_GetHCLKFreq>
 800849c:	4602      	mov	r2, r0
 800849e:	4b05      	ldr	r3, [pc, #20]	; (80084b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	0a9b      	lsrs	r3, r3, #10
 80084a4:	f003 0307 	and.w	r3, r3, #7
 80084a8:	4903      	ldr	r1, [pc, #12]	; (80084b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80084aa:	5ccb      	ldrb	r3, [r1, r3]
 80084ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	40023800 	.word	0x40023800
 80084b8:	0800b438 	.word	0x0800b438

080084bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80084c0:	f7ff ffdc 	bl	800847c <HAL_RCC_GetHCLKFreq>
 80084c4:	4602      	mov	r2, r0
 80084c6:	4b05      	ldr	r3, [pc, #20]	; (80084dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	0b5b      	lsrs	r3, r3, #13
 80084cc:	f003 0307 	and.w	r3, r3, #7
 80084d0:	4903      	ldr	r1, [pc, #12]	; (80084e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80084d2:	5ccb      	ldrb	r3, [r1, r3]
 80084d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80084d8:	4618      	mov	r0, r3
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	40023800 	.word	0x40023800
 80084e0:	0800b438 	.word	0x0800b438

080084e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d101      	bne.n	80084f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	e041      	b.n	800857a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d106      	bne.n	8008510 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f7fa ff72 	bl	80033f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2202      	movs	r2, #2
 8008514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	3304      	adds	r3, #4
 8008520:	4619      	mov	r1, r3
 8008522:	4610      	mov	r0, r2
 8008524:	f000 fb48 	bl	8008bb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2201      	movs	r2, #1
 800852c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2201      	movs	r2, #1
 800853c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2201      	movs	r2, #1
 8008574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3708      	adds	r7, #8
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008582:	b580      	push	{r7, lr}
 8008584:	b082      	sub	sp, #8
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d101      	bne.n	8008594 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	e041      	b.n	8008618 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800859a:	b2db      	uxtb	r3, r3
 800859c:	2b00      	cmp	r3, #0
 800859e:	d106      	bne.n	80085ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 f839 	bl	8008620 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2202      	movs	r2, #2
 80085b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	3304      	adds	r3, #4
 80085be:	4619      	mov	r1, r3
 80085c0:	4610      	mov	r0, r2
 80085c2:	f000 faf9 	bl	8008bb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2201      	movs	r2, #1
 80085d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2201      	movs	r2, #1
 80085da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2201      	movs	r2, #1
 80085e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2201      	movs	r2, #1
 80085ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2201      	movs	r2, #1
 80085f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2201      	movs	r2, #1
 80085fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2201      	movs	r2, #1
 8008602:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2201      	movs	r2, #1
 800860a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2201      	movs	r2, #1
 8008612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008616:	2300      	movs	r3, #0
}
 8008618:	4618      	mov	r0, r3
 800861a:	3708      	adds	r7, #8
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008628:	bf00      	nop
 800862a:	370c      	adds	r7, #12
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d109      	bne.n	8008658 <HAL_TIM_PWM_Start+0x24>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800864a:	b2db      	uxtb	r3, r3
 800864c:	2b01      	cmp	r3, #1
 800864e:	bf14      	ite	ne
 8008650:	2301      	movne	r3, #1
 8008652:	2300      	moveq	r3, #0
 8008654:	b2db      	uxtb	r3, r3
 8008656:	e022      	b.n	800869e <HAL_TIM_PWM_Start+0x6a>
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	2b04      	cmp	r3, #4
 800865c:	d109      	bne.n	8008672 <HAL_TIM_PWM_Start+0x3e>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008664:	b2db      	uxtb	r3, r3
 8008666:	2b01      	cmp	r3, #1
 8008668:	bf14      	ite	ne
 800866a:	2301      	movne	r3, #1
 800866c:	2300      	moveq	r3, #0
 800866e:	b2db      	uxtb	r3, r3
 8008670:	e015      	b.n	800869e <HAL_TIM_PWM_Start+0x6a>
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	2b08      	cmp	r3, #8
 8008676:	d109      	bne.n	800868c <HAL_TIM_PWM_Start+0x58>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800867e:	b2db      	uxtb	r3, r3
 8008680:	2b01      	cmp	r3, #1
 8008682:	bf14      	ite	ne
 8008684:	2301      	movne	r3, #1
 8008686:	2300      	moveq	r3, #0
 8008688:	b2db      	uxtb	r3, r3
 800868a:	e008      	b.n	800869e <HAL_TIM_PWM_Start+0x6a>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008692:	b2db      	uxtb	r3, r3
 8008694:	2b01      	cmp	r3, #1
 8008696:	bf14      	ite	ne
 8008698:	2301      	movne	r3, #1
 800869a:	2300      	moveq	r3, #0
 800869c:	b2db      	uxtb	r3, r3
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d001      	beq.n	80086a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80086a2:	2301      	movs	r3, #1
 80086a4:	e07c      	b.n	80087a0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d104      	bne.n	80086b6 <HAL_TIM_PWM_Start+0x82>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2202      	movs	r2, #2
 80086b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086b4:	e013      	b.n	80086de <HAL_TIM_PWM_Start+0xaa>
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	2b04      	cmp	r3, #4
 80086ba:	d104      	bne.n	80086c6 <HAL_TIM_PWM_Start+0x92>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2202      	movs	r2, #2
 80086c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086c4:	e00b      	b.n	80086de <HAL_TIM_PWM_Start+0xaa>
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	2b08      	cmp	r3, #8
 80086ca:	d104      	bne.n	80086d6 <HAL_TIM_PWM_Start+0xa2>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2202      	movs	r2, #2
 80086d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086d4:	e003      	b.n	80086de <HAL_TIM_PWM_Start+0xaa>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2202      	movs	r2, #2
 80086da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	2201      	movs	r2, #1
 80086e4:	6839      	ldr	r1, [r7, #0]
 80086e6:	4618      	mov	r0, r3
 80086e8:	f000 fd50 	bl	800918c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a2d      	ldr	r2, [pc, #180]	; (80087a8 <HAL_TIM_PWM_Start+0x174>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d004      	beq.n	8008700 <HAL_TIM_PWM_Start+0xcc>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a2c      	ldr	r2, [pc, #176]	; (80087ac <HAL_TIM_PWM_Start+0x178>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d101      	bne.n	8008704 <HAL_TIM_PWM_Start+0xd0>
 8008700:	2301      	movs	r3, #1
 8008702:	e000      	b.n	8008706 <HAL_TIM_PWM_Start+0xd2>
 8008704:	2300      	movs	r3, #0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d007      	beq.n	800871a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008718:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a22      	ldr	r2, [pc, #136]	; (80087a8 <HAL_TIM_PWM_Start+0x174>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d022      	beq.n	800876a <HAL_TIM_PWM_Start+0x136>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800872c:	d01d      	beq.n	800876a <HAL_TIM_PWM_Start+0x136>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a1f      	ldr	r2, [pc, #124]	; (80087b0 <HAL_TIM_PWM_Start+0x17c>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d018      	beq.n	800876a <HAL_TIM_PWM_Start+0x136>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a1d      	ldr	r2, [pc, #116]	; (80087b4 <HAL_TIM_PWM_Start+0x180>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d013      	beq.n	800876a <HAL_TIM_PWM_Start+0x136>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a1c      	ldr	r2, [pc, #112]	; (80087b8 <HAL_TIM_PWM_Start+0x184>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d00e      	beq.n	800876a <HAL_TIM_PWM_Start+0x136>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a16      	ldr	r2, [pc, #88]	; (80087ac <HAL_TIM_PWM_Start+0x178>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d009      	beq.n	800876a <HAL_TIM_PWM_Start+0x136>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a18      	ldr	r2, [pc, #96]	; (80087bc <HAL_TIM_PWM_Start+0x188>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d004      	beq.n	800876a <HAL_TIM_PWM_Start+0x136>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a16      	ldr	r2, [pc, #88]	; (80087c0 <HAL_TIM_PWM_Start+0x18c>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d111      	bne.n	800878e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	f003 0307 	and.w	r3, r3, #7
 8008774:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2b06      	cmp	r3, #6
 800877a:	d010      	beq.n	800879e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f042 0201 	orr.w	r2, r2, #1
 800878a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800878c:	e007      	b.n	800879e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f042 0201 	orr.w	r2, r2, #1
 800879c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3710      	adds	r7, #16
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	40010000 	.word	0x40010000
 80087ac:	40010400 	.word	0x40010400
 80087b0:	40000400 	.word	0x40000400
 80087b4:	40000800 	.word	0x40000800
 80087b8:	40000c00 	.word	0x40000c00
 80087bc:	40014000 	.word	0x40014000
 80087c0:	40001800 	.word	0x40001800

080087c4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	2200      	movs	r2, #0
 80087d4:	6839      	ldr	r1, [r7, #0]
 80087d6:	4618      	mov	r0, r3
 80087d8:	f000 fcd8 	bl	800918c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a2e      	ldr	r2, [pc, #184]	; (800889c <HAL_TIM_PWM_Stop+0xd8>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d004      	beq.n	80087f0 <HAL_TIM_PWM_Stop+0x2c>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a2d      	ldr	r2, [pc, #180]	; (80088a0 <HAL_TIM_PWM_Stop+0xdc>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d101      	bne.n	80087f4 <HAL_TIM_PWM_Stop+0x30>
 80087f0:	2301      	movs	r3, #1
 80087f2:	e000      	b.n	80087f6 <HAL_TIM_PWM_Stop+0x32>
 80087f4:	2300      	movs	r3, #0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d017      	beq.n	800882a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	6a1a      	ldr	r2, [r3, #32]
 8008800:	f241 1311 	movw	r3, #4369	; 0x1111
 8008804:	4013      	ands	r3, r2
 8008806:	2b00      	cmp	r3, #0
 8008808:	d10f      	bne.n	800882a <HAL_TIM_PWM_Stop+0x66>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	6a1a      	ldr	r2, [r3, #32]
 8008810:	f240 4344 	movw	r3, #1092	; 0x444
 8008814:	4013      	ands	r3, r2
 8008816:	2b00      	cmp	r3, #0
 8008818:	d107      	bne.n	800882a <HAL_TIM_PWM_Stop+0x66>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008828:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	6a1a      	ldr	r2, [r3, #32]
 8008830:	f241 1311 	movw	r3, #4369	; 0x1111
 8008834:	4013      	ands	r3, r2
 8008836:	2b00      	cmp	r3, #0
 8008838:	d10f      	bne.n	800885a <HAL_TIM_PWM_Stop+0x96>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	6a1a      	ldr	r2, [r3, #32]
 8008840:	f240 4344 	movw	r3, #1092	; 0x444
 8008844:	4013      	ands	r3, r2
 8008846:	2b00      	cmp	r3, #0
 8008848:	d107      	bne.n	800885a <HAL_TIM_PWM_Stop+0x96>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f022 0201 	bic.w	r2, r2, #1
 8008858:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d104      	bne.n	800886a <HAL_TIM_PWM_Stop+0xa6>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008868:	e013      	b.n	8008892 <HAL_TIM_PWM_Stop+0xce>
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	2b04      	cmp	r3, #4
 800886e:	d104      	bne.n	800887a <HAL_TIM_PWM_Stop+0xb6>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008878:	e00b      	b.n	8008892 <HAL_TIM_PWM_Stop+0xce>
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	2b08      	cmp	r3, #8
 800887e:	d104      	bne.n	800888a <HAL_TIM_PWM_Stop+0xc6>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2201      	movs	r2, #1
 8008884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008888:	e003      	b.n	8008892 <HAL_TIM_PWM_Stop+0xce>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2201      	movs	r2, #1
 800888e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	3708      	adds	r7, #8
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}
 800889c:	40010000 	.word	0x40010000
 80088a0:	40010400 	.word	0x40010400

080088a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b086      	sub	sp, #24
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	60f8      	str	r0, [r7, #12]
 80088ac:	60b9      	str	r1, [r7, #8]
 80088ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088b0:	2300      	movs	r3, #0
 80088b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d101      	bne.n	80088c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80088be:	2302      	movs	r3, #2
 80088c0:	e0ae      	b.n	8008a20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2201      	movs	r2, #1
 80088c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2b0c      	cmp	r3, #12
 80088ce:	f200 809f 	bhi.w	8008a10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80088d2:	a201      	add	r2, pc, #4	; (adr r2, 80088d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80088d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d8:	0800890d 	.word	0x0800890d
 80088dc:	08008a11 	.word	0x08008a11
 80088e0:	08008a11 	.word	0x08008a11
 80088e4:	08008a11 	.word	0x08008a11
 80088e8:	0800894d 	.word	0x0800894d
 80088ec:	08008a11 	.word	0x08008a11
 80088f0:	08008a11 	.word	0x08008a11
 80088f4:	08008a11 	.word	0x08008a11
 80088f8:	0800898f 	.word	0x0800898f
 80088fc:	08008a11 	.word	0x08008a11
 8008900:	08008a11 	.word	0x08008a11
 8008904:	08008a11 	.word	0x08008a11
 8008908:	080089cf 	.word	0x080089cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	68b9      	ldr	r1, [r7, #8]
 8008912:	4618      	mov	r0, r3
 8008914:	f000 f9f0 	bl	8008cf8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	699a      	ldr	r2, [r3, #24]
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f042 0208 	orr.w	r2, r2, #8
 8008926:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	699a      	ldr	r2, [r3, #24]
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f022 0204 	bic.w	r2, r2, #4
 8008936:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	6999      	ldr	r1, [r3, #24]
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	691a      	ldr	r2, [r3, #16]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	430a      	orrs	r2, r1
 8008948:	619a      	str	r2, [r3, #24]
      break;
 800894a:	e064      	b.n	8008a16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	68b9      	ldr	r1, [r7, #8]
 8008952:	4618      	mov	r0, r3
 8008954:	f000 fa40 	bl	8008dd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	699a      	ldr	r2, [r3, #24]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008966:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	699a      	ldr	r2, [r3, #24]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008976:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	6999      	ldr	r1, [r3, #24]
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	691b      	ldr	r3, [r3, #16]
 8008982:	021a      	lsls	r2, r3, #8
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	430a      	orrs	r2, r1
 800898a:	619a      	str	r2, [r3, #24]
      break;
 800898c:	e043      	b.n	8008a16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	68b9      	ldr	r1, [r7, #8]
 8008994:	4618      	mov	r0, r3
 8008996:	f000 fa95 	bl	8008ec4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	69da      	ldr	r2, [r3, #28]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f042 0208 	orr.w	r2, r2, #8
 80089a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	69da      	ldr	r2, [r3, #28]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f022 0204 	bic.w	r2, r2, #4
 80089b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	69d9      	ldr	r1, [r3, #28]
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	691a      	ldr	r2, [r3, #16]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	430a      	orrs	r2, r1
 80089ca:	61da      	str	r2, [r3, #28]
      break;
 80089cc:	e023      	b.n	8008a16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	68b9      	ldr	r1, [r7, #8]
 80089d4:	4618      	mov	r0, r3
 80089d6:	f000 fae9 	bl	8008fac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	69da      	ldr	r2, [r3, #28]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	69da      	ldr	r2, [r3, #28]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	69d9      	ldr	r1, [r3, #28]
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	691b      	ldr	r3, [r3, #16]
 8008a04:	021a      	lsls	r2, r3, #8
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	430a      	orrs	r2, r1
 8008a0c:	61da      	str	r2, [r3, #28]
      break;
 8008a0e:	e002      	b.n	8008a16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	75fb      	strb	r3, [r7, #23]
      break;
 8008a14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3718      	adds	r7, #24
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a32:	2300      	movs	r3, #0
 8008a34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d101      	bne.n	8008a44 <HAL_TIM_ConfigClockSource+0x1c>
 8008a40:	2302      	movs	r3, #2
 8008a42:	e0b4      	b.n	8008bae <HAL_TIM_ConfigClockSource+0x186>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2202      	movs	r2, #2
 8008a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008a62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	68ba      	ldr	r2, [r7, #8]
 8008a72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a7c:	d03e      	beq.n	8008afc <HAL_TIM_ConfigClockSource+0xd4>
 8008a7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a82:	f200 8087 	bhi.w	8008b94 <HAL_TIM_ConfigClockSource+0x16c>
 8008a86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a8a:	f000 8086 	beq.w	8008b9a <HAL_TIM_ConfigClockSource+0x172>
 8008a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a92:	d87f      	bhi.n	8008b94 <HAL_TIM_ConfigClockSource+0x16c>
 8008a94:	2b70      	cmp	r3, #112	; 0x70
 8008a96:	d01a      	beq.n	8008ace <HAL_TIM_ConfigClockSource+0xa6>
 8008a98:	2b70      	cmp	r3, #112	; 0x70
 8008a9a:	d87b      	bhi.n	8008b94 <HAL_TIM_ConfigClockSource+0x16c>
 8008a9c:	2b60      	cmp	r3, #96	; 0x60
 8008a9e:	d050      	beq.n	8008b42 <HAL_TIM_ConfigClockSource+0x11a>
 8008aa0:	2b60      	cmp	r3, #96	; 0x60
 8008aa2:	d877      	bhi.n	8008b94 <HAL_TIM_ConfigClockSource+0x16c>
 8008aa4:	2b50      	cmp	r3, #80	; 0x50
 8008aa6:	d03c      	beq.n	8008b22 <HAL_TIM_ConfigClockSource+0xfa>
 8008aa8:	2b50      	cmp	r3, #80	; 0x50
 8008aaa:	d873      	bhi.n	8008b94 <HAL_TIM_ConfigClockSource+0x16c>
 8008aac:	2b40      	cmp	r3, #64	; 0x40
 8008aae:	d058      	beq.n	8008b62 <HAL_TIM_ConfigClockSource+0x13a>
 8008ab0:	2b40      	cmp	r3, #64	; 0x40
 8008ab2:	d86f      	bhi.n	8008b94 <HAL_TIM_ConfigClockSource+0x16c>
 8008ab4:	2b30      	cmp	r3, #48	; 0x30
 8008ab6:	d064      	beq.n	8008b82 <HAL_TIM_ConfigClockSource+0x15a>
 8008ab8:	2b30      	cmp	r3, #48	; 0x30
 8008aba:	d86b      	bhi.n	8008b94 <HAL_TIM_ConfigClockSource+0x16c>
 8008abc:	2b20      	cmp	r3, #32
 8008abe:	d060      	beq.n	8008b82 <HAL_TIM_ConfigClockSource+0x15a>
 8008ac0:	2b20      	cmp	r3, #32
 8008ac2:	d867      	bhi.n	8008b94 <HAL_TIM_ConfigClockSource+0x16c>
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d05c      	beq.n	8008b82 <HAL_TIM_ConfigClockSource+0x15a>
 8008ac8:	2b10      	cmp	r3, #16
 8008aca:	d05a      	beq.n	8008b82 <HAL_TIM_ConfigClockSource+0x15a>
 8008acc:	e062      	b.n	8008b94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6818      	ldr	r0, [r3, #0]
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	6899      	ldr	r1, [r3, #8]
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	685a      	ldr	r2, [r3, #4]
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	f000 fb35 	bl	800914c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008af0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	68ba      	ldr	r2, [r7, #8]
 8008af8:	609a      	str	r2, [r3, #8]
      break;
 8008afa:	e04f      	b.n	8008b9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6818      	ldr	r0, [r3, #0]
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	6899      	ldr	r1, [r3, #8]
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	685a      	ldr	r2, [r3, #4]
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	f000 fb1e 	bl	800914c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	689a      	ldr	r2, [r3, #8]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b1e:	609a      	str	r2, [r3, #8]
      break;
 8008b20:	e03c      	b.n	8008b9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6818      	ldr	r0, [r3, #0]
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	6859      	ldr	r1, [r3, #4]
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	461a      	mov	r2, r3
 8008b30:	f000 fa92 	bl	8009058 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	2150      	movs	r1, #80	; 0x50
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f000 faeb 	bl	8009116 <TIM_ITRx_SetConfig>
      break;
 8008b40:	e02c      	b.n	8008b9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6818      	ldr	r0, [r3, #0]
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	6859      	ldr	r1, [r3, #4]
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	68db      	ldr	r3, [r3, #12]
 8008b4e:	461a      	mov	r2, r3
 8008b50:	f000 fab1 	bl	80090b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2160      	movs	r1, #96	; 0x60
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f000 fadb 	bl	8009116 <TIM_ITRx_SetConfig>
      break;
 8008b60:	e01c      	b.n	8008b9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6818      	ldr	r0, [r3, #0]
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	6859      	ldr	r1, [r3, #4]
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	461a      	mov	r2, r3
 8008b70:	f000 fa72 	bl	8009058 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	2140      	movs	r1, #64	; 0x40
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f000 facb 	bl	8009116 <TIM_ITRx_SetConfig>
      break;
 8008b80:	e00c      	b.n	8008b9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	4610      	mov	r0, r2
 8008b8e:	f000 fac2 	bl	8009116 <TIM_ITRx_SetConfig>
      break;
 8008b92:	e003      	b.n	8008b9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	73fb      	strb	r3, [r7, #15]
      break;
 8008b98:	e000      	b.n	8008b9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008b9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
	...

08008bb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b085      	sub	sp, #20
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	4a40      	ldr	r2, [pc, #256]	; (8008ccc <TIM_Base_SetConfig+0x114>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d013      	beq.n	8008bf8 <TIM_Base_SetConfig+0x40>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bd6:	d00f      	beq.n	8008bf8 <TIM_Base_SetConfig+0x40>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4a3d      	ldr	r2, [pc, #244]	; (8008cd0 <TIM_Base_SetConfig+0x118>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d00b      	beq.n	8008bf8 <TIM_Base_SetConfig+0x40>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a3c      	ldr	r2, [pc, #240]	; (8008cd4 <TIM_Base_SetConfig+0x11c>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d007      	beq.n	8008bf8 <TIM_Base_SetConfig+0x40>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4a3b      	ldr	r2, [pc, #236]	; (8008cd8 <TIM_Base_SetConfig+0x120>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d003      	beq.n	8008bf8 <TIM_Base_SetConfig+0x40>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	4a3a      	ldr	r2, [pc, #232]	; (8008cdc <TIM_Base_SetConfig+0x124>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d108      	bne.n	8008c0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	68fa      	ldr	r2, [r7, #12]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	4a2f      	ldr	r2, [pc, #188]	; (8008ccc <TIM_Base_SetConfig+0x114>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d02b      	beq.n	8008c6a <TIM_Base_SetConfig+0xb2>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c18:	d027      	beq.n	8008c6a <TIM_Base_SetConfig+0xb2>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	4a2c      	ldr	r2, [pc, #176]	; (8008cd0 <TIM_Base_SetConfig+0x118>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d023      	beq.n	8008c6a <TIM_Base_SetConfig+0xb2>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4a2b      	ldr	r2, [pc, #172]	; (8008cd4 <TIM_Base_SetConfig+0x11c>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d01f      	beq.n	8008c6a <TIM_Base_SetConfig+0xb2>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	4a2a      	ldr	r2, [pc, #168]	; (8008cd8 <TIM_Base_SetConfig+0x120>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d01b      	beq.n	8008c6a <TIM_Base_SetConfig+0xb2>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4a29      	ldr	r2, [pc, #164]	; (8008cdc <TIM_Base_SetConfig+0x124>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d017      	beq.n	8008c6a <TIM_Base_SetConfig+0xb2>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	4a28      	ldr	r2, [pc, #160]	; (8008ce0 <TIM_Base_SetConfig+0x128>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d013      	beq.n	8008c6a <TIM_Base_SetConfig+0xb2>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	4a27      	ldr	r2, [pc, #156]	; (8008ce4 <TIM_Base_SetConfig+0x12c>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d00f      	beq.n	8008c6a <TIM_Base_SetConfig+0xb2>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4a26      	ldr	r2, [pc, #152]	; (8008ce8 <TIM_Base_SetConfig+0x130>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d00b      	beq.n	8008c6a <TIM_Base_SetConfig+0xb2>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	4a25      	ldr	r2, [pc, #148]	; (8008cec <TIM_Base_SetConfig+0x134>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d007      	beq.n	8008c6a <TIM_Base_SetConfig+0xb2>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	4a24      	ldr	r2, [pc, #144]	; (8008cf0 <TIM_Base_SetConfig+0x138>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d003      	beq.n	8008c6a <TIM_Base_SetConfig+0xb2>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a23      	ldr	r2, [pc, #140]	; (8008cf4 <TIM_Base_SetConfig+0x13c>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d108      	bne.n	8008c7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	68fa      	ldr	r2, [r7, #12]
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	695b      	ldr	r3, [r3, #20]
 8008c86:	4313      	orrs	r3, r2
 8008c88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	689a      	ldr	r2, [r3, #8]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4a0a      	ldr	r2, [pc, #40]	; (8008ccc <TIM_Base_SetConfig+0x114>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d003      	beq.n	8008cb0 <TIM_Base_SetConfig+0xf8>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a0c      	ldr	r2, [pc, #48]	; (8008cdc <TIM_Base_SetConfig+0x124>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d103      	bne.n	8008cb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	691a      	ldr	r2, [r3, #16]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	615a      	str	r2, [r3, #20]
}
 8008cbe:	bf00      	nop
 8008cc0:	3714      	adds	r7, #20
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop
 8008ccc:	40010000 	.word	0x40010000
 8008cd0:	40000400 	.word	0x40000400
 8008cd4:	40000800 	.word	0x40000800
 8008cd8:	40000c00 	.word	0x40000c00
 8008cdc:	40010400 	.word	0x40010400
 8008ce0:	40014000 	.word	0x40014000
 8008ce4:	40014400 	.word	0x40014400
 8008ce8:	40014800 	.word	0x40014800
 8008cec:	40001800 	.word	0x40001800
 8008cf0:	40001c00 	.word	0x40001c00
 8008cf4:	40002000 	.word	0x40002000

08008cf8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b087      	sub	sp, #28
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6a1b      	ldr	r3, [r3, #32]
 8008d06:	f023 0201 	bic.w	r2, r3, #1
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6a1b      	ldr	r3, [r3, #32]
 8008d12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	699b      	ldr	r3, [r3, #24]
 8008d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f023 0303 	bic.w	r3, r3, #3
 8008d2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	68fa      	ldr	r2, [r7, #12]
 8008d36:	4313      	orrs	r3, r2
 8008d38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	f023 0302 	bic.w	r3, r3, #2
 8008d40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	697a      	ldr	r2, [r7, #20]
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	4a20      	ldr	r2, [pc, #128]	; (8008dd0 <TIM_OC1_SetConfig+0xd8>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d003      	beq.n	8008d5c <TIM_OC1_SetConfig+0x64>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	4a1f      	ldr	r2, [pc, #124]	; (8008dd4 <TIM_OC1_SetConfig+0xdc>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d10c      	bne.n	8008d76 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	f023 0308 	bic.w	r3, r3, #8
 8008d62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	697a      	ldr	r2, [r7, #20]
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	f023 0304 	bic.w	r3, r3, #4
 8008d74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a15      	ldr	r2, [pc, #84]	; (8008dd0 <TIM_OC1_SetConfig+0xd8>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d003      	beq.n	8008d86 <TIM_OC1_SetConfig+0x8e>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4a14      	ldr	r2, [pc, #80]	; (8008dd4 <TIM_OC1_SetConfig+0xdc>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d111      	bne.n	8008daa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	695b      	ldr	r3, [r3, #20]
 8008d9a:	693a      	ldr	r2, [r7, #16]
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	699b      	ldr	r3, [r3, #24]
 8008da4:	693a      	ldr	r2, [r7, #16]
 8008da6:	4313      	orrs	r3, r2
 8008da8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	693a      	ldr	r2, [r7, #16]
 8008dae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	685a      	ldr	r2, [r3, #4]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	697a      	ldr	r2, [r7, #20]
 8008dc2:	621a      	str	r2, [r3, #32]
}
 8008dc4:	bf00      	nop
 8008dc6:	371c      	adds	r7, #28
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr
 8008dd0:	40010000 	.word	0x40010000
 8008dd4:	40010400 	.word	0x40010400

08008dd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b087      	sub	sp, #28
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6a1b      	ldr	r3, [r3, #32]
 8008de6:	f023 0210 	bic.w	r2, r3, #16
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6a1b      	ldr	r3, [r3, #32]
 8008df2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	699b      	ldr	r3, [r3, #24]
 8008dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	021b      	lsls	r3, r3, #8
 8008e16:	68fa      	ldr	r2, [r7, #12]
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	f023 0320 	bic.w	r3, r3, #32
 8008e22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	011b      	lsls	r3, r3, #4
 8008e2a:	697a      	ldr	r2, [r7, #20]
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	4a22      	ldr	r2, [pc, #136]	; (8008ebc <TIM_OC2_SetConfig+0xe4>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d003      	beq.n	8008e40 <TIM_OC2_SetConfig+0x68>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	4a21      	ldr	r2, [pc, #132]	; (8008ec0 <TIM_OC2_SetConfig+0xe8>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d10d      	bne.n	8008e5c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	011b      	lsls	r3, r3, #4
 8008e4e:	697a      	ldr	r2, [r7, #20]
 8008e50:	4313      	orrs	r3, r2
 8008e52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	4a17      	ldr	r2, [pc, #92]	; (8008ebc <TIM_OC2_SetConfig+0xe4>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d003      	beq.n	8008e6c <TIM_OC2_SetConfig+0x94>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	4a16      	ldr	r2, [pc, #88]	; (8008ec0 <TIM_OC2_SetConfig+0xe8>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d113      	bne.n	8008e94 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	695b      	ldr	r3, [r3, #20]
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	693a      	ldr	r2, [r7, #16]
 8008e84:	4313      	orrs	r3, r2
 8008e86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	699b      	ldr	r3, [r3, #24]
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	693a      	ldr	r2, [r7, #16]
 8008e90:	4313      	orrs	r3, r2
 8008e92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	693a      	ldr	r2, [r7, #16]
 8008e98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	68fa      	ldr	r2, [r7, #12]
 8008e9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	685a      	ldr	r2, [r3, #4]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	697a      	ldr	r2, [r7, #20]
 8008eac:	621a      	str	r2, [r3, #32]
}
 8008eae:	bf00      	nop
 8008eb0:	371c      	adds	r7, #28
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop
 8008ebc:	40010000 	.word	0x40010000
 8008ec0:	40010400 	.word	0x40010400

08008ec4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b087      	sub	sp, #28
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6a1b      	ldr	r3, [r3, #32]
 8008ed2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6a1b      	ldr	r3, [r3, #32]
 8008ede:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	69db      	ldr	r3, [r3, #28]
 8008eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f023 0303 	bic.w	r3, r3, #3
 8008efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	4313      	orrs	r3, r2
 8008f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	021b      	lsls	r3, r3, #8
 8008f14:	697a      	ldr	r2, [r7, #20]
 8008f16:	4313      	orrs	r3, r2
 8008f18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	4a21      	ldr	r2, [pc, #132]	; (8008fa4 <TIM_OC3_SetConfig+0xe0>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d003      	beq.n	8008f2a <TIM_OC3_SetConfig+0x66>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	4a20      	ldr	r2, [pc, #128]	; (8008fa8 <TIM_OC3_SetConfig+0xe4>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d10d      	bne.n	8008f46 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	021b      	lsls	r3, r3, #8
 8008f38:	697a      	ldr	r2, [r7, #20]
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	4a16      	ldr	r2, [pc, #88]	; (8008fa4 <TIM_OC3_SetConfig+0xe0>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d003      	beq.n	8008f56 <TIM_OC3_SetConfig+0x92>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	4a15      	ldr	r2, [pc, #84]	; (8008fa8 <TIM_OC3_SetConfig+0xe4>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d113      	bne.n	8008f7e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	695b      	ldr	r3, [r3, #20]
 8008f6a:	011b      	lsls	r3, r3, #4
 8008f6c:	693a      	ldr	r2, [r7, #16]
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	699b      	ldr	r3, [r3, #24]
 8008f76:	011b      	lsls	r3, r3, #4
 8008f78:	693a      	ldr	r2, [r7, #16]
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	693a      	ldr	r2, [r7, #16]
 8008f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	68fa      	ldr	r2, [r7, #12]
 8008f88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	685a      	ldr	r2, [r3, #4]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	697a      	ldr	r2, [r7, #20]
 8008f96:	621a      	str	r2, [r3, #32]
}
 8008f98:	bf00      	nop
 8008f9a:	371c      	adds	r7, #28
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr
 8008fa4:	40010000 	.word	0x40010000
 8008fa8:	40010400 	.word	0x40010400

08008fac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b087      	sub	sp, #28
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6a1b      	ldr	r3, [r3, #32]
 8008fba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6a1b      	ldr	r3, [r3, #32]
 8008fc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	69db      	ldr	r3, [r3, #28]
 8008fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	021b      	lsls	r3, r3, #8
 8008fea:	68fa      	ldr	r2, [r7, #12]
 8008fec:	4313      	orrs	r3, r2
 8008fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ff6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	031b      	lsls	r3, r3, #12
 8008ffe:	693a      	ldr	r2, [r7, #16]
 8009000:	4313      	orrs	r3, r2
 8009002:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	4a12      	ldr	r2, [pc, #72]	; (8009050 <TIM_OC4_SetConfig+0xa4>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d003      	beq.n	8009014 <TIM_OC4_SetConfig+0x68>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4a11      	ldr	r2, [pc, #68]	; (8009054 <TIM_OC4_SetConfig+0xa8>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d109      	bne.n	8009028 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800901a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	695b      	ldr	r3, [r3, #20]
 8009020:	019b      	lsls	r3, r3, #6
 8009022:	697a      	ldr	r2, [r7, #20]
 8009024:	4313      	orrs	r3, r2
 8009026:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	697a      	ldr	r2, [r7, #20]
 800902c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	685a      	ldr	r2, [r3, #4]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	693a      	ldr	r2, [r7, #16]
 8009040:	621a      	str	r2, [r3, #32]
}
 8009042:	bf00      	nop
 8009044:	371c      	adds	r7, #28
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop
 8009050:	40010000 	.word	0x40010000
 8009054:	40010400 	.word	0x40010400

08009058 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009058:	b480      	push	{r7}
 800905a:	b087      	sub	sp, #28
 800905c:	af00      	add	r7, sp, #0
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	60b9      	str	r1, [r7, #8]
 8009062:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	6a1b      	ldr	r3, [r3, #32]
 8009068:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	6a1b      	ldr	r3, [r3, #32]
 800906e:	f023 0201 	bic.w	r2, r3, #1
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	699b      	ldr	r3, [r3, #24]
 800907a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009082:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	011b      	lsls	r3, r3, #4
 8009088:	693a      	ldr	r2, [r7, #16]
 800908a:	4313      	orrs	r3, r2
 800908c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	f023 030a 	bic.w	r3, r3, #10
 8009094:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009096:	697a      	ldr	r2, [r7, #20]
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	4313      	orrs	r3, r2
 800909c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	693a      	ldr	r2, [r7, #16]
 80090a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	697a      	ldr	r2, [r7, #20]
 80090a8:	621a      	str	r2, [r3, #32]
}
 80090aa:	bf00      	nop
 80090ac:	371c      	adds	r7, #28
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr

080090b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090b6:	b480      	push	{r7}
 80090b8:	b087      	sub	sp, #28
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	60f8      	str	r0, [r7, #12]
 80090be:	60b9      	str	r1, [r7, #8]
 80090c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6a1b      	ldr	r3, [r3, #32]
 80090c6:	f023 0210 	bic.w	r2, r3, #16
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	699b      	ldr	r3, [r3, #24]
 80090d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	6a1b      	ldr	r3, [r3, #32]
 80090d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80090e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	031b      	lsls	r3, r3, #12
 80090e6:	697a      	ldr	r2, [r7, #20]
 80090e8:	4313      	orrs	r3, r2
 80090ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80090f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	011b      	lsls	r3, r3, #4
 80090f8:	693a      	ldr	r2, [r7, #16]
 80090fa:	4313      	orrs	r3, r2
 80090fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	697a      	ldr	r2, [r7, #20]
 8009102:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	693a      	ldr	r2, [r7, #16]
 8009108:	621a      	str	r2, [r3, #32]
}
 800910a:	bf00      	nop
 800910c:	371c      	adds	r7, #28
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr

08009116 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009116:	b480      	push	{r7}
 8009118:	b085      	sub	sp, #20
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
 800911e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800912c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800912e:	683a      	ldr	r2, [r7, #0]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	4313      	orrs	r3, r2
 8009134:	f043 0307 	orr.w	r3, r3, #7
 8009138:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	68fa      	ldr	r2, [r7, #12]
 800913e:	609a      	str	r2, [r3, #8]
}
 8009140:	bf00      	nop
 8009142:	3714      	adds	r7, #20
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800914c:	b480      	push	{r7}
 800914e:	b087      	sub	sp, #28
 8009150:	af00      	add	r7, sp, #0
 8009152:	60f8      	str	r0, [r7, #12]
 8009154:	60b9      	str	r1, [r7, #8]
 8009156:	607a      	str	r2, [r7, #4]
 8009158:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009166:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	021a      	lsls	r2, r3, #8
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	431a      	orrs	r2, r3
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	4313      	orrs	r3, r2
 8009174:	697a      	ldr	r2, [r7, #20]
 8009176:	4313      	orrs	r3, r2
 8009178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	697a      	ldr	r2, [r7, #20]
 800917e:	609a      	str	r2, [r3, #8]
}
 8009180:	bf00      	nop
 8009182:	371c      	adds	r7, #28
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800918c:	b480      	push	{r7}
 800918e:	b087      	sub	sp, #28
 8009190:	af00      	add	r7, sp, #0
 8009192:	60f8      	str	r0, [r7, #12]
 8009194:	60b9      	str	r1, [r7, #8]
 8009196:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	f003 031f 	and.w	r3, r3, #31
 800919e:	2201      	movs	r2, #1
 80091a0:	fa02 f303 	lsl.w	r3, r2, r3
 80091a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	6a1a      	ldr	r2, [r3, #32]
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	43db      	mvns	r3, r3
 80091ae:	401a      	ands	r2, r3
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6a1a      	ldr	r2, [r3, #32]
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	f003 031f 	and.w	r3, r3, #31
 80091be:	6879      	ldr	r1, [r7, #4]
 80091c0:	fa01 f303 	lsl.w	r3, r1, r3
 80091c4:	431a      	orrs	r2, r3
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	621a      	str	r2, [r3, #32]
}
 80091ca:	bf00      	nop
 80091cc:	371c      	adds	r7, #28
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr
	...

080091d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80091d8:	b480      	push	{r7}
 80091da:	b085      	sub	sp, #20
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d101      	bne.n	80091f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80091ec:	2302      	movs	r3, #2
 80091ee:	e05a      	b.n	80092a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2202      	movs	r2, #2
 80091fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009216:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	68fa      	ldr	r2, [r7, #12]
 800921e:	4313      	orrs	r3, r2
 8009220:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	68fa      	ldr	r2, [r7, #12]
 8009228:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4a21      	ldr	r2, [pc, #132]	; (80092b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d022      	beq.n	800927a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800923c:	d01d      	beq.n	800927a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a1d      	ldr	r2, [pc, #116]	; (80092b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d018      	beq.n	800927a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a1b      	ldr	r2, [pc, #108]	; (80092bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d013      	beq.n	800927a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a1a      	ldr	r2, [pc, #104]	; (80092c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d00e      	beq.n	800927a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a18      	ldr	r2, [pc, #96]	; (80092c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d009      	beq.n	800927a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a17      	ldr	r2, [pc, #92]	; (80092c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d004      	beq.n	800927a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a15      	ldr	r2, [pc, #84]	; (80092cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d10c      	bne.n	8009294 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009280:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	68ba      	ldr	r2, [r7, #8]
 8009288:	4313      	orrs	r3, r2
 800928a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	68ba      	ldr	r2, [r7, #8]
 8009292:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2201      	movs	r2, #1
 8009298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80092a4:	2300      	movs	r3, #0
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3714      	adds	r7, #20
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr
 80092b2:	bf00      	nop
 80092b4:	40010000 	.word	0x40010000
 80092b8:	40000400 	.word	0x40000400
 80092bc:	40000800 	.word	0x40000800
 80092c0:	40000c00 	.word	0x40000c00
 80092c4:	40010400 	.word	0x40010400
 80092c8:	40014000 	.word	0x40014000
 80092cc:	40001800 	.word	0x40001800

080092d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b082      	sub	sp, #8
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d101      	bne.n	80092e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80092de:	2301      	movs	r3, #1
 80092e0:	e03f      	b.n	8009362 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d106      	bne.n	80092fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f7fa f976 	bl	80035e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2224      	movs	r2, #36	; 0x24
 8009300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	68da      	ldr	r2, [r3, #12]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009312:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 ff49 	bl	800a1ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	691a      	ldr	r2, [r3, #16]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009328:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	695a      	ldr	r2, [r3, #20]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009338:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	68da      	ldr	r2, [r3, #12]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009348:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2200      	movs	r2, #0
 800934e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2220      	movs	r2, #32
 8009354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2220      	movs	r2, #32
 800935c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009360:	2300      	movs	r3, #0
}
 8009362:	4618      	mov	r0, r3
 8009364:	3708      	adds	r7, #8
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
	...

0800936c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b08c      	sub	sp, #48	; 0x30
 8009370:	af00      	add	r7, sp, #0
 8009372:	60f8      	str	r0, [r7, #12]
 8009374:	60b9      	str	r1, [r7, #8]
 8009376:	4613      	mov	r3, r2
 8009378:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009380:	b2db      	uxtb	r3, r3
 8009382:	2b20      	cmp	r3, #32
 8009384:	d165      	bne.n	8009452 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d002      	beq.n	8009392 <HAL_UART_Transmit_DMA+0x26>
 800938c:	88fb      	ldrh	r3, [r7, #6]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d101      	bne.n	8009396 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8009392:	2301      	movs	r3, #1
 8009394:	e05e      	b.n	8009454 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800939c:	2b01      	cmp	r3, #1
 800939e:	d101      	bne.n	80093a4 <HAL_UART_Transmit_DMA+0x38>
 80093a0:	2302      	movs	r3, #2
 80093a2:	e057      	b.n	8009454 <HAL_UART_Transmit_DMA+0xe8>
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2201      	movs	r2, #1
 80093a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80093ac:	68ba      	ldr	r2, [r7, #8]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	88fa      	ldrh	r2, [r7, #6]
 80093b6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	88fa      	ldrh	r2, [r7, #6]
 80093bc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2200      	movs	r2, #0
 80093c2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2221      	movs	r2, #33	; 0x21
 80093c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093d0:	4a22      	ldr	r2, [pc, #136]	; (800945c <HAL_UART_Transmit_DMA+0xf0>)
 80093d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093d8:	4a21      	ldr	r2, [pc, #132]	; (8009460 <HAL_UART_Transmit_DMA+0xf4>)
 80093da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093e0:	4a20      	ldr	r2, [pc, #128]	; (8009464 <HAL_UART_Transmit_DMA+0xf8>)
 80093e2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093e8:	2200      	movs	r2, #0
 80093ea:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80093ec:	f107 0308 	add.w	r3, r7, #8
 80093f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80093f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f8:	6819      	ldr	r1, [r3, #0]
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	3304      	adds	r3, #4
 8009400:	461a      	mov	r2, r3
 8009402:	88fb      	ldrh	r3, [r7, #6]
 8009404:	f7fa fea8 	bl	8004158 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009410:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2200      	movs	r2, #0
 8009416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	3314      	adds	r3, #20
 8009420:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009422:	69bb      	ldr	r3, [r7, #24]
 8009424:	e853 3f00 	ldrex	r3, [r3]
 8009428:	617b      	str	r3, [r7, #20]
   return(result);
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009430:	62bb      	str	r3, [r7, #40]	; 0x28
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	3314      	adds	r3, #20
 8009438:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800943a:	627a      	str	r2, [r7, #36]	; 0x24
 800943c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800943e:	6a39      	ldr	r1, [r7, #32]
 8009440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009442:	e841 2300 	strex	r3, r2, [r1]
 8009446:	61fb      	str	r3, [r7, #28]
   return(result);
 8009448:	69fb      	ldr	r3, [r7, #28]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d1e5      	bne.n	800941a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800944e:	2300      	movs	r3, #0
 8009450:	e000      	b.n	8009454 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8009452:	2302      	movs	r3, #2
  }
}
 8009454:	4618      	mov	r0, r3
 8009456:	3730      	adds	r7, #48	; 0x30
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	08009a4d 	.word	0x08009a4d
 8009460:	08009ae7 	.word	0x08009ae7
 8009464:	08009c5f 	.word	0x08009c5f

08009468 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	4613      	mov	r3, r2
 8009474:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800947c:	b2db      	uxtb	r3, r3
 800947e:	2b20      	cmp	r3, #32
 8009480:	d11d      	bne.n	80094be <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d002      	beq.n	800948e <HAL_UART_Receive_DMA+0x26>
 8009488:	88fb      	ldrh	r3, [r7, #6]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d101      	bne.n	8009492 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800948e:	2301      	movs	r3, #1
 8009490:	e016      	b.n	80094c0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009498:	2b01      	cmp	r3, #1
 800949a:	d101      	bne.n	80094a0 <HAL_UART_Receive_DMA+0x38>
 800949c:	2302      	movs	r3, #2
 800949e:	e00f      	b.n	80094c0 <HAL_UART_Receive_DMA+0x58>
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2201      	movs	r2, #1
 80094a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2200      	movs	r2, #0
 80094ac:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80094ae:	88fb      	ldrh	r3, [r7, #6]
 80094b0:	461a      	mov	r2, r3
 80094b2:	68b9      	ldr	r1, [r7, #8]
 80094b4:	68f8      	ldr	r0, [r7, #12]
 80094b6:	f000 fc1d 	bl	8009cf4 <UART_Start_Receive_DMA>
 80094ba:	4603      	mov	r3, r0
 80094bc:	e000      	b.n	80094c0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80094be:	2302      	movs	r3, #2
  }
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3710      	adds	r7, #16
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b0ba      	sub	sp, #232	; 0xe8
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	68db      	ldr	r3, [r3, #12]
 80094e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	695b      	ldr	r3, [r3, #20]
 80094ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80094ee:	2300      	movs	r3, #0
 80094f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80094f4:	2300      	movs	r3, #0
 80094f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80094fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094fe:	f003 030f 	and.w	r3, r3, #15
 8009502:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009506:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800950a:	2b00      	cmp	r3, #0
 800950c:	d10f      	bne.n	800952e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800950e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009512:	f003 0320 	and.w	r3, r3, #32
 8009516:	2b00      	cmp	r3, #0
 8009518:	d009      	beq.n	800952e <HAL_UART_IRQHandler+0x66>
 800951a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800951e:	f003 0320 	and.w	r3, r3, #32
 8009522:	2b00      	cmp	r3, #0
 8009524:	d003      	beq.n	800952e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 fd85 	bl	800a036 <UART_Receive_IT>
      return;
 800952c:	e256      	b.n	80099dc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800952e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009532:	2b00      	cmp	r3, #0
 8009534:	f000 80de 	beq.w	80096f4 <HAL_UART_IRQHandler+0x22c>
 8009538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800953c:	f003 0301 	and.w	r3, r3, #1
 8009540:	2b00      	cmp	r3, #0
 8009542:	d106      	bne.n	8009552 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009548:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800954c:	2b00      	cmp	r3, #0
 800954e:	f000 80d1 	beq.w	80096f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009556:	f003 0301 	and.w	r3, r3, #1
 800955a:	2b00      	cmp	r3, #0
 800955c:	d00b      	beq.n	8009576 <HAL_UART_IRQHandler+0xae>
 800955e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009566:	2b00      	cmp	r3, #0
 8009568:	d005      	beq.n	8009576 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800956e:	f043 0201 	orr.w	r2, r3, #1
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800957a:	f003 0304 	and.w	r3, r3, #4
 800957e:	2b00      	cmp	r3, #0
 8009580:	d00b      	beq.n	800959a <HAL_UART_IRQHandler+0xd2>
 8009582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009586:	f003 0301 	and.w	r3, r3, #1
 800958a:	2b00      	cmp	r3, #0
 800958c:	d005      	beq.n	800959a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009592:	f043 0202 	orr.w	r2, r3, #2
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800959a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800959e:	f003 0302 	and.w	r3, r3, #2
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d00b      	beq.n	80095be <HAL_UART_IRQHandler+0xf6>
 80095a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095aa:	f003 0301 	and.w	r3, r3, #1
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d005      	beq.n	80095be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b6:	f043 0204 	orr.w	r2, r3, #4
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80095be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095c2:	f003 0308 	and.w	r3, r3, #8
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d011      	beq.n	80095ee <HAL_UART_IRQHandler+0x126>
 80095ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095ce:	f003 0320 	and.w	r3, r3, #32
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d105      	bne.n	80095e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80095d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095da:	f003 0301 	and.w	r3, r3, #1
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d005      	beq.n	80095ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e6:	f043 0208 	orr.w	r2, r3, #8
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	f000 81ed 	beq.w	80099d2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80095f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095fc:	f003 0320 	and.w	r3, r3, #32
 8009600:	2b00      	cmp	r3, #0
 8009602:	d008      	beq.n	8009616 <HAL_UART_IRQHandler+0x14e>
 8009604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009608:	f003 0320 	and.w	r3, r3, #32
 800960c:	2b00      	cmp	r3, #0
 800960e:	d002      	beq.n	8009616 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f000 fd10 	bl	800a036 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	695b      	ldr	r3, [r3, #20]
 800961c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009620:	2b40      	cmp	r3, #64	; 0x40
 8009622:	bf0c      	ite	eq
 8009624:	2301      	moveq	r3, #1
 8009626:	2300      	movne	r3, #0
 8009628:	b2db      	uxtb	r3, r3
 800962a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009632:	f003 0308 	and.w	r3, r3, #8
 8009636:	2b00      	cmp	r3, #0
 8009638:	d103      	bne.n	8009642 <HAL_UART_IRQHandler+0x17a>
 800963a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800963e:	2b00      	cmp	r3, #0
 8009640:	d04f      	beq.n	80096e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 fc18 	bl	8009e78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	695b      	ldr	r3, [r3, #20]
 800964e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009652:	2b40      	cmp	r3, #64	; 0x40
 8009654:	d141      	bne.n	80096da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	3314      	adds	r3, #20
 800965c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009660:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009664:	e853 3f00 	ldrex	r3, [r3]
 8009668:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800966c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009670:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009674:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	3314      	adds	r3, #20
 800967e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009682:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009686:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800968a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800968e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009692:	e841 2300 	strex	r3, r2, [r1]
 8009696:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800969a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d1d9      	bne.n	8009656 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d013      	beq.n	80096d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ae:	4a7d      	ldr	r2, [pc, #500]	; (80098a4 <HAL_UART_IRQHandler+0x3dc>)
 80096b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7fa fe16 	bl	80042e8 <HAL_DMA_Abort_IT>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d016      	beq.n	80096f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80096cc:	4610      	mov	r0, r2
 80096ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096d0:	e00e      	b.n	80096f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 f9a4 	bl	8009a20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096d8:	e00a      	b.n	80096f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 f9a0 	bl	8009a20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096e0:	e006      	b.n	80096f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 f99c 	bl	8009a20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80096ee:	e170      	b.n	80099d2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096f0:	bf00      	nop
    return;
 80096f2:	e16e      	b.n	80099d2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	f040 814a 	bne.w	8009992 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80096fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009702:	f003 0310 	and.w	r3, r3, #16
 8009706:	2b00      	cmp	r3, #0
 8009708:	f000 8143 	beq.w	8009992 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800970c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009710:	f003 0310 	and.w	r3, r3, #16
 8009714:	2b00      	cmp	r3, #0
 8009716:	f000 813c 	beq.w	8009992 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800971a:	2300      	movs	r3, #0
 800971c:	60bb      	str	r3, [r7, #8]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	60bb      	str	r3, [r7, #8]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	60bb      	str	r3, [r7, #8]
 800972e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	695b      	ldr	r3, [r3, #20]
 8009736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800973a:	2b40      	cmp	r3, #64	; 0x40
 800973c:	f040 80b4 	bne.w	80098a8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800974c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009750:	2b00      	cmp	r3, #0
 8009752:	f000 8140 	beq.w	80099d6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800975a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800975e:	429a      	cmp	r2, r3
 8009760:	f080 8139 	bcs.w	80099d6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800976a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009770:	69db      	ldr	r3, [r3, #28]
 8009772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009776:	f000 8088 	beq.w	800988a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	330c      	adds	r3, #12
 8009780:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009784:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009788:	e853 3f00 	ldrex	r3, [r3]
 800978c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009790:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009798:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	330c      	adds	r3, #12
 80097a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80097a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80097aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80097b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80097b6:	e841 2300 	strex	r3, r2, [r1]
 80097ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80097be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d1d9      	bne.n	800977a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	3314      	adds	r3, #20
 80097cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097d0:	e853 3f00 	ldrex	r3, [r3]
 80097d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80097d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80097d8:	f023 0301 	bic.w	r3, r3, #1
 80097dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	3314      	adds	r3, #20
 80097e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80097ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80097ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80097f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80097f6:	e841 2300 	strex	r3, r2, [r1]
 80097fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80097fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d1e1      	bne.n	80097c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	3314      	adds	r3, #20
 8009808:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800980a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800980c:	e853 3f00 	ldrex	r3, [r3]
 8009810:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009814:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009818:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	3314      	adds	r3, #20
 8009822:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009826:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009828:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800982a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800982c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800982e:	e841 2300 	strex	r3, r2, [r1]
 8009832:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009834:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009836:	2b00      	cmp	r3, #0
 8009838:	d1e3      	bne.n	8009802 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2220      	movs	r2, #32
 800983e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	330c      	adds	r3, #12
 800984e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009852:	e853 3f00 	ldrex	r3, [r3]
 8009856:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800985a:	f023 0310 	bic.w	r3, r3, #16
 800985e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	330c      	adds	r3, #12
 8009868:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800986c:	65ba      	str	r2, [r7, #88]	; 0x58
 800986e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009870:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009872:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009874:	e841 2300 	strex	r3, r2, [r1]
 8009878:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800987a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800987c:	2b00      	cmp	r3, #0
 800987e:	d1e3      	bne.n	8009848 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009884:	4618      	mov	r0, r3
 8009886:	f7fa fcbf 	bl	8004208 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009892:	b29b      	uxth	r3, r3
 8009894:	1ad3      	subs	r3, r2, r3
 8009896:	b29b      	uxth	r3, r3
 8009898:	4619      	mov	r1, r3
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 f8ca 	bl	8009a34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80098a0:	e099      	b.n	80099d6 <HAL_UART_IRQHandler+0x50e>
 80098a2:	bf00      	nop
 80098a4:	08009f3f 	.word	0x08009f3f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	1ad3      	subs	r3, r2, r3
 80098b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098bc:	b29b      	uxth	r3, r3
 80098be:	2b00      	cmp	r3, #0
 80098c0:	f000 808b 	beq.w	80099da <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80098c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	f000 8086 	beq.w	80099da <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	330c      	adds	r3, #12
 80098d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d8:	e853 3f00 	ldrex	r3, [r3]
 80098dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80098de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80098e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	330c      	adds	r3, #12
 80098ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80098f2:	647a      	str	r2, [r7, #68]	; 0x44
 80098f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80098f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098fa:	e841 2300 	strex	r3, r2, [r1]
 80098fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009902:	2b00      	cmp	r3, #0
 8009904:	d1e3      	bne.n	80098ce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	3314      	adds	r3, #20
 800990c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800990e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009910:	e853 3f00 	ldrex	r3, [r3]
 8009914:	623b      	str	r3, [r7, #32]
   return(result);
 8009916:	6a3b      	ldr	r3, [r7, #32]
 8009918:	f023 0301 	bic.w	r3, r3, #1
 800991c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	3314      	adds	r3, #20
 8009926:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800992a:	633a      	str	r2, [r7, #48]	; 0x30
 800992c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800992e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009932:	e841 2300 	strex	r3, r2, [r1]
 8009936:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993a:	2b00      	cmp	r3, #0
 800993c:	d1e3      	bne.n	8009906 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2220      	movs	r2, #32
 8009942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2200      	movs	r2, #0
 800994a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	330c      	adds	r3, #12
 8009952:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	e853 3f00 	ldrex	r3, [r3]
 800995a:	60fb      	str	r3, [r7, #12]
   return(result);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f023 0310 	bic.w	r3, r3, #16
 8009962:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	330c      	adds	r3, #12
 800996c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009970:	61fa      	str	r2, [r7, #28]
 8009972:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009974:	69b9      	ldr	r1, [r7, #24]
 8009976:	69fa      	ldr	r2, [r7, #28]
 8009978:	e841 2300 	strex	r3, r2, [r1]
 800997c:	617b      	str	r3, [r7, #20]
   return(result);
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d1e3      	bne.n	800994c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009984:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009988:	4619      	mov	r1, r3
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 f852 	bl	8009a34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009990:	e023      	b.n	80099da <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800999a:	2b00      	cmp	r3, #0
 800999c:	d009      	beq.n	80099b2 <HAL_UART_IRQHandler+0x4ea>
 800999e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d003      	beq.n	80099b2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 fadb 	bl	8009f66 <UART_Transmit_IT>
    return;
 80099b0:	e014      	b.n	80099dc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80099b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d00e      	beq.n	80099dc <HAL_UART_IRQHandler+0x514>
 80099be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d008      	beq.n	80099dc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 fb1b 	bl	800a006 <UART_EndTransmit_IT>
    return;
 80099d0:	e004      	b.n	80099dc <HAL_UART_IRQHandler+0x514>
    return;
 80099d2:	bf00      	nop
 80099d4:	e002      	b.n	80099dc <HAL_UART_IRQHandler+0x514>
      return;
 80099d6:	bf00      	nop
 80099d8:	e000      	b.n	80099dc <HAL_UART_IRQHandler+0x514>
      return;
 80099da:	bf00      	nop
  }
}
 80099dc:	37e8      	adds	r7, #232	; 0xe8
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
 80099e2:	bf00      	nop

080099e4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b083      	sub	sp, #12
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80099ec:	bf00      	nop
 80099ee:	370c      	adds	r7, #12
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr

080099f8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b083      	sub	sp, #12
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009a00:	bf00      	nop
 8009a02:	370c      	adds	r7, #12
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr

08009a0c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009a14:	bf00      	nop
 8009a16:	370c      	adds	r7, #12
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr

08009a20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b083      	sub	sp, #12
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009a28:	bf00      	nop
 8009a2a:	370c      	adds	r7, #12
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009a40:	bf00      	nop
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr

08009a4c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b090      	sub	sp, #64	; 0x40
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a58:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d137      	bne.n	8009ad8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	3314      	adds	r3, #20
 8009a74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a78:	e853 3f00 	ldrex	r3, [r3]
 8009a7c:	623b      	str	r3, [r7, #32]
   return(result);
 8009a7e:	6a3b      	ldr	r3, [r7, #32]
 8009a80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a84:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	3314      	adds	r3, #20
 8009a8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a8e:	633a      	str	r2, [r7, #48]	; 0x30
 8009a90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a96:	e841 2300 	strex	r3, r2, [r1]
 8009a9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d1e5      	bne.n	8009a6e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	330c      	adds	r3, #12
 8009aa8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	e853 3f00 	ldrex	r3, [r3]
 8009ab0:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8009aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	330c      	adds	r3, #12
 8009ac0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ac2:	61fa      	str	r2, [r7, #28]
 8009ac4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac6:	69b9      	ldr	r1, [r7, #24]
 8009ac8:	69fa      	ldr	r2, [r7, #28]
 8009aca:	e841 2300 	strex	r3, r2, [r1]
 8009ace:	617b      	str	r3, [r7, #20]
   return(result);
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d1e5      	bne.n	8009aa2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009ad6:	e002      	b.n	8009ade <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009ad8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009ada:	f7f9 fbab 	bl	8003234 <HAL_UART_TxCpltCallback>
}
 8009ade:	bf00      	nop
 8009ae0:	3740      	adds	r7, #64	; 0x40
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}

08009ae6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009ae6:	b580      	push	{r7, lr}
 8009ae8:	b084      	sub	sp, #16
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009af2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009af4:	68f8      	ldr	r0, [r7, #12]
 8009af6:	f7ff ff75 	bl	80099e4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009afa:	bf00      	nop
 8009afc:	3710      	adds	r7, #16
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}

08009b02 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009b02:	b580      	push	{r7, lr}
 8009b04:	b09c      	sub	sp, #112	; 0x70
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b0e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d172      	bne.n	8009c04 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b20:	2200      	movs	r2, #0
 8009b22:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	330c      	adds	r3, #12
 8009b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b2e:	e853 3f00 	ldrex	r3, [r3]
 8009b32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009b34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	330c      	adds	r3, #12
 8009b42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009b44:	65ba      	str	r2, [r7, #88]	; 0x58
 8009b46:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009b4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b4c:	e841 2300 	strex	r3, r2, [r1]
 8009b50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009b52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d1e5      	bne.n	8009b24 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	3314      	adds	r3, #20
 8009b5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b62:	e853 3f00 	ldrex	r3, [r3]
 8009b66:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b6a:	f023 0301 	bic.w	r3, r3, #1
 8009b6e:	667b      	str	r3, [r7, #100]	; 0x64
 8009b70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	3314      	adds	r3, #20
 8009b76:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009b78:	647a      	str	r2, [r7, #68]	; 0x44
 8009b7a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b7c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b80:	e841 2300 	strex	r3, r2, [r1]
 8009b84:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d1e5      	bne.n	8009b58 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	3314      	adds	r3, #20
 8009b92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b96:	e853 3f00 	ldrex	r3, [r3]
 8009b9a:	623b      	str	r3, [r7, #32]
   return(result);
 8009b9c:	6a3b      	ldr	r3, [r7, #32]
 8009b9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ba2:	663b      	str	r3, [r7, #96]	; 0x60
 8009ba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	3314      	adds	r3, #20
 8009baa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009bac:	633a      	str	r2, [r7, #48]	; 0x30
 8009bae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009bb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bb4:	e841 2300 	strex	r3, r2, [r1]
 8009bb8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d1e5      	bne.n	8009b8c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bc2:	2220      	movs	r2, #32
 8009bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d119      	bne.n	8009c04 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	330c      	adds	r3, #12
 8009bd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	e853 3f00 	ldrex	r3, [r3]
 8009bde:	60fb      	str	r3, [r7, #12]
   return(result);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f023 0310 	bic.w	r3, r3, #16
 8009be6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009be8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	330c      	adds	r3, #12
 8009bee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009bf0:	61fa      	str	r2, [r7, #28]
 8009bf2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf4:	69b9      	ldr	r1, [r7, #24]
 8009bf6:	69fa      	ldr	r2, [r7, #28]
 8009bf8:	e841 2300 	strex	r3, r2, [r1]
 8009bfc:	617b      	str	r3, [r7, #20]
   return(result);
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d1e5      	bne.n	8009bd0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d106      	bne.n	8009c1a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c0e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009c10:	4619      	mov	r1, r3
 8009c12:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009c14:	f7ff ff0e 	bl	8009a34 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009c18:	e002      	b.n	8009c20 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009c1a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009c1c:	f7ff feec 	bl	80099f8 <HAL_UART_RxCpltCallback>
}
 8009c20:	bf00      	nop
 8009c22:	3770      	adds	r7, #112	; 0x70
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b084      	sub	sp, #16
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c34:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d108      	bne.n	8009c50 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009c42:	085b      	lsrs	r3, r3, #1
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	4619      	mov	r1, r3
 8009c48:	68f8      	ldr	r0, [r7, #12]
 8009c4a:	f7ff fef3 	bl	8009a34 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009c4e:	e002      	b.n	8009c56 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009c50:	68f8      	ldr	r0, [r7, #12]
 8009c52:	f7ff fedb 	bl	8009a0c <HAL_UART_RxHalfCpltCallback>
}
 8009c56:	bf00      	nop
 8009c58:	3710      	adds	r7, #16
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}

08009c5e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009c5e:	b580      	push	{r7, lr}
 8009c60:	b084      	sub	sp, #16
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009c66:	2300      	movs	r3, #0
 8009c68:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c6e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	695b      	ldr	r3, [r3, #20]
 8009c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c7a:	2b80      	cmp	r3, #128	; 0x80
 8009c7c:	bf0c      	ite	eq
 8009c7e:	2301      	moveq	r3, #1
 8009c80:	2300      	movne	r3, #0
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	2b21      	cmp	r3, #33	; 0x21
 8009c90:	d108      	bne.n	8009ca4 <UART_DMAError+0x46>
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d005      	beq.n	8009ca4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009c9e:	68b8      	ldr	r0, [r7, #8]
 8009ca0:	f000 f8c2 	bl	8009e28 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	695b      	ldr	r3, [r3, #20]
 8009caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cae:	2b40      	cmp	r3, #64	; 0x40
 8009cb0:	bf0c      	ite	eq
 8009cb2:	2301      	moveq	r3, #1
 8009cb4:	2300      	movne	r3, #0
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009cc0:	b2db      	uxtb	r3, r3
 8009cc2:	2b22      	cmp	r3, #34	; 0x22
 8009cc4:	d108      	bne.n	8009cd8 <UART_DMAError+0x7a>
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d005      	beq.n	8009cd8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009cd2:	68b8      	ldr	r0, [r7, #8]
 8009cd4:	f000 f8d0 	bl	8009e78 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cdc:	f043 0210 	orr.w	r2, r3, #16
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ce4:	68b8      	ldr	r0, [r7, #8]
 8009ce6:	f7ff fe9b 	bl	8009a20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009cea:	bf00      	nop
 8009cec:	3710      	adds	r7, #16
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
	...

08009cf4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b098      	sub	sp, #96	; 0x60
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	60f8      	str	r0, [r7, #12]
 8009cfc:	60b9      	str	r1, [r7, #8]
 8009cfe:	4613      	mov	r3, r2
 8009d00:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009d02:	68ba      	ldr	r2, [r7, #8]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	88fa      	ldrh	r2, [r7, #6]
 8009d0c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2200      	movs	r2, #0
 8009d12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2222      	movs	r2, #34	; 0x22
 8009d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d20:	4a3e      	ldr	r2, [pc, #248]	; (8009e1c <UART_Start_Receive_DMA+0x128>)
 8009d22:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d28:	4a3d      	ldr	r2, [pc, #244]	; (8009e20 <UART_Start_Receive_DMA+0x12c>)
 8009d2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d30:	4a3c      	ldr	r2, [pc, #240]	; (8009e24 <UART_Start_Receive_DMA+0x130>)
 8009d32:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d38:	2200      	movs	r2, #0
 8009d3a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009d3c:	f107 0308 	add.w	r3, r7, #8
 8009d40:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	3304      	adds	r3, #4
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d50:	681a      	ldr	r2, [r3, #0]
 8009d52:	88fb      	ldrh	r3, [r7, #6]
 8009d54:	f7fa fa00 	bl	8004158 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009d58:	2300      	movs	r3, #0
 8009d5a:	613b      	str	r3, [r7, #16]
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	613b      	str	r3, [r7, #16]
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	613b      	str	r3, [r7, #16]
 8009d6c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2200      	movs	r2, #0
 8009d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	330c      	adds	r3, #12
 8009d7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d80:	e853 3f00 	ldrex	r3, [r3]
 8009d84:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	330c      	adds	r3, #12
 8009d94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d96:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009d98:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d9a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009d9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009d9e:	e841 2300 	strex	r3, r2, [r1]
 8009da2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d1e5      	bne.n	8009d76 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	3314      	adds	r3, #20
 8009db0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009db4:	e853 3f00 	ldrex	r3, [r3]
 8009db8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dbc:	f043 0301 	orr.w	r3, r3, #1
 8009dc0:	657b      	str	r3, [r7, #84]	; 0x54
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	3314      	adds	r3, #20
 8009dc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009dca:	63ba      	str	r2, [r7, #56]	; 0x38
 8009dcc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009dd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009dd2:	e841 2300 	strex	r3, r2, [r1]
 8009dd6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d1e5      	bne.n	8009daa <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	3314      	adds	r3, #20
 8009de4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009de6:	69bb      	ldr	r3, [r7, #24]
 8009de8:	e853 3f00 	ldrex	r3, [r3]
 8009dec:	617b      	str	r3, [r7, #20]
   return(result);
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009df4:	653b      	str	r3, [r7, #80]	; 0x50
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	3314      	adds	r3, #20
 8009dfc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009dfe:	627a      	str	r2, [r7, #36]	; 0x24
 8009e00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e02:	6a39      	ldr	r1, [r7, #32]
 8009e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e06:	e841 2300 	strex	r3, r2, [r1]
 8009e0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e0c:	69fb      	ldr	r3, [r7, #28]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d1e5      	bne.n	8009dde <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8009e12:	2300      	movs	r3, #0
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3760      	adds	r7, #96	; 0x60
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	08009b03 	.word	0x08009b03
 8009e20:	08009c29 	.word	0x08009c29
 8009e24:	08009c5f 	.word	0x08009c5f

08009e28 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b089      	sub	sp, #36	; 0x24
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	330c      	adds	r3, #12
 8009e36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	e853 3f00 	ldrex	r3, [r3]
 8009e3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009e46:	61fb      	str	r3, [r7, #28]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	330c      	adds	r3, #12
 8009e4e:	69fa      	ldr	r2, [r7, #28]
 8009e50:	61ba      	str	r2, [r7, #24]
 8009e52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e54:	6979      	ldr	r1, [r7, #20]
 8009e56:	69ba      	ldr	r2, [r7, #24]
 8009e58:	e841 2300 	strex	r3, r2, [r1]
 8009e5c:	613b      	str	r3, [r7, #16]
   return(result);
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d1e5      	bne.n	8009e30 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2220      	movs	r2, #32
 8009e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009e6c:	bf00      	nop
 8009e6e:	3724      	adds	r7, #36	; 0x24
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr

08009e78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b095      	sub	sp, #84	; 0x54
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	330c      	adds	r3, #12
 8009e86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e8a:	e853 3f00 	ldrex	r3, [r3]
 8009e8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	330c      	adds	r3, #12
 8009e9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009ea0:	643a      	str	r2, [r7, #64]	; 0x40
 8009ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009ea6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ea8:	e841 2300 	strex	r3, r2, [r1]
 8009eac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d1e5      	bne.n	8009e80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	3314      	adds	r3, #20
 8009eba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ebc:	6a3b      	ldr	r3, [r7, #32]
 8009ebe:	e853 3f00 	ldrex	r3, [r3]
 8009ec2:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	f023 0301 	bic.w	r3, r3, #1
 8009eca:	64bb      	str	r3, [r7, #72]	; 0x48
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	3314      	adds	r3, #20
 8009ed2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ed4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009ed6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009eda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009edc:	e841 2300 	strex	r3, r2, [r1]
 8009ee0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d1e5      	bne.n	8009eb4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d119      	bne.n	8009f24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	330c      	adds	r3, #12
 8009ef6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	e853 3f00 	ldrex	r3, [r3]
 8009efe:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	f023 0310 	bic.w	r3, r3, #16
 8009f06:	647b      	str	r3, [r7, #68]	; 0x44
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	330c      	adds	r3, #12
 8009f0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f10:	61ba      	str	r2, [r7, #24]
 8009f12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f14:	6979      	ldr	r1, [r7, #20]
 8009f16:	69ba      	ldr	r2, [r7, #24]
 8009f18:	e841 2300 	strex	r3, r2, [r1]
 8009f1c:	613b      	str	r3, [r7, #16]
   return(result);
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d1e5      	bne.n	8009ef0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2220      	movs	r2, #32
 8009f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009f32:	bf00      	nop
 8009f34:	3754      	adds	r7, #84	; 0x54
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr

08009f3e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009f3e:	b580      	push	{r7, lr}
 8009f40:	b084      	sub	sp, #16
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2200      	movs	r2, #0
 8009f56:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f58:	68f8      	ldr	r0, [r7, #12]
 8009f5a:	f7ff fd61 	bl	8009a20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f5e:	bf00      	nop
 8009f60:	3710      	adds	r7, #16
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}

08009f66 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009f66:	b480      	push	{r7}
 8009f68:	b085      	sub	sp, #20
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f74:	b2db      	uxtb	r3, r3
 8009f76:	2b21      	cmp	r3, #33	; 0x21
 8009f78:	d13e      	bne.n	8009ff8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f82:	d114      	bne.n	8009fae <UART_Transmit_IT+0x48>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	691b      	ldr	r3, [r3, #16]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d110      	bne.n	8009fae <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6a1b      	ldr	r3, [r3, #32]
 8009f90:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	881b      	ldrh	r3, [r3, #0]
 8009f96:	461a      	mov	r2, r3
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009fa0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6a1b      	ldr	r3, [r3, #32]
 8009fa6:	1c9a      	adds	r2, r3, #2
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	621a      	str	r2, [r3, #32]
 8009fac:	e008      	b.n	8009fc0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6a1b      	ldr	r3, [r3, #32]
 8009fb2:	1c59      	adds	r1, r3, #1
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	6211      	str	r1, [r2, #32]
 8009fb8:	781a      	ldrb	r2, [r3, #0]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009fc4:	b29b      	uxth	r3, r3
 8009fc6:	3b01      	subs	r3, #1
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	4619      	mov	r1, r3
 8009fce:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d10f      	bne.n	8009ff4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	68da      	ldr	r2, [r3, #12]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009fe2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	68da      	ldr	r2, [r3, #12]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ff2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	e000      	b.n	8009ffa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009ff8:	2302      	movs	r3, #2
  }
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3714      	adds	r7, #20
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr

0800a006 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a006:	b580      	push	{r7, lr}
 800a008:	b082      	sub	sp, #8
 800a00a:	af00      	add	r7, sp, #0
 800a00c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	68da      	ldr	r2, [r3, #12]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a01c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2220      	movs	r2, #32
 800a022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f7f9 f904 	bl	8003234 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a02c:	2300      	movs	r3, #0
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3708      	adds	r7, #8
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b08c      	sub	sp, #48	; 0x30
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a044:	b2db      	uxtb	r3, r3
 800a046:	2b22      	cmp	r3, #34	; 0x22
 800a048:	f040 80ab 	bne.w	800a1a2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a054:	d117      	bne.n	800a086 <UART_Receive_IT+0x50>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	691b      	ldr	r3, [r3, #16]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d113      	bne.n	800a086 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a05e:	2300      	movs	r3, #0
 800a060:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a066:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	685b      	ldr	r3, [r3, #4]
 800a06e:	b29b      	uxth	r3, r3
 800a070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a074:	b29a      	uxth	r2, r3
 800a076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a078:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a07e:	1c9a      	adds	r2, r3, #2
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	629a      	str	r2, [r3, #40]	; 0x28
 800a084:	e026      	b.n	800a0d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a08a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a08c:	2300      	movs	r3, #0
 800a08e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a098:	d007      	beq.n	800a0aa <UART_Receive_IT+0x74>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d10a      	bne.n	800a0b8 <UART_Receive_IT+0x82>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	691b      	ldr	r3, [r3, #16]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d106      	bne.n	800a0b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	b2da      	uxtb	r2, r3
 800a0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b4:	701a      	strb	r2, [r3, #0]
 800a0b6:	e008      	b.n	800a0ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0c4:	b2da      	uxtb	r2, r3
 800a0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ce:	1c5a      	adds	r2, r3, #1
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a0d8:	b29b      	uxth	r3, r3
 800a0da:	3b01      	subs	r3, #1
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d15a      	bne.n	800a19e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	68da      	ldr	r2, [r3, #12]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f022 0220 	bic.w	r2, r2, #32
 800a0f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	68da      	ldr	r2, [r3, #12]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a106:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	695a      	ldr	r2, [r3, #20]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f022 0201 	bic.w	r2, r2, #1
 800a116:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2220      	movs	r2, #32
 800a11c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a124:	2b01      	cmp	r3, #1
 800a126:	d135      	bne.n	800a194 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2200      	movs	r2, #0
 800a12c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	330c      	adds	r3, #12
 800a134:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	e853 3f00 	ldrex	r3, [r3]
 800a13c:	613b      	str	r3, [r7, #16]
   return(result);
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	f023 0310 	bic.w	r3, r3, #16
 800a144:	627b      	str	r3, [r7, #36]	; 0x24
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	330c      	adds	r3, #12
 800a14c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a14e:	623a      	str	r2, [r7, #32]
 800a150:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a152:	69f9      	ldr	r1, [r7, #28]
 800a154:	6a3a      	ldr	r2, [r7, #32]
 800a156:	e841 2300 	strex	r3, r2, [r1]
 800a15a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a15c:	69bb      	ldr	r3, [r7, #24]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d1e5      	bne.n	800a12e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f003 0310 	and.w	r3, r3, #16
 800a16c:	2b10      	cmp	r3, #16
 800a16e:	d10a      	bne.n	800a186 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a170:	2300      	movs	r3, #0
 800a172:	60fb      	str	r3, [r7, #12]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	60fb      	str	r3, [r7, #12]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	60fb      	str	r3, [r7, #12]
 800a184:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a18a:	4619      	mov	r1, r3
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f7ff fc51 	bl	8009a34 <HAL_UARTEx_RxEventCallback>
 800a192:	e002      	b.n	800a19a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f7ff fc2f 	bl	80099f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a19a:	2300      	movs	r3, #0
 800a19c:	e002      	b.n	800a1a4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	e000      	b.n	800a1a4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a1a2:	2302      	movs	r3, #2
  }
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3730      	adds	r7, #48	; 0x30
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1b0:	b09f      	sub	sp, #124	; 0x7c
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a1b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	691b      	ldr	r3, [r3, #16]
 800a1bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a1c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1c2:	68d9      	ldr	r1, [r3, #12]
 800a1c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	ea40 0301 	orr.w	r3, r0, r1
 800a1cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a1ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1d0:	689a      	ldr	r2, [r3, #8]
 800a1d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1d4:	691b      	ldr	r3, [r3, #16]
 800a1d6:	431a      	orrs	r2, r3
 800a1d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1da:	695b      	ldr	r3, [r3, #20]
 800a1dc:	431a      	orrs	r2, r3
 800a1de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1e0:	69db      	ldr	r3, [r3, #28]
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a1e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	68db      	ldr	r3, [r3, #12]
 800a1ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a1f0:	f021 010c 	bic.w	r1, r1, #12
 800a1f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1f6:	681a      	ldr	r2, [r3, #0]
 800a1f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a1fa:	430b      	orrs	r3, r1
 800a1fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a1fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	695b      	ldr	r3, [r3, #20]
 800a204:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a20a:	6999      	ldr	r1, [r3, #24]
 800a20c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a20e:	681a      	ldr	r2, [r3, #0]
 800a210:	ea40 0301 	orr.w	r3, r0, r1
 800a214:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	4bc5      	ldr	r3, [pc, #788]	; (800a530 <UART_SetConfig+0x384>)
 800a21c:	429a      	cmp	r2, r3
 800a21e:	d004      	beq.n	800a22a <UART_SetConfig+0x7e>
 800a220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a222:	681a      	ldr	r2, [r3, #0]
 800a224:	4bc3      	ldr	r3, [pc, #780]	; (800a534 <UART_SetConfig+0x388>)
 800a226:	429a      	cmp	r2, r3
 800a228:	d103      	bne.n	800a232 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a22a:	f7fe f947 	bl	80084bc <HAL_RCC_GetPCLK2Freq>
 800a22e:	6778      	str	r0, [r7, #116]	; 0x74
 800a230:	e002      	b.n	800a238 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a232:	f7fe f92f 	bl	8008494 <HAL_RCC_GetPCLK1Freq>
 800a236:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a23a:	69db      	ldr	r3, [r3, #28]
 800a23c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a240:	f040 80b6 	bne.w	800a3b0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a244:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a246:	461c      	mov	r4, r3
 800a248:	f04f 0500 	mov.w	r5, #0
 800a24c:	4622      	mov	r2, r4
 800a24e:	462b      	mov	r3, r5
 800a250:	1891      	adds	r1, r2, r2
 800a252:	6439      	str	r1, [r7, #64]	; 0x40
 800a254:	415b      	adcs	r3, r3
 800a256:	647b      	str	r3, [r7, #68]	; 0x44
 800a258:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a25c:	1912      	adds	r2, r2, r4
 800a25e:	eb45 0303 	adc.w	r3, r5, r3
 800a262:	f04f 0000 	mov.w	r0, #0
 800a266:	f04f 0100 	mov.w	r1, #0
 800a26a:	00d9      	lsls	r1, r3, #3
 800a26c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a270:	00d0      	lsls	r0, r2, #3
 800a272:	4602      	mov	r2, r0
 800a274:	460b      	mov	r3, r1
 800a276:	1911      	adds	r1, r2, r4
 800a278:	6639      	str	r1, [r7, #96]	; 0x60
 800a27a:	416b      	adcs	r3, r5
 800a27c:	667b      	str	r3, [r7, #100]	; 0x64
 800a27e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	461a      	mov	r2, r3
 800a284:	f04f 0300 	mov.w	r3, #0
 800a288:	1891      	adds	r1, r2, r2
 800a28a:	63b9      	str	r1, [r7, #56]	; 0x38
 800a28c:	415b      	adcs	r3, r3
 800a28e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a290:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a294:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a298:	f7f5 ff96 	bl	80001c8 <__aeabi_uldivmod>
 800a29c:	4602      	mov	r2, r0
 800a29e:	460b      	mov	r3, r1
 800a2a0:	4ba5      	ldr	r3, [pc, #660]	; (800a538 <UART_SetConfig+0x38c>)
 800a2a2:	fba3 2302 	umull	r2, r3, r3, r2
 800a2a6:	095b      	lsrs	r3, r3, #5
 800a2a8:	011e      	lsls	r6, r3, #4
 800a2aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a2ac:	461c      	mov	r4, r3
 800a2ae:	f04f 0500 	mov.w	r5, #0
 800a2b2:	4622      	mov	r2, r4
 800a2b4:	462b      	mov	r3, r5
 800a2b6:	1891      	adds	r1, r2, r2
 800a2b8:	6339      	str	r1, [r7, #48]	; 0x30
 800a2ba:	415b      	adcs	r3, r3
 800a2bc:	637b      	str	r3, [r7, #52]	; 0x34
 800a2be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a2c2:	1912      	adds	r2, r2, r4
 800a2c4:	eb45 0303 	adc.w	r3, r5, r3
 800a2c8:	f04f 0000 	mov.w	r0, #0
 800a2cc:	f04f 0100 	mov.w	r1, #0
 800a2d0:	00d9      	lsls	r1, r3, #3
 800a2d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a2d6:	00d0      	lsls	r0, r2, #3
 800a2d8:	4602      	mov	r2, r0
 800a2da:	460b      	mov	r3, r1
 800a2dc:	1911      	adds	r1, r2, r4
 800a2de:	65b9      	str	r1, [r7, #88]	; 0x58
 800a2e0:	416b      	adcs	r3, r5
 800a2e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a2e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	f04f 0300 	mov.w	r3, #0
 800a2ee:	1891      	adds	r1, r2, r2
 800a2f0:	62b9      	str	r1, [r7, #40]	; 0x28
 800a2f2:	415b      	adcs	r3, r3
 800a2f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a2f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a2fa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a2fe:	f7f5 ff63 	bl	80001c8 <__aeabi_uldivmod>
 800a302:	4602      	mov	r2, r0
 800a304:	460b      	mov	r3, r1
 800a306:	4b8c      	ldr	r3, [pc, #560]	; (800a538 <UART_SetConfig+0x38c>)
 800a308:	fba3 1302 	umull	r1, r3, r3, r2
 800a30c:	095b      	lsrs	r3, r3, #5
 800a30e:	2164      	movs	r1, #100	; 0x64
 800a310:	fb01 f303 	mul.w	r3, r1, r3
 800a314:	1ad3      	subs	r3, r2, r3
 800a316:	00db      	lsls	r3, r3, #3
 800a318:	3332      	adds	r3, #50	; 0x32
 800a31a:	4a87      	ldr	r2, [pc, #540]	; (800a538 <UART_SetConfig+0x38c>)
 800a31c:	fba2 2303 	umull	r2, r3, r2, r3
 800a320:	095b      	lsrs	r3, r3, #5
 800a322:	005b      	lsls	r3, r3, #1
 800a324:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a328:	441e      	add	r6, r3
 800a32a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a32c:	4618      	mov	r0, r3
 800a32e:	f04f 0100 	mov.w	r1, #0
 800a332:	4602      	mov	r2, r0
 800a334:	460b      	mov	r3, r1
 800a336:	1894      	adds	r4, r2, r2
 800a338:	623c      	str	r4, [r7, #32]
 800a33a:	415b      	adcs	r3, r3
 800a33c:	627b      	str	r3, [r7, #36]	; 0x24
 800a33e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a342:	1812      	adds	r2, r2, r0
 800a344:	eb41 0303 	adc.w	r3, r1, r3
 800a348:	f04f 0400 	mov.w	r4, #0
 800a34c:	f04f 0500 	mov.w	r5, #0
 800a350:	00dd      	lsls	r5, r3, #3
 800a352:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a356:	00d4      	lsls	r4, r2, #3
 800a358:	4622      	mov	r2, r4
 800a35a:	462b      	mov	r3, r5
 800a35c:	1814      	adds	r4, r2, r0
 800a35e:	653c      	str	r4, [r7, #80]	; 0x50
 800a360:	414b      	adcs	r3, r1
 800a362:	657b      	str	r3, [r7, #84]	; 0x54
 800a364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	461a      	mov	r2, r3
 800a36a:	f04f 0300 	mov.w	r3, #0
 800a36e:	1891      	adds	r1, r2, r2
 800a370:	61b9      	str	r1, [r7, #24]
 800a372:	415b      	adcs	r3, r3
 800a374:	61fb      	str	r3, [r7, #28]
 800a376:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a37a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a37e:	f7f5 ff23 	bl	80001c8 <__aeabi_uldivmod>
 800a382:	4602      	mov	r2, r0
 800a384:	460b      	mov	r3, r1
 800a386:	4b6c      	ldr	r3, [pc, #432]	; (800a538 <UART_SetConfig+0x38c>)
 800a388:	fba3 1302 	umull	r1, r3, r3, r2
 800a38c:	095b      	lsrs	r3, r3, #5
 800a38e:	2164      	movs	r1, #100	; 0x64
 800a390:	fb01 f303 	mul.w	r3, r1, r3
 800a394:	1ad3      	subs	r3, r2, r3
 800a396:	00db      	lsls	r3, r3, #3
 800a398:	3332      	adds	r3, #50	; 0x32
 800a39a:	4a67      	ldr	r2, [pc, #412]	; (800a538 <UART_SetConfig+0x38c>)
 800a39c:	fba2 2303 	umull	r2, r3, r2, r3
 800a3a0:	095b      	lsrs	r3, r3, #5
 800a3a2:	f003 0207 	and.w	r2, r3, #7
 800a3a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4432      	add	r2, r6
 800a3ac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a3ae:	e0b9      	b.n	800a524 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a3b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a3b2:	461c      	mov	r4, r3
 800a3b4:	f04f 0500 	mov.w	r5, #0
 800a3b8:	4622      	mov	r2, r4
 800a3ba:	462b      	mov	r3, r5
 800a3bc:	1891      	adds	r1, r2, r2
 800a3be:	6139      	str	r1, [r7, #16]
 800a3c0:	415b      	adcs	r3, r3
 800a3c2:	617b      	str	r3, [r7, #20]
 800a3c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a3c8:	1912      	adds	r2, r2, r4
 800a3ca:	eb45 0303 	adc.w	r3, r5, r3
 800a3ce:	f04f 0000 	mov.w	r0, #0
 800a3d2:	f04f 0100 	mov.w	r1, #0
 800a3d6:	00d9      	lsls	r1, r3, #3
 800a3d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a3dc:	00d0      	lsls	r0, r2, #3
 800a3de:	4602      	mov	r2, r0
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	eb12 0804 	adds.w	r8, r2, r4
 800a3e6:	eb43 0905 	adc.w	r9, r3, r5
 800a3ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f04f 0100 	mov.w	r1, #0
 800a3f4:	f04f 0200 	mov.w	r2, #0
 800a3f8:	f04f 0300 	mov.w	r3, #0
 800a3fc:	008b      	lsls	r3, r1, #2
 800a3fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a402:	0082      	lsls	r2, r0, #2
 800a404:	4640      	mov	r0, r8
 800a406:	4649      	mov	r1, r9
 800a408:	f7f5 fede 	bl	80001c8 <__aeabi_uldivmod>
 800a40c:	4602      	mov	r2, r0
 800a40e:	460b      	mov	r3, r1
 800a410:	4b49      	ldr	r3, [pc, #292]	; (800a538 <UART_SetConfig+0x38c>)
 800a412:	fba3 2302 	umull	r2, r3, r3, r2
 800a416:	095b      	lsrs	r3, r3, #5
 800a418:	011e      	lsls	r6, r3, #4
 800a41a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a41c:	4618      	mov	r0, r3
 800a41e:	f04f 0100 	mov.w	r1, #0
 800a422:	4602      	mov	r2, r0
 800a424:	460b      	mov	r3, r1
 800a426:	1894      	adds	r4, r2, r2
 800a428:	60bc      	str	r4, [r7, #8]
 800a42a:	415b      	adcs	r3, r3
 800a42c:	60fb      	str	r3, [r7, #12]
 800a42e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a432:	1812      	adds	r2, r2, r0
 800a434:	eb41 0303 	adc.w	r3, r1, r3
 800a438:	f04f 0400 	mov.w	r4, #0
 800a43c:	f04f 0500 	mov.w	r5, #0
 800a440:	00dd      	lsls	r5, r3, #3
 800a442:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a446:	00d4      	lsls	r4, r2, #3
 800a448:	4622      	mov	r2, r4
 800a44a:	462b      	mov	r3, r5
 800a44c:	1814      	adds	r4, r2, r0
 800a44e:	64bc      	str	r4, [r7, #72]	; 0x48
 800a450:	414b      	adcs	r3, r1
 800a452:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	4618      	mov	r0, r3
 800a45a:	f04f 0100 	mov.w	r1, #0
 800a45e:	f04f 0200 	mov.w	r2, #0
 800a462:	f04f 0300 	mov.w	r3, #0
 800a466:	008b      	lsls	r3, r1, #2
 800a468:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a46c:	0082      	lsls	r2, r0, #2
 800a46e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a472:	f7f5 fea9 	bl	80001c8 <__aeabi_uldivmod>
 800a476:	4602      	mov	r2, r0
 800a478:	460b      	mov	r3, r1
 800a47a:	4b2f      	ldr	r3, [pc, #188]	; (800a538 <UART_SetConfig+0x38c>)
 800a47c:	fba3 1302 	umull	r1, r3, r3, r2
 800a480:	095b      	lsrs	r3, r3, #5
 800a482:	2164      	movs	r1, #100	; 0x64
 800a484:	fb01 f303 	mul.w	r3, r1, r3
 800a488:	1ad3      	subs	r3, r2, r3
 800a48a:	011b      	lsls	r3, r3, #4
 800a48c:	3332      	adds	r3, #50	; 0x32
 800a48e:	4a2a      	ldr	r2, [pc, #168]	; (800a538 <UART_SetConfig+0x38c>)
 800a490:	fba2 2303 	umull	r2, r3, r2, r3
 800a494:	095b      	lsrs	r3, r3, #5
 800a496:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a49a:	441e      	add	r6, r3
 800a49c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f04f 0100 	mov.w	r1, #0
 800a4a4:	4602      	mov	r2, r0
 800a4a6:	460b      	mov	r3, r1
 800a4a8:	1894      	adds	r4, r2, r2
 800a4aa:	603c      	str	r4, [r7, #0]
 800a4ac:	415b      	adcs	r3, r3
 800a4ae:	607b      	str	r3, [r7, #4]
 800a4b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4b4:	1812      	adds	r2, r2, r0
 800a4b6:	eb41 0303 	adc.w	r3, r1, r3
 800a4ba:	f04f 0400 	mov.w	r4, #0
 800a4be:	f04f 0500 	mov.w	r5, #0
 800a4c2:	00dd      	lsls	r5, r3, #3
 800a4c4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a4c8:	00d4      	lsls	r4, r2, #3
 800a4ca:	4622      	mov	r2, r4
 800a4cc:	462b      	mov	r3, r5
 800a4ce:	eb12 0a00 	adds.w	sl, r2, r0
 800a4d2:	eb43 0b01 	adc.w	fp, r3, r1
 800a4d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f04f 0100 	mov.w	r1, #0
 800a4e0:	f04f 0200 	mov.w	r2, #0
 800a4e4:	f04f 0300 	mov.w	r3, #0
 800a4e8:	008b      	lsls	r3, r1, #2
 800a4ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a4ee:	0082      	lsls	r2, r0, #2
 800a4f0:	4650      	mov	r0, sl
 800a4f2:	4659      	mov	r1, fp
 800a4f4:	f7f5 fe68 	bl	80001c8 <__aeabi_uldivmod>
 800a4f8:	4602      	mov	r2, r0
 800a4fa:	460b      	mov	r3, r1
 800a4fc:	4b0e      	ldr	r3, [pc, #56]	; (800a538 <UART_SetConfig+0x38c>)
 800a4fe:	fba3 1302 	umull	r1, r3, r3, r2
 800a502:	095b      	lsrs	r3, r3, #5
 800a504:	2164      	movs	r1, #100	; 0x64
 800a506:	fb01 f303 	mul.w	r3, r1, r3
 800a50a:	1ad3      	subs	r3, r2, r3
 800a50c:	011b      	lsls	r3, r3, #4
 800a50e:	3332      	adds	r3, #50	; 0x32
 800a510:	4a09      	ldr	r2, [pc, #36]	; (800a538 <UART_SetConfig+0x38c>)
 800a512:	fba2 2303 	umull	r2, r3, r2, r3
 800a516:	095b      	lsrs	r3, r3, #5
 800a518:	f003 020f 	and.w	r2, r3, #15
 800a51c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4432      	add	r2, r6
 800a522:	609a      	str	r2, [r3, #8]
}
 800a524:	bf00      	nop
 800a526:	377c      	adds	r7, #124	; 0x7c
 800a528:	46bd      	mov	sp, r7
 800a52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a52e:	bf00      	nop
 800a530:	40011000 	.word	0x40011000
 800a534:	40011400 	.word	0x40011400
 800a538:	51eb851f 	.word	0x51eb851f

0800a53c <__errno>:
 800a53c:	4b01      	ldr	r3, [pc, #4]	; (800a544 <__errno+0x8>)
 800a53e:	6818      	ldr	r0, [r3, #0]
 800a540:	4770      	bx	lr
 800a542:	bf00      	nop
 800a544:	200000f0 	.word	0x200000f0

0800a548 <__libc_init_array>:
 800a548:	b570      	push	{r4, r5, r6, lr}
 800a54a:	4d0d      	ldr	r5, [pc, #52]	; (800a580 <__libc_init_array+0x38>)
 800a54c:	4c0d      	ldr	r4, [pc, #52]	; (800a584 <__libc_init_array+0x3c>)
 800a54e:	1b64      	subs	r4, r4, r5
 800a550:	10a4      	asrs	r4, r4, #2
 800a552:	2600      	movs	r6, #0
 800a554:	42a6      	cmp	r6, r4
 800a556:	d109      	bne.n	800a56c <__libc_init_array+0x24>
 800a558:	4d0b      	ldr	r5, [pc, #44]	; (800a588 <__libc_init_array+0x40>)
 800a55a:	4c0c      	ldr	r4, [pc, #48]	; (800a58c <__libc_init_array+0x44>)
 800a55c:	f000 fee2 	bl	800b324 <_init>
 800a560:	1b64      	subs	r4, r4, r5
 800a562:	10a4      	asrs	r4, r4, #2
 800a564:	2600      	movs	r6, #0
 800a566:	42a6      	cmp	r6, r4
 800a568:	d105      	bne.n	800a576 <__libc_init_array+0x2e>
 800a56a:	bd70      	pop	{r4, r5, r6, pc}
 800a56c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a570:	4798      	blx	r3
 800a572:	3601      	adds	r6, #1
 800a574:	e7ee      	b.n	800a554 <__libc_init_array+0xc>
 800a576:	f855 3b04 	ldr.w	r3, [r5], #4
 800a57a:	4798      	blx	r3
 800a57c:	3601      	adds	r6, #1
 800a57e:	e7f2      	b.n	800a566 <__libc_init_array+0x1e>
 800a580:	0800b824 	.word	0x0800b824
 800a584:	0800b824 	.word	0x0800b824
 800a588:	0800b824 	.word	0x0800b824
 800a58c:	0800b828 	.word	0x0800b828

0800a590 <memcpy>:
 800a590:	440a      	add	r2, r1
 800a592:	4291      	cmp	r1, r2
 800a594:	f100 33ff 	add.w	r3, r0, #4294967295
 800a598:	d100      	bne.n	800a59c <memcpy+0xc>
 800a59a:	4770      	bx	lr
 800a59c:	b510      	push	{r4, lr}
 800a59e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5a6:	4291      	cmp	r1, r2
 800a5a8:	d1f9      	bne.n	800a59e <memcpy+0xe>
 800a5aa:	bd10      	pop	{r4, pc}

0800a5ac <memset>:
 800a5ac:	4402      	add	r2, r0
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d100      	bne.n	800a5b6 <memset+0xa>
 800a5b4:	4770      	bx	lr
 800a5b6:	f803 1b01 	strb.w	r1, [r3], #1
 800a5ba:	e7f9      	b.n	800a5b0 <memset+0x4>

0800a5bc <sinf>:
 800a5bc:	ee10 3a10 	vmov	r3, s0
 800a5c0:	b507      	push	{r0, r1, r2, lr}
 800a5c2:	4a1d      	ldr	r2, [pc, #116]	; (800a638 <sinf+0x7c>)
 800a5c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	dc05      	bgt.n	800a5d8 <sinf+0x1c>
 800a5cc:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800a63c <sinf+0x80>
 800a5d0:	2000      	movs	r0, #0
 800a5d2:	f000 fd9d 	bl	800b110 <__kernel_sinf>
 800a5d6:	e004      	b.n	800a5e2 <sinf+0x26>
 800a5d8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a5dc:	db04      	blt.n	800a5e8 <sinf+0x2c>
 800a5de:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a5e2:	b003      	add	sp, #12
 800a5e4:	f85d fb04 	ldr.w	pc, [sp], #4
 800a5e8:	4668      	mov	r0, sp
 800a5ea:	f000 f967 	bl	800a8bc <__ieee754_rem_pio2f>
 800a5ee:	f000 0003 	and.w	r0, r0, #3
 800a5f2:	2801      	cmp	r0, #1
 800a5f4:	d008      	beq.n	800a608 <sinf+0x4c>
 800a5f6:	2802      	cmp	r0, #2
 800a5f8:	d00d      	beq.n	800a616 <sinf+0x5a>
 800a5fa:	b9b0      	cbnz	r0, 800a62a <sinf+0x6e>
 800a5fc:	eddd 0a01 	vldr	s1, [sp, #4]
 800a600:	ed9d 0a00 	vldr	s0, [sp]
 800a604:	2001      	movs	r0, #1
 800a606:	e7e4      	b.n	800a5d2 <sinf+0x16>
 800a608:	eddd 0a01 	vldr	s1, [sp, #4]
 800a60c:	ed9d 0a00 	vldr	s0, [sp]
 800a610:	f000 fa94 	bl	800ab3c <__kernel_cosf>
 800a614:	e7e5      	b.n	800a5e2 <sinf+0x26>
 800a616:	eddd 0a01 	vldr	s1, [sp, #4]
 800a61a:	ed9d 0a00 	vldr	s0, [sp]
 800a61e:	2001      	movs	r0, #1
 800a620:	f000 fd76 	bl	800b110 <__kernel_sinf>
 800a624:	eeb1 0a40 	vneg.f32	s0, s0
 800a628:	e7db      	b.n	800a5e2 <sinf+0x26>
 800a62a:	eddd 0a01 	vldr	s1, [sp, #4]
 800a62e:	ed9d 0a00 	vldr	s0, [sp]
 800a632:	f000 fa83 	bl	800ab3c <__kernel_cosf>
 800a636:	e7f5      	b.n	800a624 <sinf+0x68>
 800a638:	3f490fd8 	.word	0x3f490fd8
 800a63c:	00000000 	.word	0x00000000

0800a640 <asinf>:
 800a640:	b508      	push	{r3, lr}
 800a642:	ed2d 8b02 	vpush	{d8}
 800a646:	eeb0 8a40 	vmov.f32	s16, s0
 800a64a:	f000 f851 	bl	800a6f0 <__ieee754_asinf>
 800a64e:	4b13      	ldr	r3, [pc, #76]	; (800a69c <asinf+0x5c>)
 800a650:	f993 3000 	ldrsb.w	r3, [r3]
 800a654:	3301      	adds	r3, #1
 800a656:	eef0 8a40 	vmov.f32	s17, s0
 800a65a:	d01a      	beq.n	800a692 <asinf+0x52>
 800a65c:	eeb4 8a48 	vcmp.f32	s16, s16
 800a660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a664:	d615      	bvs.n	800a692 <asinf+0x52>
 800a666:	eeb0 0a48 	vmov.f32	s0, s16
 800a66a:	f000 fd99 	bl	800b1a0 <fabsf>
 800a66e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a672:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800a676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a67a:	dd0a      	ble.n	800a692 <asinf+0x52>
 800a67c:	f7ff ff5e 	bl	800a53c <__errno>
 800a680:	ecbd 8b02 	vpop	{d8}
 800a684:	2321      	movs	r3, #33	; 0x21
 800a686:	6003      	str	r3, [r0, #0]
 800a688:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a68c:	4804      	ldr	r0, [pc, #16]	; (800a6a0 <asinf+0x60>)
 800a68e:	f000 bdd1 	b.w	800b234 <nanf>
 800a692:	eeb0 0a68 	vmov.f32	s0, s17
 800a696:	ecbd 8b02 	vpop	{d8}
 800a69a:	bd08      	pop	{r3, pc}
 800a69c:	20000154 	.word	0x20000154
 800a6a0:	0800b448 	.word	0x0800b448

0800a6a4 <sqrtf>:
 800a6a4:	b508      	push	{r3, lr}
 800a6a6:	ed2d 8b02 	vpush	{d8}
 800a6aa:	eeb0 8a40 	vmov.f32	s16, s0
 800a6ae:	f000 fa41 	bl	800ab34 <__ieee754_sqrtf>
 800a6b2:	4b0d      	ldr	r3, [pc, #52]	; (800a6e8 <sqrtf+0x44>)
 800a6b4:	f993 3000 	ldrsb.w	r3, [r3]
 800a6b8:	3301      	adds	r3, #1
 800a6ba:	d011      	beq.n	800a6e0 <sqrtf+0x3c>
 800a6bc:	eeb4 8a48 	vcmp.f32	s16, s16
 800a6c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6c4:	d60c      	bvs.n	800a6e0 <sqrtf+0x3c>
 800a6c6:	eddf 8a09 	vldr	s17, [pc, #36]	; 800a6ec <sqrtf+0x48>
 800a6ca:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a6ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6d2:	d505      	bpl.n	800a6e0 <sqrtf+0x3c>
 800a6d4:	f7ff ff32 	bl	800a53c <__errno>
 800a6d8:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a6dc:	2321      	movs	r3, #33	; 0x21
 800a6de:	6003      	str	r3, [r0, #0]
 800a6e0:	ecbd 8b02 	vpop	{d8}
 800a6e4:	bd08      	pop	{r3, pc}
 800a6e6:	bf00      	nop
 800a6e8:	20000154 	.word	0x20000154
 800a6ec:	00000000 	.word	0x00000000

0800a6f0 <__ieee754_asinf>:
 800a6f0:	b538      	push	{r3, r4, r5, lr}
 800a6f2:	ee10 5a10 	vmov	r5, s0
 800a6f6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800a6fa:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800a6fe:	ed2d 8b04 	vpush	{d8-d9}
 800a702:	d10c      	bne.n	800a71e <__ieee754_asinf+0x2e>
 800a704:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800a87c <__ieee754_asinf+0x18c>
 800a708:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800a880 <__ieee754_asinf+0x190>
 800a70c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a710:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a714:	eeb0 0a67 	vmov.f32	s0, s15
 800a718:	ecbd 8b04 	vpop	{d8-d9}
 800a71c:	bd38      	pop	{r3, r4, r5, pc}
 800a71e:	dd04      	ble.n	800a72a <__ieee754_asinf+0x3a>
 800a720:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a724:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800a728:	e7f6      	b.n	800a718 <__ieee754_asinf+0x28>
 800a72a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800a72e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800a732:	da0b      	bge.n	800a74c <__ieee754_asinf+0x5c>
 800a734:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800a738:	da52      	bge.n	800a7e0 <__ieee754_asinf+0xf0>
 800a73a:	eddf 7a52 	vldr	s15, [pc, #328]	; 800a884 <__ieee754_asinf+0x194>
 800a73e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800a742:	eef4 7ae8 	vcmpe.f32	s15, s17
 800a746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a74a:	dce5      	bgt.n	800a718 <__ieee754_asinf+0x28>
 800a74c:	f000 fd28 	bl	800b1a0 <fabsf>
 800a750:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800a754:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800a758:	ee20 8a08 	vmul.f32	s16, s0, s16
 800a75c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800a888 <__ieee754_asinf+0x198>
 800a760:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800a88c <__ieee754_asinf+0x19c>
 800a764:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800a890 <__ieee754_asinf+0x1a0>
 800a768:	eea8 7a27 	vfma.f32	s14, s16, s15
 800a76c:	eddf 7a49 	vldr	s15, [pc, #292]	; 800a894 <__ieee754_asinf+0x1a4>
 800a770:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a774:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800a898 <__ieee754_asinf+0x1a8>
 800a778:	eea7 7a88 	vfma.f32	s14, s15, s16
 800a77c:	eddf 7a47 	vldr	s15, [pc, #284]	; 800a89c <__ieee754_asinf+0x1ac>
 800a780:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a784:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800a8a0 <__ieee754_asinf+0x1b0>
 800a788:	eea7 9a88 	vfma.f32	s18, s15, s16
 800a78c:	eddf 7a45 	vldr	s15, [pc, #276]	; 800a8a4 <__ieee754_asinf+0x1b4>
 800a790:	eee8 7a07 	vfma.f32	s15, s16, s14
 800a794:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800a8a8 <__ieee754_asinf+0x1b8>
 800a798:	eea7 7a88 	vfma.f32	s14, s15, s16
 800a79c:	eddf 7a43 	vldr	s15, [pc, #268]	; 800a8ac <__ieee754_asinf+0x1bc>
 800a7a0:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a7a4:	eeb0 0a48 	vmov.f32	s0, s16
 800a7a8:	eee7 8a88 	vfma.f32	s17, s15, s16
 800a7ac:	f000 f9c2 	bl	800ab34 <__ieee754_sqrtf>
 800a7b0:	4b3f      	ldr	r3, [pc, #252]	; (800a8b0 <__ieee754_asinf+0x1c0>)
 800a7b2:	ee29 9a08 	vmul.f32	s18, s18, s16
 800a7b6:	429c      	cmp	r4, r3
 800a7b8:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800a7bc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a7c0:	dd3d      	ble.n	800a83e <__ieee754_asinf+0x14e>
 800a7c2:	eea0 0a06 	vfma.f32	s0, s0, s12
 800a7c6:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800a8b4 <__ieee754_asinf+0x1c4>
 800a7ca:	eee0 7a26 	vfma.f32	s15, s0, s13
 800a7ce:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800a880 <__ieee754_asinf+0x190>
 800a7d2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a7d6:	2d00      	cmp	r5, #0
 800a7d8:	bfd8      	it	le
 800a7da:	eeb1 0a40 	vnegle.f32	s0, s0
 800a7de:	e79b      	b.n	800a718 <__ieee754_asinf+0x28>
 800a7e0:	ee60 7a00 	vmul.f32	s15, s0, s0
 800a7e4:	eddf 6a28 	vldr	s13, [pc, #160]	; 800a888 <__ieee754_asinf+0x198>
 800a7e8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800a88c <__ieee754_asinf+0x19c>
 800a7ec:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800a8a0 <__ieee754_asinf+0x1b0>
 800a7f0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800a7f4:	eddf 6a27 	vldr	s13, [pc, #156]	; 800a894 <__ieee754_asinf+0x1a4>
 800a7f8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a7fc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800a898 <__ieee754_asinf+0x1a8>
 800a800:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a804:	eddf 6a25 	vldr	s13, [pc, #148]	; 800a89c <__ieee754_asinf+0x1ac>
 800a808:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a80c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800a890 <__ieee754_asinf+0x1a0>
 800a810:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a814:	eddf 6a23 	vldr	s13, [pc, #140]	; 800a8a4 <__ieee754_asinf+0x1b4>
 800a818:	eee7 6a86 	vfma.f32	s13, s15, s12
 800a81c:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800a8a8 <__ieee754_asinf+0x1b8>
 800a820:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800a824:	eddf 6a21 	vldr	s13, [pc, #132]	; 800a8ac <__ieee754_asinf+0x1bc>
 800a828:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a82c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a830:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800a834:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800a838:	eea0 0a27 	vfma.f32	s0, s0, s15
 800a83c:	e76c      	b.n	800a718 <__ieee754_asinf+0x28>
 800a83e:	ee10 3a10 	vmov	r3, s0
 800a842:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a846:	f023 030f 	bic.w	r3, r3, #15
 800a84a:	ee07 3a10 	vmov	s14, r3
 800a84e:	eea7 8a47 	vfms.f32	s16, s14, s14
 800a852:	ee70 7a07 	vadd.f32	s15, s0, s14
 800a856:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a85a:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800a85e:	eddf 7a07 	vldr	s15, [pc, #28]	; 800a87c <__ieee754_asinf+0x18c>
 800a862:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800a866:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800a86a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800a8b8 <__ieee754_asinf+0x1c8>
 800a86e:	eeb0 6a40 	vmov.f32	s12, s0
 800a872:	eea7 6a66 	vfms.f32	s12, s14, s13
 800a876:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a87a:	e7aa      	b.n	800a7d2 <__ieee754_asinf+0xe2>
 800a87c:	b33bbd2e 	.word	0xb33bbd2e
 800a880:	3fc90fdb 	.word	0x3fc90fdb
 800a884:	7149f2ca 	.word	0x7149f2ca
 800a888:	3811ef08 	.word	0x3811ef08
 800a88c:	3a4f7f04 	.word	0x3a4f7f04
 800a890:	3e2aaaab 	.word	0x3e2aaaab
 800a894:	bd241146 	.word	0xbd241146
 800a898:	3e4e0aa8 	.word	0x3e4e0aa8
 800a89c:	bea6b090 	.word	0xbea6b090
 800a8a0:	3d9dc62e 	.word	0x3d9dc62e
 800a8a4:	bf303361 	.word	0xbf303361
 800a8a8:	4001572d 	.word	0x4001572d
 800a8ac:	c019d139 	.word	0xc019d139
 800a8b0:	3f799999 	.word	0x3f799999
 800a8b4:	333bbd2e 	.word	0x333bbd2e
 800a8b8:	3f490fdb 	.word	0x3f490fdb

0800a8bc <__ieee754_rem_pio2f>:
 800a8bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8be:	ee10 6a10 	vmov	r6, s0
 800a8c2:	4b8e      	ldr	r3, [pc, #568]	; (800aafc <__ieee754_rem_pio2f+0x240>)
 800a8c4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800a8c8:	429d      	cmp	r5, r3
 800a8ca:	b087      	sub	sp, #28
 800a8cc:	eef0 7a40 	vmov.f32	s15, s0
 800a8d0:	4604      	mov	r4, r0
 800a8d2:	dc05      	bgt.n	800a8e0 <__ieee754_rem_pio2f+0x24>
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	ed80 0a00 	vstr	s0, [r0]
 800a8da:	6043      	str	r3, [r0, #4]
 800a8dc:	2000      	movs	r0, #0
 800a8de:	e01a      	b.n	800a916 <__ieee754_rem_pio2f+0x5a>
 800a8e0:	4b87      	ldr	r3, [pc, #540]	; (800ab00 <__ieee754_rem_pio2f+0x244>)
 800a8e2:	429d      	cmp	r5, r3
 800a8e4:	dc46      	bgt.n	800a974 <__ieee754_rem_pio2f+0xb8>
 800a8e6:	2e00      	cmp	r6, #0
 800a8e8:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800ab04 <__ieee754_rem_pio2f+0x248>
 800a8ec:	4b86      	ldr	r3, [pc, #536]	; (800ab08 <__ieee754_rem_pio2f+0x24c>)
 800a8ee:	f025 050f 	bic.w	r5, r5, #15
 800a8f2:	dd1f      	ble.n	800a934 <__ieee754_rem_pio2f+0x78>
 800a8f4:	429d      	cmp	r5, r3
 800a8f6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a8fa:	d00e      	beq.n	800a91a <__ieee754_rem_pio2f+0x5e>
 800a8fc:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800ab0c <__ieee754_rem_pio2f+0x250>
 800a900:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800a904:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a908:	ed80 0a00 	vstr	s0, [r0]
 800a90c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a910:	2001      	movs	r0, #1
 800a912:	edc4 7a01 	vstr	s15, [r4, #4]
 800a916:	b007      	add	sp, #28
 800a918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a91a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800ab10 <__ieee754_rem_pio2f+0x254>
 800a91e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800ab14 <__ieee754_rem_pio2f+0x258>
 800a922:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a926:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800a92a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a92e:	edc0 6a00 	vstr	s13, [r0]
 800a932:	e7eb      	b.n	800a90c <__ieee754_rem_pio2f+0x50>
 800a934:	429d      	cmp	r5, r3
 800a936:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a93a:	d00e      	beq.n	800a95a <__ieee754_rem_pio2f+0x9e>
 800a93c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800ab0c <__ieee754_rem_pio2f+0x250>
 800a940:	ee37 0a87 	vadd.f32	s0, s15, s14
 800a944:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a948:	ed80 0a00 	vstr	s0, [r0]
 800a94c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a950:	f04f 30ff 	mov.w	r0, #4294967295
 800a954:	edc4 7a01 	vstr	s15, [r4, #4]
 800a958:	e7dd      	b.n	800a916 <__ieee754_rem_pio2f+0x5a>
 800a95a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800ab10 <__ieee754_rem_pio2f+0x254>
 800a95e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800ab14 <__ieee754_rem_pio2f+0x258>
 800a962:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a966:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a96a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a96e:	edc0 6a00 	vstr	s13, [r0]
 800a972:	e7eb      	b.n	800a94c <__ieee754_rem_pio2f+0x90>
 800a974:	4b68      	ldr	r3, [pc, #416]	; (800ab18 <__ieee754_rem_pio2f+0x25c>)
 800a976:	429d      	cmp	r5, r3
 800a978:	dc72      	bgt.n	800aa60 <__ieee754_rem_pio2f+0x1a4>
 800a97a:	f000 fc11 	bl	800b1a0 <fabsf>
 800a97e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800ab1c <__ieee754_rem_pio2f+0x260>
 800a982:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a986:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a98a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a98e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a992:	ee17 0a90 	vmov	r0, s15
 800a996:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800ab04 <__ieee754_rem_pio2f+0x248>
 800a99a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800a99e:	281f      	cmp	r0, #31
 800a9a0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800ab0c <__ieee754_rem_pio2f+0x250>
 800a9a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9a8:	eeb1 6a47 	vneg.f32	s12, s14
 800a9ac:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a9b0:	ee16 2a90 	vmov	r2, s13
 800a9b4:	dc1c      	bgt.n	800a9f0 <__ieee754_rem_pio2f+0x134>
 800a9b6:	495a      	ldr	r1, [pc, #360]	; (800ab20 <__ieee754_rem_pio2f+0x264>)
 800a9b8:	1e47      	subs	r7, r0, #1
 800a9ba:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800a9be:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800a9c2:	428b      	cmp	r3, r1
 800a9c4:	d014      	beq.n	800a9f0 <__ieee754_rem_pio2f+0x134>
 800a9c6:	6022      	str	r2, [r4, #0]
 800a9c8:	ed94 7a00 	vldr	s14, [r4]
 800a9cc:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a9d0:	2e00      	cmp	r6, #0
 800a9d2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a9d6:	ed84 0a01 	vstr	s0, [r4, #4]
 800a9da:	da9c      	bge.n	800a916 <__ieee754_rem_pio2f+0x5a>
 800a9dc:	eeb1 7a47 	vneg.f32	s14, s14
 800a9e0:	eeb1 0a40 	vneg.f32	s0, s0
 800a9e4:	ed84 7a00 	vstr	s14, [r4]
 800a9e8:	ed84 0a01 	vstr	s0, [r4, #4]
 800a9ec:	4240      	negs	r0, r0
 800a9ee:	e792      	b.n	800a916 <__ieee754_rem_pio2f+0x5a>
 800a9f0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800a9f4:	15eb      	asrs	r3, r5, #23
 800a9f6:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800a9fa:	2d08      	cmp	r5, #8
 800a9fc:	dde3      	ble.n	800a9c6 <__ieee754_rem_pio2f+0x10a>
 800a9fe:	eddf 7a44 	vldr	s15, [pc, #272]	; 800ab10 <__ieee754_rem_pio2f+0x254>
 800aa02:	eef0 6a40 	vmov.f32	s13, s0
 800aa06:	eee6 6a27 	vfma.f32	s13, s12, s15
 800aa0a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800aa0e:	eea6 0a27 	vfma.f32	s0, s12, s15
 800aa12:	eddf 7a40 	vldr	s15, [pc, #256]	; 800ab14 <__ieee754_rem_pio2f+0x258>
 800aa16:	ee97 0a27 	vfnms.f32	s0, s14, s15
 800aa1a:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800aa1e:	eef0 7a40 	vmov.f32	s15, s0
 800aa22:	ee15 2a90 	vmov	r2, s11
 800aa26:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800aa2a:	1a5b      	subs	r3, r3, r1
 800aa2c:	2b19      	cmp	r3, #25
 800aa2e:	dc04      	bgt.n	800aa3a <__ieee754_rem_pio2f+0x17e>
 800aa30:	edc4 5a00 	vstr	s11, [r4]
 800aa34:	eeb0 0a66 	vmov.f32	s0, s13
 800aa38:	e7c6      	b.n	800a9c8 <__ieee754_rem_pio2f+0x10c>
 800aa3a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800ab24 <__ieee754_rem_pio2f+0x268>
 800aa3e:	eeb0 0a66 	vmov.f32	s0, s13
 800aa42:	eea6 0a25 	vfma.f32	s0, s12, s11
 800aa46:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800aa4a:	eddf 6a37 	vldr	s13, [pc, #220]	; 800ab28 <__ieee754_rem_pio2f+0x26c>
 800aa4e:	eee6 7a25 	vfma.f32	s15, s12, s11
 800aa52:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800aa56:	ee30 7a67 	vsub.f32	s14, s0, s15
 800aa5a:	ed84 7a00 	vstr	s14, [r4]
 800aa5e:	e7b3      	b.n	800a9c8 <__ieee754_rem_pio2f+0x10c>
 800aa60:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800aa64:	db06      	blt.n	800aa74 <__ieee754_rem_pio2f+0x1b8>
 800aa66:	ee70 7a40 	vsub.f32	s15, s0, s0
 800aa6a:	edc0 7a01 	vstr	s15, [r0, #4]
 800aa6e:	edc0 7a00 	vstr	s15, [r0]
 800aa72:	e733      	b.n	800a8dc <__ieee754_rem_pio2f+0x20>
 800aa74:	15ea      	asrs	r2, r5, #23
 800aa76:	3a86      	subs	r2, #134	; 0x86
 800aa78:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800aa7c:	ee07 3a90 	vmov	s15, r3
 800aa80:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800aa84:	eddf 6a29 	vldr	s13, [pc, #164]	; 800ab2c <__ieee754_rem_pio2f+0x270>
 800aa88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800aa8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aa90:	ed8d 7a03 	vstr	s14, [sp, #12]
 800aa94:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800aa98:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800aa9c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800aaa0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aaa4:	ed8d 7a04 	vstr	s14, [sp, #16]
 800aaa8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800aaac:	eef5 7a40 	vcmp.f32	s15, #0.0
 800aab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aab4:	edcd 7a05 	vstr	s15, [sp, #20]
 800aab8:	d11e      	bne.n	800aaf8 <__ieee754_rem_pio2f+0x23c>
 800aaba:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800aabe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aac2:	bf14      	ite	ne
 800aac4:	2302      	movne	r3, #2
 800aac6:	2301      	moveq	r3, #1
 800aac8:	4919      	ldr	r1, [pc, #100]	; (800ab30 <__ieee754_rem_pio2f+0x274>)
 800aaca:	9101      	str	r1, [sp, #4]
 800aacc:	2102      	movs	r1, #2
 800aace:	9100      	str	r1, [sp, #0]
 800aad0:	a803      	add	r0, sp, #12
 800aad2:	4621      	mov	r1, r4
 800aad4:	f000 f892 	bl	800abfc <__kernel_rem_pio2f>
 800aad8:	2e00      	cmp	r6, #0
 800aada:	f6bf af1c 	bge.w	800a916 <__ieee754_rem_pio2f+0x5a>
 800aade:	edd4 7a00 	vldr	s15, [r4]
 800aae2:	eef1 7a67 	vneg.f32	s15, s15
 800aae6:	edc4 7a00 	vstr	s15, [r4]
 800aaea:	edd4 7a01 	vldr	s15, [r4, #4]
 800aaee:	eef1 7a67 	vneg.f32	s15, s15
 800aaf2:	edc4 7a01 	vstr	s15, [r4, #4]
 800aaf6:	e779      	b.n	800a9ec <__ieee754_rem_pio2f+0x130>
 800aaf8:	2303      	movs	r3, #3
 800aafa:	e7e5      	b.n	800aac8 <__ieee754_rem_pio2f+0x20c>
 800aafc:	3f490fd8 	.word	0x3f490fd8
 800ab00:	4016cbe3 	.word	0x4016cbe3
 800ab04:	3fc90f80 	.word	0x3fc90f80
 800ab08:	3fc90fd0 	.word	0x3fc90fd0
 800ab0c:	37354443 	.word	0x37354443
 800ab10:	37354400 	.word	0x37354400
 800ab14:	2e85a308 	.word	0x2e85a308
 800ab18:	43490f80 	.word	0x43490f80
 800ab1c:	3f22f984 	.word	0x3f22f984
 800ab20:	0800b44c 	.word	0x0800b44c
 800ab24:	2e85a300 	.word	0x2e85a300
 800ab28:	248d3132 	.word	0x248d3132
 800ab2c:	43800000 	.word	0x43800000
 800ab30:	0800b4cc 	.word	0x0800b4cc

0800ab34 <__ieee754_sqrtf>:
 800ab34:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ab38:	4770      	bx	lr
	...

0800ab3c <__kernel_cosf>:
 800ab3c:	ee10 3a10 	vmov	r3, s0
 800ab40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab44:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800ab48:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800ab4c:	da05      	bge.n	800ab5a <__kernel_cosf+0x1e>
 800ab4e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ab52:	ee17 2a90 	vmov	r2, s15
 800ab56:	2a00      	cmp	r2, #0
 800ab58:	d03d      	beq.n	800abd6 <__kernel_cosf+0x9a>
 800ab5a:	ee60 5a00 	vmul.f32	s11, s0, s0
 800ab5e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800abdc <__kernel_cosf+0xa0>
 800ab62:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800abe0 <__kernel_cosf+0xa4>
 800ab66:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800abe4 <__kernel_cosf+0xa8>
 800ab6a:	4a1f      	ldr	r2, [pc, #124]	; (800abe8 <__kernel_cosf+0xac>)
 800ab6c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800ab70:	4293      	cmp	r3, r2
 800ab72:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800abec <__kernel_cosf+0xb0>
 800ab76:	eee7 7a25 	vfma.f32	s15, s14, s11
 800ab7a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800abf0 <__kernel_cosf+0xb4>
 800ab7e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800ab82:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800abf4 <__kernel_cosf+0xb8>
 800ab86:	eee7 7a25 	vfma.f32	s15, s14, s11
 800ab8a:	eeb0 7a66 	vmov.f32	s14, s13
 800ab8e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800ab92:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800ab96:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800ab9a:	ee67 6a25 	vmul.f32	s13, s14, s11
 800ab9e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800aba2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800aba6:	dc04      	bgt.n	800abb2 <__kernel_cosf+0x76>
 800aba8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800abac:	ee36 0a47 	vsub.f32	s0, s12, s14
 800abb0:	4770      	bx	lr
 800abb2:	4a11      	ldr	r2, [pc, #68]	; (800abf8 <__kernel_cosf+0xbc>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	bfda      	itte	le
 800abb8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800abbc:	ee06 3a90 	vmovle	s13, r3
 800abc0:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800abc4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800abc8:	ee36 0a66 	vsub.f32	s0, s12, s13
 800abcc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800abd0:	ee30 0a67 	vsub.f32	s0, s0, s15
 800abd4:	4770      	bx	lr
 800abd6:	eeb0 0a46 	vmov.f32	s0, s12
 800abda:	4770      	bx	lr
 800abdc:	ad47d74e 	.word	0xad47d74e
 800abe0:	310f74f6 	.word	0x310f74f6
 800abe4:	3d2aaaab 	.word	0x3d2aaaab
 800abe8:	3e999999 	.word	0x3e999999
 800abec:	b493f27c 	.word	0xb493f27c
 800abf0:	37d00d01 	.word	0x37d00d01
 800abf4:	bab60b61 	.word	0xbab60b61
 800abf8:	3f480000 	.word	0x3f480000

0800abfc <__kernel_rem_pio2f>:
 800abfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac00:	ed2d 8b04 	vpush	{d8-d9}
 800ac04:	b0d7      	sub	sp, #348	; 0x15c
 800ac06:	4616      	mov	r6, r2
 800ac08:	4698      	mov	r8, r3
 800ac0a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800ac0c:	4bbb      	ldr	r3, [pc, #748]	; (800aefc <__kernel_rem_pio2f+0x300>)
 800ac0e:	9001      	str	r0, [sp, #4]
 800ac10:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 800ac14:	1d33      	adds	r3, r6, #4
 800ac16:	460d      	mov	r5, r1
 800ac18:	f108 39ff 	add.w	r9, r8, #4294967295
 800ac1c:	db29      	blt.n	800ac72 <__kernel_rem_pio2f+0x76>
 800ac1e:	1ef1      	subs	r1, r6, #3
 800ac20:	bf48      	it	mi
 800ac22:	1d31      	addmi	r1, r6, #4
 800ac24:	10c9      	asrs	r1, r1, #3
 800ac26:	1c4c      	adds	r4, r1, #1
 800ac28:	00e3      	lsls	r3, r4, #3
 800ac2a:	9302      	str	r3, [sp, #8]
 800ac2c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800ac2e:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800af0c <__kernel_rem_pio2f+0x310>
 800ac32:	eba1 0009 	sub.w	r0, r1, r9
 800ac36:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 800ac3a:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 800ac3e:	eb07 0c09 	add.w	ip, r7, r9
 800ac42:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 800ac46:	2300      	movs	r3, #0
 800ac48:	4563      	cmp	r3, ip
 800ac4a:	dd14      	ble.n	800ac76 <__kernel_rem_pio2f+0x7a>
 800ac4c:	ab1a      	add	r3, sp, #104	; 0x68
 800ac4e:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800ac52:	46cc      	mov	ip, r9
 800ac54:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 800ac58:	f1c8 0b01 	rsb	fp, r8, #1
 800ac5c:	eb0b 020c 	add.w	r2, fp, ip
 800ac60:	4297      	cmp	r7, r2
 800ac62:	db27      	blt.n	800acb4 <__kernel_rem_pio2f+0xb8>
 800ac64:	f8dd e004 	ldr.w	lr, [sp, #4]
 800ac68:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800af0c <__kernel_rem_pio2f+0x310>
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	2200      	movs	r2, #0
 800ac70:	e016      	b.n	800aca0 <__kernel_rem_pio2f+0xa4>
 800ac72:	2100      	movs	r1, #0
 800ac74:	e7d7      	b.n	800ac26 <__kernel_rem_pio2f+0x2a>
 800ac76:	42d8      	cmn	r0, r3
 800ac78:	bf5d      	ittte	pl
 800ac7a:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 800ac7e:	ee07 2a90 	vmovpl	s15, r2
 800ac82:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800ac86:	eef0 7a47 	vmovmi.f32	s15, s14
 800ac8a:	ecea 7a01 	vstmia	sl!, {s15}
 800ac8e:	3301      	adds	r3, #1
 800ac90:	e7da      	b.n	800ac48 <__kernel_rem_pio2f+0x4c>
 800ac92:	ecfe 6a01 	vldmia	lr!, {s13}
 800ac96:	ed90 7a00 	vldr	s14, [r0]
 800ac9a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ac9e:	3201      	adds	r2, #1
 800aca0:	454a      	cmp	r2, r9
 800aca2:	f1a0 0004 	sub.w	r0, r0, #4
 800aca6:	ddf4      	ble.n	800ac92 <__kernel_rem_pio2f+0x96>
 800aca8:	ecea 7a01 	vstmia	sl!, {s15}
 800acac:	3304      	adds	r3, #4
 800acae:	f10c 0c01 	add.w	ip, ip, #1
 800acb2:	e7d3      	b.n	800ac5c <__kernel_rem_pio2f+0x60>
 800acb4:	ab06      	add	r3, sp, #24
 800acb6:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800acba:	9304      	str	r3, [sp, #16]
 800acbc:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800acbe:	eddf 8a92 	vldr	s17, [pc, #584]	; 800af08 <__kernel_rem_pio2f+0x30c>
 800acc2:	ed9f 9a90 	vldr	s18, [pc, #576]	; 800af04 <__kernel_rem_pio2f+0x308>
 800acc6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800acca:	9303      	str	r3, [sp, #12]
 800accc:	46ba      	mov	sl, r7
 800acce:	ab56      	add	r3, sp, #344	; 0x158
 800acd0:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800acd4:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800acd8:	ab06      	add	r3, sp, #24
 800acda:	4618      	mov	r0, r3
 800acdc:	4652      	mov	r2, sl
 800acde:	2a00      	cmp	r2, #0
 800ace0:	dc51      	bgt.n	800ad86 <__kernel_rem_pio2f+0x18a>
 800ace2:	4620      	mov	r0, r4
 800ace4:	9305      	str	r3, [sp, #20]
 800ace6:	f000 faab 	bl	800b240 <scalbnf>
 800acea:	eeb0 8a40 	vmov.f32	s16, s0
 800acee:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800acf2:	ee28 0a00 	vmul.f32	s0, s16, s0
 800acf6:	f000 fa5b 	bl	800b1b0 <floorf>
 800acfa:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800acfe:	eea0 8a67 	vfms.f32	s16, s0, s15
 800ad02:	2c00      	cmp	r4, #0
 800ad04:	9b05      	ldr	r3, [sp, #20]
 800ad06:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800ad0a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800ad0e:	edcd 7a00 	vstr	s15, [sp]
 800ad12:	ee38 8a40 	vsub.f32	s16, s16, s0
 800ad16:	dd4b      	ble.n	800adb0 <__kernel_rem_pio2f+0x1b4>
 800ad18:	f10a 3cff 	add.w	ip, sl, #4294967295
 800ad1c:	aa06      	add	r2, sp, #24
 800ad1e:	f1c4 0e08 	rsb	lr, r4, #8
 800ad22:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800ad26:	ee17 1a90 	vmov	r1, s15
 800ad2a:	fa42 f00e 	asr.w	r0, r2, lr
 800ad2e:	4401      	add	r1, r0
 800ad30:	9100      	str	r1, [sp, #0]
 800ad32:	fa00 f00e 	lsl.w	r0, r0, lr
 800ad36:	a906      	add	r1, sp, #24
 800ad38:	1a12      	subs	r2, r2, r0
 800ad3a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800ad3e:	f1c4 0007 	rsb	r0, r4, #7
 800ad42:	fa42 fb00 	asr.w	fp, r2, r0
 800ad46:	f1bb 0f00 	cmp.w	fp, #0
 800ad4a:	dd43      	ble.n	800add4 <__kernel_rem_pio2f+0x1d8>
 800ad4c:	9a00      	ldr	r2, [sp, #0]
 800ad4e:	f04f 0e00 	mov.w	lr, #0
 800ad52:	3201      	adds	r2, #1
 800ad54:	9200      	str	r2, [sp, #0]
 800ad56:	4670      	mov	r0, lr
 800ad58:	45f2      	cmp	sl, lr
 800ad5a:	dc6c      	bgt.n	800ae36 <__kernel_rem_pio2f+0x23a>
 800ad5c:	2c00      	cmp	r4, #0
 800ad5e:	dd04      	ble.n	800ad6a <__kernel_rem_pio2f+0x16e>
 800ad60:	2c01      	cmp	r4, #1
 800ad62:	d079      	beq.n	800ae58 <__kernel_rem_pio2f+0x25c>
 800ad64:	2c02      	cmp	r4, #2
 800ad66:	f000 8082 	beq.w	800ae6e <__kernel_rem_pio2f+0x272>
 800ad6a:	f1bb 0f02 	cmp.w	fp, #2
 800ad6e:	d131      	bne.n	800add4 <__kernel_rem_pio2f+0x1d8>
 800ad70:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ad74:	ee30 8a48 	vsub.f32	s16, s0, s16
 800ad78:	b360      	cbz	r0, 800add4 <__kernel_rem_pio2f+0x1d8>
 800ad7a:	4620      	mov	r0, r4
 800ad7c:	f000 fa60 	bl	800b240 <scalbnf>
 800ad80:	ee38 8a40 	vsub.f32	s16, s16, s0
 800ad84:	e026      	b.n	800add4 <__kernel_rem_pio2f+0x1d8>
 800ad86:	ee60 7a28 	vmul.f32	s15, s0, s17
 800ad8a:	3a01      	subs	r2, #1
 800ad8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ad90:	a942      	add	r1, sp, #264	; 0x108
 800ad92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ad96:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800ad9a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800ad9e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ada2:	eca0 0a01 	vstmia	r0!, {s0}
 800ada6:	ed9c 0a00 	vldr	s0, [ip]
 800adaa:	ee37 0a80 	vadd.f32	s0, s15, s0
 800adae:	e796      	b.n	800acde <__kernel_rem_pio2f+0xe2>
 800adb0:	d107      	bne.n	800adc2 <__kernel_rem_pio2f+0x1c6>
 800adb2:	f10a 32ff 	add.w	r2, sl, #4294967295
 800adb6:	a906      	add	r1, sp, #24
 800adb8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800adbc:	ea4f 2b22 	mov.w	fp, r2, asr #8
 800adc0:	e7c1      	b.n	800ad46 <__kernel_rem_pio2f+0x14a>
 800adc2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800adc6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800adca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adce:	da2f      	bge.n	800ae30 <__kernel_rem_pio2f+0x234>
 800add0:	f04f 0b00 	mov.w	fp, #0
 800add4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800add8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800addc:	f040 8098 	bne.w	800af10 <__kernel_rem_pio2f+0x314>
 800ade0:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ade4:	469c      	mov	ip, r3
 800ade6:	2200      	movs	r2, #0
 800ade8:	45bc      	cmp	ip, r7
 800adea:	da48      	bge.n	800ae7e <__kernel_rem_pio2f+0x282>
 800adec:	2a00      	cmp	r2, #0
 800adee:	d05f      	beq.n	800aeb0 <__kernel_rem_pio2f+0x2b4>
 800adf0:	aa06      	add	r2, sp, #24
 800adf2:	3c08      	subs	r4, #8
 800adf4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800adf8:	2900      	cmp	r1, #0
 800adfa:	d07d      	beq.n	800aef8 <__kernel_rem_pio2f+0x2fc>
 800adfc:	4620      	mov	r0, r4
 800adfe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ae02:	9301      	str	r3, [sp, #4]
 800ae04:	f000 fa1c 	bl	800b240 <scalbnf>
 800ae08:	9b01      	ldr	r3, [sp, #4]
 800ae0a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800af08 <__kernel_rem_pio2f+0x30c>
 800ae0e:	4619      	mov	r1, r3
 800ae10:	2900      	cmp	r1, #0
 800ae12:	f280 80af 	bge.w	800af74 <__kernel_rem_pio2f+0x378>
 800ae16:	4618      	mov	r0, r3
 800ae18:	2400      	movs	r4, #0
 800ae1a:	2800      	cmp	r0, #0
 800ae1c:	f2c0 80d0 	blt.w	800afc0 <__kernel_rem_pio2f+0x3c4>
 800ae20:	a942      	add	r1, sp, #264	; 0x108
 800ae22:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 800ae26:	4a36      	ldr	r2, [pc, #216]	; (800af00 <__kernel_rem_pio2f+0x304>)
 800ae28:	eddf 7a38 	vldr	s15, [pc, #224]	; 800af0c <__kernel_rem_pio2f+0x310>
 800ae2c:	2100      	movs	r1, #0
 800ae2e:	e0bb      	b.n	800afa8 <__kernel_rem_pio2f+0x3ac>
 800ae30:	f04f 0b02 	mov.w	fp, #2
 800ae34:	e78a      	b.n	800ad4c <__kernel_rem_pio2f+0x150>
 800ae36:	681a      	ldr	r2, [r3, #0]
 800ae38:	b948      	cbnz	r0, 800ae4e <__kernel_rem_pio2f+0x252>
 800ae3a:	b11a      	cbz	r2, 800ae44 <__kernel_rem_pio2f+0x248>
 800ae3c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 800ae40:	601a      	str	r2, [r3, #0]
 800ae42:	2201      	movs	r2, #1
 800ae44:	f10e 0e01 	add.w	lr, lr, #1
 800ae48:	3304      	adds	r3, #4
 800ae4a:	4610      	mov	r0, r2
 800ae4c:	e784      	b.n	800ad58 <__kernel_rem_pio2f+0x15c>
 800ae4e:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800ae52:	601a      	str	r2, [r3, #0]
 800ae54:	4602      	mov	r2, r0
 800ae56:	e7f5      	b.n	800ae44 <__kernel_rem_pio2f+0x248>
 800ae58:	f10a 3cff 	add.w	ip, sl, #4294967295
 800ae5c:	ab06      	add	r3, sp, #24
 800ae5e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800ae62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae66:	aa06      	add	r2, sp, #24
 800ae68:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 800ae6c:	e77d      	b.n	800ad6a <__kernel_rem_pio2f+0x16e>
 800ae6e:	f10a 3cff 	add.w	ip, sl, #4294967295
 800ae72:	ab06      	add	r3, sp, #24
 800ae74:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800ae78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae7c:	e7f3      	b.n	800ae66 <__kernel_rem_pio2f+0x26a>
 800ae7e:	a906      	add	r1, sp, #24
 800ae80:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 800ae84:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ae88:	4302      	orrs	r2, r0
 800ae8a:	e7ad      	b.n	800ade8 <__kernel_rem_pio2f+0x1ec>
 800ae8c:	3001      	adds	r0, #1
 800ae8e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ae92:	2a00      	cmp	r2, #0
 800ae94:	d0fa      	beq.n	800ae8c <__kernel_rem_pio2f+0x290>
 800ae96:	a91a      	add	r1, sp, #104	; 0x68
 800ae98:	eb0a 0208 	add.w	r2, sl, r8
 800ae9c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800aea0:	f10a 0301 	add.w	r3, sl, #1
 800aea4:	eb0a 0100 	add.w	r1, sl, r0
 800aea8:	4299      	cmp	r1, r3
 800aeaa:	da04      	bge.n	800aeb6 <__kernel_rem_pio2f+0x2ba>
 800aeac:	468a      	mov	sl, r1
 800aeae:	e70e      	b.n	800acce <__kernel_rem_pio2f+0xd2>
 800aeb0:	9b04      	ldr	r3, [sp, #16]
 800aeb2:	2001      	movs	r0, #1
 800aeb4:	e7eb      	b.n	800ae8e <__kernel_rem_pio2f+0x292>
 800aeb6:	9803      	ldr	r0, [sp, #12]
 800aeb8:	f8dd c004 	ldr.w	ip, [sp, #4]
 800aebc:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800aec0:	9000      	str	r0, [sp, #0]
 800aec2:	ee07 0a90 	vmov	s15, r0
 800aec6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aeca:	2000      	movs	r0, #0
 800aecc:	ece2 7a01 	vstmia	r2!, {s15}
 800aed0:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800af0c <__kernel_rem_pio2f+0x310>
 800aed4:	4696      	mov	lr, r2
 800aed6:	4548      	cmp	r0, r9
 800aed8:	dd06      	ble.n	800aee8 <__kernel_rem_pio2f+0x2ec>
 800aeda:	a842      	add	r0, sp, #264	; 0x108
 800aedc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800aee0:	edc0 7a00 	vstr	s15, [r0]
 800aee4:	3301      	adds	r3, #1
 800aee6:	e7df      	b.n	800aea8 <__kernel_rem_pio2f+0x2ac>
 800aee8:	ecfc 6a01 	vldmia	ip!, {s13}
 800aeec:	ed3e 7a01 	vldmdb	lr!, {s14}
 800aef0:	3001      	adds	r0, #1
 800aef2:	eee6 7a87 	vfma.f32	s15, s13, s14
 800aef6:	e7ee      	b.n	800aed6 <__kernel_rem_pio2f+0x2da>
 800aef8:	3b01      	subs	r3, #1
 800aefa:	e779      	b.n	800adf0 <__kernel_rem_pio2f+0x1f4>
 800aefc:	0800b810 	.word	0x0800b810
 800af00:	0800b7e4 	.word	0x0800b7e4
 800af04:	43800000 	.word	0x43800000
 800af08:	3b800000 	.word	0x3b800000
 800af0c:	00000000 	.word	0x00000000
 800af10:	9b02      	ldr	r3, [sp, #8]
 800af12:	eeb0 0a48 	vmov.f32	s0, s16
 800af16:	1b98      	subs	r0, r3, r6
 800af18:	f000 f992 	bl	800b240 <scalbnf>
 800af1c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800af04 <__kernel_rem_pio2f+0x308>
 800af20:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800af24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af28:	db1b      	blt.n	800af62 <__kernel_rem_pio2f+0x366>
 800af2a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800af08 <__kernel_rem_pio2f+0x30c>
 800af2e:	ee60 7a27 	vmul.f32	s15, s0, s15
 800af32:	aa06      	add	r2, sp, #24
 800af34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800af38:	a906      	add	r1, sp, #24
 800af3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af3e:	3408      	adds	r4, #8
 800af40:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800af44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800af48:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800af4c:	ee10 3a10 	vmov	r3, s0
 800af50:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800af54:	ee17 2a90 	vmov	r2, s15
 800af58:	f10a 0301 	add.w	r3, sl, #1
 800af5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800af60:	e74c      	b.n	800adfc <__kernel_rem_pio2f+0x200>
 800af62:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800af66:	aa06      	add	r2, sp, #24
 800af68:	ee10 3a10 	vmov	r3, s0
 800af6c:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800af70:	4653      	mov	r3, sl
 800af72:	e743      	b.n	800adfc <__kernel_rem_pio2f+0x200>
 800af74:	aa42      	add	r2, sp, #264	; 0x108
 800af76:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800af7a:	aa06      	add	r2, sp, #24
 800af7c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800af80:	9201      	str	r2, [sp, #4]
 800af82:	ee07 2a90 	vmov	s15, r2
 800af86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af8a:	3901      	subs	r1, #1
 800af8c:	ee67 7a80 	vmul.f32	s15, s15, s0
 800af90:	ee20 0a07 	vmul.f32	s0, s0, s14
 800af94:	edc0 7a00 	vstr	s15, [r0]
 800af98:	e73a      	b.n	800ae10 <__kernel_rem_pio2f+0x214>
 800af9a:	ecf2 6a01 	vldmia	r2!, {s13}
 800af9e:	ecb6 7a01 	vldmia	r6!, {s14}
 800afa2:	eee6 7a87 	vfma.f32	s15, s13, s14
 800afa6:	3101      	adds	r1, #1
 800afa8:	42b9      	cmp	r1, r7
 800afaa:	dc01      	bgt.n	800afb0 <__kernel_rem_pio2f+0x3b4>
 800afac:	428c      	cmp	r4, r1
 800afae:	daf4      	bge.n	800af9a <__kernel_rem_pio2f+0x39e>
 800afb0:	aa56      	add	r2, sp, #344	; 0x158
 800afb2:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800afb6:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800afba:	3801      	subs	r0, #1
 800afbc:	3401      	adds	r4, #1
 800afbe:	e72c      	b.n	800ae1a <__kernel_rem_pio2f+0x21e>
 800afc0:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800afc2:	2a02      	cmp	r2, #2
 800afc4:	dc0a      	bgt.n	800afdc <__kernel_rem_pio2f+0x3e0>
 800afc6:	2a00      	cmp	r2, #0
 800afc8:	dc61      	bgt.n	800b08e <__kernel_rem_pio2f+0x492>
 800afca:	d03c      	beq.n	800b046 <__kernel_rem_pio2f+0x44a>
 800afcc:	9b00      	ldr	r3, [sp, #0]
 800afce:	f003 0007 	and.w	r0, r3, #7
 800afd2:	b057      	add	sp, #348	; 0x15c
 800afd4:	ecbd 8b04 	vpop	{d8-d9}
 800afd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afdc:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800afde:	2a03      	cmp	r2, #3
 800afe0:	d1f4      	bne.n	800afcc <__kernel_rem_pio2f+0x3d0>
 800afe2:	aa2e      	add	r2, sp, #184	; 0xb8
 800afe4:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800afe8:	4608      	mov	r0, r1
 800afea:	461c      	mov	r4, r3
 800afec:	2c00      	cmp	r4, #0
 800afee:	f1a0 0004 	sub.w	r0, r0, #4
 800aff2:	dc59      	bgt.n	800b0a8 <__kernel_rem_pio2f+0x4ac>
 800aff4:	4618      	mov	r0, r3
 800aff6:	2801      	cmp	r0, #1
 800aff8:	f1a1 0104 	sub.w	r1, r1, #4
 800affc:	dc64      	bgt.n	800b0c8 <__kernel_rem_pio2f+0x4cc>
 800affe:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 800af0c <__kernel_rem_pio2f+0x310>
 800b002:	2b01      	cmp	r3, #1
 800b004:	dc70      	bgt.n	800b0e8 <__kernel_rem_pio2f+0x4ec>
 800b006:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800b00a:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800b00e:	f1bb 0f00 	cmp.w	fp, #0
 800b012:	d172      	bne.n	800b0fa <__kernel_rem_pio2f+0x4fe>
 800b014:	edc5 6a00 	vstr	s13, [r5]
 800b018:	ed85 7a01 	vstr	s14, [r5, #4]
 800b01c:	edc5 7a02 	vstr	s15, [r5, #8]
 800b020:	e7d4      	b.n	800afcc <__kernel_rem_pio2f+0x3d0>
 800b022:	aa2e      	add	r2, sp, #184	; 0xb8
 800b024:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800b028:	ed91 7a00 	vldr	s14, [r1]
 800b02c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b030:	3b01      	subs	r3, #1
 800b032:	2b00      	cmp	r3, #0
 800b034:	daf5      	bge.n	800b022 <__kernel_rem_pio2f+0x426>
 800b036:	f1bb 0f00 	cmp.w	fp, #0
 800b03a:	d001      	beq.n	800b040 <__kernel_rem_pio2f+0x444>
 800b03c:	eef1 7a67 	vneg.f32	s15, s15
 800b040:	edc5 7a00 	vstr	s15, [r5]
 800b044:	e7c2      	b.n	800afcc <__kernel_rem_pio2f+0x3d0>
 800b046:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800af0c <__kernel_rem_pio2f+0x310>
 800b04a:	e7f2      	b.n	800b032 <__kernel_rem_pio2f+0x436>
 800b04c:	aa2e      	add	r2, sp, #184	; 0xb8
 800b04e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800b052:	edd0 7a00 	vldr	s15, [r0]
 800b056:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b05a:	3901      	subs	r1, #1
 800b05c:	2900      	cmp	r1, #0
 800b05e:	daf5      	bge.n	800b04c <__kernel_rem_pio2f+0x450>
 800b060:	f1bb 0f00 	cmp.w	fp, #0
 800b064:	d017      	beq.n	800b096 <__kernel_rem_pio2f+0x49a>
 800b066:	eef1 7a47 	vneg.f32	s15, s14
 800b06a:	edc5 7a00 	vstr	s15, [r5]
 800b06e:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800b072:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b076:	a82f      	add	r0, sp, #188	; 0xbc
 800b078:	2101      	movs	r1, #1
 800b07a:	428b      	cmp	r3, r1
 800b07c:	da0e      	bge.n	800b09c <__kernel_rem_pio2f+0x4a0>
 800b07e:	f1bb 0f00 	cmp.w	fp, #0
 800b082:	d001      	beq.n	800b088 <__kernel_rem_pio2f+0x48c>
 800b084:	eef1 7a67 	vneg.f32	s15, s15
 800b088:	edc5 7a01 	vstr	s15, [r5, #4]
 800b08c:	e79e      	b.n	800afcc <__kernel_rem_pio2f+0x3d0>
 800b08e:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 800af0c <__kernel_rem_pio2f+0x310>
 800b092:	4619      	mov	r1, r3
 800b094:	e7e2      	b.n	800b05c <__kernel_rem_pio2f+0x460>
 800b096:	eef0 7a47 	vmov.f32	s15, s14
 800b09a:	e7e6      	b.n	800b06a <__kernel_rem_pio2f+0x46e>
 800b09c:	ecb0 7a01 	vldmia	r0!, {s14}
 800b0a0:	3101      	adds	r1, #1
 800b0a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b0a6:	e7e8      	b.n	800b07a <__kernel_rem_pio2f+0x47e>
 800b0a8:	edd0 7a00 	vldr	s15, [r0]
 800b0ac:	edd0 6a01 	vldr	s13, [r0, #4]
 800b0b0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b0b4:	3c01      	subs	r4, #1
 800b0b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b0ba:	ed80 7a00 	vstr	s14, [r0]
 800b0be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0c2:	edc0 7a01 	vstr	s15, [r0, #4]
 800b0c6:	e791      	b.n	800afec <__kernel_rem_pio2f+0x3f0>
 800b0c8:	edd1 7a00 	vldr	s15, [r1]
 800b0cc:	edd1 6a01 	vldr	s13, [r1, #4]
 800b0d0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b0d4:	3801      	subs	r0, #1
 800b0d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b0da:	ed81 7a00 	vstr	s14, [r1]
 800b0de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0e2:	edc1 7a01 	vstr	s15, [r1, #4]
 800b0e6:	e786      	b.n	800aff6 <__kernel_rem_pio2f+0x3fa>
 800b0e8:	aa2e      	add	r2, sp, #184	; 0xb8
 800b0ea:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800b0ee:	ed91 7a00 	vldr	s14, [r1]
 800b0f2:	3b01      	subs	r3, #1
 800b0f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b0f8:	e783      	b.n	800b002 <__kernel_rem_pio2f+0x406>
 800b0fa:	eef1 6a66 	vneg.f32	s13, s13
 800b0fe:	eeb1 7a47 	vneg.f32	s14, s14
 800b102:	edc5 6a00 	vstr	s13, [r5]
 800b106:	ed85 7a01 	vstr	s14, [r5, #4]
 800b10a:	eef1 7a67 	vneg.f32	s15, s15
 800b10e:	e785      	b.n	800b01c <__kernel_rem_pio2f+0x420>

0800b110 <__kernel_sinf>:
 800b110:	ee10 3a10 	vmov	r3, s0
 800b114:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b118:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800b11c:	da04      	bge.n	800b128 <__kernel_sinf+0x18>
 800b11e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b122:	ee17 3a90 	vmov	r3, s15
 800b126:	b35b      	cbz	r3, 800b180 <__kernel_sinf+0x70>
 800b128:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b12c:	eddf 7a15 	vldr	s15, [pc, #84]	; 800b184 <__kernel_sinf+0x74>
 800b130:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800b188 <__kernel_sinf+0x78>
 800b134:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b138:	eddf 7a14 	vldr	s15, [pc, #80]	; 800b18c <__kernel_sinf+0x7c>
 800b13c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b140:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800b190 <__kernel_sinf+0x80>
 800b144:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b148:	eddf 7a12 	vldr	s15, [pc, #72]	; 800b194 <__kernel_sinf+0x84>
 800b14c:	ee60 6a07 	vmul.f32	s13, s0, s14
 800b150:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b154:	b930      	cbnz	r0, 800b164 <__kernel_sinf+0x54>
 800b156:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800b198 <__kernel_sinf+0x88>
 800b15a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b15e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800b162:	4770      	bx	lr
 800b164:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b168:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800b16c:	eee0 7a86 	vfma.f32	s15, s1, s12
 800b170:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800b174:	eddf 7a09 	vldr	s15, [pc, #36]	; 800b19c <__kernel_sinf+0x8c>
 800b178:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800b17c:	ee30 0a60 	vsub.f32	s0, s0, s1
 800b180:	4770      	bx	lr
 800b182:	bf00      	nop
 800b184:	2f2ec9d3 	.word	0x2f2ec9d3
 800b188:	b2d72f34 	.word	0xb2d72f34
 800b18c:	3638ef1b 	.word	0x3638ef1b
 800b190:	b9500d01 	.word	0xb9500d01
 800b194:	3c088889 	.word	0x3c088889
 800b198:	be2aaaab 	.word	0xbe2aaaab
 800b19c:	3e2aaaab 	.word	0x3e2aaaab

0800b1a0 <fabsf>:
 800b1a0:	ee10 3a10 	vmov	r3, s0
 800b1a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b1a8:	ee00 3a10 	vmov	s0, r3
 800b1ac:	4770      	bx	lr
	...

0800b1b0 <floorf>:
 800b1b0:	ee10 3a10 	vmov	r3, s0
 800b1b4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b1b8:	3a7f      	subs	r2, #127	; 0x7f
 800b1ba:	2a16      	cmp	r2, #22
 800b1bc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b1c0:	dc2a      	bgt.n	800b218 <floorf+0x68>
 800b1c2:	2a00      	cmp	r2, #0
 800b1c4:	da11      	bge.n	800b1ea <floorf+0x3a>
 800b1c6:	eddf 7a18 	vldr	s15, [pc, #96]	; 800b228 <floorf+0x78>
 800b1ca:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b1ce:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b1d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1d6:	dd05      	ble.n	800b1e4 <floorf+0x34>
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	da23      	bge.n	800b224 <floorf+0x74>
 800b1dc:	4a13      	ldr	r2, [pc, #76]	; (800b22c <floorf+0x7c>)
 800b1de:	2900      	cmp	r1, #0
 800b1e0:	bf18      	it	ne
 800b1e2:	4613      	movne	r3, r2
 800b1e4:	ee00 3a10 	vmov	s0, r3
 800b1e8:	4770      	bx	lr
 800b1ea:	4911      	ldr	r1, [pc, #68]	; (800b230 <floorf+0x80>)
 800b1ec:	4111      	asrs	r1, r2
 800b1ee:	420b      	tst	r3, r1
 800b1f0:	d0fa      	beq.n	800b1e8 <floorf+0x38>
 800b1f2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800b228 <floorf+0x78>
 800b1f6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b1fa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b1fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b202:	ddef      	ble.n	800b1e4 <floorf+0x34>
 800b204:	2b00      	cmp	r3, #0
 800b206:	bfbe      	ittt	lt
 800b208:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800b20c:	fa40 f202 	asrlt.w	r2, r0, r2
 800b210:	189b      	addlt	r3, r3, r2
 800b212:	ea23 0301 	bic.w	r3, r3, r1
 800b216:	e7e5      	b.n	800b1e4 <floorf+0x34>
 800b218:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b21c:	d3e4      	bcc.n	800b1e8 <floorf+0x38>
 800b21e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b222:	4770      	bx	lr
 800b224:	2300      	movs	r3, #0
 800b226:	e7dd      	b.n	800b1e4 <floorf+0x34>
 800b228:	7149f2ca 	.word	0x7149f2ca
 800b22c:	bf800000 	.word	0xbf800000
 800b230:	007fffff 	.word	0x007fffff

0800b234 <nanf>:
 800b234:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b23c <nanf+0x8>
 800b238:	4770      	bx	lr
 800b23a:	bf00      	nop
 800b23c:	7fc00000 	.word	0x7fc00000

0800b240 <scalbnf>:
 800b240:	ee10 3a10 	vmov	r3, s0
 800b244:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800b248:	d025      	beq.n	800b296 <scalbnf+0x56>
 800b24a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b24e:	d302      	bcc.n	800b256 <scalbnf+0x16>
 800b250:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b254:	4770      	bx	lr
 800b256:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800b25a:	d122      	bne.n	800b2a2 <scalbnf+0x62>
 800b25c:	4b2a      	ldr	r3, [pc, #168]	; (800b308 <scalbnf+0xc8>)
 800b25e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800b30c <scalbnf+0xcc>
 800b262:	4298      	cmp	r0, r3
 800b264:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b268:	db16      	blt.n	800b298 <scalbnf+0x58>
 800b26a:	ee10 3a10 	vmov	r3, s0
 800b26e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b272:	3a19      	subs	r2, #25
 800b274:	4402      	add	r2, r0
 800b276:	2afe      	cmp	r2, #254	; 0xfe
 800b278:	dd15      	ble.n	800b2a6 <scalbnf+0x66>
 800b27a:	ee10 3a10 	vmov	r3, s0
 800b27e:	eddf 7a24 	vldr	s15, [pc, #144]	; 800b310 <scalbnf+0xd0>
 800b282:	eddf 6a24 	vldr	s13, [pc, #144]	; 800b314 <scalbnf+0xd4>
 800b286:	2b00      	cmp	r3, #0
 800b288:	eeb0 7a67 	vmov.f32	s14, s15
 800b28c:	bfb8      	it	lt
 800b28e:	eef0 7a66 	vmovlt.f32	s15, s13
 800b292:	ee27 0a27 	vmul.f32	s0, s14, s15
 800b296:	4770      	bx	lr
 800b298:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b318 <scalbnf+0xd8>
 800b29c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b2a0:	4770      	bx	lr
 800b2a2:	0dd2      	lsrs	r2, r2, #23
 800b2a4:	e7e6      	b.n	800b274 <scalbnf+0x34>
 800b2a6:	2a00      	cmp	r2, #0
 800b2a8:	dd06      	ble.n	800b2b8 <scalbnf+0x78>
 800b2aa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b2ae:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b2b2:	ee00 3a10 	vmov	s0, r3
 800b2b6:	4770      	bx	lr
 800b2b8:	f112 0f16 	cmn.w	r2, #22
 800b2bc:	da1a      	bge.n	800b2f4 <scalbnf+0xb4>
 800b2be:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b2c2:	4298      	cmp	r0, r3
 800b2c4:	ee10 3a10 	vmov	r3, s0
 800b2c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b2cc:	dd0a      	ble.n	800b2e4 <scalbnf+0xa4>
 800b2ce:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800b310 <scalbnf+0xd0>
 800b2d2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800b314 <scalbnf+0xd4>
 800b2d6:	eef0 7a40 	vmov.f32	s15, s0
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	bf18      	it	ne
 800b2de:	eeb0 0a47 	vmovne.f32	s0, s14
 800b2e2:	e7db      	b.n	800b29c <scalbnf+0x5c>
 800b2e4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800b318 <scalbnf+0xd8>
 800b2e8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800b31c <scalbnf+0xdc>
 800b2ec:	eef0 7a40 	vmov.f32	s15, s0
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	e7f3      	b.n	800b2dc <scalbnf+0x9c>
 800b2f4:	3219      	adds	r2, #25
 800b2f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b2fa:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b2fe:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b320 <scalbnf+0xe0>
 800b302:	ee07 3a10 	vmov	s14, r3
 800b306:	e7c4      	b.n	800b292 <scalbnf+0x52>
 800b308:	ffff3cb0 	.word	0xffff3cb0
 800b30c:	4c000000 	.word	0x4c000000
 800b310:	7149f2ca 	.word	0x7149f2ca
 800b314:	f149f2ca 	.word	0xf149f2ca
 800b318:	0da24260 	.word	0x0da24260
 800b31c:	8da24260 	.word	0x8da24260
 800b320:	33000000 	.word	0x33000000

0800b324 <_init>:
 800b324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b326:	bf00      	nop
 800b328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b32a:	bc08      	pop	{r3}
 800b32c:	469e      	mov	lr, r3
 800b32e:	4770      	bx	lr

0800b330 <_fini>:
 800b330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b332:	bf00      	nop
 800b334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b336:	bc08      	pop	{r3}
 800b338:	469e      	mov	lr, r3
 800b33a:	4770      	bx	lr
