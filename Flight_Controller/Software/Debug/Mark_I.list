
Mark_I.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000801c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  080081a4  080081a4  000181a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008614  08008614  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08008614  08008614  00018614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800861c  0800861c  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800861c  0800861c  0001861c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008620  08008620  00018620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08008624  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00000dc8  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000ec4  20000ec4  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c17d  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003adc  00000000  00000000  0003c2a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001218  00000000  00000000  0003fd88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010a8  00000000  00000000  00040fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022b9e  00000000  00000000  00042048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ac05  00000000  00000000  00064be6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c48ea  00000000  00000000  0007f7eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001440d5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ba8  00000000  00000000  00144128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800818c 	.word	0x0800818c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	0800818c 	.word	0x0800818c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <COMPLEMENTARY_FILTER_Init>:

/* Static function prototype */
static void angle_180(float * x);

void COMPLEMENTARY_FILTER_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	filter.gyro = MPU_Get_Gyro_Ptr();
 80004c4:	f001 fc18 	bl	8001cf8 <MPU_Get_Gyro_Ptr>
 80004c8:	4603      	mov	r3, r0
 80004ca:	4a09      	ldr	r2, [pc, #36]	; (80004f0 <COMPLEMENTARY_FILTER_Init+0x30>)
 80004cc:	6013      	str	r3, [r2, #0]
	filter.gyro_raw = NULL;
 80004ce:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <COMPLEMENTARY_FILTER_Init+0x30>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	605a      	str	r2, [r3, #4]
	filter.acc = MPU_Get_Acc_Ptr();
 80004d4:	f001 fc1a 	bl	8001d0c <MPU_Get_Acc_Ptr>
 80004d8:	4603      	mov	r3, r0
 80004da:	4a05      	ldr	r2, [pc, #20]	; (80004f0 <COMPLEMENTARY_FILTER_Init+0x30>)
 80004dc:	6093      	str	r3, [r2, #8]
	filter.alpha_gyro = ALPHA;
 80004de:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <COMPLEMENTARY_FILTER_Init+0x30>)
 80004e0:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <COMPLEMENTARY_FILTER_Init+0x34>)
 80004e2:	62da      	str	r2, [r3, #44]	; 0x2c
	filter.alpha_acc = 1.0f - ALPHA;
 80004e4:	4b02      	ldr	r3, [pc, #8]	; (80004f0 <COMPLEMENTARY_FILTER_Init+0x30>)
 80004e6:	4a04      	ldr	r2, [pc, #16]	; (80004f8 <COMPLEMENTARY_FILTER_Init+0x38>)
 80004e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	20000000 	.word	0x20000000
 80004f4:	3f7ae148 	.word	0x3f7ae148
 80004f8:	3ca3d700 	.word	0x3ca3d700

080004fc <COMPLEMENTARY_FILTER_Process>:

void COMPLEMENTARY_FILTER_Process(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af00      	add	r7, sp, #0
	/* Total acceleration */
	float acc_total = filter.acc[0] * filter.acc[0];
 8000502:	4baf      	ldr	r3, [pc, #700]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000504:	689b      	ldr	r3, [r3, #8]
 8000506:	ed93 7a00 	vldr	s14, [r3]
 800050a:	4bad      	ldr	r3, [pc, #692]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800050c:	689b      	ldr	r3, [r3, #8]
 800050e:	edd3 7a00 	vldr	s15, [r3]
 8000512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000516:	edc7 7a05 	vstr	s15, [r7, #20]
	acc_total += filter.acc[1] * filter.acc[1];
 800051a:	4ba9      	ldr	r3, [pc, #676]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800051c:	689b      	ldr	r3, [r3, #8]
 800051e:	3304      	adds	r3, #4
 8000520:	ed93 7a00 	vldr	s14, [r3]
 8000524:	4ba6      	ldr	r3, [pc, #664]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000526:	689b      	ldr	r3, [r3, #8]
 8000528:	3304      	adds	r3, #4
 800052a:	edd3 7a00 	vldr	s15, [r3]
 800052e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000532:	ed97 7a05 	vldr	s14, [r7, #20]
 8000536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800053a:	edc7 7a05 	vstr	s15, [r7, #20]
	acc_total += filter.acc[2] * filter.acc[2];
 800053e:	4ba0      	ldr	r3, [pc, #640]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000540:	689b      	ldr	r3, [r3, #8]
 8000542:	3308      	adds	r3, #8
 8000544:	ed93 7a00 	vldr	s14, [r3]
 8000548:	4b9d      	ldr	r3, [pc, #628]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	3308      	adds	r3, #8
 800054e:	edd3 7a00 	vldr	s15, [r3]
 8000552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000556:	ed97 7a05 	vldr	s14, [r7, #20]
 800055a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800055e:	edc7 7a05 	vstr	s15, [r7, #20]
	acc_total = sqrtf(acc_total);
 8000562:	ed97 0a05 	vldr	s0, [r7, #20]
 8000566:	f006 ffd1 	bl	800750c <sqrtf>
 800056a:	ed87 0a05 	vstr	s0, [r7, #20]

	/* Guess the angles according to the accelerometer and some trigonometry */
	if(acc_total)
 800056e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000572:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800057a:	d06c      	beq.n	8000656 <COMPLEMENTARY_FILTER_Process+0x15a>
	{
		float inv_acc_total = 1.0f / acc_total;
 800057c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000580:	ed97 7a05 	vldr	s14, [r7, #20]
 8000584:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000588:	edc7 7a04 	vstr	s15, [r7, #16]
		if(absolute(filter.acc[axe_eROLL]) < acc_total)
 800058c:	4b8c      	ldr	r3, [pc, #560]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	edd3 7a00 	vldr	s15, [r3]
 8000594:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800059c:	db04      	blt.n	80005a8 <COMPLEMENTARY_FILTER_Process+0xac>
 800059e:	4b88      	ldr	r3, [pc, #544]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80005a0:	689b      	ldr	r3, [r3, #8]
 80005a2:	edd3 7a00 	vldr	s15, [r3]
 80005a6:	e005      	b.n	80005b4 <COMPLEMENTARY_FILTER_Process+0xb8>
 80005a8:	4b85      	ldr	r3, [pc, #532]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	edd3 7a00 	vldr	s15, [r3]
 80005b0:	eef1 7a67 	vneg.f32	s15, s15
 80005b4:	ed97 7a05 	vldr	s14, [r7, #20]
 80005b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005c0:	d516      	bpl.n	80005f0 <COMPLEMENTARY_FILTER_Process+0xf4>
		{
			filter.angle_acc[axe_ePITCH] = 	-asinf(filter.acc[axe_eROLL] * inv_acc_total) * RAD_TO_DEG;
 80005c2:	4b7f      	ldr	r3, [pc, #508]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80005c4:	689b      	ldr	r3, [r3, #8]
 80005c6:	ed93 7a00 	vldr	s14, [r3]
 80005ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80005ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005d2:	eeb0 0a67 	vmov.f32	s0, s15
 80005d6:	f006 ff67 	bl	80074a8 <asinf>
 80005da:	eef0 7a40 	vmov.f32	s15, s0
 80005de:	eef1 7a67 	vneg.f32	s15, s15
 80005e2:	ed9f 7a78 	vldr	s14, [pc, #480]	; 80007c4 <COMPLEMENTARY_FILTER_Process+0x2c8>
 80005e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005ea:	4b75      	ldr	r3, [pc, #468]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80005ec:	edc3 7a07 	vstr	s15, [r3, #28]
		}
		if(absolute(filter.acc[axe_ePITCH]) < acc_total)
 80005f0:	4b73      	ldr	r3, [pc, #460]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	3304      	adds	r3, #4
 80005f6:	edd3 7a00 	vldr	s15, [r3]
 80005fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80005fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000602:	db04      	blt.n	800060e <COMPLEMENTARY_FILTER_Process+0x112>
 8000604:	4b6e      	ldr	r3, [pc, #440]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	edd3 7a01 	vldr	s15, [r3, #4]
 800060c:	e006      	b.n	800061c <COMPLEMENTARY_FILTER_Process+0x120>
 800060e:	4b6c      	ldr	r3, [pc, #432]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000610:	689b      	ldr	r3, [r3, #8]
 8000612:	3304      	adds	r3, #4
 8000614:	edd3 7a00 	vldr	s15, [r3]
 8000618:	eef1 7a67 	vneg.f32	s15, s15
 800061c:	ed97 7a05 	vldr	s14, [r7, #20]
 8000620:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000628:	d515      	bpl.n	8000656 <COMPLEMENTARY_FILTER_Process+0x15a>
		{
			filter.angle_acc[axe_eROLL] = 	asinf(filter.acc[axe_ePITCH] * inv_acc_total) * RAD_TO_DEG;
 800062a:	4b65      	ldr	r3, [pc, #404]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800062c:	689b      	ldr	r3, [r3, #8]
 800062e:	3304      	adds	r3, #4
 8000630:	ed93 7a00 	vldr	s14, [r3]
 8000634:	edd7 7a04 	vldr	s15, [r7, #16]
 8000638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800063c:	eeb0 0a67 	vmov.f32	s0, s15
 8000640:	f006 ff32 	bl	80074a8 <asinf>
 8000644:	eef0 7a40 	vmov.f32	s15, s0
 8000648:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80007c4 <COMPLEMENTARY_FILTER_Process+0x2c8>
 800064c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000650:	4b5b      	ldr	r3, [pc, #364]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000652:	edc3 7a06 	vstr	s15, [r3, #24]
		}
	}

	if(!filter.used_once)
 8000656:	4b5a      	ldr	r3, [pc, #360]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000658:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800065c:	2b00      	cmp	r3, #0
 800065e:	d110      	bne.n	8000682 <COMPLEMENTARY_FILTER_Process+0x186>
	{
		filter.used_once = TRUE;
 8000660:	4b57      	ldr	r3, [pc, #348]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000662:	2201      	movs	r2, #1
 8000664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		filter.angle[axe_eROLL] = filter.angle_acc[axe_eROLL];
 8000668:	4b55      	ldr	r3, [pc, #340]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	4a54      	ldr	r2, [pc, #336]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800066e:	60d3      	str	r3, [r2, #12]
		filter.angle[axe_ePITCH] = filter.angle_acc[axe_ePITCH];
 8000670:	4b53      	ldr	r3, [pc, #332]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000672:	69db      	ldr	r3, [r3, #28]
 8000674:	4a52      	ldr	r2, [pc, #328]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000676:	6113      	str	r3, [r2, #16]
		filter.angle[axe_eYAW] = 0;
 8000678:	4b51      	ldr	r3, [pc, #324]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800067a:	f04f 0200 	mov.w	r2, #0
 800067e:	615a      	str	r2, [r3, #20]
		/* Finally, the complementary filter */
		filter.angle[axe_eROLL] = filter.alpha_gyro * filter.angle[axe_eROLL] + filter.alpha_acc * filter.angle_acc[axe_eROLL];
		filter.angle[axe_ePITCH] = filter.alpha_gyro * filter.angle[axe_ePITCH] + filter.alpha_acc * filter.angle_acc[axe_ePITCH];
	}

}
 8000680:	e09a      	b.n	80007b8 <COMPLEMENTARY_FILTER_Process+0x2bc>
		float dx = filter.gyro[axe_eROLL] * filter.period;
 8000682:	4b4f      	ldr	r3, [pc, #316]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	ed93 7a00 	vldr	s14, [r3]
 800068a:	4b4d      	ldr	r3, [pc, #308]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800068c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000694:	edc7 7a03 	vstr	s15, [r7, #12]
		float dy = filter.gyro[axe_ePITCH] * filter.period;
 8000698:	4b49      	ldr	r3, [pc, #292]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	3304      	adds	r3, #4
 800069e:	ed93 7a00 	vldr	s14, [r3]
 80006a2:	4b47      	ldr	r3, [pc, #284]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006a4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80006a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006ac:	edc7 7a02 	vstr	s15, [r7, #8]
		float dz = filter.gyro[axe_eYAW] * filter.period;
 80006b0:	4b43      	ldr	r3, [pc, #268]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	3308      	adds	r3, #8
 80006b6:	ed93 7a00 	vldr	s14, [r3]
 80006ba:	4b41      	ldr	r3, [pc, #260]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006bc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80006c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006c4:	edc7 7a01 	vstr	s15, [r7, #4]
		filter.angle[axe_eROLL] += dx;
 80006c8:	4b3d      	ldr	r3, [pc, #244]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006ca:	ed93 7a03 	vldr	s14, [r3, #12]
 80006ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80006d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006d6:	4b3a      	ldr	r3, [pc, #232]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006d8:	edc3 7a03 	vstr	s15, [r3, #12]
		filter.angle[axe_ePITCH] += dy;
 80006dc:	4b38      	ldr	r3, [pc, #224]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006de:	ed93 7a04 	vldr	s14, [r3, #16]
 80006e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80006e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006ea:	4b35      	ldr	r3, [pc, #212]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006ec:	edc3 7a04 	vstr	s15, [r3, #16]
		filter.angle[axe_eYAW] += dz;
 80006f0:	4b33      	ldr	r3, [pc, #204]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006f2:	ed93 7a05 	vldr	s14, [r3, #20]
 80006f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80006fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006fe:	4b30      	ldr	r3, [pc, #192]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000700:	edc3 7a05 	vstr	s15, [r3, #20]
		float sin_dz = sinf(DEG_TO_RAD * dz);
 8000704:	edd7 7a01 	vldr	s15, [r7, #4]
 8000708:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80007c8 <COMPLEMENTARY_FILTER_Process+0x2cc>
 800070c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000710:	eeb0 0a67 	vmov.f32	s0, s15
 8000714:	f006 fe86 	bl	8007424 <sinf>
 8000718:	ed87 0a00 	vstr	s0, [r7]
		filter.angle[axe_eROLL] += sin_dz * filter.angle[axe_ePITCH];
 800071c:	4b28      	ldr	r3, [pc, #160]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800071e:	ed93 7a03 	vldr	s14, [r3, #12]
 8000722:	4b27      	ldr	r3, [pc, #156]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000724:	edd3 6a04 	vldr	s13, [r3, #16]
 8000728:	edd7 7a00 	vldr	s15, [r7]
 800072c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000734:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000736:	edc3 7a03 	vstr	s15, [r3, #12]
		filter.angle[axe_ePITCH] -= sin_dz * filter.angle[axe_eROLL];
 800073a:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800073c:	ed93 7a04 	vldr	s14, [r3, #16]
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000742:	edd3 6a03 	vldr	s13, [r3, #12]
 8000746:	edd7 7a00 	vldr	s15, [r7]
 800074a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800074e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000752:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000754:	edc3 7a04 	vstr	s15, [r3, #16]
		angle_180(&filter.angle[axe_eROLL]);
 8000758:	481c      	ldr	r0, [pc, #112]	; (80007cc <COMPLEMENTARY_FILTER_Process+0x2d0>)
 800075a:	f000 f83b 	bl	80007d4 <angle_180>
		angle_180(&filter.angle[axe_ePITCH]);
 800075e:	481c      	ldr	r0, [pc, #112]	; (80007d0 <COMPLEMENTARY_FILTER_Process+0x2d4>)
 8000760:	f000 f838 	bl	80007d4 <angle_180>
		filter.angle[axe_eROLL] = filter.alpha_gyro * filter.angle[axe_eROLL] + filter.alpha_acc * filter.angle_acc[axe_eROLL];
 8000764:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000766:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800076c:	edd3 7a03 	vldr	s15, [r3, #12]
 8000770:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000776:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800077c:	edd3 7a06 	vldr	s15, [r3, #24]
 8000780:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000784:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000788:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800078a:	edc3 7a03 	vstr	s15, [r3, #12]
		filter.angle[axe_ePITCH] = filter.alpha_gyro * filter.angle[axe_ePITCH] + filter.alpha_acc * filter.angle_acc[axe_ePITCH];
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000790:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000794:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000796:	edd3 7a04 	vldr	s15, [r3, #16]
 800079a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80007a0:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80007a6:	edd3 7a07 	vldr	s15, [r3, #28]
 80007aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007b2:	4b03      	ldr	r3, [pc, #12]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80007b4:	edc3 7a04 	vstr	s15, [r3, #16]
}
 80007b8:	bf00      	nop
 80007ba:	3718      	adds	r7, #24
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000000 	.word	0x20000000
 80007c4:	42652ee1 	.word	0x42652ee1
 80007c8:	3c8efa34 	.word	0x3c8efa34
 80007cc:	2000000c 	.word	0x2000000c
 80007d0:	20000010 	.word	0x20000010

080007d4 <angle_180>:
{
	return &filter;
}

static void angle_180(float * x)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	if(*x > 180)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	edd3 7a00 	vldr	s15, [r3]
 80007e2:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800083c <angle_180+0x68>
 80007e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007ee:	dd0a      	ble.n	8000806 <angle_180+0x32>
	{
		*x -= 360;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	edd3 7a00 	vldr	s15, [r3]
 80007f6:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000840 <angle_180+0x6c>
 80007fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	edc3 7a00 	vstr	s15, [r3]
	}
	else if( *x < -180)
	{
		*x += 360 ;
	}
}
 8000804:	e014      	b.n	8000830 <angle_180+0x5c>
	else if( *x < -180)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	edd3 7a00 	vldr	s15, [r3]
 800080c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000844 <angle_180+0x70>
 8000810:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000818:	d400      	bmi.n	800081c <angle_180+0x48>
}
 800081a:	e009      	b.n	8000830 <angle_180+0x5c>
		*x += 360 ;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	edd3 7a00 	vldr	s15, [r3]
 8000822:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000840 <angle_180+0x6c>
 8000826:	ee77 7a87 	vadd.f32	s15, s15, s14
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	edc3 7a00 	vstr	s15, [r3]
}
 8000830:	bf00      	nop
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	43340000 	.word	0x43340000
 8000840:	43b40000 	.word	0x43b40000
 8000844:	c3340000 	.word	0xc3340000

08000848 <DATA_LOGGER_Init>:
/*
 * @brief Declare every data
 * @param mark1_ pointer to a system_t structure
 */
void DATA_LOGGER_Init(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
	/* -------------- Outputs ----------------- */
	DEFINE_DATA(data_id_eMCU_LOAD,
 800084c:	4b2b      	ldr	r3, [pc, #172]	; (80008fc <DATA_LOGGER_Init+0xb4>)
 800084e:	2203      	movs	r2, #3
 8000850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000854:	4b29      	ldr	r3, [pc, #164]	; (80008fc <DATA_LOGGER_Init+0xb4>)
 8000856:	2200      	movs	r2, #0
 8000858:	641a      	str	r2, [r3, #64]	; 0x40
 800085a:	4b28      	ldr	r3, [pc, #160]	; (80008fc <DATA_LOGGER_Init+0xb4>)
 800085c:	222a      	movs	r2, #42	; 0x2a
 800085e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000862:	4b26      	ldr	r3, [pc, #152]	; (80008fc <DATA_LOGGER_Init+0xb4>)
 8000864:	4a26      	ldr	r2, [pc, #152]	; (8000900 <DATA_LOGGER_Init+0xb8>)
 8000866:	649a      	str	r2, [r3, #72]	; 0x48
 8000868:	4b24      	ldr	r3, [pc, #144]	; (80008fc <DATA_LOGGER_Init+0xb4>)
 800086a:	2208      	movs	r2, #8
 800086c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8000870:	4b22      	ldr	r3, [pc, #136]	; (80008fc <DATA_LOGGER_Init+0xb4>)
 8000872:	2201      	movs	r2, #1
 8000874:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				NULL,
				data_format_e16B_FLOAT_2D,
				"Mcu Load",
				use_format_eAS_OUTPUT);
	/* -------------- Inputs ----------------- */
	DEFINE_DATA(data_id_eCONFIG_REQUEST,
 8000878:	4b20      	ldr	r3, [pc, #128]	; (80008fc <DATA_LOGGER_Init+0xb4>)
 800087a:	2200      	movs	r2, #0
 800087c:	721a      	strb	r2, [r3, #8]
 800087e:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <DATA_LOGGER_Init+0xb4>)
 8000880:	2200      	movs	r2, #0
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	4b1d      	ldr	r3, [pc, #116]	; (80008fc <DATA_LOGGER_Init+0xb4>)
 8000886:	2200      	movs	r2, #0
 8000888:	725a      	strb	r2, [r3, #9]
 800088a:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <DATA_LOGGER_Init+0xb4>)
 800088c:	4a1d      	ldr	r2, [pc, #116]	; (8000904 <DATA_LOGGER_Init+0xbc>)
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <DATA_LOGGER_Init+0xb4>)
 8000892:	2212      	movs	r2, #18
 8000894:	741a      	strb	r2, [r3, #16]
 8000896:	4b19      	ldr	r3, [pc, #100]	; (80008fc <DATA_LOGGER_Init+0xb4>)
 8000898:	2202      	movs	r2, #2
 800089a:	745a      	strb	r2, [r3, #17]
				NULL,
				data_format_e0B_BUTTON,
				"Send Configuration",
				use_format_eAS_INPUT);
	DEFINE_DATA(data_id_eSTART_TRANSFER,
 800089c:	4b17      	ldr	r3, [pc, #92]	; (80008fc <DATA_LOGGER_Init+0xb4>)
 800089e:	2201      	movs	r2, #1
 80008a0:	771a      	strb	r2, [r3, #28]
 80008a2:	4b16      	ldr	r3, [pc, #88]	; (80008fc <DATA_LOGGER_Init+0xb4>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
 80008a8:	4b14      	ldr	r3, [pc, #80]	; (80008fc <DATA_LOGGER_Init+0xb4>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	775a      	strb	r2, [r3, #29]
 80008ae:	4b13      	ldr	r3, [pc, #76]	; (80008fc <DATA_LOGGER_Init+0xb4>)
 80008b0:	4a15      	ldr	r2, [pc, #84]	; (8000908 <DATA_LOGGER_Init+0xc0>)
 80008b2:	621a      	str	r2, [r3, #32]
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <DATA_LOGGER_Init+0xb4>)
 80008b6:	220e      	movs	r2, #14
 80008b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <DATA_LOGGER_Init+0xb4>)
 80008be:	2202      	movs	r2, #2
 80008c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				NULL,
				data_format_e0B_BUTTON,
				"Start Transfer",
				use_format_eAS_INPUT);
	DEFINE_DATA(data_id_eSTOP_TRANSFER,
 80008c4:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <DATA_LOGGER_Init+0xb4>)
 80008c6:	2202      	movs	r2, #2
 80008c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80008cc:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <DATA_LOGGER_Init+0xb4>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80008d2:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <DATA_LOGGER_Init+0xb4>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <DATA_LOGGER_Init+0xb4>)
 80008dc:	4a0b      	ldr	r2, [pc, #44]	; (800090c <DATA_LOGGER_Init+0xc4>)
 80008de:	635a      	str	r2, [r3, #52]	; 0x34
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <DATA_LOGGER_Init+0xb4>)
 80008e2:	220d      	movs	r2, #13
 80008e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80008e8:	4b04      	ldr	r3, [pc, #16]	; (80008fc <DATA_LOGGER_Init+0xb4>)
 80008ea:	2202      	movs	r2, #2
 80008ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
				NULL,
				data_format_e0B_BUTTON,
				"Stop Transfer",
				use_format_eAS_INPUT);
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	20000118 	.word	0x20000118
 8000900:	080081a4 	.word	0x080081a4
 8000904:	080081b0 	.word	0x080081b0
 8000908:	080081c4 	.word	0x080081c4
 800090c:	080081d4 	.word	0x080081d4

08000910 <DATA_LOGGER_Start>:
/*
 * @brief Request to start logging data
 */
void DATA_LOGGER_Start()
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
	start_flag = TRUE;
 8000914:	4b03      	ldr	r3, [pc, #12]	; (8000924 <DATA_LOGGER_Start+0x14>)
 8000916:	2201      	movs	r2, #1
 8000918:	701a      	strb	r2, [r3, #0]
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	20000168 	.word	0x20000168

08000928 <DATA_LOGGER_Stop>:
/*
 * @brief Request to stop logging data
 */
void DATA_LOGGER_Stop()
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
	stop_flag = TRUE;
 800092c:	4b03      	ldr	r3, [pc, #12]	; (800093c <DATA_LOGGER_Stop+0x14>)
 800092e:	2201      	movs	r2, #1
 8000930:	701a      	strb	r2, [r3, #0]
}
 8000932:	bf00      	nop
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	2000016a 	.word	0x2000016a

08000940 <DATA_LOGGER_Main>:

/*
 * @brief Call the state machine and the uart parser
 */
void DATA_LOGGER_Main(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
	state_machine();
 8000944:	f000 fab0 	bl	8000ea8 <state_machine>
	parse_uart();
 8000948:	f000 fbc0 	bl	80010cc <parse_uart>
}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}

08000950 <DATA_LOGGER_Reception>:
/*
 * @brief Parse input data
 * @param input_buffer Buffer to use to parse the data
 */
void DATA_LOGGER_Reception(uint8_t * input_buffer)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	uint8_t id = input_buffer[0];
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp_uint_16 = 0 ;
 800095e:	2300      	movs	r3, #0
 8000960:	81bb      	strh	r3, [r7, #12]
	int16_t tmp_int_16 = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	817b      	strh	r3, [r7, #10]
	switch(data_list[id].format)
 8000966:	7bfa      	ldrb	r2, [r7, #15]
 8000968:	4954      	ldr	r1, [pc, #336]	; (8000abc <DATA_LOGGER_Reception+0x16c>)
 800096a:	4613      	mov	r3, r2
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	4413      	add	r3, r2
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	440b      	add	r3, r1
 8000974:	3309      	adds	r3, #9
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b2d      	cmp	r3, #45	; 0x2d
 800097a:	f200 809a 	bhi.w	8000ab2 <DATA_LOGGER_Reception+0x162>
 800097e:	a201      	add	r2, pc, #4	; (adr r2, 8000984 <DATA_LOGGER_Reception+0x34>)
 8000980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000984:	08000a3d 	.word	0x08000a3d
 8000988:	08000ab3 	.word	0x08000ab3
 800098c:	08000ab3 	.word	0x08000ab3
 8000990:	08000ab3 	.word	0x08000ab3
 8000994:	08000ab3 	.word	0x08000ab3
 8000998:	08000ab3 	.word	0x08000ab3
 800099c:	08000ab3 	.word	0x08000ab3
 80009a0:	08000ab3 	.word	0x08000ab3
 80009a4:	08000ab3 	.word	0x08000ab3
 80009a8:	08000ab3 	.word	0x08000ab3
 80009ac:	08000ab3 	.word	0x08000ab3
 80009b0:	08000ab3 	.word	0x08000ab3
 80009b4:	08000ab3 	.word	0x08000ab3
 80009b8:	08000ab3 	.word	0x08000ab3
 80009bc:	08000ab3 	.word	0x08000ab3
 80009c0:	08000ab3 	.word	0x08000ab3
 80009c4:	08000ab3 	.word	0x08000ab3
 80009c8:	08000ab3 	.word	0x08000ab3
 80009cc:	08000ab3 	.word	0x08000ab3
 80009d0:	08000ab3 	.word	0x08000ab3
 80009d4:	08000ab3 	.word	0x08000ab3
 80009d8:	08000a69 	.word	0x08000a69
 80009dc:	08000ab3 	.word	0x08000ab3
 80009e0:	08000ab3 	.word	0x08000ab3
 80009e4:	08000ab3 	.word	0x08000ab3
 80009e8:	08000ab3 	.word	0x08000ab3
 80009ec:	08000ab3 	.word	0x08000ab3
 80009f0:	08000ab3 	.word	0x08000ab3
 80009f4:	08000ab3 	.word	0x08000ab3
 80009f8:	08000ab3 	.word	0x08000ab3
 80009fc:	08000ab3 	.word	0x08000ab3
 8000a00:	08000ab3 	.word	0x08000ab3
 8000a04:	08000ab3 	.word	0x08000ab3
 8000a08:	08000ab3 	.word	0x08000ab3
 8000a0c:	08000ab3 	.word	0x08000ab3
 8000a10:	08000ab3 	.word	0x08000ab3
 8000a14:	08000ab3 	.word	0x08000ab3
 8000a18:	08000ab3 	.word	0x08000ab3
 8000a1c:	08000ab3 	.word	0x08000ab3
 8000a20:	08000ab3 	.word	0x08000ab3
 8000a24:	08000ab3 	.word	0x08000ab3
 8000a28:	08000ab3 	.word	0x08000ab3
 8000a2c:	08000ab3 	.word	0x08000ab3
 8000a30:	08000ab3 	.word	0x08000ab3
 8000a34:	08000a95 	.word	0x08000a95
 8000a38:	08000a77 	.word	0x08000a77
	{
		case data_format_e0B_BUTTON:
			/* Link an action to each id */
			switch(id)
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
 8000a3e:	2b02      	cmp	r3, #2
 8000a40:	d00d      	beq.n	8000a5e <DATA_LOGGER_Reception+0x10e>
 8000a42:	2b02      	cmp	r3, #2
 8000a44:	dc0e      	bgt.n	8000a64 <DATA_LOGGER_Reception+0x114>
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d002      	beq.n	8000a50 <DATA_LOGGER_Reception+0x100>
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d004      	beq.n	8000a58 <DATA_LOGGER_Reception+0x108>
			{
				default:
					break;
 8000a4e:	e009      	b.n	8000a64 <DATA_LOGGER_Reception+0x114>
				case data_id_eCONFIG_REQUEST:
					send_config_flag = TRUE;
 8000a50:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <DATA_LOGGER_Reception+0x170>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	701a      	strb	r2, [r3, #0]
					break;
 8000a56:	e006      	b.n	8000a66 <DATA_LOGGER_Reception+0x116>
				case data_id_eSTART_TRANSFER:
					DATA_LOGGER_Start();
 8000a58:	f7ff ff5a 	bl	8000910 <DATA_LOGGER_Start>
					break;
 8000a5c:	e003      	b.n	8000a66 <DATA_LOGGER_Reception+0x116>
				case data_id_eSTOP_TRANSFER:
					DATA_LOGGER_Stop();
 8000a5e:	f7ff ff63 	bl	8000928 <DATA_LOGGER_Stop>
					break;
 8000a62:	e000      	b.n	8000a66 <DATA_LOGGER_Reception+0x116>
					break;
 8000a64:	bf00      	nop
			}
			break;
 8000a66:	e025      	b.n	8000ab4 <DATA_LOGGER_Reception+0x164>
		case data_format_e8B_FLOAT_0D:
			break;
		case data_format_e8B_FLOAT_1D:
			break;
		case data_format_e8B_PWM:
			tmp_uint_16 = 4*input_buffer[1];
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	81bb      	strh	r3, [r7, #12]
			break;
 8000a74:	e01e      	b.n	8000ab4 <DATA_LOGGER_Reception+0x164>
		case data_format_e16B_INT16:
			tmp_int_16 = (int16_t)input_buffer[1] << 8;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	021b      	lsls	r3, r3, #8
 8000a7e:	817b      	strh	r3, [r7, #10]
			tmp_int_16 += (int16_t)input_buffer[2];
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3302      	adds	r3, #2
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	897b      	ldrh	r3, [r7, #10]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	817b      	strh	r3, [r7, #10]
			switch(id)
			{
				default:
					break;
 8000a90:	bf00      	nop
			}

			break;
 8000a92:	e00f      	b.n	8000ab4 <DATA_LOGGER_Reception+0x164>
		case data_format_e16B_UINT16:
			tmp_uint_16 = (uint16_t)input_buffer[1] << 8;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3301      	adds	r3, #1
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	021b      	lsls	r3, r3, #8
 8000a9e:	81bb      	strh	r3, [r7, #12]
			tmp_uint_16 += (uint16_t)input_buffer[2];
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3302      	adds	r3, #2
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	b29a      	uxth	r2, r3
 8000aa8:	89bb      	ldrh	r3, [r7, #12]
 8000aaa:	4413      	add	r3, r2
 8000aac:	81bb      	strh	r3, [r7, #12]
			switch(id)
			{
				default:
					break;
 8000aae:	bf00      	nop
			}

		case data_format_e16B_FLOAT_1D:
			break;
 8000ab0:	e000      	b.n	8000ab4 <DATA_LOGGER_Reception+0x164>
		default:
			break;
 8000ab2:	bf00      	nop

	}
}
 8000ab4:	bf00      	nop
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000118 	.word	0x20000118
 8000ac0:	20000169 	.word	0x20000169

08000ac4 <DATA_LOGGER_Get_Data_Value>:
 * @param id Id of the data
 * @param buffer Buffer array
 * @return Number of bytes written
 */
uint8_t DATA_LOGGER_Get_Data_Value(data_id_e id, uint8_t * buffer)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b087      	sub	sp, #28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	73fb      	strb	r3, [r7, #15]

	/* Local temporary variables */
	int16_t tmp_16 = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	82fb      	strh	r3, [r7, #22]
	float tmp_float = 0;
 8000ad4:	f04f 0300 	mov.w	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]

	/* First byte is reserved for the id */
	buffer[0] = id ;
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	7bfa      	ldrb	r2, [r7, #15]
 8000ade:	701a      	strb	r2, [r3, #0]
	switch(data_list[id].format)
 8000ae0:	7bfa      	ldrb	r2, [r7, #15]
 8000ae2:	498f      	ldr	r1, [pc, #572]	; (8000d20 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	4413      	add	r3, r2
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	440b      	add	r3, r1
 8000aee:	3309      	adds	r3, #9
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	3b14      	subs	r3, #20
 8000af4:	2b19      	cmp	r3, #25
 8000af6:	f200 80fb 	bhi.w	8000cf0 <DATA_LOGGER_Get_Data_Value+0x22c>
 8000afa:	a201      	add	r2, pc, #4	; (adr r2, 8000b00 <DATA_LOGGER_Get_Data_Value+0x3c>)
 8000afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b00:	08000b69 	.word	0x08000b69
 8000b04:	08000cf1 	.word	0x08000cf1
 8000b08:	08000cf1 	.word	0x08000cf1
 8000b0c:	08000b85 	.word	0x08000b85
 8000b10:	08000cf1 	.word	0x08000cf1
 8000b14:	08000cf1 	.word	0x08000cf1
 8000b18:	08000cf1 	.word	0x08000cf1
 8000b1c:	08000cf1 	.word	0x08000cf1
 8000b20:	08000cf1 	.word	0x08000cf1
 8000b24:	08000cf1 	.word	0x08000cf1
 8000b28:	08000cf1 	.word	0x08000cf1
 8000b2c:	08000cf1 	.word	0x08000cf1
 8000b30:	08000cf1 	.word	0x08000cf1
 8000b34:	08000cf1 	.word	0x08000cf1
 8000b38:	08000cf1 	.word	0x08000cf1
 8000b3c:	08000cf1 	.word	0x08000cf1
 8000b40:	08000cf1 	.word	0x08000cf1
 8000b44:	08000cf1 	.word	0x08000cf1
 8000b48:	08000cf1 	.word	0x08000cf1
 8000b4c:	08000cf1 	.word	0x08000cf1
 8000b50:	08000cf1 	.word	0x08000cf1
 8000b54:	08000bb5 	.word	0x08000bb5
 8000b58:	08000bfd 	.word	0x08000bfd
 8000b5c:	08000c45 	.word	0x08000c45
 8000b60:	08000c8d 	.word	0x08000c8d
 8000b64:	08000cbf 	.word	0x08000cbf
	{
		case data_format_e8B:
			buffer[1] = *(uint8_t*)data_list[id].data ;
 8000b68:	7bfa      	ldrb	r2, [r7, #15]
 8000b6a:	496d      	ldr	r1, [pc, #436]	; (8000d20 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	4413      	add	r3, r2
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	440b      	add	r3, r1
 8000b76:	3304      	adds	r3, #4
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	7812      	ldrb	r2, [r2, #0]
 8000b80:	701a      	strb	r2, [r3, #0]
			break;
 8000b82:	e0b6      	b.n	8000cf2 <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e8B_PWM:
			break;
		case data_format_e8B_FLOAT_0D:
			tmp_float = *(float*)data_list[id].data ;
 8000b84:	7bfa      	ldrb	r2, [r7, #15]
 8000b86:	4966      	ldr	r1, [pc, #408]	; (8000d20 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000b88:	4613      	mov	r3, r2
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	4413      	add	r3, r2
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	440b      	add	r3, r1
 8000b92:	3304      	adds	r3, #4
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	613b      	str	r3, [r7, #16]
			buffer[1] = (int8_t)tmp_float;
 8000b9a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ba2:	edc7 7a01 	vstr	s15, [r7, #4]
 8000ba6:	793b      	ldrb	r3, [r7, #4]
 8000ba8:	b25a      	sxtb	r2, r3
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	3301      	adds	r3, #1
 8000bae:	b2d2      	uxtb	r2, r2
 8000bb0:	701a      	strb	r2, [r3, #0]
			break;
 8000bb2:	e09e      	b.n	8000cf2 <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e8B_FLOAT_1D:
			break;
		case data_format_e16B:
			break;
		case data_format_e16B_FLOAT_1D:
			tmp_float = *(float*)data_list[id].data;
 8000bb4:	7bfa      	ldrb	r2, [r7, #15]
 8000bb6:	495a      	ldr	r1, [pc, #360]	; (8000d20 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000bb8:	4613      	mov	r3, r2
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	4413      	add	r3, r2
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	440b      	add	r3, r1
 8000bc2:	3304      	adds	r3, #4
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 10;
 8000bca:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bce:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000bd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bda:	ee17 3a90 	vmov	r3, s15
 8000bde:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8000be0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000be4:	121b      	asrs	r3, r3, #8
 8000be6:	b21a      	sxth	r2, r3
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	3301      	adds	r3, #1
 8000bec:	b2d2      	uxtb	r2, r2
 8000bee:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	3302      	adds	r3, #2
 8000bf4:	8afa      	ldrh	r2, [r7, #22]
 8000bf6:	b2d2      	uxtb	r2, r2
 8000bf8:	701a      	strb	r2, [r3, #0]
			break;
 8000bfa:	e07a      	b.n	8000cf2 <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e16B_FLOAT_2D:
			tmp_float = *(float*)data_list[id].data;
 8000bfc:	7bfa      	ldrb	r2, [r7, #15]
 8000bfe:	4948      	ldr	r1, [pc, #288]	; (8000d20 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000c00:	4613      	mov	r3, r2
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	4413      	add	r3, r2
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	440b      	add	r3, r1
 8000c0a:	3304      	adds	r3, #4
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 100;
 8000c12:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c16:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8000d24 <DATA_LOGGER_Get_Data_Value+0x260>
 8000c1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c22:	ee17 3a90 	vmov	r3, s15
 8000c26:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8000c28:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c2c:	121b      	asrs	r3, r3, #8
 8000c2e:	b21a      	sxth	r2, r3
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	3301      	adds	r3, #1
 8000c34:	b2d2      	uxtb	r2, r2
 8000c36:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	3302      	adds	r3, #2
 8000c3c:	8afa      	ldrh	r2, [r7, #22]
 8000c3e:	b2d2      	uxtb	r2, r2
 8000c40:	701a      	strb	r2, [r3, #0]
			break;
 8000c42:	e056      	b.n	8000cf2 <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e16B_FLOAT_3D:
			tmp_float = *(float*)data_list[id].data;
 8000c44:	7bfa      	ldrb	r2, [r7, #15]
 8000c46:	4936      	ldr	r1, [pc, #216]	; (8000d20 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000c48:	4613      	mov	r3, r2
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	4413      	add	r3, r2
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	440b      	add	r3, r1
 8000c52:	3304      	adds	r3, #4
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 1000;
 8000c5a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c5e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8000d28 <DATA_LOGGER_Get_Data_Value+0x264>
 8000c62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c6a:	ee17 3a90 	vmov	r3, s15
 8000c6e:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8000c70:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c74:	121b      	asrs	r3, r3, #8
 8000c76:	b21a      	sxth	r2, r3
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	b2d2      	uxtb	r2, r2
 8000c7e:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	3302      	adds	r3, #2
 8000c84:	8afa      	ldrh	r2, [r7, #22]
 8000c86:	b2d2      	uxtb	r2, r2
 8000c88:	701a      	strb	r2, [r3, #0]
			break;
 8000c8a:	e032      	b.n	8000cf2 <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e16B_UINT16:
			tmp_16 = *(uint16_t*)data_list[id].data ;
 8000c8c:	7bfa      	ldrb	r2, [r7, #15]
 8000c8e:	4924      	ldr	r1, [pc, #144]	; (8000d20 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000c90:	4613      	mov	r3, r2
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	4413      	add	r3, r2
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	440b      	add	r3, r1
 8000c9a:	3304      	adds	r3, #4
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8000ca2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ca6:	121b      	asrs	r3, r3, #8
 8000ca8:	b21a      	sxth	r2, r3
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	3301      	adds	r3, #1
 8000cae:	b2d2      	uxtb	r2, r2
 8000cb0:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	3302      	adds	r3, #2
 8000cb6:	8afa      	ldrh	r2, [r7, #22]
 8000cb8:	b2d2      	uxtb	r2, r2
 8000cba:	701a      	strb	r2, [r3, #0]
			break;
 8000cbc:	e019      	b.n	8000cf2 <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e16B_INT16:
			tmp_16 = *(int16_t*)data_list[id].data ;
 8000cbe:	7bfa      	ldrb	r2, [r7, #15]
 8000cc0:	4917      	ldr	r1, [pc, #92]	; (8000d20 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	4413      	add	r3, r2
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	440b      	add	r3, r1
 8000ccc:	3304      	adds	r3, #4
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	881b      	ldrh	r3, [r3, #0]
 8000cd2:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8000cd4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000cd8:	121b      	asrs	r3, r3, #8
 8000cda:	b21a      	sxth	r2, r3
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	b2d2      	uxtb	r2, r2
 8000ce2:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	3302      	adds	r3, #2
 8000ce8:	8afa      	ldrh	r2, [r7, #22]
 8000cea:	b2d2      	uxtb	r2, r2
 8000cec:	701a      	strb	r2, [r3, #0]
			break;
 8000cee:	e000      	b.n	8000cf2 <DATA_LOGGER_Get_Data_Value+0x22e>
		default:
			break;
 8000cf0:	bf00      	nop
	}
	/* Length of the data array */
	return (data_list[id].format / 20) + 1;
 8000cf2:	7bfa      	ldrb	r2, [r7, #15]
 8000cf4:	490a      	ldr	r1, [pc, #40]	; (8000d20 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	4413      	add	r3, r2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	440b      	add	r3, r1
 8000d00:	3309      	adds	r3, #9
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	4a09      	ldr	r2, [pc, #36]	; (8000d2c <DATA_LOGGER_Get_Data_Value+0x268>)
 8000d06:	fba2 2303 	umull	r2, r3, r2, r3
 8000d0a:	091b      	lsrs	r3, r3, #4
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	3301      	adds	r3, #1
 8000d10:	b2db      	uxtb	r3, r3
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	371c      	adds	r7, #28
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000118 	.word	0x20000118
 8000d24:	42c80000 	.word	0x42c80000
 8000d28:	447a0000 	.word	0x447a0000
 8000d2c:	cccccccd 	.word	0xcccccccd

08000d30 <DATA_LOGGER_Get_Data_Config>:
 * @param id Id of the data
 * @param buffer Buffer array to write the configuration into
 * @return Number of bytes we wrote in the buffer
 */
uint8_t DATA_LOGGER_Get_Data_Config(data_id_e id, uint8_t * buffer)
{
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	6039      	str	r1, [r7, #0]
 8000d3a:	71fb      	strb	r3, [r7, #7]
	/* We send a configuration so it must start with 0xFF */
	buffer[0] = 0xFF;
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	22ff      	movs	r2, #255	; 0xff
 8000d40:	701a      	strb	r2, [r3, #0]
	/* Then we put the length of the name */
	buffer[1] = data_list[id].len_name;
 8000d42:	79fa      	ldrb	r2, [r7, #7]
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	1c59      	adds	r1, r3, #1
 8000d48:	4828      	ldr	r0, [pc, #160]	; (8000dec <DATA_LOGGER_Get_Data_Config+0xbc>)
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	4413      	add	r3, r2
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	4403      	add	r3, r0
 8000d54:	3310      	adds	r3, #16
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	700b      	strb	r3, [r1, #0]
	/* Then we write the data format */
	buffer[2] = data_list[id].format;
 8000d5a:	79fa      	ldrb	r2, [r7, #7]
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	1c99      	adds	r1, r3, #2
 8000d60:	4822      	ldr	r0, [pc, #136]	; (8000dec <DATA_LOGGER_Get_Data_Config+0xbc>)
 8000d62:	4613      	mov	r3, r2
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	4413      	add	r3, r2
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	4403      	add	r3, r0
 8000d6c:	3309      	adds	r3, #9
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	700b      	strb	r3, [r1, #0]
	/* Then the id of the data */
	buffer[3] = id;
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	3303      	adds	r3, #3
 8000d76:	79fa      	ldrb	r2, [r7, #7]
 8000d78:	701a      	strb	r2, [r3, #0]
	/* When the data is used as output, we add 128 to the id */
	if(data_list[id].use_format == use_format_eAS_INPUT)
 8000d7a:	79fa      	ldrb	r2, [r7, #7]
 8000d7c:	491b      	ldr	r1, [pc, #108]	; (8000dec <DATA_LOGGER_Get_Data_Config+0xbc>)
 8000d7e:	4613      	mov	r3, r2
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	4413      	add	r3, r2
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	440b      	add	r3, r1
 8000d88:	3311      	adds	r3, #17
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d107      	bne.n	8000da0 <DATA_LOGGER_Get_Data_Config+0x70>
	{
		buffer[3] += 128 ;
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	3303      	adds	r3, #3
 8000d94:	781a      	ldrb	r2, [r3, #0]
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	3303      	adds	r3, #3
 8000d9a:	3a80      	subs	r2, #128	; 0x80
 8000d9c:	b2d2      	uxtb	r2, r2
 8000d9e:	701a      	strb	r2, [r3, #0]
	}
	/* Finally we write the name */
	memcpy(&buffer[4], data_list[id].name, data_list[id].len_name);
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	1d18      	adds	r0, r3, #4
 8000da4:	79fa      	ldrb	r2, [r7, #7]
 8000da6:	4911      	ldr	r1, [pc, #68]	; (8000dec <DATA_LOGGER_Get_Data_Config+0xbc>)
 8000da8:	4613      	mov	r3, r2
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	4413      	add	r3, r2
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	440b      	add	r3, r1
 8000db2:	330c      	adds	r3, #12
 8000db4:	6819      	ldr	r1, [r3, #0]
 8000db6:	79fa      	ldrb	r2, [r7, #7]
 8000db8:	4c0c      	ldr	r4, [pc, #48]	; (8000dec <DATA_LOGGER_Get_Data_Config+0xbc>)
 8000dba:	4613      	mov	r3, r2
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	4413      	add	r3, r2
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	4423      	add	r3, r4
 8000dc4:	3310      	adds	r3, #16
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	f006 fb15 	bl	80073f8 <memcpy>

	return 4 + data_list[id].len_name ;
 8000dce:	79fa      	ldrb	r2, [r7, #7]
 8000dd0:	4906      	ldr	r1, [pc, #24]	; (8000dec <DATA_LOGGER_Get_Data_Config+0xbc>)
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	4413      	add	r3, r2
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	440b      	add	r3, r1
 8000ddc:	3310      	adds	r3, #16
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	3304      	adds	r3, #4
 8000de2:	b2db      	uxtb	r3, r3
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd90      	pop	{r4, r7, pc}
 8000dec:	20000118 	.word	0x20000118

08000df0 <DATA_LOGGER_Get_Data>:
 * @brief Get data
 * @param id Id of the data
 * @return pointer to the data structure with the corresponding ID
 */
data_t * DATA_LOGGER_Get_Data(data_id_e id)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	71fb      	strb	r3, [r7, #7]
	return &data_list[id];
 8000dfa:	79fa      	ldrb	r2, [r7, #7]
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	4413      	add	r3, r2
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	4a03      	ldr	r2, [pc, #12]	; (8000e14 <DATA_LOGGER_Get_Data+0x24>)
 8000e06:	4413      	add	r3, r2
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	20000118 	.word	0x20000118

08000e18 <push_data_to_uart>:
 * @brief Add the start byte and checksum to a message
 * @param buffer Data array to send
 * @param len Number of bytes to send
 */
void push_data_to_uart(uint8_t * buffer, uint8_t len)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b090      	sub	sp, #64	; 0x40
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	460b      	mov	r3, r1
 8000e22:	70fb      	strb	r3, [r7, #3]
	uint8_t buffer_new[50];
	uint32_t checksum = 0 ;
 8000e24:	2300      	movs	r3, #0
 8000e26:	63fb      	str	r3, [r7, #60]	; 0x3c
	buffer_new[0] = '$';
 8000e28:	2324      	movs	r3, #36	; 0x24
 8000e2a:	723b      	strb	r3, [r7, #8]
	for(uint8_t b = 0; b < len; b++)
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8000e32:	e01d      	b.n	8000e70 <push_data_to_uart+0x58>
	{
		buffer_new[1 + b] = buffer[b];
 8000e34:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	441a      	add	r2, r3
 8000e3c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000e40:	3301      	adds	r3, #1
 8000e42:	7812      	ldrb	r2, [r2, #0]
 8000e44:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000e48:	440b      	add	r3, r1
 8000e4a:	f803 2c38 	strb.w	r2, [r3, #-56]
		checksum += (uint32_t)buffer_new[1 + b];
 8000e4e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000e52:	3301      	adds	r3, #1
 8000e54:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000e58:	4413      	add	r3, r2
 8000e5a:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e62:	4413      	add	r3, r2
 8000e64:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(uint8_t b = 0; b < len; b++)
 8000e66:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8000e70:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8000e74:	78fb      	ldrb	r3, [r7, #3]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d3dc      	bcc.n	8000e34 <push_data_to_uart+0x1c>
	}
	buffer_new[1 + len] = (uint8_t)(checksum % 256) ;
 8000e7a:	78fb      	ldrb	r3, [r7, #3]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000e80:	b2d2      	uxtb	r2, r2
 8000e82:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000e86:	440b      	add	r3, r1
 8000e88:	f803 2c38 	strb.w	r2, [r3, #-56]
	UART_Transmit(UART_TELEMETRY, buffer_new, len+2);
 8000e8c:	78fb      	ldrb	r3, [r7, #3]
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	3302      	adds	r3, #2
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	f107 0308 	add.w	r3, r7, #8
 8000e98:	4619      	mov	r1, r3
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f000 fc4c 	bl	8001738 <UART_Transmit>
}
 8000ea0:	bf00      	nop
 8000ea2:	3740      	adds	r7, #64	; 0x40
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <state_machine>:

/*
 * @brief data logger state machine
 */
static void state_machine(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
	/* Time management for periodic transmissions */
	static uint32_t next_time_state_machine = 0;
	static uint32_t current_period = PERIODE_PING;
	uint32_t time_ms = HAL_GetTick();
 8000eae:	f001 ff4b 	bl	8002d48 <HAL_GetTick>
 8000eb2:	60b8      	str	r0, [r7, #8]
	if(time_ms < next_time_state_machine)
 8000eb4:	4b78      	ldr	r3, [pc, #480]	; (8001098 <state_machine+0x1f0>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	68ba      	ldr	r2, [r7, #8]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	f0c0 80e6 	bcc.w	800108c <state_machine+0x1e4>
	{
		return;
	}
	next_time_state_machine = time_ms + current_period;
 8000ec0:	4b76      	ldr	r3, [pc, #472]	; (800109c <state_machine+0x1f4>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	4a73      	ldr	r2, [pc, #460]	; (8001098 <state_machine+0x1f0>)
 8000eca:	6013      	str	r3, [r2, #0]

	/* State machine variables */
	static data_logger_state_e state = data_logger_state_eIDLE;
	static data_logger_state_e previous_state = data_logger_state_eTRANSMIT_CONFIG ;
	bool_e entrance = previous_state != state ;
 8000ecc:	4b74      	ldr	r3, [pc, #464]	; (80010a0 <state_machine+0x1f8>)
 8000ece:	781a      	ldrb	r2, [r3, #0]
 8000ed0:	4b74      	ldr	r3, [pc, #464]	; (80010a4 <state_machine+0x1fc>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	bf14      	ite	ne
 8000ed8:	2301      	movne	r3, #1
 8000eda:	2300      	moveq	r3, #0
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	71fb      	strb	r3, [r7, #7]
	previous_state = state ;
 8000ee0:	4b70      	ldr	r3, [pc, #448]	; (80010a4 <state_machine+0x1fc>)
 8000ee2:	781a      	ldrb	r2, [r3, #0]
 8000ee4:	4b6e      	ldr	r3, [pc, #440]	; (80010a0 <state_machine+0x1f8>)
 8000ee6:	701a      	strb	r2, [r3, #0]
	switch(state)
 8000ee8:	4b6e      	ldr	r3, [pc, #440]	; (80010a4 <state_machine+0x1fc>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	f000 8091 	beq.w	8001014 <state_machine+0x16c>
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	f300 80cd 	bgt.w	8001092 <state_machine+0x1ea>
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d002      	beq.n	8000f02 <state_machine+0x5a>
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d043      	beq.n	8000f88 <state_machine+0xe0>
 8000f00:	e0c7      	b.n	8001092 <state_machine+0x1ea>
	{
		case data_logger_state_eIDLE :
			if(entrance)
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d003      	beq.n	8000f10 <state_machine+0x68>
			{
				/* When we are in the idle mode, we just ping the device at PERIODE_PING µs interval */
				current_period = PERIODE_PING;
 8000f08:	4b64      	ldr	r3, [pc, #400]	; (800109c <state_machine+0x1f4>)
 8000f0a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f0e:	601a      	str	r2, [r3, #0]
			}

			tmp_len = DATA_LOGGER_Get_Data_Config(data_id_eCONFIG_REQUEST, tmp);
 8000f10:	4965      	ldr	r1, [pc, #404]	; (80010a8 <state_machine+0x200>)
 8000f12:	2000      	movs	r0, #0
 8000f14:	f7ff ff0c 	bl	8000d30 <DATA_LOGGER_Get_Data_Config>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	4b63      	ldr	r3, [pc, #396]	; (80010ac <state_machine+0x204>)
 8000f1e:	701a      	strb	r2, [r3, #0]
			push_data_to_uart(tmp, tmp_len);
 8000f20:	4b62      	ldr	r3, [pc, #392]	; (80010ac <state_machine+0x204>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	4619      	mov	r1, r3
 8000f26:	4860      	ldr	r0, [pc, #384]	; (80010a8 <state_machine+0x200>)
 8000f28:	f7ff ff76 	bl	8000e18 <push_data_to_uart>

			/* If we receive a configuration request, we change the state */
			if(send_config_flag)
 8000f2c:	4b60      	ldr	r3, [pc, #384]	; (80010b0 <state_machine+0x208>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d01a      	beq.n	8000f6a <state_machine+0xc2>
			{
				/* Reset flags */
				start_flag = FALSE;
 8000f34:	4b5f      	ldr	r3, [pc, #380]	; (80010b4 <state_machine+0x20c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	701a      	strb	r2, [r3, #0]
				stop_flag = FALSE;
 8000f3a:	4b5f      	ldr	r3, [pc, #380]	; (80010b8 <state_machine+0x210>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
				send_config_flag = FALSE;
 8000f40:	4b5b      	ldr	r3, [pc, #364]	; (80010b0 <state_machine+0x208>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]
				/* Change the state */
				/* We send the configuration only if we did not send it before */
				if(config_not_sent)
 8000f46:	4b5d      	ldr	r3, [pc, #372]	; (80010bc <state_machine+0x214>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d009      	beq.n	8000f62 <state_machine+0xba>
				{
					id_init_counter = 0;
 8000f4e:	4b5c      	ldr	r3, [pc, #368]	; (80010c0 <state_machine+0x218>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	701a      	strb	r2, [r3, #0]
					is_any_data_used = FALSE;
 8000f54:	4b5b      	ldr	r3, [pc, #364]	; (80010c4 <state_machine+0x21c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
					state = data_logger_state_eTRANSMIT_CONFIG;
 8000f5a:	4b52      	ldr	r3, [pc, #328]	; (80010a4 <state_machine+0x1fc>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	701a      	strb	r2, [r3, #0]
			{
				start_flag = FALSE;
				stop_flag = FALSE;
				state = data_logger_state_eLOG;
			}
			break;
 8000f60:	e096      	b.n	8001090 <state_machine+0x1e8>
					state = data_logger_state_eLOG;
 8000f62:	4b50      	ldr	r3, [pc, #320]	; (80010a4 <state_machine+0x1fc>)
 8000f64:	2202      	movs	r2, #2
 8000f66:	701a      	strb	r2, [r3, #0]
			break;
 8000f68:	e092      	b.n	8001090 <state_machine+0x1e8>
			else if(start_flag)
 8000f6a:	4b52      	ldr	r3, [pc, #328]	; (80010b4 <state_machine+0x20c>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	f000 808e 	beq.w	8001090 <state_machine+0x1e8>
				start_flag = FALSE;
 8000f74:	4b4f      	ldr	r3, [pc, #316]	; (80010b4 <state_machine+0x20c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]
				stop_flag = FALSE;
 8000f7a:	4b4f      	ldr	r3, [pc, #316]	; (80010b8 <state_machine+0x210>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	701a      	strb	r2, [r3, #0]
				state = data_logger_state_eLOG;
 8000f80:	4b48      	ldr	r3, [pc, #288]	; (80010a4 <state_machine+0x1fc>)
 8000f82:	2202      	movs	r2, #2
 8000f84:	701a      	strb	r2, [r3, #0]
			break;
 8000f86:	e083      	b.n	8001090 <state_machine+0x1e8>

		case data_logger_state_eTRANSMIT_CONFIG :
			/* Change the data logger task period to send configuration slowly */
			if(entrance)
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d009      	beq.n	8000fa2 <state_machine+0xfa>
			{
				current_period = PERIODE_CONFIG_SEND;
 8000f8e:	4b43      	ldr	r3, [pc, #268]	; (800109c <state_machine+0x1f4>)
 8000f90:	2264      	movs	r2, #100	; 0x64
 8000f92:	601a      	str	r2, [r3, #0]
			}
			while(data_list[id_init_counter].use_format == use_format_eNOT_USED && id_init_counter < data_id_eCOUNT)
 8000f94:	e005      	b.n	8000fa2 <state_machine+0xfa>
			{
				id_init_counter ++ ;
 8000f96:	4b4a      	ldr	r3, [pc, #296]	; (80010c0 <state_machine+0x218>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4b48      	ldr	r3, [pc, #288]	; (80010c0 <state_machine+0x218>)
 8000fa0:	701a      	strb	r2, [r3, #0]
			while(data_list[id_init_counter].use_format == use_format_eNOT_USED && id_init_counter < data_id_eCOUNT)
 8000fa2:	4b47      	ldr	r3, [pc, #284]	; (80010c0 <state_machine+0x218>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4a47      	ldr	r2, [pc, #284]	; (80010c8 <state_machine+0x220>)
 8000faa:	460b      	mov	r3, r1
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	440b      	add	r3, r1
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	4413      	add	r3, r2
 8000fb4:	3311      	adds	r3, #17
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d103      	bne.n	8000fc4 <state_machine+0x11c>
 8000fbc:	4b40      	ldr	r3, [pc, #256]	; (80010c0 <state_machine+0x218>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b03      	cmp	r3, #3
 8000fc2:	d9e8      	bls.n	8000f96 <state_machine+0xee>
			}
			if(id_init_counter < data_id_eCOUNT)
 8000fc4:	4b3e      	ldr	r3, [pc, #248]	; (80010c0 <state_machine+0x218>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b03      	cmp	r3, #3
 8000fca:	d817      	bhi.n	8000ffc <state_machine+0x154>
			{
				is_any_data_used = TRUE;
 8000fcc:	4b3d      	ldr	r3, [pc, #244]	; (80010c4 <state_machine+0x21c>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	701a      	strb	r2, [r3, #0]
				/* Get data configuration */
				tmp_len = DATA_LOGGER_Get_Data_Config(id_init_counter++, tmp);
 8000fd2:	4b3b      	ldr	r3, [pc, #236]	; (80010c0 <state_machine+0x218>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	1c5a      	adds	r2, r3, #1
 8000fd8:	b2d1      	uxtb	r1, r2
 8000fda:	4a39      	ldr	r2, [pc, #228]	; (80010c0 <state_machine+0x218>)
 8000fdc:	7011      	strb	r1, [r2, #0]
 8000fde:	4932      	ldr	r1, [pc, #200]	; (80010a8 <state_machine+0x200>)
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fea5 	bl	8000d30 <DATA_LOGGER_Get_Data_Config>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b30      	ldr	r3, [pc, #192]	; (80010ac <state_machine+0x204>)
 8000fec:	701a      	strb	r2, [r3, #0]
				/* Send the configuration */
				push_data_to_uart(tmp, tmp_len);
 8000fee:	4b2f      	ldr	r3, [pc, #188]	; (80010ac <state_machine+0x204>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	482c      	ldr	r0, [pc, #176]	; (80010a8 <state_machine+0x200>)
 8000ff6:	f7ff ff0f 	bl	8000e18 <push_data_to_uart>
				else
				{
					state = data_logger_state_eIDLE ;
				}
			}
			break;
 8000ffa:	e04a      	b.n	8001092 <state_machine+0x1ea>
				if(is_any_data_used)
 8000ffc:	4b31      	ldr	r3, [pc, #196]	; (80010c4 <state_machine+0x21c>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <state_machine+0x164>
					state = data_logger_state_eLOG ;
 8001004:	4b27      	ldr	r3, [pc, #156]	; (80010a4 <state_machine+0x1fc>)
 8001006:	2202      	movs	r2, #2
 8001008:	701a      	strb	r2, [r3, #0]
			break;
 800100a:	e042      	b.n	8001092 <state_machine+0x1ea>
					state = data_logger_state_eIDLE ;
 800100c:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <state_machine+0x1fc>)
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
			break;
 8001012:	e03e      	b.n	8001092 <state_machine+0x1ea>

		case data_logger_state_eLOG:
			if(entrance)
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d002      	beq.n	8001020 <state_machine+0x178>
			{
				current_period = PERIODE_SEND;
 800101a:	4b20      	ldr	r3, [pc, #128]	; (800109c <state_machine+0x1f4>)
 800101c:	220a      	movs	r2, #10
 800101e:	601a      	str	r2, [r3, #0]
			}
			if(stop_flag)
 8001020:	4b25      	ldr	r3, [pc, #148]	; (80010b8 <state_machine+0x210>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d002      	beq.n	800102e <state_machine+0x186>
			{
				state = data_logger_state_eIDLE;
 8001028:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <state_machine+0x1fc>)
 800102a:	2200      	movs	r2, #0
 800102c:	701a      	strb	r2, [r3, #0]
			}
			for(uint8_t d = 0; d < data_id_eCOUNT; d++)
 800102e:	2300      	movs	r3, #0
 8001030:	73fb      	strb	r3, [r7, #15]
 8001032:	e027      	b.n	8001084 <state_machine+0x1dc>
			{
				if(data_list[d].use_format == use_format_eAS_OUTPUT && (data_list[d].data != NULL))
 8001034:	7bfa      	ldrb	r2, [r7, #15]
 8001036:	4924      	ldr	r1, [pc, #144]	; (80010c8 <state_machine+0x220>)
 8001038:	4613      	mov	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	440b      	add	r3, r1
 8001042:	3311      	adds	r3, #17
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d119      	bne.n	800107e <state_machine+0x1d6>
 800104a:	7bfa      	ldrb	r2, [r7, #15]
 800104c:	491e      	ldr	r1, [pc, #120]	; (80010c8 <state_machine+0x220>)
 800104e:	4613      	mov	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	440b      	add	r3, r1
 8001058:	3304      	adds	r3, #4
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00e      	beq.n	800107e <state_machine+0x1d6>
				{
					tmp_len = DATA_LOGGER_Get_Data_Value(d, tmp);
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	4911      	ldr	r1, [pc, #68]	; (80010a8 <state_machine+0x200>)
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff fd2d 	bl	8000ac4 <DATA_LOGGER_Get_Data_Value>
 800106a:	4603      	mov	r3, r0
 800106c:	461a      	mov	r2, r3
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <state_machine+0x204>)
 8001070:	701a      	strb	r2, [r3, #0]
					push_data_to_uart(tmp, tmp_len);
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <state_machine+0x204>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	4619      	mov	r1, r3
 8001078:	480b      	ldr	r0, [pc, #44]	; (80010a8 <state_machine+0x200>)
 800107a:	f7ff fecd 	bl	8000e18 <push_data_to_uart>
			for(uint8_t d = 0; d < data_id_eCOUNT; d++)
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	3301      	adds	r3, #1
 8001082:	73fb      	strb	r3, [r7, #15]
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	2b03      	cmp	r3, #3
 8001088:	d9d4      	bls.n	8001034 <state_machine+0x18c>
				}
			}
			break;
 800108a:	e002      	b.n	8001092 <state_machine+0x1ea>
		return;
 800108c:	bf00      	nop
 800108e:	e000      	b.n	8001092 <state_machine+0x1ea>
			break;
 8001090:	bf00      	nop
	}
}
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	200001a4 	.word	0x200001a4
 800109c:	2000003c 	.word	0x2000003c
 80010a0:	20000040 	.word	0x20000040
 80010a4:	200001a8 	.word	0x200001a8
 80010a8:	2000016c 	.word	0x2000016c
 80010ac:	2000019e 	.word	0x2000019e
 80010b0:	20000169 	.word	0x20000169
 80010b4:	20000168 	.word	0x20000168
 80010b8:	2000016a 	.word	0x2000016a
 80010bc:	20000038 	.word	0x20000038
 80010c0:	2000019f 	.word	0x2000019f
 80010c4:	200001a0 	.word	0x200001a0
 80010c8:	20000118 	.word	0x20000118

080010cc <parse_uart>:

/*
 * @brief Parse incoming bytes
 */
static void parse_uart(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
	static uint8_t trame[20] = { 0 };
	static uint8_t nb_byte_to_buffer = 0;
	static uint8_t buffer_counter = 0;
	static uint16_t checksum = 0;
	/* Check for available data */
	if(UART_Availables(UART_TELEMETRY))
 80010d2:	2000      	movs	r0, #0
 80010d4:	f000 fa8c 	bl	80015f0 <UART_Availables>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d06c      	beq.n	80011b8 <parse_uart+0xec>
	{
		uint8_t c;
		UART_Get(UART_TELEMETRY, &c);
 80010de:	1dfb      	adds	r3, r7, #7
 80010e0:	4619      	mov	r1, r3
 80010e2:	2000      	movs	r0, #0
 80010e4:	f000 fa92 	bl	800160c <UART_Get>
		switch(state)
 80010e8:	4b35      	ldr	r3, [pc, #212]	; (80011c0 <parse_uart+0xf4>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b03      	cmp	r3, #3
 80010ee:	d863      	bhi.n	80011b8 <parse_uart+0xec>
 80010f0:	a201      	add	r2, pc, #4	; (adr r2, 80010f8 <parse_uart+0x2c>)
 80010f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f6:	bf00      	nop
 80010f8:	08001109 	.word	0x08001109
 80010fc:	08001117 	.word	0x08001117
 8001100:	0800115d 	.word	0x0800115d
 8001104:	08001195 	.word	0x08001195
		{
			case parser_state_eSTART_BYTE:
				if(c == '$')
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	2b24      	cmp	r3, #36	; 0x24
 800110c:	d14f      	bne.n	80011ae <parse_uart+0xe2>
				{
					state = parser_state_eID;
 800110e:	4b2c      	ldr	r3, [pc, #176]	; (80011c0 <parse_uart+0xf4>)
 8001110:	2201      	movs	r2, #1
 8001112:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001114:	e04b      	b.n	80011ae <parse_uart+0xe2>

			case parser_state_eID:
				if(c < data_id_eCOUNT)
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	2b03      	cmp	r3, #3
 800111a:	d84a      	bhi.n	80011b2 <parse_uart+0xe6>
				{
					/* Store the id for later use */
					trame[0] = c;
 800111c:	79fa      	ldrb	r2, [r7, #7]
 800111e:	4b29      	ldr	r3, [pc, #164]	; (80011c4 <parse_uart+0xf8>)
 8001120:	701a      	strb	r2, [r3, #0]
					/* Reset the checksum */
					checksum = c;
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	b29a      	uxth	r2, r3
 8001126:	4b28      	ldr	r3, [pc, #160]	; (80011c8 <parse_uart+0xfc>)
 8001128:	801a      	strh	r2, [r3, #0]
					/* Get the data length according to the data format */
					nb_byte_to_buffer = (DATA_LOGGER_Get_Data(c)->format / 20);
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fe5f 	bl	8000df0 <DATA_LOGGER_Get_Data>
 8001132:	4603      	mov	r3, r0
 8001134:	7a5b      	ldrb	r3, [r3, #9]
 8001136:	4a25      	ldr	r2, [pc, #148]	; (80011cc <parse_uart+0x100>)
 8001138:	fba2 2303 	umull	r2, r3, r2, r3
 800113c:	091b      	lsrs	r3, r3, #4
 800113e:	b2da      	uxtb	r2, r3
 8001140:	4b23      	ldr	r3, [pc, #140]	; (80011d0 <parse_uart+0x104>)
 8001142:	701a      	strb	r2, [r3, #0]
					if(nb_byte_to_buffer)
 8001144:	4b22      	ldr	r3, [pc, #136]	; (80011d0 <parse_uart+0x104>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <parse_uart+0x88>
					{
						state = parser_state_eDATA;
 800114c:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <parse_uart+0xf4>)
 800114e:	2202      	movs	r2, #2
 8001150:	701a      	strb	r2, [r3, #0]
					else
					{
						state = parser_state_eCHECKSUM;
					}
				}
				break;
 8001152:	e02e      	b.n	80011b2 <parse_uart+0xe6>
						state = parser_state_eCHECKSUM;
 8001154:	4b1a      	ldr	r3, [pc, #104]	; (80011c0 <parse_uart+0xf4>)
 8001156:	2203      	movs	r2, #3
 8001158:	701a      	strb	r2, [r3, #0]
				break;
 800115a:	e02a      	b.n	80011b2 <parse_uart+0xe6>
			case parser_state_eDATA:
				trame[1+buffer_counter++] = c;
 800115c:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <parse_uart+0x108>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	1c5a      	adds	r2, r3, #1
 8001162:	b2d1      	uxtb	r1, r2
 8001164:	4a1b      	ldr	r2, [pc, #108]	; (80011d4 <parse_uart+0x108>)
 8001166:	7011      	strb	r1, [r2, #0]
 8001168:	3301      	adds	r3, #1
 800116a:	79f9      	ldrb	r1, [r7, #7]
 800116c:	4a15      	ldr	r2, [pc, #84]	; (80011c4 <parse_uart+0xf8>)
 800116e:	54d1      	strb	r1, [r2, r3]
				checksum += c;
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	b29a      	uxth	r2, r3
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <parse_uart+0xfc>)
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	4413      	add	r3, r2
 800117a:	b29a      	uxth	r2, r3
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <parse_uart+0xfc>)
 800117e:	801a      	strh	r2, [r3, #0]
				if(buffer_counter == nb_byte_to_buffer)
 8001180:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <parse_uart+0x108>)
 8001182:	781a      	ldrb	r2, [r3, #0]
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <parse_uart+0x104>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	429a      	cmp	r2, r3
 800118a:	d114      	bne.n	80011b6 <parse_uart+0xea>
				{
					state = parser_state_eCHECKSUM;
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <parse_uart+0xf4>)
 800118e:	2203      	movs	r2, #3
 8001190:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001192:	e010      	b.n	80011b6 <parse_uart+0xea>
			case parser_state_eCHECKSUM:
				if(checksum == c)
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	b29a      	uxth	r2, r3
 8001198:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <parse_uart+0xfc>)
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	429a      	cmp	r2, r3
 800119e:	d102      	bne.n	80011a6 <parse_uart+0xda>
				{
					DATA_LOGGER_Reception(trame);
 80011a0:	4808      	ldr	r0, [pc, #32]	; (80011c4 <parse_uart+0xf8>)
 80011a2:	f7ff fbd5 	bl	8000950 <DATA_LOGGER_Reception>
				}
				state = parser_state_eSTART_BYTE;
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <parse_uart+0xf4>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
				break;
 80011ac:	e004      	b.n	80011b8 <parse_uart+0xec>
				break;
 80011ae:	bf00      	nop
 80011b0:	e002      	b.n	80011b8 <parse_uart+0xec>
				break;
 80011b2:	bf00      	nop
 80011b4:	e000      	b.n	80011b8 <parse_uart+0xec>
				break;
 80011b6:	bf00      	nop


		}
	}

}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	200001a9 	.word	0x200001a9
 80011c4:	200001ac 	.word	0x200001ac
 80011c8:	200001c0 	.word	0x200001c0
 80011cc:	cccccccd 	.word	0xcccccccd
 80011d0:	200001c2 	.word	0x200001c2
 80011d4:	200001c3 	.word	0x200001c3

080011d8 <MOTOR_Init>:
static motor_t motor = { 0 };
static bool_e flag_start = TRUE;
static bool_e flag_stop = FALSE;

void MOTOR_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	 TIMER_Start_All_Channels(TIMER_MOTOR);
 80011dc:	2000      	movs	r0, #0
 80011de:	f000 f887 	bl	80012f0 <TIMER_Start_All_Channels>
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <MOTOR_Process>:

void MOTOR_Process(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	if(flag_stop)
 80011ec:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <MOTOR_Process+0x70>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d009      	beq.n	8001208 <MOTOR_Process+0x20>
	{
		/* Clear flag */
		flag_stop = FALSE;
 80011f4:	4b18      	ldr	r3, [pc, #96]	; (8001258 <MOTOR_Process+0x70>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]
		/* Stop pwm on every channel */
		TIMER_Stop_All_Channels(TIMER_MOTOR);
 80011fa:	2000      	movs	r0, #0
 80011fc:	f000 f8a4 	bl	8001348 <TIMER_Stop_All_Channels>
		motor.is_enabled = FALSE;
 8001200:	4b16      	ldr	r3, [pc, #88]	; (800125c <MOTOR_Process+0x74>)
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]
 8001206:	e01c      	b.n	8001242 <MOTOR_Process+0x5a>
	}
	else if(flag_start)
 8001208:	4b15      	ldr	r3, [pc, #84]	; (8001260 <MOTOR_Process+0x78>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d018      	beq.n	8001242 <MOTOR_Process+0x5a>
	{
		/* Clear flag */
		flag_start = FALSE;
 8001210:	4b13      	ldr	r3, [pc, #76]	; (8001260 <MOTOR_Process+0x78>)
 8001212:	2200      	movs	r2, #0
 8001214:	701a      	strb	r2, [r3, #0]
		/* Reset target to 0 */
		motor.output[0] = 1000;
 8001216:	4b11      	ldr	r3, [pc, #68]	; (800125c <MOTOR_Process+0x74>)
 8001218:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800121c:	805a      	strh	r2, [r3, #2]
		motor.output[1] = 1000;
 800121e:	4b0f      	ldr	r3, [pc, #60]	; (800125c <MOTOR_Process+0x74>)
 8001220:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001224:	809a      	strh	r2, [r3, #4]
		motor.output[2] = 1000;
 8001226:	4b0d      	ldr	r3, [pc, #52]	; (800125c <MOTOR_Process+0x74>)
 8001228:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800122c:	80da      	strh	r2, [r3, #6]
		motor.output[3] = 1000;
 800122e:	4b0b      	ldr	r3, [pc, #44]	; (800125c <MOTOR_Process+0x74>)
 8001230:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001234:	811a      	strh	r2, [r3, #8]
		/* Start the pwm */
		TIMER_Start_All_Channels(TIMER_MOTOR);
 8001236:	2000      	movs	r0, #0
 8001238:	f000 f85a 	bl	80012f0 <TIMER_Start_All_Channels>
		motor.is_enabled = TRUE;
 800123c:	4b07      	ldr	r3, [pc, #28]	; (800125c <MOTOR_Process+0x74>)
 800123e:	2201      	movs	r2, #1
 8001240:	701a      	strb	r2, [r3, #0]
	}
	if(motor.is_enabled)
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <MOTOR_Process+0x74>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <MOTOR_Process+0x6a>
	{
		TIMER_Set_All_CCR(TIMER_MOTOR, motor.output);
 800124a:	4906      	ldr	r1, [pc, #24]	; (8001264 <MOTOR_Process+0x7c>)
 800124c:	2000      	movs	r0, #0
 800124e:	f000 f8a7 	bl	80013a0 <TIMER_Set_All_CCR>
	}
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200001ce 	.word	0x200001ce
 800125c:	200001c4 	.word	0x200001c4
 8001260:	20000041 	.word	0x20000041
 8001264:	200001c6 	.word	0x200001c6

08001268 <I2C_Mem_Write>:

void I2C_Init(void)
{
}
void I2C_Mem_Write(i2c_e i2c_id, uint8_t device_address, uint8_t mem_address, uint8_t * data, uint8_t size)
{
 8001268:	b590      	push	{r4, r7, lr}
 800126a:	b087      	sub	sp, #28
 800126c:	af04      	add	r7, sp, #16
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	4603      	mov	r3, r0
 8001272:	71fb      	strb	r3, [r7, #7]
 8001274:	460b      	mov	r3, r1
 8001276:	71bb      	strb	r3, [r7, #6]
 8001278:	4613      	mov	r3, r2
 800127a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(i2c[i2c_id].hi2c, device_address, mem_address, I2C_MEMADD_SIZE_8BIT, data, size, I2C_OPERATION_TIMEOUT);
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <I2C_Mem_Write+0x40>)
 8001280:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001284:	79bb      	ldrb	r3, [r7, #6]
 8001286:	b299      	uxth	r1, r3
 8001288:	797b      	ldrb	r3, [r7, #5]
 800128a:	b29a      	uxth	r2, r3
 800128c:	7e3b      	ldrb	r3, [r7, #24]
 800128e:	b29b      	uxth	r3, r3
 8001290:	240a      	movs	r4, #10
 8001292:	9402      	str	r4, [sp, #8]
 8001294:	9301      	str	r3, [sp, #4]
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	2301      	movs	r3, #1
 800129c:	f002 fd92 	bl	8003dc4 <HAL_I2C_Mem_Write>
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd90      	pop	{r4, r7, pc}
 80012a8:	20000044 	.word	0x20000044

080012ac <I2C_Mem_Read>:

void I2C_Mem_Read(i2c_e i2c_id, uint8_t device_address, uint8_t mem_address, uint8_t * data, uint8_t size)
{
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b087      	sub	sp, #28
 80012b0:	af04      	add	r7, sp, #16
 80012b2:	603b      	str	r3, [r7, #0]
 80012b4:	4603      	mov	r3, r0
 80012b6:	71fb      	strb	r3, [r7, #7]
 80012b8:	460b      	mov	r3, r1
 80012ba:	71bb      	strb	r3, [r7, #6]
 80012bc:	4613      	mov	r3, r2
 80012be:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(i2c[i2c_id].hi2c, device_address, mem_address, I2C_MEMADD_SIZE_8BIT, data, size, I2C_OPERATION_TIMEOUT);
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <I2C_Mem_Read+0x40>)
 80012c4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80012c8:	79bb      	ldrb	r3, [r7, #6]
 80012ca:	b299      	uxth	r1, r3
 80012cc:	797b      	ldrb	r3, [r7, #5]
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	7e3b      	ldrb	r3, [r7, #24]
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	240a      	movs	r4, #10
 80012d6:	9402      	str	r4, [sp, #8]
 80012d8:	9301      	str	r3, [sp, #4]
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	2301      	movs	r3, #1
 80012e0:	f002 fe6a 	bl	8003fb8 <HAL_I2C_Mem_Read>
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd90      	pop	{r4, r7, pc}
 80012ec:	20000044 	.word	0x20000044

080012f0 <TIMER_Start_All_Channels>:
/*
 * @brief Start all channels of a timer
 * @param timer_id id of the timer
 */
void TIMER_Start_All_Channels(timer_e timer_id)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
	HAL_TIM_PWM_Start(timer[timer_id].htim, TIM_CHANNEL_1);
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	4a11      	ldr	r2, [pc, #68]	; (8001344 <TIMER_Start_All_Channels+0x54>)
 80012fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001302:	2100      	movs	r1, #0
 8001304:	4618      	mov	r0, r3
 8001306:	f004 f8c9 	bl	800549c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer[timer_id].htim, TIM_CHANNEL_2);
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	4a0d      	ldr	r2, [pc, #52]	; (8001344 <TIMER_Start_All_Channels+0x54>)
 800130e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001312:	2104      	movs	r1, #4
 8001314:	4618      	mov	r0, r3
 8001316:	f004 f8c1 	bl	800549c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer[timer_id].htim, TIM_CHANNEL_3);
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	4a09      	ldr	r2, [pc, #36]	; (8001344 <TIMER_Start_All_Channels+0x54>)
 800131e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001322:	2108      	movs	r1, #8
 8001324:	4618      	mov	r0, r3
 8001326:	f004 f8b9 	bl	800549c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer[timer_id].htim, TIM_CHANNEL_4);
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	4a05      	ldr	r2, [pc, #20]	; (8001344 <TIMER_Start_All_Channels+0x54>)
 800132e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001332:	210c      	movs	r1, #12
 8001334:	4618      	mov	r0, r3
 8001336:	f004 f8b1 	bl	800549c <HAL_TIM_PWM_Start>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000048 	.word	0x20000048

08001348 <TIMER_Stop_All_Channels>:
/*
 * @brief Stop all channels of a timer
 * @param timer_id id of the timer
 */
void TIMER_Stop_All_Channels(timer_e timer_id)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
	HAL_TIM_PWM_Stop(timer[timer_id].htim, TIM_CHANNEL_1);
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	4a11      	ldr	r2, [pc, #68]	; (800139c <TIMER_Stop_All_Channels+0x54>)
 8001356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f004 f965 	bl	800562c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(timer[timer_id].htim, TIM_CHANNEL_2);
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	4a0d      	ldr	r2, [pc, #52]	; (800139c <TIMER_Stop_All_Channels+0x54>)
 8001366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136a:	2104      	movs	r1, #4
 800136c:	4618      	mov	r0, r3
 800136e:	f004 f95d 	bl	800562c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(timer[timer_id].htim, TIM_CHANNEL_3);
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	4a09      	ldr	r2, [pc, #36]	; (800139c <TIMER_Stop_All_Channels+0x54>)
 8001376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800137a:	2108      	movs	r1, #8
 800137c:	4618      	mov	r0, r3
 800137e:	f004 f955 	bl	800562c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(timer[timer_id].htim, TIM_CHANNEL_4);
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	4a05      	ldr	r2, [pc, #20]	; (800139c <TIMER_Stop_All_Channels+0x54>)
 8001386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800138a:	210c      	movs	r1, #12
 800138c:	4618      	mov	r0, r3
 800138e:	f004 f94d 	bl	800562c <HAL_TIM_PWM_Stop>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000048 	.word	0x20000048

080013a0 <TIMER_Set_All_CCR>:
 * @brief Set new capture compare values
 * @param tiemr_id The timer to use
 * @param values The new values
 */
void TIMER_Set_All_CCR(timer_e timer_id, uint16_t * values)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	6039      	str	r1, [r7, #0]
 80013aa:	71fb      	strb	r3, [r7, #7]
	timer[timer_id].htim->Instance->CCR1 = values[0];
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	8819      	ldrh	r1, [r3, #0]
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	4a15      	ldr	r2, [pc, #84]	; (8001408 <TIMER_Set_All_CCR+0x68>)
 80013b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	460a      	mov	r2, r1
 80013bc:	635a      	str	r2, [r3, #52]	; 0x34
	timer[timer_id].htim->Instance->CCR2 = values[1];
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	3302      	adds	r3, #2
 80013c2:	8819      	ldrh	r1, [r3, #0]
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	4a10      	ldr	r2, [pc, #64]	; (8001408 <TIMER_Set_All_CCR+0x68>)
 80013c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	460a      	mov	r2, r1
 80013d0:	639a      	str	r2, [r3, #56]	; 0x38
	timer[timer_id].htim->Instance->CCR3 = values[2];
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	3304      	adds	r3, #4
 80013d6:	8819      	ldrh	r1, [r3, #0]
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	4a0b      	ldr	r2, [pc, #44]	; (8001408 <TIMER_Set_All_CCR+0x68>)
 80013dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	460a      	mov	r2, r1
 80013e4:	63da      	str	r2, [r3, #60]	; 0x3c
	timer[timer_id].htim->Instance->CCR4 = values[3];
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	3306      	adds	r3, #6
 80013ea:	8819      	ldrh	r1, [r3, #0]
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	4a06      	ldr	r2, [pc, #24]	; (8001408 <TIMER_Set_All_CCR+0x68>)
 80013f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	460a      	mov	r2, r1
 80013f8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	20000048 	.word	0x20000048

0800140c <UART_Idle_Line_Callback>:
/* -------------------------- Public callback functions -------------------------- */
/*
 * @brief Update the read index when the idle flag is raised
 */
void UART_Idle_Line_Callback(uart_e id)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
	if(__HAL_UART_GET_FLAG(uart[id].huart, UART_FLAG_IDLE))
 8001416:	79fa      	ldrb	r2, [r7, #7]
 8001418:	4922      	ldr	r1, [pc, #136]	; (80014a4 <UART_Idle_Line_Callback+0x98>)
 800141a:	4613      	mov	r3, r2
 800141c:	019b      	lsls	r3, r3, #6
 800141e:	4413      	add	r3, r2
 8001420:	011b      	lsls	r3, r3, #4
 8001422:	440b      	add	r3, r1
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0310 	and.w	r3, r3, #16
 800142e:	2b10      	cmp	r3, #16
 8001430:	d132      	bne.n	8001498 <UART_Idle_Line_Callback+0x8c>
	{
		uart[id].index_write_rx = LEN_BUFFER - uart[id].huart->hdmarx->Instance->NDTR ;
 8001432:	79fa      	ldrb	r2, [r7, #7]
 8001434:	491b      	ldr	r1, [pc, #108]	; (80014a4 <UART_Idle_Line_Callback+0x98>)
 8001436:	4613      	mov	r3, r2
 8001438:	019b      	lsls	r3, r3, #6
 800143a:	4413      	add	r3, r2
 800143c:	011b      	lsls	r3, r3, #4
 800143e:	440b      	add	r3, r1
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	b29b      	uxth	r3, r3
 800144a:	79fa      	ldrb	r2, [r7, #7]
 800144c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001450:	b298      	uxth	r0, r3
 8001452:	4914      	ldr	r1, [pc, #80]	; (80014a4 <UART_Idle_Line_Callback+0x98>)
 8001454:	4613      	mov	r3, r2
 8001456:	019b      	lsls	r3, r3, #6
 8001458:	4413      	add	r3, r2
 800145a:	011b      	lsls	r3, r3, #4
 800145c:	440b      	add	r3, r1
 800145e:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8001462:	4602      	mov	r2, r0
 8001464:	801a      	strh	r2, [r3, #0]
	  __HAL_UART_CLEAR_IDLEFLAG(uart[id].huart);
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	79fa      	ldrb	r2, [r7, #7]
 800146c:	490d      	ldr	r1, [pc, #52]	; (80014a4 <UART_Idle_Line_Callback+0x98>)
 800146e:	4613      	mov	r3, r2
 8001470:	019b      	lsls	r3, r3, #6
 8001472:	4413      	add	r3, r2
 8001474:	011b      	lsls	r3, r3, #4
 8001476:	440b      	add	r3, r1
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	79fa      	ldrb	r2, [r7, #7]
 8001482:	4908      	ldr	r1, [pc, #32]	; (80014a4 <UART_Idle_Line_Callback+0x98>)
 8001484:	4613      	mov	r3, r2
 8001486:	019b      	lsls	r3, r3, #6
 8001488:	4413      	add	r3, r2
 800148a:	011b      	lsls	r3, r3, #4
 800148c:	440b      	add	r3, r1
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	68fb      	ldr	r3, [r7, #12]
	}
}
 8001498:	bf00      	nop
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	200001d0 	.word	0x200001d0

080014a8 <UART_Transfer_Complete_Callback>:

/*
 * @brief Re start the dma transfer if there is data to send or reset the transmission state to idle
 */
void UART_Transfer_Complete_Callback(uart_e id)
{
 80014a8:	b590      	push	{r4, r7, lr}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
	if(uart[id].index_write_tx != uart[id].index_read_tx)
 80014b2:	79fa      	ldrb	r2, [r7, #7]
 80014b4:	494d      	ldr	r1, [pc, #308]	; (80015ec <UART_Transfer_Complete_Callback+0x144>)
 80014b6:	4613      	mov	r3, r2
 80014b8:	019b      	lsls	r3, r3, #6
 80014ba:	4413      	add	r3, r2
 80014bc:	011b      	lsls	r3, r3, #4
 80014be:	440b      	add	r3, r1
 80014c0:	f203 2306 	addw	r3, r3, #518	; 0x206
 80014c4:	8819      	ldrh	r1, [r3, #0]
 80014c6:	79fa      	ldrb	r2, [r7, #7]
 80014c8:	4848      	ldr	r0, [pc, #288]	; (80015ec <UART_Transfer_Complete_Callback+0x144>)
 80014ca:	4613      	mov	r3, r2
 80014cc:	019b      	lsls	r3, r3, #6
 80014ce:	4413      	add	r3, r2
 80014d0:	011b      	lsls	r3, r3, #4
 80014d2:	4403      	add	r3, r0
 80014d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	4299      	cmp	r1, r3
 80014dc:	d077      	beq.n	80015ce <UART_Transfer_Complete_Callback+0x126>
	{
		uint16_t nb_bytes_to_read = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	81fb      	strh	r3, [r7, #14]
		if(uart[id].index_write_tx > uart[id].index_read_rx)
 80014e2:	79fa      	ldrb	r2, [r7, #7]
 80014e4:	4941      	ldr	r1, [pc, #260]	; (80015ec <UART_Transfer_Complete_Callback+0x144>)
 80014e6:	4613      	mov	r3, r2
 80014e8:	019b      	lsls	r3, r3, #6
 80014ea:	4413      	add	r3, r2
 80014ec:	011b      	lsls	r3, r3, #4
 80014ee:	440b      	add	r3, r1
 80014f0:	f203 2306 	addw	r3, r3, #518	; 0x206
 80014f4:	8819      	ldrh	r1, [r3, #0]
 80014f6:	79fa      	ldrb	r2, [r7, #7]
 80014f8:	483c      	ldr	r0, [pc, #240]	; (80015ec <UART_Transfer_Complete_Callback+0x144>)
 80014fa:	4613      	mov	r3, r2
 80014fc:	019b      	lsls	r3, r3, #6
 80014fe:	4413      	add	r3, r2
 8001500:	011b      	lsls	r3, r3, #4
 8001502:	4403      	add	r3, r0
 8001504:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	4299      	cmp	r1, r3
 800150c:	d916      	bls.n	800153c <UART_Transfer_Complete_Callback+0x94>
		{
			nb_bytes_to_read = uart[id].index_write_tx - uart[id].index_read_tx;
 800150e:	79fa      	ldrb	r2, [r7, #7]
 8001510:	4936      	ldr	r1, [pc, #216]	; (80015ec <UART_Transfer_Complete_Callback+0x144>)
 8001512:	4613      	mov	r3, r2
 8001514:	019b      	lsls	r3, r3, #6
 8001516:	4413      	add	r3, r2
 8001518:	011b      	lsls	r3, r3, #4
 800151a:	440b      	add	r3, r1
 800151c:	f203 2306 	addw	r3, r3, #518	; 0x206
 8001520:	8819      	ldrh	r1, [r3, #0]
 8001522:	79fa      	ldrb	r2, [r7, #7]
 8001524:	4831      	ldr	r0, [pc, #196]	; (80015ec <UART_Transfer_Complete_Callback+0x144>)
 8001526:	4613      	mov	r3, r2
 8001528:	019b      	lsls	r3, r3, #6
 800152a:	4413      	add	r3, r2
 800152c:	011b      	lsls	r3, r3, #4
 800152e:	4403      	add	r3, r0
 8001530:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	1acb      	subs	r3, r1, r3
 8001538:	81fb      	strh	r3, [r7, #14]
 800153a:	e00c      	b.n	8001556 <UART_Transfer_Complete_Callback+0xae>
		}
		else
		{
			nb_bytes_to_read = LEN_BUFFER - uart[id].index_read_tx;
 800153c:	79fa      	ldrb	r2, [r7, #7]
 800153e:	492b      	ldr	r1, [pc, #172]	; (80015ec <UART_Transfer_Complete_Callback+0x144>)
 8001540:	4613      	mov	r3, r2
 8001542:	019b      	lsls	r3, r3, #6
 8001544:	4413      	add	r3, r2
 8001546:	011b      	lsls	r3, r3, #4
 8001548:	440b      	add	r3, r1
 800154a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800154e:	881b      	ldrh	r3, [r3, #0]
 8001550:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001554:	81fb      	strh	r3, [r7, #14]
		}
		HAL_UART_Transmit_DMA(uart[id].huart, &uart[id].buffer_tx[uart[id].index_read_tx], nb_bytes_to_read);
 8001556:	79fa      	ldrb	r2, [r7, #7]
 8001558:	4924      	ldr	r1, [pc, #144]	; (80015ec <UART_Transfer_Complete_Callback+0x144>)
 800155a:	4613      	mov	r3, r2
 800155c:	019b      	lsls	r3, r3, #6
 800155e:	4413      	add	r3, r2
 8001560:	011b      	lsls	r3, r3, #4
 8001562:	440b      	add	r3, r1
 8001564:	6818      	ldr	r0, [r3, #0]
 8001566:	79fa      	ldrb	r2, [r7, #7]
 8001568:	79f9      	ldrb	r1, [r7, #7]
 800156a:	4c20      	ldr	r4, [pc, #128]	; (80015ec <UART_Transfer_Complete_Callback+0x144>)
 800156c:	460b      	mov	r3, r1
 800156e:	019b      	lsls	r3, r3, #6
 8001570:	440b      	add	r3, r1
 8001572:	011b      	lsls	r3, r3, #4
 8001574:	4423      	add	r3, r4
 8001576:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800157a:	881b      	ldrh	r3, [r3, #0]
 800157c:	4619      	mov	r1, r3
 800157e:	4613      	mov	r3, r2
 8001580:	019b      	lsls	r3, r3, #6
 8001582:	4413      	add	r3, r2
 8001584:	011b      	lsls	r3, r3, #4
 8001586:	440b      	add	r3, r1
 8001588:	4a18      	ldr	r2, [pc, #96]	; (80015ec <UART_Transfer_Complete_Callback+0x144>)
 800158a:	4413      	add	r3, r2
 800158c:	3306      	adds	r3, #6
 800158e:	89fa      	ldrh	r2, [r7, #14]
 8001590:	4619      	mov	r1, r3
 8001592:	f004 fe1f 	bl	80061d4 <HAL_UART_Transmit_DMA>
		uart[id].index_read_tx = (uart[id].index_read_tx + nb_bytes_to_read) % LEN_BUFFER;
 8001596:	79fa      	ldrb	r2, [r7, #7]
 8001598:	4914      	ldr	r1, [pc, #80]	; (80015ec <UART_Transfer_Complete_Callback+0x144>)
 800159a:	4613      	mov	r3, r2
 800159c:	019b      	lsls	r3, r3, #6
 800159e:	4413      	add	r3, r2
 80015a0:	011b      	lsls	r3, r3, #4
 80015a2:	440b      	add	r3, r1
 80015a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80015a8:	881a      	ldrh	r2, [r3, #0]
 80015aa:	89fb      	ldrh	r3, [r7, #14]
 80015ac:	4413      	add	r3, r2
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	79fa      	ldrb	r2, [r7, #7]
 80015b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015b6:	b298      	uxth	r0, r3
 80015b8:	490c      	ldr	r1, [pc, #48]	; (80015ec <UART_Transfer_Complete_Callback+0x144>)
 80015ba:	4613      	mov	r3, r2
 80015bc:	019b      	lsls	r3, r3, #6
 80015be:	4413      	add	r3, r2
 80015c0:	011b      	lsls	r3, r3, #4
 80015c2:	440b      	add	r3, r1
 80015c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80015c8:	4602      	mov	r2, r0
 80015ca:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		uart[id].transmission_state = transmission_state_eIDLE;
	}
}
 80015cc:	e009      	b.n	80015e2 <UART_Transfer_Complete_Callback+0x13a>
		uart[id].transmission_state = transmission_state_eIDLE;
 80015ce:	79fa      	ldrb	r2, [r7, #7]
 80015d0:	4906      	ldr	r1, [pc, #24]	; (80015ec <UART_Transfer_Complete_Callback+0x144>)
 80015d2:	4613      	mov	r3, r2
 80015d4:	019b      	lsls	r3, r3, #6
 80015d6:	4413      	add	r3, r2
 80015d8:	011b      	lsls	r3, r3, #4
 80015da:	440b      	add	r3, r1
 80015dc:	3305      	adds	r3, #5
 80015de:	2200      	movs	r2, #0
 80015e0:	701a      	strb	r2, [r3, #0]
}
 80015e2:	bf00      	nop
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd90      	pop	{r4, r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200001d0 	.word	0x200001d0

080015f0 <UART_Availables>:
 * @brief Number of byte available in the RX buffer
 * @param id Id of the uart we are interested in
 * @return Number of bytes
 */
uint16_t UART_Availables(uart_e id)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]
	return get_nb_bytes_available(id);
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f000 f94f 	bl	80018a0 <get_nb_bytes_available>
 8001602:	4603      	mov	r3, r0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <UART_Get>:
 * 		  Does nothing if there are no characters available
 * @param id Id of the uart
 * @param c Buffer to write the character into
 */
void UART_Get(uart_e id, uint8_t * c)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	6039      	str	r1, [r7, #0]
 8001616:	71fb      	strb	r3, [r7, #7]
	if(get_nb_bytes_available(id))
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	4618      	mov	r0, r3
 800161c:	f000 f940 	bl	80018a0 <get_nb_bytes_available>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d035      	beq.n	8001692 <UART_Get+0x86>
	{
		*c = uart[id].buffer_rx[uart[id].index_read_rx];
 8001626:	79fa      	ldrb	r2, [r7, #7]
 8001628:	79f9      	ldrb	r1, [r7, #7]
 800162a:	481c      	ldr	r0, [pc, #112]	; (800169c <UART_Get+0x90>)
 800162c:	460b      	mov	r3, r1
 800162e:	019b      	lsls	r3, r3, #6
 8001630:	440b      	add	r3, r1
 8001632:	011b      	lsls	r3, r3, #4
 8001634:	4403      	add	r3, r0
 8001636:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	4917      	ldr	r1, [pc, #92]	; (800169c <UART_Get+0x90>)
 8001640:	4613      	mov	r3, r2
 8001642:	019b      	lsls	r3, r3, #6
 8001644:	4413      	add	r3, r2
 8001646:	011b      	lsls	r3, r3, #4
 8001648:	440b      	add	r3, r1
 800164a:	4403      	add	r3, r0
 800164c:	f203 230a 	addw	r3, r3, #522	; 0x20a
 8001650:	781a      	ldrb	r2, [r3, #0]
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	701a      	strb	r2, [r3, #0]
		uart[id].index_read_rx = (uart[id].index_read_rx + 1) % LEN_BUFFER;
 8001656:	79fa      	ldrb	r2, [r7, #7]
 8001658:	4910      	ldr	r1, [pc, #64]	; (800169c <UART_Get+0x90>)
 800165a:	4613      	mov	r3, r2
 800165c:	019b      	lsls	r3, r3, #6
 800165e:	4413      	add	r3, r2
 8001660:	011b      	lsls	r3, r3, #4
 8001662:	440b      	add	r3, r1
 8001664:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	3301      	adds	r3, #1
 800166c:	425a      	negs	r2, r3
 800166e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001672:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001676:	bf58      	it	pl
 8001678:	4253      	negpl	r3, r2
 800167a:	79fa      	ldrb	r2, [r7, #7]
 800167c:	b298      	uxth	r0, r3
 800167e:	4907      	ldr	r1, [pc, #28]	; (800169c <UART_Get+0x90>)
 8001680:	4613      	mov	r3, r2
 8001682:	019b      	lsls	r3, r3, #6
 8001684:	4413      	add	r3, r2
 8001686:	011b      	lsls	r3, r3, #4
 8001688:	440b      	add	r3, r1
 800168a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800168e:	4602      	mov	r2, r0
 8001690:	801a      	strh	r2, [r3, #0]
	}
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	200001d0 	.word	0x200001d0

080016a0 <UART_Init>:

/*
 * @brief Initialize every uarts and start dma reception
 */
void UART_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
	/* Link  huarts to the right uarts structures */
	uart[uart_e1].huart = &huart1;
 80016a6:	4b21      	ldr	r3, [pc, #132]	; (800172c <UART_Init+0x8c>)
 80016a8:	4a21      	ldr	r2, [pc, #132]	; (8001730 <UART_Init+0x90>)
 80016aa:	601a      	str	r2, [r3, #0]
	uart[uart_e4].huart = &huart4;
 80016ac:	4b1f      	ldr	r3, [pc, #124]	; (800172c <UART_Init+0x8c>)
 80016ae:	4a21      	ldr	r2, [pc, #132]	; (8001734 <UART_Init+0x94>)
 80016b0:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410

	/* Initialization */
	for(uint8_t u = 0; u < uart_eCOUNT; u ++)
 80016b4:	2300      	movs	r3, #0
 80016b6:	71fb      	strb	r3, [r7, #7]
 80016b8:	e02f      	b.n	800171a <UART_Init+0x7a>
	{
		__HAL_UART_ENABLE_IT(uart[u].huart, UART_IT_IDLE);
 80016ba:	79fa      	ldrb	r2, [r7, #7]
 80016bc:	491b      	ldr	r1, [pc, #108]	; (800172c <UART_Init+0x8c>)
 80016be:	4613      	mov	r3, r2
 80016c0:	019b      	lsls	r3, r3, #6
 80016c2:	4413      	add	r3, r2
 80016c4:	011b      	lsls	r3, r3, #4
 80016c6:	440b      	add	r3, r1
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	68d9      	ldr	r1, [r3, #12]
 80016ce:	79fa      	ldrb	r2, [r7, #7]
 80016d0:	4816      	ldr	r0, [pc, #88]	; (800172c <UART_Init+0x8c>)
 80016d2:	4613      	mov	r3, r2
 80016d4:	019b      	lsls	r3, r3, #6
 80016d6:	4413      	add	r3, r2
 80016d8:	011b      	lsls	r3, r3, #4
 80016da:	4403      	add	r3, r0
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f041 0210 	orr.w	r2, r1, #16
 80016e4:	60da      	str	r2, [r3, #12]
		HAL_UART_Receive_DMA(uart[u].huart, uart[u].buffer_rx, LEN_BUFFER);
 80016e6:	79fa      	ldrb	r2, [r7, #7]
 80016e8:	4910      	ldr	r1, [pc, #64]	; (800172c <UART_Init+0x8c>)
 80016ea:	4613      	mov	r3, r2
 80016ec:	019b      	lsls	r3, r3, #6
 80016ee:	4413      	add	r3, r2
 80016f0:	011b      	lsls	r3, r3, #4
 80016f2:	440b      	add	r3, r1
 80016f4:	6818      	ldr	r0, [r3, #0]
 80016f6:	79fa      	ldrb	r2, [r7, #7]
 80016f8:	4613      	mov	r3, r2
 80016fa:	019b      	lsls	r3, r3, #6
 80016fc:	4413      	add	r3, r2
 80016fe:	011b      	lsls	r3, r3, #4
 8001700:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001704:	4a09      	ldr	r2, [pc, #36]	; (800172c <UART_Init+0x8c>)
 8001706:	4413      	add	r3, r2
 8001708:	3302      	adds	r3, #2
 800170a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800170e:	4619      	mov	r1, r3
 8001710:	f004 fdde 	bl	80062d0 <HAL_UART_Receive_DMA>
	for(uint8_t u = 0; u < uart_eCOUNT; u ++)
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	3301      	adds	r3, #1
 8001718:	71fb      	strb	r3, [r7, #7]
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d9cc      	bls.n	80016ba <UART_Init+0x1a>
	}
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200001d0 	.word	0x200001d0
 8001730:	20000dd8 	.word	0x20000dd8
 8001734:	20000e1c 	.word	0x20000e1c

08001738 <UART_Transmit>:
 * @param id Id of the uart to use
 * @param data Array with the data
 * @param len Length of the data array
 */
void UART_Transmit(uart_e id, uint8_t * data, uint16_t len)
{
 8001738:	b590      	push	{r4, r7, lr}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	6039      	str	r1, [r7, #0]
 8001742:	71fb      	strb	r3, [r7, #7]
 8001744:	4613      	mov	r3, r2
 8001746:	80bb      	strh	r3, [r7, #4]
	for(uint16_t c = 0; c < len; c ++)
 8001748:	2300      	movs	r3, #0
 800174a:	81fb      	strh	r3, [r7, #14]
 800174c:	e020      	b.n	8001790 <UART_Transmit+0x58>
	{
		uart[id].buffer_tx[(uart[id].index_write_tx + c) % LEN_BUFFER] = data[c];
 800174e:	89fb      	ldrh	r3, [r7, #14]
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	18d0      	adds	r0, r2, r3
 8001754:	79fa      	ldrb	r2, [r7, #7]
 8001756:	79f9      	ldrb	r1, [r7, #7]
 8001758:	4c50      	ldr	r4, [pc, #320]	; (800189c <UART_Transmit+0x164>)
 800175a:	460b      	mov	r3, r1
 800175c:	019b      	lsls	r3, r3, #6
 800175e:	440b      	add	r3, r1
 8001760:	011b      	lsls	r3, r3, #4
 8001762:	4423      	add	r3, r4
 8001764:	f203 2306 	addw	r3, r3, #518	; 0x206
 8001768:	8819      	ldrh	r1, [r3, #0]
 800176a:	89fb      	ldrh	r3, [r7, #14]
 800176c:	440b      	add	r3, r1
 800176e:	b29b      	uxth	r3, r3
 8001770:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8001774:	7804      	ldrb	r4, [r0, #0]
 8001776:	4849      	ldr	r0, [pc, #292]	; (800189c <UART_Transmit+0x164>)
 8001778:	4613      	mov	r3, r2
 800177a:	019b      	lsls	r3, r3, #6
 800177c:	4413      	add	r3, r2
 800177e:	011b      	lsls	r3, r3, #4
 8001780:	4403      	add	r3, r0
 8001782:	440b      	add	r3, r1
 8001784:	3306      	adds	r3, #6
 8001786:	4622      	mov	r2, r4
 8001788:	701a      	strb	r2, [r3, #0]
	for(uint16_t c = 0; c < len; c ++)
 800178a:	89fb      	ldrh	r3, [r7, #14]
 800178c:	3301      	adds	r3, #1
 800178e:	81fb      	strh	r3, [r7, #14]
 8001790:	89fa      	ldrh	r2, [r7, #14]
 8001792:	88bb      	ldrh	r3, [r7, #4]
 8001794:	429a      	cmp	r2, r3
 8001796:	d3da      	bcc.n	800174e <UART_Transmit+0x16>
	}
	uart[id].index_write_tx = (uart[id].index_write_tx + len) % LEN_BUFFER;
 8001798:	79fa      	ldrb	r2, [r7, #7]
 800179a:	4940      	ldr	r1, [pc, #256]	; (800189c <UART_Transmit+0x164>)
 800179c:	4613      	mov	r3, r2
 800179e:	019b      	lsls	r3, r3, #6
 80017a0:	4413      	add	r3, r2
 80017a2:	011b      	lsls	r3, r3, #4
 80017a4:	440b      	add	r3, r1
 80017a6:	f203 2306 	addw	r3, r3, #518	; 0x206
 80017aa:	881a      	ldrh	r2, [r3, #0]
 80017ac:	88bb      	ldrh	r3, [r7, #4]
 80017ae:	4413      	add	r3, r2
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	79fa      	ldrb	r2, [r7, #7]
 80017b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017b8:	b298      	uxth	r0, r3
 80017ba:	4938      	ldr	r1, [pc, #224]	; (800189c <UART_Transmit+0x164>)
 80017bc:	4613      	mov	r3, r2
 80017be:	019b      	lsls	r3, r3, #6
 80017c0:	4413      	add	r3, r2
 80017c2:	011b      	lsls	r3, r3, #4
 80017c4:	440b      	add	r3, r1
 80017c6:	f203 2306 	addw	r3, r3, #518	; 0x206
 80017ca:	4602      	mov	r2, r0
 80017cc:	801a      	strh	r2, [r3, #0]
	if(uart[id].transmission_state == transmission_state_eIDLE)
 80017ce:	79fa      	ldrb	r2, [r7, #7]
 80017d0:	4932      	ldr	r1, [pc, #200]	; (800189c <UART_Transmit+0x164>)
 80017d2:	4613      	mov	r3, r2
 80017d4:	019b      	lsls	r3, r3, #6
 80017d6:	4413      	add	r3, r2
 80017d8:	011b      	lsls	r3, r3, #4
 80017da:	440b      	add	r3, r1
 80017dc:	3305      	adds	r3, #5
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d157      	bne.n	8001894 <UART_Transmit+0x15c>
	{
		uart[id].transmission_state = transmission_state_eIN_PROGRESS;
 80017e4:	79fa      	ldrb	r2, [r7, #7]
 80017e6:	492d      	ldr	r1, [pc, #180]	; (800189c <UART_Transmit+0x164>)
 80017e8:	4613      	mov	r3, r2
 80017ea:	019b      	lsls	r3, r3, #6
 80017ec:	4413      	add	r3, r2
 80017ee:	011b      	lsls	r3, r3, #4
 80017f0:	440b      	add	r3, r1
 80017f2:	3305      	adds	r3, #5
 80017f4:	2201      	movs	r2, #1
 80017f6:	701a      	strb	r2, [r3, #0]
		uint16_t nb_bytes_before_end_of_buffer = LEN_BUFFER - uart[id].index_read_tx;
 80017f8:	79fa      	ldrb	r2, [r7, #7]
 80017fa:	4928      	ldr	r1, [pc, #160]	; (800189c <UART_Transmit+0x164>)
 80017fc:	4613      	mov	r3, r2
 80017fe:	019b      	lsls	r3, r3, #6
 8001800:	4413      	add	r3, r2
 8001802:	011b      	lsls	r3, r3, #4
 8001804:	440b      	add	r3, r1
 8001806:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001810:	81bb      	strh	r3, [r7, #12]
		len = MIN(len, nb_bytes_before_end_of_buffer);
 8001812:	88ba      	ldrh	r2, [r7, #4]
 8001814:	89bb      	ldrh	r3, [r7, #12]
 8001816:	4293      	cmp	r3, r2
 8001818:	bf28      	it	cs
 800181a:	4613      	movcs	r3, r2
 800181c:	80bb      	strh	r3, [r7, #4]
		HAL_UART_Transmit_DMA(uart[id].huart, &uart[id].buffer_tx[uart[id].index_read_tx], len);
 800181e:	79fa      	ldrb	r2, [r7, #7]
 8001820:	491e      	ldr	r1, [pc, #120]	; (800189c <UART_Transmit+0x164>)
 8001822:	4613      	mov	r3, r2
 8001824:	019b      	lsls	r3, r3, #6
 8001826:	4413      	add	r3, r2
 8001828:	011b      	lsls	r3, r3, #4
 800182a:	440b      	add	r3, r1
 800182c:	6818      	ldr	r0, [r3, #0]
 800182e:	79fa      	ldrb	r2, [r7, #7]
 8001830:	79f9      	ldrb	r1, [r7, #7]
 8001832:	4c1a      	ldr	r4, [pc, #104]	; (800189c <UART_Transmit+0x164>)
 8001834:	460b      	mov	r3, r1
 8001836:	019b      	lsls	r3, r3, #6
 8001838:	440b      	add	r3, r1
 800183a:	011b      	lsls	r3, r3, #4
 800183c:	4423      	add	r3, r4
 800183e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	4619      	mov	r1, r3
 8001846:	4613      	mov	r3, r2
 8001848:	019b      	lsls	r3, r3, #6
 800184a:	4413      	add	r3, r2
 800184c:	011b      	lsls	r3, r3, #4
 800184e:	440b      	add	r3, r1
 8001850:	4a12      	ldr	r2, [pc, #72]	; (800189c <UART_Transmit+0x164>)
 8001852:	4413      	add	r3, r2
 8001854:	3306      	adds	r3, #6
 8001856:	88ba      	ldrh	r2, [r7, #4]
 8001858:	4619      	mov	r1, r3
 800185a:	f004 fcbb 	bl	80061d4 <HAL_UART_Transmit_DMA>
		uart[id].index_read_tx = (uart[id].index_read_tx + len) % LEN_BUFFER;
 800185e:	79fa      	ldrb	r2, [r7, #7]
 8001860:	490e      	ldr	r1, [pc, #56]	; (800189c <UART_Transmit+0x164>)
 8001862:	4613      	mov	r3, r2
 8001864:	019b      	lsls	r3, r3, #6
 8001866:	4413      	add	r3, r2
 8001868:	011b      	lsls	r3, r3, #4
 800186a:	440b      	add	r3, r1
 800186c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001870:	881a      	ldrh	r2, [r3, #0]
 8001872:	88bb      	ldrh	r3, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	b29b      	uxth	r3, r3
 8001878:	79fa      	ldrb	r2, [r7, #7]
 800187a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800187e:	b298      	uxth	r0, r3
 8001880:	4906      	ldr	r1, [pc, #24]	; (800189c <UART_Transmit+0x164>)
 8001882:	4613      	mov	r3, r2
 8001884:	019b      	lsls	r3, r3, #6
 8001886:	4413      	add	r3, r2
 8001888:	011b      	lsls	r3, r3, #4
 800188a:	440b      	add	r3, r1
 800188c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001890:	4602      	mov	r2, r0
 8001892:	801a      	strh	r2, [r3, #0]
	}
}
 8001894:	bf00      	nop
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	bd90      	pop	{r4, r7, pc}
 800189c:	200001d0 	.word	0x200001d0

080018a0 <get_nb_bytes_available>:
 * @brief Compute the numbers of byte available in the buffer
 * @param id Id of the uart
 * @return nb of bytes available
 */
uint16_t get_nb_bytes_available(uart_e id)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]
	uint16_t nb = 0 ;
 80018aa:	2300      	movs	r3, #0
 80018ac:	81fb      	strh	r3, [r7, #14]
	if(uart[id].index_write_rx > uart[id].index_read_rx)
 80018ae:	79fa      	ldrb	r2, [r7, #7]
 80018b0:	4932      	ldr	r1, [pc, #200]	; (800197c <get_nb_bytes_available+0xdc>)
 80018b2:	4613      	mov	r3, r2
 80018b4:	019b      	lsls	r3, r3, #6
 80018b6:	4413      	add	r3, r2
 80018b8:	011b      	lsls	r3, r3, #4
 80018ba:	440b      	add	r3, r1
 80018bc:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	b299      	uxth	r1, r3
 80018c4:	79fa      	ldrb	r2, [r7, #7]
 80018c6:	482d      	ldr	r0, [pc, #180]	; (800197c <get_nb_bytes_available+0xdc>)
 80018c8:	4613      	mov	r3, r2
 80018ca:	019b      	lsls	r3, r3, #6
 80018cc:	4413      	add	r3, r2
 80018ce:	011b      	lsls	r3, r3, #4
 80018d0:	4403      	add	r3, r0
 80018d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	4299      	cmp	r1, r3
 80018da:	d917      	bls.n	800190c <get_nb_bytes_available+0x6c>
	{
		nb = uart[id].index_write_rx - uart[id].index_read_rx ;
 80018dc:	79fa      	ldrb	r2, [r7, #7]
 80018de:	4927      	ldr	r1, [pc, #156]	; (800197c <get_nb_bytes_available+0xdc>)
 80018e0:	4613      	mov	r3, r2
 80018e2:	019b      	lsls	r3, r3, #6
 80018e4:	4413      	add	r3, r2
 80018e6:	011b      	lsls	r3, r3, #4
 80018e8:	440b      	add	r3, r1
 80018ea:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	b299      	uxth	r1, r3
 80018f2:	79fa      	ldrb	r2, [r7, #7]
 80018f4:	4821      	ldr	r0, [pc, #132]	; (800197c <get_nb_bytes_available+0xdc>)
 80018f6:	4613      	mov	r3, r2
 80018f8:	019b      	lsls	r3, r3, #6
 80018fa:	4413      	add	r3, r2
 80018fc:	011b      	lsls	r3, r3, #4
 80018fe:	4403      	add	r3, r0
 8001900:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001904:	881b      	ldrh	r3, [r3, #0]
 8001906:	1acb      	subs	r3, r1, r3
 8001908:	81fb      	strh	r3, [r7, #14]
 800190a:	e030      	b.n	800196e <get_nb_bytes_available+0xce>
	}
	else if(uart[id].index_write_rx < uart[id].index_read_rx)
 800190c:	79fa      	ldrb	r2, [r7, #7]
 800190e:	491b      	ldr	r1, [pc, #108]	; (800197c <get_nb_bytes_available+0xdc>)
 8001910:	4613      	mov	r3, r2
 8001912:	019b      	lsls	r3, r3, #6
 8001914:	4413      	add	r3, r2
 8001916:	011b      	lsls	r3, r3, #4
 8001918:	440b      	add	r3, r1
 800191a:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 800191e:	881b      	ldrh	r3, [r3, #0]
 8001920:	b299      	uxth	r1, r3
 8001922:	79fa      	ldrb	r2, [r7, #7]
 8001924:	4815      	ldr	r0, [pc, #84]	; (800197c <get_nb_bytes_available+0xdc>)
 8001926:	4613      	mov	r3, r2
 8001928:	019b      	lsls	r3, r3, #6
 800192a:	4413      	add	r3, r2
 800192c:	011b      	lsls	r3, r3, #4
 800192e:	4403      	add	r3, r0
 8001930:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001934:	881b      	ldrh	r3, [r3, #0]
 8001936:	4299      	cmp	r1, r3
 8001938:	d219      	bcs.n	800196e <get_nb_bytes_available+0xce>
	{
		nb = LEN_BUFFER - uart[id].index_read_rx + uart[id].index_write_rx ;
 800193a:	79fa      	ldrb	r2, [r7, #7]
 800193c:	490f      	ldr	r1, [pc, #60]	; (800197c <get_nb_bytes_available+0xdc>)
 800193e:	4613      	mov	r3, r2
 8001940:	019b      	lsls	r3, r3, #6
 8001942:	4413      	add	r3, r2
 8001944:	011b      	lsls	r3, r3, #4
 8001946:	440b      	add	r3, r1
 8001948:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	b299      	uxth	r1, r3
 8001950:	79fa      	ldrb	r2, [r7, #7]
 8001952:	480a      	ldr	r0, [pc, #40]	; (800197c <get_nb_bytes_available+0xdc>)
 8001954:	4613      	mov	r3, r2
 8001956:	019b      	lsls	r3, r3, #6
 8001958:	4413      	add	r3, r2
 800195a:	011b      	lsls	r3, r3, #4
 800195c:	4403      	add	r3, r0
 800195e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001962:	881b      	ldrh	r3, [r3, #0]
 8001964:	1acb      	subs	r3, r1, r3
 8001966:	b29b      	uxth	r3, r3
 8001968:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800196c:	81fb      	strh	r3, [r7, #14]
	}
	return nb;
 800196e:	89fb      	ldrh	r3, [r7, #14]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	200001d0 	.word	0x200001d0

08001980 <IBUS_Init>:
#define NB_BYTE_MAX_PER_PROCESS		50

static ibus_t ibus = { 0 };

void IBUS_Init(uint16_t * channels)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
	ibus.channels = channels;
 8001988:	4a04      	ldr	r2, [pc, #16]	; (800199c <IBUS_Init+0x1c>)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6013      	str	r3, [r2, #0]
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	200009f0 	.word	0x200009f0

080019a0 <IBUS_Process>:
/*
 * @brief Check for new data on the uart and update channels array
 * @return True when a new have been successfully read
 */
bool_e IBUS_Process(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
	uint16_t nb_to_read = UART_Availables(UART_IBUS);
 80019a6:	2001      	movs	r0, #1
 80019a8:	f7ff fe22 	bl	80015f0 <UART_Availables>
 80019ac:	4603      	mov	r3, r0
 80019ae:	81fb      	strh	r3, [r7, #14]
	if(!nb_to_read)
 80019b0:	89fb      	ldrh	r3, [r7, #14]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <IBUS_Process+0x1a>
	{
		return FALSE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	e092      	b.n	8001ae0 <IBUS_Process+0x140>
	}
	nb_to_read = MIN(nb_to_read, NB_BYTE_MAX_PER_PROCESS);
 80019ba:	89fb      	ldrh	r3, [r7, #14]
 80019bc:	2b32      	cmp	r3, #50	; 0x32
 80019be:	bf28      	it	cs
 80019c0:	2332      	movcs	r3, #50	; 0x32
 80019c2:	81fb      	strh	r3, [r7, #14]
	bool_e to_return = FALSE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	737b      	strb	r3, [r7, #13]
	uint8_t c = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	70fb      	strb	r3, [r7, #3]
	while(nb_to_read)
 80019cc:	e083      	b.n	8001ad6 <IBUS_Process+0x136>
	{
		UART_Get(UART_IBUS, &c);
 80019ce:	1cfb      	adds	r3, r7, #3
 80019d0:	4619      	mov	r1, r3
 80019d2:	2001      	movs	r0, #1
 80019d4:	f7ff fe1a 	bl	800160c <UART_Get>
		switch(ibus.state)
 80019d8:	4b43      	ldr	r3, [pc, #268]	; (8001ae8 <IBUS_Process+0x148>)
 80019da:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d027      	beq.n	8001a32 <IBUS_Process+0x92>
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	dc74      	bgt.n	8001ad0 <IBUS_Process+0x130>
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d002      	beq.n	80019f0 <IBUS_Process+0x50>
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d00b      	beq.n	8001a06 <IBUS_Process+0x66>
 80019ee:	e06f      	b.n	8001ad0 <IBUS_Process+0x130>
		{
			case STATE_IBUS_LENGTH :
				if(c == 0x20)
 80019f0:	78fb      	ldrb	r3, [r7, #3]
 80019f2:	2b20      	cmp	r3, #32
 80019f4:	d167      	bne.n	8001ac6 <IBUS_Process+0x126>
				{
					ibus.state = STATE_IBUS_COMMAND ;
 80019f6:	4b3c      	ldr	r3, [pc, #240]	; (8001ae8 <IBUS_Process+0x148>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
					ibus.buffer[0] = c ;
 80019fe:	78fa      	ldrb	r2, [r7, #3]
 8001a00:	4b39      	ldr	r3, [pc, #228]	; (8001ae8 <IBUS_Process+0x148>)
 8001a02:	711a      	strb	r2, [r3, #4]
				}
				break;
 8001a04:	e05f      	b.n	8001ac6 <IBUS_Process+0x126>
			case STATE_IBUS_COMMAND :
				if(c == 0x40)
 8001a06:	78fb      	ldrb	r3, [r7, #3]
 8001a08:	2b40      	cmp	r3, #64	; 0x40
 8001a0a:	d10a      	bne.n	8001a22 <IBUS_Process+0x82>
				{
					ibus.state = STATE_IBUS_CHANNELS ;
 8001a0c:	4b36      	ldr	r3, [pc, #216]	; (8001ae8 <IBUS_Process+0x148>)
 8001a0e:	2202      	movs	r2, #2
 8001a10:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
					ibus.buffer[1] = c ;
 8001a14:	78fa      	ldrb	r2, [r7, #3]
 8001a16:	4b34      	ldr	r3, [pc, #208]	; (8001ae8 <IBUS_Process+0x148>)
 8001a18:	715a      	strb	r2, [r3, #5]
					ibus.compteur = 2 ;
 8001a1a:	4b33      	ldr	r3, [pc, #204]	; (8001ae8 <IBUS_Process+0x148>)
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	849a      	strh	r2, [r3, #36]	; 0x24
				}
				else if(c != 0x20)
				{
					ibus.state = STATE_IBUS_LENGTH ;
				}
				break ;
 8001a20:	e053      	b.n	8001aca <IBUS_Process+0x12a>
				else if(c != 0x20)
 8001a22:	78fb      	ldrb	r3, [r7, #3]
 8001a24:	2b20      	cmp	r3, #32
 8001a26:	d050      	beq.n	8001aca <IBUS_Process+0x12a>
					ibus.state = STATE_IBUS_LENGTH ;
 8001a28:	4b2f      	ldr	r3, [pc, #188]	; (8001ae8 <IBUS_Process+0x148>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				break ;
 8001a30:	e04b      	b.n	8001aca <IBUS_Process+0x12a>

			case STATE_IBUS_CHANNELS :
				ibus.buffer[ibus.compteur++] = c ;
 8001a32:	4b2d      	ldr	r3, [pc, #180]	; (8001ae8 <IBUS_Process+0x148>)
 8001a34:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001a36:	1c5a      	adds	r2, r3, #1
 8001a38:	b291      	uxth	r1, r2
 8001a3a:	4a2b      	ldr	r2, [pc, #172]	; (8001ae8 <IBUS_Process+0x148>)
 8001a3c:	8491      	strh	r1, [r2, #36]	; 0x24
 8001a3e:	4619      	mov	r1, r3
 8001a40:	78fa      	ldrb	r2, [r7, #3]
 8001a42:	4b29      	ldr	r3, [pc, #164]	; (8001ae8 <IBUS_Process+0x148>)
 8001a44:	440b      	add	r3, r1
 8001a46:	711a      	strb	r2, [r3, #4]
				if(ibus.compteur == 32)
 8001a48:	4b27      	ldr	r3, [pc, #156]	; (8001ae8 <IBUS_Process+0x148>)
 8001a4a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001a4c:	2b20      	cmp	r3, #32
 8001a4e:	d13e      	bne.n	8001ace <IBUS_Process+0x12e>
				{
					uint32_t cs = (uint32_t)(ibus.buffer[30] | (ibus.buffer[31] << 8)) ;
 8001a50:	4b25      	ldr	r3, [pc, #148]	; (8001ae8 <IBUS_Process+0x148>)
 8001a52:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001a56:	461a      	mov	r2, r3
 8001a58:	4b23      	ldr	r3, [pc, #140]	; (8001ae8 <IBUS_Process+0x148>)
 8001a5a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001a5e:	021b      	lsls	r3, r3, #8
 8001a60:	4313      	orrs	r3, r2
 8001a62:	607b      	str	r3, [r7, #4]
					if(0xFFFF - check_sum_f(ibus.buffer)== cs)
 8001a64:	4821      	ldr	r0, [pc, #132]	; (8001aec <IBUS_Process+0x14c>)
 8001a66:	f000 f843 	bl	8001af0 <check_sum_f>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001a70:	33ff      	adds	r3, #255	; 0xff
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d121      	bne.n	8001abc <IBUS_Process+0x11c>
					{
						for(uint32_t radio = 0; radio < 28; radio +=2)
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	e019      	b.n	8001ab2 <IBUS_Process+0x112>
						{
							ibus.channels[radio / 2] = (int32_t)(ibus.buffer[radio+2] | (ibus.buffer[radio + 3] << 8));
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	3302      	adds	r3, #2
 8001a82:	4a19      	ldr	r2, [pc, #100]	; (8001ae8 <IBUS_Process+0x148>)
 8001a84:	4413      	add	r3, r2
 8001a86:	791b      	ldrb	r3, [r3, #4]
 8001a88:	b21a      	sxth	r2, r3
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	3303      	adds	r3, #3
 8001a8e:	4916      	ldr	r1, [pc, #88]	; (8001ae8 <IBUS_Process+0x148>)
 8001a90:	440b      	add	r3, r1
 8001a92:	791b      	ldrb	r3, [r3, #4]
 8001a94:	021b      	lsls	r3, r3, #8
 8001a96:	b21b      	sxth	r3, r3
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	b219      	sxth	r1, r3
 8001a9c:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <IBUS_Process+0x148>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	f023 0301 	bic.w	r3, r3, #1
 8001aa6:	4413      	add	r3, r2
 8001aa8:	b28a      	uxth	r2, r1
 8001aaa:	801a      	strh	r2, [r3, #0]
						for(uint32_t radio = 0; radio < 28; radio +=2)
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	3302      	adds	r3, #2
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	2b1b      	cmp	r3, #27
 8001ab6:	d9e2      	bls.n	8001a7e <IBUS_Process+0xde>
						}
						to_return = TRUE;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	737b      	strb	r3, [r7, #13]
					}
					ibus.state = STATE_IBUS_LENGTH ;
 8001abc:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <IBUS_Process+0x148>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				}
				break;
 8001ac4:	e003      	b.n	8001ace <IBUS_Process+0x12e>
				break;
 8001ac6:	bf00      	nop
 8001ac8:	e002      	b.n	8001ad0 <IBUS_Process+0x130>
				break ;
 8001aca:	bf00      	nop
 8001acc:	e000      	b.n	8001ad0 <IBUS_Process+0x130>
				break;
 8001ace:	bf00      	nop
		}
		nb_to_read --;
 8001ad0:	89fb      	ldrh	r3, [r7, #14]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	81fb      	strh	r3, [r7, #14]
	while(nb_to_read)
 8001ad6:	89fb      	ldrh	r3, [r7, #14]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f47f af78 	bne.w	80019ce <IBUS_Process+0x2e>
	}

	return to_return;
 8001ade:	7b7b      	ldrb	r3, [r7, #13]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	200009f0 	.word	0x200009f0
 8001aec:	200009f4 	.word	0x200009f4

08001af0 <check_sum_f>:

uint32_t check_sum_f(uint8_t * buffer)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	uint32_t sum = 0 ;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]
	for(uint8_t b=0; b <30; b++)
 8001afc:	2300      	movs	r3, #0
 8001afe:	72fb      	strb	r3, [r7, #11]
 8001b00:	e00a      	b.n	8001b18 <check_sum_f+0x28>
		sum += (uint32_t)buffer[b];
 8001b02:	7afb      	ldrb	r3, [r7, #11]
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	4413      	add	r3, r2
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4413      	add	r3, r2
 8001b10:	60fb      	str	r3, [r7, #12]
	for(uint8_t b=0; b <30; b++)
 8001b12:	7afb      	ldrb	r3, [r7, #11]
 8001b14:	3301      	adds	r3, #1
 8001b16:	72fb      	strb	r3, [r7, #11]
 8001b18:	7afb      	ldrb	r3, [r7, #11]
 8001b1a:	2b1d      	cmp	r3, #29
 8001b1c:	d9f1      	bls.n	8001b02 <check_sum_f+0x12>
	return sum ;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <RADIO_Process_Init>:
#define TIMEOUT_RADIO_MS	50

static radio_t radio = { 0 };

void RADIO_Process_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
#if USE_IBUS
	IBUS_Init(radio.channels);
 8001b30:	4802      	ldr	r0, [pc, #8]	; (8001b3c <RADIO_Process_Init+0x10>)
 8001b32:	f7ff ff25 	bl	8001980 <IBUS_Init>
#endif
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000a1c 	.word	0x20000a1c

08001b40 <RADIO_Process_Main>:

void RADIO_Process_Main(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0

#if USE_IBUS
	if(IBUS_Process())
 8001b44:	f7ff ff2c 	bl	80019a0 <IBUS_Process>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d009      	beq.n	8001b62 <RADIO_Process_Main+0x22>
	{
		radio.next_update = HAL_GetTick() + TIMEOUT_RADIO_MS;
 8001b4e:	f001 f8fb 	bl	8002d48 <HAL_GetTick>
 8001b52:	4603      	mov	r3, r0
 8001b54:	3332      	adds	r3, #50	; 0x32
 8001b56:	4a09      	ldr	r2, [pc, #36]	; (8001b7c <RADIO_Process_Main+0x3c>)
 8001b58:	6213      	str	r3, [r2, #32]
		radio.state = radio_state_eOK;
 8001b5a:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <RADIO_Process_Main+0x3c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	771a      	strb	r2, [r3, #28]
	else if(HAL_GetTick() > radio.next_update)
	{
		radio.state = radio_state_eTIMEOUT;
	}
#endif
}
 8001b60:	e009      	b.n	8001b76 <RADIO_Process_Main+0x36>
	else if(HAL_GetTick() > radio.next_update)
 8001b62:	f001 f8f1 	bl	8002d48 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <RADIO_Process_Main+0x3c>)
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d902      	bls.n	8001b76 <RADIO_Process_Main+0x36>
		radio.state = radio_state_eTIMEOUT;
 8001b70:	4b02      	ldr	r3, [pc, #8]	; (8001b7c <RADIO_Process_Main+0x3c>)
 8001b72:	2201      	movs	r2, #1
 8001b74:	771a      	strb	r2, [r3, #28]
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000a1c 	.word	0x20000a1c

08001b80 <MPU_Init>:
/*
 * @brief Wake up the MPU6000
 *		  Configure the Gyroscope and the Accelerometer
 */
void MPU_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af02      	add	r7, sp, #8
	/* Set the Gyroscope and Accelerometer data buffer */
	mpu.gyro_data = &mpu.data[8];
 8001b86:	4b54      	ldr	r3, [pc, #336]	; (8001cd8 <MPU_Init+0x158>)
 8001b88:	4a54      	ldr	r2, [pc, #336]	; (8001cdc <MPU_Init+0x15c>)
 8001b8a:	611a      	str	r2, [r3, #16]
	mpu.acc_data = &mpu.data[0];
 8001b8c:	4b52      	ldr	r3, [pc, #328]	; (8001cd8 <MPU_Init+0x158>)
 8001b8e:	4a54      	ldr	r2, [pc, #336]	; (8001ce0 <MPU_Init+0x160>)
 8001b90:	625a      	str	r2, [r3, #36]	; 0x24
	/* Disable I2C */
	SPI_Transmit(SPI_MPU, CS_MPU, mpu_disable_i2c, 2);
	HAL_Delay(150);
#else
	/* Power up the mpu an wait for it to start */
	HAL_GPIO_WritePin(MPU_POWER_GPIO_Port, MPU_POWER_Pin, GPIO_PIN_SET);
 8001b92:	2201      	movs	r2, #1
 8001b94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b98:	4852      	ldr	r0, [pc, #328]	; (8001ce4 <MPU_Init+0x164>)
 8001b9a:	f001 ffb5 	bl	8003b08 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001b9e:	20c8      	movs	r0, #200	; 0xc8
 8001ba0:	f001 f8de 	bl	8002d60 <HAL_Delay>
	/* Wake up the mpu */
	uint8_t wakeup_data = 0x80;
 8001ba4:	2380      	movs	r3, #128	; 0x80
 8001ba6:	71fb      	strb	r3, [r7, #7]
	I2C_Mem_Write(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_PWR_MGMT_1, &wakeup_data, 1);
 8001ba8:	1dfb      	adds	r3, r7, #7
 8001baa:	2201      	movs	r2, #1
 8001bac:	9200      	str	r2, [sp, #0]
 8001bae:	226b      	movs	r2, #107	; 0x6b
 8001bb0:	21d0      	movs	r1, #208	; 0xd0
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	f7ff fb58 	bl	8001268 <I2C_Mem_Write>
	HAL_Delay(15);
 8001bb8:	200f      	movs	r0, #15
 8001bba:	f001 f8d1 	bl	8002d60 <HAL_Delay>
	/* Select the clock */
	uint8_t clock_select = 0x03;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	71bb      	strb	r3, [r7, #6]
	I2C_Mem_Write(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_PWR_MGMT_1, &clock_select, 1);
 8001bc2:	1dbb      	adds	r3, r7, #6
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	9200      	str	r2, [sp, #0]
 8001bc8:	226b      	movs	r2, #107	; 0x6b
 8001bca:	21d0      	movs	r1, #208	; 0xd0
 8001bcc:	2000      	movs	r0, #0
 8001bce:	f7ff fb4b 	bl	8001268 <I2C_Mem_Write>
	SPI_Transmit(SPI_MPU, CS_MPU, temp_write, 2);
	HAL_Delay(150);
#else
	/* Sensitivity configuration */
	uint8_t temp;
	I2C_Mem_Read(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_GYRO_CONFIG, &temp, 1);
 8001bd2:	1d7b      	adds	r3, r7, #5
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	9200      	str	r2, [sp, #0]
 8001bd8:	221b      	movs	r2, #27
 8001bda:	21d0      	movs	r1, #208	; 0xd0
 8001bdc:	2000      	movs	r0, #0
 8001bde:	f7ff fb65 	bl	80012ac <I2C_Mem_Read>
	temp = (temp & 0xE7) | (uint8_t)mpu.gyro_range << 3;
 8001be2:	797b      	ldrb	r3, [r7, #5]
 8001be4:	b25b      	sxtb	r3, r3
 8001be6:	f023 0318 	bic.w	r3, r3, #24
 8001bea:	b25a      	sxtb	r2, r3
 8001bec:	4b3a      	ldr	r3, [pc, #232]	; (8001cd8 <MPU_Init+0x158>)
 8001bee:	7bdb      	ldrb	r3, [r3, #15]
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	b25b      	sxtb	r3, r3
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	b25b      	sxtb	r3, r3
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	717b      	strb	r3, [r7, #5]
	I2C_Mem_Write(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_GYRO_CONFIG, &temp, 1);
 8001bfc:	1d7b      	adds	r3, r7, #5
 8001bfe:	2201      	movs	r2, #1
 8001c00:	9200      	str	r2, [sp, #0]
 8001c02:	221b      	movs	r2, #27
 8001c04:	21d0      	movs	r1, #208	; 0xd0
 8001c06:	2000      	movs	r0, #0
 8001c08:	f7ff fb2e 	bl	8001268 <I2C_Mem_Write>
#endif
	switch(mpu.gyro_range)
 8001c0c:	4b32      	ldr	r3, [pc, #200]	; (8001cd8 <MPU_Init+0x158>)
 8001c0e:	7bdb      	ldrb	r3, [r3, #15]
 8001c10:	2b03      	cmp	r3, #3
 8001c12:	d81b      	bhi.n	8001c4c <MPU_Init+0xcc>
 8001c14:	a201      	add	r2, pc, #4	; (adr r2, 8001c1c <MPU_Init+0x9c>)
 8001c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c1a:	bf00      	nop
 8001c1c:	08001c2d 	.word	0x08001c2d
 8001c20:	08001c35 	.word	0x08001c35
 8001c24:	08001c3d 	.word	0x08001c3d
 8001c28:	08001c45 	.word	0x08001c45
	{
		case MPU_GYRO_250s :
			mpu.gyro_conversion = (float)1 / MPU6050_GYRO_SENS_250 ;
 8001c2c:	4b2a      	ldr	r3, [pc, #168]	; (8001cd8 <MPU_Init+0x158>)
 8001c2e:	4a2e      	ldr	r2, [pc, #184]	; (8001ce8 <MPU_Init+0x168>)
 8001c30:	615a      	str	r2, [r3, #20]
			break;
 8001c32:	e00b      	b.n	8001c4c <MPU_Init+0xcc>
		case MPU_GYRO_500s :
			mpu.gyro_conversion = (float)1 / MPU6050_GYRO_SENS_500 ;
 8001c34:	4b28      	ldr	r3, [pc, #160]	; (8001cd8 <MPU_Init+0x158>)
 8001c36:	4a2d      	ldr	r2, [pc, #180]	; (8001cec <MPU_Init+0x16c>)
 8001c38:	615a      	str	r2, [r3, #20]
			break;
 8001c3a:	e007      	b.n	8001c4c <MPU_Init+0xcc>
		case MPU_GYRO_1000s :
			mpu.gyro_conversion = (float)1 / MPU6050_GYRO_SENS_1000 ;
 8001c3c:	4b26      	ldr	r3, [pc, #152]	; (8001cd8 <MPU_Init+0x158>)
 8001c3e:	4a2c      	ldr	r2, [pc, #176]	; (8001cf0 <MPU_Init+0x170>)
 8001c40:	615a      	str	r2, [r3, #20]
			break;
 8001c42:	e003      	b.n	8001c4c <MPU_Init+0xcc>
		case MPU_GYRO_2000s :
			mpu.gyro_conversion = (float)1 / MPU6050_GYRO_SENS_2000 ;
 8001c44:	4b24      	ldr	r3, [pc, #144]	; (8001cd8 <MPU_Init+0x158>)
 8001c46:	4a2b      	ldr	r2, [pc, #172]	; (8001cf4 <MPU_Init+0x174>)
 8001c48:	615a      	str	r2, [r3, #20]
			break;
 8001c4a:	bf00      	nop
	temp_write[1] = (temp_read[1] & 0xE7) | (uint8_t)mpu.acc_range << 3;
	SPI_Transmit(SPI_MPU, CS_MPU, temp_write, 2);
	HAL_Delay(150);
#else
	/* Sensitivity configuration */
	I2C_Mem_Read(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_ACCEL_CONFIG, &temp, 1);
 8001c4c:	1d7b      	adds	r3, r7, #5
 8001c4e:	2201      	movs	r2, #1
 8001c50:	9200      	str	r2, [sp, #0]
 8001c52:	221c      	movs	r2, #28
 8001c54:	21d0      	movs	r1, #208	; 0xd0
 8001c56:	2000      	movs	r0, #0
 8001c58:	f7ff fb28 	bl	80012ac <I2C_Mem_Read>
	temp = (temp & 0xE7) | (uint8_t)mpu.acc_range << 3;
 8001c5c:	797b      	ldrb	r3, [r7, #5]
 8001c5e:	b25b      	sxtb	r3, r3
 8001c60:	f023 0318 	bic.w	r3, r3, #24
 8001c64:	b25a      	sxtb	r2, r3
 8001c66:	4b1c      	ldr	r3, [pc, #112]	; (8001cd8 <MPU_Init+0x158>)
 8001c68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	b25b      	sxtb	r3, r3
 8001c70:	4313      	orrs	r3, r2
 8001c72:	b25b      	sxtb	r3, r3
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	717b      	strb	r3, [r7, #5]
	I2C_Mem_Write(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_ACCEL_CONFIG, &temp, 1);
 8001c78:	1d7b      	adds	r3, r7, #5
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	9200      	str	r2, [sp, #0]
 8001c7e:	221c      	movs	r2, #28
 8001c80:	21d0      	movs	r1, #208	; 0xd0
 8001c82:	2000      	movs	r0, #0
 8001c84:	f7ff faf0 	bl	8001268 <I2C_Mem_Write>
#endif
	switch(mpu.acc_range)
 8001c88:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <MPU_Init+0x158>)
 8001c8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c8e:	2b03      	cmp	r3, #3
 8001c90:	d81e      	bhi.n	8001cd0 <MPU_Init+0x150>
 8001c92:	a201      	add	r2, pc, #4	; (adr r2, 8001c98 <MPU_Init+0x118>)
 8001c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c98:	08001ca9 	.word	0x08001ca9
 8001c9c:	08001cb3 	.word	0x08001cb3
 8001ca0:	08001cbd 	.word	0x08001cbd
 8001ca4:	08001cc7 	.word	0x08001cc7
	{
		case MPU_ACC_2G :
			mpu.acc_conversion = (float)1 / MPU6050_ACCE_SENS_2 ;
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <MPU_Init+0x158>)
 8001caa:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8001cae:	62da      	str	r2, [r3, #44]	; 0x2c
			break;
 8001cb0:	e00e      	b.n	8001cd0 <MPU_Init+0x150>
		case MPU_ACC_4G :
			mpu.acc_conversion = (float)1 / MPU6050_ACCE_SENS_4 ;
 8001cb2:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <MPU_Init+0x158>)
 8001cb4:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001cb8:	62da      	str	r2, [r3, #44]	; 0x2c
			break;
 8001cba:	e009      	b.n	8001cd0 <MPU_Init+0x150>
		case MPU_ACC_8G :
			mpu.acc_conversion = (float)1 / MPU6050_ACCE_SENS_8 ;
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <MPU_Init+0x158>)
 8001cbe:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8001cc2:	62da      	str	r2, [r3, #44]	; 0x2c
			break;
 8001cc4:	e004      	b.n	8001cd0 <MPU_Init+0x150>
		case MPU_ACC_16G :
			mpu.acc_conversion = (float)1 / MPU6050_ACCE_SENS_16 ;
 8001cc6:	4b04      	ldr	r3, [pc, #16]	; (8001cd8 <MPU_Init+0x158>)
 8001cc8:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001ccc:	62da      	str	r2, [r3, #44]	; 0x2c
			break;
 8001cce:	bf00      	nop
	}
}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	2000004c 	.word	0x2000004c
 8001cdc:	20000055 	.word	0x20000055
 8001ce0:	2000004d 	.word	0x2000004d
 8001ce4:	40020800 	.word	0x40020800
 8001ce8:	3bfa232d 	.word	0x3bfa232d
 8001cec:	3c7a232d 	.word	0x3c7a232d
 8001cf0:	3cf9c190 	.word	0x3cf9c190
 8001cf4:	3d79c190 	.word	0x3d79c190

08001cf8 <MPU_Get_Gyro_Ptr>:
float * MPU_Get_Gyro_Ptr(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
	return mpu.gyro;
 8001cfc:	4b02      	ldr	r3, [pc, #8]	; (8001d08 <MPU_Get_Gyro_Ptr+0x10>)
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	20000064 	.word	0x20000064

08001d0c <MPU_Get_Acc_Ptr>:

float * MPU_Get_Acc_Ptr(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
	return mpu.acc;
 8001d10:	4b02      	ldr	r3, [pc, #8]	; (8001d1c <MPU_Get_Acc_Ptr+0x10>)
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	2000007c 	.word	0x2000007c

08001d20 <MPU_Read_All>:

void MPU_Read_All(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af02      	add	r7, sp, #8
#if USE_SPI
	uint8_t registers [14] = {MPU6050_ACCEL_XOUT_H | MPU6050_READ};
	SPI_Transmit_Receive(SPI_MPU, CS_MPU, registers, mpu.data, 14);
#else
	I2C_Mem_Read(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_ACCEL_XOUT_H, mpu.data, 14);
 8001d26:	230e      	movs	r3, #14
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <MPU_Read_All+0x24>)
 8001d2c:	223b      	movs	r2, #59	; 0x3b
 8001d2e:	21d0      	movs	r1, #208	; 0xd0
 8001d30:	2000      	movs	r0, #0
 8001d32:	f7ff fabb 	bl	80012ac <I2C_Mem_Read>
#endif
	MPU_Convert_Acc_Data();
 8001d36:	f000 f807 	bl	8001d48 <MPU_Convert_Acc_Data>
	MPU_Convert_Gyro_Data();
 8001d3a:	f000 f859 	bl	8001df0 <MPU_Convert_Gyro_Data>
}
 8001d3e:	bf00      	nop
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	2000004d 	.word	0x2000004d

08001d48 <MPU_Convert_Acc_Data>:

/*
 * @brief Convert acc bytes to measurement
 */
void MPU_Convert_Acc_Data(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
	mpu.acc[0] = (int16_t)(mpu.acc_data[1] | (mpu.acc_data[0] << 8)) * mpu.acc_conversion;
 8001d4c:	4b27      	ldr	r3, [pc, #156]	; (8001dec <MPU_Convert_Acc_Data+0xa4>)
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	3301      	adds	r3, #1
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	b21a      	sxth	r2, r3
 8001d56:	4b25      	ldr	r3, [pc, #148]	; (8001dec <MPU_Convert_Acc_Data+0xa4>)
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	021b      	lsls	r3, r3, #8
 8001d5e:	b21b      	sxth	r3, r3
 8001d60:	4313      	orrs	r3, r2
 8001d62:	b21b      	sxth	r3, r3
 8001d64:	ee07 3a90 	vmov	s15, r3
 8001d68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d6c:	4b1f      	ldr	r3, [pc, #124]	; (8001dec <MPU_Convert_Acc_Data+0xa4>)
 8001d6e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d76:	4b1d      	ldr	r3, [pc, #116]	; (8001dec <MPU_Convert_Acc_Data+0xa4>)
 8001d78:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	mpu.acc[1] = (int16_t)(mpu.acc_data[3] | (mpu.acc_data[2] << 8)) * mpu.acc_conversion;
 8001d7c:	4b1b      	ldr	r3, [pc, #108]	; (8001dec <MPU_Convert_Acc_Data+0xa4>)
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d80:	3303      	adds	r3, #3
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	b21a      	sxth	r2, r3
 8001d86:	4b19      	ldr	r3, [pc, #100]	; (8001dec <MPU_Convert_Acc_Data+0xa4>)
 8001d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8a:	3302      	adds	r3, #2
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	021b      	lsls	r3, r3, #8
 8001d90:	b21b      	sxth	r3, r3
 8001d92:	4313      	orrs	r3, r2
 8001d94:	b21b      	sxth	r3, r3
 8001d96:	ee07 3a90 	vmov	s15, r3
 8001d9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d9e:	4b13      	ldr	r3, [pc, #76]	; (8001dec <MPU_Convert_Acc_Data+0xa4>)
 8001da0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001da4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001da8:	4b10      	ldr	r3, [pc, #64]	; (8001dec <MPU_Convert_Acc_Data+0xa4>)
 8001daa:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	mpu.acc[2] = (int16_t)(mpu.acc_data[5] | (mpu.acc_data[4] << 8)) * mpu.acc_conversion;
 8001dae:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <MPU_Convert_Acc_Data+0xa4>)
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	3305      	adds	r3, #5
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	b21a      	sxth	r2, r3
 8001db8:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <MPU_Convert_Acc_Data+0xa4>)
 8001dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	021b      	lsls	r3, r3, #8
 8001dc2:	b21b      	sxth	r3, r3
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	b21b      	sxth	r3, r3
 8001dc8:	ee07 3a90 	vmov	s15, r3
 8001dcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dd0:	4b06      	ldr	r3, [pc, #24]	; (8001dec <MPU_Convert_Acc_Data+0xa4>)
 8001dd2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dda:	4b04      	ldr	r3, [pc, #16]	; (8001dec <MPU_Convert_Acc_Data+0xa4>)
 8001ddc:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	2000004c 	.word	0x2000004c

08001df0 <MPU_Convert_Gyro_Data>:

/*
 * @brief Convert gyro bytes to measurement
 */
void MPU_Convert_Gyro_Data(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
	mpu.gyro[0] = (int16_t)(mpu.gyro_data[1] | (mpu.gyro_data[0] << 8)) * mpu.gyro_conversion;
 8001df4:	4b27      	ldr	r3, [pc, #156]	; (8001e94 <MPU_Convert_Gyro_Data+0xa4>)
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	b21a      	sxth	r2, r3
 8001dfe:	4b25      	ldr	r3, [pc, #148]	; (8001e94 <MPU_Convert_Gyro_Data+0xa4>)
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	021b      	lsls	r3, r3, #8
 8001e06:	b21b      	sxth	r3, r3
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	b21b      	sxth	r3, r3
 8001e0c:	ee07 3a90 	vmov	s15, r3
 8001e10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e14:	4b1f      	ldr	r3, [pc, #124]	; (8001e94 <MPU_Convert_Gyro_Data+0xa4>)
 8001e16:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e1e:	4b1d      	ldr	r3, [pc, #116]	; (8001e94 <MPU_Convert_Gyro_Data+0xa4>)
 8001e20:	edc3 7a06 	vstr	s15, [r3, #24]
	mpu.gyro[1] = (int16_t)(mpu.gyro_data[3] | (mpu.gyro_data[2] << 8)) * mpu.gyro_conversion;
 8001e24:	4b1b      	ldr	r3, [pc, #108]	; (8001e94 <MPU_Convert_Gyro_Data+0xa4>)
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	3303      	adds	r3, #3
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	b21a      	sxth	r2, r3
 8001e2e:	4b19      	ldr	r3, [pc, #100]	; (8001e94 <MPU_Convert_Gyro_Data+0xa4>)
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	3302      	adds	r3, #2
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	021b      	lsls	r3, r3, #8
 8001e38:	b21b      	sxth	r3, r3
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	b21b      	sxth	r3, r3
 8001e3e:	ee07 3a90 	vmov	s15, r3
 8001e42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e46:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <MPU_Convert_Gyro_Data+0xa4>)
 8001e48:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e50:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <MPU_Convert_Gyro_Data+0xa4>)
 8001e52:	edc3 7a07 	vstr	s15, [r3, #28]
	mpu.gyro[2] = (int16_t)(mpu.gyro_data[5] | (mpu.gyro_data[4] << 8)) * mpu.gyro_conversion;
 8001e56:	4b0f      	ldr	r3, [pc, #60]	; (8001e94 <MPU_Convert_Gyro_Data+0xa4>)
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	3305      	adds	r3, #5
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	b21a      	sxth	r2, r3
 8001e60:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <MPU_Convert_Gyro_Data+0xa4>)
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	3304      	adds	r3, #4
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	021b      	lsls	r3, r3, #8
 8001e6a:	b21b      	sxth	r3, r3
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	b21b      	sxth	r3, r3
 8001e70:	ee07 3a90 	vmov	s15, r3
 8001e74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e78:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <MPU_Convert_Gyro_Data+0xa4>)
 8001e7a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e82:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <MPU_Convert_Gyro_Data+0xa4>)
 8001e84:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	2000004c 	.word	0x2000004c

08001e98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	607b      	str	r3, [r7, #4]
 8001ea2:	4b27      	ldr	r3, [pc, #156]	; (8001f40 <MX_DMA_Init+0xa8>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	4a26      	ldr	r2, [pc, #152]	; (8001f40 <MX_DMA_Init+0xa8>)
 8001ea8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001eac:	6313      	str	r3, [r2, #48]	; 0x30
 8001eae:	4b24      	ldr	r3, [pc, #144]	; (8001f40 <MX_DMA_Init+0xa8>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eb6:	607b      	str	r3, [r7, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	603b      	str	r3, [r7, #0]
 8001ebe:	4b20      	ldr	r3, [pc, #128]	; (8001f40 <MX_DMA_Init+0xa8>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	4a1f      	ldr	r2, [pc, #124]	; (8001f40 <MX_DMA_Init+0xa8>)
 8001ec4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eca:	4b1d      	ldr	r3, [pc, #116]	; (8001f40 <MX_DMA_Init+0xa8>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ed2:	603b      	str	r3, [r7, #0]
 8001ed4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2100      	movs	r1, #0
 8001eda:	200b      	movs	r0, #11
 8001edc:	f001 f83f 	bl	8002f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001ee0:	200b      	movs	r0, #11
 8001ee2:	f001 f858 	bl	8002f96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2100      	movs	r1, #0
 8001eea:	200d      	movs	r0, #13
 8001eec:	f001 f837 	bl	8002f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001ef0:	200d      	movs	r0, #13
 8001ef2:	f001 f850 	bl	8002f96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2100      	movs	r1, #0
 8001efa:	200f      	movs	r0, #15
 8001efc:	f001 f82f 	bl	8002f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001f00:	200f      	movs	r0, #15
 8001f02:	f001 f848 	bl	8002f96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001f06:	2200      	movs	r2, #0
 8001f08:	2100      	movs	r1, #0
 8001f0a:	2011      	movs	r0, #17
 8001f0c:	f001 f827 	bl	8002f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001f10:	2011      	movs	r0, #17
 8001f12:	f001 f840 	bl	8002f96 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001f16:	2200      	movs	r2, #0
 8001f18:	2100      	movs	r1, #0
 8001f1a:	203a      	movs	r0, #58	; 0x3a
 8001f1c:	f001 f81f 	bl	8002f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001f20:	203a      	movs	r0, #58	; 0x3a
 8001f22:	f001 f838 	bl	8002f96 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001f26:	2200      	movs	r2, #0
 8001f28:	2100      	movs	r1, #0
 8001f2a:	2046      	movs	r0, #70	; 0x46
 8001f2c:	f001 f817 	bl	8002f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001f30:	2046      	movs	r0, #70	; 0x46
 8001f32:	f001 f830 	bl	8002f96 <HAL_NVIC_EnableIRQ>

}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40023800 	.word	0x40023800

08001f44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b088      	sub	sp, #32
 8001f48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4a:	f107 030c 	add.w	r3, r7, #12
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	609a      	str	r2, [r3, #8]
 8001f56:	60da      	str	r2, [r3, #12]
 8001f58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	4b20      	ldr	r3, [pc, #128]	; (8001fe0 <MX_GPIO_Init+0x9c>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	4a1f      	ldr	r2, [pc, #124]	; (8001fe0 <MX_GPIO_Init+0x9c>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6a:	4b1d      	ldr	r3, [pc, #116]	; (8001fe0 <MX_GPIO_Init+0x9c>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	607b      	str	r3, [r7, #4]
 8001f7a:	4b19      	ldr	r3, [pc, #100]	; (8001fe0 <MX_GPIO_Init+0x9c>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a18      	ldr	r2, [pc, #96]	; (8001fe0 <MX_GPIO_Init+0x9c>)
 8001f80:	f043 0302 	orr.w	r3, r3, #2
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <MX_GPIO_Init+0x9c>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	607b      	str	r3, [r7, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	603b      	str	r3, [r7, #0]
 8001f96:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <MX_GPIO_Init+0x9c>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4a11      	ldr	r2, [pc, #68]	; (8001fe0 <MX_GPIO_Init+0x9c>)
 8001f9c:	f043 0304 	orr.w	r3, r3, #4
 8001fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa2:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <MX_GPIO_Init+0x9c>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f003 0304 	and.w	r3, r3, #4
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MPU_POWER_GPIO_Port, MPU_POWER_Pin, GPIO_PIN_RESET);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fb4:	480b      	ldr	r0, [pc, #44]	; (8001fe4 <MX_GPIO_Init+0xa0>)
 8001fb6:	f001 fda7 	bl	8003b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MPU_POWER_Pin;
 8001fba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MPU_POWER_GPIO_Port, &GPIO_InitStruct);
 8001fcc:	f107 030c 	add.w	r3, r7, #12
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4804      	ldr	r0, [pc, #16]	; (8001fe4 <MX_GPIO_Init+0xa0>)
 8001fd4:	f001 fbfc 	bl	80037d0 <HAL_GPIO_Init>

}
 8001fd8:	bf00      	nop
 8001fda:	3720      	adds	r7, #32
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	40020800 	.word	0x40020800

08001fe8 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fec:	4b12      	ldr	r3, [pc, #72]	; (8002038 <MX_I2C1_Init+0x50>)
 8001fee:	4a13      	ldr	r2, [pc, #76]	; (800203c <MX_I2C1_Init+0x54>)
 8001ff0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001ff2:	4b11      	ldr	r3, [pc, #68]	; (8002038 <MX_I2C1_Init+0x50>)
 8001ff4:	4a12      	ldr	r2, [pc, #72]	; (8002040 <MX_I2C1_Init+0x58>)
 8001ff6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ff8:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <MX_I2C1_Init+0x50>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <MX_I2C1_Init+0x50>)
 8002000:	2200      	movs	r2, #0
 8002002:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002004:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <MX_I2C1_Init+0x50>)
 8002006:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800200a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800200c:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <MX_I2C1_Init+0x50>)
 800200e:	2200      	movs	r2, #0
 8002010:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002012:	4b09      	ldr	r3, [pc, #36]	; (8002038 <MX_I2C1_Init+0x50>)
 8002014:	2200      	movs	r2, #0
 8002016:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002018:	4b07      	ldr	r3, [pc, #28]	; (8002038 <MX_I2C1_Init+0x50>)
 800201a:	2200      	movs	r2, #0
 800201c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800201e:	4b06      	ldr	r3, [pc, #24]	; (8002038 <MX_I2C1_Init+0x50>)
 8002020:	2200      	movs	r2, #0
 8002022:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002024:	4804      	ldr	r0, [pc, #16]	; (8002038 <MX_I2C1_Init+0x50>)
 8002026:	f001 fd89 	bl	8003b3c <HAL_I2C_Init>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002030:	f000 f978 	bl	8002324 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002034:	bf00      	nop
 8002036:	bd80      	pop	{r7, pc}
 8002038:	20000bbc 	.word	0x20000bbc
 800203c:	40005400 	.word	0x40005400
 8002040:	00061a80 	.word	0x00061a80

08002044 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08a      	sub	sp, #40	; 0x28
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204c:	f107 0314 	add.w	r3, r7, #20
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a48      	ldr	r2, [pc, #288]	; (8002184 <HAL_I2C_MspInit+0x140>)
 8002062:	4293      	cmp	r3, r2
 8002064:	f040 8089 	bne.w	800217a <HAL_I2C_MspInit+0x136>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002068:	2300      	movs	r3, #0
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	4b46      	ldr	r3, [pc, #280]	; (8002188 <HAL_I2C_MspInit+0x144>)
 800206e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002070:	4a45      	ldr	r2, [pc, #276]	; (8002188 <HAL_I2C_MspInit+0x144>)
 8002072:	f043 0302 	orr.w	r3, r3, #2
 8002076:	6313      	str	r3, [r2, #48]	; 0x30
 8002078:	4b43      	ldr	r3, [pc, #268]	; (8002188 <HAL_I2C_MspInit+0x144>)
 800207a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002084:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800208a:	2312      	movs	r3, #18
 800208c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002092:	2303      	movs	r3, #3
 8002094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002096:	2304      	movs	r3, #4
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800209a:	f107 0314 	add.w	r3, r7, #20
 800209e:	4619      	mov	r1, r3
 80020a0:	483a      	ldr	r0, [pc, #232]	; (800218c <HAL_I2C_MspInit+0x148>)
 80020a2:	f001 fb95 	bl	80037d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	4b37      	ldr	r3, [pc, #220]	; (8002188 <HAL_I2C_MspInit+0x144>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	4a36      	ldr	r2, [pc, #216]	; (8002188 <HAL_I2C_MspInit+0x144>)
 80020b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020b4:	6413      	str	r3, [r2, #64]	; 0x40
 80020b6:	4b34      	ldr	r3, [pc, #208]	; (8002188 <HAL_I2C_MspInit+0x144>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80020c2:	4b33      	ldr	r3, [pc, #204]	; (8002190 <HAL_I2C_MspInit+0x14c>)
 80020c4:	4a33      	ldr	r2, [pc, #204]	; (8002194 <HAL_I2C_MspInit+0x150>)
 80020c6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80020c8:	4b31      	ldr	r3, [pc, #196]	; (8002190 <HAL_I2C_MspInit+0x14c>)
 80020ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020ce:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020d0:	4b2f      	ldr	r3, [pc, #188]	; (8002190 <HAL_I2C_MspInit+0x14c>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020d6:	4b2e      	ldr	r3, [pc, #184]	; (8002190 <HAL_I2C_MspInit+0x14c>)
 80020d8:	2200      	movs	r2, #0
 80020da:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020dc:	4b2c      	ldr	r3, [pc, #176]	; (8002190 <HAL_I2C_MspInit+0x14c>)
 80020de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020e2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020e4:	4b2a      	ldr	r3, [pc, #168]	; (8002190 <HAL_I2C_MspInit+0x14c>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020ea:	4b29      	ldr	r3, [pc, #164]	; (8002190 <HAL_I2C_MspInit+0x14c>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80020f0:	4b27      	ldr	r3, [pc, #156]	; (8002190 <HAL_I2C_MspInit+0x14c>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020f6:	4b26      	ldr	r3, [pc, #152]	; (8002190 <HAL_I2C_MspInit+0x14c>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020fc:	4b24      	ldr	r3, [pc, #144]	; (8002190 <HAL_I2C_MspInit+0x14c>)
 80020fe:	2200      	movs	r2, #0
 8002100:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002102:	4823      	ldr	r0, [pc, #140]	; (8002190 <HAL_I2C_MspInit+0x14c>)
 8002104:	f000 ff62 	bl	8002fcc <HAL_DMA_Init>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 800210e:	f000 f909 	bl	8002324 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a1e      	ldr	r2, [pc, #120]	; (8002190 <HAL_I2C_MspInit+0x14c>)
 8002116:	639a      	str	r2, [r3, #56]	; 0x38
 8002118:	4a1d      	ldr	r2, [pc, #116]	; (8002190 <HAL_I2C_MspInit+0x14c>)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800211e:	4b1e      	ldr	r3, [pc, #120]	; (8002198 <HAL_I2C_MspInit+0x154>)
 8002120:	4a1e      	ldr	r2, [pc, #120]	; (800219c <HAL_I2C_MspInit+0x158>)
 8002122:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8002124:	4b1c      	ldr	r3, [pc, #112]	; (8002198 <HAL_I2C_MspInit+0x154>)
 8002126:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800212a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800212c:	4b1a      	ldr	r3, [pc, #104]	; (8002198 <HAL_I2C_MspInit+0x154>)
 800212e:	2240      	movs	r2, #64	; 0x40
 8002130:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002132:	4b19      	ldr	r3, [pc, #100]	; (8002198 <HAL_I2C_MspInit+0x154>)
 8002134:	2200      	movs	r2, #0
 8002136:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002138:	4b17      	ldr	r3, [pc, #92]	; (8002198 <HAL_I2C_MspInit+0x154>)
 800213a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800213e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002140:	4b15      	ldr	r3, [pc, #84]	; (8002198 <HAL_I2C_MspInit+0x154>)
 8002142:	2200      	movs	r2, #0
 8002144:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002146:	4b14      	ldr	r3, [pc, #80]	; (8002198 <HAL_I2C_MspInit+0x154>)
 8002148:	2200      	movs	r2, #0
 800214a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800214c:	4b12      	ldr	r3, [pc, #72]	; (8002198 <HAL_I2C_MspInit+0x154>)
 800214e:	2200      	movs	r2, #0
 8002150:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002152:	4b11      	ldr	r3, [pc, #68]	; (8002198 <HAL_I2C_MspInit+0x154>)
 8002154:	2200      	movs	r2, #0
 8002156:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002158:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <HAL_I2C_MspInit+0x154>)
 800215a:	2200      	movs	r2, #0
 800215c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800215e:	480e      	ldr	r0, [pc, #56]	; (8002198 <HAL_I2C_MspInit+0x154>)
 8002160:	f000 ff34 	bl	8002fcc <HAL_DMA_Init>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 800216a:	f000 f8db 	bl	8002324 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a09      	ldr	r2, [pc, #36]	; (8002198 <HAL_I2C_MspInit+0x154>)
 8002172:	635a      	str	r2, [r3, #52]	; 0x34
 8002174:	4a08      	ldr	r2, [pc, #32]	; (8002198 <HAL_I2C_MspInit+0x154>)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800217a:	bf00      	nop
 800217c:	3728      	adds	r7, #40	; 0x28
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40005400 	.word	0x40005400
 8002188:	40023800 	.word	0x40023800
 800218c:	40020400 	.word	0x40020400
 8002190:	20000c10 	.word	0x20000c10
 8002194:	40026010 	.word	0x40026010
 8002198:	20000b5c 	.word	0x20000b5c
 800219c:	400260a0 	.word	0x400260a0

080021a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021a4:	f000 fd6a 	bl	8002c7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021a8:	f000 f852 	bl	8002250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021ac:	f7ff feca 	bl	8001f44 <MX_GPIO_Init>
  MX_DMA_Init();
 80021b0:	f7ff fe72 	bl	8001e98 <MX_DMA_Init>
  MX_UART4_Init();
 80021b4:	f000 faa6 	bl	8002704 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80021b8:	f000 face 	bl	8002758 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80021bc:	f000 f98e 	bl	80024dc <MX_TIM3_Init>
  MX_I2C1_Init();
 80021c0:	f7ff ff12 	bl	8001fe8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* Wait for everyone to start */
  HAL_Delay(15);
 80021c4:	200f      	movs	r0, #15
 80021c6:	f000 fdcb 	bl	8002d60 <HAL_Delay>
  /* Peripherals initialization */
  UART_Init();
 80021ca:	f7ff fa69 	bl	80016a0 <UART_Init>
  /* Task definition */
  TASK_MANAGER_Add_Task("Gyro", 					MPU_Init, 						NULL, 								MPU_Read_All);
 80021ce:	4b11      	ldr	r3, [pc, #68]	; (8002214 <main+0x74>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	4911      	ldr	r1, [pc, #68]	; (8002218 <main+0x78>)
 80021d4:	4811      	ldr	r0, [pc, #68]	; (800221c <main+0x7c>)
 80021d6:	f000 fcfb 	bl	8002bd0 <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("Complementary Filter", 	COMPLEMENTARY_FILTER_Init, 		NULL, 								COMPLEMENTARY_FILTER_Process);
 80021da:	4b11      	ldr	r3, [pc, #68]	; (8002220 <main+0x80>)
 80021dc:	2200      	movs	r2, #0
 80021de:	4911      	ldr	r1, [pc, #68]	; (8002224 <main+0x84>)
 80021e0:	4811      	ldr	r0, [pc, #68]	; (8002228 <main+0x88>)
 80021e2:	f000 fcf5 	bl	8002bd0 <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("Motors",					MOTOR_Init, 					NULL, 								MOTOR_Process);
 80021e6:	4b11      	ldr	r3, [pc, #68]	; (800222c <main+0x8c>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	4911      	ldr	r1, [pc, #68]	; (8002230 <main+0x90>)
 80021ec:	4811      	ldr	r0, [pc, #68]	; (8002234 <main+0x94>)
 80021ee:	f000 fcef 	bl	8002bd0 <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("Radio", 					RADIO_Process_Init, 			RADIO_Process_Main, 				NULL);
 80021f2:	2300      	movs	r3, #0
 80021f4:	4a10      	ldr	r2, [pc, #64]	; (8002238 <main+0x98>)
 80021f6:	4911      	ldr	r1, [pc, #68]	; (800223c <main+0x9c>)
 80021f8:	4811      	ldr	r0, [pc, #68]	; (8002240 <main+0xa0>)
 80021fa:	f000 fce9 	bl	8002bd0 <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("Data Logger", 				DATA_LOGGER_Init, 				DATA_LOGGER_Main, 					NULL);
 80021fe:	2300      	movs	r3, #0
 8002200:	4a10      	ldr	r2, [pc, #64]	; (8002244 <main+0xa4>)
 8002202:	4911      	ldr	r1, [pc, #68]	; (8002248 <main+0xa8>)
 8002204:	4811      	ldr	r0, [pc, #68]	; (800224c <main+0xac>)
 8002206:	f000 fce3 	bl	8002bd0 <TASK_MANAGER_Add_Task>

  /* System initialization */
  TASK_MANAGER_Init();
 800220a:	f000 fc53 	bl	8002ab4 <TASK_MANAGER_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  TASK_MANAGER_Main();
 800220e:	f000 fc81 	bl	8002b14 <TASK_MANAGER_Main>
 8002212:	e7fc      	b.n	800220e <main+0x6e>
 8002214:	08001d21 	.word	0x08001d21
 8002218:	08001b81 	.word	0x08001b81
 800221c:	080081e4 	.word	0x080081e4
 8002220:	080004fd 	.word	0x080004fd
 8002224:	080004c1 	.word	0x080004c1
 8002228:	080081ec 	.word	0x080081ec
 800222c:	080011e9 	.word	0x080011e9
 8002230:	080011d9 	.word	0x080011d9
 8002234:	08008204 	.word	0x08008204
 8002238:	08001b41 	.word	0x08001b41
 800223c:	08001b2d 	.word	0x08001b2d
 8002240:	0800820c 	.word	0x0800820c
 8002244:	08000941 	.word	0x08000941
 8002248:	08000849 	.word	0x08000849
 800224c:	08008214 	.word	0x08008214

08002250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b094      	sub	sp, #80	; 0x50
 8002254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002256:	f107 0320 	add.w	r3, r7, #32
 800225a:	2230      	movs	r2, #48	; 0x30
 800225c:	2100      	movs	r1, #0
 800225e:	4618      	mov	r0, r3
 8002260:	f005 f8d8 	bl	8007414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002264:	f107 030c 	add.w	r3, r7, #12
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	60da      	str	r2, [r3, #12]
 8002272:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002274:	2300      	movs	r3, #0
 8002276:	60bb      	str	r3, [r7, #8]
 8002278:	4b28      	ldr	r3, [pc, #160]	; (800231c <SystemClock_Config+0xcc>)
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	4a27      	ldr	r2, [pc, #156]	; (800231c <SystemClock_Config+0xcc>)
 800227e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002282:	6413      	str	r3, [r2, #64]	; 0x40
 8002284:	4b25      	ldr	r3, [pc, #148]	; (800231c <SystemClock_Config+0xcc>)
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002290:	2300      	movs	r3, #0
 8002292:	607b      	str	r3, [r7, #4]
 8002294:	4b22      	ldr	r3, [pc, #136]	; (8002320 <SystemClock_Config+0xd0>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a21      	ldr	r2, [pc, #132]	; (8002320 <SystemClock_Config+0xd0>)
 800229a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800229e:	6013      	str	r3, [r2, #0]
 80022a0:	4b1f      	ldr	r3, [pc, #124]	; (8002320 <SystemClock_Config+0xd0>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a8:	607b      	str	r3, [r7, #4]
 80022aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022ac:	2302      	movs	r3, #2
 80022ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022b0:	2301      	movs	r3, #1
 80022b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022b4:	2310      	movs	r3, #16
 80022b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022b8:	2302      	movs	r3, #2
 80022ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022bc:	2300      	movs	r3, #0
 80022be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80022c0:	2308      	movs	r3, #8
 80022c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80022c4:	23a8      	movs	r3, #168	; 0xa8
 80022c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022c8:	2302      	movs	r3, #2
 80022ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80022cc:	2304      	movs	r3, #4
 80022ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022d0:	f107 0320 	add.w	r3, r7, #32
 80022d4:	4618      	mov	r0, r3
 80022d6:	f002 fbf1 	bl	8004abc <HAL_RCC_OscConfig>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80022e0:	f000 f820 	bl	8002324 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022e4:	230f      	movs	r3, #15
 80022e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022e8:	2302      	movs	r3, #2
 80022ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022ec:	2300      	movs	r3, #0
 80022ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80022f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80022f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80022fc:	f107 030c 	add.w	r3, r7, #12
 8002300:	2105      	movs	r1, #5
 8002302:	4618      	mov	r0, r3
 8002304:	f002 fe52 	bl	8004fac <HAL_RCC_ClockConfig>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800230e:	f000 f809 	bl	8002324 <Error_Handler>
  }
}
 8002312:	bf00      	nop
 8002314:	3750      	adds	r7, #80	; 0x50
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40023800 	.word	0x40023800
 8002320:	40007000 	.word	0x40007000

08002324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002328:	b672      	cpsid	i
}
 800232a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800232c:	e7fe      	b.n	800232c <Error_Handler+0x8>
	...

08002330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	607b      	str	r3, [r7, #4]
 800233a:	4b10      	ldr	r3, [pc, #64]	; (800237c <HAL_MspInit+0x4c>)
 800233c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233e:	4a0f      	ldr	r2, [pc, #60]	; (800237c <HAL_MspInit+0x4c>)
 8002340:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002344:	6453      	str	r3, [r2, #68]	; 0x44
 8002346:	4b0d      	ldr	r3, [pc, #52]	; (800237c <HAL_MspInit+0x4c>)
 8002348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800234e:	607b      	str	r3, [r7, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	603b      	str	r3, [r7, #0]
 8002356:	4b09      	ldr	r3, [pc, #36]	; (800237c <HAL_MspInit+0x4c>)
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	4a08      	ldr	r2, [pc, #32]	; (800237c <HAL_MspInit+0x4c>)
 800235c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002360:	6413      	str	r3, [r2, #64]	; 0x40
 8002362:	4b06      	ldr	r3, [pc, #24]	; (800237c <HAL_MspInit+0x4c>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236a:	603b      	str	r3, [r7, #0]
 800236c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	40023800 	.word	0x40023800

08002380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002384:	e7fe      	b.n	8002384 <NMI_Handler+0x4>

08002386 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002386:	b480      	push	{r7}
 8002388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800238a:	e7fe      	b.n	800238a <HardFault_Handler+0x4>

0800238c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002390:	e7fe      	b.n	8002390 <MemManage_Handler+0x4>

08002392 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002392:	b480      	push	{r7}
 8002394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002396:	e7fe      	b.n	8002396 <BusFault_Handler+0x4>

08002398 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800239c:	e7fe      	b.n	800239c <UsageFault_Handler+0x4>

0800239e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023b0:	bf00      	nop
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ba:	b480      	push	{r7}
 80023bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023cc:	f000 fca8 	bl	8002d20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  TASK_MANAGER_It_ms();
 80023d0:	f000 fbcc 	bl	8002b6c <TASK_MANAGER_It_ms>
  /* USER CODE END SysTick_IRQn 1 */
}
 80023d4:	bf00      	nop
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80023dc:	4802      	ldr	r0, [pc, #8]	; (80023e8 <DMA1_Stream0_IRQHandler+0x10>)
 80023de:	f000 ff8d 	bl	80032fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000c10 	.word	0x20000c10

080023ec <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80023f0:	4802      	ldr	r0, [pc, #8]	; (80023fc <DMA1_Stream2_IRQHandler+0x10>)
 80023f2:	f000 ff83 	bl	80032fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000cb8 	.word	0x20000cb8

08002400 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002404:	4802      	ldr	r0, [pc, #8]	; (8002410 <DMA1_Stream4_IRQHandler+0x10>)
 8002406:	f000 ff79 	bl	80032fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000e60 	.word	0x20000e60

08002414 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002418:	4802      	ldr	r0, [pc, #8]	; (8002424 <DMA1_Stream6_IRQHandler+0x10>)
 800241a:	f000 ff6f 	bl	80032fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20000b5c 	.word	0x20000b5c

08002428 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800242c:	4803      	ldr	r0, [pc, #12]	; (800243c <USART1_IRQHandler+0x14>)
 800242e:	f003 ff7f 	bl	8006330 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  UART_Idle_Line_Callback(uart_e1);
 8002432:	2000      	movs	r0, #0
 8002434:	f7fe ffea 	bl	800140c <UART_Idle_Line_Callback>
  /* USER CODE END USART1_IRQn 1 */
}
 8002438:	bf00      	nop
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20000dd8 	.word	0x20000dd8

08002440 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002444:	4803      	ldr	r0, [pc, #12]	; (8002454 <UART4_IRQHandler+0x14>)
 8002446:	f003 ff73 	bl	8006330 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  UART_Idle_Line_Callback(uart_e4);
 800244a:	2001      	movs	r0, #1
 800244c:	f7fe ffde 	bl	800140c <UART_Idle_Line_Callback>
  /* USER CODE END UART4_IRQn 1 */
}
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20000e1c 	.word	0x20000e1c

08002458 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800245c:	4802      	ldr	r0, [pc, #8]	; (8002468 <DMA2_Stream2_IRQHandler+0x10>)
 800245e:	f000 ff4d 	bl	80032fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20000d78 	.word	0x20000d78

0800246c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002470:	4802      	ldr	r0, [pc, #8]	; (800247c <DMA2_Stream7_IRQHandler+0x10>)
 8002472:	f000 ff43 	bl	80032fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20000d18 	.word	0x20000d18

08002480 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
	if(huart == &huart4)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a09      	ldr	r2, [pc, #36]	; (80024b0 <HAL_UART_TxCpltCallback+0x30>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d103      	bne.n	8002498 <HAL_UART_TxCpltCallback+0x18>
	{
		UART_Transfer_Complete_Callback(uart_e4);
 8002490:	2001      	movs	r0, #1
 8002492:	f7ff f809 	bl	80014a8 <UART_Transfer_Complete_Callback>
	}
	else if(huart == &huart1)
	{
		UART_Transfer_Complete_Callback(uart_e1 );
	}
}
 8002496:	e006      	b.n	80024a6 <HAL_UART_TxCpltCallback+0x26>
	else if(huart == &huart1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a06      	ldr	r2, [pc, #24]	; (80024b4 <HAL_UART_TxCpltCallback+0x34>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d102      	bne.n	80024a6 <HAL_UART_TxCpltCallback+0x26>
		UART_Transfer_Complete_Callback(uart_e1 );
 80024a0:	2000      	movs	r0, #0
 80024a2:	f7ff f801 	bl	80014a8 <UART_Transfer_Complete_Callback>
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000e1c 	.word	0x20000e1c
 80024b4:	20000dd8 	.word	0x20000dd8

080024b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024bc:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <SystemInit+0x20>)
 80024be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c2:	4a05      	ldr	r2, [pc, #20]	; (80024d8 <SystemInit+0x20>)
 80024c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024cc:	bf00      	nop
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08e      	sub	sp, #56	; 0x38
 80024e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	605a      	str	r2, [r3, #4]
 80024ec:	609a      	str	r2, [r3, #8]
 80024ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024f0:	f107 0320 	add.w	r3, r7, #32
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024fa:	1d3b      	adds	r3, r7, #4
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	609a      	str	r2, [r3, #8]
 8002504:	60da      	str	r2, [r3, #12]
 8002506:	611a      	str	r2, [r3, #16]
 8002508:	615a      	str	r2, [r3, #20]
 800250a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800250c:	4b3d      	ldr	r3, [pc, #244]	; (8002604 <MX_TIM3_Init+0x128>)
 800250e:	4a3e      	ldr	r2, [pc, #248]	; (8002608 <MX_TIM3_Init+0x12c>)
 8002510:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8002512:	4b3c      	ldr	r3, [pc, #240]	; (8002604 <MX_TIM3_Init+0x128>)
 8002514:	2253      	movs	r2, #83	; 0x53
 8002516:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002518:	4b3a      	ldr	r3, [pc, #232]	; (8002604 <MX_TIM3_Init+0x128>)
 800251a:	2200      	movs	r2, #0
 800251c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3999;
 800251e:	4b39      	ldr	r3, [pc, #228]	; (8002604 <MX_TIM3_Init+0x128>)
 8002520:	f640 729f 	movw	r2, #3999	; 0xf9f
 8002524:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002526:	4b37      	ldr	r3, [pc, #220]	; (8002604 <MX_TIM3_Init+0x128>)
 8002528:	2200      	movs	r2, #0
 800252a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800252c:	4b35      	ldr	r3, [pc, #212]	; (8002604 <MX_TIM3_Init+0x128>)
 800252e:	2280      	movs	r2, #128	; 0x80
 8002530:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002532:	4834      	ldr	r0, [pc, #208]	; (8002604 <MX_TIM3_Init+0x128>)
 8002534:	f002 ff0a 	bl	800534c <HAL_TIM_Base_Init>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800253e:	f7ff fef1 	bl	8002324 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002542:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002546:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002548:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800254c:	4619      	mov	r1, r3
 800254e:	482d      	ldr	r0, [pc, #180]	; (8002604 <MX_TIM3_Init+0x128>)
 8002550:	f003 f99e 	bl	8005890 <HAL_TIM_ConfigClockSource>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800255a:	f7ff fee3 	bl	8002324 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800255e:	4829      	ldr	r0, [pc, #164]	; (8002604 <MX_TIM3_Init+0x128>)
 8002560:	f002 ff43 	bl	80053ea <HAL_TIM_PWM_Init>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800256a:	f7ff fedb 	bl	8002324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800256e:	2300      	movs	r3, #0
 8002570:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002572:	2300      	movs	r3, #0
 8002574:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002576:	f107 0320 	add.w	r3, r7, #32
 800257a:	4619      	mov	r1, r3
 800257c:	4821      	ldr	r0, [pc, #132]	; (8002604 <MX_TIM3_Init+0x128>)
 800257e:	f003 fd5f 	bl	8006040 <HAL_TIMEx_MasterConfigSynchronization>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002588:	f7ff fecc 	bl	8002324 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800258c:	2360      	movs	r3, #96	; 0x60
 800258e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 999;
 8002590:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002594:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800259a:	2300      	movs	r3, #0
 800259c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800259e:	1d3b      	adds	r3, r7, #4
 80025a0:	2200      	movs	r2, #0
 80025a2:	4619      	mov	r1, r3
 80025a4:	4817      	ldr	r0, [pc, #92]	; (8002604 <MX_TIM3_Init+0x128>)
 80025a6:	f003 f8b1 	bl	800570c <HAL_TIM_PWM_ConfigChannel>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80025b0:	f7ff feb8 	bl	8002324 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025b4:	1d3b      	adds	r3, r7, #4
 80025b6:	2204      	movs	r2, #4
 80025b8:	4619      	mov	r1, r3
 80025ba:	4812      	ldr	r0, [pc, #72]	; (8002604 <MX_TIM3_Init+0x128>)
 80025bc:	f003 f8a6 	bl	800570c <HAL_TIM_PWM_ConfigChannel>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80025c6:	f7ff fead 	bl	8002324 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80025ca:	1d3b      	adds	r3, r7, #4
 80025cc:	2208      	movs	r2, #8
 80025ce:	4619      	mov	r1, r3
 80025d0:	480c      	ldr	r0, [pc, #48]	; (8002604 <MX_TIM3_Init+0x128>)
 80025d2:	f003 f89b 	bl	800570c <HAL_TIM_PWM_ConfigChannel>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80025dc:	f7ff fea2 	bl	8002324 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80025e0:	1d3b      	adds	r3, r7, #4
 80025e2:	220c      	movs	r2, #12
 80025e4:	4619      	mov	r1, r3
 80025e6:	4807      	ldr	r0, [pc, #28]	; (8002604 <MX_TIM3_Init+0x128>)
 80025e8:	f003 f890 	bl	800570c <HAL_TIM_PWM_ConfigChannel>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 80025f2:	f7ff fe97 	bl	8002324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80025f6:	4803      	ldr	r0, [pc, #12]	; (8002604 <MX_TIM3_Init+0x128>)
 80025f8:	f000 f82a 	bl	8002650 <HAL_TIM_MspPostInit>

}
 80025fc:	bf00      	nop
 80025fe:	3738      	adds	r7, #56	; 0x38
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	20000c70 	.word	0x20000c70
 8002608:	40000400 	.word	0x40000400

0800260c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a0b      	ldr	r2, [pc, #44]	; (8002648 <HAL_TIM_Base_MspInit+0x3c>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d10d      	bne.n	800263a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	4b0a      	ldr	r3, [pc, #40]	; (800264c <HAL_TIM_Base_MspInit+0x40>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	4a09      	ldr	r2, [pc, #36]	; (800264c <HAL_TIM_Base_MspInit+0x40>)
 8002628:	f043 0302 	orr.w	r3, r3, #2
 800262c:	6413      	str	r3, [r2, #64]	; 0x40
 800262e:	4b07      	ldr	r3, [pc, #28]	; (800264c <HAL_TIM_Base_MspInit+0x40>)
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800263a:	bf00      	nop
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	40000400 	.word	0x40000400
 800264c:	40023800 	.word	0x40023800

08002650 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b08a      	sub	sp, #40	; 0x28
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002658:	f107 0314 	add.w	r3, r7, #20
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	605a      	str	r2, [r3, #4]
 8002662:	609a      	str	r2, [r3, #8]
 8002664:	60da      	str	r2, [r3, #12]
 8002666:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a21      	ldr	r2, [pc, #132]	; (80026f4 <HAL_TIM_MspPostInit+0xa4>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d13b      	bne.n	80026ea <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	4b20      	ldr	r3, [pc, #128]	; (80026f8 <HAL_TIM_MspPostInit+0xa8>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	4a1f      	ldr	r2, [pc, #124]	; (80026f8 <HAL_TIM_MspPostInit+0xa8>)
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	6313      	str	r3, [r2, #48]	; 0x30
 8002682:	4b1d      	ldr	r3, [pc, #116]	; (80026f8 <HAL_TIM_MspPostInit+0xa8>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	4b19      	ldr	r3, [pc, #100]	; (80026f8 <HAL_TIM_MspPostInit+0xa8>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	4a18      	ldr	r2, [pc, #96]	; (80026f8 <HAL_TIM_MspPostInit+0xa8>)
 8002698:	f043 0302 	orr.w	r3, r3, #2
 800269c:	6313      	str	r3, [r2, #48]	; 0x30
 800269e:	4b16      	ldr	r3, [pc, #88]	; (80026f8 <HAL_TIM_MspPostInit+0xa8>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026aa:	23c0      	movs	r3, #192	; 0xc0
 80026ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ae:	2302      	movs	r3, #2
 80026b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b6:	2300      	movs	r3, #0
 80026b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026ba:	2302      	movs	r3, #2
 80026bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026be:	f107 0314 	add.w	r3, r7, #20
 80026c2:	4619      	mov	r1, r3
 80026c4:	480d      	ldr	r0, [pc, #52]	; (80026fc <HAL_TIM_MspPostInit+0xac>)
 80026c6:	f001 f883 	bl	80037d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026ca:	2303      	movs	r3, #3
 80026cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ce:	2302      	movs	r3, #2
 80026d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d2:	2300      	movs	r3, #0
 80026d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d6:	2300      	movs	r3, #0
 80026d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026da:	2302      	movs	r3, #2
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026de:	f107 0314 	add.w	r3, r7, #20
 80026e2:	4619      	mov	r1, r3
 80026e4:	4806      	ldr	r0, [pc, #24]	; (8002700 <HAL_TIM_MspPostInit+0xb0>)
 80026e6:	f001 f873 	bl	80037d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80026ea:	bf00      	nop
 80026ec:	3728      	adds	r7, #40	; 0x28
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40000400 	.word	0x40000400
 80026f8:	40023800 	.word	0x40023800
 80026fc:	40020000 	.word	0x40020000
 8002700:	40020400 	.word	0x40020400

08002704 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart1_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002708:	4b11      	ldr	r3, [pc, #68]	; (8002750 <MX_UART4_Init+0x4c>)
 800270a:	4a12      	ldr	r2, [pc, #72]	; (8002754 <MX_UART4_Init+0x50>)
 800270c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800270e:	4b10      	ldr	r3, [pc, #64]	; (8002750 <MX_UART4_Init+0x4c>)
 8002710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002714:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002716:	4b0e      	ldr	r3, [pc, #56]	; (8002750 <MX_UART4_Init+0x4c>)
 8002718:	2200      	movs	r2, #0
 800271a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800271c:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <MX_UART4_Init+0x4c>)
 800271e:	2200      	movs	r2, #0
 8002720:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002722:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <MX_UART4_Init+0x4c>)
 8002724:	2200      	movs	r2, #0
 8002726:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002728:	4b09      	ldr	r3, [pc, #36]	; (8002750 <MX_UART4_Init+0x4c>)
 800272a:	220c      	movs	r2, #12
 800272c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800272e:	4b08      	ldr	r3, [pc, #32]	; (8002750 <MX_UART4_Init+0x4c>)
 8002730:	2200      	movs	r2, #0
 8002732:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002734:	4b06      	ldr	r3, [pc, #24]	; (8002750 <MX_UART4_Init+0x4c>)
 8002736:	2200      	movs	r2, #0
 8002738:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800273a:	4805      	ldr	r0, [pc, #20]	; (8002750 <MX_UART4_Init+0x4c>)
 800273c:	f003 fcfc 	bl	8006138 <HAL_UART_Init>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002746:	f7ff fded 	bl	8002324 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20000e1c 	.word	0x20000e1c
 8002754:	40004c00 	.word	0x40004c00

08002758 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800275c:	4b11      	ldr	r3, [pc, #68]	; (80027a4 <MX_USART1_UART_Init+0x4c>)
 800275e:	4a12      	ldr	r2, [pc, #72]	; (80027a8 <MX_USART1_UART_Init+0x50>)
 8002760:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8002762:	4b10      	ldr	r3, [pc, #64]	; (80027a4 <MX_USART1_UART_Init+0x4c>)
 8002764:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8002768:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800276a:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <MX_USART1_UART_Init+0x4c>)
 800276c:	2200      	movs	r2, #0
 800276e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002770:	4b0c      	ldr	r3, [pc, #48]	; (80027a4 <MX_USART1_UART_Init+0x4c>)
 8002772:	2200      	movs	r2, #0
 8002774:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002776:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <MX_USART1_UART_Init+0x4c>)
 8002778:	2200      	movs	r2, #0
 800277a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800277c:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <MX_USART1_UART_Init+0x4c>)
 800277e:	220c      	movs	r2, #12
 8002780:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002782:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <MX_USART1_UART_Init+0x4c>)
 8002784:	2200      	movs	r2, #0
 8002786:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002788:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <MX_USART1_UART_Init+0x4c>)
 800278a:	2200      	movs	r2, #0
 800278c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800278e:	4805      	ldr	r0, [pc, #20]	; (80027a4 <MX_USART1_UART_Init+0x4c>)
 8002790:	f003 fcd2 	bl	8006138 <HAL_UART_Init>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800279a:	f7ff fdc3 	bl	8002324 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000dd8 	.word	0x20000dd8
 80027a8:	40011000 	.word	0x40011000

080027ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b08c      	sub	sp, #48	; 0x30
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b4:	f107 031c 	add.w	r3, r7, #28
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	60da      	str	r2, [r3, #12]
 80027c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a98      	ldr	r2, [pc, #608]	; (8002a2c <HAL_UART_MspInit+0x280>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	f040 8092 	bne.w	80028f4 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80027d0:	2300      	movs	r3, #0
 80027d2:	61bb      	str	r3, [r7, #24]
 80027d4:	4b96      	ldr	r3, [pc, #600]	; (8002a30 <HAL_UART_MspInit+0x284>)
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	4a95      	ldr	r2, [pc, #596]	; (8002a30 <HAL_UART_MspInit+0x284>)
 80027da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80027de:	6413      	str	r3, [r2, #64]	; 0x40
 80027e0:	4b93      	ldr	r3, [pc, #588]	; (8002a30 <HAL_UART_MspInit+0x284>)
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027e8:	61bb      	str	r3, [r7, #24]
 80027ea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	4b8f      	ldr	r3, [pc, #572]	; (8002a30 <HAL_UART_MspInit+0x284>)
 80027f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f4:	4a8e      	ldr	r2, [pc, #568]	; (8002a30 <HAL_UART_MspInit+0x284>)
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	6313      	str	r3, [r2, #48]	; 0x30
 80027fc:	4b8c      	ldr	r3, [pc, #560]	; (8002a30 <HAL_UART_MspInit+0x284>)
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002808:	2303      	movs	r3, #3
 800280a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280c:	2302      	movs	r3, #2
 800280e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002810:	2300      	movs	r3, #0
 8002812:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002814:	2303      	movs	r3, #3
 8002816:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002818:	2308      	movs	r3, #8
 800281a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800281c:	f107 031c 	add.w	r3, r7, #28
 8002820:	4619      	mov	r1, r3
 8002822:	4884      	ldr	r0, [pc, #528]	; (8002a34 <HAL_UART_MspInit+0x288>)
 8002824:	f000 ffd4 	bl	80037d0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8002828:	4b83      	ldr	r3, [pc, #524]	; (8002a38 <HAL_UART_MspInit+0x28c>)
 800282a:	4a84      	ldr	r2, [pc, #528]	; (8002a3c <HAL_UART_MspInit+0x290>)
 800282c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800282e:	4b82      	ldr	r3, [pc, #520]	; (8002a38 <HAL_UART_MspInit+0x28c>)
 8002830:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002834:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002836:	4b80      	ldr	r3, [pc, #512]	; (8002a38 <HAL_UART_MspInit+0x28c>)
 8002838:	2200      	movs	r2, #0
 800283a:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800283c:	4b7e      	ldr	r3, [pc, #504]	; (8002a38 <HAL_UART_MspInit+0x28c>)
 800283e:	2200      	movs	r2, #0
 8002840:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002842:	4b7d      	ldr	r3, [pc, #500]	; (8002a38 <HAL_UART_MspInit+0x28c>)
 8002844:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002848:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800284a:	4b7b      	ldr	r3, [pc, #492]	; (8002a38 <HAL_UART_MspInit+0x28c>)
 800284c:	2200      	movs	r2, #0
 800284e:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002850:	4b79      	ldr	r3, [pc, #484]	; (8002a38 <HAL_UART_MspInit+0x28c>)
 8002852:	2200      	movs	r2, #0
 8002854:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8002856:	4b78      	ldr	r3, [pc, #480]	; (8002a38 <HAL_UART_MspInit+0x28c>)
 8002858:	f44f 7280 	mov.w	r2, #256	; 0x100
 800285c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800285e:	4b76      	ldr	r3, [pc, #472]	; (8002a38 <HAL_UART_MspInit+0x28c>)
 8002860:	2200      	movs	r2, #0
 8002862:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002864:	4b74      	ldr	r3, [pc, #464]	; (8002a38 <HAL_UART_MspInit+0x28c>)
 8002866:	2200      	movs	r2, #0
 8002868:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800286a:	4873      	ldr	r0, [pc, #460]	; (8002a38 <HAL_UART_MspInit+0x28c>)
 800286c:	f000 fbae 	bl	8002fcc <HAL_DMA_Init>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002876:	f7ff fd55 	bl	8002324 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a6e      	ldr	r2, [pc, #440]	; (8002a38 <HAL_UART_MspInit+0x28c>)
 800287e:	639a      	str	r2, [r3, #56]	; 0x38
 8002880:	4a6d      	ldr	r2, [pc, #436]	; (8002a38 <HAL_UART_MspInit+0x28c>)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8002886:	4b6e      	ldr	r3, [pc, #440]	; (8002a40 <HAL_UART_MspInit+0x294>)
 8002888:	4a6e      	ldr	r2, [pc, #440]	; (8002a44 <HAL_UART_MspInit+0x298>)
 800288a:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800288c:	4b6c      	ldr	r3, [pc, #432]	; (8002a40 <HAL_UART_MspInit+0x294>)
 800288e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002892:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002894:	4b6a      	ldr	r3, [pc, #424]	; (8002a40 <HAL_UART_MspInit+0x294>)
 8002896:	2240      	movs	r2, #64	; 0x40
 8002898:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800289a:	4b69      	ldr	r3, [pc, #420]	; (8002a40 <HAL_UART_MspInit+0x294>)
 800289c:	2200      	movs	r2, #0
 800289e:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028a0:	4b67      	ldr	r3, [pc, #412]	; (8002a40 <HAL_UART_MspInit+0x294>)
 80028a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028a6:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028a8:	4b65      	ldr	r3, [pc, #404]	; (8002a40 <HAL_UART_MspInit+0x294>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028ae:	4b64      	ldr	r3, [pc, #400]	; (8002a40 <HAL_UART_MspInit+0x294>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80028b4:	4b62      	ldr	r3, [pc, #392]	; (8002a40 <HAL_UART_MspInit+0x294>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028ba:	4b61      	ldr	r3, [pc, #388]	; (8002a40 <HAL_UART_MspInit+0x294>)
 80028bc:	2200      	movs	r2, #0
 80028be:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028c0:	4b5f      	ldr	r3, [pc, #380]	; (8002a40 <HAL_UART_MspInit+0x294>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80028c6:	485e      	ldr	r0, [pc, #376]	; (8002a40 <HAL_UART_MspInit+0x294>)
 80028c8:	f000 fb80 	bl	8002fcc <HAL_DMA_Init>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80028d2:	f7ff fd27 	bl	8002324 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a59      	ldr	r2, [pc, #356]	; (8002a40 <HAL_UART_MspInit+0x294>)
 80028da:	635a      	str	r2, [r3, #52]	; 0x34
 80028dc:	4a58      	ldr	r2, [pc, #352]	; (8002a40 <HAL_UART_MspInit+0x294>)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80028e2:	2200      	movs	r2, #0
 80028e4:	2100      	movs	r1, #0
 80028e6:	2034      	movs	r0, #52	; 0x34
 80028e8:	f000 fb39 	bl	8002f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80028ec:	2034      	movs	r0, #52	; 0x34
 80028ee:	f000 fb52 	bl	8002f96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80028f2:	e096      	b.n	8002a22 <HAL_UART_MspInit+0x276>
  else if(uartHandle->Instance==USART1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a53      	ldr	r2, [pc, #332]	; (8002a48 <HAL_UART_MspInit+0x29c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	f040 8091 	bne.w	8002a22 <HAL_UART_MspInit+0x276>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002900:	2300      	movs	r3, #0
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	4b4a      	ldr	r3, [pc, #296]	; (8002a30 <HAL_UART_MspInit+0x284>)
 8002906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002908:	4a49      	ldr	r2, [pc, #292]	; (8002a30 <HAL_UART_MspInit+0x284>)
 800290a:	f043 0310 	orr.w	r3, r3, #16
 800290e:	6453      	str	r3, [r2, #68]	; 0x44
 8002910:	4b47      	ldr	r3, [pc, #284]	; (8002a30 <HAL_UART_MspInit+0x284>)
 8002912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002914:	f003 0310 	and.w	r3, r3, #16
 8002918:	613b      	str	r3, [r7, #16]
 800291a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800291c:	2300      	movs	r3, #0
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	4b43      	ldr	r3, [pc, #268]	; (8002a30 <HAL_UART_MspInit+0x284>)
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002924:	4a42      	ldr	r2, [pc, #264]	; (8002a30 <HAL_UART_MspInit+0x284>)
 8002926:	f043 0302 	orr.w	r3, r3, #2
 800292a:	6313      	str	r3, [r2, #48]	; 0x30
 800292c:	4b40      	ldr	r3, [pc, #256]	; (8002a30 <HAL_UART_MspInit+0x284>)
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002938:	23c0      	movs	r3, #192	; 0xc0
 800293a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293c:	2302      	movs	r3, #2
 800293e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	2300      	movs	r3, #0
 8002942:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002944:	2303      	movs	r3, #3
 8002946:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002948:	2307      	movs	r3, #7
 800294a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800294c:	f107 031c 	add.w	r3, r7, #28
 8002950:	4619      	mov	r1, r3
 8002952:	483e      	ldr	r0, [pc, #248]	; (8002a4c <HAL_UART_MspInit+0x2a0>)
 8002954:	f000 ff3c 	bl	80037d0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002958:	4b3d      	ldr	r3, [pc, #244]	; (8002a50 <HAL_UART_MspInit+0x2a4>)
 800295a:	4a3e      	ldr	r2, [pc, #248]	; (8002a54 <HAL_UART_MspInit+0x2a8>)
 800295c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800295e:	4b3c      	ldr	r3, [pc, #240]	; (8002a50 <HAL_UART_MspInit+0x2a4>)
 8002960:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002964:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002966:	4b3a      	ldr	r3, [pc, #232]	; (8002a50 <HAL_UART_MspInit+0x2a4>)
 8002968:	2200      	movs	r2, #0
 800296a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800296c:	4b38      	ldr	r3, [pc, #224]	; (8002a50 <HAL_UART_MspInit+0x2a4>)
 800296e:	2200      	movs	r2, #0
 8002970:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002972:	4b37      	ldr	r3, [pc, #220]	; (8002a50 <HAL_UART_MspInit+0x2a4>)
 8002974:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002978:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800297a:	4b35      	ldr	r3, [pc, #212]	; (8002a50 <HAL_UART_MspInit+0x2a4>)
 800297c:	2200      	movs	r2, #0
 800297e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002980:	4b33      	ldr	r3, [pc, #204]	; (8002a50 <HAL_UART_MspInit+0x2a4>)
 8002982:	2200      	movs	r2, #0
 8002984:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002986:	4b32      	ldr	r3, [pc, #200]	; (8002a50 <HAL_UART_MspInit+0x2a4>)
 8002988:	f44f 7280 	mov.w	r2, #256	; 0x100
 800298c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800298e:	4b30      	ldr	r3, [pc, #192]	; (8002a50 <HAL_UART_MspInit+0x2a4>)
 8002990:	2200      	movs	r2, #0
 8002992:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002994:	4b2e      	ldr	r3, [pc, #184]	; (8002a50 <HAL_UART_MspInit+0x2a4>)
 8002996:	2200      	movs	r2, #0
 8002998:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800299a:	482d      	ldr	r0, [pc, #180]	; (8002a50 <HAL_UART_MspInit+0x2a4>)
 800299c:	f000 fb16 	bl	8002fcc <HAL_DMA_Init>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <HAL_UART_MspInit+0x1fe>
      Error_Handler();
 80029a6:	f7ff fcbd 	bl	8002324 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a28      	ldr	r2, [pc, #160]	; (8002a50 <HAL_UART_MspInit+0x2a4>)
 80029ae:	639a      	str	r2, [r3, #56]	; 0x38
 80029b0:	4a27      	ldr	r2, [pc, #156]	; (8002a50 <HAL_UART_MspInit+0x2a4>)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80029b6:	4b28      	ldr	r3, [pc, #160]	; (8002a58 <HAL_UART_MspInit+0x2ac>)
 80029b8:	4a28      	ldr	r2, [pc, #160]	; (8002a5c <HAL_UART_MspInit+0x2b0>)
 80029ba:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80029bc:	4b26      	ldr	r3, [pc, #152]	; (8002a58 <HAL_UART_MspInit+0x2ac>)
 80029be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029c2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029c4:	4b24      	ldr	r3, [pc, #144]	; (8002a58 <HAL_UART_MspInit+0x2ac>)
 80029c6:	2240      	movs	r2, #64	; 0x40
 80029c8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029ca:	4b23      	ldr	r3, [pc, #140]	; (8002a58 <HAL_UART_MspInit+0x2ac>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029d0:	4b21      	ldr	r3, [pc, #132]	; (8002a58 <HAL_UART_MspInit+0x2ac>)
 80029d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029d6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029d8:	4b1f      	ldr	r3, [pc, #124]	; (8002a58 <HAL_UART_MspInit+0x2ac>)
 80029da:	2200      	movs	r2, #0
 80029dc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029de:	4b1e      	ldr	r3, [pc, #120]	; (8002a58 <HAL_UART_MspInit+0x2ac>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80029e4:	4b1c      	ldr	r3, [pc, #112]	; (8002a58 <HAL_UART_MspInit+0x2ac>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029ea:	4b1b      	ldr	r3, [pc, #108]	; (8002a58 <HAL_UART_MspInit+0x2ac>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029f0:	4b19      	ldr	r3, [pc, #100]	; (8002a58 <HAL_UART_MspInit+0x2ac>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80029f6:	4818      	ldr	r0, [pc, #96]	; (8002a58 <HAL_UART_MspInit+0x2ac>)
 80029f8:	f000 fae8 	bl	8002fcc <HAL_DMA_Init>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <HAL_UART_MspInit+0x25a>
      Error_Handler();
 8002a02:	f7ff fc8f 	bl	8002324 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a13      	ldr	r2, [pc, #76]	; (8002a58 <HAL_UART_MspInit+0x2ac>)
 8002a0a:	635a      	str	r2, [r3, #52]	; 0x34
 8002a0c:	4a12      	ldr	r2, [pc, #72]	; (8002a58 <HAL_UART_MspInit+0x2ac>)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a12:	2200      	movs	r2, #0
 8002a14:	2100      	movs	r1, #0
 8002a16:	2025      	movs	r0, #37	; 0x25
 8002a18:	f000 faa1 	bl	8002f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a1c:	2025      	movs	r0, #37	; 0x25
 8002a1e:	f000 faba 	bl	8002f96 <HAL_NVIC_EnableIRQ>
}
 8002a22:	bf00      	nop
 8002a24:	3730      	adds	r7, #48	; 0x30
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40004c00 	.word	0x40004c00
 8002a30:	40023800 	.word	0x40023800
 8002a34:	40020000 	.word	0x40020000
 8002a38:	20000cb8 	.word	0x20000cb8
 8002a3c:	40026040 	.word	0x40026040
 8002a40:	20000e60 	.word	0x20000e60
 8002a44:	40026070 	.word	0x40026070
 8002a48:	40011000 	.word	0x40011000
 8002a4c:	40020400 	.word	0x40020400
 8002a50:	20000d78 	.word	0x20000d78
 8002a54:	40026440 	.word	0x40026440
 8002a58:	20000d18 	.word	0x20000d18
 8002a5c:	400264b8 	.word	0x400264b8

08002a60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002a60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a64:	480d      	ldr	r0, [pc, #52]	; (8002a9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a66:	490e      	ldr	r1, [pc, #56]	; (8002aa0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a68:	4a0e      	ldr	r2, [pc, #56]	; (8002aa4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a6c:	e002      	b.n	8002a74 <LoopCopyDataInit>

08002a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a72:	3304      	adds	r3, #4

08002a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a78:	d3f9      	bcc.n	8002a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a7a:	4a0b      	ldr	r2, [pc, #44]	; (8002aa8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a7c:	4c0b      	ldr	r4, [pc, #44]	; (8002aac <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a80:	e001      	b.n	8002a86 <LoopFillZerobss>

08002a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a84:	3204      	adds	r2, #4

08002a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a88:	d3fb      	bcc.n	8002a82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a8a:	f7ff fd15 	bl	80024b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a8e:	f004 fc8f 	bl	80073b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a92:	f7ff fb85 	bl	80021a0 <main>
  bx  lr    
 8002a96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002aa0:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8002aa4:	08008624 	.word	0x08008624
  ldr r2, =_sbss
 8002aa8:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8002aac:	20000ec4 	.word	0x20000ec4

08002ab0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ab0:	e7fe      	b.n	8002ab0 <ADC_IRQHandler>
	...

08002ab4 <TASK_MANAGER_Init>:
static task_t task[MAX_NUMBER_OF_TASK] = { 0 };
static bool_e is_initialized = FALSE;
static uint8_t task_count = 0;

void TASK_MANAGER_Init(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
	for(uint8_t t = 0; t < task_count; t++)
 8002aba:	2300      	movs	r3, #0
 8002abc:	71fb      	strb	r3, [r7, #7]
 8002abe:	e017      	b.n	8002af0 <TASK_MANAGER_Init+0x3c>
	{
		if(task[t].init.call)
 8002ac0:	79fa      	ldrb	r2, [r7, #7]
 8002ac2:	4911      	ldr	r1, [pc, #68]	; (8002b08 <TASK_MANAGER_Init+0x54>)
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	1a9b      	subs	r3, r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	440b      	add	r3, r1
 8002ace:	3308      	adds	r3, #8
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d009      	beq.n	8002aea <TASK_MANAGER_Init+0x36>
		{
			task[t].init.call();
 8002ad6:	79fa      	ldrb	r2, [r7, #7]
 8002ad8:	490b      	ldr	r1, [pc, #44]	; (8002b08 <TASK_MANAGER_Init+0x54>)
 8002ada:	4613      	mov	r3, r2
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	1a9b      	subs	r3, r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	440b      	add	r3, r1
 8002ae4:	3308      	adds	r3, #8
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4798      	blx	r3
	for(uint8_t t = 0; t < task_count; t++)
 8002aea:	79fb      	ldrb	r3, [r7, #7]
 8002aec:	3301      	adds	r3, #1
 8002aee:	71fb      	strb	r3, [r7, #7]
 8002af0:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <TASK_MANAGER_Init+0x58>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	79fa      	ldrb	r2, [r7, #7]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d3e2      	bcc.n	8002ac0 <TASK_MANAGER_Init+0xc>
		}
	}
	is_initialized = TRUE;
 8002afa:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <TASK_MANAGER_Init+0x5c>)
 8002afc:	2201      	movs	r2, #1
 8002afe:	701a      	strb	r2, [r3, #0]
}
 8002b00:	bf00      	nop
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	20000a40 	.word	0x20000a40
 8002b0c:	20000b59 	.word	0x20000b59
 8002b10:	20000b58 	.word	0x20000b58

08002b14 <TASK_MANAGER_Main>:


void TASK_MANAGER_Main(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
	for(uint8_t t = 0; t < task_count; t++)
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	71fb      	strb	r3, [r7, #7]
 8002b1e:	e017      	b.n	8002b50 <TASK_MANAGER_Main+0x3c>
	{
		if(task[t].main.call)
 8002b20:	79fa      	ldrb	r2, [r7, #7]
 8002b22:	4910      	ldr	r1, [pc, #64]	; (8002b64 <TASK_MANAGER_Main+0x50>)
 8002b24:	4613      	mov	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	1a9b      	subs	r3, r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	440b      	add	r3, r1
 8002b2e:	3318      	adds	r3, #24
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d009      	beq.n	8002b4a <TASK_MANAGER_Main+0x36>
		{
			task[t].main.call();
 8002b36:	79fa      	ldrb	r2, [r7, #7]
 8002b38:	490a      	ldr	r1, [pc, #40]	; (8002b64 <TASK_MANAGER_Main+0x50>)
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	1a9b      	subs	r3, r3, r2
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	440b      	add	r3, r1
 8002b44:	3318      	adds	r3, #24
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4798      	blx	r3
	for(uint8_t t = 0; t < task_count; t++)
 8002b4a:	79fb      	ldrb	r3, [r7, #7]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	71fb      	strb	r3, [r7, #7]
 8002b50:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <TASK_MANAGER_Main+0x54>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	79fa      	ldrb	r2, [r7, #7]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d3e2      	bcc.n	8002b20 <TASK_MANAGER_Main+0xc>
		}
	}
}
 8002b5a:	bf00      	nop
 8002b5c:	bf00      	nop
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	20000a40 	.word	0x20000a40
 8002b68:	20000b59 	.word	0x20000b59

08002b6c <TASK_MANAGER_It_ms>:

void TASK_MANAGER_It_ms(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
	if(!is_initialized)
 8002b72:	4b14      	ldr	r3, [pc, #80]	; (8002bc4 <TASK_MANAGER_It_ms+0x58>)
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d020      	beq.n	8002bbc <TASK_MANAGER_It_ms+0x50>
	{
		return;
	}
	for(uint8_t t = 0; t < task_count; t++)
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	71fb      	strb	r3, [r7, #7]
 8002b7e:	e017      	b.n	8002bb0 <TASK_MANAGER_It_ms+0x44>
	{
		if(task[t].it.call)
 8002b80:	79fa      	ldrb	r2, [r7, #7]
 8002b82:	4911      	ldr	r1, [pc, #68]	; (8002bc8 <TASK_MANAGER_It_ms+0x5c>)
 8002b84:	4613      	mov	r3, r2
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	1a9b      	subs	r3, r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	440b      	add	r3, r1
 8002b8e:	3328      	adds	r3, #40	; 0x28
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d009      	beq.n	8002baa <TASK_MANAGER_It_ms+0x3e>
		{
			task[t].it.call();
 8002b96:	79fa      	ldrb	r2, [r7, #7]
 8002b98:	490b      	ldr	r1, [pc, #44]	; (8002bc8 <TASK_MANAGER_It_ms+0x5c>)
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	1a9b      	subs	r3, r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	440b      	add	r3, r1
 8002ba4:	3328      	adds	r3, #40	; 0x28
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4798      	blx	r3
	for(uint8_t t = 0; t < task_count; t++)
 8002baa:	79fb      	ldrb	r3, [r7, #7]
 8002bac:	3301      	adds	r3, #1
 8002bae:	71fb      	strb	r3, [r7, #7]
 8002bb0:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <TASK_MANAGER_It_ms+0x60>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	79fa      	ldrb	r2, [r7, #7]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d3e2      	bcc.n	8002b80 <TASK_MANAGER_It_ms+0x14>
 8002bba:	e000      	b.n	8002bbe <TASK_MANAGER_It_ms+0x52>
		return;
 8002bbc:	bf00      	nop
		}
	}
}
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	20000b58 	.word	0x20000b58
 8002bc8:	20000a40 	.word	0x20000a40
 8002bcc:	20000b59 	.word	0x20000b59

08002bd0 <TASK_MANAGER_Add_Task>:

void TASK_MANAGER_Add_Task(char * name, void(*init)(void), void(*main)(void), void(*it)(void))
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
 8002bdc:	603b      	str	r3, [r7, #0]
	if(task_count == MAX_NUMBER_OF_TASK)
 8002bde:	4b25      	ldr	r3, [pc, #148]	; (8002c74 <TASK_MANAGER_Add_Task+0xa4>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b05      	cmp	r3, #5
 8002be4:	d03f      	beq.n	8002c66 <TASK_MANAGER_Add_Task+0x96>
	{
		return;
	}
	task[task_count].name = name;
 8002be6:	4b23      	ldr	r3, [pc, #140]	; (8002c74 <TASK_MANAGER_Add_Task+0xa4>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	4619      	mov	r1, r3
 8002bec:	4a22      	ldr	r2, [pc, #136]	; (8002c78 <TASK_MANAGER_Add_Task+0xa8>)
 8002bee:	460b      	mov	r3, r1
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	1a5b      	subs	r3, r3, r1
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	601a      	str	r2, [r3, #0]
	task[task_count].name_len = sizeof(name) - 1;
 8002bfc:	4b1d      	ldr	r3, [pc, #116]	; (8002c74 <TASK_MANAGER_Add_Task+0xa4>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	4619      	mov	r1, r3
 8002c02:	4a1d      	ldr	r2, [pc, #116]	; (8002c78 <TASK_MANAGER_Add_Task+0xa8>)
 8002c04:	460b      	mov	r3, r1
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	1a5b      	subs	r3, r3, r1
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	4413      	add	r3, r2
 8002c0e:	3304      	adds	r3, #4
 8002c10:	2203      	movs	r2, #3
 8002c12:	701a      	strb	r2, [r3, #0]
	task[task_count].init.call = init;
 8002c14:	4b17      	ldr	r3, [pc, #92]	; (8002c74 <TASK_MANAGER_Add_Task+0xa4>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4a17      	ldr	r2, [pc, #92]	; (8002c78 <TASK_MANAGER_Add_Task+0xa8>)
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	1a5b      	subs	r3, r3, r1
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	4413      	add	r3, r2
 8002c26:	3308      	adds	r3, #8
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	601a      	str	r2, [r3, #0]
	task[task_count].main.call = main;
 8002c2c:	4b11      	ldr	r3, [pc, #68]	; (8002c74 <TASK_MANAGER_Add_Task+0xa4>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	4619      	mov	r1, r3
 8002c32:	4a11      	ldr	r2, [pc, #68]	; (8002c78 <TASK_MANAGER_Add_Task+0xa8>)
 8002c34:	460b      	mov	r3, r1
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	1a5b      	subs	r3, r3, r1
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	4413      	add	r3, r2
 8002c3e:	3318      	adds	r3, #24
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	601a      	str	r2, [r3, #0]
	task[task_count++].it.call = it;
 8002c44:	4b0b      	ldr	r3, [pc, #44]	; (8002c74 <TASK_MANAGER_Add_Task+0xa4>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	1c5a      	adds	r2, r3, #1
 8002c4a:	b2d1      	uxtb	r1, r2
 8002c4c:	4a09      	ldr	r2, [pc, #36]	; (8002c74 <TASK_MANAGER_Add_Task+0xa4>)
 8002c4e:	7011      	strb	r1, [r2, #0]
 8002c50:	4619      	mov	r1, r3
 8002c52:	4a09      	ldr	r2, [pc, #36]	; (8002c78 <TASK_MANAGER_Add_Task+0xa8>)
 8002c54:	460b      	mov	r3, r1
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	1a5b      	subs	r3, r3, r1
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3328      	adds	r3, #40	; 0x28
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	e000      	b.n	8002c68 <TASK_MANAGER_Add_Task+0x98>
		return;
 8002c66:	bf00      	nop
}
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	20000b59 	.word	0x20000b59
 8002c78:	20000a40 	.word	0x20000a40

08002c7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c80:	4b0e      	ldr	r3, [pc, #56]	; (8002cbc <HAL_Init+0x40>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a0d      	ldr	r2, [pc, #52]	; (8002cbc <HAL_Init+0x40>)
 8002c86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <HAL_Init+0x40>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a0a      	ldr	r2, [pc, #40]	; (8002cbc <HAL_Init+0x40>)
 8002c92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c98:	4b08      	ldr	r3, [pc, #32]	; (8002cbc <HAL_Init+0x40>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a07      	ldr	r2, [pc, #28]	; (8002cbc <HAL_Init+0x40>)
 8002c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ca4:	2003      	movs	r0, #3
 8002ca6:	f000 f94f 	bl	8002f48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002caa:	200f      	movs	r0, #15
 8002cac:	f000 f808 	bl	8002cc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cb0:	f7ff fb3e 	bl	8002330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40023c00 	.word	0x40023c00

08002cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cc8:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <HAL_InitTick+0x54>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	4b12      	ldr	r3, [pc, #72]	; (8002d18 <HAL_InitTick+0x58>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 f967 	bl	8002fb2 <HAL_SYSTICK_Config>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e00e      	b.n	8002d0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b0f      	cmp	r3, #15
 8002cf2:	d80a      	bhi.n	8002d0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cfc:	f000 f92f 	bl	8002f5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d00:	4a06      	ldr	r2, [pc, #24]	; (8002d1c <HAL_InitTick+0x5c>)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
 8002d08:	e000      	b.n	8002d0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	20000088 	.word	0x20000088
 8002d18:	20000090 	.word	0x20000090
 8002d1c:	2000008c 	.word	0x2000008c

08002d20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d24:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <HAL_IncTick+0x20>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	461a      	mov	r2, r3
 8002d2a:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <HAL_IncTick+0x24>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4413      	add	r3, r2
 8002d30:	4a04      	ldr	r2, [pc, #16]	; (8002d44 <HAL_IncTick+0x24>)
 8002d32:	6013      	str	r3, [r2, #0]
}
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	20000090 	.word	0x20000090
 8002d44:	20000ec0 	.word	0x20000ec0

08002d48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d4c:	4b03      	ldr	r3, [pc, #12]	; (8002d5c <HAL_GetTick+0x14>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	20000ec0 	.word	0x20000ec0

08002d60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d68:	f7ff ffee 	bl	8002d48 <HAL_GetTick>
 8002d6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d78:	d005      	beq.n	8002d86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d7a:	4b0a      	ldr	r3, [pc, #40]	; (8002da4 <HAL_Delay+0x44>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4413      	add	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d86:	bf00      	nop
 8002d88:	f7ff ffde 	bl	8002d48 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d8f7      	bhi.n	8002d88 <HAL_Delay+0x28>
  {
  }
}
 8002d98:	bf00      	nop
 8002d9a:	bf00      	nop
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	20000090 	.word	0x20000090

08002da8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002db8:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <__NVIC_SetPriorityGrouping+0x44>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dda:	4a04      	ldr	r2, [pc, #16]	; (8002dec <__NVIC_SetPriorityGrouping+0x44>)
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	60d3      	str	r3, [r2, #12]
}
 8002de0:	bf00      	nop
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	e000ed00 	.word	0xe000ed00

08002df0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002df4:	4b04      	ldr	r3, [pc, #16]	; (8002e08 <__NVIC_GetPriorityGrouping+0x18>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	0a1b      	lsrs	r3, r3, #8
 8002dfa:	f003 0307 	and.w	r3, r3, #7
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	e000ed00 	.word	0xe000ed00

08002e0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	4603      	mov	r3, r0
 8002e14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	db0b      	blt.n	8002e36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
 8002e20:	f003 021f 	and.w	r2, r3, #31
 8002e24:	4907      	ldr	r1, [pc, #28]	; (8002e44 <__NVIC_EnableIRQ+0x38>)
 8002e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2a:	095b      	lsrs	r3, r3, #5
 8002e2c:	2001      	movs	r0, #1
 8002e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	e000e100 	.word	0xe000e100

08002e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	6039      	str	r1, [r7, #0]
 8002e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	db0a      	blt.n	8002e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	490c      	ldr	r1, [pc, #48]	; (8002e94 <__NVIC_SetPriority+0x4c>)
 8002e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e66:	0112      	lsls	r2, r2, #4
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e70:	e00a      	b.n	8002e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	4908      	ldr	r1, [pc, #32]	; (8002e98 <__NVIC_SetPriority+0x50>)
 8002e78:	79fb      	ldrb	r3, [r7, #7]
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	3b04      	subs	r3, #4
 8002e80:	0112      	lsls	r2, r2, #4
 8002e82:	b2d2      	uxtb	r2, r2
 8002e84:	440b      	add	r3, r1
 8002e86:	761a      	strb	r2, [r3, #24]
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	e000e100 	.word	0xe000e100
 8002e98:	e000ed00 	.word	0xe000ed00

08002e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b089      	sub	sp, #36	; 0x24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	f1c3 0307 	rsb	r3, r3, #7
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	bf28      	it	cs
 8002eba:	2304      	movcs	r3, #4
 8002ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	2b06      	cmp	r3, #6
 8002ec4:	d902      	bls.n	8002ecc <NVIC_EncodePriority+0x30>
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	3b03      	subs	r3, #3
 8002eca:	e000      	b.n	8002ece <NVIC_EncodePriority+0x32>
 8002ecc:	2300      	movs	r3, #0
 8002ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	43da      	mvns	r2, r3
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	401a      	ands	r2, r3
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	fa01 f303 	lsl.w	r3, r1, r3
 8002eee:	43d9      	mvns	r1, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef4:	4313      	orrs	r3, r2
         );
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3724      	adds	r7, #36	; 0x24
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
	...

08002f04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f14:	d301      	bcc.n	8002f1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f16:	2301      	movs	r3, #1
 8002f18:	e00f      	b.n	8002f3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f1a:	4a0a      	ldr	r2, [pc, #40]	; (8002f44 <SysTick_Config+0x40>)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f22:	210f      	movs	r1, #15
 8002f24:	f04f 30ff 	mov.w	r0, #4294967295
 8002f28:	f7ff ff8e 	bl	8002e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f2c:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <SysTick_Config+0x40>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f32:	4b04      	ldr	r3, [pc, #16]	; (8002f44 <SysTick_Config+0x40>)
 8002f34:	2207      	movs	r2, #7
 8002f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	e000e010 	.word	0xe000e010

08002f48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f7ff ff29 	bl	8002da8 <__NVIC_SetPriorityGrouping>
}
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b086      	sub	sp, #24
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	4603      	mov	r3, r0
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	607a      	str	r2, [r7, #4]
 8002f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f70:	f7ff ff3e 	bl	8002df0 <__NVIC_GetPriorityGrouping>
 8002f74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	68b9      	ldr	r1, [r7, #8]
 8002f7a:	6978      	ldr	r0, [r7, #20]
 8002f7c:	f7ff ff8e 	bl	8002e9c <NVIC_EncodePriority>
 8002f80:	4602      	mov	r2, r0
 8002f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f86:	4611      	mov	r1, r2
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff ff5d 	bl	8002e48 <__NVIC_SetPriority>
}
 8002f8e:	bf00      	nop
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b082      	sub	sp, #8
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff ff31 	bl	8002e0c <__NVIC_EnableIRQ>
}
 8002faa:	bf00      	nop
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b082      	sub	sp, #8
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7ff ffa2 	bl	8002f04 <SysTick_Config>
 8002fc0:	4603      	mov	r3, r0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
	...

08002fcc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002fd8:	f7ff feb6 	bl	8002d48 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e099      	b.n	800311c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2202      	movs	r2, #2
 8002fec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0201 	bic.w	r2, r2, #1
 8003006:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003008:	e00f      	b.n	800302a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800300a:	f7ff fe9d 	bl	8002d48 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b05      	cmp	r3, #5
 8003016:	d908      	bls.n	800302a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2220      	movs	r2, #32
 800301c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2203      	movs	r2, #3
 8003022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e078      	b.n	800311c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1e8      	bne.n	800300a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	4b38      	ldr	r3, [pc, #224]	; (8003124 <HAL_DMA_Init+0x158>)
 8003044:	4013      	ands	r3, r2
 8003046:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003056:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003062:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800306e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	4313      	orrs	r3, r2
 800307a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003080:	2b04      	cmp	r3, #4
 8003082:	d107      	bne.n	8003094 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308c:	4313      	orrs	r3, r2
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	4313      	orrs	r3, r2
 8003092:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	f023 0307 	bic.w	r3, r3, #7
 80030aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	d117      	bne.n	80030ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00e      	beq.n	80030ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 fb01 	bl	80036d8 <DMA_CheckFifoParam>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d008      	beq.n	80030ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2240      	movs	r2, #64	; 0x40
 80030e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80030ea:	2301      	movs	r3, #1
 80030ec:	e016      	b.n	800311c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 fab8 	bl	800366c <DMA_CalcBaseAndBitshift>
 80030fc:	4603      	mov	r3, r0
 80030fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003104:	223f      	movs	r2, #63	; 0x3f
 8003106:	409a      	lsls	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3718      	adds	r7, #24
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	f010803f 	.word	0xf010803f

08003128 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
 8003134:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003136:	2300      	movs	r3, #0
 8003138:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003146:	2b01      	cmp	r3, #1
 8003148:	d101      	bne.n	800314e <HAL_DMA_Start_IT+0x26>
 800314a:	2302      	movs	r3, #2
 800314c:	e040      	b.n	80031d0 <HAL_DMA_Start_IT+0xa8>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b01      	cmp	r3, #1
 8003160:	d12f      	bne.n	80031c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2202      	movs	r2, #2
 8003166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	68b9      	ldr	r1, [r7, #8]
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 fa4a 	bl	8003610 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003180:	223f      	movs	r2, #63	; 0x3f
 8003182:	409a      	lsls	r2, r3
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0216 	orr.w	r2, r2, #22
 8003196:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	2b00      	cmp	r3, #0
 800319e:	d007      	beq.n	80031b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 0208 	orr.w	r2, r2, #8
 80031ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0201 	orr.w	r2, r2, #1
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	e005      	b.n	80031ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031ca:	2302      	movs	r3, #2
 80031cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80031ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031e6:	f7ff fdaf 	bl	8002d48 <HAL_GetTick>
 80031ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d008      	beq.n	800320a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2280      	movs	r2, #128	; 0x80
 80031fc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e052      	b.n	80032b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0216 	bic.w	r2, r2, #22
 8003218:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	695a      	ldr	r2, [r3, #20]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003228:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	2b00      	cmp	r3, #0
 8003230:	d103      	bne.n	800323a <HAL_DMA_Abort+0x62>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003236:	2b00      	cmp	r3, #0
 8003238:	d007      	beq.n	800324a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 0208 	bic.w	r2, r2, #8
 8003248:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0201 	bic.w	r2, r2, #1
 8003258:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800325a:	e013      	b.n	8003284 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800325c:	f7ff fd74 	bl	8002d48 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b05      	cmp	r3, #5
 8003268:	d90c      	bls.n	8003284 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2220      	movs	r2, #32
 800326e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2203      	movs	r2, #3
 8003274:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e015      	b.n	80032b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1e4      	bne.n	800325c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003296:	223f      	movs	r2, #63	; 0x3f
 8003298:	409a      	lsls	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d004      	beq.n	80032d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2280      	movs	r2, #128	; 0x80
 80032d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e00c      	b.n	80032f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2205      	movs	r2, #5
 80032da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 0201 	bic.w	r2, r2, #1
 80032ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003304:	2300      	movs	r3, #0
 8003306:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003308:	4b92      	ldr	r3, [pc, #584]	; (8003554 <HAL_DMA_IRQHandler+0x258>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a92      	ldr	r2, [pc, #584]	; (8003558 <HAL_DMA_IRQHandler+0x25c>)
 800330e:	fba2 2303 	umull	r2, r3, r2, r3
 8003312:	0a9b      	lsrs	r3, r3, #10
 8003314:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003326:	2208      	movs	r2, #8
 8003328:	409a      	lsls	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	4013      	ands	r3, r2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d01a      	beq.n	8003368 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b00      	cmp	r3, #0
 800333e:	d013      	beq.n	8003368 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0204 	bic.w	r2, r2, #4
 800334e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003354:	2208      	movs	r2, #8
 8003356:	409a      	lsls	r2, r3
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003360:	f043 0201 	orr.w	r2, r3, #1
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336c:	2201      	movs	r2, #1
 800336e:	409a      	lsls	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	4013      	ands	r3, r2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d012      	beq.n	800339e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00b      	beq.n	800339e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338a:	2201      	movs	r2, #1
 800338c:	409a      	lsls	r2, r3
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003396:	f043 0202 	orr.w	r2, r3, #2
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a2:	2204      	movs	r2, #4
 80033a4:	409a      	lsls	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	4013      	ands	r3, r2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d012      	beq.n	80033d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00b      	beq.n	80033d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c0:	2204      	movs	r2, #4
 80033c2:	409a      	lsls	r2, r3
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033cc:	f043 0204 	orr.w	r2, r3, #4
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d8:	2210      	movs	r2, #16
 80033da:	409a      	lsls	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	4013      	ands	r3, r2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d043      	beq.n	800346c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d03c      	beq.n	800346c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f6:	2210      	movs	r2, #16
 80033f8:	409a      	lsls	r2, r3
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d018      	beq.n	800343e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d108      	bne.n	800342c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	2b00      	cmp	r3, #0
 8003420:	d024      	beq.n	800346c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	4798      	blx	r3
 800342a:	e01f      	b.n	800346c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003430:	2b00      	cmp	r3, #0
 8003432:	d01b      	beq.n	800346c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	4798      	blx	r3
 800343c:	e016      	b.n	800346c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003448:	2b00      	cmp	r3, #0
 800344a:	d107      	bne.n	800345c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0208 	bic.w	r2, r2, #8
 800345a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003470:	2220      	movs	r2, #32
 8003472:	409a      	lsls	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	4013      	ands	r3, r2
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 808e 	beq.w	800359a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0310 	and.w	r3, r3, #16
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 8086 	beq.w	800359a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003492:	2220      	movs	r2, #32
 8003494:	409a      	lsls	r2, r3
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b05      	cmp	r3, #5
 80034a4:	d136      	bne.n	8003514 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0216 	bic.w	r2, r2, #22
 80034b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	695a      	ldr	r2, [r3, #20]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d103      	bne.n	80034d6 <HAL_DMA_IRQHandler+0x1da>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d007      	beq.n	80034e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0208 	bic.w	r2, r2, #8
 80034e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ea:	223f      	movs	r2, #63	; 0x3f
 80034ec:	409a      	lsls	r2, r3
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003506:	2b00      	cmp	r3, #0
 8003508:	d07d      	beq.n	8003606 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	4798      	blx	r3
        }
        return;
 8003512:	e078      	b.n	8003606 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d01c      	beq.n	800355c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d108      	bne.n	8003542 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003534:	2b00      	cmp	r3, #0
 8003536:	d030      	beq.n	800359a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	4798      	blx	r3
 8003540:	e02b      	b.n	800359a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003546:	2b00      	cmp	r3, #0
 8003548:	d027      	beq.n	800359a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	4798      	blx	r3
 8003552:	e022      	b.n	800359a <HAL_DMA_IRQHandler+0x29e>
 8003554:	20000088 	.word	0x20000088
 8003558:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10f      	bne.n	800358a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 0210 	bic.w	r2, r2, #16
 8003578:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d032      	beq.n	8003608 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d022      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2205      	movs	r2, #5
 80035b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0201 	bic.w	r2, r2, #1
 80035c4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	3301      	adds	r3, #1
 80035ca:	60bb      	str	r3, [r7, #8]
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d307      	bcc.n	80035e2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1f2      	bne.n	80035c6 <HAL_DMA_IRQHandler+0x2ca>
 80035e0:	e000      	b.n	80035e4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80035e2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d005      	beq.n	8003608 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	4798      	blx	r3
 8003604:	e000      	b.n	8003608 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003606:	bf00      	nop
    }
  }
}
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop

08003610 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
 800361c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800362c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	2b40      	cmp	r3, #64	; 0x40
 800363c:	d108      	bne.n	8003650 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800364e:	e007      	b.n	8003660 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	60da      	str	r2, [r3, #12]
}
 8003660:	bf00      	nop
 8003662:	3714      	adds	r7, #20
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	b2db      	uxtb	r3, r3
 800367a:	3b10      	subs	r3, #16
 800367c:	4a14      	ldr	r2, [pc, #80]	; (80036d0 <DMA_CalcBaseAndBitshift+0x64>)
 800367e:	fba2 2303 	umull	r2, r3, r2, r3
 8003682:	091b      	lsrs	r3, r3, #4
 8003684:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003686:	4a13      	ldr	r2, [pc, #76]	; (80036d4 <DMA_CalcBaseAndBitshift+0x68>)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4413      	add	r3, r2
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	461a      	mov	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2b03      	cmp	r3, #3
 8003698:	d909      	bls.n	80036ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036a2:	f023 0303 	bic.w	r3, r3, #3
 80036a6:	1d1a      	adds	r2, r3, #4
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	659a      	str	r2, [r3, #88]	; 0x58
 80036ac:	e007      	b.n	80036be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036b6:	f023 0303 	bic.w	r3, r3, #3
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	aaaaaaab 	.word	0xaaaaaaab
 80036d4:	08008238 	.word	0x08008238

080036d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036e0:	2300      	movs	r3, #0
 80036e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d11f      	bne.n	8003732 <DMA_CheckFifoParam+0x5a>
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	2b03      	cmp	r3, #3
 80036f6:	d856      	bhi.n	80037a6 <DMA_CheckFifoParam+0xce>
 80036f8:	a201      	add	r2, pc, #4	; (adr r2, 8003700 <DMA_CheckFifoParam+0x28>)
 80036fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fe:	bf00      	nop
 8003700:	08003711 	.word	0x08003711
 8003704:	08003723 	.word	0x08003723
 8003708:	08003711 	.word	0x08003711
 800370c:	080037a7 	.word	0x080037a7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003714:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d046      	beq.n	80037aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003720:	e043      	b.n	80037aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003726:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800372a:	d140      	bne.n	80037ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003730:	e03d      	b.n	80037ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800373a:	d121      	bne.n	8003780 <DMA_CheckFifoParam+0xa8>
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2b03      	cmp	r3, #3
 8003740:	d837      	bhi.n	80037b2 <DMA_CheckFifoParam+0xda>
 8003742:	a201      	add	r2, pc, #4	; (adr r2, 8003748 <DMA_CheckFifoParam+0x70>)
 8003744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003748:	08003759 	.word	0x08003759
 800374c:	0800375f 	.word	0x0800375f
 8003750:	08003759 	.word	0x08003759
 8003754:	08003771 	.word	0x08003771
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	73fb      	strb	r3, [r7, #15]
      break;
 800375c:	e030      	b.n	80037c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003762:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d025      	beq.n	80037b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800376e:	e022      	b.n	80037b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003774:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003778:	d11f      	bne.n	80037ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800377e:	e01c      	b.n	80037ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	2b02      	cmp	r3, #2
 8003784:	d903      	bls.n	800378e <DMA_CheckFifoParam+0xb6>
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2b03      	cmp	r3, #3
 800378a:	d003      	beq.n	8003794 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800378c:	e018      	b.n	80037c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	73fb      	strb	r3, [r7, #15]
      break;
 8003792:	e015      	b.n	80037c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003798:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00e      	beq.n	80037be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	73fb      	strb	r3, [r7, #15]
      break;
 80037a4:	e00b      	b.n	80037be <DMA_CheckFifoParam+0xe6>
      break;
 80037a6:	bf00      	nop
 80037a8:	e00a      	b.n	80037c0 <DMA_CheckFifoParam+0xe8>
      break;
 80037aa:	bf00      	nop
 80037ac:	e008      	b.n	80037c0 <DMA_CheckFifoParam+0xe8>
      break;
 80037ae:	bf00      	nop
 80037b0:	e006      	b.n	80037c0 <DMA_CheckFifoParam+0xe8>
      break;
 80037b2:	bf00      	nop
 80037b4:	e004      	b.n	80037c0 <DMA_CheckFifoParam+0xe8>
      break;
 80037b6:	bf00      	nop
 80037b8:	e002      	b.n	80037c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80037ba:	bf00      	nop
 80037bc:	e000      	b.n	80037c0 <DMA_CheckFifoParam+0xe8>
      break;
 80037be:	bf00      	nop
    }
  } 
  
  return status; 
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3714      	adds	r7, #20
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop

080037d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b089      	sub	sp, #36	; 0x24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037de:	2300      	movs	r3, #0
 80037e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037e2:	2300      	movs	r3, #0
 80037e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037e6:	2300      	movs	r3, #0
 80037e8:	61fb      	str	r3, [r7, #28]
 80037ea:	e16b      	b.n	8003ac4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037ec:	2201      	movs	r2, #1
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	4013      	ands	r3, r2
 80037fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	429a      	cmp	r2, r3
 8003806:	f040 815a 	bne.w	8003abe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	2b01      	cmp	r3, #1
 8003814:	d005      	beq.n	8003822 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800381e:	2b02      	cmp	r3, #2
 8003820:	d130      	bne.n	8003884 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	2203      	movs	r2, #3
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	43db      	mvns	r3, r3
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	4013      	ands	r3, r2
 8003838:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	4313      	orrs	r3, r2
 800384a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003858:	2201      	movs	r2, #1
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	43db      	mvns	r3, r3
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	4013      	ands	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	091b      	lsrs	r3, r3, #4
 800386e:	f003 0201 	and.w	r2, r3, #1
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	4313      	orrs	r3, r2
 800387c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f003 0303 	and.w	r3, r3, #3
 800388c:	2b03      	cmp	r3, #3
 800388e:	d017      	beq.n	80038c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	2203      	movs	r2, #3
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	43db      	mvns	r3, r3
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4013      	ands	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f003 0303 	and.w	r3, r3, #3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d123      	bne.n	8003914 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	08da      	lsrs	r2, r3, #3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3208      	adds	r2, #8
 80038d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	220f      	movs	r2, #15
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	43db      	mvns	r3, r3
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	4013      	ands	r3, r2
 80038ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	691a      	ldr	r2, [r3, #16]
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4313      	orrs	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	08da      	lsrs	r2, r3, #3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	3208      	adds	r2, #8
 800390e:	69b9      	ldr	r1, [r7, #24]
 8003910:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	2203      	movs	r2, #3
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	43db      	mvns	r3, r3
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	4013      	ands	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f003 0203 	and.w	r2, r3, #3
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	4313      	orrs	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003950:	2b00      	cmp	r3, #0
 8003952:	f000 80b4 	beq.w	8003abe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003956:	2300      	movs	r3, #0
 8003958:	60fb      	str	r3, [r7, #12]
 800395a:	4b60      	ldr	r3, [pc, #384]	; (8003adc <HAL_GPIO_Init+0x30c>)
 800395c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395e:	4a5f      	ldr	r2, [pc, #380]	; (8003adc <HAL_GPIO_Init+0x30c>)
 8003960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003964:	6453      	str	r3, [r2, #68]	; 0x44
 8003966:	4b5d      	ldr	r3, [pc, #372]	; (8003adc <HAL_GPIO_Init+0x30c>)
 8003968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003972:	4a5b      	ldr	r2, [pc, #364]	; (8003ae0 <HAL_GPIO_Init+0x310>)
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	089b      	lsrs	r3, r3, #2
 8003978:	3302      	adds	r3, #2
 800397a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800397e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f003 0303 	and.w	r3, r3, #3
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	220f      	movs	r2, #15
 800398a:	fa02 f303 	lsl.w	r3, r2, r3
 800398e:	43db      	mvns	r3, r3
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	4013      	ands	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a52      	ldr	r2, [pc, #328]	; (8003ae4 <HAL_GPIO_Init+0x314>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d02b      	beq.n	80039f6 <HAL_GPIO_Init+0x226>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a51      	ldr	r2, [pc, #324]	; (8003ae8 <HAL_GPIO_Init+0x318>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d025      	beq.n	80039f2 <HAL_GPIO_Init+0x222>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a50      	ldr	r2, [pc, #320]	; (8003aec <HAL_GPIO_Init+0x31c>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d01f      	beq.n	80039ee <HAL_GPIO_Init+0x21e>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a4f      	ldr	r2, [pc, #316]	; (8003af0 <HAL_GPIO_Init+0x320>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d019      	beq.n	80039ea <HAL_GPIO_Init+0x21a>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a4e      	ldr	r2, [pc, #312]	; (8003af4 <HAL_GPIO_Init+0x324>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d013      	beq.n	80039e6 <HAL_GPIO_Init+0x216>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a4d      	ldr	r2, [pc, #308]	; (8003af8 <HAL_GPIO_Init+0x328>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00d      	beq.n	80039e2 <HAL_GPIO_Init+0x212>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a4c      	ldr	r2, [pc, #304]	; (8003afc <HAL_GPIO_Init+0x32c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d007      	beq.n	80039de <HAL_GPIO_Init+0x20e>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a4b      	ldr	r2, [pc, #300]	; (8003b00 <HAL_GPIO_Init+0x330>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d101      	bne.n	80039da <HAL_GPIO_Init+0x20a>
 80039d6:	2307      	movs	r3, #7
 80039d8:	e00e      	b.n	80039f8 <HAL_GPIO_Init+0x228>
 80039da:	2308      	movs	r3, #8
 80039dc:	e00c      	b.n	80039f8 <HAL_GPIO_Init+0x228>
 80039de:	2306      	movs	r3, #6
 80039e0:	e00a      	b.n	80039f8 <HAL_GPIO_Init+0x228>
 80039e2:	2305      	movs	r3, #5
 80039e4:	e008      	b.n	80039f8 <HAL_GPIO_Init+0x228>
 80039e6:	2304      	movs	r3, #4
 80039e8:	e006      	b.n	80039f8 <HAL_GPIO_Init+0x228>
 80039ea:	2303      	movs	r3, #3
 80039ec:	e004      	b.n	80039f8 <HAL_GPIO_Init+0x228>
 80039ee:	2302      	movs	r3, #2
 80039f0:	e002      	b.n	80039f8 <HAL_GPIO_Init+0x228>
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <HAL_GPIO_Init+0x228>
 80039f6:	2300      	movs	r3, #0
 80039f8:	69fa      	ldr	r2, [r7, #28]
 80039fa:	f002 0203 	and.w	r2, r2, #3
 80039fe:	0092      	lsls	r2, r2, #2
 8003a00:	4093      	lsls	r3, r2
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a08:	4935      	ldr	r1, [pc, #212]	; (8003ae0 <HAL_GPIO_Init+0x310>)
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	089b      	lsrs	r3, r3, #2
 8003a0e:	3302      	adds	r3, #2
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a16:	4b3b      	ldr	r3, [pc, #236]	; (8003b04 <HAL_GPIO_Init+0x334>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	43db      	mvns	r3, r3
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	4013      	ands	r3, r2
 8003a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a3a:	4a32      	ldr	r2, [pc, #200]	; (8003b04 <HAL_GPIO_Init+0x334>)
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a40:	4b30      	ldr	r3, [pc, #192]	; (8003b04 <HAL_GPIO_Init+0x334>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	43db      	mvns	r3, r3
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a64:	4a27      	ldr	r2, [pc, #156]	; (8003b04 <HAL_GPIO_Init+0x334>)
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a6a:	4b26      	ldr	r3, [pc, #152]	; (8003b04 <HAL_GPIO_Init+0x334>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	43db      	mvns	r3, r3
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	4013      	ands	r3, r2
 8003a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a8e:	4a1d      	ldr	r2, [pc, #116]	; (8003b04 <HAL_GPIO_Init+0x334>)
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a94:	4b1b      	ldr	r3, [pc, #108]	; (8003b04 <HAL_GPIO_Init+0x334>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ab8:	4a12      	ldr	r2, [pc, #72]	; (8003b04 <HAL_GPIO_Init+0x334>)
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	61fb      	str	r3, [r7, #28]
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	2b0f      	cmp	r3, #15
 8003ac8:	f67f ae90 	bls.w	80037ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003acc:	bf00      	nop
 8003ace:	bf00      	nop
 8003ad0:	3724      	adds	r7, #36	; 0x24
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	40013800 	.word	0x40013800
 8003ae4:	40020000 	.word	0x40020000
 8003ae8:	40020400 	.word	0x40020400
 8003aec:	40020800 	.word	0x40020800
 8003af0:	40020c00 	.word	0x40020c00
 8003af4:	40021000 	.word	0x40021000
 8003af8:	40021400 	.word	0x40021400
 8003afc:	40021800 	.word	0x40021800
 8003b00:	40021c00 	.word	0x40021c00
 8003b04:	40013c00 	.word	0x40013c00

08003b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	807b      	strh	r3, [r7, #2]
 8003b14:	4613      	mov	r3, r2
 8003b16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b18:	787b      	ldrb	r3, [r7, #1]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b1e:	887a      	ldrh	r2, [r7, #2]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b24:	e003      	b.n	8003b2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b26:	887b      	ldrh	r3, [r7, #2]
 8003b28:	041a      	lsls	r2, r3, #16
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	619a      	str	r2, [r3, #24]
}
 8003b2e:	bf00      	nop
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
	...

08003b3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e12b      	b.n	8003da6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d106      	bne.n	8003b68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f7fe fa6e 	bl	8002044 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2224      	movs	r2, #36	; 0x24
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 0201 	bic.w	r2, r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ba0:	f001 fbac 	bl	80052fc <HAL_RCC_GetPCLK1Freq>
 8003ba4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	4a81      	ldr	r2, [pc, #516]	; (8003db0 <HAL_I2C_Init+0x274>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d807      	bhi.n	8003bc0 <HAL_I2C_Init+0x84>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4a80      	ldr	r2, [pc, #512]	; (8003db4 <HAL_I2C_Init+0x278>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	bf94      	ite	ls
 8003bb8:	2301      	movls	r3, #1
 8003bba:	2300      	movhi	r3, #0
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	e006      	b.n	8003bce <HAL_I2C_Init+0x92>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4a7d      	ldr	r2, [pc, #500]	; (8003db8 <HAL_I2C_Init+0x27c>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	bf94      	ite	ls
 8003bc8:	2301      	movls	r3, #1
 8003bca:	2300      	movhi	r3, #0
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e0e7      	b.n	8003da6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	4a78      	ldr	r2, [pc, #480]	; (8003dbc <HAL_I2C_Init+0x280>)
 8003bda:	fba2 2303 	umull	r2, r3, r2, r3
 8003bde:	0c9b      	lsrs	r3, r3, #18
 8003be0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	4a6a      	ldr	r2, [pc, #424]	; (8003db0 <HAL_I2C_Init+0x274>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d802      	bhi.n	8003c10 <HAL_I2C_Init+0xd4>
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	e009      	b.n	8003c24 <HAL_I2C_Init+0xe8>
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c16:	fb02 f303 	mul.w	r3, r2, r3
 8003c1a:	4a69      	ldr	r2, [pc, #420]	; (8003dc0 <HAL_I2C_Init+0x284>)
 8003c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c20:	099b      	lsrs	r3, r3, #6
 8003c22:	3301      	adds	r3, #1
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6812      	ldr	r2, [r2, #0]
 8003c28:	430b      	orrs	r3, r1
 8003c2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c36:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	495c      	ldr	r1, [pc, #368]	; (8003db0 <HAL_I2C_Init+0x274>)
 8003c40:	428b      	cmp	r3, r1
 8003c42:	d819      	bhi.n	8003c78 <HAL_I2C_Init+0x13c>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	1e59      	subs	r1, r3, #1
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c52:	1c59      	adds	r1, r3, #1
 8003c54:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c58:	400b      	ands	r3, r1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00a      	beq.n	8003c74 <HAL_I2C_Init+0x138>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	1e59      	subs	r1, r3, #1
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c72:	e051      	b.n	8003d18 <HAL_I2C_Init+0x1dc>
 8003c74:	2304      	movs	r3, #4
 8003c76:	e04f      	b.n	8003d18 <HAL_I2C_Init+0x1dc>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d111      	bne.n	8003ca4 <HAL_I2C_Init+0x168>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	1e58      	subs	r0, r3, #1
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6859      	ldr	r1, [r3, #4]
 8003c88:	460b      	mov	r3, r1
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	440b      	add	r3, r1
 8003c8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c92:	3301      	adds	r3, #1
 8003c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	bf0c      	ite	eq
 8003c9c:	2301      	moveq	r3, #1
 8003c9e:	2300      	movne	r3, #0
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	e012      	b.n	8003cca <HAL_I2C_Init+0x18e>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	1e58      	subs	r0, r3, #1
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6859      	ldr	r1, [r3, #4]
 8003cac:	460b      	mov	r3, r1
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	440b      	add	r3, r1
 8003cb2:	0099      	lsls	r1, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cba:	3301      	adds	r3, #1
 8003cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	bf0c      	ite	eq
 8003cc4:	2301      	moveq	r3, #1
 8003cc6:	2300      	movne	r3, #0
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <HAL_I2C_Init+0x196>
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e022      	b.n	8003d18 <HAL_I2C_Init+0x1dc>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10e      	bne.n	8003cf8 <HAL_I2C_Init+0x1bc>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	1e58      	subs	r0, r3, #1
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6859      	ldr	r1, [r3, #4]
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	440b      	add	r3, r1
 8003ce8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cec:	3301      	adds	r3, #1
 8003cee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cf6:	e00f      	b.n	8003d18 <HAL_I2C_Init+0x1dc>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	1e58      	subs	r0, r3, #1
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6859      	ldr	r1, [r3, #4]
 8003d00:	460b      	mov	r3, r1
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	440b      	add	r3, r1
 8003d06:	0099      	lsls	r1, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d0e:	3301      	adds	r3, #1
 8003d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d18:	6879      	ldr	r1, [r7, #4]
 8003d1a:	6809      	ldr	r1, [r1, #0]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	69da      	ldr	r2, [r3, #28]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	431a      	orrs	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	6911      	ldr	r1, [r2, #16]
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	68d2      	ldr	r2, [r2, #12]
 8003d52:	4311      	orrs	r1, r2
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	6812      	ldr	r2, [r2, #0]
 8003d58:	430b      	orrs	r3, r1
 8003d5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	695a      	ldr	r2, [r3, #20]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f042 0201 	orr.w	r2, r2, #1
 8003d86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2220      	movs	r2, #32
 8003d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	000186a0 	.word	0x000186a0
 8003db4:	001e847f 	.word	0x001e847f
 8003db8:	003d08ff 	.word	0x003d08ff
 8003dbc:	431bde83 	.word	0x431bde83
 8003dc0:	10624dd3 	.word	0x10624dd3

08003dc4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b088      	sub	sp, #32
 8003dc8:	af02      	add	r7, sp, #8
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	4608      	mov	r0, r1
 8003dce:	4611      	mov	r1, r2
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	817b      	strh	r3, [r7, #10]
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	813b      	strh	r3, [r7, #8]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003dde:	f7fe ffb3 	bl	8002d48 <HAL_GetTick>
 8003de2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b20      	cmp	r3, #32
 8003dee:	f040 80d9 	bne.w	8003fa4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	2319      	movs	r3, #25
 8003df8:	2201      	movs	r2, #1
 8003dfa:	496d      	ldr	r1, [pc, #436]	; (8003fb0 <HAL_I2C_Mem_Write+0x1ec>)
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f000 fc7f 	bl	8004700 <I2C_WaitOnFlagUntilTimeout>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003e08:	2302      	movs	r3, #2
 8003e0a:	e0cc      	b.n	8003fa6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d101      	bne.n	8003e1a <HAL_I2C_Mem_Write+0x56>
 8003e16:	2302      	movs	r3, #2
 8003e18:	e0c5      	b.n	8003fa6 <HAL_I2C_Mem_Write+0x1e2>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d007      	beq.n	8003e40 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f042 0201 	orr.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2221      	movs	r2, #33	; 0x21
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2240      	movs	r2, #64	; 0x40
 8003e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6a3a      	ldr	r2, [r7, #32]
 8003e6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4a4d      	ldr	r2, [pc, #308]	; (8003fb4 <HAL_I2C_Mem_Write+0x1f0>)
 8003e80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e82:	88f8      	ldrh	r0, [r7, #6]
 8003e84:	893a      	ldrh	r2, [r7, #8]
 8003e86:	8979      	ldrh	r1, [r7, #10]
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	9301      	str	r3, [sp, #4]
 8003e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	4603      	mov	r3, r0
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 fab6 	bl	8004404 <I2C_RequestMemoryWrite>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d052      	beq.n	8003f44 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e081      	b.n	8003fa6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f000 fd00 	bl	80048ac <I2C_WaitOnTXEFlagUntilTimeout>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00d      	beq.n	8003ece <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	2b04      	cmp	r3, #4
 8003eb8:	d107      	bne.n	8003eca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ec8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e06b      	b.n	8003fa6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	781a      	ldrb	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ede:	1c5a      	adds	r2, r3, #1
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	2b04      	cmp	r3, #4
 8003f0a:	d11b      	bne.n	8003f44 <HAL_I2C_Mem_Write+0x180>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d017      	beq.n	8003f44 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	781a      	ldrb	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	1c5a      	adds	r2, r3, #1
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1aa      	bne.n	8003ea2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 fcec 	bl	800492e <I2C_WaitOnBTFFlagUntilTimeout>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00d      	beq.n	8003f78 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f60:	2b04      	cmp	r3, #4
 8003f62:	d107      	bne.n	8003f74 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f72:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e016      	b.n	8003fa6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	e000      	b.n	8003fa6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003fa4:	2302      	movs	r3, #2
  }
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3718      	adds	r7, #24
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	00100002 	.word	0x00100002
 8003fb4:	ffff0000 	.word	0xffff0000

08003fb8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b08c      	sub	sp, #48	; 0x30
 8003fbc:	af02      	add	r7, sp, #8
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	4608      	mov	r0, r1
 8003fc2:	4611      	mov	r1, r2
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	817b      	strh	r3, [r7, #10]
 8003fca:	460b      	mov	r3, r1
 8003fcc:	813b      	strh	r3, [r7, #8]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fd2:	f7fe feb9 	bl	8002d48 <HAL_GetTick>
 8003fd6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b20      	cmp	r3, #32
 8003fe2:	f040 8208 	bne.w	80043f6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	2319      	movs	r3, #25
 8003fec:	2201      	movs	r2, #1
 8003fee:	497b      	ldr	r1, [pc, #492]	; (80041dc <HAL_I2C_Mem_Read+0x224>)
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 fb85 	bl	8004700 <I2C_WaitOnFlagUntilTimeout>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	e1fb      	b.n	80043f8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004006:	2b01      	cmp	r3, #1
 8004008:	d101      	bne.n	800400e <HAL_I2C_Mem_Read+0x56>
 800400a:	2302      	movs	r3, #2
 800400c:	e1f4      	b.n	80043f8 <HAL_I2C_Mem_Read+0x440>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	2b01      	cmp	r3, #1
 8004022:	d007      	beq.n	8004034 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0201 	orr.w	r2, r2, #1
 8004032:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004042:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2222      	movs	r2, #34	; 0x22
 8004048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2240      	movs	r2, #64	; 0x40
 8004050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800405e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004064:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406a:	b29a      	uxth	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	4a5b      	ldr	r2, [pc, #364]	; (80041e0 <HAL_I2C_Mem_Read+0x228>)
 8004074:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004076:	88f8      	ldrh	r0, [r7, #6]
 8004078:	893a      	ldrh	r2, [r7, #8]
 800407a:	8979      	ldrh	r1, [r7, #10]
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	9301      	str	r3, [sp, #4]
 8004080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	4603      	mov	r3, r0
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f000 fa52 	bl	8004530 <I2C_RequestMemoryRead>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e1b0      	b.n	80043f8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800409a:	2b00      	cmp	r3, #0
 800409c:	d113      	bne.n	80040c6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800409e:	2300      	movs	r3, #0
 80040a0:	623b      	str	r3, [r7, #32]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	623b      	str	r3, [r7, #32]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	623b      	str	r3, [r7, #32]
 80040b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	e184      	b.n	80043d0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d11b      	bne.n	8004106 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040de:	2300      	movs	r3, #0
 80040e0:	61fb      	str	r3, [r7, #28]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	61fb      	str	r3, [r7, #28]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	61fb      	str	r3, [r7, #28]
 80040f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	e164      	b.n	80043d0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800410a:	2b02      	cmp	r3, #2
 800410c:	d11b      	bne.n	8004146 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800411c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800412c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800412e:	2300      	movs	r3, #0
 8004130:	61bb      	str	r3, [r7, #24]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	61bb      	str	r3, [r7, #24]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	61bb      	str	r3, [r7, #24]
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	e144      	b.n	80043d0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004146:	2300      	movs	r3, #0
 8004148:	617b      	str	r3, [r7, #20]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	617b      	str	r3, [r7, #20]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	617b      	str	r3, [r7, #20]
 800415a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800415c:	e138      	b.n	80043d0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004162:	2b03      	cmp	r3, #3
 8004164:	f200 80f1 	bhi.w	800434a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416c:	2b01      	cmp	r3, #1
 800416e:	d123      	bne.n	80041b8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004172:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 fc1b 	bl	80049b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e139      	b.n	80043f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	691a      	ldr	r2, [r3, #16]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	1c5a      	adds	r2, r3, #1
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	3b01      	subs	r3, #1
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041b6:	e10b      	b.n	80043d0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d14e      	bne.n	800425e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c6:	2200      	movs	r2, #0
 80041c8:	4906      	ldr	r1, [pc, #24]	; (80041e4 <HAL_I2C_Mem_Read+0x22c>)
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 fa98 	bl	8004700 <I2C_WaitOnFlagUntilTimeout>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d008      	beq.n	80041e8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e10e      	b.n	80043f8 <HAL_I2C_Mem_Read+0x440>
 80041da:	bf00      	nop
 80041dc:	00100002 	.word	0x00100002
 80041e0:	ffff0000 	.word	0xffff0000
 80041e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	691a      	ldr	r2, [r3, #16]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420a:	1c5a      	adds	r2, r3, #1
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004214:	3b01      	subs	r3, #1
 8004216:	b29a      	uxth	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004220:	b29b      	uxth	r3, r3
 8004222:	3b01      	subs	r3, #1
 8004224:	b29a      	uxth	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	691a      	ldr	r2, [r3, #16]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	b2d2      	uxtb	r2, r2
 8004236:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	1c5a      	adds	r2, r3, #1
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004246:	3b01      	subs	r3, #1
 8004248:	b29a      	uxth	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004252:	b29b      	uxth	r3, r3
 8004254:	3b01      	subs	r3, #1
 8004256:	b29a      	uxth	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800425c:	e0b8      	b.n	80043d0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800425e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004264:	2200      	movs	r2, #0
 8004266:	4966      	ldr	r1, [pc, #408]	; (8004400 <HAL_I2C_Mem_Read+0x448>)
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 fa49 	bl	8004700 <I2C_WaitOnFlagUntilTimeout>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e0bf      	b.n	80043f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004286:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	691a      	ldr	r2, [r3, #16]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	1c5a      	adds	r2, r3, #1
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a4:	3b01      	subs	r3, #1
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c0:	2200      	movs	r2, #0
 80042c2:	494f      	ldr	r1, [pc, #316]	; (8004400 <HAL_I2C_Mem_Read+0x448>)
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f000 fa1b 	bl	8004700 <I2C_WaitOnFlagUntilTimeout>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e091      	b.n	80043f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	691a      	ldr	r2, [r3, #16]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	b2d2      	uxtb	r2, r2
 80042f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f6:	1c5a      	adds	r2, r3, #1
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004300:	3b01      	subs	r3, #1
 8004302:	b29a      	uxth	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430c:	b29b      	uxth	r3, r3
 800430e:	3b01      	subs	r3, #1
 8004310:	b29a      	uxth	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	691a      	ldr	r2, [r3, #16]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	b2d2      	uxtb	r2, r2
 8004322:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	1c5a      	adds	r2, r3, #1
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004332:	3b01      	subs	r3, #1
 8004334:	b29a      	uxth	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433e:	b29b      	uxth	r3, r3
 8004340:	3b01      	subs	r3, #1
 8004342:	b29a      	uxth	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004348:	e042      	b.n	80043d0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800434a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800434c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 fb2e 	bl	80049b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e04c      	b.n	80043f8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	691a      	ldr	r2, [r3, #16]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	b2d2      	uxtb	r2, r2
 800436a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	1c5a      	adds	r2, r3, #1
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800437a:	3b01      	subs	r3, #1
 800437c:	b29a      	uxth	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004386:	b29b      	uxth	r3, r3
 8004388:	3b01      	subs	r3, #1
 800438a:	b29a      	uxth	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	f003 0304 	and.w	r3, r3, #4
 800439a:	2b04      	cmp	r3, #4
 800439c:	d118      	bne.n	80043d0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	691a      	ldr	r2, [r3, #16]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	b2d2      	uxtb	r2, r2
 80043aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b0:	1c5a      	adds	r2, r3, #1
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ba:	3b01      	subs	r3, #1
 80043bc:	b29a      	uxth	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	3b01      	subs	r3, #1
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f47f aec2 	bne.w	800415e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2220      	movs	r2, #32
 80043de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	e000      	b.n	80043f8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80043f6:	2302      	movs	r3, #2
  }
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3728      	adds	r7, #40	; 0x28
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	00010004 	.word	0x00010004

08004404 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b088      	sub	sp, #32
 8004408:	af02      	add	r7, sp, #8
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	4608      	mov	r0, r1
 800440e:	4611      	mov	r1, r2
 8004410:	461a      	mov	r2, r3
 8004412:	4603      	mov	r3, r0
 8004414:	817b      	strh	r3, [r7, #10]
 8004416:	460b      	mov	r3, r1
 8004418:	813b      	strh	r3, [r7, #8]
 800441a:	4613      	mov	r3, r2
 800441c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800442c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	6a3b      	ldr	r3, [r7, #32]
 8004434:	2200      	movs	r2, #0
 8004436:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f000 f960 	bl	8004700 <I2C_WaitOnFlagUntilTimeout>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00d      	beq.n	8004462 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004450:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004454:	d103      	bne.n	800445e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f44f 7200 	mov.w	r2, #512	; 0x200
 800445c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e05f      	b.n	8004522 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004462:	897b      	ldrh	r3, [r7, #10]
 8004464:	b2db      	uxtb	r3, r3
 8004466:	461a      	mov	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004470:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004474:	6a3a      	ldr	r2, [r7, #32]
 8004476:	492d      	ldr	r1, [pc, #180]	; (800452c <I2C_RequestMemoryWrite+0x128>)
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f000 f998 	bl	80047ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e04c      	b.n	8004522 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004488:	2300      	movs	r3, #0
 800448a:	617b      	str	r3, [r7, #20]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	617b      	str	r3, [r7, #20]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	617b      	str	r3, [r7, #20]
 800449c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800449e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a0:	6a39      	ldr	r1, [r7, #32]
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f000 fa02 	bl	80048ac <I2C_WaitOnTXEFlagUntilTimeout>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00d      	beq.n	80044ca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	d107      	bne.n	80044c6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e02b      	b.n	8004522 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044ca:	88fb      	ldrh	r3, [r7, #6]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d105      	bne.n	80044dc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044d0:	893b      	ldrh	r3, [r7, #8]
 80044d2:	b2da      	uxtb	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	611a      	str	r2, [r3, #16]
 80044da:	e021      	b.n	8004520 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80044dc:	893b      	ldrh	r3, [r7, #8]
 80044de:	0a1b      	lsrs	r3, r3, #8
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	b2da      	uxtb	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ec:	6a39      	ldr	r1, [r7, #32]
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f000 f9dc 	bl	80048ac <I2C_WaitOnTXEFlagUntilTimeout>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00d      	beq.n	8004516 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	2b04      	cmp	r3, #4
 8004500:	d107      	bne.n	8004512 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004510:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e005      	b.n	8004522 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004516:	893b      	ldrh	r3, [r7, #8]
 8004518:	b2da      	uxtb	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3718      	adds	r7, #24
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	00010002 	.word	0x00010002

08004530 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b088      	sub	sp, #32
 8004534:	af02      	add	r7, sp, #8
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	4608      	mov	r0, r1
 800453a:	4611      	mov	r1, r2
 800453c:	461a      	mov	r2, r3
 800453e:	4603      	mov	r3, r0
 8004540:	817b      	strh	r3, [r7, #10]
 8004542:	460b      	mov	r3, r1
 8004544:	813b      	strh	r3, [r7, #8]
 8004546:	4613      	mov	r3, r2
 8004548:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004558:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004568:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	6a3b      	ldr	r3, [r7, #32]
 8004570:	2200      	movs	r2, #0
 8004572:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f000 f8c2 	bl	8004700 <I2C_WaitOnFlagUntilTimeout>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00d      	beq.n	800459e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004590:	d103      	bne.n	800459a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004598:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e0aa      	b.n	80046f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800459e:	897b      	ldrh	r3, [r7, #10]
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	461a      	mov	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b0:	6a3a      	ldr	r2, [r7, #32]
 80045b2:	4952      	ldr	r1, [pc, #328]	; (80046fc <I2C_RequestMemoryRead+0x1cc>)
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f000 f8fa 	bl	80047ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d001      	beq.n	80045c4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e097      	b.n	80046f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045c4:	2300      	movs	r3, #0
 80045c6:	617b      	str	r3, [r7, #20]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	617b      	str	r3, [r7, #20]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	617b      	str	r3, [r7, #20]
 80045d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045dc:	6a39      	ldr	r1, [r7, #32]
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f000 f964 	bl	80048ac <I2C_WaitOnTXEFlagUntilTimeout>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00d      	beq.n	8004606 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d107      	bne.n	8004602 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004600:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e076      	b.n	80046f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004606:	88fb      	ldrh	r3, [r7, #6]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d105      	bne.n	8004618 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800460c:	893b      	ldrh	r3, [r7, #8]
 800460e:	b2da      	uxtb	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	611a      	str	r2, [r3, #16]
 8004616:	e021      	b.n	800465c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004618:	893b      	ldrh	r3, [r7, #8]
 800461a:	0a1b      	lsrs	r3, r3, #8
 800461c:	b29b      	uxth	r3, r3
 800461e:	b2da      	uxtb	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004628:	6a39      	ldr	r1, [r7, #32]
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f000 f93e 	bl	80048ac <I2C_WaitOnTXEFlagUntilTimeout>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00d      	beq.n	8004652 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	2b04      	cmp	r3, #4
 800463c:	d107      	bne.n	800464e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800464c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e050      	b.n	80046f4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004652:	893b      	ldrh	r3, [r7, #8]
 8004654:	b2da      	uxtb	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800465c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800465e:	6a39      	ldr	r1, [r7, #32]
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 f923 	bl	80048ac <I2C_WaitOnTXEFlagUntilTimeout>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00d      	beq.n	8004688 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004670:	2b04      	cmp	r3, #4
 8004672:	d107      	bne.n	8004684 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004682:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e035      	b.n	80046f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004696:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	6a3b      	ldr	r3, [r7, #32]
 800469e:	2200      	movs	r2, #0
 80046a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 f82b 	bl	8004700 <I2C_WaitOnFlagUntilTimeout>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00d      	beq.n	80046cc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046be:	d103      	bne.n	80046c8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e013      	b.n	80046f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80046cc:	897b      	ldrh	r3, [r7, #10]
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	f043 0301 	orr.w	r3, r3, #1
 80046d4:	b2da      	uxtb	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	6a3a      	ldr	r2, [r7, #32]
 80046e0:	4906      	ldr	r1, [pc, #24]	; (80046fc <I2C_RequestMemoryRead+0x1cc>)
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f000 f863 	bl	80047ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e000      	b.n	80046f4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3718      	adds	r7, #24
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	00010002 	.word	0x00010002

08004700 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	603b      	str	r3, [r7, #0]
 800470c:	4613      	mov	r3, r2
 800470e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004710:	e025      	b.n	800475e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004718:	d021      	beq.n	800475e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800471a:	f7fe fb15 	bl	8002d48 <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	683a      	ldr	r2, [r7, #0]
 8004726:	429a      	cmp	r2, r3
 8004728:	d302      	bcc.n	8004730 <I2C_WaitOnFlagUntilTimeout+0x30>
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d116      	bne.n	800475e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2220      	movs	r2, #32
 800473a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	f043 0220 	orr.w	r2, r3, #32
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e023      	b.n	80047a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	0c1b      	lsrs	r3, r3, #16
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b01      	cmp	r3, #1
 8004766:	d10d      	bne.n	8004784 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	43da      	mvns	r2, r3
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	4013      	ands	r3, r2
 8004774:	b29b      	uxth	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	bf0c      	ite	eq
 800477a:	2301      	moveq	r3, #1
 800477c:	2300      	movne	r3, #0
 800477e:	b2db      	uxtb	r3, r3
 8004780:	461a      	mov	r2, r3
 8004782:	e00c      	b.n	800479e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	43da      	mvns	r2, r3
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	4013      	ands	r3, r2
 8004790:	b29b      	uxth	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	bf0c      	ite	eq
 8004796:	2301      	moveq	r3, #1
 8004798:	2300      	movne	r3, #0
 800479a:	b2db      	uxtb	r3, r3
 800479c:	461a      	mov	r2, r3
 800479e:	79fb      	ldrb	r3, [r7, #7]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d0b6      	beq.n	8004712 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b084      	sub	sp, #16
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	60f8      	str	r0, [r7, #12]
 80047b6:	60b9      	str	r1, [r7, #8]
 80047b8:	607a      	str	r2, [r7, #4]
 80047ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047bc:	e051      	b.n	8004862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047cc:	d123      	bne.n	8004816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2220      	movs	r2, #32
 80047f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004802:	f043 0204 	orr.w	r2, r3, #4
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e046      	b.n	80048a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481c:	d021      	beq.n	8004862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800481e:	f7fe fa93 	bl	8002d48 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	429a      	cmp	r2, r3
 800482c:	d302      	bcc.n	8004834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d116      	bne.n	8004862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2220      	movs	r2, #32
 800483e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484e:	f043 0220 	orr.w	r2, r3, #32
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e020      	b.n	80048a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	0c1b      	lsrs	r3, r3, #16
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b01      	cmp	r3, #1
 800486a:	d10c      	bne.n	8004886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	43da      	mvns	r2, r3
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	4013      	ands	r3, r2
 8004878:	b29b      	uxth	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	bf14      	ite	ne
 800487e:	2301      	movne	r3, #1
 8004880:	2300      	moveq	r3, #0
 8004882:	b2db      	uxtb	r3, r3
 8004884:	e00b      	b.n	800489e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	43da      	mvns	r2, r3
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	4013      	ands	r3, r2
 8004892:	b29b      	uxth	r3, r3
 8004894:	2b00      	cmp	r3, #0
 8004896:	bf14      	ite	ne
 8004898:	2301      	movne	r3, #1
 800489a:	2300      	moveq	r3, #0
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d18d      	bne.n	80047be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048b8:	e02d      	b.n	8004916 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 f8ce 	bl	8004a5c <I2C_IsAcknowledgeFailed>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e02d      	b.n	8004926 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d0:	d021      	beq.n	8004916 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048d2:	f7fe fa39 	bl	8002d48 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	68ba      	ldr	r2, [r7, #8]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d302      	bcc.n	80048e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d116      	bne.n	8004916 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2220      	movs	r2, #32
 80048f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	f043 0220 	orr.w	r2, r3, #32
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e007      	b.n	8004926 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004920:	2b80      	cmp	r3, #128	; 0x80
 8004922:	d1ca      	bne.n	80048ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b084      	sub	sp, #16
 8004932:	af00      	add	r7, sp, #0
 8004934:	60f8      	str	r0, [r7, #12]
 8004936:	60b9      	str	r1, [r7, #8]
 8004938:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800493a:	e02d      	b.n	8004998 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f000 f88d 	bl	8004a5c <I2C_IsAcknowledgeFailed>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e02d      	b.n	80049a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004952:	d021      	beq.n	8004998 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004954:	f7fe f9f8 	bl	8002d48 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	429a      	cmp	r2, r3
 8004962:	d302      	bcc.n	800496a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d116      	bne.n	8004998 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2220      	movs	r2, #32
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004984:	f043 0220 	orr.w	r2, r3, #32
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e007      	b.n	80049a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	f003 0304 	and.w	r3, r3, #4
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	d1ca      	bne.n	800493c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049bc:	e042      	b.n	8004a44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	f003 0310 	and.w	r3, r3, #16
 80049c8:	2b10      	cmp	r3, #16
 80049ca:	d119      	bne.n	8004a00 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f06f 0210 	mvn.w	r2, #16
 80049d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2220      	movs	r2, #32
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e029      	b.n	8004a54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a00:	f7fe f9a2 	bl	8002d48 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d302      	bcc.n	8004a16 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d116      	bne.n	8004a44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a30:	f043 0220 	orr.w	r2, r3, #32
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e007      	b.n	8004a54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a4e:	2b40      	cmp	r3, #64	; 0x40
 8004a50:	d1b5      	bne.n	80049be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a72:	d11b      	bne.n	8004aac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a7c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2220      	movs	r2, #32
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a98:	f043 0204 	orr.w	r2, r3, #4
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e000      	b.n	8004aae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
	...

08004abc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e264      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d075      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ada:	4ba3      	ldr	r3, [pc, #652]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f003 030c 	and.w	r3, r3, #12
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	d00c      	beq.n	8004b00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ae6:	4ba0      	ldr	r3, [pc, #640]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004aee:	2b08      	cmp	r3, #8
 8004af0:	d112      	bne.n	8004b18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004af2:	4b9d      	ldr	r3, [pc, #628]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004afa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004afe:	d10b      	bne.n	8004b18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b00:	4b99      	ldr	r3, [pc, #612]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d05b      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x108>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d157      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e23f      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b20:	d106      	bne.n	8004b30 <HAL_RCC_OscConfig+0x74>
 8004b22:	4b91      	ldr	r3, [pc, #580]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a90      	ldr	r2, [pc, #576]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b2c:	6013      	str	r3, [r2, #0]
 8004b2e:	e01d      	b.n	8004b6c <HAL_RCC_OscConfig+0xb0>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b38:	d10c      	bne.n	8004b54 <HAL_RCC_OscConfig+0x98>
 8004b3a:	4b8b      	ldr	r3, [pc, #556]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a8a      	ldr	r2, [pc, #552]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b44:	6013      	str	r3, [r2, #0]
 8004b46:	4b88      	ldr	r3, [pc, #544]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a87      	ldr	r2, [pc, #540]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	e00b      	b.n	8004b6c <HAL_RCC_OscConfig+0xb0>
 8004b54:	4b84      	ldr	r3, [pc, #528]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a83      	ldr	r2, [pc, #524]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b5e:	6013      	str	r3, [r2, #0]
 8004b60:	4b81      	ldr	r3, [pc, #516]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a80      	ldr	r2, [pc, #512]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d013      	beq.n	8004b9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b74:	f7fe f8e8 	bl	8002d48 <HAL_GetTick>
 8004b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b7a:	e008      	b.n	8004b8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b7c:	f7fe f8e4 	bl	8002d48 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b64      	cmp	r3, #100	; 0x64
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e204      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b8e:	4b76      	ldr	r3, [pc, #472]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0f0      	beq.n	8004b7c <HAL_RCC_OscConfig+0xc0>
 8004b9a:	e014      	b.n	8004bc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9c:	f7fe f8d4 	bl	8002d48 <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ba4:	f7fe f8d0 	bl	8002d48 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b64      	cmp	r3, #100	; 0x64
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e1f0      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bb6:	4b6c      	ldr	r3, [pc, #432]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1f0      	bne.n	8004ba4 <HAL_RCC_OscConfig+0xe8>
 8004bc2:	e000      	b.n	8004bc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d063      	beq.n	8004c9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bd2:	4b65      	ldr	r3, [pc, #404]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f003 030c 	and.w	r3, r3, #12
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00b      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bde:	4b62      	ldr	r3, [pc, #392]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004be6:	2b08      	cmp	r3, #8
 8004be8:	d11c      	bne.n	8004c24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bea:	4b5f      	ldr	r3, [pc, #380]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d116      	bne.n	8004c24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bf6:	4b5c      	ldr	r3, [pc, #368]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d005      	beq.n	8004c0e <HAL_RCC_OscConfig+0x152>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d001      	beq.n	8004c0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e1c4      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c0e:	4b56      	ldr	r3, [pc, #344]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	4952      	ldr	r1, [pc, #328]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c22:	e03a      	b.n	8004c9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d020      	beq.n	8004c6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c2c:	4b4f      	ldr	r3, [pc, #316]	; (8004d6c <HAL_RCC_OscConfig+0x2b0>)
 8004c2e:	2201      	movs	r2, #1
 8004c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c32:	f7fe f889 	bl	8002d48 <HAL_GetTick>
 8004c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c38:	e008      	b.n	8004c4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c3a:	f7fe f885 	bl	8002d48 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d901      	bls.n	8004c4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e1a5      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c4c:	4b46      	ldr	r3, [pc, #280]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0f0      	beq.n	8004c3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c58:	4b43      	ldr	r3, [pc, #268]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	00db      	lsls	r3, r3, #3
 8004c66:	4940      	ldr	r1, [pc, #256]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	600b      	str	r3, [r1, #0]
 8004c6c:	e015      	b.n	8004c9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c6e:	4b3f      	ldr	r3, [pc, #252]	; (8004d6c <HAL_RCC_OscConfig+0x2b0>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c74:	f7fe f868 	bl	8002d48 <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c7c:	f7fe f864 	bl	8002d48 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e184      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c8e:	4b36      	ldr	r3, [pc, #216]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1f0      	bne.n	8004c7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0308 	and.w	r3, r3, #8
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d030      	beq.n	8004d08 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d016      	beq.n	8004cdc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cae:	4b30      	ldr	r3, [pc, #192]	; (8004d70 <HAL_RCC_OscConfig+0x2b4>)
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb4:	f7fe f848 	bl	8002d48 <HAL_GetTick>
 8004cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cbc:	f7fe f844 	bl	8002d48 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e164      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cce:	4b26      	ldr	r3, [pc, #152]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0f0      	beq.n	8004cbc <HAL_RCC_OscConfig+0x200>
 8004cda:	e015      	b.n	8004d08 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cdc:	4b24      	ldr	r3, [pc, #144]	; (8004d70 <HAL_RCC_OscConfig+0x2b4>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ce2:	f7fe f831 	bl	8002d48 <HAL_GetTick>
 8004ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ce8:	e008      	b.n	8004cfc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cea:	f7fe f82d 	bl	8002d48 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d901      	bls.n	8004cfc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e14d      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cfc:	4b1a      	ldr	r3, [pc, #104]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1f0      	bne.n	8004cea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0304 	and.w	r3, r3, #4
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 80a0 	beq.w	8004e56 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d16:	2300      	movs	r3, #0
 8004d18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d1a:	4b13      	ldr	r3, [pc, #76]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10f      	bne.n	8004d46 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d26:	2300      	movs	r3, #0
 8004d28:	60bb      	str	r3, [r7, #8]
 8004d2a:	4b0f      	ldr	r3, [pc, #60]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	4a0e      	ldr	r2, [pc, #56]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d34:	6413      	str	r3, [r2, #64]	; 0x40
 8004d36:	4b0c      	ldr	r3, [pc, #48]	; (8004d68 <HAL_RCC_OscConfig+0x2ac>)
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d3e:	60bb      	str	r3, [r7, #8]
 8004d40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d42:	2301      	movs	r3, #1
 8004d44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d46:	4b0b      	ldr	r3, [pc, #44]	; (8004d74 <HAL_RCC_OscConfig+0x2b8>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d121      	bne.n	8004d96 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d52:	4b08      	ldr	r3, [pc, #32]	; (8004d74 <HAL_RCC_OscConfig+0x2b8>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a07      	ldr	r2, [pc, #28]	; (8004d74 <HAL_RCC_OscConfig+0x2b8>)
 8004d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d5e:	f7fd fff3 	bl	8002d48 <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d64:	e011      	b.n	8004d8a <HAL_RCC_OscConfig+0x2ce>
 8004d66:	bf00      	nop
 8004d68:	40023800 	.word	0x40023800
 8004d6c:	42470000 	.word	0x42470000
 8004d70:	42470e80 	.word	0x42470e80
 8004d74:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d78:	f7fd ffe6 	bl	8002d48 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e106      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d8a:	4b85      	ldr	r3, [pc, #532]	; (8004fa0 <HAL_RCC_OscConfig+0x4e4>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d0f0      	beq.n	8004d78 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d106      	bne.n	8004dac <HAL_RCC_OscConfig+0x2f0>
 8004d9e:	4b81      	ldr	r3, [pc, #516]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da2:	4a80      	ldr	r2, [pc, #512]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004da4:	f043 0301 	orr.w	r3, r3, #1
 8004da8:	6713      	str	r3, [r2, #112]	; 0x70
 8004daa:	e01c      	b.n	8004de6 <HAL_RCC_OscConfig+0x32a>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	2b05      	cmp	r3, #5
 8004db2:	d10c      	bne.n	8004dce <HAL_RCC_OscConfig+0x312>
 8004db4:	4b7b      	ldr	r3, [pc, #492]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db8:	4a7a      	ldr	r2, [pc, #488]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004dba:	f043 0304 	orr.w	r3, r3, #4
 8004dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8004dc0:	4b78      	ldr	r3, [pc, #480]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc4:	4a77      	ldr	r2, [pc, #476]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004dc6:	f043 0301 	orr.w	r3, r3, #1
 8004dca:	6713      	str	r3, [r2, #112]	; 0x70
 8004dcc:	e00b      	b.n	8004de6 <HAL_RCC_OscConfig+0x32a>
 8004dce:	4b75      	ldr	r3, [pc, #468]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd2:	4a74      	ldr	r2, [pc, #464]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004dd4:	f023 0301 	bic.w	r3, r3, #1
 8004dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dda:	4b72      	ldr	r3, [pc, #456]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dde:	4a71      	ldr	r2, [pc, #452]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004de0:	f023 0304 	bic.w	r3, r3, #4
 8004de4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d015      	beq.n	8004e1a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dee:	f7fd ffab 	bl	8002d48 <HAL_GetTick>
 8004df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004df4:	e00a      	b.n	8004e0c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004df6:	f7fd ffa7 	bl	8002d48 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d901      	bls.n	8004e0c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e0c5      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e0c:	4b65      	ldr	r3, [pc, #404]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d0ee      	beq.n	8004df6 <HAL_RCC_OscConfig+0x33a>
 8004e18:	e014      	b.n	8004e44 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e1a:	f7fd ff95 	bl	8002d48 <HAL_GetTick>
 8004e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e20:	e00a      	b.n	8004e38 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e22:	f7fd ff91 	bl	8002d48 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e0af      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e38:	4b5a      	ldr	r3, [pc, #360]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1ee      	bne.n	8004e22 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e44:	7dfb      	ldrb	r3, [r7, #23]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d105      	bne.n	8004e56 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e4a:	4b56      	ldr	r3, [pc, #344]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4e:	4a55      	ldr	r2, [pc, #340]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f000 809b 	beq.w	8004f96 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e60:	4b50      	ldr	r3, [pc, #320]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f003 030c 	and.w	r3, r3, #12
 8004e68:	2b08      	cmp	r3, #8
 8004e6a:	d05c      	beq.n	8004f26 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d141      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e74:	4b4c      	ldr	r3, [pc, #304]	; (8004fa8 <HAL_RCC_OscConfig+0x4ec>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e7a:	f7fd ff65 	bl	8002d48 <HAL_GetTick>
 8004e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e80:	e008      	b.n	8004e94 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e82:	f7fd ff61 	bl	8002d48 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d901      	bls.n	8004e94 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e081      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e94:	4b43      	ldr	r3, [pc, #268]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1f0      	bne.n	8004e82 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	69da      	ldr	r2, [r3, #28]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eae:	019b      	lsls	r3, r3, #6
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb6:	085b      	lsrs	r3, r3, #1
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	041b      	lsls	r3, r3, #16
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec2:	061b      	lsls	r3, r3, #24
 8004ec4:	4937      	ldr	r1, [pc, #220]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004eca:	4b37      	ldr	r3, [pc, #220]	; (8004fa8 <HAL_RCC_OscConfig+0x4ec>)
 8004ecc:	2201      	movs	r2, #1
 8004ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed0:	f7fd ff3a 	bl	8002d48 <HAL_GetTick>
 8004ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ed6:	e008      	b.n	8004eea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ed8:	f7fd ff36 	bl	8002d48 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e056      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eea:	4b2e      	ldr	r3, [pc, #184]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d0f0      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x41c>
 8004ef6:	e04e      	b.n	8004f96 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ef8:	4b2b      	ldr	r3, [pc, #172]	; (8004fa8 <HAL_RCC_OscConfig+0x4ec>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004efe:	f7fd ff23 	bl	8002d48 <HAL_GetTick>
 8004f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f04:	e008      	b.n	8004f18 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f06:	f7fd ff1f 	bl	8002d48 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d901      	bls.n	8004f18 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e03f      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f18:	4b22      	ldr	r3, [pc, #136]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1f0      	bne.n	8004f06 <HAL_RCC_OscConfig+0x44a>
 8004f24:	e037      	b.n	8004f96 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d101      	bne.n	8004f32 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e032      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f32:	4b1c      	ldr	r3, [pc, #112]	; (8004fa4 <HAL_RCC_OscConfig+0x4e8>)
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d028      	beq.n	8004f92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d121      	bne.n	8004f92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d11a      	bne.n	8004f92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f62:	4013      	ands	r3, r2
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f68:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d111      	bne.n	8004f92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f78:	085b      	lsrs	r3, r3, #1
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d107      	bne.n	8004f92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d001      	beq.n	8004f96 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e000      	b.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3718      	adds	r7, #24
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	40007000 	.word	0x40007000
 8004fa4:	40023800 	.word	0x40023800
 8004fa8:	42470060 	.word	0x42470060

08004fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e0cc      	b.n	800515a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fc0:	4b68      	ldr	r3, [pc, #416]	; (8005164 <HAL_RCC_ClockConfig+0x1b8>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d90c      	bls.n	8004fe8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fce:	4b65      	ldr	r3, [pc, #404]	; (8005164 <HAL_RCC_ClockConfig+0x1b8>)
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	b2d2      	uxtb	r2, r2
 8004fd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fd6:	4b63      	ldr	r3, [pc, #396]	; (8005164 <HAL_RCC_ClockConfig+0x1b8>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0307 	and.w	r3, r3, #7
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d001      	beq.n	8004fe8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e0b8      	b.n	800515a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d020      	beq.n	8005036 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0304 	and.w	r3, r3, #4
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d005      	beq.n	800500c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005000:	4b59      	ldr	r3, [pc, #356]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	4a58      	ldr	r2, [pc, #352]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 8005006:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800500a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0308 	and.w	r3, r3, #8
 8005014:	2b00      	cmp	r3, #0
 8005016:	d005      	beq.n	8005024 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005018:	4b53      	ldr	r3, [pc, #332]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	4a52      	ldr	r2, [pc, #328]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800501e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005022:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005024:	4b50      	ldr	r3, [pc, #320]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	494d      	ldr	r1, [pc, #308]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 8005032:	4313      	orrs	r3, r2
 8005034:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d044      	beq.n	80050cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d107      	bne.n	800505a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800504a:	4b47      	ldr	r3, [pc, #284]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d119      	bne.n	800508a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e07f      	b.n	800515a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2b02      	cmp	r3, #2
 8005060:	d003      	beq.n	800506a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005066:	2b03      	cmp	r3, #3
 8005068:	d107      	bne.n	800507a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800506a:	4b3f      	ldr	r3, [pc, #252]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d109      	bne.n	800508a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e06f      	b.n	800515a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800507a:	4b3b      	ldr	r3, [pc, #236]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e067      	b.n	800515a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800508a:	4b37      	ldr	r3, [pc, #220]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f023 0203 	bic.w	r2, r3, #3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	4934      	ldr	r1, [pc, #208]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 8005098:	4313      	orrs	r3, r2
 800509a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800509c:	f7fd fe54 	bl	8002d48 <HAL_GetTick>
 80050a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050a2:	e00a      	b.n	80050ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050a4:	f7fd fe50 	bl	8002d48 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e04f      	b.n	800515a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ba:	4b2b      	ldr	r3, [pc, #172]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f003 020c 	and.w	r2, r3, #12
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d1eb      	bne.n	80050a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050cc:	4b25      	ldr	r3, [pc, #148]	; (8005164 <HAL_RCC_ClockConfig+0x1b8>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0307 	and.w	r3, r3, #7
 80050d4:	683a      	ldr	r2, [r7, #0]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d20c      	bcs.n	80050f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050da:	4b22      	ldr	r3, [pc, #136]	; (8005164 <HAL_RCC_ClockConfig+0x1b8>)
 80050dc:	683a      	ldr	r2, [r7, #0]
 80050de:	b2d2      	uxtb	r2, r2
 80050e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050e2:	4b20      	ldr	r3, [pc, #128]	; (8005164 <HAL_RCC_ClockConfig+0x1b8>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0307 	and.w	r3, r3, #7
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d001      	beq.n	80050f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e032      	b.n	800515a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0304 	and.w	r3, r3, #4
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d008      	beq.n	8005112 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005100:	4b19      	ldr	r3, [pc, #100]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	4916      	ldr	r1, [pc, #88]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800510e:	4313      	orrs	r3, r2
 8005110:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0308 	and.w	r3, r3, #8
 800511a:	2b00      	cmp	r3, #0
 800511c:	d009      	beq.n	8005132 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800511e:	4b12      	ldr	r3, [pc, #72]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	00db      	lsls	r3, r3, #3
 800512c:	490e      	ldr	r1, [pc, #56]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800512e:	4313      	orrs	r3, r2
 8005130:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005132:	f000 f821 	bl	8005178 <HAL_RCC_GetSysClockFreq>
 8005136:	4602      	mov	r2, r0
 8005138:	4b0b      	ldr	r3, [pc, #44]	; (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	091b      	lsrs	r3, r3, #4
 800513e:	f003 030f 	and.w	r3, r3, #15
 8005142:	490a      	ldr	r1, [pc, #40]	; (800516c <HAL_RCC_ClockConfig+0x1c0>)
 8005144:	5ccb      	ldrb	r3, [r1, r3]
 8005146:	fa22 f303 	lsr.w	r3, r2, r3
 800514a:	4a09      	ldr	r2, [pc, #36]	; (8005170 <HAL_RCC_ClockConfig+0x1c4>)
 800514c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800514e:	4b09      	ldr	r3, [pc, #36]	; (8005174 <HAL_RCC_ClockConfig+0x1c8>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4618      	mov	r0, r3
 8005154:	f7fd fdb4 	bl	8002cc0 <HAL_InitTick>

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	40023c00 	.word	0x40023c00
 8005168:	40023800 	.word	0x40023800
 800516c:	08008220 	.word	0x08008220
 8005170:	20000088 	.word	0x20000088
 8005174:	2000008c 	.word	0x2000008c

08005178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005178:	b5b0      	push	{r4, r5, r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800517e:	2100      	movs	r1, #0
 8005180:	6079      	str	r1, [r7, #4]
 8005182:	2100      	movs	r1, #0
 8005184:	60f9      	str	r1, [r7, #12]
 8005186:	2100      	movs	r1, #0
 8005188:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800518a:	2100      	movs	r1, #0
 800518c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800518e:	4952      	ldr	r1, [pc, #328]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005190:	6889      	ldr	r1, [r1, #8]
 8005192:	f001 010c 	and.w	r1, r1, #12
 8005196:	2908      	cmp	r1, #8
 8005198:	d00d      	beq.n	80051b6 <HAL_RCC_GetSysClockFreq+0x3e>
 800519a:	2908      	cmp	r1, #8
 800519c:	f200 8094 	bhi.w	80052c8 <HAL_RCC_GetSysClockFreq+0x150>
 80051a0:	2900      	cmp	r1, #0
 80051a2:	d002      	beq.n	80051aa <HAL_RCC_GetSysClockFreq+0x32>
 80051a4:	2904      	cmp	r1, #4
 80051a6:	d003      	beq.n	80051b0 <HAL_RCC_GetSysClockFreq+0x38>
 80051a8:	e08e      	b.n	80052c8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051aa:	4b4c      	ldr	r3, [pc, #304]	; (80052dc <HAL_RCC_GetSysClockFreq+0x164>)
 80051ac:	60bb      	str	r3, [r7, #8]
       break;
 80051ae:	e08e      	b.n	80052ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051b0:	4b4b      	ldr	r3, [pc, #300]	; (80052e0 <HAL_RCC_GetSysClockFreq+0x168>)
 80051b2:	60bb      	str	r3, [r7, #8]
      break;
 80051b4:	e08b      	b.n	80052ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051b6:	4948      	ldr	r1, [pc, #288]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80051b8:	6849      	ldr	r1, [r1, #4]
 80051ba:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80051be:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051c0:	4945      	ldr	r1, [pc, #276]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80051c2:	6849      	ldr	r1, [r1, #4]
 80051c4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80051c8:	2900      	cmp	r1, #0
 80051ca:	d024      	beq.n	8005216 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051cc:	4942      	ldr	r1, [pc, #264]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80051ce:	6849      	ldr	r1, [r1, #4]
 80051d0:	0989      	lsrs	r1, r1, #6
 80051d2:	4608      	mov	r0, r1
 80051d4:	f04f 0100 	mov.w	r1, #0
 80051d8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80051dc:	f04f 0500 	mov.w	r5, #0
 80051e0:	ea00 0204 	and.w	r2, r0, r4
 80051e4:	ea01 0305 	and.w	r3, r1, r5
 80051e8:	493d      	ldr	r1, [pc, #244]	; (80052e0 <HAL_RCC_GetSysClockFreq+0x168>)
 80051ea:	fb01 f003 	mul.w	r0, r1, r3
 80051ee:	2100      	movs	r1, #0
 80051f0:	fb01 f102 	mul.w	r1, r1, r2
 80051f4:	1844      	adds	r4, r0, r1
 80051f6:	493a      	ldr	r1, [pc, #232]	; (80052e0 <HAL_RCC_GetSysClockFreq+0x168>)
 80051f8:	fba2 0101 	umull	r0, r1, r2, r1
 80051fc:	1863      	adds	r3, r4, r1
 80051fe:	4619      	mov	r1, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	461a      	mov	r2, r3
 8005204:	f04f 0300 	mov.w	r3, #0
 8005208:	f7fa ffde 	bl	80001c8 <__aeabi_uldivmod>
 800520c:	4602      	mov	r2, r0
 800520e:	460b      	mov	r3, r1
 8005210:	4613      	mov	r3, r2
 8005212:	60fb      	str	r3, [r7, #12]
 8005214:	e04a      	b.n	80052ac <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005216:	4b30      	ldr	r3, [pc, #192]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	099b      	lsrs	r3, r3, #6
 800521c:	461a      	mov	r2, r3
 800521e:	f04f 0300 	mov.w	r3, #0
 8005222:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005226:	f04f 0100 	mov.w	r1, #0
 800522a:	ea02 0400 	and.w	r4, r2, r0
 800522e:	ea03 0501 	and.w	r5, r3, r1
 8005232:	4620      	mov	r0, r4
 8005234:	4629      	mov	r1, r5
 8005236:	f04f 0200 	mov.w	r2, #0
 800523a:	f04f 0300 	mov.w	r3, #0
 800523e:	014b      	lsls	r3, r1, #5
 8005240:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005244:	0142      	lsls	r2, r0, #5
 8005246:	4610      	mov	r0, r2
 8005248:	4619      	mov	r1, r3
 800524a:	1b00      	subs	r0, r0, r4
 800524c:	eb61 0105 	sbc.w	r1, r1, r5
 8005250:	f04f 0200 	mov.w	r2, #0
 8005254:	f04f 0300 	mov.w	r3, #0
 8005258:	018b      	lsls	r3, r1, #6
 800525a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800525e:	0182      	lsls	r2, r0, #6
 8005260:	1a12      	subs	r2, r2, r0
 8005262:	eb63 0301 	sbc.w	r3, r3, r1
 8005266:	f04f 0000 	mov.w	r0, #0
 800526a:	f04f 0100 	mov.w	r1, #0
 800526e:	00d9      	lsls	r1, r3, #3
 8005270:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005274:	00d0      	lsls	r0, r2, #3
 8005276:	4602      	mov	r2, r0
 8005278:	460b      	mov	r3, r1
 800527a:	1912      	adds	r2, r2, r4
 800527c:	eb45 0303 	adc.w	r3, r5, r3
 8005280:	f04f 0000 	mov.w	r0, #0
 8005284:	f04f 0100 	mov.w	r1, #0
 8005288:	0299      	lsls	r1, r3, #10
 800528a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800528e:	0290      	lsls	r0, r2, #10
 8005290:	4602      	mov	r2, r0
 8005292:	460b      	mov	r3, r1
 8005294:	4610      	mov	r0, r2
 8005296:	4619      	mov	r1, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	461a      	mov	r2, r3
 800529c:	f04f 0300 	mov.w	r3, #0
 80052a0:	f7fa ff92 	bl	80001c8 <__aeabi_uldivmod>
 80052a4:	4602      	mov	r2, r0
 80052a6:	460b      	mov	r3, r1
 80052a8:	4613      	mov	r3, r2
 80052aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80052ac:	4b0a      	ldr	r3, [pc, #40]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	0c1b      	lsrs	r3, r3, #16
 80052b2:	f003 0303 	and.w	r3, r3, #3
 80052b6:	3301      	adds	r3, #1
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c4:	60bb      	str	r3, [r7, #8]
      break;
 80052c6:	e002      	b.n	80052ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052c8:	4b04      	ldr	r3, [pc, #16]	; (80052dc <HAL_RCC_GetSysClockFreq+0x164>)
 80052ca:	60bb      	str	r3, [r7, #8]
      break;
 80052cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052ce:	68bb      	ldr	r3, [r7, #8]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bdb0      	pop	{r4, r5, r7, pc}
 80052d8:	40023800 	.word	0x40023800
 80052dc:	00f42400 	.word	0x00f42400
 80052e0:	017d7840 	.word	0x017d7840

080052e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052e4:	b480      	push	{r7}
 80052e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052e8:	4b03      	ldr	r3, [pc, #12]	; (80052f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80052ea:	681b      	ldr	r3, [r3, #0]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	20000088 	.word	0x20000088

080052fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005300:	f7ff fff0 	bl	80052e4 <HAL_RCC_GetHCLKFreq>
 8005304:	4602      	mov	r2, r0
 8005306:	4b05      	ldr	r3, [pc, #20]	; (800531c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	0a9b      	lsrs	r3, r3, #10
 800530c:	f003 0307 	and.w	r3, r3, #7
 8005310:	4903      	ldr	r1, [pc, #12]	; (8005320 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005312:	5ccb      	ldrb	r3, [r1, r3]
 8005314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005318:	4618      	mov	r0, r3
 800531a:	bd80      	pop	{r7, pc}
 800531c:	40023800 	.word	0x40023800
 8005320:	08008230 	.word	0x08008230

08005324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005328:	f7ff ffdc 	bl	80052e4 <HAL_RCC_GetHCLKFreq>
 800532c:	4602      	mov	r2, r0
 800532e:	4b05      	ldr	r3, [pc, #20]	; (8005344 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	0b5b      	lsrs	r3, r3, #13
 8005334:	f003 0307 	and.w	r3, r3, #7
 8005338:	4903      	ldr	r1, [pc, #12]	; (8005348 <HAL_RCC_GetPCLK2Freq+0x24>)
 800533a:	5ccb      	ldrb	r3, [r1, r3]
 800533c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005340:	4618      	mov	r0, r3
 8005342:	bd80      	pop	{r7, pc}
 8005344:	40023800 	.word	0x40023800
 8005348:	08008230 	.word	0x08008230

0800534c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d101      	bne.n	800535e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e041      	b.n	80053e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d106      	bne.n	8005378 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f7fd f94a 	bl	800260c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2202      	movs	r2, #2
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	3304      	adds	r3, #4
 8005388:	4619      	mov	r1, r3
 800538a:	4610      	mov	r0, r2
 800538c:	f000 fb48 	bl	8005a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b082      	sub	sp, #8
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d101      	bne.n	80053fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e041      	b.n	8005480 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b00      	cmp	r3, #0
 8005406:	d106      	bne.n	8005416 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 f839 	bl	8005488 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2202      	movs	r2, #2
 800541a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	3304      	adds	r3, #4
 8005426:	4619      	mov	r1, r3
 8005428:	4610      	mov	r0, r2
 800542a:	f000 faf9 	bl	8005a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3708      	adds	r7, #8
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d109      	bne.n	80054c0 <HAL_TIM_PWM_Start+0x24>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	bf14      	ite	ne
 80054b8:	2301      	movne	r3, #1
 80054ba:	2300      	moveq	r3, #0
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	e022      	b.n	8005506 <HAL_TIM_PWM_Start+0x6a>
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	2b04      	cmp	r3, #4
 80054c4:	d109      	bne.n	80054da <HAL_TIM_PWM_Start+0x3e>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	bf14      	ite	ne
 80054d2:	2301      	movne	r3, #1
 80054d4:	2300      	moveq	r3, #0
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	e015      	b.n	8005506 <HAL_TIM_PWM_Start+0x6a>
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	2b08      	cmp	r3, #8
 80054de:	d109      	bne.n	80054f4 <HAL_TIM_PWM_Start+0x58>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	bf14      	ite	ne
 80054ec:	2301      	movne	r3, #1
 80054ee:	2300      	moveq	r3, #0
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	e008      	b.n	8005506 <HAL_TIM_PWM_Start+0x6a>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	bf14      	ite	ne
 8005500:	2301      	movne	r3, #1
 8005502:	2300      	moveq	r3, #0
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e07c      	b.n	8005608 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d104      	bne.n	800551e <HAL_TIM_PWM_Start+0x82>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2202      	movs	r2, #2
 8005518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800551c:	e013      	b.n	8005546 <HAL_TIM_PWM_Start+0xaa>
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	2b04      	cmp	r3, #4
 8005522:	d104      	bne.n	800552e <HAL_TIM_PWM_Start+0x92>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2202      	movs	r2, #2
 8005528:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800552c:	e00b      	b.n	8005546 <HAL_TIM_PWM_Start+0xaa>
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2b08      	cmp	r3, #8
 8005532:	d104      	bne.n	800553e <HAL_TIM_PWM_Start+0xa2>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2202      	movs	r2, #2
 8005538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800553c:	e003      	b.n	8005546 <HAL_TIM_PWM_Start+0xaa>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2202      	movs	r2, #2
 8005542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2201      	movs	r2, #1
 800554c:	6839      	ldr	r1, [r7, #0]
 800554e:	4618      	mov	r0, r3
 8005550:	f000 fd50 	bl	8005ff4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a2d      	ldr	r2, [pc, #180]	; (8005610 <HAL_TIM_PWM_Start+0x174>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d004      	beq.n	8005568 <HAL_TIM_PWM_Start+0xcc>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a2c      	ldr	r2, [pc, #176]	; (8005614 <HAL_TIM_PWM_Start+0x178>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d101      	bne.n	800556c <HAL_TIM_PWM_Start+0xd0>
 8005568:	2301      	movs	r3, #1
 800556a:	e000      	b.n	800556e <HAL_TIM_PWM_Start+0xd2>
 800556c:	2300      	movs	r3, #0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d007      	beq.n	8005582 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005580:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a22      	ldr	r2, [pc, #136]	; (8005610 <HAL_TIM_PWM_Start+0x174>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d022      	beq.n	80055d2 <HAL_TIM_PWM_Start+0x136>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005594:	d01d      	beq.n	80055d2 <HAL_TIM_PWM_Start+0x136>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a1f      	ldr	r2, [pc, #124]	; (8005618 <HAL_TIM_PWM_Start+0x17c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d018      	beq.n	80055d2 <HAL_TIM_PWM_Start+0x136>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a1d      	ldr	r2, [pc, #116]	; (800561c <HAL_TIM_PWM_Start+0x180>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d013      	beq.n	80055d2 <HAL_TIM_PWM_Start+0x136>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a1c      	ldr	r2, [pc, #112]	; (8005620 <HAL_TIM_PWM_Start+0x184>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d00e      	beq.n	80055d2 <HAL_TIM_PWM_Start+0x136>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a16      	ldr	r2, [pc, #88]	; (8005614 <HAL_TIM_PWM_Start+0x178>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d009      	beq.n	80055d2 <HAL_TIM_PWM_Start+0x136>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a18      	ldr	r2, [pc, #96]	; (8005624 <HAL_TIM_PWM_Start+0x188>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d004      	beq.n	80055d2 <HAL_TIM_PWM_Start+0x136>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a16      	ldr	r2, [pc, #88]	; (8005628 <HAL_TIM_PWM_Start+0x18c>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d111      	bne.n	80055f6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f003 0307 	and.w	r3, r3, #7
 80055dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2b06      	cmp	r3, #6
 80055e2:	d010      	beq.n	8005606 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f042 0201 	orr.w	r2, r2, #1
 80055f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055f4:	e007      	b.n	8005606 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f042 0201 	orr.w	r2, r2, #1
 8005604:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	40010000 	.word	0x40010000
 8005614:	40010400 	.word	0x40010400
 8005618:	40000400 	.word	0x40000400
 800561c:	40000800 	.word	0x40000800
 8005620:	40000c00 	.word	0x40000c00
 8005624:	40014000 	.word	0x40014000
 8005628:	40001800 	.word	0x40001800

0800562c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2200      	movs	r2, #0
 800563c:	6839      	ldr	r1, [r7, #0]
 800563e:	4618      	mov	r0, r3
 8005640:	f000 fcd8 	bl	8005ff4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a2e      	ldr	r2, [pc, #184]	; (8005704 <HAL_TIM_PWM_Stop+0xd8>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d004      	beq.n	8005658 <HAL_TIM_PWM_Stop+0x2c>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a2d      	ldr	r2, [pc, #180]	; (8005708 <HAL_TIM_PWM_Stop+0xdc>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d101      	bne.n	800565c <HAL_TIM_PWM_Stop+0x30>
 8005658:	2301      	movs	r3, #1
 800565a:	e000      	b.n	800565e <HAL_TIM_PWM_Stop+0x32>
 800565c:	2300      	movs	r3, #0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d017      	beq.n	8005692 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	6a1a      	ldr	r2, [r3, #32]
 8005668:	f241 1311 	movw	r3, #4369	; 0x1111
 800566c:	4013      	ands	r3, r2
 800566e:	2b00      	cmp	r3, #0
 8005670:	d10f      	bne.n	8005692 <HAL_TIM_PWM_Stop+0x66>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	6a1a      	ldr	r2, [r3, #32]
 8005678:	f240 4344 	movw	r3, #1092	; 0x444
 800567c:	4013      	ands	r3, r2
 800567e:	2b00      	cmp	r3, #0
 8005680:	d107      	bne.n	8005692 <HAL_TIM_PWM_Stop+0x66>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005690:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	6a1a      	ldr	r2, [r3, #32]
 8005698:	f241 1311 	movw	r3, #4369	; 0x1111
 800569c:	4013      	ands	r3, r2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10f      	bne.n	80056c2 <HAL_TIM_PWM_Stop+0x96>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	6a1a      	ldr	r2, [r3, #32]
 80056a8:	f240 4344 	movw	r3, #1092	; 0x444
 80056ac:	4013      	ands	r3, r2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d107      	bne.n	80056c2 <HAL_TIM_PWM_Stop+0x96>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f022 0201 	bic.w	r2, r2, #1
 80056c0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d104      	bne.n	80056d2 <HAL_TIM_PWM_Stop+0xa6>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056d0:	e013      	b.n	80056fa <HAL_TIM_PWM_Stop+0xce>
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2b04      	cmp	r3, #4
 80056d6:	d104      	bne.n	80056e2 <HAL_TIM_PWM_Stop+0xb6>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056e0:	e00b      	b.n	80056fa <HAL_TIM_PWM_Stop+0xce>
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2b08      	cmp	r3, #8
 80056e6:	d104      	bne.n	80056f2 <HAL_TIM_PWM_Stop+0xc6>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056f0:	e003      	b.n	80056fa <HAL_TIM_PWM_Stop+0xce>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3708      	adds	r7, #8
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	40010000 	.word	0x40010000
 8005708:	40010400 	.word	0x40010400

0800570c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005718:	2300      	movs	r3, #0
 800571a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005722:	2b01      	cmp	r3, #1
 8005724:	d101      	bne.n	800572a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005726:	2302      	movs	r3, #2
 8005728:	e0ae      	b.n	8005888 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2b0c      	cmp	r3, #12
 8005736:	f200 809f 	bhi.w	8005878 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800573a:	a201      	add	r2, pc, #4	; (adr r2, 8005740 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800573c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005740:	08005775 	.word	0x08005775
 8005744:	08005879 	.word	0x08005879
 8005748:	08005879 	.word	0x08005879
 800574c:	08005879 	.word	0x08005879
 8005750:	080057b5 	.word	0x080057b5
 8005754:	08005879 	.word	0x08005879
 8005758:	08005879 	.word	0x08005879
 800575c:	08005879 	.word	0x08005879
 8005760:	080057f7 	.word	0x080057f7
 8005764:	08005879 	.word	0x08005879
 8005768:	08005879 	.word	0x08005879
 800576c:	08005879 	.word	0x08005879
 8005770:	08005837 	.word	0x08005837
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68b9      	ldr	r1, [r7, #8]
 800577a:	4618      	mov	r0, r3
 800577c:	f000 f9f0 	bl	8005b60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	699a      	ldr	r2, [r3, #24]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f042 0208 	orr.w	r2, r2, #8
 800578e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	699a      	ldr	r2, [r3, #24]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f022 0204 	bic.w	r2, r2, #4
 800579e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6999      	ldr	r1, [r3, #24]
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	691a      	ldr	r2, [r3, #16]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	619a      	str	r2, [r3, #24]
      break;
 80057b2:	e064      	b.n	800587e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68b9      	ldr	r1, [r7, #8]
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 fa40 	bl	8005c40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	699a      	ldr	r2, [r3, #24]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	699a      	ldr	r2, [r3, #24]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	6999      	ldr	r1, [r3, #24]
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	021a      	lsls	r2, r3, #8
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	430a      	orrs	r2, r1
 80057f2:	619a      	str	r2, [r3, #24]
      break;
 80057f4:	e043      	b.n	800587e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68b9      	ldr	r1, [r7, #8]
 80057fc:	4618      	mov	r0, r3
 80057fe:	f000 fa95 	bl	8005d2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	69da      	ldr	r2, [r3, #28]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f042 0208 	orr.w	r2, r2, #8
 8005810:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	69da      	ldr	r2, [r3, #28]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f022 0204 	bic.w	r2, r2, #4
 8005820:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	69d9      	ldr	r1, [r3, #28]
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	691a      	ldr	r2, [r3, #16]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	430a      	orrs	r2, r1
 8005832:	61da      	str	r2, [r3, #28]
      break;
 8005834:	e023      	b.n	800587e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68b9      	ldr	r1, [r7, #8]
 800583c:	4618      	mov	r0, r3
 800583e:	f000 fae9 	bl	8005e14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	69da      	ldr	r2, [r3, #28]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005850:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	69da      	ldr	r2, [r3, #28]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005860:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	69d9      	ldr	r1, [r3, #28]
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	021a      	lsls	r2, r3, #8
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	430a      	orrs	r2, r1
 8005874:	61da      	str	r2, [r3, #28]
      break;
 8005876:	e002      	b.n	800587e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	75fb      	strb	r3, [r7, #23]
      break;
 800587c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005886:	7dfb      	ldrb	r3, [r7, #23]
}
 8005888:	4618      	mov	r0, r3
 800588a:	3718      	adds	r7, #24
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800589a:	2300      	movs	r3, #0
 800589c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d101      	bne.n	80058ac <HAL_TIM_ConfigClockSource+0x1c>
 80058a8:	2302      	movs	r3, #2
 80058aa:	e0b4      	b.n	8005a16 <HAL_TIM_ConfigClockSource+0x186>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2202      	movs	r2, #2
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80058ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058e4:	d03e      	beq.n	8005964 <HAL_TIM_ConfigClockSource+0xd4>
 80058e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058ea:	f200 8087 	bhi.w	80059fc <HAL_TIM_ConfigClockSource+0x16c>
 80058ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058f2:	f000 8086 	beq.w	8005a02 <HAL_TIM_ConfigClockSource+0x172>
 80058f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058fa:	d87f      	bhi.n	80059fc <HAL_TIM_ConfigClockSource+0x16c>
 80058fc:	2b70      	cmp	r3, #112	; 0x70
 80058fe:	d01a      	beq.n	8005936 <HAL_TIM_ConfigClockSource+0xa6>
 8005900:	2b70      	cmp	r3, #112	; 0x70
 8005902:	d87b      	bhi.n	80059fc <HAL_TIM_ConfigClockSource+0x16c>
 8005904:	2b60      	cmp	r3, #96	; 0x60
 8005906:	d050      	beq.n	80059aa <HAL_TIM_ConfigClockSource+0x11a>
 8005908:	2b60      	cmp	r3, #96	; 0x60
 800590a:	d877      	bhi.n	80059fc <HAL_TIM_ConfigClockSource+0x16c>
 800590c:	2b50      	cmp	r3, #80	; 0x50
 800590e:	d03c      	beq.n	800598a <HAL_TIM_ConfigClockSource+0xfa>
 8005910:	2b50      	cmp	r3, #80	; 0x50
 8005912:	d873      	bhi.n	80059fc <HAL_TIM_ConfigClockSource+0x16c>
 8005914:	2b40      	cmp	r3, #64	; 0x40
 8005916:	d058      	beq.n	80059ca <HAL_TIM_ConfigClockSource+0x13a>
 8005918:	2b40      	cmp	r3, #64	; 0x40
 800591a:	d86f      	bhi.n	80059fc <HAL_TIM_ConfigClockSource+0x16c>
 800591c:	2b30      	cmp	r3, #48	; 0x30
 800591e:	d064      	beq.n	80059ea <HAL_TIM_ConfigClockSource+0x15a>
 8005920:	2b30      	cmp	r3, #48	; 0x30
 8005922:	d86b      	bhi.n	80059fc <HAL_TIM_ConfigClockSource+0x16c>
 8005924:	2b20      	cmp	r3, #32
 8005926:	d060      	beq.n	80059ea <HAL_TIM_ConfigClockSource+0x15a>
 8005928:	2b20      	cmp	r3, #32
 800592a:	d867      	bhi.n	80059fc <HAL_TIM_ConfigClockSource+0x16c>
 800592c:	2b00      	cmp	r3, #0
 800592e:	d05c      	beq.n	80059ea <HAL_TIM_ConfigClockSource+0x15a>
 8005930:	2b10      	cmp	r3, #16
 8005932:	d05a      	beq.n	80059ea <HAL_TIM_ConfigClockSource+0x15a>
 8005934:	e062      	b.n	80059fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6818      	ldr	r0, [r3, #0]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	6899      	ldr	r1, [r3, #8]
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	685a      	ldr	r2, [r3, #4]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	f000 fb35 	bl	8005fb4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005958:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	609a      	str	r2, [r3, #8]
      break;
 8005962:	e04f      	b.n	8005a04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6818      	ldr	r0, [r3, #0]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	6899      	ldr	r1, [r3, #8]
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	685a      	ldr	r2, [r3, #4]
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	f000 fb1e 	bl	8005fb4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	689a      	ldr	r2, [r3, #8]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005986:	609a      	str	r2, [r3, #8]
      break;
 8005988:	e03c      	b.n	8005a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6818      	ldr	r0, [r3, #0]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	6859      	ldr	r1, [r3, #4]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	461a      	mov	r2, r3
 8005998:	f000 fa92 	bl	8005ec0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2150      	movs	r1, #80	; 0x50
 80059a2:	4618      	mov	r0, r3
 80059a4:	f000 faeb 	bl	8005f7e <TIM_ITRx_SetConfig>
      break;
 80059a8:	e02c      	b.n	8005a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6818      	ldr	r0, [r3, #0]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	6859      	ldr	r1, [r3, #4]
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	461a      	mov	r2, r3
 80059b8:	f000 fab1 	bl	8005f1e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2160      	movs	r1, #96	; 0x60
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 fadb 	bl	8005f7e <TIM_ITRx_SetConfig>
      break;
 80059c8:	e01c      	b.n	8005a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6818      	ldr	r0, [r3, #0]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	6859      	ldr	r1, [r3, #4]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	461a      	mov	r2, r3
 80059d8:	f000 fa72 	bl	8005ec0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2140      	movs	r1, #64	; 0x40
 80059e2:	4618      	mov	r0, r3
 80059e4:	f000 facb 	bl	8005f7e <TIM_ITRx_SetConfig>
      break;
 80059e8:	e00c      	b.n	8005a04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4619      	mov	r1, r3
 80059f4:	4610      	mov	r0, r2
 80059f6:	f000 fac2 	bl	8005f7e <TIM_ITRx_SetConfig>
      break;
 80059fa:	e003      	b.n	8005a04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005a00:	e000      	b.n	8005a04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
	...

08005a20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a40      	ldr	r2, [pc, #256]	; (8005b34 <TIM_Base_SetConfig+0x114>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d013      	beq.n	8005a60 <TIM_Base_SetConfig+0x40>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a3e:	d00f      	beq.n	8005a60 <TIM_Base_SetConfig+0x40>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a3d      	ldr	r2, [pc, #244]	; (8005b38 <TIM_Base_SetConfig+0x118>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d00b      	beq.n	8005a60 <TIM_Base_SetConfig+0x40>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a3c      	ldr	r2, [pc, #240]	; (8005b3c <TIM_Base_SetConfig+0x11c>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d007      	beq.n	8005a60 <TIM_Base_SetConfig+0x40>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a3b      	ldr	r2, [pc, #236]	; (8005b40 <TIM_Base_SetConfig+0x120>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d003      	beq.n	8005a60 <TIM_Base_SetConfig+0x40>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a3a      	ldr	r2, [pc, #232]	; (8005b44 <TIM_Base_SetConfig+0x124>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d108      	bne.n	8005a72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a2f      	ldr	r2, [pc, #188]	; (8005b34 <TIM_Base_SetConfig+0x114>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d02b      	beq.n	8005ad2 <TIM_Base_SetConfig+0xb2>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a80:	d027      	beq.n	8005ad2 <TIM_Base_SetConfig+0xb2>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a2c      	ldr	r2, [pc, #176]	; (8005b38 <TIM_Base_SetConfig+0x118>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d023      	beq.n	8005ad2 <TIM_Base_SetConfig+0xb2>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a2b      	ldr	r2, [pc, #172]	; (8005b3c <TIM_Base_SetConfig+0x11c>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d01f      	beq.n	8005ad2 <TIM_Base_SetConfig+0xb2>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a2a      	ldr	r2, [pc, #168]	; (8005b40 <TIM_Base_SetConfig+0x120>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d01b      	beq.n	8005ad2 <TIM_Base_SetConfig+0xb2>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a29      	ldr	r2, [pc, #164]	; (8005b44 <TIM_Base_SetConfig+0x124>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d017      	beq.n	8005ad2 <TIM_Base_SetConfig+0xb2>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a28      	ldr	r2, [pc, #160]	; (8005b48 <TIM_Base_SetConfig+0x128>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d013      	beq.n	8005ad2 <TIM_Base_SetConfig+0xb2>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a27      	ldr	r2, [pc, #156]	; (8005b4c <TIM_Base_SetConfig+0x12c>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d00f      	beq.n	8005ad2 <TIM_Base_SetConfig+0xb2>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a26      	ldr	r2, [pc, #152]	; (8005b50 <TIM_Base_SetConfig+0x130>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d00b      	beq.n	8005ad2 <TIM_Base_SetConfig+0xb2>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a25      	ldr	r2, [pc, #148]	; (8005b54 <TIM_Base_SetConfig+0x134>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d007      	beq.n	8005ad2 <TIM_Base_SetConfig+0xb2>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a24      	ldr	r2, [pc, #144]	; (8005b58 <TIM_Base_SetConfig+0x138>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d003      	beq.n	8005ad2 <TIM_Base_SetConfig+0xb2>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a23      	ldr	r2, [pc, #140]	; (8005b5c <TIM_Base_SetConfig+0x13c>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d108      	bne.n	8005ae4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ad8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	689a      	ldr	r2, [r3, #8]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a0a      	ldr	r2, [pc, #40]	; (8005b34 <TIM_Base_SetConfig+0x114>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d003      	beq.n	8005b18 <TIM_Base_SetConfig+0xf8>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a0c      	ldr	r2, [pc, #48]	; (8005b44 <TIM_Base_SetConfig+0x124>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d103      	bne.n	8005b20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	691a      	ldr	r2, [r3, #16]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	615a      	str	r2, [r3, #20]
}
 8005b26:	bf00      	nop
 8005b28:	3714      	adds	r7, #20
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	40010000 	.word	0x40010000
 8005b38:	40000400 	.word	0x40000400
 8005b3c:	40000800 	.word	0x40000800
 8005b40:	40000c00 	.word	0x40000c00
 8005b44:	40010400 	.word	0x40010400
 8005b48:	40014000 	.word	0x40014000
 8005b4c:	40014400 	.word	0x40014400
 8005b50:	40014800 	.word	0x40014800
 8005b54:	40001800 	.word	0x40001800
 8005b58:	40001c00 	.word	0x40001c00
 8005b5c:	40002000 	.word	0x40002000

08005b60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b087      	sub	sp, #28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	f023 0201 	bic.w	r2, r3, #1
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f023 0303 	bic.w	r3, r3, #3
 8005b96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	f023 0302 	bic.w	r3, r3, #2
 8005ba8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a20      	ldr	r2, [pc, #128]	; (8005c38 <TIM_OC1_SetConfig+0xd8>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d003      	beq.n	8005bc4 <TIM_OC1_SetConfig+0x64>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a1f      	ldr	r2, [pc, #124]	; (8005c3c <TIM_OC1_SetConfig+0xdc>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d10c      	bne.n	8005bde <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	f023 0308 	bic.w	r3, r3, #8
 8005bca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	f023 0304 	bic.w	r3, r3, #4
 8005bdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a15      	ldr	r2, [pc, #84]	; (8005c38 <TIM_OC1_SetConfig+0xd8>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d003      	beq.n	8005bee <TIM_OC1_SetConfig+0x8e>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a14      	ldr	r2, [pc, #80]	; (8005c3c <TIM_OC1_SetConfig+0xdc>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d111      	bne.n	8005c12 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	693a      	ldr	r2, [r7, #16]
 8005c16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	685a      	ldr	r2, [r3, #4]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	621a      	str	r2, [r3, #32]
}
 8005c2c:	bf00      	nop
 8005c2e:	371c      	adds	r7, #28
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	40010000 	.word	0x40010000
 8005c3c:	40010400 	.word	0x40010400

08005c40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b087      	sub	sp, #28
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	f023 0210 	bic.w	r2, r3, #16
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	021b      	lsls	r3, r3, #8
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f023 0320 	bic.w	r3, r3, #32
 8005c8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	011b      	lsls	r3, r3, #4
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a22      	ldr	r2, [pc, #136]	; (8005d24 <TIM_OC2_SetConfig+0xe4>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d003      	beq.n	8005ca8 <TIM_OC2_SetConfig+0x68>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a21      	ldr	r2, [pc, #132]	; (8005d28 <TIM_OC2_SetConfig+0xe8>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d10d      	bne.n	8005cc4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	011b      	lsls	r3, r3, #4
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cc2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a17      	ldr	r2, [pc, #92]	; (8005d24 <TIM_OC2_SetConfig+0xe4>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d003      	beq.n	8005cd4 <TIM_OC2_SetConfig+0x94>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a16      	ldr	r2, [pc, #88]	; (8005d28 <TIM_OC2_SetConfig+0xe8>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d113      	bne.n	8005cfc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ce2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	621a      	str	r2, [r3, #32]
}
 8005d16:	bf00      	nop
 8005d18:	371c      	adds	r7, #28
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	40010000 	.word	0x40010000
 8005d28:	40010400 	.word	0x40010400

08005d2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b087      	sub	sp, #28
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	69db      	ldr	r3, [r3, #28]
 8005d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f023 0303 	bic.w	r3, r3, #3
 8005d62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	021b      	lsls	r3, r3, #8
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a21      	ldr	r2, [pc, #132]	; (8005e0c <TIM_OC3_SetConfig+0xe0>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d003      	beq.n	8005d92 <TIM_OC3_SetConfig+0x66>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a20      	ldr	r2, [pc, #128]	; (8005e10 <TIM_OC3_SetConfig+0xe4>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d10d      	bne.n	8005dae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	021b      	lsls	r3, r3, #8
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a16      	ldr	r2, [pc, #88]	; (8005e0c <TIM_OC3_SetConfig+0xe0>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d003      	beq.n	8005dbe <TIM_OC3_SetConfig+0x92>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a15      	ldr	r2, [pc, #84]	; (8005e10 <TIM_OC3_SetConfig+0xe4>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d113      	bne.n	8005de6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	011b      	lsls	r3, r3, #4
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	011b      	lsls	r3, r3, #4
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	621a      	str	r2, [r3, #32]
}
 8005e00:	bf00      	nop
 8005e02:	371c      	adds	r7, #28
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr
 8005e0c:	40010000 	.word	0x40010000
 8005e10:	40010400 	.word	0x40010400

08005e14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b087      	sub	sp, #28
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a1b      	ldr	r3, [r3, #32]
 8005e22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	69db      	ldr	r3, [r3, #28]
 8005e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	021b      	lsls	r3, r3, #8
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	031b      	lsls	r3, r3, #12
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a12      	ldr	r2, [pc, #72]	; (8005eb8 <TIM_OC4_SetConfig+0xa4>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d003      	beq.n	8005e7c <TIM_OC4_SetConfig+0x68>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a11      	ldr	r2, [pc, #68]	; (8005ebc <TIM_OC4_SetConfig+0xa8>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d109      	bne.n	8005e90 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	695b      	ldr	r3, [r3, #20]
 8005e88:	019b      	lsls	r3, r3, #6
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	685a      	ldr	r2, [r3, #4]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	621a      	str	r2, [r3, #32]
}
 8005eaa:	bf00      	nop
 8005eac:	371c      	adds	r7, #28
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	40010000 	.word	0x40010000
 8005ebc:	40010400 	.word	0x40010400

08005ec0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b087      	sub	sp, #28
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6a1b      	ldr	r3, [r3, #32]
 8005ed0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	f023 0201 	bic.w	r2, r3, #1
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005eea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	011b      	lsls	r3, r3, #4
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	f023 030a 	bic.w	r3, r3, #10
 8005efc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	621a      	str	r2, [r3, #32]
}
 8005f12:	bf00      	nop
 8005f14:	371c      	adds	r7, #28
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr

08005f1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f1e:	b480      	push	{r7}
 8005f20:	b087      	sub	sp, #28
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	60f8      	str	r0, [r7, #12]
 8005f26:	60b9      	str	r1, [r7, #8]
 8005f28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6a1b      	ldr	r3, [r3, #32]
 8005f2e:	f023 0210 	bic.w	r2, r3, #16
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6a1b      	ldr	r3, [r3, #32]
 8005f40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	031b      	lsls	r3, r3, #12
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f5a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	011b      	lsls	r3, r3, #4
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	697a      	ldr	r2, [r7, #20]
 8005f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	621a      	str	r2, [r3, #32]
}
 8005f72:	bf00      	nop
 8005f74:	371c      	adds	r7, #28
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr

08005f7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b085      	sub	sp, #20
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
 8005f86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f96:	683a      	ldr	r2, [r7, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	f043 0307 	orr.w	r3, r3, #7
 8005fa0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	609a      	str	r2, [r3, #8]
}
 8005fa8:	bf00      	nop
 8005faa:	3714      	adds	r7, #20
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b087      	sub	sp, #28
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]
 8005fc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	021a      	lsls	r2, r3, #8
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	431a      	orrs	r2, r3
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	609a      	str	r2, [r3, #8]
}
 8005fe8:	bf00      	nop
 8005fea:	371c      	adds	r7, #28
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b087      	sub	sp, #28
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	f003 031f 	and.w	r3, r3, #31
 8006006:	2201      	movs	r2, #1
 8006008:	fa02 f303 	lsl.w	r3, r2, r3
 800600c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6a1a      	ldr	r2, [r3, #32]
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	43db      	mvns	r3, r3
 8006016:	401a      	ands	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6a1a      	ldr	r2, [r3, #32]
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	f003 031f 	and.w	r3, r3, #31
 8006026:	6879      	ldr	r1, [r7, #4]
 8006028:	fa01 f303 	lsl.w	r3, r1, r3
 800602c:	431a      	orrs	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	621a      	str	r2, [r3, #32]
}
 8006032:	bf00      	nop
 8006034:	371c      	adds	r7, #28
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
	...

08006040 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006050:	2b01      	cmp	r3, #1
 8006052:	d101      	bne.n	8006058 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006054:	2302      	movs	r3, #2
 8006056:	e05a      	b.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2202      	movs	r2, #2
 8006064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800607e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	4313      	orrs	r3, r2
 8006088:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a21      	ldr	r2, [pc, #132]	; (800611c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d022      	beq.n	80060e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060a4:	d01d      	beq.n	80060e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a1d      	ldr	r2, [pc, #116]	; (8006120 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d018      	beq.n	80060e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a1b      	ldr	r2, [pc, #108]	; (8006124 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d013      	beq.n	80060e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a1a      	ldr	r2, [pc, #104]	; (8006128 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d00e      	beq.n	80060e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a18      	ldr	r2, [pc, #96]	; (800612c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d009      	beq.n	80060e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a17      	ldr	r2, [pc, #92]	; (8006130 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d004      	beq.n	80060e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a15      	ldr	r2, [pc, #84]	; (8006134 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d10c      	bne.n	80060fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3714      	adds	r7, #20
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	40010000 	.word	0x40010000
 8006120:	40000400 	.word	0x40000400
 8006124:	40000800 	.word	0x40000800
 8006128:	40000c00 	.word	0x40000c00
 800612c:	40010400 	.word	0x40010400
 8006130:	40014000 	.word	0x40014000
 8006134:	40001800 	.word	0x40001800

08006138 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d101      	bne.n	800614a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e03f      	b.n	80061ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006150:	b2db      	uxtb	r3, r3
 8006152:	2b00      	cmp	r3, #0
 8006154:	d106      	bne.n	8006164 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f7fc fb24 	bl	80027ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2224      	movs	r2, #36	; 0x24
 8006168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68da      	ldr	r2, [r3, #12]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800617a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 ff49 	bl	8007014 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	691a      	ldr	r2, [r3, #16]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006190:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	695a      	ldr	r2, [r3, #20]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68da      	ldr	r2, [r3, #12]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2220      	movs	r2, #32
 80061bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2220      	movs	r2, #32
 80061c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
	...

080061d4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b08c      	sub	sp, #48	; 0x30
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	4613      	mov	r3, r2
 80061e0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b20      	cmp	r3, #32
 80061ec:	d165      	bne.n	80062ba <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d002      	beq.n	80061fa <HAL_UART_Transmit_DMA+0x26>
 80061f4:	88fb      	ldrh	r3, [r7, #6]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e05e      	b.n	80062bc <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006204:	2b01      	cmp	r3, #1
 8006206:	d101      	bne.n	800620c <HAL_UART_Transmit_DMA+0x38>
 8006208:	2302      	movs	r3, #2
 800620a:	e057      	b.n	80062bc <HAL_UART_Transmit_DMA+0xe8>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	88fa      	ldrh	r2, [r7, #6]
 800621e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	88fa      	ldrh	r2, [r7, #6]
 8006224:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2221      	movs	r2, #33	; 0x21
 8006230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006238:	4a22      	ldr	r2, [pc, #136]	; (80062c4 <HAL_UART_Transmit_DMA+0xf0>)
 800623a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006240:	4a21      	ldr	r2, [pc, #132]	; (80062c8 <HAL_UART_Transmit_DMA+0xf4>)
 8006242:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006248:	4a20      	ldr	r2, [pc, #128]	; (80062cc <HAL_UART_Transmit_DMA+0xf8>)
 800624a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006250:	2200      	movs	r2, #0
 8006252:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8006254:	f107 0308 	add.w	r3, r7, #8
 8006258:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800625e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006260:	6819      	ldr	r1, [r3, #0]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	3304      	adds	r3, #4
 8006268:	461a      	mov	r2, r3
 800626a:	88fb      	ldrh	r3, [r7, #6]
 800626c:	f7fc ff5c 	bl	8003128 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006278:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	3314      	adds	r3, #20
 8006288:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	e853 3f00 	ldrex	r3, [r3]
 8006290:	617b      	str	r3, [r7, #20]
   return(result);
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006298:	62bb      	str	r3, [r7, #40]	; 0x28
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	3314      	adds	r3, #20
 80062a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062a2:	627a      	str	r2, [r7, #36]	; 0x24
 80062a4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a6:	6a39      	ldr	r1, [r7, #32]
 80062a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062aa:	e841 2300 	strex	r3, r2, [r1]
 80062ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1e5      	bne.n	8006282 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80062b6:	2300      	movs	r3, #0
 80062b8:	e000      	b.n	80062bc <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80062ba:	2302      	movs	r3, #2
  }
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3730      	adds	r7, #48	; 0x30
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	080068b5 	.word	0x080068b5
 80062c8:	0800694f 	.word	0x0800694f
 80062cc:	08006ac7 	.word	0x08006ac7

080062d0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	4613      	mov	r3, r2
 80062dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2b20      	cmp	r3, #32
 80062e8:	d11d      	bne.n	8006326 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d002      	beq.n	80062f6 <HAL_UART_Receive_DMA+0x26>
 80062f0:	88fb      	ldrh	r3, [r7, #6]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e016      	b.n	8006328 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006300:	2b01      	cmp	r3, #1
 8006302:	d101      	bne.n	8006308 <HAL_UART_Receive_DMA+0x38>
 8006304:	2302      	movs	r3, #2
 8006306:	e00f      	b.n	8006328 <HAL_UART_Receive_DMA+0x58>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006316:	88fb      	ldrh	r3, [r7, #6]
 8006318:	461a      	mov	r2, r3
 800631a:	68b9      	ldr	r1, [r7, #8]
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f000 fc1d 	bl	8006b5c <UART_Start_Receive_DMA>
 8006322:	4603      	mov	r3, r0
 8006324:	e000      	b.n	8006328 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006326:	2302      	movs	r3, #2
  }
}
 8006328:	4618      	mov	r0, r3
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b0ba      	sub	sp, #232	; 0xe8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006356:	2300      	movs	r3, #0
 8006358:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800635c:	2300      	movs	r3, #0
 800635e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006366:	f003 030f 	and.w	r3, r3, #15
 800636a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800636e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10f      	bne.n	8006396 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800637a:	f003 0320 	and.w	r3, r3, #32
 800637e:	2b00      	cmp	r3, #0
 8006380:	d009      	beq.n	8006396 <HAL_UART_IRQHandler+0x66>
 8006382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006386:	f003 0320 	and.w	r3, r3, #32
 800638a:	2b00      	cmp	r3, #0
 800638c:	d003      	beq.n	8006396 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 fd85 	bl	8006e9e <UART_Receive_IT>
      return;
 8006394:	e256      	b.n	8006844 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006396:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800639a:	2b00      	cmp	r3, #0
 800639c:	f000 80de 	beq.w	800655c <HAL_UART_IRQHandler+0x22c>
 80063a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063a4:	f003 0301 	and.w	r3, r3, #1
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d106      	bne.n	80063ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80063ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063b0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 80d1 	beq.w	800655c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80063ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063be:	f003 0301 	and.w	r3, r3, #1
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00b      	beq.n	80063de <HAL_UART_IRQHandler+0xae>
 80063c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d005      	beq.n	80063de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d6:	f043 0201 	orr.w	r2, r3, #1
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063e2:	f003 0304 	and.w	r3, r3, #4
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00b      	beq.n	8006402 <HAL_UART_IRQHandler+0xd2>
 80063ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063ee:	f003 0301 	and.w	r3, r3, #1
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d005      	beq.n	8006402 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fa:	f043 0202 	orr.w	r2, r3, #2
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00b      	beq.n	8006426 <HAL_UART_IRQHandler+0xf6>
 800640e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006412:	f003 0301 	and.w	r3, r3, #1
 8006416:	2b00      	cmp	r3, #0
 8006418:	d005      	beq.n	8006426 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641e:	f043 0204 	orr.w	r2, r3, #4
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800642a:	f003 0308 	and.w	r3, r3, #8
 800642e:	2b00      	cmp	r3, #0
 8006430:	d011      	beq.n	8006456 <HAL_UART_IRQHandler+0x126>
 8006432:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006436:	f003 0320 	and.w	r3, r3, #32
 800643a:	2b00      	cmp	r3, #0
 800643c:	d105      	bne.n	800644a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800643e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	2b00      	cmp	r3, #0
 8006448:	d005      	beq.n	8006456 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644e:	f043 0208 	orr.w	r2, r3, #8
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645a:	2b00      	cmp	r3, #0
 800645c:	f000 81ed 	beq.w	800683a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006464:	f003 0320 	and.w	r3, r3, #32
 8006468:	2b00      	cmp	r3, #0
 800646a:	d008      	beq.n	800647e <HAL_UART_IRQHandler+0x14e>
 800646c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006470:	f003 0320 	and.w	r3, r3, #32
 8006474:	2b00      	cmp	r3, #0
 8006476:	d002      	beq.n	800647e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 fd10 	bl	8006e9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006488:	2b40      	cmp	r3, #64	; 0x40
 800648a:	bf0c      	ite	eq
 800648c:	2301      	moveq	r3, #1
 800648e:	2300      	movne	r3, #0
 8006490:	b2db      	uxtb	r3, r3
 8006492:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649a:	f003 0308 	and.w	r3, r3, #8
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d103      	bne.n	80064aa <HAL_UART_IRQHandler+0x17a>
 80064a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d04f      	beq.n	800654a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 fc18 	bl	8006ce0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	695b      	ldr	r3, [r3, #20]
 80064b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ba:	2b40      	cmp	r3, #64	; 0x40
 80064bc:	d141      	bne.n	8006542 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	3314      	adds	r3, #20
 80064c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064cc:	e853 3f00 	ldrex	r3, [r3]
 80064d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80064d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	3314      	adds	r3, #20
 80064e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80064ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80064ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80064f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80064fa:	e841 2300 	strex	r3, r2, [r1]
 80064fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006502:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1d9      	bne.n	80064be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650e:	2b00      	cmp	r3, #0
 8006510:	d013      	beq.n	800653a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006516:	4a7d      	ldr	r2, [pc, #500]	; (800670c <HAL_UART_IRQHandler+0x3dc>)
 8006518:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651e:	4618      	mov	r0, r3
 8006520:	f7fc feca 	bl	80032b8 <HAL_DMA_Abort_IT>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d016      	beq.n	8006558 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006534:	4610      	mov	r0, r2
 8006536:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006538:	e00e      	b.n	8006558 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f9a4 	bl	8006888 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006540:	e00a      	b.n	8006558 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 f9a0 	bl	8006888 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006548:	e006      	b.n	8006558 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f99c 	bl	8006888 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006556:	e170      	b.n	800683a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006558:	bf00      	nop
    return;
 800655a:	e16e      	b.n	800683a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006560:	2b01      	cmp	r3, #1
 8006562:	f040 814a 	bne.w	80067fa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800656a:	f003 0310 	and.w	r3, r3, #16
 800656e:	2b00      	cmp	r3, #0
 8006570:	f000 8143 	beq.w	80067fa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006578:	f003 0310 	and.w	r3, r3, #16
 800657c:	2b00      	cmp	r3, #0
 800657e:	f000 813c 	beq.w	80067fa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006582:	2300      	movs	r3, #0
 8006584:	60bb      	str	r3, [r7, #8]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	60bb      	str	r3, [r7, #8]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	60bb      	str	r3, [r7, #8]
 8006596:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	695b      	ldr	r3, [r3, #20]
 800659e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a2:	2b40      	cmp	r3, #64	; 0x40
 80065a4:	f040 80b4 	bne.w	8006710 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80065b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 8140 	beq.w	800683e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80065c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065c6:	429a      	cmp	r2, r3
 80065c8:	f080 8139 	bcs.w	800683e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065d2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d8:	69db      	ldr	r3, [r3, #28]
 80065da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065de:	f000 8088 	beq.w	80066f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	330c      	adds	r3, #12
 80065e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80065f0:	e853 3f00 	ldrex	r3, [r3]
 80065f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80065f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006600:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	330c      	adds	r3, #12
 800660a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800660e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006612:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006616:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800661a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800661e:	e841 2300 	strex	r3, r2, [r1]
 8006622:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006626:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1d9      	bne.n	80065e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	3314      	adds	r3, #20
 8006634:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006638:	e853 3f00 	ldrex	r3, [r3]
 800663c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800663e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006640:	f023 0301 	bic.w	r3, r3, #1
 8006644:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	3314      	adds	r3, #20
 800664e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006652:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006656:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006658:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800665a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800665e:	e841 2300 	strex	r3, r2, [r1]
 8006662:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006664:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1e1      	bne.n	800662e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	3314      	adds	r3, #20
 8006670:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006672:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006674:	e853 3f00 	ldrex	r3, [r3]
 8006678:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800667a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800667c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006680:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	3314      	adds	r3, #20
 800668a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800668e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006690:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006692:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006694:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006696:	e841 2300 	strex	r3, r2, [r1]
 800669a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800669c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1e3      	bne.n	800666a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2220      	movs	r2, #32
 80066a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	330c      	adds	r3, #12
 80066b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ba:	e853 3f00 	ldrex	r3, [r3]
 80066be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80066c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066c2:	f023 0310 	bic.w	r3, r3, #16
 80066c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	330c      	adds	r3, #12
 80066d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80066d4:	65ba      	str	r2, [r7, #88]	; 0x58
 80066d6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80066da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066dc:	e841 2300 	strex	r3, r2, [r1]
 80066e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80066e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d1e3      	bne.n	80066b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7fc fd73 	bl	80031d8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	b29b      	uxth	r3, r3
 8006700:	4619      	mov	r1, r3
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f8ca 	bl	800689c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006708:	e099      	b.n	800683e <HAL_UART_IRQHandler+0x50e>
 800670a:	bf00      	nop
 800670c:	08006da7 	.word	0x08006da7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006718:	b29b      	uxth	r3, r3
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006724:	b29b      	uxth	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	f000 808b 	beq.w	8006842 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800672c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006730:	2b00      	cmp	r3, #0
 8006732:	f000 8086 	beq.w	8006842 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	330c      	adds	r3, #12
 800673c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006740:	e853 3f00 	ldrex	r3, [r3]
 8006744:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006748:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800674c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	330c      	adds	r3, #12
 8006756:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800675a:	647a      	str	r2, [r7, #68]	; 0x44
 800675c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006760:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006762:	e841 2300 	strex	r3, r2, [r1]
 8006766:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1e3      	bne.n	8006736 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	3314      	adds	r3, #20
 8006774:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006778:	e853 3f00 	ldrex	r3, [r3]
 800677c:	623b      	str	r3, [r7, #32]
   return(result);
 800677e:	6a3b      	ldr	r3, [r7, #32]
 8006780:	f023 0301 	bic.w	r3, r3, #1
 8006784:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	3314      	adds	r3, #20
 800678e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006792:	633a      	str	r2, [r7, #48]	; 0x30
 8006794:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006796:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800679a:	e841 2300 	strex	r3, r2, [r1]
 800679e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1e3      	bne.n	800676e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2220      	movs	r2, #32
 80067aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	330c      	adds	r3, #12
 80067ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	e853 3f00 	ldrex	r3, [r3]
 80067c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f023 0310 	bic.w	r3, r3, #16
 80067ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	330c      	adds	r3, #12
 80067d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80067d8:	61fa      	str	r2, [r7, #28]
 80067da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067dc:	69b9      	ldr	r1, [r7, #24]
 80067de:	69fa      	ldr	r2, [r7, #28]
 80067e0:	e841 2300 	strex	r3, r2, [r1]
 80067e4:	617b      	str	r3, [r7, #20]
   return(result);
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1e3      	bne.n	80067b4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067f0:	4619      	mov	r1, r3
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 f852 	bl	800689c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80067f8:	e023      	b.n	8006842 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80067fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006802:	2b00      	cmp	r3, #0
 8006804:	d009      	beq.n	800681a <HAL_UART_IRQHandler+0x4ea>
 8006806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800680a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800680e:	2b00      	cmp	r3, #0
 8006810:	d003      	beq.n	800681a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 fadb 	bl	8006dce <UART_Transmit_IT>
    return;
 8006818:	e014      	b.n	8006844 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800681a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800681e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00e      	beq.n	8006844 <HAL_UART_IRQHandler+0x514>
 8006826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800682a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800682e:	2b00      	cmp	r3, #0
 8006830:	d008      	beq.n	8006844 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fb1b 	bl	8006e6e <UART_EndTransmit_IT>
    return;
 8006838:	e004      	b.n	8006844 <HAL_UART_IRQHandler+0x514>
    return;
 800683a:	bf00      	nop
 800683c:	e002      	b.n	8006844 <HAL_UART_IRQHandler+0x514>
      return;
 800683e:	bf00      	nop
 8006840:	e000      	b.n	8006844 <HAL_UART_IRQHandler+0x514>
      return;
 8006842:	bf00      	nop
  }
}
 8006844:	37e8      	adds	r7, #232	; 0xe8
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop

0800684c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006854:	bf00      	nop
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	460b      	mov	r3, r1
 80068a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b090      	sub	sp, #64	; 0x40
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d137      	bne.n	8006940 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80068d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068d2:	2200      	movs	r2, #0
 80068d4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80068d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	3314      	adds	r3, #20
 80068dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e0:	e853 3f00 	ldrex	r3, [r3]
 80068e4:	623b      	str	r3, [r7, #32]
   return(result);
 80068e6:	6a3b      	ldr	r3, [r7, #32]
 80068e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80068ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	3314      	adds	r3, #20
 80068f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068f6:	633a      	str	r2, [r7, #48]	; 0x30
 80068f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068fe:	e841 2300 	strex	r3, r2, [r1]
 8006902:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1e5      	bne.n	80068d6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800690a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	330c      	adds	r3, #12
 8006910:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	e853 3f00 	ldrex	r3, [r3]
 8006918:	60fb      	str	r3, [r7, #12]
   return(result);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006920:	637b      	str	r3, [r7, #52]	; 0x34
 8006922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	330c      	adds	r3, #12
 8006928:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800692a:	61fa      	str	r2, [r7, #28]
 800692c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692e:	69b9      	ldr	r1, [r7, #24]
 8006930:	69fa      	ldr	r2, [r7, #28]
 8006932:	e841 2300 	strex	r3, r2, [r1]
 8006936:	617b      	str	r3, [r7, #20]
   return(result);
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1e5      	bne.n	800690a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800693e:	e002      	b.n	8006946 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006940:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006942:	f7fb fd9d 	bl	8002480 <HAL_UART_TxCpltCallback>
}
 8006946:	bf00      	nop
 8006948:	3740      	adds	r7, #64	; 0x40
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b084      	sub	sp, #16
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f7ff ff75 	bl	800684c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006962:	bf00      	nop
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b09c      	sub	sp, #112	; 0x70
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006976:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006982:	2b00      	cmp	r3, #0
 8006984:	d172      	bne.n	8006a6c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006988:	2200      	movs	r2, #0
 800698a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800698c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	330c      	adds	r3, #12
 8006992:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006996:	e853 3f00 	ldrex	r3, [r3]
 800699a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800699c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800699e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80069a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	330c      	adds	r3, #12
 80069aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80069ac:	65ba      	str	r2, [r7, #88]	; 0x58
 80069ae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069b4:	e841 2300 	strex	r3, r2, [r1]
 80069b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80069ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d1e5      	bne.n	800698c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	3314      	adds	r3, #20
 80069c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ca:	e853 3f00 	ldrex	r3, [r3]
 80069ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d2:	f023 0301 	bic.w	r3, r3, #1
 80069d6:	667b      	str	r3, [r7, #100]	; 0x64
 80069d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	3314      	adds	r3, #20
 80069de:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80069e0:	647a      	str	r2, [r7, #68]	; 0x44
 80069e2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069e8:	e841 2300 	strex	r3, r2, [r1]
 80069ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1e5      	bne.n	80069c0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	3314      	adds	r3, #20
 80069fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fe:	e853 3f00 	ldrex	r3, [r3]
 8006a02:	623b      	str	r3, [r7, #32]
   return(result);
 8006a04:	6a3b      	ldr	r3, [r7, #32]
 8006a06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a0a:	663b      	str	r3, [r7, #96]	; 0x60
 8006a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	3314      	adds	r3, #20
 8006a12:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a14:	633a      	str	r2, [r7, #48]	; 0x30
 8006a16:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a1c:	e841 2300 	strex	r3, r2, [r1]
 8006a20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1e5      	bne.n	80069f4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006a28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a2a:	2220      	movs	r2, #32
 8006a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d119      	bne.n	8006a6c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	330c      	adds	r3, #12
 8006a3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	e853 3f00 	ldrex	r3, [r3]
 8006a46:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f023 0310 	bic.w	r3, r3, #16
 8006a4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	330c      	adds	r3, #12
 8006a56:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006a58:	61fa      	str	r2, [r7, #28]
 8006a5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5c:	69b9      	ldr	r1, [r7, #24]
 8006a5e:	69fa      	ldr	r2, [r7, #28]
 8006a60:	e841 2300 	strex	r3, r2, [r1]
 8006a64:	617b      	str	r3, [r7, #20]
   return(result);
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1e5      	bne.n	8006a38 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d106      	bne.n	8006a82 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a76:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a78:	4619      	mov	r1, r3
 8006a7a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006a7c:	f7ff ff0e 	bl	800689c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a80:	e002      	b.n	8006a88 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006a82:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006a84:	f7ff feec 	bl	8006860 <HAL_UART_RxCpltCallback>
}
 8006a88:	bf00      	nop
 8006a8a:	3770      	adds	r7, #112	; 0x70
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d108      	bne.n	8006ab8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006aaa:	085b      	lsrs	r3, r3, #1
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	4619      	mov	r1, r3
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f7ff fef3 	bl	800689c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ab6:	e002      	b.n	8006abe <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f7ff fedb 	bl	8006874 <HAL_UART_RxHalfCpltCallback>
}
 8006abe:	bf00      	nop
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b084      	sub	sp, #16
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ae2:	2b80      	cmp	r3, #128	; 0x80
 8006ae4:	bf0c      	ite	eq
 8006ae6:	2301      	moveq	r3, #1
 8006ae8:	2300      	movne	r3, #0
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b21      	cmp	r3, #33	; 0x21
 8006af8:	d108      	bne.n	8006b0c <UART_DMAError+0x46>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d005      	beq.n	8006b0c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	2200      	movs	r2, #0
 8006b04:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006b06:	68b8      	ldr	r0, [r7, #8]
 8006b08:	f000 f8c2 	bl	8006c90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b16:	2b40      	cmp	r3, #64	; 0x40
 8006b18:	bf0c      	ite	eq
 8006b1a:	2301      	moveq	r3, #1
 8006b1c:	2300      	movne	r3, #0
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	2b22      	cmp	r3, #34	; 0x22
 8006b2c:	d108      	bne.n	8006b40 <UART_DMAError+0x7a>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d005      	beq.n	8006b40 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	2200      	movs	r2, #0
 8006b38:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006b3a:	68b8      	ldr	r0, [r7, #8]
 8006b3c:	f000 f8d0 	bl	8006ce0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b44:	f043 0210 	orr.w	r2, r3, #16
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b4c:	68b8      	ldr	r0, [r7, #8]
 8006b4e:	f7ff fe9b 	bl	8006888 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b52:	bf00      	nop
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
	...

08006b5c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b098      	sub	sp, #96	; 0x60
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	4613      	mov	r3, r2
 8006b68:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006b6a:	68ba      	ldr	r2, [r7, #8]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	88fa      	ldrh	r2, [r7, #6]
 8006b74:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2222      	movs	r2, #34	; 0x22
 8006b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b88:	4a3e      	ldr	r2, [pc, #248]	; (8006c84 <UART_Start_Receive_DMA+0x128>)
 8006b8a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b90:	4a3d      	ldr	r2, [pc, #244]	; (8006c88 <UART_Start_Receive_DMA+0x12c>)
 8006b92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b98:	4a3c      	ldr	r2, [pc, #240]	; (8006c8c <UART_Start_Receive_DMA+0x130>)
 8006b9a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006ba4:	f107 0308 	add.w	r3, r7, #8
 8006ba8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	3304      	adds	r3, #4
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	88fb      	ldrh	r3, [r7, #6]
 8006bbc:	f7fc fab4 	bl	8003128 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	613b      	str	r3, [r7, #16]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	613b      	str	r3, [r7, #16]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	613b      	str	r3, [r7, #16]
 8006bd4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	330c      	adds	r3, #12
 8006be4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006be8:	e853 3f00 	ldrex	r3, [r3]
 8006bec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bf4:	65bb      	str	r3, [r7, #88]	; 0x58
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	330c      	adds	r3, #12
 8006bfc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006bfe:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006c00:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c02:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006c04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c06:	e841 2300 	strex	r3, r2, [r1]
 8006c0a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1e5      	bne.n	8006bde <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	3314      	adds	r3, #20
 8006c18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1c:	e853 3f00 	ldrex	r3, [r3]
 8006c20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c24:	f043 0301 	orr.w	r3, r3, #1
 8006c28:	657b      	str	r3, [r7, #84]	; 0x54
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	3314      	adds	r3, #20
 8006c30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006c32:	63ba      	str	r2, [r7, #56]	; 0x38
 8006c34:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c36:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006c38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c3a:	e841 2300 	strex	r3, r2, [r1]
 8006c3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1e5      	bne.n	8006c12 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	3314      	adds	r3, #20
 8006c4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	e853 3f00 	ldrex	r3, [r3]
 8006c54:	617b      	str	r3, [r7, #20]
   return(result);
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c5c:	653b      	str	r3, [r7, #80]	; 0x50
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	3314      	adds	r3, #20
 8006c64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006c66:	627a      	str	r2, [r7, #36]	; 0x24
 8006c68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6a:	6a39      	ldr	r1, [r7, #32]
 8006c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c6e:	e841 2300 	strex	r3, r2, [r1]
 8006c72:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1e5      	bne.n	8006c46 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3760      	adds	r7, #96	; 0x60
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	0800696b 	.word	0x0800696b
 8006c88:	08006a91 	.word	0x08006a91
 8006c8c:	08006ac7 	.word	0x08006ac7

08006c90 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b089      	sub	sp, #36	; 0x24
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	330c      	adds	r3, #12
 8006c9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	e853 3f00 	ldrex	r3, [r3]
 8006ca6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006cae:	61fb      	str	r3, [r7, #28]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	330c      	adds	r3, #12
 8006cb6:	69fa      	ldr	r2, [r7, #28]
 8006cb8:	61ba      	str	r2, [r7, #24]
 8006cba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cbc:	6979      	ldr	r1, [r7, #20]
 8006cbe:	69ba      	ldr	r2, [r7, #24]
 8006cc0:	e841 2300 	strex	r3, r2, [r1]
 8006cc4:	613b      	str	r3, [r7, #16]
   return(result);
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1e5      	bne.n	8006c98 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2220      	movs	r2, #32
 8006cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006cd4:	bf00      	nop
 8006cd6:	3724      	adds	r7, #36	; 0x24
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b095      	sub	sp, #84	; 0x54
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	330c      	adds	r3, #12
 8006cee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cf2:	e853 3f00 	ldrex	r3, [r3]
 8006cf6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	330c      	adds	r3, #12
 8006d06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d08:	643a      	str	r2, [r7, #64]	; 0x40
 8006d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d10:	e841 2300 	strex	r3, r2, [r1]
 8006d14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1e5      	bne.n	8006ce8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	3314      	adds	r3, #20
 8006d22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d24:	6a3b      	ldr	r3, [r7, #32]
 8006d26:	e853 3f00 	ldrex	r3, [r3]
 8006d2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	f023 0301 	bic.w	r3, r3, #1
 8006d32:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	3314      	adds	r3, #20
 8006d3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d44:	e841 2300 	strex	r3, r2, [r1]
 8006d48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1e5      	bne.n	8006d1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d119      	bne.n	8006d8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	330c      	adds	r3, #12
 8006d5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	e853 3f00 	ldrex	r3, [r3]
 8006d66:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	f023 0310 	bic.w	r3, r3, #16
 8006d6e:	647b      	str	r3, [r7, #68]	; 0x44
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	330c      	adds	r3, #12
 8006d76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d78:	61ba      	str	r2, [r7, #24]
 8006d7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7c:	6979      	ldr	r1, [r7, #20]
 8006d7e:	69ba      	ldr	r2, [r7, #24]
 8006d80:	e841 2300 	strex	r3, r2, [r1]
 8006d84:	613b      	str	r3, [r7, #16]
   return(result);
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1e5      	bne.n	8006d58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2220      	movs	r2, #32
 8006d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006d9a:	bf00      	nop
 8006d9c:	3754      	adds	r7, #84	; 0x54
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b084      	sub	sp, #16
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2200      	movs	r2, #0
 8006db8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f7ff fd61 	bl	8006888 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dc6:	bf00      	nop
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b085      	sub	sp, #20
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	2b21      	cmp	r3, #33	; 0x21
 8006de0:	d13e      	bne.n	8006e60 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dea:	d114      	bne.n	8006e16 <UART_Transmit_IT+0x48>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	691b      	ldr	r3, [r3, #16]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d110      	bne.n	8006e16 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a1b      	ldr	r3, [r3, #32]
 8006df8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	881b      	ldrh	r3, [r3, #0]
 8006dfe:	461a      	mov	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e08:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	1c9a      	adds	r2, r3, #2
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	621a      	str	r2, [r3, #32]
 8006e14:	e008      	b.n	8006e28 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	1c59      	adds	r1, r3, #1
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	6211      	str	r1, [r2, #32]
 8006e20:	781a      	ldrb	r2, [r3, #0]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	4619      	mov	r1, r3
 8006e36:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d10f      	bne.n	8006e5c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68da      	ldr	r2, [r3, #12]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68da      	ldr	r2, [r3, #12]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	e000      	b.n	8006e62 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006e60:	2302      	movs	r3, #2
  }
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3714      	adds	r7, #20
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b082      	sub	sp, #8
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68da      	ldr	r2, [r3, #12]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2220      	movs	r2, #32
 8006e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f7fb faf6 	bl	8002480 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3708      	adds	r7, #8
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b08c      	sub	sp, #48	; 0x30
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	2b22      	cmp	r3, #34	; 0x22
 8006eb0:	f040 80ab 	bne.w	800700a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ebc:	d117      	bne.n	8006eee <UART_Receive_IT+0x50>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d113      	bne.n	8006eee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ece:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee6:	1c9a      	adds	r2, r3, #2
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	629a      	str	r2, [r3, #40]	; 0x28
 8006eec:	e026      	b.n	8006f3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f00:	d007      	beq.n	8006f12 <UART_Receive_IT+0x74>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d10a      	bne.n	8006f20 <UART_Receive_IT+0x82>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d106      	bne.n	8006f20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	b2da      	uxtb	r2, r3
 8006f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f1c:	701a      	strb	r2, [r3, #0]
 8006f1e:	e008      	b.n	8006f32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f2c:	b2da      	uxtb	r2, r3
 8006f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f36:	1c5a      	adds	r2, r3, #1
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	3b01      	subs	r3, #1
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	4619      	mov	r1, r3
 8006f4a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d15a      	bne.n	8007006 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68da      	ldr	r2, [r3, #12]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f022 0220 	bic.w	r2, r2, #32
 8006f5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68da      	ldr	r2, [r3, #12]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	695a      	ldr	r2, [r3, #20]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f022 0201 	bic.w	r2, r2, #1
 8006f7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2220      	movs	r2, #32
 8006f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d135      	bne.n	8006ffc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	330c      	adds	r3, #12
 8006f9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	e853 3f00 	ldrex	r3, [r3]
 8006fa4:	613b      	str	r3, [r7, #16]
   return(result);
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	f023 0310 	bic.w	r3, r3, #16
 8006fac:	627b      	str	r3, [r7, #36]	; 0x24
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	330c      	adds	r3, #12
 8006fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fb6:	623a      	str	r2, [r7, #32]
 8006fb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fba:	69f9      	ldr	r1, [r7, #28]
 8006fbc:	6a3a      	ldr	r2, [r7, #32]
 8006fbe:	e841 2300 	strex	r3, r2, [r1]
 8006fc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1e5      	bne.n	8006f96 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 0310 	and.w	r3, r3, #16
 8006fd4:	2b10      	cmp	r3, #16
 8006fd6:	d10a      	bne.n	8006fee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006fd8:	2300      	movs	r3, #0
 8006fda:	60fb      	str	r3, [r7, #12]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	60fb      	str	r3, [r7, #12]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	60fb      	str	r3, [r7, #12]
 8006fec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f7ff fc51 	bl	800689c <HAL_UARTEx_RxEventCallback>
 8006ffa:	e002      	b.n	8007002 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f7ff fc2f 	bl	8006860 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007002:	2300      	movs	r3, #0
 8007004:	e002      	b.n	800700c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007006:	2300      	movs	r3, #0
 8007008:	e000      	b.n	800700c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800700a:	2302      	movs	r3, #2
  }
}
 800700c:	4618      	mov	r0, r3
 800700e:	3730      	adds	r7, #48	; 0x30
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007018:	b09f      	sub	sp, #124	; 0x7c
 800701a:	af00      	add	r7, sp, #0
 800701c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800701e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800702a:	68d9      	ldr	r1, [r3, #12]
 800702c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	ea40 0301 	orr.w	r3, r0, r1
 8007034:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007038:	689a      	ldr	r2, [r3, #8]
 800703a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	431a      	orrs	r2, r3
 8007040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007042:	695b      	ldr	r3, [r3, #20]
 8007044:	431a      	orrs	r2, r3
 8007046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007048:	69db      	ldr	r3, [r3, #28]
 800704a:	4313      	orrs	r3, r2
 800704c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800704e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007058:	f021 010c 	bic.w	r1, r1, #12
 800705c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007062:	430b      	orrs	r3, r1
 8007064:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	695b      	ldr	r3, [r3, #20]
 800706c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007072:	6999      	ldr	r1, [r3, #24]
 8007074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	ea40 0301 	orr.w	r3, r0, r1
 800707c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800707e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	4bc5      	ldr	r3, [pc, #788]	; (8007398 <UART_SetConfig+0x384>)
 8007084:	429a      	cmp	r2, r3
 8007086:	d004      	beq.n	8007092 <UART_SetConfig+0x7e>
 8007088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	4bc3      	ldr	r3, [pc, #780]	; (800739c <UART_SetConfig+0x388>)
 800708e:	429a      	cmp	r2, r3
 8007090:	d103      	bne.n	800709a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007092:	f7fe f947 	bl	8005324 <HAL_RCC_GetPCLK2Freq>
 8007096:	6778      	str	r0, [r7, #116]	; 0x74
 8007098:	e002      	b.n	80070a0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800709a:	f7fe f92f 	bl	80052fc <HAL_RCC_GetPCLK1Freq>
 800709e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070a2:	69db      	ldr	r3, [r3, #28]
 80070a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070a8:	f040 80b6 	bne.w	8007218 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80070ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070ae:	461c      	mov	r4, r3
 80070b0:	f04f 0500 	mov.w	r5, #0
 80070b4:	4622      	mov	r2, r4
 80070b6:	462b      	mov	r3, r5
 80070b8:	1891      	adds	r1, r2, r2
 80070ba:	6439      	str	r1, [r7, #64]	; 0x40
 80070bc:	415b      	adcs	r3, r3
 80070be:	647b      	str	r3, [r7, #68]	; 0x44
 80070c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80070c4:	1912      	adds	r2, r2, r4
 80070c6:	eb45 0303 	adc.w	r3, r5, r3
 80070ca:	f04f 0000 	mov.w	r0, #0
 80070ce:	f04f 0100 	mov.w	r1, #0
 80070d2:	00d9      	lsls	r1, r3, #3
 80070d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80070d8:	00d0      	lsls	r0, r2, #3
 80070da:	4602      	mov	r2, r0
 80070dc:	460b      	mov	r3, r1
 80070de:	1911      	adds	r1, r2, r4
 80070e0:	6639      	str	r1, [r7, #96]	; 0x60
 80070e2:	416b      	adcs	r3, r5
 80070e4:	667b      	str	r3, [r7, #100]	; 0x64
 80070e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	461a      	mov	r2, r3
 80070ec:	f04f 0300 	mov.w	r3, #0
 80070f0:	1891      	adds	r1, r2, r2
 80070f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80070f4:	415b      	adcs	r3, r3
 80070f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80070fc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007100:	f7f9 f862 	bl	80001c8 <__aeabi_uldivmod>
 8007104:	4602      	mov	r2, r0
 8007106:	460b      	mov	r3, r1
 8007108:	4ba5      	ldr	r3, [pc, #660]	; (80073a0 <UART_SetConfig+0x38c>)
 800710a:	fba3 2302 	umull	r2, r3, r3, r2
 800710e:	095b      	lsrs	r3, r3, #5
 8007110:	011e      	lsls	r6, r3, #4
 8007112:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007114:	461c      	mov	r4, r3
 8007116:	f04f 0500 	mov.w	r5, #0
 800711a:	4622      	mov	r2, r4
 800711c:	462b      	mov	r3, r5
 800711e:	1891      	adds	r1, r2, r2
 8007120:	6339      	str	r1, [r7, #48]	; 0x30
 8007122:	415b      	adcs	r3, r3
 8007124:	637b      	str	r3, [r7, #52]	; 0x34
 8007126:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800712a:	1912      	adds	r2, r2, r4
 800712c:	eb45 0303 	adc.w	r3, r5, r3
 8007130:	f04f 0000 	mov.w	r0, #0
 8007134:	f04f 0100 	mov.w	r1, #0
 8007138:	00d9      	lsls	r1, r3, #3
 800713a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800713e:	00d0      	lsls	r0, r2, #3
 8007140:	4602      	mov	r2, r0
 8007142:	460b      	mov	r3, r1
 8007144:	1911      	adds	r1, r2, r4
 8007146:	65b9      	str	r1, [r7, #88]	; 0x58
 8007148:	416b      	adcs	r3, r5
 800714a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800714c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	461a      	mov	r2, r3
 8007152:	f04f 0300 	mov.w	r3, #0
 8007156:	1891      	adds	r1, r2, r2
 8007158:	62b9      	str	r1, [r7, #40]	; 0x28
 800715a:	415b      	adcs	r3, r3
 800715c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800715e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007162:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007166:	f7f9 f82f 	bl	80001c8 <__aeabi_uldivmod>
 800716a:	4602      	mov	r2, r0
 800716c:	460b      	mov	r3, r1
 800716e:	4b8c      	ldr	r3, [pc, #560]	; (80073a0 <UART_SetConfig+0x38c>)
 8007170:	fba3 1302 	umull	r1, r3, r3, r2
 8007174:	095b      	lsrs	r3, r3, #5
 8007176:	2164      	movs	r1, #100	; 0x64
 8007178:	fb01 f303 	mul.w	r3, r1, r3
 800717c:	1ad3      	subs	r3, r2, r3
 800717e:	00db      	lsls	r3, r3, #3
 8007180:	3332      	adds	r3, #50	; 0x32
 8007182:	4a87      	ldr	r2, [pc, #540]	; (80073a0 <UART_SetConfig+0x38c>)
 8007184:	fba2 2303 	umull	r2, r3, r2, r3
 8007188:	095b      	lsrs	r3, r3, #5
 800718a:	005b      	lsls	r3, r3, #1
 800718c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007190:	441e      	add	r6, r3
 8007192:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007194:	4618      	mov	r0, r3
 8007196:	f04f 0100 	mov.w	r1, #0
 800719a:	4602      	mov	r2, r0
 800719c:	460b      	mov	r3, r1
 800719e:	1894      	adds	r4, r2, r2
 80071a0:	623c      	str	r4, [r7, #32]
 80071a2:	415b      	adcs	r3, r3
 80071a4:	627b      	str	r3, [r7, #36]	; 0x24
 80071a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80071aa:	1812      	adds	r2, r2, r0
 80071ac:	eb41 0303 	adc.w	r3, r1, r3
 80071b0:	f04f 0400 	mov.w	r4, #0
 80071b4:	f04f 0500 	mov.w	r5, #0
 80071b8:	00dd      	lsls	r5, r3, #3
 80071ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80071be:	00d4      	lsls	r4, r2, #3
 80071c0:	4622      	mov	r2, r4
 80071c2:	462b      	mov	r3, r5
 80071c4:	1814      	adds	r4, r2, r0
 80071c6:	653c      	str	r4, [r7, #80]	; 0x50
 80071c8:	414b      	adcs	r3, r1
 80071ca:	657b      	str	r3, [r7, #84]	; 0x54
 80071cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	461a      	mov	r2, r3
 80071d2:	f04f 0300 	mov.w	r3, #0
 80071d6:	1891      	adds	r1, r2, r2
 80071d8:	61b9      	str	r1, [r7, #24]
 80071da:	415b      	adcs	r3, r3
 80071dc:	61fb      	str	r3, [r7, #28]
 80071de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80071e2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80071e6:	f7f8 ffef 	bl	80001c8 <__aeabi_uldivmod>
 80071ea:	4602      	mov	r2, r0
 80071ec:	460b      	mov	r3, r1
 80071ee:	4b6c      	ldr	r3, [pc, #432]	; (80073a0 <UART_SetConfig+0x38c>)
 80071f0:	fba3 1302 	umull	r1, r3, r3, r2
 80071f4:	095b      	lsrs	r3, r3, #5
 80071f6:	2164      	movs	r1, #100	; 0x64
 80071f8:	fb01 f303 	mul.w	r3, r1, r3
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	00db      	lsls	r3, r3, #3
 8007200:	3332      	adds	r3, #50	; 0x32
 8007202:	4a67      	ldr	r2, [pc, #412]	; (80073a0 <UART_SetConfig+0x38c>)
 8007204:	fba2 2303 	umull	r2, r3, r2, r3
 8007208:	095b      	lsrs	r3, r3, #5
 800720a:	f003 0207 	and.w	r2, r3, #7
 800720e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4432      	add	r2, r6
 8007214:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007216:	e0b9      	b.n	800738c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007218:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800721a:	461c      	mov	r4, r3
 800721c:	f04f 0500 	mov.w	r5, #0
 8007220:	4622      	mov	r2, r4
 8007222:	462b      	mov	r3, r5
 8007224:	1891      	adds	r1, r2, r2
 8007226:	6139      	str	r1, [r7, #16]
 8007228:	415b      	adcs	r3, r3
 800722a:	617b      	str	r3, [r7, #20]
 800722c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007230:	1912      	adds	r2, r2, r4
 8007232:	eb45 0303 	adc.w	r3, r5, r3
 8007236:	f04f 0000 	mov.w	r0, #0
 800723a:	f04f 0100 	mov.w	r1, #0
 800723e:	00d9      	lsls	r1, r3, #3
 8007240:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007244:	00d0      	lsls	r0, r2, #3
 8007246:	4602      	mov	r2, r0
 8007248:	460b      	mov	r3, r1
 800724a:	eb12 0804 	adds.w	r8, r2, r4
 800724e:	eb43 0905 	adc.w	r9, r3, r5
 8007252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	4618      	mov	r0, r3
 8007258:	f04f 0100 	mov.w	r1, #0
 800725c:	f04f 0200 	mov.w	r2, #0
 8007260:	f04f 0300 	mov.w	r3, #0
 8007264:	008b      	lsls	r3, r1, #2
 8007266:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800726a:	0082      	lsls	r2, r0, #2
 800726c:	4640      	mov	r0, r8
 800726e:	4649      	mov	r1, r9
 8007270:	f7f8 ffaa 	bl	80001c8 <__aeabi_uldivmod>
 8007274:	4602      	mov	r2, r0
 8007276:	460b      	mov	r3, r1
 8007278:	4b49      	ldr	r3, [pc, #292]	; (80073a0 <UART_SetConfig+0x38c>)
 800727a:	fba3 2302 	umull	r2, r3, r3, r2
 800727e:	095b      	lsrs	r3, r3, #5
 8007280:	011e      	lsls	r6, r3, #4
 8007282:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007284:	4618      	mov	r0, r3
 8007286:	f04f 0100 	mov.w	r1, #0
 800728a:	4602      	mov	r2, r0
 800728c:	460b      	mov	r3, r1
 800728e:	1894      	adds	r4, r2, r2
 8007290:	60bc      	str	r4, [r7, #8]
 8007292:	415b      	adcs	r3, r3
 8007294:	60fb      	str	r3, [r7, #12]
 8007296:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800729a:	1812      	adds	r2, r2, r0
 800729c:	eb41 0303 	adc.w	r3, r1, r3
 80072a0:	f04f 0400 	mov.w	r4, #0
 80072a4:	f04f 0500 	mov.w	r5, #0
 80072a8:	00dd      	lsls	r5, r3, #3
 80072aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80072ae:	00d4      	lsls	r4, r2, #3
 80072b0:	4622      	mov	r2, r4
 80072b2:	462b      	mov	r3, r5
 80072b4:	1814      	adds	r4, r2, r0
 80072b6:	64bc      	str	r4, [r7, #72]	; 0x48
 80072b8:	414b      	adcs	r3, r1
 80072ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	4618      	mov	r0, r3
 80072c2:	f04f 0100 	mov.w	r1, #0
 80072c6:	f04f 0200 	mov.w	r2, #0
 80072ca:	f04f 0300 	mov.w	r3, #0
 80072ce:	008b      	lsls	r3, r1, #2
 80072d0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80072d4:	0082      	lsls	r2, r0, #2
 80072d6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80072da:	f7f8 ff75 	bl	80001c8 <__aeabi_uldivmod>
 80072de:	4602      	mov	r2, r0
 80072e0:	460b      	mov	r3, r1
 80072e2:	4b2f      	ldr	r3, [pc, #188]	; (80073a0 <UART_SetConfig+0x38c>)
 80072e4:	fba3 1302 	umull	r1, r3, r3, r2
 80072e8:	095b      	lsrs	r3, r3, #5
 80072ea:	2164      	movs	r1, #100	; 0x64
 80072ec:	fb01 f303 	mul.w	r3, r1, r3
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	011b      	lsls	r3, r3, #4
 80072f4:	3332      	adds	r3, #50	; 0x32
 80072f6:	4a2a      	ldr	r2, [pc, #168]	; (80073a0 <UART_SetConfig+0x38c>)
 80072f8:	fba2 2303 	umull	r2, r3, r2, r3
 80072fc:	095b      	lsrs	r3, r3, #5
 80072fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007302:	441e      	add	r6, r3
 8007304:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007306:	4618      	mov	r0, r3
 8007308:	f04f 0100 	mov.w	r1, #0
 800730c:	4602      	mov	r2, r0
 800730e:	460b      	mov	r3, r1
 8007310:	1894      	adds	r4, r2, r2
 8007312:	603c      	str	r4, [r7, #0]
 8007314:	415b      	adcs	r3, r3
 8007316:	607b      	str	r3, [r7, #4]
 8007318:	e9d7 2300 	ldrd	r2, r3, [r7]
 800731c:	1812      	adds	r2, r2, r0
 800731e:	eb41 0303 	adc.w	r3, r1, r3
 8007322:	f04f 0400 	mov.w	r4, #0
 8007326:	f04f 0500 	mov.w	r5, #0
 800732a:	00dd      	lsls	r5, r3, #3
 800732c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007330:	00d4      	lsls	r4, r2, #3
 8007332:	4622      	mov	r2, r4
 8007334:	462b      	mov	r3, r5
 8007336:	eb12 0a00 	adds.w	sl, r2, r0
 800733a:	eb43 0b01 	adc.w	fp, r3, r1
 800733e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	4618      	mov	r0, r3
 8007344:	f04f 0100 	mov.w	r1, #0
 8007348:	f04f 0200 	mov.w	r2, #0
 800734c:	f04f 0300 	mov.w	r3, #0
 8007350:	008b      	lsls	r3, r1, #2
 8007352:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007356:	0082      	lsls	r2, r0, #2
 8007358:	4650      	mov	r0, sl
 800735a:	4659      	mov	r1, fp
 800735c:	f7f8 ff34 	bl	80001c8 <__aeabi_uldivmod>
 8007360:	4602      	mov	r2, r0
 8007362:	460b      	mov	r3, r1
 8007364:	4b0e      	ldr	r3, [pc, #56]	; (80073a0 <UART_SetConfig+0x38c>)
 8007366:	fba3 1302 	umull	r1, r3, r3, r2
 800736a:	095b      	lsrs	r3, r3, #5
 800736c:	2164      	movs	r1, #100	; 0x64
 800736e:	fb01 f303 	mul.w	r3, r1, r3
 8007372:	1ad3      	subs	r3, r2, r3
 8007374:	011b      	lsls	r3, r3, #4
 8007376:	3332      	adds	r3, #50	; 0x32
 8007378:	4a09      	ldr	r2, [pc, #36]	; (80073a0 <UART_SetConfig+0x38c>)
 800737a:	fba2 2303 	umull	r2, r3, r2, r3
 800737e:	095b      	lsrs	r3, r3, #5
 8007380:	f003 020f 	and.w	r2, r3, #15
 8007384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4432      	add	r2, r6
 800738a:	609a      	str	r2, [r3, #8]
}
 800738c:	bf00      	nop
 800738e:	377c      	adds	r7, #124	; 0x7c
 8007390:	46bd      	mov	sp, r7
 8007392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007396:	bf00      	nop
 8007398:	40011000 	.word	0x40011000
 800739c:	40011400 	.word	0x40011400
 80073a0:	51eb851f 	.word	0x51eb851f

080073a4 <__errno>:
 80073a4:	4b01      	ldr	r3, [pc, #4]	; (80073ac <__errno+0x8>)
 80073a6:	6818      	ldr	r0, [r3, #0]
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	20000094 	.word	0x20000094

080073b0 <__libc_init_array>:
 80073b0:	b570      	push	{r4, r5, r6, lr}
 80073b2:	4d0d      	ldr	r5, [pc, #52]	; (80073e8 <__libc_init_array+0x38>)
 80073b4:	4c0d      	ldr	r4, [pc, #52]	; (80073ec <__libc_init_array+0x3c>)
 80073b6:	1b64      	subs	r4, r4, r5
 80073b8:	10a4      	asrs	r4, r4, #2
 80073ba:	2600      	movs	r6, #0
 80073bc:	42a6      	cmp	r6, r4
 80073be:	d109      	bne.n	80073d4 <__libc_init_array+0x24>
 80073c0:	4d0b      	ldr	r5, [pc, #44]	; (80073f0 <__libc_init_array+0x40>)
 80073c2:	4c0c      	ldr	r4, [pc, #48]	; (80073f4 <__libc_init_array+0x44>)
 80073c4:	f000 fee2 	bl	800818c <_init>
 80073c8:	1b64      	subs	r4, r4, r5
 80073ca:	10a4      	asrs	r4, r4, #2
 80073cc:	2600      	movs	r6, #0
 80073ce:	42a6      	cmp	r6, r4
 80073d0:	d105      	bne.n	80073de <__libc_init_array+0x2e>
 80073d2:	bd70      	pop	{r4, r5, r6, pc}
 80073d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80073d8:	4798      	blx	r3
 80073da:	3601      	adds	r6, #1
 80073dc:	e7ee      	b.n	80073bc <__libc_init_array+0xc>
 80073de:	f855 3b04 	ldr.w	r3, [r5], #4
 80073e2:	4798      	blx	r3
 80073e4:	3601      	adds	r6, #1
 80073e6:	e7f2      	b.n	80073ce <__libc_init_array+0x1e>
 80073e8:	0800861c 	.word	0x0800861c
 80073ec:	0800861c 	.word	0x0800861c
 80073f0:	0800861c 	.word	0x0800861c
 80073f4:	08008620 	.word	0x08008620

080073f8 <memcpy>:
 80073f8:	440a      	add	r2, r1
 80073fa:	4291      	cmp	r1, r2
 80073fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007400:	d100      	bne.n	8007404 <memcpy+0xc>
 8007402:	4770      	bx	lr
 8007404:	b510      	push	{r4, lr}
 8007406:	f811 4b01 	ldrb.w	r4, [r1], #1
 800740a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800740e:	4291      	cmp	r1, r2
 8007410:	d1f9      	bne.n	8007406 <memcpy+0xe>
 8007412:	bd10      	pop	{r4, pc}

08007414 <memset>:
 8007414:	4402      	add	r2, r0
 8007416:	4603      	mov	r3, r0
 8007418:	4293      	cmp	r3, r2
 800741a:	d100      	bne.n	800741e <memset+0xa>
 800741c:	4770      	bx	lr
 800741e:	f803 1b01 	strb.w	r1, [r3], #1
 8007422:	e7f9      	b.n	8007418 <memset+0x4>

08007424 <sinf>:
 8007424:	ee10 3a10 	vmov	r3, s0
 8007428:	b507      	push	{r0, r1, r2, lr}
 800742a:	4a1d      	ldr	r2, [pc, #116]	; (80074a0 <sinf+0x7c>)
 800742c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007430:	4293      	cmp	r3, r2
 8007432:	dc05      	bgt.n	8007440 <sinf+0x1c>
 8007434:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80074a4 <sinf+0x80>
 8007438:	2000      	movs	r0, #0
 800743a:	f000 fd9d 	bl	8007f78 <__kernel_sinf>
 800743e:	e004      	b.n	800744a <sinf+0x26>
 8007440:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007444:	db04      	blt.n	8007450 <sinf+0x2c>
 8007446:	ee30 0a40 	vsub.f32	s0, s0, s0
 800744a:	b003      	add	sp, #12
 800744c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007450:	4668      	mov	r0, sp
 8007452:	f000 f967 	bl	8007724 <__ieee754_rem_pio2f>
 8007456:	f000 0003 	and.w	r0, r0, #3
 800745a:	2801      	cmp	r0, #1
 800745c:	d008      	beq.n	8007470 <sinf+0x4c>
 800745e:	2802      	cmp	r0, #2
 8007460:	d00d      	beq.n	800747e <sinf+0x5a>
 8007462:	b9b0      	cbnz	r0, 8007492 <sinf+0x6e>
 8007464:	eddd 0a01 	vldr	s1, [sp, #4]
 8007468:	ed9d 0a00 	vldr	s0, [sp]
 800746c:	2001      	movs	r0, #1
 800746e:	e7e4      	b.n	800743a <sinf+0x16>
 8007470:	eddd 0a01 	vldr	s1, [sp, #4]
 8007474:	ed9d 0a00 	vldr	s0, [sp]
 8007478:	f000 fa94 	bl	80079a4 <__kernel_cosf>
 800747c:	e7e5      	b.n	800744a <sinf+0x26>
 800747e:	eddd 0a01 	vldr	s1, [sp, #4]
 8007482:	ed9d 0a00 	vldr	s0, [sp]
 8007486:	2001      	movs	r0, #1
 8007488:	f000 fd76 	bl	8007f78 <__kernel_sinf>
 800748c:	eeb1 0a40 	vneg.f32	s0, s0
 8007490:	e7db      	b.n	800744a <sinf+0x26>
 8007492:	eddd 0a01 	vldr	s1, [sp, #4]
 8007496:	ed9d 0a00 	vldr	s0, [sp]
 800749a:	f000 fa83 	bl	80079a4 <__kernel_cosf>
 800749e:	e7f5      	b.n	800748c <sinf+0x68>
 80074a0:	3f490fd8 	.word	0x3f490fd8
 80074a4:	00000000 	.word	0x00000000

080074a8 <asinf>:
 80074a8:	b508      	push	{r3, lr}
 80074aa:	ed2d 8b02 	vpush	{d8}
 80074ae:	eeb0 8a40 	vmov.f32	s16, s0
 80074b2:	f000 f851 	bl	8007558 <__ieee754_asinf>
 80074b6:	4b13      	ldr	r3, [pc, #76]	; (8007504 <asinf+0x5c>)
 80074b8:	f993 3000 	ldrsb.w	r3, [r3]
 80074bc:	3301      	adds	r3, #1
 80074be:	eef0 8a40 	vmov.f32	s17, s0
 80074c2:	d01a      	beq.n	80074fa <asinf+0x52>
 80074c4:	eeb4 8a48 	vcmp.f32	s16, s16
 80074c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074cc:	d615      	bvs.n	80074fa <asinf+0x52>
 80074ce:	eeb0 0a48 	vmov.f32	s0, s16
 80074d2:	f000 fd99 	bl	8008008 <fabsf>
 80074d6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80074da:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80074de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074e2:	dd0a      	ble.n	80074fa <asinf+0x52>
 80074e4:	f7ff ff5e 	bl	80073a4 <__errno>
 80074e8:	ecbd 8b02 	vpop	{d8}
 80074ec:	2321      	movs	r3, #33	; 0x21
 80074ee:	6003      	str	r3, [r0, #0]
 80074f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80074f4:	4804      	ldr	r0, [pc, #16]	; (8007508 <asinf+0x60>)
 80074f6:	f000 bdd1 	b.w	800809c <nanf>
 80074fa:	eeb0 0a68 	vmov.f32	s0, s17
 80074fe:	ecbd 8b02 	vpop	{d8}
 8007502:	bd08      	pop	{r3, pc}
 8007504:	200000f8 	.word	0x200000f8
 8007508:	08008240 	.word	0x08008240

0800750c <sqrtf>:
 800750c:	b508      	push	{r3, lr}
 800750e:	ed2d 8b02 	vpush	{d8}
 8007512:	eeb0 8a40 	vmov.f32	s16, s0
 8007516:	f000 fa41 	bl	800799c <__ieee754_sqrtf>
 800751a:	4b0d      	ldr	r3, [pc, #52]	; (8007550 <sqrtf+0x44>)
 800751c:	f993 3000 	ldrsb.w	r3, [r3]
 8007520:	3301      	adds	r3, #1
 8007522:	d011      	beq.n	8007548 <sqrtf+0x3c>
 8007524:	eeb4 8a48 	vcmp.f32	s16, s16
 8007528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800752c:	d60c      	bvs.n	8007548 <sqrtf+0x3c>
 800752e:	eddf 8a09 	vldr	s17, [pc, #36]	; 8007554 <sqrtf+0x48>
 8007532:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800753a:	d505      	bpl.n	8007548 <sqrtf+0x3c>
 800753c:	f7ff ff32 	bl	80073a4 <__errno>
 8007540:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8007544:	2321      	movs	r3, #33	; 0x21
 8007546:	6003      	str	r3, [r0, #0]
 8007548:	ecbd 8b02 	vpop	{d8}
 800754c:	bd08      	pop	{r3, pc}
 800754e:	bf00      	nop
 8007550:	200000f8 	.word	0x200000f8
 8007554:	00000000 	.word	0x00000000

08007558 <__ieee754_asinf>:
 8007558:	b538      	push	{r3, r4, r5, lr}
 800755a:	ee10 5a10 	vmov	r5, s0
 800755e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8007562:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8007566:	ed2d 8b04 	vpush	{d8-d9}
 800756a:	d10c      	bne.n	8007586 <__ieee754_asinf+0x2e>
 800756c:	eddf 7a5d 	vldr	s15, [pc, #372]	; 80076e4 <__ieee754_asinf+0x18c>
 8007570:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80076e8 <__ieee754_asinf+0x190>
 8007574:	ee60 7a27 	vmul.f32	s15, s0, s15
 8007578:	eee0 7a07 	vfma.f32	s15, s0, s14
 800757c:	eeb0 0a67 	vmov.f32	s0, s15
 8007580:	ecbd 8b04 	vpop	{d8-d9}
 8007584:	bd38      	pop	{r3, r4, r5, pc}
 8007586:	dd04      	ble.n	8007592 <__ieee754_asinf+0x3a>
 8007588:	ee70 7a40 	vsub.f32	s15, s0, s0
 800758c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8007590:	e7f6      	b.n	8007580 <__ieee754_asinf+0x28>
 8007592:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8007596:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800759a:	da0b      	bge.n	80075b4 <__ieee754_asinf+0x5c>
 800759c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80075a0:	da52      	bge.n	8007648 <__ieee754_asinf+0xf0>
 80075a2:	eddf 7a52 	vldr	s15, [pc, #328]	; 80076ec <__ieee754_asinf+0x194>
 80075a6:	ee70 7a27 	vadd.f32	s15, s0, s15
 80075aa:	eef4 7ae8 	vcmpe.f32	s15, s17
 80075ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075b2:	dce5      	bgt.n	8007580 <__ieee754_asinf+0x28>
 80075b4:	f000 fd28 	bl	8008008 <fabsf>
 80075b8:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80075bc:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80075c0:	ee20 8a08 	vmul.f32	s16, s0, s16
 80075c4:	eddf 7a4a 	vldr	s15, [pc, #296]	; 80076f0 <__ieee754_asinf+0x198>
 80075c8:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80076f4 <__ieee754_asinf+0x19c>
 80075cc:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 80076f8 <__ieee754_asinf+0x1a0>
 80075d0:	eea8 7a27 	vfma.f32	s14, s16, s15
 80075d4:	eddf 7a49 	vldr	s15, [pc, #292]	; 80076fc <__ieee754_asinf+0x1a4>
 80075d8:	eee7 7a08 	vfma.f32	s15, s14, s16
 80075dc:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8007700 <__ieee754_asinf+0x1a8>
 80075e0:	eea7 7a88 	vfma.f32	s14, s15, s16
 80075e4:	eddf 7a47 	vldr	s15, [pc, #284]	; 8007704 <__ieee754_asinf+0x1ac>
 80075e8:	eee7 7a08 	vfma.f32	s15, s14, s16
 80075ec:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8007708 <__ieee754_asinf+0x1b0>
 80075f0:	eea7 9a88 	vfma.f32	s18, s15, s16
 80075f4:	eddf 7a45 	vldr	s15, [pc, #276]	; 800770c <__ieee754_asinf+0x1b4>
 80075f8:	eee8 7a07 	vfma.f32	s15, s16, s14
 80075fc:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8007710 <__ieee754_asinf+0x1b8>
 8007600:	eea7 7a88 	vfma.f32	s14, s15, s16
 8007604:	eddf 7a43 	vldr	s15, [pc, #268]	; 8007714 <__ieee754_asinf+0x1bc>
 8007608:	eee7 7a08 	vfma.f32	s15, s14, s16
 800760c:	eeb0 0a48 	vmov.f32	s0, s16
 8007610:	eee7 8a88 	vfma.f32	s17, s15, s16
 8007614:	f000 f9c2 	bl	800799c <__ieee754_sqrtf>
 8007618:	4b3f      	ldr	r3, [pc, #252]	; (8007718 <__ieee754_asinf+0x1c0>)
 800761a:	ee29 9a08 	vmul.f32	s18, s18, s16
 800761e:	429c      	cmp	r4, r3
 8007620:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8007624:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007628:	dd3d      	ble.n	80076a6 <__ieee754_asinf+0x14e>
 800762a:	eea0 0a06 	vfma.f32	s0, s0, s12
 800762e:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800771c <__ieee754_asinf+0x1c4>
 8007632:	eee0 7a26 	vfma.f32	s15, s0, s13
 8007636:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80076e8 <__ieee754_asinf+0x190>
 800763a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800763e:	2d00      	cmp	r5, #0
 8007640:	bfd8      	it	le
 8007642:	eeb1 0a40 	vnegle.f32	s0, s0
 8007646:	e79b      	b.n	8007580 <__ieee754_asinf+0x28>
 8007648:	ee60 7a00 	vmul.f32	s15, s0, s0
 800764c:	eddf 6a28 	vldr	s13, [pc, #160]	; 80076f0 <__ieee754_asinf+0x198>
 8007650:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80076f4 <__ieee754_asinf+0x19c>
 8007654:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8007708 <__ieee754_asinf+0x1b0>
 8007658:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800765c:	eddf 6a27 	vldr	s13, [pc, #156]	; 80076fc <__ieee754_asinf+0x1a4>
 8007660:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007664:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8007700 <__ieee754_asinf+0x1a8>
 8007668:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800766c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8007704 <__ieee754_asinf+0x1ac>
 8007670:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007674:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80076f8 <__ieee754_asinf+0x1a0>
 8007678:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800767c:	eddf 6a23 	vldr	s13, [pc, #140]	; 800770c <__ieee754_asinf+0x1b4>
 8007680:	eee7 6a86 	vfma.f32	s13, s15, s12
 8007684:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8007710 <__ieee754_asinf+0x1b8>
 8007688:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800768c:	eddf 6a21 	vldr	s13, [pc, #132]	; 8007714 <__ieee754_asinf+0x1bc>
 8007690:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007694:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007698:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800769c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80076a0:	eea0 0a27 	vfma.f32	s0, s0, s15
 80076a4:	e76c      	b.n	8007580 <__ieee754_asinf+0x28>
 80076a6:	ee10 3a10 	vmov	r3, s0
 80076aa:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80076ae:	f023 030f 	bic.w	r3, r3, #15
 80076b2:	ee07 3a10 	vmov	s14, r3
 80076b6:	eea7 8a47 	vfms.f32	s16, s14, s14
 80076ba:	ee70 7a07 	vadd.f32	s15, s0, s14
 80076be:	ee30 0a00 	vadd.f32	s0, s0, s0
 80076c2:	eec8 5a27 	vdiv.f32	s11, s16, s15
 80076c6:	eddf 7a07 	vldr	s15, [pc, #28]	; 80076e4 <__ieee754_asinf+0x18c>
 80076ca:	eee5 7ae6 	vfms.f32	s15, s11, s13
 80076ce:	eed0 7a06 	vfnms.f32	s15, s0, s12
 80076d2:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8007720 <__ieee754_asinf+0x1c8>
 80076d6:	eeb0 6a40 	vmov.f32	s12, s0
 80076da:	eea7 6a66 	vfms.f32	s12, s14, s13
 80076de:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80076e2:	e7aa      	b.n	800763a <__ieee754_asinf+0xe2>
 80076e4:	b33bbd2e 	.word	0xb33bbd2e
 80076e8:	3fc90fdb 	.word	0x3fc90fdb
 80076ec:	7149f2ca 	.word	0x7149f2ca
 80076f0:	3811ef08 	.word	0x3811ef08
 80076f4:	3a4f7f04 	.word	0x3a4f7f04
 80076f8:	3e2aaaab 	.word	0x3e2aaaab
 80076fc:	bd241146 	.word	0xbd241146
 8007700:	3e4e0aa8 	.word	0x3e4e0aa8
 8007704:	bea6b090 	.word	0xbea6b090
 8007708:	3d9dc62e 	.word	0x3d9dc62e
 800770c:	bf303361 	.word	0xbf303361
 8007710:	4001572d 	.word	0x4001572d
 8007714:	c019d139 	.word	0xc019d139
 8007718:	3f799999 	.word	0x3f799999
 800771c:	333bbd2e 	.word	0x333bbd2e
 8007720:	3f490fdb 	.word	0x3f490fdb

08007724 <__ieee754_rem_pio2f>:
 8007724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007726:	ee10 6a10 	vmov	r6, s0
 800772a:	4b8e      	ldr	r3, [pc, #568]	; (8007964 <__ieee754_rem_pio2f+0x240>)
 800772c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8007730:	429d      	cmp	r5, r3
 8007732:	b087      	sub	sp, #28
 8007734:	eef0 7a40 	vmov.f32	s15, s0
 8007738:	4604      	mov	r4, r0
 800773a:	dc05      	bgt.n	8007748 <__ieee754_rem_pio2f+0x24>
 800773c:	2300      	movs	r3, #0
 800773e:	ed80 0a00 	vstr	s0, [r0]
 8007742:	6043      	str	r3, [r0, #4]
 8007744:	2000      	movs	r0, #0
 8007746:	e01a      	b.n	800777e <__ieee754_rem_pio2f+0x5a>
 8007748:	4b87      	ldr	r3, [pc, #540]	; (8007968 <__ieee754_rem_pio2f+0x244>)
 800774a:	429d      	cmp	r5, r3
 800774c:	dc46      	bgt.n	80077dc <__ieee754_rem_pio2f+0xb8>
 800774e:	2e00      	cmp	r6, #0
 8007750:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800796c <__ieee754_rem_pio2f+0x248>
 8007754:	4b86      	ldr	r3, [pc, #536]	; (8007970 <__ieee754_rem_pio2f+0x24c>)
 8007756:	f025 050f 	bic.w	r5, r5, #15
 800775a:	dd1f      	ble.n	800779c <__ieee754_rem_pio2f+0x78>
 800775c:	429d      	cmp	r5, r3
 800775e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007762:	d00e      	beq.n	8007782 <__ieee754_rem_pio2f+0x5e>
 8007764:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8007974 <__ieee754_rem_pio2f+0x250>
 8007768:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800776c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007770:	ed80 0a00 	vstr	s0, [r0]
 8007774:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007778:	2001      	movs	r0, #1
 800777a:	edc4 7a01 	vstr	s15, [r4, #4]
 800777e:	b007      	add	sp, #28
 8007780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007782:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8007978 <__ieee754_rem_pio2f+0x254>
 8007786:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800797c <__ieee754_rem_pio2f+0x258>
 800778a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800778e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8007792:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007796:	edc0 6a00 	vstr	s13, [r0]
 800779a:	e7eb      	b.n	8007774 <__ieee754_rem_pio2f+0x50>
 800779c:	429d      	cmp	r5, r3
 800779e:	ee77 7a80 	vadd.f32	s15, s15, s0
 80077a2:	d00e      	beq.n	80077c2 <__ieee754_rem_pio2f+0x9e>
 80077a4:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8007974 <__ieee754_rem_pio2f+0x250>
 80077a8:	ee37 0a87 	vadd.f32	s0, s15, s14
 80077ac:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80077b0:	ed80 0a00 	vstr	s0, [r0]
 80077b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80077b8:	f04f 30ff 	mov.w	r0, #4294967295
 80077bc:	edc4 7a01 	vstr	s15, [r4, #4]
 80077c0:	e7dd      	b.n	800777e <__ieee754_rem_pio2f+0x5a>
 80077c2:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8007978 <__ieee754_rem_pio2f+0x254>
 80077c6:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800797c <__ieee754_rem_pio2f+0x258>
 80077ca:	ee77 7a80 	vadd.f32	s15, s15, s0
 80077ce:	ee77 6a87 	vadd.f32	s13, s15, s14
 80077d2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80077d6:	edc0 6a00 	vstr	s13, [r0]
 80077da:	e7eb      	b.n	80077b4 <__ieee754_rem_pio2f+0x90>
 80077dc:	4b68      	ldr	r3, [pc, #416]	; (8007980 <__ieee754_rem_pio2f+0x25c>)
 80077de:	429d      	cmp	r5, r3
 80077e0:	dc72      	bgt.n	80078c8 <__ieee754_rem_pio2f+0x1a4>
 80077e2:	f000 fc11 	bl	8008008 <fabsf>
 80077e6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8007984 <__ieee754_rem_pio2f+0x260>
 80077ea:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80077ee:	eee0 7a07 	vfma.f32	s15, s0, s14
 80077f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80077fa:	ee17 0a90 	vmov	r0, s15
 80077fe:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800796c <__ieee754_rem_pio2f+0x248>
 8007802:	eea7 0a67 	vfms.f32	s0, s14, s15
 8007806:	281f      	cmp	r0, #31
 8007808:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8007974 <__ieee754_rem_pio2f+0x250>
 800780c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007810:	eeb1 6a47 	vneg.f32	s12, s14
 8007814:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007818:	ee16 2a90 	vmov	r2, s13
 800781c:	dc1c      	bgt.n	8007858 <__ieee754_rem_pio2f+0x134>
 800781e:	495a      	ldr	r1, [pc, #360]	; (8007988 <__ieee754_rem_pio2f+0x264>)
 8007820:	1e47      	subs	r7, r0, #1
 8007822:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8007826:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800782a:	428b      	cmp	r3, r1
 800782c:	d014      	beq.n	8007858 <__ieee754_rem_pio2f+0x134>
 800782e:	6022      	str	r2, [r4, #0]
 8007830:	ed94 7a00 	vldr	s14, [r4]
 8007834:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007838:	2e00      	cmp	r6, #0
 800783a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800783e:	ed84 0a01 	vstr	s0, [r4, #4]
 8007842:	da9c      	bge.n	800777e <__ieee754_rem_pio2f+0x5a>
 8007844:	eeb1 7a47 	vneg.f32	s14, s14
 8007848:	eeb1 0a40 	vneg.f32	s0, s0
 800784c:	ed84 7a00 	vstr	s14, [r4]
 8007850:	ed84 0a01 	vstr	s0, [r4, #4]
 8007854:	4240      	negs	r0, r0
 8007856:	e792      	b.n	800777e <__ieee754_rem_pio2f+0x5a>
 8007858:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800785c:	15eb      	asrs	r3, r5, #23
 800785e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8007862:	2d08      	cmp	r5, #8
 8007864:	dde3      	ble.n	800782e <__ieee754_rem_pio2f+0x10a>
 8007866:	eddf 7a44 	vldr	s15, [pc, #272]	; 8007978 <__ieee754_rem_pio2f+0x254>
 800786a:	eef0 6a40 	vmov.f32	s13, s0
 800786e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007872:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007876:	eea6 0a27 	vfma.f32	s0, s12, s15
 800787a:	eddf 7a40 	vldr	s15, [pc, #256]	; 800797c <__ieee754_rem_pio2f+0x258>
 800787e:	ee97 0a27 	vfnms.f32	s0, s14, s15
 8007882:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8007886:	eef0 7a40 	vmov.f32	s15, s0
 800788a:	ee15 2a90 	vmov	r2, s11
 800788e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007892:	1a5b      	subs	r3, r3, r1
 8007894:	2b19      	cmp	r3, #25
 8007896:	dc04      	bgt.n	80078a2 <__ieee754_rem_pio2f+0x17e>
 8007898:	edc4 5a00 	vstr	s11, [r4]
 800789c:	eeb0 0a66 	vmov.f32	s0, s13
 80078a0:	e7c6      	b.n	8007830 <__ieee754_rem_pio2f+0x10c>
 80078a2:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800798c <__ieee754_rem_pio2f+0x268>
 80078a6:	eeb0 0a66 	vmov.f32	s0, s13
 80078aa:	eea6 0a25 	vfma.f32	s0, s12, s11
 80078ae:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80078b2:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007990 <__ieee754_rem_pio2f+0x26c>
 80078b6:	eee6 7a25 	vfma.f32	s15, s12, s11
 80078ba:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80078be:	ee30 7a67 	vsub.f32	s14, s0, s15
 80078c2:	ed84 7a00 	vstr	s14, [r4]
 80078c6:	e7b3      	b.n	8007830 <__ieee754_rem_pio2f+0x10c>
 80078c8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80078cc:	db06      	blt.n	80078dc <__ieee754_rem_pio2f+0x1b8>
 80078ce:	ee70 7a40 	vsub.f32	s15, s0, s0
 80078d2:	edc0 7a01 	vstr	s15, [r0, #4]
 80078d6:	edc0 7a00 	vstr	s15, [r0]
 80078da:	e733      	b.n	8007744 <__ieee754_rem_pio2f+0x20>
 80078dc:	15ea      	asrs	r2, r5, #23
 80078de:	3a86      	subs	r2, #134	; 0x86
 80078e0:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80078e4:	ee07 3a90 	vmov	s15, r3
 80078e8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80078ec:	eddf 6a29 	vldr	s13, [pc, #164]	; 8007994 <__ieee754_rem_pio2f+0x270>
 80078f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80078f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80078f8:	ed8d 7a03 	vstr	s14, [sp, #12]
 80078fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007900:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007904:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007908:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800790c:	ed8d 7a04 	vstr	s14, [sp, #16]
 8007910:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007914:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800791c:	edcd 7a05 	vstr	s15, [sp, #20]
 8007920:	d11e      	bne.n	8007960 <__ieee754_rem_pio2f+0x23c>
 8007922:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800792a:	bf14      	ite	ne
 800792c:	2302      	movne	r3, #2
 800792e:	2301      	moveq	r3, #1
 8007930:	4919      	ldr	r1, [pc, #100]	; (8007998 <__ieee754_rem_pio2f+0x274>)
 8007932:	9101      	str	r1, [sp, #4]
 8007934:	2102      	movs	r1, #2
 8007936:	9100      	str	r1, [sp, #0]
 8007938:	a803      	add	r0, sp, #12
 800793a:	4621      	mov	r1, r4
 800793c:	f000 f892 	bl	8007a64 <__kernel_rem_pio2f>
 8007940:	2e00      	cmp	r6, #0
 8007942:	f6bf af1c 	bge.w	800777e <__ieee754_rem_pio2f+0x5a>
 8007946:	edd4 7a00 	vldr	s15, [r4]
 800794a:	eef1 7a67 	vneg.f32	s15, s15
 800794e:	edc4 7a00 	vstr	s15, [r4]
 8007952:	edd4 7a01 	vldr	s15, [r4, #4]
 8007956:	eef1 7a67 	vneg.f32	s15, s15
 800795a:	edc4 7a01 	vstr	s15, [r4, #4]
 800795e:	e779      	b.n	8007854 <__ieee754_rem_pio2f+0x130>
 8007960:	2303      	movs	r3, #3
 8007962:	e7e5      	b.n	8007930 <__ieee754_rem_pio2f+0x20c>
 8007964:	3f490fd8 	.word	0x3f490fd8
 8007968:	4016cbe3 	.word	0x4016cbe3
 800796c:	3fc90f80 	.word	0x3fc90f80
 8007970:	3fc90fd0 	.word	0x3fc90fd0
 8007974:	37354443 	.word	0x37354443
 8007978:	37354400 	.word	0x37354400
 800797c:	2e85a308 	.word	0x2e85a308
 8007980:	43490f80 	.word	0x43490f80
 8007984:	3f22f984 	.word	0x3f22f984
 8007988:	08008244 	.word	0x08008244
 800798c:	2e85a300 	.word	0x2e85a300
 8007990:	248d3132 	.word	0x248d3132
 8007994:	43800000 	.word	0x43800000
 8007998:	080082c4 	.word	0x080082c4

0800799c <__ieee754_sqrtf>:
 800799c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80079a0:	4770      	bx	lr
	...

080079a4 <__kernel_cosf>:
 80079a4:	ee10 3a10 	vmov	r3, s0
 80079a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079ac:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80079b0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80079b4:	da05      	bge.n	80079c2 <__kernel_cosf+0x1e>
 80079b6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80079ba:	ee17 2a90 	vmov	r2, s15
 80079be:	2a00      	cmp	r2, #0
 80079c0:	d03d      	beq.n	8007a3e <__kernel_cosf+0x9a>
 80079c2:	ee60 5a00 	vmul.f32	s11, s0, s0
 80079c6:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007a44 <__kernel_cosf+0xa0>
 80079ca:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8007a48 <__kernel_cosf+0xa4>
 80079ce:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8007a4c <__kernel_cosf+0xa8>
 80079d2:	4a1f      	ldr	r2, [pc, #124]	; (8007a50 <__kernel_cosf+0xac>)
 80079d4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80079d8:	4293      	cmp	r3, r2
 80079da:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8007a54 <__kernel_cosf+0xb0>
 80079de:	eee7 7a25 	vfma.f32	s15, s14, s11
 80079e2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8007a58 <__kernel_cosf+0xb4>
 80079e6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80079ea:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8007a5c <__kernel_cosf+0xb8>
 80079ee:	eee7 7a25 	vfma.f32	s15, s14, s11
 80079f2:	eeb0 7a66 	vmov.f32	s14, s13
 80079f6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80079fa:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80079fe:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8007a02:	ee67 6a25 	vmul.f32	s13, s14, s11
 8007a06:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8007a0a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007a0e:	dc04      	bgt.n	8007a1a <__kernel_cosf+0x76>
 8007a10:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007a14:	ee36 0a47 	vsub.f32	s0, s12, s14
 8007a18:	4770      	bx	lr
 8007a1a:	4a11      	ldr	r2, [pc, #68]	; (8007a60 <__kernel_cosf+0xbc>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	bfda      	itte	le
 8007a20:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8007a24:	ee06 3a90 	vmovle	s13, r3
 8007a28:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8007a2c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007a30:	ee36 0a66 	vsub.f32	s0, s12, s13
 8007a34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a38:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007a3c:	4770      	bx	lr
 8007a3e:	eeb0 0a46 	vmov.f32	s0, s12
 8007a42:	4770      	bx	lr
 8007a44:	ad47d74e 	.word	0xad47d74e
 8007a48:	310f74f6 	.word	0x310f74f6
 8007a4c:	3d2aaaab 	.word	0x3d2aaaab
 8007a50:	3e999999 	.word	0x3e999999
 8007a54:	b493f27c 	.word	0xb493f27c
 8007a58:	37d00d01 	.word	0x37d00d01
 8007a5c:	bab60b61 	.word	0xbab60b61
 8007a60:	3f480000 	.word	0x3f480000

08007a64 <__kernel_rem_pio2f>:
 8007a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a68:	ed2d 8b04 	vpush	{d8-d9}
 8007a6c:	b0d7      	sub	sp, #348	; 0x15c
 8007a6e:	4616      	mov	r6, r2
 8007a70:	4698      	mov	r8, r3
 8007a72:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8007a74:	4bbb      	ldr	r3, [pc, #748]	; (8007d64 <__kernel_rem_pio2f+0x300>)
 8007a76:	9001      	str	r0, [sp, #4]
 8007a78:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8007a7c:	1d33      	adds	r3, r6, #4
 8007a7e:	460d      	mov	r5, r1
 8007a80:	f108 39ff 	add.w	r9, r8, #4294967295
 8007a84:	db29      	blt.n	8007ada <__kernel_rem_pio2f+0x76>
 8007a86:	1ef1      	subs	r1, r6, #3
 8007a88:	bf48      	it	mi
 8007a8a:	1d31      	addmi	r1, r6, #4
 8007a8c:	10c9      	asrs	r1, r1, #3
 8007a8e:	1c4c      	adds	r4, r1, #1
 8007a90:	00e3      	lsls	r3, r4, #3
 8007a92:	9302      	str	r3, [sp, #8]
 8007a94:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8007a96:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8007d74 <__kernel_rem_pio2f+0x310>
 8007a9a:	eba1 0009 	sub.w	r0, r1, r9
 8007a9e:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 8007aa2:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 8007aa6:	eb07 0c09 	add.w	ip, r7, r9
 8007aaa:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8007aae:	2300      	movs	r3, #0
 8007ab0:	4563      	cmp	r3, ip
 8007ab2:	dd14      	ble.n	8007ade <__kernel_rem_pio2f+0x7a>
 8007ab4:	ab1a      	add	r3, sp, #104	; 0x68
 8007ab6:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8007aba:	46cc      	mov	ip, r9
 8007abc:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8007ac0:	f1c8 0b01 	rsb	fp, r8, #1
 8007ac4:	eb0b 020c 	add.w	r2, fp, ip
 8007ac8:	4297      	cmp	r7, r2
 8007aca:	db27      	blt.n	8007b1c <__kernel_rem_pio2f+0xb8>
 8007acc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007ad0:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8007d74 <__kernel_rem_pio2f+0x310>
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	e016      	b.n	8007b08 <__kernel_rem_pio2f+0xa4>
 8007ada:	2100      	movs	r1, #0
 8007adc:	e7d7      	b.n	8007a8e <__kernel_rem_pio2f+0x2a>
 8007ade:	42d8      	cmn	r0, r3
 8007ae0:	bf5d      	ittte	pl
 8007ae2:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 8007ae6:	ee07 2a90 	vmovpl	s15, r2
 8007aea:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8007aee:	eef0 7a47 	vmovmi.f32	s15, s14
 8007af2:	ecea 7a01 	vstmia	sl!, {s15}
 8007af6:	3301      	adds	r3, #1
 8007af8:	e7da      	b.n	8007ab0 <__kernel_rem_pio2f+0x4c>
 8007afa:	ecfe 6a01 	vldmia	lr!, {s13}
 8007afe:	ed90 7a00 	vldr	s14, [r0]
 8007b02:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007b06:	3201      	adds	r2, #1
 8007b08:	454a      	cmp	r2, r9
 8007b0a:	f1a0 0004 	sub.w	r0, r0, #4
 8007b0e:	ddf4      	ble.n	8007afa <__kernel_rem_pio2f+0x96>
 8007b10:	ecea 7a01 	vstmia	sl!, {s15}
 8007b14:	3304      	adds	r3, #4
 8007b16:	f10c 0c01 	add.w	ip, ip, #1
 8007b1a:	e7d3      	b.n	8007ac4 <__kernel_rem_pio2f+0x60>
 8007b1c:	ab06      	add	r3, sp, #24
 8007b1e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8007b22:	9304      	str	r3, [sp, #16]
 8007b24:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8007b26:	eddf 8a92 	vldr	s17, [pc, #584]	; 8007d70 <__kernel_rem_pio2f+0x30c>
 8007b2a:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8007d6c <__kernel_rem_pio2f+0x308>
 8007b2e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8007b32:	9303      	str	r3, [sp, #12]
 8007b34:	46ba      	mov	sl, r7
 8007b36:	ab56      	add	r3, sp, #344	; 0x158
 8007b38:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8007b3c:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8007b40:	ab06      	add	r3, sp, #24
 8007b42:	4618      	mov	r0, r3
 8007b44:	4652      	mov	r2, sl
 8007b46:	2a00      	cmp	r2, #0
 8007b48:	dc51      	bgt.n	8007bee <__kernel_rem_pio2f+0x18a>
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	9305      	str	r3, [sp, #20]
 8007b4e:	f000 faab 	bl	80080a8 <scalbnf>
 8007b52:	eeb0 8a40 	vmov.f32	s16, s0
 8007b56:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8007b5a:	ee28 0a00 	vmul.f32	s0, s16, s0
 8007b5e:	f000 fa5b 	bl	8008018 <floorf>
 8007b62:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8007b66:	eea0 8a67 	vfms.f32	s16, s0, s15
 8007b6a:	2c00      	cmp	r4, #0
 8007b6c:	9b05      	ldr	r3, [sp, #20]
 8007b6e:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8007b72:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8007b76:	edcd 7a00 	vstr	s15, [sp]
 8007b7a:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007b7e:	dd4b      	ble.n	8007c18 <__kernel_rem_pio2f+0x1b4>
 8007b80:	f10a 3cff 	add.w	ip, sl, #4294967295
 8007b84:	aa06      	add	r2, sp, #24
 8007b86:	f1c4 0e08 	rsb	lr, r4, #8
 8007b8a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8007b8e:	ee17 1a90 	vmov	r1, s15
 8007b92:	fa42 f00e 	asr.w	r0, r2, lr
 8007b96:	4401      	add	r1, r0
 8007b98:	9100      	str	r1, [sp, #0]
 8007b9a:	fa00 f00e 	lsl.w	r0, r0, lr
 8007b9e:	a906      	add	r1, sp, #24
 8007ba0:	1a12      	subs	r2, r2, r0
 8007ba2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8007ba6:	f1c4 0007 	rsb	r0, r4, #7
 8007baa:	fa42 fb00 	asr.w	fp, r2, r0
 8007bae:	f1bb 0f00 	cmp.w	fp, #0
 8007bb2:	dd43      	ble.n	8007c3c <__kernel_rem_pio2f+0x1d8>
 8007bb4:	9a00      	ldr	r2, [sp, #0]
 8007bb6:	f04f 0e00 	mov.w	lr, #0
 8007bba:	3201      	adds	r2, #1
 8007bbc:	9200      	str	r2, [sp, #0]
 8007bbe:	4670      	mov	r0, lr
 8007bc0:	45f2      	cmp	sl, lr
 8007bc2:	dc6c      	bgt.n	8007c9e <__kernel_rem_pio2f+0x23a>
 8007bc4:	2c00      	cmp	r4, #0
 8007bc6:	dd04      	ble.n	8007bd2 <__kernel_rem_pio2f+0x16e>
 8007bc8:	2c01      	cmp	r4, #1
 8007bca:	d079      	beq.n	8007cc0 <__kernel_rem_pio2f+0x25c>
 8007bcc:	2c02      	cmp	r4, #2
 8007bce:	f000 8082 	beq.w	8007cd6 <__kernel_rem_pio2f+0x272>
 8007bd2:	f1bb 0f02 	cmp.w	fp, #2
 8007bd6:	d131      	bne.n	8007c3c <__kernel_rem_pio2f+0x1d8>
 8007bd8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007bdc:	ee30 8a48 	vsub.f32	s16, s0, s16
 8007be0:	b360      	cbz	r0, 8007c3c <__kernel_rem_pio2f+0x1d8>
 8007be2:	4620      	mov	r0, r4
 8007be4:	f000 fa60 	bl	80080a8 <scalbnf>
 8007be8:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007bec:	e026      	b.n	8007c3c <__kernel_rem_pio2f+0x1d8>
 8007bee:	ee60 7a28 	vmul.f32	s15, s0, s17
 8007bf2:	3a01      	subs	r2, #1
 8007bf4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007bf8:	a942      	add	r1, sp, #264	; 0x108
 8007bfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007bfe:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8007c02:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8007c06:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007c0a:	eca0 0a01 	vstmia	r0!, {s0}
 8007c0e:	ed9c 0a00 	vldr	s0, [ip]
 8007c12:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007c16:	e796      	b.n	8007b46 <__kernel_rem_pio2f+0xe2>
 8007c18:	d107      	bne.n	8007c2a <__kernel_rem_pio2f+0x1c6>
 8007c1a:	f10a 32ff 	add.w	r2, sl, #4294967295
 8007c1e:	a906      	add	r1, sp, #24
 8007c20:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007c24:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8007c28:	e7c1      	b.n	8007bae <__kernel_rem_pio2f+0x14a>
 8007c2a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007c2e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c36:	da2f      	bge.n	8007c98 <__kernel_rem_pio2f+0x234>
 8007c38:	f04f 0b00 	mov.w	fp, #0
 8007c3c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c44:	f040 8098 	bne.w	8007d78 <__kernel_rem_pio2f+0x314>
 8007c48:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007c4c:	469c      	mov	ip, r3
 8007c4e:	2200      	movs	r2, #0
 8007c50:	45bc      	cmp	ip, r7
 8007c52:	da48      	bge.n	8007ce6 <__kernel_rem_pio2f+0x282>
 8007c54:	2a00      	cmp	r2, #0
 8007c56:	d05f      	beq.n	8007d18 <__kernel_rem_pio2f+0x2b4>
 8007c58:	aa06      	add	r2, sp, #24
 8007c5a:	3c08      	subs	r4, #8
 8007c5c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007c60:	2900      	cmp	r1, #0
 8007c62:	d07d      	beq.n	8007d60 <__kernel_rem_pio2f+0x2fc>
 8007c64:	4620      	mov	r0, r4
 8007c66:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007c6a:	9301      	str	r3, [sp, #4]
 8007c6c:	f000 fa1c 	bl	80080a8 <scalbnf>
 8007c70:	9b01      	ldr	r3, [sp, #4]
 8007c72:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8007d70 <__kernel_rem_pio2f+0x30c>
 8007c76:	4619      	mov	r1, r3
 8007c78:	2900      	cmp	r1, #0
 8007c7a:	f280 80af 	bge.w	8007ddc <__kernel_rem_pio2f+0x378>
 8007c7e:	4618      	mov	r0, r3
 8007c80:	2400      	movs	r4, #0
 8007c82:	2800      	cmp	r0, #0
 8007c84:	f2c0 80d0 	blt.w	8007e28 <__kernel_rem_pio2f+0x3c4>
 8007c88:	a942      	add	r1, sp, #264	; 0x108
 8007c8a:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8007c8e:	4a36      	ldr	r2, [pc, #216]	; (8007d68 <__kernel_rem_pio2f+0x304>)
 8007c90:	eddf 7a38 	vldr	s15, [pc, #224]	; 8007d74 <__kernel_rem_pio2f+0x310>
 8007c94:	2100      	movs	r1, #0
 8007c96:	e0bb      	b.n	8007e10 <__kernel_rem_pio2f+0x3ac>
 8007c98:	f04f 0b02 	mov.w	fp, #2
 8007c9c:	e78a      	b.n	8007bb4 <__kernel_rem_pio2f+0x150>
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	b948      	cbnz	r0, 8007cb6 <__kernel_rem_pio2f+0x252>
 8007ca2:	b11a      	cbz	r2, 8007cac <__kernel_rem_pio2f+0x248>
 8007ca4:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8007ca8:	601a      	str	r2, [r3, #0]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f10e 0e01 	add.w	lr, lr, #1
 8007cb0:	3304      	adds	r3, #4
 8007cb2:	4610      	mov	r0, r2
 8007cb4:	e784      	b.n	8007bc0 <__kernel_rem_pio2f+0x15c>
 8007cb6:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8007cba:	601a      	str	r2, [r3, #0]
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	e7f5      	b.n	8007cac <__kernel_rem_pio2f+0x248>
 8007cc0:	f10a 3cff 	add.w	ip, sl, #4294967295
 8007cc4:	ab06      	add	r3, sp, #24
 8007cc6:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8007cca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cce:	aa06      	add	r2, sp, #24
 8007cd0:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8007cd4:	e77d      	b.n	8007bd2 <__kernel_rem_pio2f+0x16e>
 8007cd6:	f10a 3cff 	add.w	ip, sl, #4294967295
 8007cda:	ab06      	add	r3, sp, #24
 8007cdc:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8007ce0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ce4:	e7f3      	b.n	8007cce <__kernel_rem_pio2f+0x26a>
 8007ce6:	a906      	add	r1, sp, #24
 8007ce8:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8007cec:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007cf0:	4302      	orrs	r2, r0
 8007cf2:	e7ad      	b.n	8007c50 <__kernel_rem_pio2f+0x1ec>
 8007cf4:	3001      	adds	r0, #1
 8007cf6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007cfa:	2a00      	cmp	r2, #0
 8007cfc:	d0fa      	beq.n	8007cf4 <__kernel_rem_pio2f+0x290>
 8007cfe:	a91a      	add	r1, sp, #104	; 0x68
 8007d00:	eb0a 0208 	add.w	r2, sl, r8
 8007d04:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8007d08:	f10a 0301 	add.w	r3, sl, #1
 8007d0c:	eb0a 0100 	add.w	r1, sl, r0
 8007d10:	4299      	cmp	r1, r3
 8007d12:	da04      	bge.n	8007d1e <__kernel_rem_pio2f+0x2ba>
 8007d14:	468a      	mov	sl, r1
 8007d16:	e70e      	b.n	8007b36 <__kernel_rem_pio2f+0xd2>
 8007d18:	9b04      	ldr	r3, [sp, #16]
 8007d1a:	2001      	movs	r0, #1
 8007d1c:	e7eb      	b.n	8007cf6 <__kernel_rem_pio2f+0x292>
 8007d1e:	9803      	ldr	r0, [sp, #12]
 8007d20:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007d24:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8007d28:	9000      	str	r0, [sp, #0]
 8007d2a:	ee07 0a90 	vmov	s15, r0
 8007d2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d32:	2000      	movs	r0, #0
 8007d34:	ece2 7a01 	vstmia	r2!, {s15}
 8007d38:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8007d74 <__kernel_rem_pio2f+0x310>
 8007d3c:	4696      	mov	lr, r2
 8007d3e:	4548      	cmp	r0, r9
 8007d40:	dd06      	ble.n	8007d50 <__kernel_rem_pio2f+0x2ec>
 8007d42:	a842      	add	r0, sp, #264	; 0x108
 8007d44:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007d48:	edc0 7a00 	vstr	s15, [r0]
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	e7df      	b.n	8007d10 <__kernel_rem_pio2f+0x2ac>
 8007d50:	ecfc 6a01 	vldmia	ip!, {s13}
 8007d54:	ed3e 7a01 	vldmdb	lr!, {s14}
 8007d58:	3001      	adds	r0, #1
 8007d5a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007d5e:	e7ee      	b.n	8007d3e <__kernel_rem_pio2f+0x2da>
 8007d60:	3b01      	subs	r3, #1
 8007d62:	e779      	b.n	8007c58 <__kernel_rem_pio2f+0x1f4>
 8007d64:	08008608 	.word	0x08008608
 8007d68:	080085dc 	.word	0x080085dc
 8007d6c:	43800000 	.word	0x43800000
 8007d70:	3b800000 	.word	0x3b800000
 8007d74:	00000000 	.word	0x00000000
 8007d78:	9b02      	ldr	r3, [sp, #8]
 8007d7a:	eeb0 0a48 	vmov.f32	s0, s16
 8007d7e:	1b98      	subs	r0, r3, r6
 8007d80:	f000 f992 	bl	80080a8 <scalbnf>
 8007d84:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8007d6c <__kernel_rem_pio2f+0x308>
 8007d88:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8007d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d90:	db1b      	blt.n	8007dca <__kernel_rem_pio2f+0x366>
 8007d92:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8007d70 <__kernel_rem_pio2f+0x30c>
 8007d96:	ee60 7a27 	vmul.f32	s15, s0, s15
 8007d9a:	aa06      	add	r2, sp, #24
 8007d9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007da0:	a906      	add	r1, sp, #24
 8007da2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007da6:	3408      	adds	r4, #8
 8007da8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8007dac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007db0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007db4:	ee10 3a10 	vmov	r3, s0
 8007db8:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8007dbc:	ee17 2a90 	vmov	r2, s15
 8007dc0:	f10a 0301 	add.w	r3, sl, #1
 8007dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007dc8:	e74c      	b.n	8007c64 <__kernel_rem_pio2f+0x200>
 8007dca:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007dce:	aa06      	add	r2, sp, #24
 8007dd0:	ee10 3a10 	vmov	r3, s0
 8007dd4:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8007dd8:	4653      	mov	r3, sl
 8007dda:	e743      	b.n	8007c64 <__kernel_rem_pio2f+0x200>
 8007ddc:	aa42      	add	r2, sp, #264	; 0x108
 8007dde:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8007de2:	aa06      	add	r2, sp, #24
 8007de4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8007de8:	9201      	str	r2, [sp, #4]
 8007dea:	ee07 2a90 	vmov	s15, r2
 8007dee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007df2:	3901      	subs	r1, #1
 8007df4:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007df8:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007dfc:	edc0 7a00 	vstr	s15, [r0]
 8007e00:	e73a      	b.n	8007c78 <__kernel_rem_pio2f+0x214>
 8007e02:	ecf2 6a01 	vldmia	r2!, {s13}
 8007e06:	ecb6 7a01 	vldmia	r6!, {s14}
 8007e0a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007e0e:	3101      	adds	r1, #1
 8007e10:	42b9      	cmp	r1, r7
 8007e12:	dc01      	bgt.n	8007e18 <__kernel_rem_pio2f+0x3b4>
 8007e14:	428c      	cmp	r4, r1
 8007e16:	daf4      	bge.n	8007e02 <__kernel_rem_pio2f+0x39e>
 8007e18:	aa56      	add	r2, sp, #344	; 0x158
 8007e1a:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8007e1e:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8007e22:	3801      	subs	r0, #1
 8007e24:	3401      	adds	r4, #1
 8007e26:	e72c      	b.n	8007c82 <__kernel_rem_pio2f+0x21e>
 8007e28:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8007e2a:	2a02      	cmp	r2, #2
 8007e2c:	dc0a      	bgt.n	8007e44 <__kernel_rem_pio2f+0x3e0>
 8007e2e:	2a00      	cmp	r2, #0
 8007e30:	dc61      	bgt.n	8007ef6 <__kernel_rem_pio2f+0x492>
 8007e32:	d03c      	beq.n	8007eae <__kernel_rem_pio2f+0x44a>
 8007e34:	9b00      	ldr	r3, [sp, #0]
 8007e36:	f003 0007 	and.w	r0, r3, #7
 8007e3a:	b057      	add	sp, #348	; 0x15c
 8007e3c:	ecbd 8b04 	vpop	{d8-d9}
 8007e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e44:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8007e46:	2a03      	cmp	r2, #3
 8007e48:	d1f4      	bne.n	8007e34 <__kernel_rem_pio2f+0x3d0>
 8007e4a:	aa2e      	add	r2, sp, #184	; 0xb8
 8007e4c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8007e50:	4608      	mov	r0, r1
 8007e52:	461c      	mov	r4, r3
 8007e54:	2c00      	cmp	r4, #0
 8007e56:	f1a0 0004 	sub.w	r0, r0, #4
 8007e5a:	dc59      	bgt.n	8007f10 <__kernel_rem_pio2f+0x4ac>
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	2801      	cmp	r0, #1
 8007e60:	f1a1 0104 	sub.w	r1, r1, #4
 8007e64:	dc64      	bgt.n	8007f30 <__kernel_rem_pio2f+0x4cc>
 8007e66:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 8007d74 <__kernel_rem_pio2f+0x310>
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	dc70      	bgt.n	8007f50 <__kernel_rem_pio2f+0x4ec>
 8007e6e:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8007e72:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8007e76:	f1bb 0f00 	cmp.w	fp, #0
 8007e7a:	d172      	bne.n	8007f62 <__kernel_rem_pio2f+0x4fe>
 8007e7c:	edc5 6a00 	vstr	s13, [r5]
 8007e80:	ed85 7a01 	vstr	s14, [r5, #4]
 8007e84:	edc5 7a02 	vstr	s15, [r5, #8]
 8007e88:	e7d4      	b.n	8007e34 <__kernel_rem_pio2f+0x3d0>
 8007e8a:	aa2e      	add	r2, sp, #184	; 0xb8
 8007e8c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8007e90:	ed91 7a00 	vldr	s14, [r1]
 8007e94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007e98:	3b01      	subs	r3, #1
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	daf5      	bge.n	8007e8a <__kernel_rem_pio2f+0x426>
 8007e9e:	f1bb 0f00 	cmp.w	fp, #0
 8007ea2:	d001      	beq.n	8007ea8 <__kernel_rem_pio2f+0x444>
 8007ea4:	eef1 7a67 	vneg.f32	s15, s15
 8007ea8:	edc5 7a00 	vstr	s15, [r5]
 8007eac:	e7c2      	b.n	8007e34 <__kernel_rem_pio2f+0x3d0>
 8007eae:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8007d74 <__kernel_rem_pio2f+0x310>
 8007eb2:	e7f2      	b.n	8007e9a <__kernel_rem_pio2f+0x436>
 8007eb4:	aa2e      	add	r2, sp, #184	; 0xb8
 8007eb6:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8007eba:	edd0 7a00 	vldr	s15, [r0]
 8007ebe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007ec2:	3901      	subs	r1, #1
 8007ec4:	2900      	cmp	r1, #0
 8007ec6:	daf5      	bge.n	8007eb4 <__kernel_rem_pio2f+0x450>
 8007ec8:	f1bb 0f00 	cmp.w	fp, #0
 8007ecc:	d017      	beq.n	8007efe <__kernel_rem_pio2f+0x49a>
 8007ece:	eef1 7a47 	vneg.f32	s15, s14
 8007ed2:	edc5 7a00 	vstr	s15, [r5]
 8007ed6:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8007eda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ede:	a82f      	add	r0, sp, #188	; 0xbc
 8007ee0:	2101      	movs	r1, #1
 8007ee2:	428b      	cmp	r3, r1
 8007ee4:	da0e      	bge.n	8007f04 <__kernel_rem_pio2f+0x4a0>
 8007ee6:	f1bb 0f00 	cmp.w	fp, #0
 8007eea:	d001      	beq.n	8007ef0 <__kernel_rem_pio2f+0x48c>
 8007eec:	eef1 7a67 	vneg.f32	s15, s15
 8007ef0:	edc5 7a01 	vstr	s15, [r5, #4]
 8007ef4:	e79e      	b.n	8007e34 <__kernel_rem_pio2f+0x3d0>
 8007ef6:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 8007d74 <__kernel_rem_pio2f+0x310>
 8007efa:	4619      	mov	r1, r3
 8007efc:	e7e2      	b.n	8007ec4 <__kernel_rem_pio2f+0x460>
 8007efe:	eef0 7a47 	vmov.f32	s15, s14
 8007f02:	e7e6      	b.n	8007ed2 <__kernel_rem_pio2f+0x46e>
 8007f04:	ecb0 7a01 	vldmia	r0!, {s14}
 8007f08:	3101      	adds	r1, #1
 8007f0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007f0e:	e7e8      	b.n	8007ee2 <__kernel_rem_pio2f+0x47e>
 8007f10:	edd0 7a00 	vldr	s15, [r0]
 8007f14:	edd0 6a01 	vldr	s13, [r0, #4]
 8007f18:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007f1c:	3c01      	subs	r4, #1
 8007f1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f22:	ed80 7a00 	vstr	s14, [r0]
 8007f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f2a:	edc0 7a01 	vstr	s15, [r0, #4]
 8007f2e:	e791      	b.n	8007e54 <__kernel_rem_pio2f+0x3f0>
 8007f30:	edd1 7a00 	vldr	s15, [r1]
 8007f34:	edd1 6a01 	vldr	s13, [r1, #4]
 8007f38:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007f3c:	3801      	subs	r0, #1
 8007f3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f42:	ed81 7a00 	vstr	s14, [r1]
 8007f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f4a:	edc1 7a01 	vstr	s15, [r1, #4]
 8007f4e:	e786      	b.n	8007e5e <__kernel_rem_pio2f+0x3fa>
 8007f50:	aa2e      	add	r2, sp, #184	; 0xb8
 8007f52:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8007f56:	ed91 7a00 	vldr	s14, [r1]
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007f60:	e783      	b.n	8007e6a <__kernel_rem_pio2f+0x406>
 8007f62:	eef1 6a66 	vneg.f32	s13, s13
 8007f66:	eeb1 7a47 	vneg.f32	s14, s14
 8007f6a:	edc5 6a00 	vstr	s13, [r5]
 8007f6e:	ed85 7a01 	vstr	s14, [r5, #4]
 8007f72:	eef1 7a67 	vneg.f32	s15, s15
 8007f76:	e785      	b.n	8007e84 <__kernel_rem_pio2f+0x420>

08007f78 <__kernel_sinf>:
 8007f78:	ee10 3a10 	vmov	r3, s0
 8007f7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f80:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007f84:	da04      	bge.n	8007f90 <__kernel_sinf+0x18>
 8007f86:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007f8a:	ee17 3a90 	vmov	r3, s15
 8007f8e:	b35b      	cbz	r3, 8007fe8 <__kernel_sinf+0x70>
 8007f90:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007f94:	eddf 7a15 	vldr	s15, [pc, #84]	; 8007fec <__kernel_sinf+0x74>
 8007f98:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8007ff0 <__kernel_sinf+0x78>
 8007f9c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007fa0:	eddf 7a14 	vldr	s15, [pc, #80]	; 8007ff4 <__kernel_sinf+0x7c>
 8007fa4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007fa8:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8007ff8 <__kernel_sinf+0x80>
 8007fac:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007fb0:	eddf 7a12 	vldr	s15, [pc, #72]	; 8007ffc <__kernel_sinf+0x84>
 8007fb4:	ee60 6a07 	vmul.f32	s13, s0, s14
 8007fb8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007fbc:	b930      	cbnz	r0, 8007fcc <__kernel_sinf+0x54>
 8007fbe:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8008000 <__kernel_sinf+0x88>
 8007fc2:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007fc6:	eea6 0a26 	vfma.f32	s0, s12, s13
 8007fca:	4770      	bx	lr
 8007fcc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007fd0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8007fd4:	eee0 7a86 	vfma.f32	s15, s1, s12
 8007fd8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8007fdc:	eddf 7a09 	vldr	s15, [pc, #36]	; 8008004 <__kernel_sinf+0x8c>
 8007fe0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8007fe4:	ee30 0a60 	vsub.f32	s0, s0, s1
 8007fe8:	4770      	bx	lr
 8007fea:	bf00      	nop
 8007fec:	2f2ec9d3 	.word	0x2f2ec9d3
 8007ff0:	b2d72f34 	.word	0xb2d72f34
 8007ff4:	3638ef1b 	.word	0x3638ef1b
 8007ff8:	b9500d01 	.word	0xb9500d01
 8007ffc:	3c088889 	.word	0x3c088889
 8008000:	be2aaaab 	.word	0xbe2aaaab
 8008004:	3e2aaaab 	.word	0x3e2aaaab

08008008 <fabsf>:
 8008008:	ee10 3a10 	vmov	r3, s0
 800800c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008010:	ee00 3a10 	vmov	s0, r3
 8008014:	4770      	bx	lr
	...

08008018 <floorf>:
 8008018:	ee10 3a10 	vmov	r3, s0
 800801c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008020:	3a7f      	subs	r2, #127	; 0x7f
 8008022:	2a16      	cmp	r2, #22
 8008024:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008028:	dc2a      	bgt.n	8008080 <floorf+0x68>
 800802a:	2a00      	cmp	r2, #0
 800802c:	da11      	bge.n	8008052 <floorf+0x3a>
 800802e:	eddf 7a18 	vldr	s15, [pc, #96]	; 8008090 <floorf+0x78>
 8008032:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008036:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800803a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800803e:	dd05      	ble.n	800804c <floorf+0x34>
 8008040:	2b00      	cmp	r3, #0
 8008042:	da23      	bge.n	800808c <floorf+0x74>
 8008044:	4a13      	ldr	r2, [pc, #76]	; (8008094 <floorf+0x7c>)
 8008046:	2900      	cmp	r1, #0
 8008048:	bf18      	it	ne
 800804a:	4613      	movne	r3, r2
 800804c:	ee00 3a10 	vmov	s0, r3
 8008050:	4770      	bx	lr
 8008052:	4911      	ldr	r1, [pc, #68]	; (8008098 <floorf+0x80>)
 8008054:	4111      	asrs	r1, r2
 8008056:	420b      	tst	r3, r1
 8008058:	d0fa      	beq.n	8008050 <floorf+0x38>
 800805a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8008090 <floorf+0x78>
 800805e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008062:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800806a:	ddef      	ble.n	800804c <floorf+0x34>
 800806c:	2b00      	cmp	r3, #0
 800806e:	bfbe      	ittt	lt
 8008070:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8008074:	fa40 f202 	asrlt.w	r2, r0, r2
 8008078:	189b      	addlt	r3, r3, r2
 800807a:	ea23 0301 	bic.w	r3, r3, r1
 800807e:	e7e5      	b.n	800804c <floorf+0x34>
 8008080:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008084:	d3e4      	bcc.n	8008050 <floorf+0x38>
 8008086:	ee30 0a00 	vadd.f32	s0, s0, s0
 800808a:	4770      	bx	lr
 800808c:	2300      	movs	r3, #0
 800808e:	e7dd      	b.n	800804c <floorf+0x34>
 8008090:	7149f2ca 	.word	0x7149f2ca
 8008094:	bf800000 	.word	0xbf800000
 8008098:	007fffff 	.word	0x007fffff

0800809c <nanf>:
 800809c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80080a4 <nanf+0x8>
 80080a0:	4770      	bx	lr
 80080a2:	bf00      	nop
 80080a4:	7fc00000 	.word	0x7fc00000

080080a8 <scalbnf>:
 80080a8:	ee10 3a10 	vmov	r3, s0
 80080ac:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80080b0:	d025      	beq.n	80080fe <scalbnf+0x56>
 80080b2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80080b6:	d302      	bcc.n	80080be <scalbnf+0x16>
 80080b8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80080bc:	4770      	bx	lr
 80080be:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80080c2:	d122      	bne.n	800810a <scalbnf+0x62>
 80080c4:	4b2a      	ldr	r3, [pc, #168]	; (8008170 <scalbnf+0xc8>)
 80080c6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8008174 <scalbnf+0xcc>
 80080ca:	4298      	cmp	r0, r3
 80080cc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80080d0:	db16      	blt.n	8008100 <scalbnf+0x58>
 80080d2:	ee10 3a10 	vmov	r3, s0
 80080d6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80080da:	3a19      	subs	r2, #25
 80080dc:	4402      	add	r2, r0
 80080de:	2afe      	cmp	r2, #254	; 0xfe
 80080e0:	dd15      	ble.n	800810e <scalbnf+0x66>
 80080e2:	ee10 3a10 	vmov	r3, s0
 80080e6:	eddf 7a24 	vldr	s15, [pc, #144]	; 8008178 <scalbnf+0xd0>
 80080ea:	eddf 6a24 	vldr	s13, [pc, #144]	; 800817c <scalbnf+0xd4>
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	eeb0 7a67 	vmov.f32	s14, s15
 80080f4:	bfb8      	it	lt
 80080f6:	eef0 7a66 	vmovlt.f32	s15, s13
 80080fa:	ee27 0a27 	vmul.f32	s0, s14, s15
 80080fe:	4770      	bx	lr
 8008100:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008180 <scalbnf+0xd8>
 8008104:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008108:	4770      	bx	lr
 800810a:	0dd2      	lsrs	r2, r2, #23
 800810c:	e7e6      	b.n	80080dc <scalbnf+0x34>
 800810e:	2a00      	cmp	r2, #0
 8008110:	dd06      	ble.n	8008120 <scalbnf+0x78>
 8008112:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008116:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800811a:	ee00 3a10 	vmov	s0, r3
 800811e:	4770      	bx	lr
 8008120:	f112 0f16 	cmn.w	r2, #22
 8008124:	da1a      	bge.n	800815c <scalbnf+0xb4>
 8008126:	f24c 3350 	movw	r3, #50000	; 0xc350
 800812a:	4298      	cmp	r0, r3
 800812c:	ee10 3a10 	vmov	r3, s0
 8008130:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008134:	dd0a      	ble.n	800814c <scalbnf+0xa4>
 8008136:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8008178 <scalbnf+0xd0>
 800813a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800817c <scalbnf+0xd4>
 800813e:	eef0 7a40 	vmov.f32	s15, s0
 8008142:	2b00      	cmp	r3, #0
 8008144:	bf18      	it	ne
 8008146:	eeb0 0a47 	vmovne.f32	s0, s14
 800814a:	e7db      	b.n	8008104 <scalbnf+0x5c>
 800814c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8008180 <scalbnf+0xd8>
 8008150:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8008184 <scalbnf+0xdc>
 8008154:	eef0 7a40 	vmov.f32	s15, s0
 8008158:	2b00      	cmp	r3, #0
 800815a:	e7f3      	b.n	8008144 <scalbnf+0x9c>
 800815c:	3219      	adds	r2, #25
 800815e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008162:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008166:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008188 <scalbnf+0xe0>
 800816a:	ee07 3a10 	vmov	s14, r3
 800816e:	e7c4      	b.n	80080fa <scalbnf+0x52>
 8008170:	ffff3cb0 	.word	0xffff3cb0
 8008174:	4c000000 	.word	0x4c000000
 8008178:	7149f2ca 	.word	0x7149f2ca
 800817c:	f149f2ca 	.word	0xf149f2ca
 8008180:	0da24260 	.word	0x0da24260
 8008184:	8da24260 	.word	0x8da24260
 8008188:	33000000 	.word	0x33000000

0800818c <_init>:
 800818c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800818e:	bf00      	nop
 8008190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008192:	bc08      	pop	{r3}
 8008194:	469e      	mov	lr, r3
 8008196:	4770      	bx	lr

08008198 <_fini>:
 8008198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800819a:	bf00      	nop
 800819c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800819e:	bc08      	pop	{r3}
 80081a0:	469e      	mov	lr, r3
 80081a2:	4770      	bx	lr
