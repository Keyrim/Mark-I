
Mark_I.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008844  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  080089cc  080089cc  000189cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e60  08008e60  00020154  2**0
                  CONTENTS
  4 .ARM          00000008  08008e60  08008e60  00018e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e68  08008e68  00020154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e68  08008e68  00018e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e6c  08008e6c  00018e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000154  20000000  08008e70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020154  2**0
                  CONTENTS
 10 .bss          00000f10  20000154  20000154  00020154  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001064  20001064  00020154  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f837  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004137  00000000  00000000  0003f9bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012b0  00000000  00000000  00043af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001110  00000000  00000000  00044da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023835  00000000  00000000  00045eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cd43  00000000  00000000  000696ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4c2c  00000000  00000000  00086430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014b05c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d1c  00000000  00000000  0014b0b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000154 	.word	0x20000154
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080089b4 	.word	0x080089b4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000158 	.word	0x20000158
 80001c4:	080089b4 	.word	0x080089b4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <COMPLEMENTARY_FILTER_Init>:

/* Static function prototype */
static void angle_180(float * x);

void COMPLEMENTARY_FILTER_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	filter.gyro = MPU_Get_Gyro_Ptr();
 80004c4:	f001 fffc 	bl	80024c0 <MPU_Get_Gyro_Ptr>
 80004c8:	4603      	mov	r3, r0
 80004ca:	4a09      	ldr	r2, [pc, #36]	; (80004f0 <COMPLEMENTARY_FILTER_Init+0x30>)
 80004cc:	6013      	str	r3, [r2, #0]
	filter.gyro_raw = NULL;
 80004ce:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <COMPLEMENTARY_FILTER_Init+0x30>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	605a      	str	r2, [r3, #4]
	filter.acc = MPU_Get_Acc_Ptr();
 80004d4:	f001 fffe 	bl	80024d4 <MPU_Get_Acc_Ptr>
 80004d8:	4603      	mov	r3, r0
 80004da:	4a05      	ldr	r2, [pc, #20]	; (80004f0 <COMPLEMENTARY_FILTER_Init+0x30>)
 80004dc:	6093      	str	r3, [r2, #8]
	filter.alpha_gyro = ALPHA;
 80004de:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <COMPLEMENTARY_FILTER_Init+0x30>)
 80004e0:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <COMPLEMENTARY_FILTER_Init+0x34>)
 80004e2:	62da      	str	r2, [r3, #44]	; 0x2c
	filter.alpha_acc = 1.0f - ALPHA;
 80004e4:	4b02      	ldr	r3, [pc, #8]	; (80004f0 <COMPLEMENTARY_FILTER_Init+0x30>)
 80004e6:	4a04      	ldr	r2, [pc, #16]	; (80004f8 <COMPLEMENTARY_FILTER_Init+0x38>)
 80004e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	20000000 	.word	0x20000000
 80004f4:	3f7ae148 	.word	0x3f7ae148
 80004f8:	3ca3d700 	.word	0x3ca3d700

080004fc <COMPLEMENTARY_FILTER_Process>:

void COMPLEMENTARY_FILTER_Process(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af00      	add	r7, sp, #0
	/* Total acceleration */
	float acc_total = filter.acc[0] * filter.acc[0];
 8000502:	4baf      	ldr	r3, [pc, #700]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000504:	689b      	ldr	r3, [r3, #8]
 8000506:	ed93 7a00 	vldr	s14, [r3]
 800050a:	4bad      	ldr	r3, [pc, #692]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800050c:	689b      	ldr	r3, [r3, #8]
 800050e:	edd3 7a00 	vldr	s15, [r3]
 8000512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000516:	edc7 7a05 	vstr	s15, [r7, #20]
	acc_total += filter.acc[1] * filter.acc[1];
 800051a:	4ba9      	ldr	r3, [pc, #676]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800051c:	689b      	ldr	r3, [r3, #8]
 800051e:	3304      	adds	r3, #4
 8000520:	ed93 7a00 	vldr	s14, [r3]
 8000524:	4ba6      	ldr	r3, [pc, #664]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000526:	689b      	ldr	r3, [r3, #8]
 8000528:	3304      	adds	r3, #4
 800052a:	edd3 7a00 	vldr	s15, [r3]
 800052e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000532:	ed97 7a05 	vldr	s14, [r7, #20]
 8000536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800053a:	edc7 7a05 	vstr	s15, [r7, #20]
	acc_total += filter.acc[2] * filter.acc[2];
 800053e:	4ba0      	ldr	r3, [pc, #640]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000540:	689b      	ldr	r3, [r3, #8]
 8000542:	3308      	adds	r3, #8
 8000544:	ed93 7a00 	vldr	s14, [r3]
 8000548:	4b9d      	ldr	r3, [pc, #628]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	3308      	adds	r3, #8
 800054e:	edd3 7a00 	vldr	s15, [r3]
 8000552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000556:	ed97 7a05 	vldr	s14, [r7, #20]
 800055a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800055e:	edc7 7a05 	vstr	s15, [r7, #20]
	acc_total = sqrtf(acc_total);
 8000562:	ed97 0a05 	vldr	s0, [r7, #20]
 8000566:	f007 fbe5 	bl	8007d34 <sqrtf>
 800056a:	ed87 0a05 	vstr	s0, [r7, #20]

	/* Guess the angles according to the accelerometer and some trigonometry */
	if(acc_total)
 800056e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000572:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800057a:	d06c      	beq.n	8000656 <COMPLEMENTARY_FILTER_Process+0x15a>
	{
		float inv_acc_total = 1.0f / acc_total;
 800057c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000580:	ed97 7a05 	vldr	s14, [r7, #20]
 8000584:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000588:	edc7 7a04 	vstr	s15, [r7, #16]
		if(absolute(filter.acc[axe_eROLL]) < acc_total)
 800058c:	4b8c      	ldr	r3, [pc, #560]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	edd3 7a00 	vldr	s15, [r3]
 8000594:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800059c:	db04      	blt.n	80005a8 <COMPLEMENTARY_FILTER_Process+0xac>
 800059e:	4b88      	ldr	r3, [pc, #544]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80005a0:	689b      	ldr	r3, [r3, #8]
 80005a2:	edd3 7a00 	vldr	s15, [r3]
 80005a6:	e005      	b.n	80005b4 <COMPLEMENTARY_FILTER_Process+0xb8>
 80005a8:	4b85      	ldr	r3, [pc, #532]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	edd3 7a00 	vldr	s15, [r3]
 80005b0:	eef1 7a67 	vneg.f32	s15, s15
 80005b4:	ed97 7a05 	vldr	s14, [r7, #20]
 80005b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005c0:	d516      	bpl.n	80005f0 <COMPLEMENTARY_FILTER_Process+0xf4>
		{
			filter.angle_acc[axe_ePITCH] = 	-asinf(filter.acc[axe_eROLL] * inv_acc_total) * RAD_TO_DEG;
 80005c2:	4b7f      	ldr	r3, [pc, #508]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80005c4:	689b      	ldr	r3, [r3, #8]
 80005c6:	ed93 7a00 	vldr	s14, [r3]
 80005ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80005ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005d2:	eeb0 0a67 	vmov.f32	s0, s15
 80005d6:	f007 fb7b 	bl	8007cd0 <asinf>
 80005da:	eef0 7a40 	vmov.f32	s15, s0
 80005de:	eef1 7a67 	vneg.f32	s15, s15
 80005e2:	ed9f 7a78 	vldr	s14, [pc, #480]	; 80007c4 <COMPLEMENTARY_FILTER_Process+0x2c8>
 80005e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005ea:	4b75      	ldr	r3, [pc, #468]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80005ec:	edc3 7a07 	vstr	s15, [r3, #28]
		}
		if(absolute(filter.acc[axe_ePITCH]) < acc_total)
 80005f0:	4b73      	ldr	r3, [pc, #460]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	3304      	adds	r3, #4
 80005f6:	edd3 7a00 	vldr	s15, [r3]
 80005fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80005fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000602:	db04      	blt.n	800060e <COMPLEMENTARY_FILTER_Process+0x112>
 8000604:	4b6e      	ldr	r3, [pc, #440]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	edd3 7a01 	vldr	s15, [r3, #4]
 800060c:	e006      	b.n	800061c <COMPLEMENTARY_FILTER_Process+0x120>
 800060e:	4b6c      	ldr	r3, [pc, #432]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000610:	689b      	ldr	r3, [r3, #8]
 8000612:	3304      	adds	r3, #4
 8000614:	edd3 7a00 	vldr	s15, [r3]
 8000618:	eef1 7a67 	vneg.f32	s15, s15
 800061c:	ed97 7a05 	vldr	s14, [r7, #20]
 8000620:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000628:	d515      	bpl.n	8000656 <COMPLEMENTARY_FILTER_Process+0x15a>
		{
			filter.angle_acc[axe_eROLL] = 	asinf(filter.acc[axe_ePITCH] * inv_acc_total) * RAD_TO_DEG;
 800062a:	4b65      	ldr	r3, [pc, #404]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800062c:	689b      	ldr	r3, [r3, #8]
 800062e:	3304      	adds	r3, #4
 8000630:	ed93 7a00 	vldr	s14, [r3]
 8000634:	edd7 7a04 	vldr	s15, [r7, #16]
 8000638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800063c:	eeb0 0a67 	vmov.f32	s0, s15
 8000640:	f007 fb46 	bl	8007cd0 <asinf>
 8000644:	eef0 7a40 	vmov.f32	s15, s0
 8000648:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80007c4 <COMPLEMENTARY_FILTER_Process+0x2c8>
 800064c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000650:	4b5b      	ldr	r3, [pc, #364]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000652:	edc3 7a06 	vstr	s15, [r3, #24]
		}
	}

	if(!filter.used_once)
 8000656:	4b5a      	ldr	r3, [pc, #360]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000658:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800065c:	2b00      	cmp	r3, #0
 800065e:	d110      	bne.n	8000682 <COMPLEMENTARY_FILTER_Process+0x186>
	{
		filter.used_once = TRUE;
 8000660:	4b57      	ldr	r3, [pc, #348]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000662:	2201      	movs	r2, #1
 8000664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		filter.angle[axe_eROLL] = filter.angle_acc[axe_eROLL];
 8000668:	4b55      	ldr	r3, [pc, #340]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	4a54      	ldr	r2, [pc, #336]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800066e:	60d3      	str	r3, [r2, #12]
		filter.angle[axe_ePITCH] = filter.angle_acc[axe_ePITCH];
 8000670:	4b53      	ldr	r3, [pc, #332]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000672:	69db      	ldr	r3, [r3, #28]
 8000674:	4a52      	ldr	r2, [pc, #328]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000676:	6113      	str	r3, [r2, #16]
		filter.angle[axe_eYAW] = 0;
 8000678:	4b51      	ldr	r3, [pc, #324]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800067a:	f04f 0200 	mov.w	r2, #0
 800067e:	615a      	str	r2, [r3, #20]
		/* Finally, the complementary filter */
		filter.angle[axe_eROLL] = filter.alpha_gyro * filter.angle[axe_eROLL] + filter.alpha_acc * filter.angle_acc[axe_eROLL];
		filter.angle[axe_ePITCH] = filter.alpha_gyro * filter.angle[axe_ePITCH] + filter.alpha_acc * filter.angle_acc[axe_ePITCH];
	}

}
 8000680:	e09a      	b.n	80007b8 <COMPLEMENTARY_FILTER_Process+0x2bc>
		float dx = filter.gyro[axe_eROLL] * filter.period;
 8000682:	4b4f      	ldr	r3, [pc, #316]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	ed93 7a00 	vldr	s14, [r3]
 800068a:	4b4d      	ldr	r3, [pc, #308]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800068c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000694:	edc7 7a03 	vstr	s15, [r7, #12]
		float dy = filter.gyro[axe_ePITCH] * filter.period;
 8000698:	4b49      	ldr	r3, [pc, #292]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	3304      	adds	r3, #4
 800069e:	ed93 7a00 	vldr	s14, [r3]
 80006a2:	4b47      	ldr	r3, [pc, #284]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006a4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80006a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006ac:	edc7 7a02 	vstr	s15, [r7, #8]
		float dz = filter.gyro[axe_eYAW] * filter.period;
 80006b0:	4b43      	ldr	r3, [pc, #268]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	3308      	adds	r3, #8
 80006b6:	ed93 7a00 	vldr	s14, [r3]
 80006ba:	4b41      	ldr	r3, [pc, #260]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006bc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80006c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006c4:	edc7 7a01 	vstr	s15, [r7, #4]
		filter.angle[axe_eROLL] += dx;
 80006c8:	4b3d      	ldr	r3, [pc, #244]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006ca:	ed93 7a03 	vldr	s14, [r3, #12]
 80006ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80006d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006d6:	4b3a      	ldr	r3, [pc, #232]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006d8:	edc3 7a03 	vstr	s15, [r3, #12]
		filter.angle[axe_ePITCH] += dy;
 80006dc:	4b38      	ldr	r3, [pc, #224]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006de:	ed93 7a04 	vldr	s14, [r3, #16]
 80006e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80006e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006ea:	4b35      	ldr	r3, [pc, #212]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006ec:	edc3 7a04 	vstr	s15, [r3, #16]
		filter.angle[axe_eYAW] += dz;
 80006f0:	4b33      	ldr	r3, [pc, #204]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006f2:	ed93 7a05 	vldr	s14, [r3, #20]
 80006f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80006fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006fe:	4b30      	ldr	r3, [pc, #192]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000700:	edc3 7a05 	vstr	s15, [r3, #20]
		float sin_dz = sinf(DEG_TO_RAD * dz);
 8000704:	edd7 7a01 	vldr	s15, [r7, #4]
 8000708:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80007c8 <COMPLEMENTARY_FILTER_Process+0x2cc>
 800070c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000710:	eeb0 0a67 	vmov.f32	s0, s15
 8000714:	f007 fa9a 	bl	8007c4c <sinf>
 8000718:	ed87 0a00 	vstr	s0, [r7]
		filter.angle[axe_eROLL] += sin_dz * filter.angle[axe_ePITCH];
 800071c:	4b28      	ldr	r3, [pc, #160]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800071e:	ed93 7a03 	vldr	s14, [r3, #12]
 8000722:	4b27      	ldr	r3, [pc, #156]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000724:	edd3 6a04 	vldr	s13, [r3, #16]
 8000728:	edd7 7a00 	vldr	s15, [r7]
 800072c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000734:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000736:	edc3 7a03 	vstr	s15, [r3, #12]
		filter.angle[axe_ePITCH] -= sin_dz * filter.angle[axe_eROLL];
 800073a:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800073c:	ed93 7a04 	vldr	s14, [r3, #16]
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000742:	edd3 6a03 	vldr	s13, [r3, #12]
 8000746:	edd7 7a00 	vldr	s15, [r7]
 800074a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800074e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000752:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000754:	edc3 7a04 	vstr	s15, [r3, #16]
		angle_180(&filter.angle[axe_eROLL]);
 8000758:	481c      	ldr	r0, [pc, #112]	; (80007cc <COMPLEMENTARY_FILTER_Process+0x2d0>)
 800075a:	f000 f845 	bl	80007e8 <angle_180>
		angle_180(&filter.angle[axe_ePITCH]);
 800075e:	481c      	ldr	r0, [pc, #112]	; (80007d0 <COMPLEMENTARY_FILTER_Process+0x2d4>)
 8000760:	f000 f842 	bl	80007e8 <angle_180>
		filter.angle[axe_eROLL] = filter.alpha_gyro * filter.angle[axe_eROLL] + filter.alpha_acc * filter.angle_acc[axe_eROLL];
 8000764:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000766:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800076c:	edd3 7a03 	vldr	s15, [r3, #12]
 8000770:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000776:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800077c:	edd3 7a06 	vldr	s15, [r3, #24]
 8000780:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000784:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000788:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800078a:	edc3 7a03 	vstr	s15, [r3, #12]
		filter.angle[axe_ePITCH] = filter.alpha_gyro * filter.angle[axe_ePITCH] + filter.alpha_acc * filter.angle_acc[axe_ePITCH];
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000790:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000794:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000796:	edd3 7a04 	vldr	s15, [r3, #16]
 800079a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80007a0:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80007a6:	edd3 7a07 	vldr	s15, [r3, #28]
 80007aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007b2:	4b03      	ldr	r3, [pc, #12]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80007b4:	edc3 7a04 	vstr	s15, [r3, #16]
}
 80007b8:	bf00      	nop
 80007ba:	3718      	adds	r7, #24
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000000 	.word	0x20000000
 80007c4:	42652ee1 	.word	0x42652ee1
 80007c8:	3c8efa34 	.word	0x3c8efa34
 80007cc:	2000000c 	.word	0x2000000c
 80007d0:	20000010 	.word	0x20000010

080007d4 <COMPLEMENTARY_FILTER_Get_Filter>:

complementary_filter_t * COMPLEMENTARY_FILTER_Get_Filter(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
	return &filter;
 80007d8:	4b02      	ldr	r3, [pc, #8]	; (80007e4 <COMPLEMENTARY_FILTER_Get_Filter+0x10>)
}
 80007da:	4618      	mov	r0, r3
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	20000000 	.word	0x20000000

080007e8 <angle_180>:

static void angle_180(float * x)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	if(*x > 180)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	edd3 7a00 	vldr	s15, [r3]
 80007f6:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000850 <angle_180+0x68>
 80007fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000802:	dd0a      	ble.n	800081a <angle_180+0x32>
	{
		*x -= 360;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	edd3 7a00 	vldr	s15, [r3]
 800080a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000854 <angle_180+0x6c>
 800080e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	edc3 7a00 	vstr	s15, [r3]
	}
	else if( *x < -180)
	{
		*x += 360 ;
	}
}
 8000818:	e014      	b.n	8000844 <angle_180+0x5c>
	else if( *x < -180)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	edd3 7a00 	vldr	s15, [r3]
 8000820:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000858 <angle_180+0x70>
 8000824:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800082c:	d400      	bmi.n	8000830 <angle_180+0x48>
}
 800082e:	e009      	b.n	8000844 <angle_180+0x5c>
		*x += 360 ;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	edd3 7a00 	vldr	s15, [r3]
 8000836:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000854 <angle_180+0x6c>
 800083a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	edc3 7a00 	vstr	s15, [r3]
}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	43340000 	.word	0x43340000
 8000854:	43b40000 	.word	0x43b40000
 8000858:	c3340000 	.word	0xc3340000

0800085c <CONTROLLER_Init>:
		.angle_kp = 			{10.0f, 	10.0f, 		0},
		.angle_speed_kp = 		{3.0f, 		3.0f, 		10.0f},
};

void CONTROLLER_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	controller.angle = COMPLEMENTARY_FILTER_Get_Filter()->angle;
 8000860:	f7ff ffb8 	bl	80007d4 <COMPLEMENTARY_FILTER_Get_Filter>
 8000864:	4603      	mov	r3, r0
 8000866:	330c      	adds	r3, #12
 8000868:	4a09      	ldr	r2, [pc, #36]	; (8000890 <CONTROLLER_Init+0x34>)
 800086a:	6013      	str	r3, [r2, #0]
	controller.angle_speed = COMPLEMENTARY_FILTER_Get_Filter()->gyro;
 800086c:	f7ff ffb2 	bl	80007d4 <COMPLEMENTARY_FILTER_Get_Filter>
 8000870:	4603      	mov	r3, r0
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a06      	ldr	r2, [pc, #24]	; (8000890 <CONTROLLER_Init+0x34>)
 8000876:	6293      	str	r3, [r2, #40]	; 0x28
	controller.output = MOTOR_MIXER_Get_Angle_Input_Ptr();
 8000878:	f000 ff3e 	bl	80016f8 <MOTOR_MIXER_Get_Angle_Input_Ptr>
 800087c:	4603      	mov	r3, r0
 800087e:	4a04      	ldr	r2, [pc, #16]	; (8000890 <CONTROLLER_Init+0x34>)
 8000880:	6513      	str	r3, [r2, #80]	; 0x50

	controller.state = controller_state_eDISABLED;
 8000882:	4b03      	ldr	r3, [pc, #12]	; (8000890 <CONTROLLER_Init+0x34>)
 8000884:	2200      	movs	r2, #0
 8000886:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000038 	.word	0x20000038

08000894 <CONTROLLER_Process>:
void CONTROLLER_Process(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
	if(controller.new_state != controller.state)
 8000898:	4b55      	ldr	r3, [pc, #340]	; (80009f0 <CONTROLLER_Process+0x15c>)
 800089a:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 800089e:	4b54      	ldr	r3, [pc, #336]	; (80009f0 <CONTROLLER_Process+0x15c>)
 80008a0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d005      	beq.n	80008b4 <CONTROLLER_Process+0x20>
	{
		controller.state = controller.new_state;
 80008a8:	4b51      	ldr	r3, [pc, #324]	; (80009f0 <CONTROLLER_Process+0x15c>)
 80008aa:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 80008ae:	4b50      	ldr	r3, [pc, #320]	; (80009f0 <CONTROLLER_Process+0x15c>)
 80008b0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	}
	if(controller.state)
 80008b4:	4b4e      	ldr	r3, [pc, #312]	; (80009f0 <CONTROLLER_Process+0x15c>)
 80008b6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	f000 8081 	beq.w	80009c2 <CONTROLLER_Process+0x12e>
	{
		/* A first PID to correct angle errors when we are in angle mode */
		if(controller.state == controller_state_eANGLE)
 80008c0:	4b4b      	ldr	r3, [pc, #300]	; (80009f0 <CONTROLLER_Process+0x15c>)
 80008c2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80008c6:	2b02      	cmp	r3, #2
 80008c8:	d12e      	bne.n	8000928 <CONTROLLER_Process+0x94>
		{
			/* Compute angle errors */
			controller.angle_error[axe_eROLL] = controller.target_angle[axe_eROLL] - controller.angle[axe_eROLL];
 80008ca:	4b49      	ldr	r3, [pc, #292]	; (80009f0 <CONTROLLER_Process+0x15c>)
 80008cc:	ed93 7a01 	vldr	s14, [r3, #4]
 80008d0:	4b47      	ldr	r3, [pc, #284]	; (80009f0 <CONTROLLER_Process+0x15c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	edd3 7a00 	vldr	s15, [r3]
 80008d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008dc:	4b44      	ldr	r3, [pc, #272]	; (80009f0 <CONTROLLER_Process+0x15c>)
 80008de:	edc3 7a04 	vstr	s15, [r3, #16]
			controller.angle_error[axe_ePITCH] = controller.target_angle[axe_ePITCH] - controller.angle[axe_ePITCH];
 80008e2:	4b43      	ldr	r3, [pc, #268]	; (80009f0 <CONTROLLER_Process+0x15c>)
 80008e4:	ed93 7a02 	vldr	s14, [r3, #8]
 80008e8:	4b41      	ldr	r3, [pc, #260]	; (80009f0 <CONTROLLER_Process+0x15c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	3304      	adds	r3, #4
 80008ee:	edd3 7a00 	vldr	s15, [r3]
 80008f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008f6:	4b3e      	ldr	r3, [pc, #248]	; (80009f0 <CONTROLLER_Process+0x15c>)
 80008f8:	edc3 7a05 	vstr	s15, [r3, #20]
			/* Handle angle continuity at -PI and + PI */
			//TODO ASAP
			/* Compute PID on angles */
			controller.target_angle_speed[axe_eROLL] = controller.angle_kp[axe_eROLL] * controller.angle_error[axe_eROLL];
 80008fc:	4b3c      	ldr	r3, [pc, #240]	; (80009f0 <CONTROLLER_Process+0x15c>)
 80008fe:	ed93 7a07 	vldr	s14, [r3, #28]
 8000902:	4b3b      	ldr	r3, [pc, #236]	; (80009f0 <CONTROLLER_Process+0x15c>)
 8000904:	edd3 7a04 	vldr	s15, [r3, #16]
 8000908:	ee67 7a27 	vmul.f32	s15, s14, s15
 800090c:	4b38      	ldr	r3, [pc, #224]	; (80009f0 <CONTROLLER_Process+0x15c>)
 800090e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			controller.target_angle_speed[axe_ePITCH] = controller.angle_kp[axe_ePITCH] * controller.angle_error[axe_ePITCH];
 8000912:	4b37      	ldr	r3, [pc, #220]	; (80009f0 <CONTROLLER_Process+0x15c>)
 8000914:	ed93 7a08 	vldr	s14, [r3, #32]
 8000918:	4b35      	ldr	r3, [pc, #212]	; (80009f0 <CONTROLLER_Process+0x15c>)
 800091a:	edd3 7a05 	vldr	s15, [r3, #20]
 800091e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000922:	4b33      	ldr	r3, [pc, #204]	; (80009f0 <CONTROLLER_Process+0x15c>)
 8000924:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		}
		/* Angular speed regulation */
		/* First thing first, errors */
		controller.angle_speed_error[axe_eROLL] = controller.target_angle_speed[axe_eROLL] - controller.angle_speed[axe_eROLL];
 8000928:	4b31      	ldr	r3, [pc, #196]	; (80009f0 <CONTROLLER_Process+0x15c>)
 800092a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800092e:	4b30      	ldr	r3, [pc, #192]	; (80009f0 <CONTROLLER_Process+0x15c>)
 8000930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000932:	edd3 7a00 	vldr	s15, [r3]
 8000936:	ee77 7a67 	vsub.f32	s15, s14, s15
 800093a:	4b2d      	ldr	r3, [pc, #180]	; (80009f0 <CONTROLLER_Process+0x15c>)
 800093c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		controller.angle_speed_error[axe_ePITCH] = controller.target_angle_speed[axe_ePITCH] - controller.angle_speed[axe_ePITCH];
 8000940:	4b2b      	ldr	r3, [pc, #172]	; (80009f0 <CONTROLLER_Process+0x15c>)
 8000942:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000946:	4b2a      	ldr	r3, [pc, #168]	; (80009f0 <CONTROLLER_Process+0x15c>)
 8000948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800094a:	3304      	adds	r3, #4
 800094c:	edd3 7a00 	vldr	s15, [r3]
 8000950:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000954:	4b26      	ldr	r3, [pc, #152]	; (80009f0 <CONTROLLER_Process+0x15c>)
 8000956:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		controller.angle_speed_error[axe_eYAW] = controller.target_angle_speed[axe_eYAW] - controller.angle_speed[axe_eYAW];
 800095a:	4b25      	ldr	r3, [pc, #148]	; (80009f0 <CONTROLLER_Process+0x15c>)
 800095c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8000960:	4b23      	ldr	r3, [pc, #140]	; (80009f0 <CONTROLLER_Process+0x15c>)
 8000962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000964:	3308      	adds	r3, #8
 8000966:	edd3 7a00 	vldr	s15, [r3]
 800096a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800096e:	4b20      	ldr	r3, [pc, #128]	; (80009f0 <CONTROLLER_Process+0x15c>)
 8000970:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

		/* Now, PID's time ! */
		controller.output[axe_eROLL] = controller.angle_speed_error[axe_eROLL] * controller.angle_speed_kp[axe_eROLL];
 8000974:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <CONTROLLER_Process+0x15c>)
 8000976:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800097a:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <CONTROLLER_Process+0x15c>)
 800097c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8000980:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <CONTROLLER_Process+0x15c>)
 8000982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000984:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000988:	edc3 7a00 	vstr	s15, [r3]
		controller.output[axe_ePITCH] = controller.angle_speed_error[axe_ePITCH] * controller.angle_speed_kp[axe_ePITCH];
 800098c:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <CONTROLLER_Process+0x15c>)
 800098e:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8000992:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <CONTROLLER_Process+0x15c>)
 8000994:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8000998:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <CONTROLLER_Process+0x15c>)
 800099a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800099c:	3304      	adds	r3, #4
 800099e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009a2:	edc3 7a00 	vstr	s15, [r3]
		controller.output[axe_eYAW] = controller.angle_speed_error[axe_eYAW] * controller.angle_speed_kp[axe_eYAW];
 80009a6:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <CONTROLLER_Process+0x15c>)
 80009a8:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80009ac:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <CONTROLLER_Process+0x15c>)
 80009ae:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <CONTROLLER_Process+0x15c>)
 80009b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009b6:	3308      	adds	r3, #8
 80009b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009bc:	edc3 7a00 	vstr	s15, [r3]
	{
		controller.output[axe_eROLL] = 0;
		controller.output[axe_ePITCH] = 0;
		controller.output[axe_eYAW] = 0;
	}
}
 80009c0:	e010      	b.n	80009e4 <CONTROLLER_Process+0x150>
		controller.output[axe_eROLL] = 0;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <CONTROLLER_Process+0x15c>)
 80009c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009c6:	f04f 0200 	mov.w	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
		controller.output[axe_ePITCH] = 0;
 80009cc:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <CONTROLLER_Process+0x15c>)
 80009ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009d0:	3304      	adds	r3, #4
 80009d2:	f04f 0200 	mov.w	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
		controller.output[axe_eYAW] = 0;
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <CONTROLLER_Process+0x15c>)
 80009da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009dc:	3308      	adds	r3, #8
 80009de:	f04f 0200 	mov.w	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	20000038 	.word	0x20000038

080009f4 <CONTROLLER_Set_State>:

void CONTROLLER_Set_State(controller_state_e new_state)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	71fb      	strb	r3, [r7, #7]
	controller.new_state = new_state;
 80009fe:	4a05      	ldr	r2, [pc, #20]	; (8000a14 <CONTROLLER_Set_State+0x20>)
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	20000038 	.word	0x20000038

08000a18 <CONTROLLER_Get_Angle_Target>:

float * CONTROLLER_Get_Angle_Target(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
	return controller.target_angle;
 8000a1c:	4b02      	ldr	r3, [pc, #8]	; (8000a28 <CONTROLLER_Get_Angle_Target+0x10>)
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	2000003c 	.word	0x2000003c

08000a2c <CONTROLLER_Get_Angle_Speed_Target>:

float * CONTROLLER_Get_Angle_Speed_Target(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
	return controller.target_angle_speed;
 8000a30:	4b02      	ldr	r3, [pc, #8]	; (8000a3c <CONTROLLER_Get_Angle_Speed_Target+0x10>)
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	20000064 	.word	0x20000064

08000a40 <DATA_LOGGER_Init>:
/*
 * @brief Declare every data
 * @param mark1_ pointer to a system_t structure
 */
void DATA_LOGGER_Init(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
	/* -------------- Outputs ----------------- */
	DEFINE_DATA(data_id_eMCU_LOAD,
 8000a44:	4b2b      	ldr	r3, [pc, #172]	; (8000af4 <DATA_LOGGER_Init+0xb4>)
 8000a46:	2203      	movs	r2, #3
 8000a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000a4c:	4b29      	ldr	r3, [pc, #164]	; (8000af4 <DATA_LOGGER_Init+0xb4>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	641a      	str	r2, [r3, #64]	; 0x40
 8000a52:	4b28      	ldr	r3, [pc, #160]	; (8000af4 <DATA_LOGGER_Init+0xb4>)
 8000a54:	222a      	movs	r2, #42	; 0x2a
 8000a56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000a5a:	4b26      	ldr	r3, [pc, #152]	; (8000af4 <DATA_LOGGER_Init+0xb4>)
 8000a5c:	4a26      	ldr	r2, [pc, #152]	; (8000af8 <DATA_LOGGER_Init+0xb8>)
 8000a5e:	649a      	str	r2, [r3, #72]	; 0x48
 8000a60:	4b24      	ldr	r3, [pc, #144]	; (8000af4 <DATA_LOGGER_Init+0xb4>)
 8000a62:	2208      	movs	r2, #8
 8000a64:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8000a68:	4b22      	ldr	r3, [pc, #136]	; (8000af4 <DATA_LOGGER_Init+0xb4>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				NULL,
				data_format_e16B_FLOAT_2D,
				"Mcu Load",
				use_format_eAS_OUTPUT);
	/* -------------- Inputs ----------------- */
	DEFINE_DATA(data_id_eCONFIG_REQUEST,
 8000a70:	4b20      	ldr	r3, [pc, #128]	; (8000af4 <DATA_LOGGER_Init+0xb4>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	721a      	strb	r2, [r3, #8]
 8000a76:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <DATA_LOGGER_Init+0xb4>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <DATA_LOGGER_Init+0xb4>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	725a      	strb	r2, [r3, #9]
 8000a82:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <DATA_LOGGER_Init+0xb4>)
 8000a84:	4a1d      	ldr	r2, [pc, #116]	; (8000afc <DATA_LOGGER_Init+0xbc>)
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	4b1a      	ldr	r3, [pc, #104]	; (8000af4 <DATA_LOGGER_Init+0xb4>)
 8000a8a:	2212      	movs	r2, #18
 8000a8c:	741a      	strb	r2, [r3, #16]
 8000a8e:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <DATA_LOGGER_Init+0xb4>)
 8000a90:	2202      	movs	r2, #2
 8000a92:	745a      	strb	r2, [r3, #17]
				NULL,
				data_format_e0B_BUTTON,
				"Send Configuration",
				use_format_eAS_INPUT);
	DEFINE_DATA(data_id_eSTART_TRANSFER,
 8000a94:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <DATA_LOGGER_Init+0xb4>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	771a      	strb	r2, [r3, #28]
 8000a9a:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <DATA_LOGGER_Init+0xb4>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
 8000aa0:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <DATA_LOGGER_Init+0xb4>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	775a      	strb	r2, [r3, #29]
 8000aa6:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <DATA_LOGGER_Init+0xb4>)
 8000aa8:	4a15      	ldr	r2, [pc, #84]	; (8000b00 <DATA_LOGGER_Init+0xc0>)
 8000aaa:	621a      	str	r2, [r3, #32]
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <DATA_LOGGER_Init+0xb4>)
 8000aae:	220e      	movs	r2, #14
 8000ab0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <DATA_LOGGER_Init+0xb4>)
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				NULL,
				data_format_e0B_BUTTON,
				"Start Transfer",
				use_format_eAS_INPUT);
	DEFINE_DATA(data_id_eSTOP_TRANSFER,
 8000abc:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <DATA_LOGGER_Init+0xb4>)
 8000abe:	2202      	movs	r2, #2
 8000ac0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <DATA_LOGGER_Init+0xb4>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000aca:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <DATA_LOGGER_Init+0xb4>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <DATA_LOGGER_Init+0xb4>)
 8000ad4:	4a0b      	ldr	r2, [pc, #44]	; (8000b04 <DATA_LOGGER_Init+0xc4>)
 8000ad6:	635a      	str	r2, [r3, #52]	; 0x34
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <DATA_LOGGER_Init+0xb4>)
 8000ada:	220d      	movs	r2, #13
 8000adc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8000ae0:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <DATA_LOGGER_Init+0xb4>)
 8000ae2:	2202      	movs	r2, #2
 8000ae4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
				NULL,
				data_format_e0B_BUTTON,
				"Stop Transfer",
				use_format_eAS_INPUT);
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	20000170 	.word	0x20000170
 8000af8:	080089cc 	.word	0x080089cc
 8000afc:	080089d8 	.word	0x080089d8
 8000b00:	080089ec 	.word	0x080089ec
 8000b04:	080089fc 	.word	0x080089fc

08000b08 <DATA_LOGGER_Start>:
/*
 * @brief Request to start logging data
 */
void DATA_LOGGER_Start()
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
	start_flag = TRUE;
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <DATA_LOGGER_Start+0x14>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	701a      	strb	r2, [r3, #0]
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	200001c0 	.word	0x200001c0

08000b20 <DATA_LOGGER_Stop>:
/*
 * @brief Request to stop logging data
 */
void DATA_LOGGER_Stop()
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
	stop_flag = TRUE;
 8000b24:	4b03      	ldr	r3, [pc, #12]	; (8000b34 <DATA_LOGGER_Stop+0x14>)
 8000b26:	2201      	movs	r2, #1
 8000b28:	701a      	strb	r2, [r3, #0]
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	200001c2 	.word	0x200001c2

08000b38 <DATA_LOGGER_Main>:

/*
 * @brief Call the state machine and the uart parser
 */
void DATA_LOGGER_Main(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
	state_machine();
 8000b3c:	f000 fab0 	bl	80010a0 <state_machine>
	parse_uart();
 8000b40:	f000 fbc0 	bl	80012c4 <parse_uart>
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <DATA_LOGGER_Reception>:
/*
 * @brief Parse input data
 * @param input_buffer Buffer to use to parse the data
 */
void DATA_LOGGER_Reception(uint8_t * input_buffer)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	uint8_t id = input_buffer[0];
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp_uint_16 = 0 ;
 8000b56:	2300      	movs	r3, #0
 8000b58:	81bb      	strh	r3, [r7, #12]
	int16_t tmp_int_16 = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	817b      	strh	r3, [r7, #10]
	switch(data_list[id].format)
 8000b5e:	7bfa      	ldrb	r2, [r7, #15]
 8000b60:	4954      	ldr	r1, [pc, #336]	; (8000cb4 <DATA_LOGGER_Reception+0x16c>)
 8000b62:	4613      	mov	r3, r2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	4413      	add	r3, r2
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	440b      	add	r3, r1
 8000b6c:	3309      	adds	r3, #9
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b2d      	cmp	r3, #45	; 0x2d
 8000b72:	f200 809a 	bhi.w	8000caa <DATA_LOGGER_Reception+0x162>
 8000b76:	a201      	add	r2, pc, #4	; (adr r2, 8000b7c <DATA_LOGGER_Reception+0x34>)
 8000b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b7c:	08000c35 	.word	0x08000c35
 8000b80:	08000cab 	.word	0x08000cab
 8000b84:	08000cab 	.word	0x08000cab
 8000b88:	08000cab 	.word	0x08000cab
 8000b8c:	08000cab 	.word	0x08000cab
 8000b90:	08000cab 	.word	0x08000cab
 8000b94:	08000cab 	.word	0x08000cab
 8000b98:	08000cab 	.word	0x08000cab
 8000b9c:	08000cab 	.word	0x08000cab
 8000ba0:	08000cab 	.word	0x08000cab
 8000ba4:	08000cab 	.word	0x08000cab
 8000ba8:	08000cab 	.word	0x08000cab
 8000bac:	08000cab 	.word	0x08000cab
 8000bb0:	08000cab 	.word	0x08000cab
 8000bb4:	08000cab 	.word	0x08000cab
 8000bb8:	08000cab 	.word	0x08000cab
 8000bbc:	08000cab 	.word	0x08000cab
 8000bc0:	08000cab 	.word	0x08000cab
 8000bc4:	08000cab 	.word	0x08000cab
 8000bc8:	08000cab 	.word	0x08000cab
 8000bcc:	08000cab 	.word	0x08000cab
 8000bd0:	08000c61 	.word	0x08000c61
 8000bd4:	08000cab 	.word	0x08000cab
 8000bd8:	08000cab 	.word	0x08000cab
 8000bdc:	08000cab 	.word	0x08000cab
 8000be0:	08000cab 	.word	0x08000cab
 8000be4:	08000cab 	.word	0x08000cab
 8000be8:	08000cab 	.word	0x08000cab
 8000bec:	08000cab 	.word	0x08000cab
 8000bf0:	08000cab 	.word	0x08000cab
 8000bf4:	08000cab 	.word	0x08000cab
 8000bf8:	08000cab 	.word	0x08000cab
 8000bfc:	08000cab 	.word	0x08000cab
 8000c00:	08000cab 	.word	0x08000cab
 8000c04:	08000cab 	.word	0x08000cab
 8000c08:	08000cab 	.word	0x08000cab
 8000c0c:	08000cab 	.word	0x08000cab
 8000c10:	08000cab 	.word	0x08000cab
 8000c14:	08000cab 	.word	0x08000cab
 8000c18:	08000cab 	.word	0x08000cab
 8000c1c:	08000cab 	.word	0x08000cab
 8000c20:	08000cab 	.word	0x08000cab
 8000c24:	08000cab 	.word	0x08000cab
 8000c28:	08000cab 	.word	0x08000cab
 8000c2c:	08000c8d 	.word	0x08000c8d
 8000c30:	08000c6f 	.word	0x08000c6f
	{
		case data_format_e0B_BUTTON:
			/* Link an action to each id */
			switch(id)
 8000c34:	7bfb      	ldrb	r3, [r7, #15]
 8000c36:	2b02      	cmp	r3, #2
 8000c38:	d00d      	beq.n	8000c56 <DATA_LOGGER_Reception+0x10e>
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	dc0e      	bgt.n	8000c5c <DATA_LOGGER_Reception+0x114>
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d002      	beq.n	8000c48 <DATA_LOGGER_Reception+0x100>
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d004      	beq.n	8000c50 <DATA_LOGGER_Reception+0x108>
			{
				default:
					break;
 8000c46:	e009      	b.n	8000c5c <DATA_LOGGER_Reception+0x114>
				case data_id_eCONFIG_REQUEST:
					send_config_flag = TRUE;
 8000c48:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <DATA_LOGGER_Reception+0x170>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	701a      	strb	r2, [r3, #0]
					break;
 8000c4e:	e006      	b.n	8000c5e <DATA_LOGGER_Reception+0x116>
				case data_id_eSTART_TRANSFER:
					DATA_LOGGER_Start();
 8000c50:	f7ff ff5a 	bl	8000b08 <DATA_LOGGER_Start>
					break;
 8000c54:	e003      	b.n	8000c5e <DATA_LOGGER_Reception+0x116>
				case data_id_eSTOP_TRANSFER:
					DATA_LOGGER_Stop();
 8000c56:	f7ff ff63 	bl	8000b20 <DATA_LOGGER_Stop>
					break;
 8000c5a:	e000      	b.n	8000c5e <DATA_LOGGER_Reception+0x116>
					break;
 8000c5c:	bf00      	nop
			}
			break;
 8000c5e:	e025      	b.n	8000cac <DATA_LOGGER_Reception+0x164>
		case data_format_e8B_FLOAT_0D:
			break;
		case data_format_e8B_FLOAT_1D:
			break;
		case data_format_e8B_PWM:
			tmp_uint_16 = 4*input_buffer[1];
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3301      	adds	r3, #1
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	81bb      	strh	r3, [r7, #12]
			break;
 8000c6c:	e01e      	b.n	8000cac <DATA_LOGGER_Reception+0x164>
		case data_format_e16B_INT16:
			tmp_int_16 = (int16_t)input_buffer[1] << 8;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	3301      	adds	r3, #1
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	021b      	lsls	r3, r3, #8
 8000c76:	817b      	strh	r3, [r7, #10]
			tmp_int_16 += (int16_t)input_buffer[2];
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3302      	adds	r3, #2
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	897b      	ldrh	r3, [r7, #10]
 8000c82:	4413      	add	r3, r2
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	817b      	strh	r3, [r7, #10]
			switch(id)
			{
				default:
					break;
 8000c88:	bf00      	nop
			}

			break;
 8000c8a:	e00f      	b.n	8000cac <DATA_LOGGER_Reception+0x164>
		case data_format_e16B_UINT16:
			tmp_uint_16 = (uint16_t)input_buffer[1] << 8;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	021b      	lsls	r3, r3, #8
 8000c96:	81bb      	strh	r3, [r7, #12]
			tmp_uint_16 += (uint16_t)input_buffer[2];
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3302      	adds	r3, #2
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	89bb      	ldrh	r3, [r7, #12]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	81bb      	strh	r3, [r7, #12]
			switch(id)
			{
				default:
					break;
 8000ca6:	bf00      	nop
			}

		case data_format_e16B_FLOAT_1D:
			break;
 8000ca8:	e000      	b.n	8000cac <DATA_LOGGER_Reception+0x164>
		default:
			break;
 8000caa:	bf00      	nop

	}
}
 8000cac:	bf00      	nop
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000170 	.word	0x20000170
 8000cb8:	200001c1 	.word	0x200001c1

08000cbc <DATA_LOGGER_Get_Data_Value>:
 * @param id Id of the data
 * @param buffer Buffer array
 * @return Number of bytes written
 */
uint8_t DATA_LOGGER_Get_Data_Value(data_id_e id, uint8_t * buffer)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b087      	sub	sp, #28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	73fb      	strb	r3, [r7, #15]

	/* Local temporary variables */
	int16_t tmp_16 = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	82fb      	strh	r3, [r7, #22]
	float tmp_float = 0;
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]

	/* First byte is reserved for the id */
	buffer[0] = id ;
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	7bfa      	ldrb	r2, [r7, #15]
 8000cd6:	701a      	strb	r2, [r3, #0]
	switch(data_list[id].format)
 8000cd8:	7bfa      	ldrb	r2, [r7, #15]
 8000cda:	498f      	ldr	r1, [pc, #572]	; (8000f18 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000cdc:	4613      	mov	r3, r2
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	4413      	add	r3, r2
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	440b      	add	r3, r1
 8000ce6:	3309      	adds	r3, #9
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	3b14      	subs	r3, #20
 8000cec:	2b19      	cmp	r3, #25
 8000cee:	f200 80fb 	bhi.w	8000ee8 <DATA_LOGGER_Get_Data_Value+0x22c>
 8000cf2:	a201      	add	r2, pc, #4	; (adr r2, 8000cf8 <DATA_LOGGER_Get_Data_Value+0x3c>)
 8000cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf8:	08000d61 	.word	0x08000d61
 8000cfc:	08000ee9 	.word	0x08000ee9
 8000d00:	08000ee9 	.word	0x08000ee9
 8000d04:	08000d7d 	.word	0x08000d7d
 8000d08:	08000ee9 	.word	0x08000ee9
 8000d0c:	08000ee9 	.word	0x08000ee9
 8000d10:	08000ee9 	.word	0x08000ee9
 8000d14:	08000ee9 	.word	0x08000ee9
 8000d18:	08000ee9 	.word	0x08000ee9
 8000d1c:	08000ee9 	.word	0x08000ee9
 8000d20:	08000ee9 	.word	0x08000ee9
 8000d24:	08000ee9 	.word	0x08000ee9
 8000d28:	08000ee9 	.word	0x08000ee9
 8000d2c:	08000ee9 	.word	0x08000ee9
 8000d30:	08000ee9 	.word	0x08000ee9
 8000d34:	08000ee9 	.word	0x08000ee9
 8000d38:	08000ee9 	.word	0x08000ee9
 8000d3c:	08000ee9 	.word	0x08000ee9
 8000d40:	08000ee9 	.word	0x08000ee9
 8000d44:	08000ee9 	.word	0x08000ee9
 8000d48:	08000ee9 	.word	0x08000ee9
 8000d4c:	08000dad 	.word	0x08000dad
 8000d50:	08000df5 	.word	0x08000df5
 8000d54:	08000e3d 	.word	0x08000e3d
 8000d58:	08000e85 	.word	0x08000e85
 8000d5c:	08000eb7 	.word	0x08000eb7
	{
		case data_format_e8B:
			buffer[1] = *(uint8_t*)data_list[id].data ;
 8000d60:	7bfa      	ldrb	r2, [r7, #15]
 8000d62:	496d      	ldr	r1, [pc, #436]	; (8000f18 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000d64:	4613      	mov	r3, r2
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	4413      	add	r3, r2
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	440b      	add	r3, r1
 8000d6e:	3304      	adds	r3, #4
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	3301      	adds	r3, #1
 8000d76:	7812      	ldrb	r2, [r2, #0]
 8000d78:	701a      	strb	r2, [r3, #0]
			break;
 8000d7a:	e0b6      	b.n	8000eea <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e8B_PWM:
			break;
		case data_format_e8B_FLOAT_0D:
			tmp_float = *(float*)data_list[id].data ;
 8000d7c:	7bfa      	ldrb	r2, [r7, #15]
 8000d7e:	4966      	ldr	r1, [pc, #408]	; (8000f18 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000d80:	4613      	mov	r3, r2
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	4413      	add	r3, r2
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	440b      	add	r3, r1
 8000d8a:	3304      	adds	r3, #4
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	613b      	str	r3, [r7, #16]
			buffer[1] = (int8_t)tmp_float;
 8000d92:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d9a:	edc7 7a01 	vstr	s15, [r7, #4]
 8000d9e:	793b      	ldrb	r3, [r7, #4]
 8000da0:	b25a      	sxtb	r2, r3
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	3301      	adds	r3, #1
 8000da6:	b2d2      	uxtb	r2, r2
 8000da8:	701a      	strb	r2, [r3, #0]
			break;
 8000daa:	e09e      	b.n	8000eea <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e8B_FLOAT_1D:
			break;
		case data_format_e16B:
			break;
		case data_format_e16B_FLOAT_1D:
			tmp_float = *(float*)data_list[id].data;
 8000dac:	7bfa      	ldrb	r2, [r7, #15]
 8000dae:	495a      	ldr	r1, [pc, #360]	; (8000f18 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000db0:	4613      	mov	r3, r2
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	4413      	add	r3, r2
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	440b      	add	r3, r1
 8000dba:	3304      	adds	r3, #4
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 10;
 8000dc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000dc6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000dca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dd2:	ee17 3a90 	vmov	r3, s15
 8000dd6:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8000dd8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ddc:	121b      	asrs	r3, r3, #8
 8000dde:	b21a      	sxth	r2, r3
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	3301      	adds	r3, #1
 8000de4:	b2d2      	uxtb	r2, r2
 8000de6:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	3302      	adds	r3, #2
 8000dec:	8afa      	ldrh	r2, [r7, #22]
 8000dee:	b2d2      	uxtb	r2, r2
 8000df0:	701a      	strb	r2, [r3, #0]
			break;
 8000df2:	e07a      	b.n	8000eea <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e16B_FLOAT_2D:
			tmp_float = *(float*)data_list[id].data;
 8000df4:	7bfa      	ldrb	r2, [r7, #15]
 8000df6:	4948      	ldr	r1, [pc, #288]	; (8000f18 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000df8:	4613      	mov	r3, r2
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	4413      	add	r3, r2
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	440b      	add	r3, r1
 8000e02:	3304      	adds	r3, #4
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 100;
 8000e0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e0e:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8000f1c <DATA_LOGGER_Get_Data_Value+0x260>
 8000e12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e1a:	ee17 3a90 	vmov	r3, s15
 8000e1e:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8000e20:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e24:	121b      	asrs	r3, r3, #8
 8000e26:	b21a      	sxth	r2, r3
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	b2d2      	uxtb	r2, r2
 8000e2e:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	3302      	adds	r3, #2
 8000e34:	8afa      	ldrh	r2, [r7, #22]
 8000e36:	b2d2      	uxtb	r2, r2
 8000e38:	701a      	strb	r2, [r3, #0]
			break;
 8000e3a:	e056      	b.n	8000eea <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e16B_FLOAT_3D:
			tmp_float = *(float*)data_list[id].data;
 8000e3c:	7bfa      	ldrb	r2, [r7, #15]
 8000e3e:	4936      	ldr	r1, [pc, #216]	; (8000f18 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000e40:	4613      	mov	r3, r2
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	4413      	add	r3, r2
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	440b      	add	r3, r1
 8000e4a:	3304      	adds	r3, #4
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 1000;
 8000e52:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e56:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8000f20 <DATA_LOGGER_Get_Data_Value+0x264>
 8000e5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e62:	ee17 3a90 	vmov	r3, s15
 8000e66:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8000e68:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e6c:	121b      	asrs	r3, r3, #8
 8000e6e:	b21a      	sxth	r2, r3
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	3301      	adds	r3, #1
 8000e74:	b2d2      	uxtb	r2, r2
 8000e76:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	3302      	adds	r3, #2
 8000e7c:	8afa      	ldrh	r2, [r7, #22]
 8000e7e:	b2d2      	uxtb	r2, r2
 8000e80:	701a      	strb	r2, [r3, #0]
			break;
 8000e82:	e032      	b.n	8000eea <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e16B_UINT16:
			tmp_16 = *(uint16_t*)data_list[id].data ;
 8000e84:	7bfa      	ldrb	r2, [r7, #15]
 8000e86:	4924      	ldr	r1, [pc, #144]	; (8000f18 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000e88:	4613      	mov	r3, r2
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	4413      	add	r3, r2
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	440b      	add	r3, r1
 8000e92:	3304      	adds	r3, #4
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8000e9a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e9e:	121b      	asrs	r3, r3, #8
 8000ea0:	b21a      	sxth	r2, r3
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	b2d2      	uxtb	r2, r2
 8000ea8:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	3302      	adds	r3, #2
 8000eae:	8afa      	ldrh	r2, [r7, #22]
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	701a      	strb	r2, [r3, #0]
			break;
 8000eb4:	e019      	b.n	8000eea <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e16B_INT16:
			tmp_16 = *(int16_t*)data_list[id].data ;
 8000eb6:	7bfa      	ldrb	r2, [r7, #15]
 8000eb8:	4917      	ldr	r1, [pc, #92]	; (8000f18 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000eba:	4613      	mov	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	4413      	add	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	440b      	add	r3, r1
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	881b      	ldrh	r3, [r3, #0]
 8000eca:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8000ecc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ed0:	121b      	asrs	r3, r3, #8
 8000ed2:	b21a      	sxth	r2, r3
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	b2d2      	uxtb	r2, r2
 8000eda:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	3302      	adds	r3, #2
 8000ee0:	8afa      	ldrh	r2, [r7, #22]
 8000ee2:	b2d2      	uxtb	r2, r2
 8000ee4:	701a      	strb	r2, [r3, #0]
			break;
 8000ee6:	e000      	b.n	8000eea <DATA_LOGGER_Get_Data_Value+0x22e>
		default:
			break;
 8000ee8:	bf00      	nop
	}
	/* Length of the data array */
	return (data_list[id].format / 20) + 1;
 8000eea:	7bfa      	ldrb	r2, [r7, #15]
 8000eec:	490a      	ldr	r1, [pc, #40]	; (8000f18 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000eee:	4613      	mov	r3, r2
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	4413      	add	r3, r2
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	3309      	adds	r3, #9
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4a09      	ldr	r2, [pc, #36]	; (8000f24 <DATA_LOGGER_Get_Data_Value+0x268>)
 8000efe:	fba2 2303 	umull	r2, r3, r2, r3
 8000f02:	091b      	lsrs	r3, r3, #4
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	3301      	adds	r3, #1
 8000f08:	b2db      	uxtb	r3, r3
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	371c      	adds	r7, #28
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000170 	.word	0x20000170
 8000f1c:	42c80000 	.word	0x42c80000
 8000f20:	447a0000 	.word	0x447a0000
 8000f24:	cccccccd 	.word	0xcccccccd

08000f28 <DATA_LOGGER_Get_Data_Config>:
 * @param id Id of the data
 * @param buffer Buffer array to write the configuration into
 * @return Number of bytes we wrote in the buffer
 */
uint8_t DATA_LOGGER_Get_Data_Config(data_id_e id, uint8_t * buffer)
{
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	6039      	str	r1, [r7, #0]
 8000f32:	71fb      	strb	r3, [r7, #7]
	/* We send a configuration so it must start with 0xFF */
	buffer[0] = 0xFF;
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	22ff      	movs	r2, #255	; 0xff
 8000f38:	701a      	strb	r2, [r3, #0]
	/* Then we put the length of the name */
	buffer[1] = data_list[id].len_name;
 8000f3a:	79fa      	ldrb	r2, [r7, #7]
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	1c59      	adds	r1, r3, #1
 8000f40:	4828      	ldr	r0, [pc, #160]	; (8000fe4 <DATA_LOGGER_Get_Data_Config+0xbc>)
 8000f42:	4613      	mov	r3, r2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	4413      	add	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	4403      	add	r3, r0
 8000f4c:	3310      	adds	r3, #16
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	700b      	strb	r3, [r1, #0]
	/* Then we write the data format */
	buffer[2] = data_list[id].format;
 8000f52:	79fa      	ldrb	r2, [r7, #7]
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	1c99      	adds	r1, r3, #2
 8000f58:	4822      	ldr	r0, [pc, #136]	; (8000fe4 <DATA_LOGGER_Get_Data_Config+0xbc>)
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	4413      	add	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4403      	add	r3, r0
 8000f64:	3309      	adds	r3, #9
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	700b      	strb	r3, [r1, #0]
	/* Then the id of the data */
	buffer[3] = id;
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	3303      	adds	r3, #3
 8000f6e:	79fa      	ldrb	r2, [r7, #7]
 8000f70:	701a      	strb	r2, [r3, #0]
	/* When the data is used as output, we add 128 to the id */
	if(data_list[id].use_format == use_format_eAS_INPUT)
 8000f72:	79fa      	ldrb	r2, [r7, #7]
 8000f74:	491b      	ldr	r1, [pc, #108]	; (8000fe4 <DATA_LOGGER_Get_Data_Config+0xbc>)
 8000f76:	4613      	mov	r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	4413      	add	r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	440b      	add	r3, r1
 8000f80:	3311      	adds	r3, #17
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d107      	bne.n	8000f98 <DATA_LOGGER_Get_Data_Config+0x70>
	{
		buffer[3] += 128 ;
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	3303      	adds	r3, #3
 8000f8c:	781a      	ldrb	r2, [r3, #0]
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	3303      	adds	r3, #3
 8000f92:	3a80      	subs	r2, #128	; 0x80
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	701a      	strb	r2, [r3, #0]
	}
	/* Finally we write the name */
	memcpy(&buffer[4], data_list[id].name, data_list[id].len_name);
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	1d18      	adds	r0, r3, #4
 8000f9c:	79fa      	ldrb	r2, [r7, #7]
 8000f9e:	4911      	ldr	r1, [pc, #68]	; (8000fe4 <DATA_LOGGER_Get_Data_Config+0xbc>)
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	440b      	add	r3, r1
 8000faa:	330c      	adds	r3, #12
 8000fac:	6819      	ldr	r1, [r3, #0]
 8000fae:	79fa      	ldrb	r2, [r7, #7]
 8000fb0:	4c0c      	ldr	r4, [pc, #48]	; (8000fe4 <DATA_LOGGER_Get_Data_Config+0xbc>)
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4423      	add	r3, r4
 8000fbc:	3310      	adds	r3, #16
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	f006 fe2d 	bl	8007c20 <memcpy>

	return 4 + data_list[id].len_name ;
 8000fc6:	79fa      	ldrb	r2, [r7, #7]
 8000fc8:	4906      	ldr	r1, [pc, #24]	; (8000fe4 <DATA_LOGGER_Get_Data_Config+0xbc>)
 8000fca:	4613      	mov	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	4413      	add	r3, r2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	440b      	add	r3, r1
 8000fd4:	3310      	adds	r3, #16
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	3304      	adds	r3, #4
 8000fda:	b2db      	uxtb	r3, r3
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd90      	pop	{r4, r7, pc}
 8000fe4:	20000170 	.word	0x20000170

08000fe8 <DATA_LOGGER_Get_Data>:
 * @brief Get data
 * @param id Id of the data
 * @return pointer to the data structure with the corresponding ID
 */
data_t * DATA_LOGGER_Get_Data(data_id_e id)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	return &data_list[id];
 8000ff2:	79fa      	ldrb	r2, [r7, #7]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	4413      	add	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4a03      	ldr	r2, [pc, #12]	; (800100c <DATA_LOGGER_Get_Data+0x24>)
 8000ffe:	4413      	add	r3, r2
}
 8001000:	4618      	mov	r0, r3
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	20000170 	.word	0x20000170

08001010 <push_data_to_uart>:
 * @brief Add the start byte and checksum to a message
 * @param buffer Data array to send
 * @param len Number of bytes to send
 */
void push_data_to_uart(uint8_t * buffer, uint8_t len)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b090      	sub	sp, #64	; 0x40
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	70fb      	strb	r3, [r7, #3]
	uint8_t buffer_new[50];
	uint32_t checksum = 0 ;
 800101c:	2300      	movs	r3, #0
 800101e:	63fb      	str	r3, [r7, #60]	; 0x3c
	buffer_new[0] = '$';
 8001020:	2324      	movs	r3, #36	; 0x24
 8001022:	723b      	strb	r3, [r7, #8]
	for(uint8_t b = 0; b < len; b++)
 8001024:	2300      	movs	r3, #0
 8001026:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800102a:	e01d      	b.n	8001068 <push_data_to_uart+0x58>
	{
		buffer_new[1 + b] = buffer[b];
 800102c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	441a      	add	r2, r3
 8001034:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001038:	3301      	adds	r3, #1
 800103a:	7812      	ldrb	r2, [r2, #0]
 800103c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001040:	440b      	add	r3, r1
 8001042:	f803 2c38 	strb.w	r2, [r3, #-56]
		checksum += (uint32_t)buffer_new[1 + b];
 8001046:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800104a:	3301      	adds	r3, #1
 800104c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001050:	4413      	add	r3, r2
 8001052:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8001056:	461a      	mov	r2, r3
 8001058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800105a:	4413      	add	r3, r2
 800105c:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(uint8_t b = 0; b < len; b++)
 800105e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001062:	3301      	adds	r3, #1
 8001064:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8001068:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800106c:	78fb      	ldrb	r3, [r7, #3]
 800106e:	429a      	cmp	r2, r3
 8001070:	d3dc      	bcc.n	800102c <push_data_to_uart+0x1c>
	}
	buffer_new[1 + len] = (uint8_t)(checksum % 256) ;
 8001072:	78fb      	ldrb	r3, [r7, #3]
 8001074:	3301      	adds	r3, #1
 8001076:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800107e:	440b      	add	r3, r1
 8001080:	f803 2c38 	strb.w	r2, [r3, #-56]
	UART_Transmit(UART_TELEMETRY, buffer_new, len+2);
 8001084:	78fb      	ldrb	r3, [r7, #3]
 8001086:	b29b      	uxth	r3, r3
 8001088:	3302      	adds	r3, #2
 800108a:	b29a      	uxth	r2, r3
 800108c:	f107 0308 	add.w	r3, r7, #8
 8001090:	4619      	mov	r1, r3
 8001092:	2000      	movs	r0, #0
 8001094:	f000 ff2a 	bl	8001eec <UART_Transmit>
}
 8001098:	bf00      	nop
 800109a:	3740      	adds	r7, #64	; 0x40
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <state_machine>:

/*
 * @brief data logger state machine
 */
static void state_machine(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
	/* Time management for periodic transmissions */
	static uint32_t next_time_state_machine = 0;
	static uint32_t current_period = PERIODE_PING;
	uint32_t time_ms = HAL_GetTick();
 80010a6:	f002 fa63 	bl	8003570 <HAL_GetTick>
 80010aa:	60b8      	str	r0, [r7, #8]
	if(time_ms < next_time_state_machine)
 80010ac:	4b78      	ldr	r3, [pc, #480]	; (8001290 <state_machine+0x1f0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	68ba      	ldr	r2, [r7, #8]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	f0c0 80e6 	bcc.w	8001284 <state_machine+0x1e4>
	{
		return;
	}
	next_time_state_machine = time_ms + current_period;
 80010b8:	4b76      	ldr	r3, [pc, #472]	; (8001294 <state_machine+0x1f4>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	4413      	add	r3, r2
 80010c0:	4a73      	ldr	r2, [pc, #460]	; (8001290 <state_machine+0x1f0>)
 80010c2:	6013      	str	r3, [r2, #0]

	/* State machine variables */
	static data_logger_state_e state = data_logger_state_eIDLE;
	static data_logger_state_e previous_state = data_logger_state_eTRANSMIT_CONFIG ;
	bool_e entrance = previous_state != state ;
 80010c4:	4b74      	ldr	r3, [pc, #464]	; (8001298 <state_machine+0x1f8>)
 80010c6:	781a      	ldrb	r2, [r3, #0]
 80010c8:	4b74      	ldr	r3, [pc, #464]	; (800129c <state_machine+0x1fc>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	bf14      	ite	ne
 80010d0:	2301      	movne	r3, #1
 80010d2:	2300      	moveq	r3, #0
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	71fb      	strb	r3, [r7, #7]
	previous_state = state ;
 80010d8:	4b70      	ldr	r3, [pc, #448]	; (800129c <state_machine+0x1fc>)
 80010da:	781a      	ldrb	r2, [r3, #0]
 80010dc:	4b6e      	ldr	r3, [pc, #440]	; (8001298 <state_machine+0x1f8>)
 80010de:	701a      	strb	r2, [r3, #0]
	switch(state)
 80010e0:	4b6e      	ldr	r3, [pc, #440]	; (800129c <state_machine+0x1fc>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	f000 8091 	beq.w	800120c <state_machine+0x16c>
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	f300 80cd 	bgt.w	800128a <state_machine+0x1ea>
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d002      	beq.n	80010fa <state_machine+0x5a>
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d043      	beq.n	8001180 <state_machine+0xe0>
 80010f8:	e0c7      	b.n	800128a <state_machine+0x1ea>
	{
		case data_logger_state_eIDLE :
			if(entrance)
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d003      	beq.n	8001108 <state_machine+0x68>
			{
				/* When we are in the idle mode, we just ping the device at PERIODE_PING µs interval */
				current_period = PERIODE_PING;
 8001100:	4b64      	ldr	r3, [pc, #400]	; (8001294 <state_machine+0x1f4>)
 8001102:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001106:	601a      	str	r2, [r3, #0]
			}

			tmp_len = DATA_LOGGER_Get_Data_Config(data_id_eCONFIG_REQUEST, tmp);
 8001108:	4965      	ldr	r1, [pc, #404]	; (80012a0 <state_machine+0x200>)
 800110a:	2000      	movs	r0, #0
 800110c:	f7ff ff0c 	bl	8000f28 <DATA_LOGGER_Get_Data_Config>
 8001110:	4603      	mov	r3, r0
 8001112:	461a      	mov	r2, r3
 8001114:	4b63      	ldr	r3, [pc, #396]	; (80012a4 <state_machine+0x204>)
 8001116:	701a      	strb	r2, [r3, #0]
			push_data_to_uart(tmp, tmp_len);
 8001118:	4b62      	ldr	r3, [pc, #392]	; (80012a4 <state_machine+0x204>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4619      	mov	r1, r3
 800111e:	4860      	ldr	r0, [pc, #384]	; (80012a0 <state_machine+0x200>)
 8001120:	f7ff ff76 	bl	8001010 <push_data_to_uart>

			/* If we receive a configuration request, we change the state */
			if(send_config_flag)
 8001124:	4b60      	ldr	r3, [pc, #384]	; (80012a8 <state_machine+0x208>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d01a      	beq.n	8001162 <state_machine+0xc2>
			{
				/* Reset flags */
				start_flag = FALSE;
 800112c:	4b5f      	ldr	r3, [pc, #380]	; (80012ac <state_machine+0x20c>)
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]
				stop_flag = FALSE;
 8001132:	4b5f      	ldr	r3, [pc, #380]	; (80012b0 <state_machine+0x210>)
 8001134:	2200      	movs	r2, #0
 8001136:	701a      	strb	r2, [r3, #0]
				send_config_flag = FALSE;
 8001138:	4b5b      	ldr	r3, [pc, #364]	; (80012a8 <state_machine+0x208>)
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
				/* Change the state */
				/* We send the configuration only if we did not send it before */
				if(config_not_sent)
 800113e:	4b5d      	ldr	r3, [pc, #372]	; (80012b4 <state_machine+0x214>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d009      	beq.n	800115a <state_machine+0xba>
				{
					id_init_counter = 0;
 8001146:	4b5c      	ldr	r3, [pc, #368]	; (80012b8 <state_machine+0x218>)
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
					is_any_data_used = FALSE;
 800114c:	4b5b      	ldr	r3, [pc, #364]	; (80012bc <state_machine+0x21c>)
 800114e:	2200      	movs	r2, #0
 8001150:	701a      	strb	r2, [r3, #0]
					state = data_logger_state_eTRANSMIT_CONFIG;
 8001152:	4b52      	ldr	r3, [pc, #328]	; (800129c <state_machine+0x1fc>)
 8001154:	2201      	movs	r2, #1
 8001156:	701a      	strb	r2, [r3, #0]
			{
				start_flag = FALSE;
				stop_flag = FALSE;
				state = data_logger_state_eLOG;
			}
			break;
 8001158:	e096      	b.n	8001288 <state_machine+0x1e8>
					state = data_logger_state_eLOG;
 800115a:	4b50      	ldr	r3, [pc, #320]	; (800129c <state_machine+0x1fc>)
 800115c:	2202      	movs	r2, #2
 800115e:	701a      	strb	r2, [r3, #0]
			break;
 8001160:	e092      	b.n	8001288 <state_machine+0x1e8>
			else if(start_flag)
 8001162:	4b52      	ldr	r3, [pc, #328]	; (80012ac <state_machine+0x20c>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	f000 808e 	beq.w	8001288 <state_machine+0x1e8>
				start_flag = FALSE;
 800116c:	4b4f      	ldr	r3, [pc, #316]	; (80012ac <state_machine+0x20c>)
 800116e:	2200      	movs	r2, #0
 8001170:	701a      	strb	r2, [r3, #0]
				stop_flag = FALSE;
 8001172:	4b4f      	ldr	r3, [pc, #316]	; (80012b0 <state_machine+0x210>)
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
				state = data_logger_state_eLOG;
 8001178:	4b48      	ldr	r3, [pc, #288]	; (800129c <state_machine+0x1fc>)
 800117a:	2202      	movs	r2, #2
 800117c:	701a      	strb	r2, [r3, #0]
			break;
 800117e:	e083      	b.n	8001288 <state_machine+0x1e8>

		case data_logger_state_eTRANSMIT_CONFIG :
			/* Change the data logger task period to send configuration slowly */
			if(entrance)
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d009      	beq.n	800119a <state_machine+0xfa>
			{
				current_period = PERIODE_CONFIG_SEND;
 8001186:	4b43      	ldr	r3, [pc, #268]	; (8001294 <state_machine+0x1f4>)
 8001188:	2264      	movs	r2, #100	; 0x64
 800118a:	601a      	str	r2, [r3, #0]
			}
			while(data_list[id_init_counter].use_format == use_format_eNOT_USED && id_init_counter < data_id_eCOUNT)
 800118c:	e005      	b.n	800119a <state_machine+0xfa>
			{
				id_init_counter ++ ;
 800118e:	4b4a      	ldr	r3, [pc, #296]	; (80012b8 <state_machine+0x218>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	3301      	adds	r3, #1
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4b48      	ldr	r3, [pc, #288]	; (80012b8 <state_machine+0x218>)
 8001198:	701a      	strb	r2, [r3, #0]
			while(data_list[id_init_counter].use_format == use_format_eNOT_USED && id_init_counter < data_id_eCOUNT)
 800119a:	4b47      	ldr	r3, [pc, #284]	; (80012b8 <state_machine+0x218>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	4619      	mov	r1, r3
 80011a0:	4a47      	ldr	r2, [pc, #284]	; (80012c0 <state_machine+0x220>)
 80011a2:	460b      	mov	r3, r1
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	440b      	add	r3, r1
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	3311      	adds	r3, #17
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d103      	bne.n	80011bc <state_machine+0x11c>
 80011b4:	4b40      	ldr	r3, [pc, #256]	; (80012b8 <state_machine+0x218>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b03      	cmp	r3, #3
 80011ba:	d9e8      	bls.n	800118e <state_machine+0xee>
			}
			if(id_init_counter < data_id_eCOUNT)
 80011bc:	4b3e      	ldr	r3, [pc, #248]	; (80012b8 <state_machine+0x218>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b03      	cmp	r3, #3
 80011c2:	d817      	bhi.n	80011f4 <state_machine+0x154>
			{
				is_any_data_used = TRUE;
 80011c4:	4b3d      	ldr	r3, [pc, #244]	; (80012bc <state_machine+0x21c>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	701a      	strb	r2, [r3, #0]
				/* Get data configuration */
				tmp_len = DATA_LOGGER_Get_Data_Config(id_init_counter++, tmp);
 80011ca:	4b3b      	ldr	r3, [pc, #236]	; (80012b8 <state_machine+0x218>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	1c5a      	adds	r2, r3, #1
 80011d0:	b2d1      	uxtb	r1, r2
 80011d2:	4a39      	ldr	r2, [pc, #228]	; (80012b8 <state_machine+0x218>)
 80011d4:	7011      	strb	r1, [r2, #0]
 80011d6:	4932      	ldr	r1, [pc, #200]	; (80012a0 <state_machine+0x200>)
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fea5 	bl	8000f28 <DATA_LOGGER_Get_Data_Config>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b30      	ldr	r3, [pc, #192]	; (80012a4 <state_machine+0x204>)
 80011e4:	701a      	strb	r2, [r3, #0]
				/* Send the configuration */
				push_data_to_uart(tmp, tmp_len);
 80011e6:	4b2f      	ldr	r3, [pc, #188]	; (80012a4 <state_machine+0x204>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	4619      	mov	r1, r3
 80011ec:	482c      	ldr	r0, [pc, #176]	; (80012a0 <state_machine+0x200>)
 80011ee:	f7ff ff0f 	bl	8001010 <push_data_to_uart>
				else
				{
					state = data_logger_state_eIDLE ;
				}
			}
			break;
 80011f2:	e04a      	b.n	800128a <state_machine+0x1ea>
				if(is_any_data_used)
 80011f4:	4b31      	ldr	r3, [pc, #196]	; (80012bc <state_machine+0x21c>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <state_machine+0x164>
					state = data_logger_state_eLOG ;
 80011fc:	4b27      	ldr	r3, [pc, #156]	; (800129c <state_machine+0x1fc>)
 80011fe:	2202      	movs	r2, #2
 8001200:	701a      	strb	r2, [r3, #0]
			break;
 8001202:	e042      	b.n	800128a <state_machine+0x1ea>
					state = data_logger_state_eIDLE ;
 8001204:	4b25      	ldr	r3, [pc, #148]	; (800129c <state_machine+0x1fc>)
 8001206:	2200      	movs	r2, #0
 8001208:	701a      	strb	r2, [r3, #0]
			break;
 800120a:	e03e      	b.n	800128a <state_machine+0x1ea>

		case data_logger_state_eLOG:
			if(entrance)
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d002      	beq.n	8001218 <state_machine+0x178>
			{
				current_period = PERIODE_SEND;
 8001212:	4b20      	ldr	r3, [pc, #128]	; (8001294 <state_machine+0x1f4>)
 8001214:	220a      	movs	r2, #10
 8001216:	601a      	str	r2, [r3, #0]
			}
			if(stop_flag)
 8001218:	4b25      	ldr	r3, [pc, #148]	; (80012b0 <state_machine+0x210>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d002      	beq.n	8001226 <state_machine+0x186>
			{
				state = data_logger_state_eIDLE;
 8001220:	4b1e      	ldr	r3, [pc, #120]	; (800129c <state_machine+0x1fc>)
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]
			}
			for(uint8_t d = 0; d < data_id_eCOUNT; d++)
 8001226:	2300      	movs	r3, #0
 8001228:	73fb      	strb	r3, [r7, #15]
 800122a:	e027      	b.n	800127c <state_machine+0x1dc>
			{
				if(data_list[d].use_format == use_format_eAS_OUTPUT && (data_list[d].data != NULL))
 800122c:	7bfa      	ldrb	r2, [r7, #15]
 800122e:	4924      	ldr	r1, [pc, #144]	; (80012c0 <state_machine+0x220>)
 8001230:	4613      	mov	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	440b      	add	r3, r1
 800123a:	3311      	adds	r3, #17
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d119      	bne.n	8001276 <state_machine+0x1d6>
 8001242:	7bfa      	ldrb	r2, [r7, #15]
 8001244:	491e      	ldr	r1, [pc, #120]	; (80012c0 <state_machine+0x220>)
 8001246:	4613      	mov	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4413      	add	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	440b      	add	r3, r1
 8001250:	3304      	adds	r3, #4
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d00e      	beq.n	8001276 <state_machine+0x1d6>
				{
					tmp_len = DATA_LOGGER_Get_Data_Value(d, tmp);
 8001258:	7bfb      	ldrb	r3, [r7, #15]
 800125a:	4911      	ldr	r1, [pc, #68]	; (80012a0 <state_machine+0x200>)
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff fd2d 	bl	8000cbc <DATA_LOGGER_Get_Data_Value>
 8001262:	4603      	mov	r3, r0
 8001264:	461a      	mov	r2, r3
 8001266:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <state_machine+0x204>)
 8001268:	701a      	strb	r2, [r3, #0]
					push_data_to_uart(tmp, tmp_len);
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <state_machine+0x204>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	4619      	mov	r1, r3
 8001270:	480b      	ldr	r0, [pc, #44]	; (80012a0 <state_machine+0x200>)
 8001272:	f7ff fecd 	bl	8001010 <push_data_to_uart>
			for(uint8_t d = 0; d < data_id_eCOUNT; d++)
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	3301      	adds	r3, #1
 800127a:	73fb      	strb	r3, [r7, #15]
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	2b03      	cmp	r3, #3
 8001280:	d9d4      	bls.n	800122c <state_machine+0x18c>
				}
			}
			break;
 8001282:	e002      	b.n	800128a <state_machine+0x1ea>
		return;
 8001284:	bf00      	nop
 8001286:	e000      	b.n	800128a <state_machine+0x1ea>
			break;
 8001288:	bf00      	nop
	}
}
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	200001fc 	.word	0x200001fc
 8001294:	20000094 	.word	0x20000094
 8001298:	20000098 	.word	0x20000098
 800129c:	20000200 	.word	0x20000200
 80012a0:	200001c4 	.word	0x200001c4
 80012a4:	200001f6 	.word	0x200001f6
 80012a8:	200001c1 	.word	0x200001c1
 80012ac:	200001c0 	.word	0x200001c0
 80012b0:	200001c2 	.word	0x200001c2
 80012b4:	20000090 	.word	0x20000090
 80012b8:	200001f7 	.word	0x200001f7
 80012bc:	200001f8 	.word	0x200001f8
 80012c0:	20000170 	.word	0x20000170

080012c4 <parse_uart>:

/*
 * @brief Parse incoming bytes
 */
static void parse_uart(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
	static uint8_t trame[20] = { 0 };
	static uint8_t nb_byte_to_buffer = 0;
	static uint8_t buffer_counter = 0;
	static uint16_t checksum = 0;
	/* Check for available data */
	if(UART_Availables(UART_TELEMETRY))
 80012ca:	2000      	movs	r0, #0
 80012cc:	f000 fd6a 	bl	8001da4 <UART_Availables>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d06c      	beq.n	80013b0 <parse_uart+0xec>
	{
		uint8_t c;
		UART_Get(UART_TELEMETRY, &c);
 80012d6:	1dfb      	adds	r3, r7, #7
 80012d8:	4619      	mov	r1, r3
 80012da:	2000      	movs	r0, #0
 80012dc:	f000 fd70 	bl	8001dc0 <UART_Get>
		switch(state)
 80012e0:	4b35      	ldr	r3, [pc, #212]	; (80013b8 <parse_uart+0xf4>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b03      	cmp	r3, #3
 80012e6:	d863      	bhi.n	80013b0 <parse_uart+0xec>
 80012e8:	a201      	add	r2, pc, #4	; (adr r2, 80012f0 <parse_uart+0x2c>)
 80012ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ee:	bf00      	nop
 80012f0:	08001301 	.word	0x08001301
 80012f4:	0800130f 	.word	0x0800130f
 80012f8:	08001355 	.word	0x08001355
 80012fc:	0800138d 	.word	0x0800138d
		{
			case parser_state_eSTART_BYTE:
				if(c == '$')
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	2b24      	cmp	r3, #36	; 0x24
 8001304:	d14f      	bne.n	80013a6 <parse_uart+0xe2>
				{
					state = parser_state_eID;
 8001306:	4b2c      	ldr	r3, [pc, #176]	; (80013b8 <parse_uart+0xf4>)
 8001308:	2201      	movs	r2, #1
 800130a:	701a      	strb	r2, [r3, #0]
				}
				break;
 800130c:	e04b      	b.n	80013a6 <parse_uart+0xe2>

			case parser_state_eID:
				if(c < data_id_eCOUNT)
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	2b03      	cmp	r3, #3
 8001312:	d84a      	bhi.n	80013aa <parse_uart+0xe6>
				{
					/* Store the id for later use */
					trame[0] = c;
 8001314:	79fa      	ldrb	r2, [r7, #7]
 8001316:	4b29      	ldr	r3, [pc, #164]	; (80013bc <parse_uart+0xf8>)
 8001318:	701a      	strb	r2, [r3, #0]
					/* Reset the checksum */
					checksum = c;
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	b29a      	uxth	r2, r3
 800131e:	4b28      	ldr	r3, [pc, #160]	; (80013c0 <parse_uart+0xfc>)
 8001320:	801a      	strh	r2, [r3, #0]
					/* Get the data length according to the data format */
					nb_byte_to_buffer = (DATA_LOGGER_Get_Data(c)->format / 20);
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff fe5f 	bl	8000fe8 <DATA_LOGGER_Get_Data>
 800132a:	4603      	mov	r3, r0
 800132c:	7a5b      	ldrb	r3, [r3, #9]
 800132e:	4a25      	ldr	r2, [pc, #148]	; (80013c4 <parse_uart+0x100>)
 8001330:	fba2 2303 	umull	r2, r3, r2, r3
 8001334:	091b      	lsrs	r3, r3, #4
 8001336:	b2da      	uxtb	r2, r3
 8001338:	4b23      	ldr	r3, [pc, #140]	; (80013c8 <parse_uart+0x104>)
 800133a:	701a      	strb	r2, [r3, #0]
					if(nb_byte_to_buffer)
 800133c:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <parse_uart+0x104>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <parse_uart+0x88>
					{
						state = parser_state_eDATA;
 8001344:	4b1c      	ldr	r3, [pc, #112]	; (80013b8 <parse_uart+0xf4>)
 8001346:	2202      	movs	r2, #2
 8001348:	701a      	strb	r2, [r3, #0]
					else
					{
						state = parser_state_eCHECKSUM;
					}
				}
				break;
 800134a:	e02e      	b.n	80013aa <parse_uart+0xe6>
						state = parser_state_eCHECKSUM;
 800134c:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <parse_uart+0xf4>)
 800134e:	2203      	movs	r2, #3
 8001350:	701a      	strb	r2, [r3, #0]
				break;
 8001352:	e02a      	b.n	80013aa <parse_uart+0xe6>
			case parser_state_eDATA:
				trame[1+buffer_counter++] = c;
 8001354:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <parse_uart+0x108>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	1c5a      	adds	r2, r3, #1
 800135a:	b2d1      	uxtb	r1, r2
 800135c:	4a1b      	ldr	r2, [pc, #108]	; (80013cc <parse_uart+0x108>)
 800135e:	7011      	strb	r1, [r2, #0]
 8001360:	3301      	adds	r3, #1
 8001362:	79f9      	ldrb	r1, [r7, #7]
 8001364:	4a15      	ldr	r2, [pc, #84]	; (80013bc <parse_uart+0xf8>)
 8001366:	54d1      	strb	r1, [r2, r3]
				checksum += c;
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	b29a      	uxth	r2, r3
 800136c:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <parse_uart+0xfc>)
 800136e:	881b      	ldrh	r3, [r3, #0]
 8001370:	4413      	add	r3, r2
 8001372:	b29a      	uxth	r2, r3
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <parse_uart+0xfc>)
 8001376:	801a      	strh	r2, [r3, #0]
				if(buffer_counter == nb_byte_to_buffer)
 8001378:	4b14      	ldr	r3, [pc, #80]	; (80013cc <parse_uart+0x108>)
 800137a:	781a      	ldrb	r2, [r3, #0]
 800137c:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <parse_uart+0x104>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	429a      	cmp	r2, r3
 8001382:	d114      	bne.n	80013ae <parse_uart+0xea>
				{
					state = parser_state_eCHECKSUM;
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <parse_uart+0xf4>)
 8001386:	2203      	movs	r2, #3
 8001388:	701a      	strb	r2, [r3, #0]
				}
				break;
 800138a:	e010      	b.n	80013ae <parse_uart+0xea>
			case parser_state_eCHECKSUM:
				if(checksum == c)
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	b29a      	uxth	r2, r3
 8001390:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <parse_uart+0xfc>)
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	429a      	cmp	r2, r3
 8001396:	d102      	bne.n	800139e <parse_uart+0xda>
				{
					DATA_LOGGER_Reception(trame);
 8001398:	4808      	ldr	r0, [pc, #32]	; (80013bc <parse_uart+0xf8>)
 800139a:	f7ff fbd5 	bl	8000b48 <DATA_LOGGER_Reception>
				}
				state = parser_state_eSTART_BYTE;
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <parse_uart+0xf4>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
				break;
 80013a4:	e004      	b.n	80013b0 <parse_uart+0xec>
				break;
 80013a6:	bf00      	nop
 80013a8:	e002      	b.n	80013b0 <parse_uart+0xec>
				break;
 80013aa:	bf00      	nop
 80013ac:	e000      	b.n	80013b0 <parse_uart+0xec>
				break;
 80013ae:	bf00      	nop


		}
	}

}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000201 	.word	0x20000201
 80013bc:	20000204 	.word	0x20000204
 80013c0:	20000218 	.word	0x20000218
 80013c4:	cccccccd 	.word	0xcccccccd
 80013c8:	2000021a 	.word	0x2000021a
 80013cc:	2000021b 	.word	0x2000021b

080013d0 <HIGH_LEVEL_Init>:
#define RADIO_TO_ANGLE_RATE_YAW	((float)1.0f)

static high_level_t high_level = { 0 };

void HIGH_LEVEL_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
	high_level.radio = RADIO_Get_Channel();
 80013d4:	f000 ffae 	bl	8002334 <RADIO_Get_Channel>
 80013d8:	4603      	mov	r3, r0
 80013da:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <HIGH_LEVEL_Init+0x34>)
 80013dc:	6053      	str	r3, [r2, #4]
	high_level.target_angle = CONTROLLER_Get_Angle_Target();
 80013de:	f7ff fb1b 	bl	8000a18 <CONTROLLER_Get_Angle_Target>
 80013e2:	4603      	mov	r3, r0
 80013e4:	4a07      	ldr	r2, [pc, #28]	; (8001404 <HIGH_LEVEL_Init+0x34>)
 80013e6:	6093      	str	r3, [r2, #8]
	high_level.target_angle_speed = CONTROLLER_Get_Angle_Speed_Target();
 80013e8:	f7ff fb20 	bl	8000a2c <CONTROLLER_Get_Angle_Speed_Target>
 80013ec:	4603      	mov	r3, r0
 80013ee:	4a05      	ldr	r2, [pc, #20]	; (8001404 <HIGH_LEVEL_Init+0x34>)
 80013f0:	60d3      	str	r3, [r2, #12]
	high_level.state = high_level_eGROUND;
 80013f2:	4b04      	ldr	r3, [pc, #16]	; (8001404 <HIGH_LEVEL_Init+0x34>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	701a      	strb	r2, [r3, #0]
	high_level.previous_state = high_level_eACCRO;
 80013f8:	4b02      	ldr	r3, [pc, #8]	; (8001404 <HIGH_LEVEL_Init+0x34>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	705a      	strb	r2, [r3, #1]
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	2000021c 	.word	0x2000021c

08001408 <HIGH_LEVEL_Process_Main>:

void HIGH_LEVEL_Process_Main(void)
{
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
	/* entrance is used to know if we changed of state */
	bool_e entrance = high_level.state == high_level.previous_state;
 800140e:	4b88      	ldr	r3, [pc, #544]	; (8001630 <HIGH_LEVEL_Process_Main+0x228>)
 8001410:	781a      	ldrb	r2, [r3, #0]
 8001412:	4b87      	ldr	r3, [pc, #540]	; (8001630 <HIGH_LEVEL_Process_Main+0x228>)
 8001414:	785b      	ldrb	r3, [r3, #1]
 8001416:	429a      	cmp	r2, r3
 8001418:	bf0c      	ite	eq
 800141a:	2301      	moveq	r3, #1
 800141c:	2300      	movne	r3, #0
 800141e:	b2db      	uxtb	r3, r3
 8001420:	71fb      	strb	r3, [r7, #7]
	high_level.previous_state = high_level.state;
 8001422:	4b83      	ldr	r3, [pc, #524]	; (8001630 <HIGH_LEVEL_Process_Main+0x228>)
 8001424:	781a      	ldrb	r2, [r3, #0]
 8001426:	4b82      	ldr	r3, [pc, #520]	; (8001630 <HIGH_LEVEL_Process_Main+0x228>)
 8001428:	705a      	strb	r2, [r3, #1]
	/* state machine */
	switch(high_level.state)
 800142a:	4b81      	ldr	r3, [pc, #516]	; (8001630 <HIGH_LEVEL_Process_Main+0x228>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b02      	cmp	r3, #2
 8001430:	d039      	beq.n	80014a6 <HIGH_LEVEL_Process_Main+0x9e>
 8001432:	2b02      	cmp	r3, #2
 8001434:	f300 80f8 	bgt.w	8001628 <HIGH_LEVEL_Process_Main+0x220>
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <HIGH_LEVEL_Process_Main+0x3c>
 800143c:	2b01      	cmp	r3, #1
 800143e:	f000 8094 	beq.w	800156a <HIGH_LEVEL_Process_Main+0x162>
			{
				high_level.state = high_level_eANGLE;
			}
			break;
	}
}
 8001442:	e0f1      	b.n	8001628 <HIGH_LEVEL_Process_Main+0x220>
			if(entrance)
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d002      	beq.n	8001450 <HIGH_LEVEL_Process_Main+0x48>
				CONTROLLER_Set_State(controller_state_eDISABLED);
 800144a:	2000      	movs	r0, #0
 800144c:	f7ff fad2 	bl	80009f4 <CONTROLLER_Set_State>
			if(high_level.radio[4] > 1500 && high_level.radio[2] < 1050)
 8001450:	4b77      	ldr	r3, [pc, #476]	; (8001630 <HIGH_LEVEL_Process_Main+0x228>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	3308      	adds	r3, #8
 8001456:	881b      	ldrh	r3, [r3, #0]
 8001458:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800145c:	4293      	cmp	r3, r2
 800145e:	f240 80de 	bls.w	800161e <HIGH_LEVEL_Process_Main+0x216>
 8001462:	4b73      	ldr	r3, [pc, #460]	; (8001630 <HIGH_LEVEL_Process_Main+0x228>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	3304      	adds	r3, #4
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	f240 4219 	movw	r2, #1049	; 0x419
 800146e:	4293      	cmp	r3, r2
 8001470:	f200 80d5 	bhi.w	800161e <HIGH_LEVEL_Process_Main+0x216>
				if(high_level.radio[5] < 1300)
 8001474:	4b6e      	ldr	r3, [pc, #440]	; (8001630 <HIGH_LEVEL_Process_Main+0x228>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	330a      	adds	r3, #10
 800147a:	881b      	ldrh	r3, [r3, #0]
 800147c:	f240 5213 	movw	r2, #1299	; 0x513
 8001480:	4293      	cmp	r3, r2
 8001482:	d803      	bhi.n	800148c <HIGH_LEVEL_Process_Main+0x84>
					high_level.state = high_level_eANGLE;
 8001484:	4b6a      	ldr	r3, [pc, #424]	; (8001630 <HIGH_LEVEL_Process_Main+0x228>)
 8001486:	2202      	movs	r2, #2
 8001488:	701a      	strb	r2, [r3, #0]
			break;
 800148a:	e0c8      	b.n	800161e <HIGH_LEVEL_Process_Main+0x216>
				else if(high_level.radio[5] > 1300)
 800148c:	4b68      	ldr	r3, [pc, #416]	; (8001630 <HIGH_LEVEL_Process_Main+0x228>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	330a      	adds	r3, #10
 8001492:	881b      	ldrh	r3, [r3, #0]
 8001494:	f240 5214 	movw	r2, #1300	; 0x514
 8001498:	4293      	cmp	r3, r2
 800149a:	f240 80c0 	bls.w	800161e <HIGH_LEVEL_Process_Main+0x216>
					high_level.state = high_level_eACCRO;
 800149e:	4b64      	ldr	r3, [pc, #400]	; (8001630 <HIGH_LEVEL_Process_Main+0x228>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	701a      	strb	r2, [r3, #0]
			break;
 80014a4:	e0bb      	b.n	800161e <HIGH_LEVEL_Process_Main+0x216>
			if(entrance)
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d002      	beq.n	80014b2 <HIGH_LEVEL_Process_Main+0xaa>
				CONTROLLER_Set_State(controller_state_eANGLE);
 80014ac:	2002      	movs	r0, #2
 80014ae:	f7ff faa1 	bl	80009f4 <CONTROLLER_Set_State>
			high_level.target_angle[axe_eROLL] = (float)(high_level.radio[0]-1500) * RADIO_TO_ANGLE;
 80014b2:	4b5f      	ldr	r3, [pc, #380]	; (8001630 <HIGH_LEVEL_Process_Main+0x228>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	881b      	ldrh	r3, [r3, #0]
 80014b8:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80014bc:	ee07 3a90 	vmov	s15, r3
 80014c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c4:	4b5a      	ldr	r3, [pc, #360]	; (8001630 <HIGH_LEVEL_Process_Main+0x228>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001634 <HIGH_LEVEL_Process_Main+0x22c>
 80014cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014d0:	edc3 7a00 	vstr	s15, [r3]
			high_level.target_angle[axe_ePITCH] = (float)(high_level.radio[1]-1500) * RADIO_TO_ANGLE;
 80014d4:	4b56      	ldr	r3, [pc, #344]	; (8001630 <HIGH_LEVEL_Process_Main+0x228>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	3302      	adds	r3, #2
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80014e0:	ee07 3a90 	vmov	s15, r3
 80014e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014e8:	4b51      	ldr	r3, [pc, #324]	; (8001630 <HIGH_LEVEL_Process_Main+0x228>)
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	3304      	adds	r3, #4
 80014ee:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8001634 <HIGH_LEVEL_Process_Main+0x22c>
 80014f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014f6:	edc3 7a00 	vstr	s15, [r3]
			high_level.target_angle_speed[axe_eYAW] = -(float)(high_level.radio[3]-1500) * RADIO_TO_ANGLE_RATE_YAW;
 80014fa:	4b4d      	ldr	r3, [pc, #308]	; (8001630 <HIGH_LEVEL_Process_Main+0x228>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	3306      	adds	r3, #6
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8001506:	ee07 3a90 	vmov	s15, r3
 800150a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800150e:	4b48      	ldr	r3, [pc, #288]	; (8001630 <HIGH_LEVEL_Process_Main+0x228>)
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	3308      	adds	r3, #8
 8001514:	eef1 7a67 	vneg.f32	s15, s15
 8001518:	edc3 7a00 	vstr	s15, [r3]
			*MOTOR_MIXER_Get_Power_Input_Ptr() = high_level.radio[2]-1000;
 800151c:	4b44      	ldr	r3, [pc, #272]	; (8001630 <HIGH_LEVEL_Process_Main+0x228>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	3304      	adds	r3, #4
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	f5a3 747a 	sub.w	r4, r3, #1000	; 0x3e8
 8001528:	f000 f8f0 	bl	800170c <MOTOR_MIXER_Get_Power_Input_Ptr>
 800152c:	4603      	mov	r3, r0
 800152e:	ee07 4a90 	vmov	s15, r4
 8001532:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001536:	edc3 7a00 	vstr	s15, [r3]
			if(high_level.radio[4] < 1500)
 800153a:	4b3d      	ldr	r3, [pc, #244]	; (8001630 <HIGH_LEVEL_Process_Main+0x228>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	3308      	adds	r3, #8
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	f240 52db 	movw	r2, #1499	; 0x5db
 8001546:	4293      	cmp	r3, r2
 8001548:	d803      	bhi.n	8001552 <HIGH_LEVEL_Process_Main+0x14a>
				high_level.state = high_level_eGROUND;
 800154a:	4b39      	ldr	r3, [pc, #228]	; (8001630 <HIGH_LEVEL_Process_Main+0x228>)
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]
			break;
 8001550:	e067      	b.n	8001622 <HIGH_LEVEL_Process_Main+0x21a>
			else if(high_level.radio[5] > 1300)
 8001552:	4b37      	ldr	r3, [pc, #220]	; (8001630 <HIGH_LEVEL_Process_Main+0x228>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	330a      	adds	r3, #10
 8001558:	881b      	ldrh	r3, [r3, #0]
 800155a:	f240 5214 	movw	r2, #1300	; 0x514
 800155e:	4293      	cmp	r3, r2
 8001560:	d95f      	bls.n	8001622 <HIGH_LEVEL_Process_Main+0x21a>
				high_level.state = high_level_eACCRO;
 8001562:	4b33      	ldr	r3, [pc, #204]	; (8001630 <HIGH_LEVEL_Process_Main+0x228>)
 8001564:	2201      	movs	r2, #1
 8001566:	701a      	strb	r2, [r3, #0]
			break;
 8001568:	e05b      	b.n	8001622 <HIGH_LEVEL_Process_Main+0x21a>
			if(entrance)
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d002      	beq.n	8001576 <HIGH_LEVEL_Process_Main+0x16e>
				CONTROLLER_Set_State(controller_state_eSPEED);
 8001570:	2001      	movs	r0, #1
 8001572:	f7ff fa3f 	bl	80009f4 <CONTROLLER_Set_State>
			high_level.target_angle_speed[axe_eROLL] = (float)(high_level.radio[0]-1500) * RADIO_TO_ANGLE_RATE;
 8001576:	4b2e      	ldr	r3, [pc, #184]	; (8001630 <HIGH_LEVEL_Process_Main+0x228>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	881b      	ldrh	r3, [r3, #0]
 800157c:	f2a3 52dc 	subw	r2, r3, #1500	; 0x5dc
 8001580:	4b2b      	ldr	r3, [pc, #172]	; (8001630 <HIGH_LEVEL_Process_Main+0x228>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	ee07 2a90 	vmov	s15, r2
 8001588:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800158c:	edc3 7a00 	vstr	s15, [r3]
			high_level.target_angle_speed[axe_ePITCH] = (float)(high_level.radio[1]-1500) * RADIO_TO_ANGLE_RATE;
 8001590:	4b27      	ldr	r3, [pc, #156]	; (8001630 <HIGH_LEVEL_Process_Main+0x228>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	3302      	adds	r3, #2
 8001596:	881b      	ldrh	r3, [r3, #0]
 8001598:	f2a3 52dc 	subw	r2, r3, #1500	; 0x5dc
 800159c:	4b24      	ldr	r3, [pc, #144]	; (8001630 <HIGH_LEVEL_Process_Main+0x228>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	3304      	adds	r3, #4
 80015a2:	ee07 2a90 	vmov	s15, r2
 80015a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015aa:	edc3 7a00 	vstr	s15, [r3]
			high_level.target_angle_speed[axe_eYAW] = -(float)(high_level.radio[3]-1500) * RADIO_TO_ANGLE_RATE_YAW;
 80015ae:	4b20      	ldr	r3, [pc, #128]	; (8001630 <HIGH_LEVEL_Process_Main+0x228>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	3306      	adds	r3, #6
 80015b4:	881b      	ldrh	r3, [r3, #0]
 80015b6:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80015ba:	ee07 3a90 	vmov	s15, r3
 80015be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015c2:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <HIGH_LEVEL_Process_Main+0x228>)
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	3308      	adds	r3, #8
 80015c8:	eef1 7a67 	vneg.f32	s15, s15
 80015cc:	edc3 7a00 	vstr	s15, [r3]
			*MOTOR_MIXER_Get_Power_Input_Ptr() = high_level.radio[2]-1000;
 80015d0:	4b17      	ldr	r3, [pc, #92]	; (8001630 <HIGH_LEVEL_Process_Main+0x228>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	3304      	adds	r3, #4
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	f5a3 747a 	sub.w	r4, r3, #1000	; 0x3e8
 80015dc:	f000 f896 	bl	800170c <MOTOR_MIXER_Get_Power_Input_Ptr>
 80015e0:	4603      	mov	r3, r0
 80015e2:	ee07 4a90 	vmov	s15, r4
 80015e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ea:	edc3 7a00 	vstr	s15, [r3]
			if(high_level.radio[4] < 1500)
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <HIGH_LEVEL_Process_Main+0x228>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	3308      	adds	r3, #8
 80015f4:	881b      	ldrh	r3, [r3, #0]
 80015f6:	f240 52db 	movw	r2, #1499	; 0x5db
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d803      	bhi.n	8001606 <HIGH_LEVEL_Process_Main+0x1fe>
				high_level.state = high_level_eGROUND;
 80015fe:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <HIGH_LEVEL_Process_Main+0x228>)
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
			break;
 8001604:	e00f      	b.n	8001626 <HIGH_LEVEL_Process_Main+0x21e>
			else if(high_level.radio[5] < 1300)
 8001606:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <HIGH_LEVEL_Process_Main+0x228>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	330a      	adds	r3, #10
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	f240 5213 	movw	r2, #1299	; 0x513
 8001612:	4293      	cmp	r3, r2
 8001614:	d807      	bhi.n	8001626 <HIGH_LEVEL_Process_Main+0x21e>
				high_level.state = high_level_eANGLE;
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HIGH_LEVEL_Process_Main+0x228>)
 8001618:	2202      	movs	r2, #2
 800161a:	701a      	strb	r2, [r3, #0]
			break;
 800161c:	e003      	b.n	8001626 <HIGH_LEVEL_Process_Main+0x21e>
			break;
 800161e:	bf00      	nop
 8001620:	e002      	b.n	8001628 <HIGH_LEVEL_Process_Main+0x220>
			break;
 8001622:	bf00      	nop
 8001624:	e000      	b.n	8001628 <HIGH_LEVEL_Process_Main+0x220>
			break;
 8001626:	bf00      	nop
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	bd90      	pop	{r4, r7, pc}
 8001630:	2000021c 	.word	0x2000021c
 8001634:	3d4ccccd 	.word	0x3d4ccccd

08001638 <MOTOR_MIXER_Process>:
#include "Motor_Mixer.h"

static motor_mixer_t motor_mixer = { 0 };

void MOTOR_MIXER_Process(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
	motor_mixer.output[motor_eFRONT_LEFT] = 	motor_mixer.input_power + motor_mixer.input_angle[axe_eROLL] - motor_mixer.input_angle[axe_ePITCH] - motor_mixer.input_angle[axe_eYAW];
 800163c:	4b2c      	ldr	r3, [pc, #176]	; (80016f0 <MOTOR_MIXER_Process+0xb8>)
 800163e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001642:	4b2b      	ldr	r3, [pc, #172]	; (80016f0 <MOTOR_MIXER_Process+0xb8>)
 8001644:	edd3 7a00 	vldr	s15, [r3]
 8001648:	ee37 7a27 	vadd.f32	s14, s14, s15
 800164c:	4b28      	ldr	r3, [pc, #160]	; (80016f0 <MOTOR_MIXER_Process+0xb8>)
 800164e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001652:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001656:	4b26      	ldr	r3, [pc, #152]	; (80016f0 <MOTOR_MIXER_Process+0xb8>)
 8001658:	edd3 7a02 	vldr	s15, [r3, #8]
 800165c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001660:	4b23      	ldr	r3, [pc, #140]	; (80016f0 <MOTOR_MIXER_Process+0xb8>)
 8001662:	edc3 7a04 	vstr	s15, [r3, #16]
	motor_mixer.output[motor_eFRONT_RIGHT] = 	motor_mixer.input_power - motor_mixer.input_angle[axe_eROLL] - motor_mixer.input_angle[axe_ePITCH] + motor_mixer.input_angle[axe_eYAW];
 8001666:	4b22      	ldr	r3, [pc, #136]	; (80016f0 <MOTOR_MIXER_Process+0xb8>)
 8001668:	ed93 7a03 	vldr	s14, [r3, #12]
 800166c:	4b20      	ldr	r3, [pc, #128]	; (80016f0 <MOTOR_MIXER_Process+0xb8>)
 800166e:	edd3 7a00 	vldr	s15, [r3]
 8001672:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001676:	4b1e      	ldr	r3, [pc, #120]	; (80016f0 <MOTOR_MIXER_Process+0xb8>)
 8001678:	edd3 7a01 	vldr	s15, [r3, #4]
 800167c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001680:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <MOTOR_MIXER_Process+0xb8>)
 8001682:	edd3 7a02 	vldr	s15, [r3, #8]
 8001686:	ee77 7a27 	vadd.f32	s15, s14, s15
 800168a:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <MOTOR_MIXER_Process+0xb8>)
 800168c:	edc3 7a05 	vstr	s15, [r3, #20]
	motor_mixer.output[motor_eBACK_RIGHT] = 	motor_mixer.input_power - motor_mixer.input_angle[axe_eROLL] + motor_mixer.input_angle[axe_ePITCH] - motor_mixer.input_angle[axe_eYAW];
 8001690:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <MOTOR_MIXER_Process+0xb8>)
 8001692:	ed93 7a03 	vldr	s14, [r3, #12]
 8001696:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <MOTOR_MIXER_Process+0xb8>)
 8001698:	edd3 7a00 	vldr	s15, [r3]
 800169c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016a0:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <MOTOR_MIXER_Process+0xb8>)
 80016a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80016a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <MOTOR_MIXER_Process+0xb8>)
 80016ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80016b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016b4:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <MOTOR_MIXER_Process+0xb8>)
 80016b6:	edc3 7a06 	vstr	s15, [r3, #24]
	motor_mixer.output[motor_eBACK_LEFT] = 		motor_mixer.input_power + motor_mixer.input_angle[axe_eROLL] + motor_mixer.input_angle[axe_ePITCH] + motor_mixer.input_angle[axe_eYAW];
 80016ba:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <MOTOR_MIXER_Process+0xb8>)
 80016bc:	ed93 7a03 	vldr	s14, [r3, #12]
 80016c0:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <MOTOR_MIXER_Process+0xb8>)
 80016c2:	edd3 7a00 	vldr	s15, [r3]
 80016c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <MOTOR_MIXER_Process+0xb8>)
 80016cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80016d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <MOTOR_MIXER_Process+0xb8>)
 80016d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80016da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016de:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <MOTOR_MIXER_Process+0xb8>)
 80016e0:	edc3 7a07 	vstr	s15, [r3, #28]

	MOTOR_Set(motor_mixer.output);
 80016e4:	4803      	ldr	r0, [pc, #12]	; (80016f4 <MOTOR_MIXER_Process+0xbc>)
 80016e6:	f000 f863 	bl	80017b0 <MOTOR_Set>
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	2000022c 	.word	0x2000022c
 80016f4:	2000023c 	.word	0x2000023c

080016f8 <MOTOR_MIXER_Get_Angle_Input_Ptr>:
float * MOTOR_MIXER_Get_Angle_Input_Ptr(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
	return motor_mixer.input_angle;
 80016fc:	4b02      	ldr	r3, [pc, #8]	; (8001708 <MOTOR_MIXER_Get_Angle_Input_Ptr+0x10>)
}
 80016fe:	4618      	mov	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	2000022c 	.word	0x2000022c

0800170c <MOTOR_MIXER_Get_Power_Input_Ptr>:
float * MOTOR_MIXER_Get_Power_Input_Ptr(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
	return &motor_mixer.input_power;
 8001710:	4b02      	ldr	r3, [pc, #8]	; (800171c <MOTOR_MIXER_Get_Power_Input_Ptr+0x10>)
}
 8001712:	4618      	mov	r0, r3
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	20000238 	.word	0x20000238

08001720 <MOTOR_Init>:
static bool_e flag_stop = FALSE;



void MOTOR_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
	 TIMER_Start_All_Channels(TIMER_MOTOR);
 8001724:	2000      	movs	r0, #0
 8001726:	f000 f9bd 	bl	8001aa4 <TIMER_Start_All_Channels>
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <MOTOR_Process>:

void MOTOR_Process(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
	if(flag_stop)
 8001734:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <MOTOR_Process+0x70>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d009      	beq.n	8001750 <MOTOR_Process+0x20>
	{
		/* Clear flag */
		flag_stop = FALSE;
 800173c:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <MOTOR_Process+0x70>)
 800173e:	2200      	movs	r2, #0
 8001740:	701a      	strb	r2, [r3, #0]
		/* Stop pwm on every channel */
		TIMER_Stop_All_Channels(TIMER_MOTOR);
 8001742:	2000      	movs	r0, #0
 8001744:	f000 f9da 	bl	8001afc <TIMER_Stop_All_Channels>
		motor.is_enabled = FALSE;
 8001748:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <MOTOR_Process+0x74>)
 800174a:	2200      	movs	r2, #0
 800174c:	701a      	strb	r2, [r3, #0]
 800174e:	e01c      	b.n	800178a <MOTOR_Process+0x5a>
	}
	else if(flag_start)
 8001750:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <MOTOR_Process+0x78>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d018      	beq.n	800178a <MOTOR_Process+0x5a>
	{
		/* Clear flag */
		flag_start = FALSE;
 8001758:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <MOTOR_Process+0x78>)
 800175a:	2200      	movs	r2, #0
 800175c:	701a      	strb	r2, [r3, #0]
		/* Reset target to 0 */
		motor.output[0] = 1000;
 800175e:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <MOTOR_Process+0x74>)
 8001760:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001764:	805a      	strh	r2, [r3, #2]
		motor.output[1] = 1000;
 8001766:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <MOTOR_Process+0x74>)
 8001768:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800176c:	809a      	strh	r2, [r3, #4]
		motor.output[2] = 1000;
 800176e:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <MOTOR_Process+0x74>)
 8001770:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001774:	80da      	strh	r2, [r3, #6]
		motor.output[3] = 1000;
 8001776:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <MOTOR_Process+0x74>)
 8001778:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800177c:	811a      	strh	r2, [r3, #8]
		/* Start the pwm */
		TIMER_Start_All_Channels(TIMER_MOTOR);
 800177e:	2000      	movs	r0, #0
 8001780:	f000 f990 	bl	8001aa4 <TIMER_Start_All_Channels>
		motor.is_enabled = TRUE;
 8001784:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <MOTOR_Process+0x74>)
 8001786:	2201      	movs	r2, #1
 8001788:	701a      	strb	r2, [r3, #0]
	}
	if(motor.is_enabled)
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <MOTOR_Process+0x74>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <MOTOR_Process+0x6a>
	{
		TIMER_Set_All_CCR(TIMER_MOTOR, motor.output);
 8001792:	4906      	ldr	r1, [pc, #24]	; (80017ac <MOTOR_Process+0x7c>)
 8001794:	2000      	movs	r0, #0
 8001796:	f000 f9dd 	bl	8001b54 <TIMER_Set_All_CCR>
	}
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000256 	.word	0x20000256
 80017a4:	2000024c 	.word	0x2000024c
 80017a8:	20000099 	.word	0x20000099
 80017ac:	2000024e 	.word	0x2000024e

080017b0 <MOTOR_Set>:
/*
 * @brief update motor target values
 * @param array of new float values
 */
void MOTOR_Set(float * target)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	target[0] = (uint16_t)MAX(target[0], 0);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	edd3 7a00 	vldr	s15, [r3]
 80017be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c6:	dd0c      	ble.n	80017e2 <MOTOR_Set+0x32>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	edd3 7a00 	vldr	s15, [r3]
 80017ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017d2:	ee17 3a90 	vmov	r3, s15
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	ee07 3a90 	vmov	s15, r3
 80017dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017e0:	e001      	b.n	80017e6 <MOTOR_Set+0x36>
 80017e2:	eddf 7a89 	vldr	s15, [pc, #548]	; 8001a08 <MOTOR_Set+0x258>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	edc3 7a00 	vstr	s15, [r3]
	target[1] = (uint16_t)MAX(target[1], 0);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3304      	adds	r3, #4
 80017f0:	edd3 7a00 	vldr	s15, [r3]
 80017f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017fc:	dd0d      	ble.n	800181a <MOTOR_Set+0x6a>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3304      	adds	r3, #4
 8001802:	edd3 7a00 	vldr	s15, [r3]
 8001806:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800180a:	ee17 3a90 	vmov	r3, s15
 800180e:	b29b      	uxth	r3, r3
 8001810:	ee07 3a90 	vmov	s15, r3
 8001814:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001818:	e001      	b.n	800181e <MOTOR_Set+0x6e>
 800181a:	eddf 7a7b 	vldr	s15, [pc, #492]	; 8001a08 <MOTOR_Set+0x258>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3304      	adds	r3, #4
 8001822:	edc3 7a00 	vstr	s15, [r3]
	target[2] = (uint16_t)MAX(target[2], 0);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3308      	adds	r3, #8
 800182a:	edd3 7a00 	vldr	s15, [r3]
 800182e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001836:	dd0d      	ble.n	8001854 <MOTOR_Set+0xa4>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3308      	adds	r3, #8
 800183c:	edd3 7a00 	vldr	s15, [r3]
 8001840:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001844:	ee17 3a90 	vmov	r3, s15
 8001848:	b29b      	uxth	r3, r3
 800184a:	ee07 3a90 	vmov	s15, r3
 800184e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001852:	e001      	b.n	8001858 <MOTOR_Set+0xa8>
 8001854:	eddf 7a6c 	vldr	s15, [pc, #432]	; 8001a08 <MOTOR_Set+0x258>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3308      	adds	r3, #8
 800185c:	edc3 7a00 	vstr	s15, [r3]
	target[3] = (uint16_t)MAX(target[3], 0);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	330c      	adds	r3, #12
 8001864:	edd3 7a00 	vldr	s15, [r3]
 8001868:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800186c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001870:	dd0d      	ble.n	800188e <MOTOR_Set+0xde>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	330c      	adds	r3, #12
 8001876:	edd3 7a00 	vldr	s15, [r3]
 800187a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800187e:	ee17 3a90 	vmov	r3, s15
 8001882:	b29b      	uxth	r3, r3
 8001884:	ee07 3a90 	vmov	s15, r3
 8001888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800188c:	e001      	b.n	8001892 <MOTOR_Set+0xe2>
 800188e:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8001a08 <MOTOR_Set+0x258>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	330c      	adds	r3, #12
 8001896:	edc3 7a00 	vstr	s15, [r3]

	target[0] = (uint16_t)MIN(target[0], MOTOR_SIGNAL_MAX);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	edd3 7a00 	vldr	s15, [r3]
 80018a0:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001a0c <MOTOR_Set+0x25c>
 80018a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ac:	dd02      	ble.n	80018b4 <MOTOR_Set+0x104>
 80018ae:	eddf 7a57 	vldr	s15, [pc, #348]	; 8001a0c <MOTOR_Set+0x25c>
 80018b2:	e00b      	b.n	80018cc <MOTOR_Set+0x11c>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	edd3 7a00 	vldr	s15, [r3]
 80018ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018be:	ee17 3a90 	vmov	r3, s15
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	ee07 3a90 	vmov	s15, r3
 80018c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	edc3 7a00 	vstr	s15, [r3]
	target[1] = (uint16_t)MIN(target[1], MOTOR_SIGNAL_MAX);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3304      	adds	r3, #4
 80018d6:	edd3 7a00 	vldr	s15, [r3]
 80018da:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001a0c <MOTOR_Set+0x25c>
 80018de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e6:	dd02      	ble.n	80018ee <MOTOR_Set+0x13e>
 80018e8:	eddf 7a48 	vldr	s15, [pc, #288]	; 8001a0c <MOTOR_Set+0x25c>
 80018ec:	e00c      	b.n	8001908 <MOTOR_Set+0x158>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3304      	adds	r3, #4
 80018f2:	edd3 7a00 	vldr	s15, [r3]
 80018f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018fa:	ee17 3a90 	vmov	r3, s15
 80018fe:	b29b      	uxth	r3, r3
 8001900:	ee07 3a90 	vmov	s15, r3
 8001904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3304      	adds	r3, #4
 800190c:	edc3 7a00 	vstr	s15, [r3]
	target[2] = (uint16_t)MIN(target[2], MOTOR_SIGNAL_MAX);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3308      	adds	r3, #8
 8001914:	edd3 7a00 	vldr	s15, [r3]
 8001918:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001a0c <MOTOR_Set+0x25c>
 800191c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001924:	dd02      	ble.n	800192c <MOTOR_Set+0x17c>
 8001926:	eddf 7a39 	vldr	s15, [pc, #228]	; 8001a0c <MOTOR_Set+0x25c>
 800192a:	e00c      	b.n	8001946 <MOTOR_Set+0x196>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3308      	adds	r3, #8
 8001930:	edd3 7a00 	vldr	s15, [r3]
 8001934:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001938:	ee17 3a90 	vmov	r3, s15
 800193c:	b29b      	uxth	r3, r3
 800193e:	ee07 3a90 	vmov	s15, r3
 8001942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	3308      	adds	r3, #8
 800194a:	edc3 7a00 	vstr	s15, [r3]
	target[3] = (uint16_t)MIN(target[3], MOTOR_SIGNAL_MAX);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	330c      	adds	r3, #12
 8001952:	edd3 7a00 	vldr	s15, [r3]
 8001956:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001a0c <MOTOR_Set+0x25c>
 800195a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800195e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001962:	dd02      	ble.n	800196a <MOTOR_Set+0x1ba>
 8001964:	eddf 7a29 	vldr	s15, [pc, #164]	; 8001a0c <MOTOR_Set+0x25c>
 8001968:	e00c      	b.n	8001984 <MOTOR_Set+0x1d4>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	330c      	adds	r3, #12
 800196e:	edd3 7a00 	vldr	s15, [r3]
 8001972:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001976:	ee17 3a90 	vmov	r3, s15
 800197a:	b29b      	uxth	r3, r3
 800197c:	ee07 3a90 	vmov	s15, r3
 8001980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	330c      	adds	r3, #12
 8001988:	edc3 7a00 	vstr	s15, [r3]

	motor.output[0] = (uint16_t)target[0]+1000;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	edd3 7a00 	vldr	s15, [r3]
 8001992:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001996:	ee17 3a90 	vmov	r3, s15
 800199a:	b29b      	uxth	r3, r3
 800199c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <MOTOR_Set+0x260>)
 80019a4:	805a      	strh	r2, [r3, #2]
	motor.output[1] = (uint16_t)target[1]+1000;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3304      	adds	r3, #4
 80019aa:	edd3 7a00 	vldr	s15, [r3]
 80019ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019b2:	ee17 3a90 	vmov	r3, s15
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80019bc:	b29a      	uxth	r2, r3
 80019be:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <MOTOR_Set+0x260>)
 80019c0:	809a      	strh	r2, [r3, #4]
	motor.output[2] = (uint16_t)target[2]+1000;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	3308      	adds	r3, #8
 80019c6:	edd3 7a00 	vldr	s15, [r3]
 80019ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019ce:	ee17 3a90 	vmov	r3, s15
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80019d8:	b29a      	uxth	r2, r3
 80019da:	4b0d      	ldr	r3, [pc, #52]	; (8001a10 <MOTOR_Set+0x260>)
 80019dc:	80da      	strh	r2, [r3, #6]
	motor.output[3] = (uint16_t)target[3]+1000;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	330c      	adds	r3, #12
 80019e2:	edd3 7a00 	vldr	s15, [r3]
 80019e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019ea:	ee17 3a90 	vmov	r3, s15
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <MOTOR_Set+0x260>)
 80019f8:	811a      	strh	r2, [r3, #8]
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	00000000 	.word	0x00000000
 8001a0c:	43fa0000 	.word	0x43fa0000
 8001a10:	2000024c 	.word	0x2000024c

08001a14 <I2C_Mem_Write>:

void I2C_Init(void)
{
}
HAL_StatusTypeDef I2C_Mem_Write(i2c_e i2c_id, uint8_t device_address, uint8_t mem_address, uint8_t * data, uint8_t size)
{
 8001a14:	b590      	push	{r4, r7, lr}
 8001a16:	b087      	sub	sp, #28
 8001a18:	af04      	add	r7, sp, #16
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	71fb      	strb	r3, [r7, #7]
 8001a20:	460b      	mov	r3, r1
 8001a22:	71bb      	strb	r3, [r7, #6]
 8001a24:	4613      	mov	r3, r2
 8001a26:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Write(i2c[i2c_id].hi2c, device_address, mem_address, I2C_MEMADD_SIZE_8BIT, data, size, I2C_OPERATION_TIMEOUT);
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	4a0b      	ldr	r2, [pc, #44]	; (8001a58 <I2C_Mem_Write+0x44>)
 8001a2c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001a30:	79bb      	ldrb	r3, [r7, #6]
 8001a32:	b299      	uxth	r1, r3
 8001a34:	797b      	ldrb	r3, [r7, #5]
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	7e3b      	ldrb	r3, [r7, #24]
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	240a      	movs	r4, #10
 8001a3e:	9402      	str	r4, [sp, #8]
 8001a40:	9301      	str	r3, [sp, #4]
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	2301      	movs	r3, #1
 8001a48:	f002 fdd0 	bl	80045ec <HAL_I2C_Mem_Write>
 8001a4c:	4603      	mov	r3, r0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd90      	pop	{r4, r7, pc}
 8001a56:	bf00      	nop
 8001a58:	2000009c 	.word	0x2000009c

08001a5c <I2C_Mem_Read>:

HAL_StatusTypeDef I2C_Mem_Read(i2c_e i2c_id, uint8_t device_address, uint8_t mem_address, uint8_t * data, uint8_t size)
{
 8001a5c:	b590      	push	{r4, r7, lr}
 8001a5e:	b087      	sub	sp, #28
 8001a60:	af04      	add	r7, sp, #16
 8001a62:	603b      	str	r3, [r7, #0]
 8001a64:	4603      	mov	r3, r0
 8001a66:	71fb      	strb	r3, [r7, #7]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	71bb      	strb	r3, [r7, #6]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Read(i2c[i2c_id].hi2c, device_address, mem_address, I2C_MEMADD_SIZE_8BIT, data, size, I2C_OPERATION_TIMEOUT);
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	4a0b      	ldr	r2, [pc, #44]	; (8001aa0 <I2C_Mem_Read+0x44>)
 8001a74:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001a78:	79bb      	ldrb	r3, [r7, #6]
 8001a7a:	b299      	uxth	r1, r3
 8001a7c:	797b      	ldrb	r3, [r7, #5]
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	7e3b      	ldrb	r3, [r7, #24]
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	240a      	movs	r4, #10
 8001a86:	9402      	str	r4, [sp, #8]
 8001a88:	9301      	str	r3, [sp, #4]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	2301      	movs	r3, #1
 8001a90:	f002 fea6 	bl	80047e0 <HAL_I2C_Mem_Read>
 8001a94:	4603      	mov	r3, r0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd90      	pop	{r4, r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	2000009c 	.word	0x2000009c

08001aa4 <TIMER_Start_All_Channels>:
/*
 * @brief Start all channels of a timer
 * @param timer_id id of the timer
 */
void TIMER_Start_All_Channels(timer_e timer_id)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	71fb      	strb	r3, [r7, #7]
	HAL_TIM_PWM_Start(timer[timer_id].htim, TIM_CHANNEL_1);
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	4a11      	ldr	r2, [pc, #68]	; (8001af8 <TIMER_Start_All_Channels+0x54>)
 8001ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f004 f903 	bl	8005cc4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer[timer_id].htim, TIM_CHANNEL_2);
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	4a0d      	ldr	r2, [pc, #52]	; (8001af8 <TIMER_Start_All_Channels+0x54>)
 8001ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac6:	2104      	movs	r1, #4
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f004 f8fb 	bl	8005cc4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer[timer_id].htim, TIM_CHANNEL_3);
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	4a09      	ldr	r2, [pc, #36]	; (8001af8 <TIMER_Start_All_Channels+0x54>)
 8001ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad6:	2108      	movs	r1, #8
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f004 f8f3 	bl	8005cc4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer[timer_id].htim, TIM_CHANNEL_4);
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	4a05      	ldr	r2, [pc, #20]	; (8001af8 <TIMER_Start_All_Channels+0x54>)
 8001ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae6:	210c      	movs	r1, #12
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f004 f8eb 	bl	8005cc4 <HAL_TIM_PWM_Start>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	200000a0 	.word	0x200000a0

08001afc <TIMER_Stop_All_Channels>:
/*
 * @brief Stop all channels of a timer
 * @param timer_id id of the timer
 */
void TIMER_Stop_All_Channels(timer_e timer_id)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	71fb      	strb	r3, [r7, #7]
	HAL_TIM_PWM_Stop(timer[timer_id].htim, TIM_CHANNEL_1);
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	4a11      	ldr	r2, [pc, #68]	; (8001b50 <TIMER_Stop_All_Channels+0x54>)
 8001b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b0e:	2100      	movs	r1, #0
 8001b10:	4618      	mov	r0, r3
 8001b12:	f004 f99f 	bl	8005e54 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(timer[timer_id].htim, TIM_CHANNEL_2);
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	4a0d      	ldr	r2, [pc, #52]	; (8001b50 <TIMER_Stop_All_Channels+0x54>)
 8001b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b1e:	2104      	movs	r1, #4
 8001b20:	4618      	mov	r0, r3
 8001b22:	f004 f997 	bl	8005e54 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(timer[timer_id].htim, TIM_CHANNEL_3);
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	4a09      	ldr	r2, [pc, #36]	; (8001b50 <TIMER_Stop_All_Channels+0x54>)
 8001b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b2e:	2108      	movs	r1, #8
 8001b30:	4618      	mov	r0, r3
 8001b32:	f004 f98f 	bl	8005e54 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(timer[timer_id].htim, TIM_CHANNEL_4);
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	4a05      	ldr	r2, [pc, #20]	; (8001b50 <TIMER_Stop_All_Channels+0x54>)
 8001b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b3e:	210c      	movs	r1, #12
 8001b40:	4618      	mov	r0, r3
 8001b42:	f004 f987 	bl	8005e54 <HAL_TIM_PWM_Stop>
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	200000a0 	.word	0x200000a0

08001b54 <TIMER_Set_All_CCR>:
 * @brief Set new capture compare values
 * @param tiemr_id The timer to use
 * @param values The new values
 */
void TIMER_Set_All_CCR(timer_e timer_id, uint16_t * values)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	6039      	str	r1, [r7, #0]
 8001b5e:	71fb      	strb	r3, [r7, #7]
	timer[timer_id].htim->Instance->CCR1 = values[0];
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	8819      	ldrh	r1, [r3, #0]
 8001b64:	79fb      	ldrb	r3, [r7, #7]
 8001b66:	4a15      	ldr	r2, [pc, #84]	; (8001bbc <TIMER_Set_All_CCR+0x68>)
 8001b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	460a      	mov	r2, r1
 8001b70:	635a      	str	r2, [r3, #52]	; 0x34
	timer[timer_id].htim->Instance->CCR2 = values[1];
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	3302      	adds	r3, #2
 8001b76:	8819      	ldrh	r1, [r3, #0]
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	4a10      	ldr	r2, [pc, #64]	; (8001bbc <TIMER_Set_All_CCR+0x68>)
 8001b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	460a      	mov	r2, r1
 8001b84:	639a      	str	r2, [r3, #56]	; 0x38
	timer[timer_id].htim->Instance->CCR3 = values[2];
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	3304      	adds	r3, #4
 8001b8a:	8819      	ldrh	r1, [r3, #0]
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	4a0b      	ldr	r2, [pc, #44]	; (8001bbc <TIMER_Set_All_CCR+0x68>)
 8001b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	460a      	mov	r2, r1
 8001b98:	63da      	str	r2, [r3, #60]	; 0x3c
	timer[timer_id].htim->Instance->CCR4 = values[3];
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	3306      	adds	r3, #6
 8001b9e:	8819      	ldrh	r1, [r3, #0]
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	4a06      	ldr	r2, [pc, #24]	; (8001bbc <TIMER_Set_All_CCR+0x68>)
 8001ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	460a      	mov	r2, r1
 8001bac:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	200000a0 	.word	0x200000a0

08001bc0 <UART_Idle_Line_Callback>:
/* -------------------------- Public callback functions -------------------------- */
/*
 * @brief Update the read index when the idle flag is raised
 */
void UART_Idle_Line_Callback(uart_e id)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	71fb      	strb	r3, [r7, #7]
	if(__HAL_UART_GET_FLAG(uart[id].huart, UART_FLAG_IDLE))
 8001bca:	79fa      	ldrb	r2, [r7, #7]
 8001bcc:	4922      	ldr	r1, [pc, #136]	; (8001c58 <UART_Idle_Line_Callback+0x98>)
 8001bce:	4613      	mov	r3, r2
 8001bd0:	019b      	lsls	r3, r3, #6
 8001bd2:	4413      	add	r3, r2
 8001bd4:	011b      	lsls	r3, r3, #4
 8001bd6:	440b      	add	r3, r1
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0310 	and.w	r3, r3, #16
 8001be2:	2b10      	cmp	r3, #16
 8001be4:	d132      	bne.n	8001c4c <UART_Idle_Line_Callback+0x8c>
	{
		uart[id].index_write_rx = LEN_BUFFER - uart[id].huart->hdmarx->Instance->NDTR ;
 8001be6:	79fa      	ldrb	r2, [r7, #7]
 8001be8:	491b      	ldr	r1, [pc, #108]	; (8001c58 <UART_Idle_Line_Callback+0x98>)
 8001bea:	4613      	mov	r3, r2
 8001bec:	019b      	lsls	r3, r3, #6
 8001bee:	4413      	add	r3, r2
 8001bf0:	011b      	lsls	r3, r3, #4
 8001bf2:	440b      	add	r3, r1
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	79fa      	ldrb	r2, [r7, #7]
 8001c00:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001c04:	b298      	uxth	r0, r3
 8001c06:	4914      	ldr	r1, [pc, #80]	; (8001c58 <UART_Idle_Line_Callback+0x98>)
 8001c08:	4613      	mov	r3, r2
 8001c0a:	019b      	lsls	r3, r3, #6
 8001c0c:	4413      	add	r3, r2
 8001c0e:	011b      	lsls	r3, r3, #4
 8001c10:	440b      	add	r3, r1
 8001c12:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8001c16:	4602      	mov	r2, r0
 8001c18:	801a      	strh	r2, [r3, #0]
	  __HAL_UART_CLEAR_IDLEFLAG(uart[id].huart);
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	79fa      	ldrb	r2, [r7, #7]
 8001c20:	490d      	ldr	r1, [pc, #52]	; (8001c58 <UART_Idle_Line_Callback+0x98>)
 8001c22:	4613      	mov	r3, r2
 8001c24:	019b      	lsls	r3, r3, #6
 8001c26:	4413      	add	r3, r2
 8001c28:	011b      	lsls	r3, r3, #4
 8001c2a:	440b      	add	r3, r1
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	79fa      	ldrb	r2, [r7, #7]
 8001c36:	4908      	ldr	r1, [pc, #32]	; (8001c58 <UART_Idle_Line_Callback+0x98>)
 8001c38:	4613      	mov	r3, r2
 8001c3a:	019b      	lsls	r3, r3, #6
 8001c3c:	4413      	add	r3, r2
 8001c3e:	011b      	lsls	r3, r3, #4
 8001c40:	440b      	add	r3, r1
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
	}
}
 8001c4c:	bf00      	nop
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	20000258 	.word	0x20000258

08001c5c <UART_Transfer_Complete_Callback>:

/*
 * @brief Re start the dma transfer if there is data to send or reset the transmission state to idle
 */
void UART_Transfer_Complete_Callback(uart_e id)
{
 8001c5c:	b590      	push	{r4, r7, lr}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	71fb      	strb	r3, [r7, #7]
	if(uart[id].index_write_tx != uart[id].index_read_tx)
 8001c66:	79fa      	ldrb	r2, [r7, #7]
 8001c68:	494d      	ldr	r1, [pc, #308]	; (8001da0 <UART_Transfer_Complete_Callback+0x144>)
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	019b      	lsls	r3, r3, #6
 8001c6e:	4413      	add	r3, r2
 8001c70:	011b      	lsls	r3, r3, #4
 8001c72:	440b      	add	r3, r1
 8001c74:	f203 2306 	addw	r3, r3, #518	; 0x206
 8001c78:	8819      	ldrh	r1, [r3, #0]
 8001c7a:	79fa      	ldrb	r2, [r7, #7]
 8001c7c:	4848      	ldr	r0, [pc, #288]	; (8001da0 <UART_Transfer_Complete_Callback+0x144>)
 8001c7e:	4613      	mov	r3, r2
 8001c80:	019b      	lsls	r3, r3, #6
 8001c82:	4413      	add	r3, r2
 8001c84:	011b      	lsls	r3, r3, #4
 8001c86:	4403      	add	r3, r0
 8001c88:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	4299      	cmp	r1, r3
 8001c90:	d077      	beq.n	8001d82 <UART_Transfer_Complete_Callback+0x126>
	{
		uint16_t nb_bytes_to_read = 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	81fb      	strh	r3, [r7, #14]
		if(uart[id].index_write_tx > uart[id].index_read_rx)
 8001c96:	79fa      	ldrb	r2, [r7, #7]
 8001c98:	4941      	ldr	r1, [pc, #260]	; (8001da0 <UART_Transfer_Complete_Callback+0x144>)
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	019b      	lsls	r3, r3, #6
 8001c9e:	4413      	add	r3, r2
 8001ca0:	011b      	lsls	r3, r3, #4
 8001ca2:	440b      	add	r3, r1
 8001ca4:	f203 2306 	addw	r3, r3, #518	; 0x206
 8001ca8:	8819      	ldrh	r1, [r3, #0]
 8001caa:	79fa      	ldrb	r2, [r7, #7]
 8001cac:	483c      	ldr	r0, [pc, #240]	; (8001da0 <UART_Transfer_Complete_Callback+0x144>)
 8001cae:	4613      	mov	r3, r2
 8001cb0:	019b      	lsls	r3, r3, #6
 8001cb2:	4413      	add	r3, r2
 8001cb4:	011b      	lsls	r3, r3, #4
 8001cb6:	4403      	add	r3, r0
 8001cb8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	4299      	cmp	r1, r3
 8001cc0:	d916      	bls.n	8001cf0 <UART_Transfer_Complete_Callback+0x94>
		{
			nb_bytes_to_read = uart[id].index_write_tx - uart[id].index_read_tx;
 8001cc2:	79fa      	ldrb	r2, [r7, #7]
 8001cc4:	4936      	ldr	r1, [pc, #216]	; (8001da0 <UART_Transfer_Complete_Callback+0x144>)
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	019b      	lsls	r3, r3, #6
 8001cca:	4413      	add	r3, r2
 8001ccc:	011b      	lsls	r3, r3, #4
 8001cce:	440b      	add	r3, r1
 8001cd0:	f203 2306 	addw	r3, r3, #518	; 0x206
 8001cd4:	8819      	ldrh	r1, [r3, #0]
 8001cd6:	79fa      	ldrb	r2, [r7, #7]
 8001cd8:	4831      	ldr	r0, [pc, #196]	; (8001da0 <UART_Transfer_Complete_Callback+0x144>)
 8001cda:	4613      	mov	r3, r2
 8001cdc:	019b      	lsls	r3, r3, #6
 8001cde:	4413      	add	r3, r2
 8001ce0:	011b      	lsls	r3, r3, #4
 8001ce2:	4403      	add	r3, r0
 8001ce4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ce8:	881b      	ldrh	r3, [r3, #0]
 8001cea:	1acb      	subs	r3, r1, r3
 8001cec:	81fb      	strh	r3, [r7, #14]
 8001cee:	e00c      	b.n	8001d0a <UART_Transfer_Complete_Callback+0xae>
		}
		else
		{
			nb_bytes_to_read = LEN_BUFFER - uart[id].index_read_tx;
 8001cf0:	79fa      	ldrb	r2, [r7, #7]
 8001cf2:	492b      	ldr	r1, [pc, #172]	; (8001da0 <UART_Transfer_Complete_Callback+0x144>)
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	019b      	lsls	r3, r3, #6
 8001cf8:	4413      	add	r3, r2
 8001cfa:	011b      	lsls	r3, r3, #4
 8001cfc:	440b      	add	r3, r1
 8001cfe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001d08:	81fb      	strh	r3, [r7, #14]
		}
		HAL_UART_Transmit_DMA(uart[id].huart, &uart[id].buffer_tx[uart[id].index_read_tx], nb_bytes_to_read);
 8001d0a:	79fa      	ldrb	r2, [r7, #7]
 8001d0c:	4924      	ldr	r1, [pc, #144]	; (8001da0 <UART_Transfer_Complete_Callback+0x144>)
 8001d0e:	4613      	mov	r3, r2
 8001d10:	019b      	lsls	r3, r3, #6
 8001d12:	4413      	add	r3, r2
 8001d14:	011b      	lsls	r3, r3, #4
 8001d16:	440b      	add	r3, r1
 8001d18:	6818      	ldr	r0, [r3, #0]
 8001d1a:	79fa      	ldrb	r2, [r7, #7]
 8001d1c:	79f9      	ldrb	r1, [r7, #7]
 8001d1e:	4c20      	ldr	r4, [pc, #128]	; (8001da0 <UART_Transfer_Complete_Callback+0x144>)
 8001d20:	460b      	mov	r3, r1
 8001d22:	019b      	lsls	r3, r3, #6
 8001d24:	440b      	add	r3, r1
 8001d26:	011b      	lsls	r3, r3, #4
 8001d28:	4423      	add	r3, r4
 8001d2a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	4619      	mov	r1, r3
 8001d32:	4613      	mov	r3, r2
 8001d34:	019b      	lsls	r3, r3, #6
 8001d36:	4413      	add	r3, r2
 8001d38:	011b      	lsls	r3, r3, #4
 8001d3a:	440b      	add	r3, r1
 8001d3c:	4a18      	ldr	r2, [pc, #96]	; (8001da0 <UART_Transfer_Complete_Callback+0x144>)
 8001d3e:	4413      	add	r3, r2
 8001d40:	3306      	adds	r3, #6
 8001d42:	89fa      	ldrh	r2, [r7, #14]
 8001d44:	4619      	mov	r1, r3
 8001d46:	f004 fe59 	bl	80069fc <HAL_UART_Transmit_DMA>
		uart[id].index_read_tx = (uart[id].index_read_tx + nb_bytes_to_read) % LEN_BUFFER;
 8001d4a:	79fa      	ldrb	r2, [r7, #7]
 8001d4c:	4914      	ldr	r1, [pc, #80]	; (8001da0 <UART_Transfer_Complete_Callback+0x144>)
 8001d4e:	4613      	mov	r3, r2
 8001d50:	019b      	lsls	r3, r3, #6
 8001d52:	4413      	add	r3, r2
 8001d54:	011b      	lsls	r3, r3, #4
 8001d56:	440b      	add	r3, r1
 8001d58:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d5c:	881a      	ldrh	r2, [r3, #0]
 8001d5e:	89fb      	ldrh	r3, [r7, #14]
 8001d60:	4413      	add	r3, r2
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	79fa      	ldrb	r2, [r7, #7]
 8001d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d6a:	b298      	uxth	r0, r3
 8001d6c:	490c      	ldr	r1, [pc, #48]	; (8001da0 <UART_Transfer_Complete_Callback+0x144>)
 8001d6e:	4613      	mov	r3, r2
 8001d70:	019b      	lsls	r3, r3, #6
 8001d72:	4413      	add	r3, r2
 8001d74:	011b      	lsls	r3, r3, #4
 8001d76:	440b      	add	r3, r1
 8001d78:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		uart[id].transmission_state = transmission_state_eIDLE;
	}
}
 8001d80:	e009      	b.n	8001d96 <UART_Transfer_Complete_Callback+0x13a>
		uart[id].transmission_state = transmission_state_eIDLE;
 8001d82:	79fa      	ldrb	r2, [r7, #7]
 8001d84:	4906      	ldr	r1, [pc, #24]	; (8001da0 <UART_Transfer_Complete_Callback+0x144>)
 8001d86:	4613      	mov	r3, r2
 8001d88:	019b      	lsls	r3, r3, #6
 8001d8a:	4413      	add	r3, r2
 8001d8c:	011b      	lsls	r3, r3, #4
 8001d8e:	440b      	add	r3, r1
 8001d90:	3305      	adds	r3, #5
 8001d92:	2200      	movs	r2, #0
 8001d94:	701a      	strb	r2, [r3, #0]
}
 8001d96:	bf00      	nop
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd90      	pop	{r4, r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000258 	.word	0x20000258

08001da4 <UART_Availables>:
 * @brief Number of byte available in the RX buffer
 * @param id Id of the uart we are interested in
 * @return Number of bytes
 */
uint16_t UART_Availables(uart_e id)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	71fb      	strb	r3, [r7, #7]
	return get_nb_bytes_available(id);
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f000 f94f 	bl	8002054 <get_nb_bytes_available>
 8001db6:	4603      	mov	r3, r0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <UART_Get>:
 * 		  Does nothing if there are no characters available
 * @param id Id of the uart
 * @param c Buffer to write the character into
 */
void UART_Get(uart_e id, uint8_t * c)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	6039      	str	r1, [r7, #0]
 8001dca:	71fb      	strb	r3, [r7, #7]
	if(get_nb_bytes_available(id))
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 f940 	bl	8002054 <get_nb_bytes_available>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d035      	beq.n	8001e46 <UART_Get+0x86>
	{
		*c = uart[id].buffer_rx[uart[id].index_read_rx];
 8001dda:	79fa      	ldrb	r2, [r7, #7]
 8001ddc:	79f9      	ldrb	r1, [r7, #7]
 8001dde:	481c      	ldr	r0, [pc, #112]	; (8001e50 <UART_Get+0x90>)
 8001de0:	460b      	mov	r3, r1
 8001de2:	019b      	lsls	r3, r3, #6
 8001de4:	440b      	add	r3, r1
 8001de6:	011b      	lsls	r3, r3, #4
 8001de8:	4403      	add	r3, r0
 8001dea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	4917      	ldr	r1, [pc, #92]	; (8001e50 <UART_Get+0x90>)
 8001df4:	4613      	mov	r3, r2
 8001df6:	019b      	lsls	r3, r3, #6
 8001df8:	4413      	add	r3, r2
 8001dfa:	011b      	lsls	r3, r3, #4
 8001dfc:	440b      	add	r3, r1
 8001dfe:	4403      	add	r3, r0
 8001e00:	f203 230a 	addw	r3, r3, #522	; 0x20a
 8001e04:	781a      	ldrb	r2, [r3, #0]
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	701a      	strb	r2, [r3, #0]
		uart[id].index_read_rx = (uart[id].index_read_rx + 1) % LEN_BUFFER;
 8001e0a:	79fa      	ldrb	r2, [r7, #7]
 8001e0c:	4910      	ldr	r1, [pc, #64]	; (8001e50 <UART_Get+0x90>)
 8001e0e:	4613      	mov	r3, r2
 8001e10:	019b      	lsls	r3, r3, #6
 8001e12:	4413      	add	r3, r2
 8001e14:	011b      	lsls	r3, r3, #4
 8001e16:	440b      	add	r3, r1
 8001e18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	425a      	negs	r2, r3
 8001e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e2a:	bf58      	it	pl
 8001e2c:	4253      	negpl	r3, r2
 8001e2e:	79fa      	ldrb	r2, [r7, #7]
 8001e30:	b298      	uxth	r0, r3
 8001e32:	4907      	ldr	r1, [pc, #28]	; (8001e50 <UART_Get+0x90>)
 8001e34:	4613      	mov	r3, r2
 8001e36:	019b      	lsls	r3, r3, #6
 8001e38:	4413      	add	r3, r2
 8001e3a:	011b      	lsls	r3, r3, #4
 8001e3c:	440b      	add	r3, r1
 8001e3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e42:	4602      	mov	r2, r0
 8001e44:	801a      	strh	r2, [r3, #0]
	}
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000258 	.word	0x20000258

08001e54 <UART_Init>:

/*
 * @brief Initialize every uarts and start dma reception
 */
void UART_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
	/* Link  huarts to the right uarts structures */
	uart[uart_e1].huart = &huart1;
 8001e5a:	4b21      	ldr	r3, [pc, #132]	; (8001ee0 <UART_Init+0x8c>)
 8001e5c:	4a21      	ldr	r2, [pc, #132]	; (8001ee4 <UART_Init+0x90>)
 8001e5e:	601a      	str	r2, [r3, #0]
	uart[uart_e4].huart = &huart4;
 8001e60:	4b1f      	ldr	r3, [pc, #124]	; (8001ee0 <UART_Init+0x8c>)
 8001e62:	4a21      	ldr	r2, [pc, #132]	; (8001ee8 <UART_Init+0x94>)
 8001e64:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410

	/* Initialization */
	for(uint8_t u = 0; u < uart_eCOUNT; u ++)
 8001e68:	2300      	movs	r3, #0
 8001e6a:	71fb      	strb	r3, [r7, #7]
 8001e6c:	e02f      	b.n	8001ece <UART_Init+0x7a>
	{
		__HAL_UART_ENABLE_IT(uart[u].huart, UART_IT_IDLE);
 8001e6e:	79fa      	ldrb	r2, [r7, #7]
 8001e70:	491b      	ldr	r1, [pc, #108]	; (8001ee0 <UART_Init+0x8c>)
 8001e72:	4613      	mov	r3, r2
 8001e74:	019b      	lsls	r3, r3, #6
 8001e76:	4413      	add	r3, r2
 8001e78:	011b      	lsls	r3, r3, #4
 8001e7a:	440b      	add	r3, r1
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68d9      	ldr	r1, [r3, #12]
 8001e82:	79fa      	ldrb	r2, [r7, #7]
 8001e84:	4816      	ldr	r0, [pc, #88]	; (8001ee0 <UART_Init+0x8c>)
 8001e86:	4613      	mov	r3, r2
 8001e88:	019b      	lsls	r3, r3, #6
 8001e8a:	4413      	add	r3, r2
 8001e8c:	011b      	lsls	r3, r3, #4
 8001e8e:	4403      	add	r3, r0
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f041 0210 	orr.w	r2, r1, #16
 8001e98:	60da      	str	r2, [r3, #12]
		HAL_UART_Receive_DMA(uart[u].huart, uart[u].buffer_rx, LEN_BUFFER);
 8001e9a:	79fa      	ldrb	r2, [r7, #7]
 8001e9c:	4910      	ldr	r1, [pc, #64]	; (8001ee0 <UART_Init+0x8c>)
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	019b      	lsls	r3, r3, #6
 8001ea2:	4413      	add	r3, r2
 8001ea4:	011b      	lsls	r3, r3, #4
 8001ea6:	440b      	add	r3, r1
 8001ea8:	6818      	ldr	r0, [r3, #0]
 8001eaa:	79fa      	ldrb	r2, [r7, #7]
 8001eac:	4613      	mov	r3, r2
 8001eae:	019b      	lsls	r3, r3, #6
 8001eb0:	4413      	add	r3, r2
 8001eb2:	011b      	lsls	r3, r3, #4
 8001eb4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001eb8:	4a09      	ldr	r2, [pc, #36]	; (8001ee0 <UART_Init+0x8c>)
 8001eba:	4413      	add	r3, r2
 8001ebc:	3302      	adds	r3, #2
 8001ebe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	f004 fe18 	bl	8006af8 <HAL_UART_Receive_DMA>
	for(uint8_t u = 0; u < uart_eCOUNT; u ++)
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	71fb      	strb	r3, [r7, #7]
 8001ece:	79fb      	ldrb	r3, [r7, #7]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d9cc      	bls.n	8001e6e <UART_Init+0x1a>
	}
}
 8001ed4:	bf00      	nop
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000258 	.word	0x20000258
 8001ee4:	20000f78 	.word	0x20000f78
 8001ee8:	20000fbc 	.word	0x20000fbc

08001eec <UART_Transmit>:
 * @param id Id of the uart to use
 * @param data Array with the data
 * @param len Length of the data array
 */
void UART_Transmit(uart_e id, uint8_t * data, uint16_t len)
{
 8001eec:	b590      	push	{r4, r7, lr}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	6039      	str	r1, [r7, #0]
 8001ef6:	71fb      	strb	r3, [r7, #7]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	80bb      	strh	r3, [r7, #4]
	for(uint16_t c = 0; c < len; c ++)
 8001efc:	2300      	movs	r3, #0
 8001efe:	81fb      	strh	r3, [r7, #14]
 8001f00:	e020      	b.n	8001f44 <UART_Transmit+0x58>
	{
		uart[id].buffer_tx[(uart[id].index_write_tx + c) % LEN_BUFFER] = data[c];
 8001f02:	89fb      	ldrh	r3, [r7, #14]
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	18d0      	adds	r0, r2, r3
 8001f08:	79fa      	ldrb	r2, [r7, #7]
 8001f0a:	79f9      	ldrb	r1, [r7, #7]
 8001f0c:	4c50      	ldr	r4, [pc, #320]	; (8002050 <UART_Transmit+0x164>)
 8001f0e:	460b      	mov	r3, r1
 8001f10:	019b      	lsls	r3, r3, #6
 8001f12:	440b      	add	r3, r1
 8001f14:	011b      	lsls	r3, r3, #4
 8001f16:	4423      	add	r3, r4
 8001f18:	f203 2306 	addw	r3, r3, #518	; 0x206
 8001f1c:	8819      	ldrh	r1, [r3, #0]
 8001f1e:	89fb      	ldrh	r3, [r7, #14]
 8001f20:	440b      	add	r3, r1
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8001f28:	7804      	ldrb	r4, [r0, #0]
 8001f2a:	4849      	ldr	r0, [pc, #292]	; (8002050 <UART_Transmit+0x164>)
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	019b      	lsls	r3, r3, #6
 8001f30:	4413      	add	r3, r2
 8001f32:	011b      	lsls	r3, r3, #4
 8001f34:	4403      	add	r3, r0
 8001f36:	440b      	add	r3, r1
 8001f38:	3306      	adds	r3, #6
 8001f3a:	4622      	mov	r2, r4
 8001f3c:	701a      	strb	r2, [r3, #0]
	for(uint16_t c = 0; c < len; c ++)
 8001f3e:	89fb      	ldrh	r3, [r7, #14]
 8001f40:	3301      	adds	r3, #1
 8001f42:	81fb      	strh	r3, [r7, #14]
 8001f44:	89fa      	ldrh	r2, [r7, #14]
 8001f46:	88bb      	ldrh	r3, [r7, #4]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d3da      	bcc.n	8001f02 <UART_Transmit+0x16>
	}
	uart[id].index_write_tx = (uart[id].index_write_tx + len) % LEN_BUFFER;
 8001f4c:	79fa      	ldrb	r2, [r7, #7]
 8001f4e:	4940      	ldr	r1, [pc, #256]	; (8002050 <UART_Transmit+0x164>)
 8001f50:	4613      	mov	r3, r2
 8001f52:	019b      	lsls	r3, r3, #6
 8001f54:	4413      	add	r3, r2
 8001f56:	011b      	lsls	r3, r3, #4
 8001f58:	440b      	add	r3, r1
 8001f5a:	f203 2306 	addw	r3, r3, #518	; 0x206
 8001f5e:	881a      	ldrh	r2, [r3, #0]
 8001f60:	88bb      	ldrh	r3, [r7, #4]
 8001f62:	4413      	add	r3, r2
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	79fa      	ldrb	r2, [r7, #7]
 8001f68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f6c:	b298      	uxth	r0, r3
 8001f6e:	4938      	ldr	r1, [pc, #224]	; (8002050 <UART_Transmit+0x164>)
 8001f70:	4613      	mov	r3, r2
 8001f72:	019b      	lsls	r3, r3, #6
 8001f74:	4413      	add	r3, r2
 8001f76:	011b      	lsls	r3, r3, #4
 8001f78:	440b      	add	r3, r1
 8001f7a:	f203 2306 	addw	r3, r3, #518	; 0x206
 8001f7e:	4602      	mov	r2, r0
 8001f80:	801a      	strh	r2, [r3, #0]
	if(uart[id].transmission_state == transmission_state_eIDLE)
 8001f82:	79fa      	ldrb	r2, [r7, #7]
 8001f84:	4932      	ldr	r1, [pc, #200]	; (8002050 <UART_Transmit+0x164>)
 8001f86:	4613      	mov	r3, r2
 8001f88:	019b      	lsls	r3, r3, #6
 8001f8a:	4413      	add	r3, r2
 8001f8c:	011b      	lsls	r3, r3, #4
 8001f8e:	440b      	add	r3, r1
 8001f90:	3305      	adds	r3, #5
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d157      	bne.n	8002048 <UART_Transmit+0x15c>
	{
		uart[id].transmission_state = transmission_state_eIN_PROGRESS;
 8001f98:	79fa      	ldrb	r2, [r7, #7]
 8001f9a:	492d      	ldr	r1, [pc, #180]	; (8002050 <UART_Transmit+0x164>)
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	019b      	lsls	r3, r3, #6
 8001fa0:	4413      	add	r3, r2
 8001fa2:	011b      	lsls	r3, r3, #4
 8001fa4:	440b      	add	r3, r1
 8001fa6:	3305      	adds	r3, #5
 8001fa8:	2201      	movs	r2, #1
 8001faa:	701a      	strb	r2, [r3, #0]
		uint16_t nb_bytes_before_end_of_buffer = LEN_BUFFER - uart[id].index_read_tx;
 8001fac:	79fa      	ldrb	r2, [r7, #7]
 8001fae:	4928      	ldr	r1, [pc, #160]	; (8002050 <UART_Transmit+0x164>)
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	019b      	lsls	r3, r3, #6
 8001fb4:	4413      	add	r3, r2
 8001fb6:	011b      	lsls	r3, r3, #4
 8001fb8:	440b      	add	r3, r1
 8001fba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001fbe:	881b      	ldrh	r3, [r3, #0]
 8001fc0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001fc4:	81bb      	strh	r3, [r7, #12]
		len = MIN(len, nb_bytes_before_end_of_buffer);
 8001fc6:	88ba      	ldrh	r2, [r7, #4]
 8001fc8:	89bb      	ldrh	r3, [r7, #12]
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	bf28      	it	cs
 8001fce:	4613      	movcs	r3, r2
 8001fd0:	80bb      	strh	r3, [r7, #4]
		HAL_UART_Transmit_DMA(uart[id].huart, &uart[id].buffer_tx[uart[id].index_read_tx], len);
 8001fd2:	79fa      	ldrb	r2, [r7, #7]
 8001fd4:	491e      	ldr	r1, [pc, #120]	; (8002050 <UART_Transmit+0x164>)
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	019b      	lsls	r3, r3, #6
 8001fda:	4413      	add	r3, r2
 8001fdc:	011b      	lsls	r3, r3, #4
 8001fde:	440b      	add	r3, r1
 8001fe0:	6818      	ldr	r0, [r3, #0]
 8001fe2:	79fa      	ldrb	r2, [r7, #7]
 8001fe4:	79f9      	ldrb	r1, [r7, #7]
 8001fe6:	4c1a      	ldr	r4, [pc, #104]	; (8002050 <UART_Transmit+0x164>)
 8001fe8:	460b      	mov	r3, r1
 8001fea:	019b      	lsls	r3, r3, #6
 8001fec:	440b      	add	r3, r1
 8001fee:	011b      	lsls	r3, r3, #4
 8001ff0:	4423      	add	r3, r4
 8001ff2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	019b      	lsls	r3, r3, #6
 8001ffe:	4413      	add	r3, r2
 8002000:	011b      	lsls	r3, r3, #4
 8002002:	440b      	add	r3, r1
 8002004:	4a12      	ldr	r2, [pc, #72]	; (8002050 <UART_Transmit+0x164>)
 8002006:	4413      	add	r3, r2
 8002008:	3306      	adds	r3, #6
 800200a:	88ba      	ldrh	r2, [r7, #4]
 800200c:	4619      	mov	r1, r3
 800200e:	f004 fcf5 	bl	80069fc <HAL_UART_Transmit_DMA>
		uart[id].index_read_tx = (uart[id].index_read_tx + len) % LEN_BUFFER;
 8002012:	79fa      	ldrb	r2, [r7, #7]
 8002014:	490e      	ldr	r1, [pc, #56]	; (8002050 <UART_Transmit+0x164>)
 8002016:	4613      	mov	r3, r2
 8002018:	019b      	lsls	r3, r3, #6
 800201a:	4413      	add	r3, r2
 800201c:	011b      	lsls	r3, r3, #4
 800201e:	440b      	add	r3, r1
 8002020:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002024:	881a      	ldrh	r2, [r3, #0]
 8002026:	88bb      	ldrh	r3, [r7, #4]
 8002028:	4413      	add	r3, r2
 800202a:	b29b      	uxth	r3, r3
 800202c:	79fa      	ldrb	r2, [r7, #7]
 800202e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002032:	b298      	uxth	r0, r3
 8002034:	4906      	ldr	r1, [pc, #24]	; (8002050 <UART_Transmit+0x164>)
 8002036:	4613      	mov	r3, r2
 8002038:	019b      	lsls	r3, r3, #6
 800203a:	4413      	add	r3, r2
 800203c:	011b      	lsls	r3, r3, #4
 800203e:	440b      	add	r3, r1
 8002040:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002044:	4602      	mov	r2, r0
 8002046:	801a      	strh	r2, [r3, #0]
	}
}
 8002048:	bf00      	nop
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	bd90      	pop	{r4, r7, pc}
 8002050:	20000258 	.word	0x20000258

08002054 <get_nb_bytes_available>:
 * @brief Compute the numbers of byte available in the buffer
 * @param id Id of the uart
 * @return nb of bytes available
 */
uint16_t get_nb_bytes_available(uart_e id)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	71fb      	strb	r3, [r7, #7]
	uint16_t nb = 0 ;
 800205e:	2300      	movs	r3, #0
 8002060:	81fb      	strh	r3, [r7, #14]
	if(uart[id].index_write_rx > uart[id].index_read_rx)
 8002062:	79fa      	ldrb	r2, [r7, #7]
 8002064:	4932      	ldr	r1, [pc, #200]	; (8002130 <get_nb_bytes_available+0xdc>)
 8002066:	4613      	mov	r3, r2
 8002068:	019b      	lsls	r3, r3, #6
 800206a:	4413      	add	r3, r2
 800206c:	011b      	lsls	r3, r3, #4
 800206e:	440b      	add	r3, r1
 8002070:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	b299      	uxth	r1, r3
 8002078:	79fa      	ldrb	r2, [r7, #7]
 800207a:	482d      	ldr	r0, [pc, #180]	; (8002130 <get_nb_bytes_available+0xdc>)
 800207c:	4613      	mov	r3, r2
 800207e:	019b      	lsls	r3, r3, #6
 8002080:	4413      	add	r3, r2
 8002082:	011b      	lsls	r3, r3, #4
 8002084:	4403      	add	r3, r0
 8002086:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	4299      	cmp	r1, r3
 800208e:	d917      	bls.n	80020c0 <get_nb_bytes_available+0x6c>
	{
		nb = uart[id].index_write_rx - uart[id].index_read_rx ;
 8002090:	79fa      	ldrb	r2, [r7, #7]
 8002092:	4927      	ldr	r1, [pc, #156]	; (8002130 <get_nb_bytes_available+0xdc>)
 8002094:	4613      	mov	r3, r2
 8002096:	019b      	lsls	r3, r3, #6
 8002098:	4413      	add	r3, r2
 800209a:	011b      	lsls	r3, r3, #4
 800209c:	440b      	add	r3, r1
 800209e:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	b299      	uxth	r1, r3
 80020a6:	79fa      	ldrb	r2, [r7, #7]
 80020a8:	4821      	ldr	r0, [pc, #132]	; (8002130 <get_nb_bytes_available+0xdc>)
 80020aa:	4613      	mov	r3, r2
 80020ac:	019b      	lsls	r3, r3, #6
 80020ae:	4413      	add	r3, r2
 80020b0:	011b      	lsls	r3, r3, #4
 80020b2:	4403      	add	r3, r0
 80020b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80020b8:	881b      	ldrh	r3, [r3, #0]
 80020ba:	1acb      	subs	r3, r1, r3
 80020bc:	81fb      	strh	r3, [r7, #14]
 80020be:	e030      	b.n	8002122 <get_nb_bytes_available+0xce>
	}
	else if(uart[id].index_write_rx < uart[id].index_read_rx)
 80020c0:	79fa      	ldrb	r2, [r7, #7]
 80020c2:	491b      	ldr	r1, [pc, #108]	; (8002130 <get_nb_bytes_available+0xdc>)
 80020c4:	4613      	mov	r3, r2
 80020c6:	019b      	lsls	r3, r3, #6
 80020c8:	4413      	add	r3, r2
 80020ca:	011b      	lsls	r3, r3, #4
 80020cc:	440b      	add	r3, r1
 80020ce:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 80020d2:	881b      	ldrh	r3, [r3, #0]
 80020d4:	b299      	uxth	r1, r3
 80020d6:	79fa      	ldrb	r2, [r7, #7]
 80020d8:	4815      	ldr	r0, [pc, #84]	; (8002130 <get_nb_bytes_available+0xdc>)
 80020da:	4613      	mov	r3, r2
 80020dc:	019b      	lsls	r3, r3, #6
 80020de:	4413      	add	r3, r2
 80020e0:	011b      	lsls	r3, r3, #4
 80020e2:	4403      	add	r3, r0
 80020e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80020e8:	881b      	ldrh	r3, [r3, #0]
 80020ea:	4299      	cmp	r1, r3
 80020ec:	d219      	bcs.n	8002122 <get_nb_bytes_available+0xce>
	{
		nb = LEN_BUFFER - uart[id].index_read_rx + uart[id].index_write_rx ;
 80020ee:	79fa      	ldrb	r2, [r7, #7]
 80020f0:	490f      	ldr	r1, [pc, #60]	; (8002130 <get_nb_bytes_available+0xdc>)
 80020f2:	4613      	mov	r3, r2
 80020f4:	019b      	lsls	r3, r3, #6
 80020f6:	4413      	add	r3, r2
 80020f8:	011b      	lsls	r3, r3, #4
 80020fa:	440b      	add	r3, r1
 80020fc:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	b299      	uxth	r1, r3
 8002104:	79fa      	ldrb	r2, [r7, #7]
 8002106:	480a      	ldr	r0, [pc, #40]	; (8002130 <get_nb_bytes_available+0xdc>)
 8002108:	4613      	mov	r3, r2
 800210a:	019b      	lsls	r3, r3, #6
 800210c:	4413      	add	r3, r2
 800210e:	011b      	lsls	r3, r3, #4
 8002110:	4403      	add	r3, r0
 8002112:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	1acb      	subs	r3, r1, r3
 800211a:	b29b      	uxth	r3, r3
 800211c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002120:	81fb      	strh	r3, [r7, #14]
	}
	return nb;
 8002122:	89fb      	ldrh	r3, [r7, #14]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	20000258 	.word	0x20000258

08002134 <IBUS_Init>:
#define NB_BYTE_MAX_PER_PROCESS		50

static ibus_t ibus = { 0 };

void IBUS_Init(uint16_t * channels)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
	ibus.channels = channels;
 800213c:	4a04      	ldr	r2, [pc, #16]	; (8002150 <IBUS_Init+0x1c>)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6013      	str	r3, [r2, #0]
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	20000a78 	.word	0x20000a78

08002154 <IBUS_Process>:
/*
 * @brief Check for new data on the uart and update channels array
 * @return True when a new have been successfully read
 */
bool_e IBUS_Process(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
	uint16_t nb_to_read = UART_Availables(UART_IBUS);
 800215a:	2001      	movs	r0, #1
 800215c:	f7ff fe22 	bl	8001da4 <UART_Availables>
 8002160:	4603      	mov	r3, r0
 8002162:	81fb      	strh	r3, [r7, #14]
	if(!nb_to_read)
 8002164:	89fb      	ldrh	r3, [r7, #14]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <IBUS_Process+0x1a>
	{
		return FALSE;
 800216a:	2300      	movs	r3, #0
 800216c:	e092      	b.n	8002294 <IBUS_Process+0x140>
	}
	nb_to_read = MIN(nb_to_read, NB_BYTE_MAX_PER_PROCESS);
 800216e:	89fb      	ldrh	r3, [r7, #14]
 8002170:	2b32      	cmp	r3, #50	; 0x32
 8002172:	bf28      	it	cs
 8002174:	2332      	movcs	r3, #50	; 0x32
 8002176:	81fb      	strh	r3, [r7, #14]
	bool_e to_return = FALSE;
 8002178:	2300      	movs	r3, #0
 800217a:	737b      	strb	r3, [r7, #13]
	uint8_t c = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	70fb      	strb	r3, [r7, #3]
	while(nb_to_read)
 8002180:	e083      	b.n	800228a <IBUS_Process+0x136>
	{
		UART_Get(UART_IBUS, &c);
 8002182:	1cfb      	adds	r3, r7, #3
 8002184:	4619      	mov	r1, r3
 8002186:	2001      	movs	r0, #1
 8002188:	f7ff fe1a 	bl	8001dc0 <UART_Get>
		switch(ibus.state)
 800218c:	4b43      	ldr	r3, [pc, #268]	; (800229c <IBUS_Process+0x148>)
 800218e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002192:	2b02      	cmp	r3, #2
 8002194:	d027      	beq.n	80021e6 <IBUS_Process+0x92>
 8002196:	2b02      	cmp	r3, #2
 8002198:	dc74      	bgt.n	8002284 <IBUS_Process+0x130>
 800219a:	2b00      	cmp	r3, #0
 800219c:	d002      	beq.n	80021a4 <IBUS_Process+0x50>
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d00b      	beq.n	80021ba <IBUS_Process+0x66>
 80021a2:	e06f      	b.n	8002284 <IBUS_Process+0x130>
		{
			case STATE_IBUS_LENGTH :
				if(c == 0x20)
 80021a4:	78fb      	ldrb	r3, [r7, #3]
 80021a6:	2b20      	cmp	r3, #32
 80021a8:	d167      	bne.n	800227a <IBUS_Process+0x126>
				{
					ibus.state = STATE_IBUS_COMMAND ;
 80021aa:	4b3c      	ldr	r3, [pc, #240]	; (800229c <IBUS_Process+0x148>)
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
					ibus.buffer[0] = c ;
 80021b2:	78fa      	ldrb	r2, [r7, #3]
 80021b4:	4b39      	ldr	r3, [pc, #228]	; (800229c <IBUS_Process+0x148>)
 80021b6:	711a      	strb	r2, [r3, #4]
				}
				break;
 80021b8:	e05f      	b.n	800227a <IBUS_Process+0x126>
			case STATE_IBUS_COMMAND :
				if(c == 0x40)
 80021ba:	78fb      	ldrb	r3, [r7, #3]
 80021bc:	2b40      	cmp	r3, #64	; 0x40
 80021be:	d10a      	bne.n	80021d6 <IBUS_Process+0x82>
				{
					ibus.state = STATE_IBUS_CHANNELS ;
 80021c0:	4b36      	ldr	r3, [pc, #216]	; (800229c <IBUS_Process+0x148>)
 80021c2:	2202      	movs	r2, #2
 80021c4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
					ibus.buffer[1] = c ;
 80021c8:	78fa      	ldrb	r2, [r7, #3]
 80021ca:	4b34      	ldr	r3, [pc, #208]	; (800229c <IBUS_Process+0x148>)
 80021cc:	715a      	strb	r2, [r3, #5]
					ibus.compteur = 2 ;
 80021ce:	4b33      	ldr	r3, [pc, #204]	; (800229c <IBUS_Process+0x148>)
 80021d0:	2202      	movs	r2, #2
 80021d2:	849a      	strh	r2, [r3, #36]	; 0x24
				}
				else if(c != 0x20)
				{
					ibus.state = STATE_IBUS_LENGTH ;
				}
				break ;
 80021d4:	e053      	b.n	800227e <IBUS_Process+0x12a>
				else if(c != 0x20)
 80021d6:	78fb      	ldrb	r3, [r7, #3]
 80021d8:	2b20      	cmp	r3, #32
 80021da:	d050      	beq.n	800227e <IBUS_Process+0x12a>
					ibus.state = STATE_IBUS_LENGTH ;
 80021dc:	4b2f      	ldr	r3, [pc, #188]	; (800229c <IBUS_Process+0x148>)
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				break ;
 80021e4:	e04b      	b.n	800227e <IBUS_Process+0x12a>

			case STATE_IBUS_CHANNELS :
				ibus.buffer[ibus.compteur++] = c ;
 80021e6:	4b2d      	ldr	r3, [pc, #180]	; (800229c <IBUS_Process+0x148>)
 80021e8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80021ea:	1c5a      	adds	r2, r3, #1
 80021ec:	b291      	uxth	r1, r2
 80021ee:	4a2b      	ldr	r2, [pc, #172]	; (800229c <IBUS_Process+0x148>)
 80021f0:	8491      	strh	r1, [r2, #36]	; 0x24
 80021f2:	4619      	mov	r1, r3
 80021f4:	78fa      	ldrb	r2, [r7, #3]
 80021f6:	4b29      	ldr	r3, [pc, #164]	; (800229c <IBUS_Process+0x148>)
 80021f8:	440b      	add	r3, r1
 80021fa:	711a      	strb	r2, [r3, #4]
				if(ibus.compteur == 32)
 80021fc:	4b27      	ldr	r3, [pc, #156]	; (800229c <IBUS_Process+0x148>)
 80021fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002200:	2b20      	cmp	r3, #32
 8002202:	d13e      	bne.n	8002282 <IBUS_Process+0x12e>
				{
					uint32_t cs = (uint32_t)(ibus.buffer[30] | (ibus.buffer[31] << 8)) ;
 8002204:	4b25      	ldr	r3, [pc, #148]	; (800229c <IBUS_Process+0x148>)
 8002206:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800220a:	461a      	mov	r2, r3
 800220c:	4b23      	ldr	r3, [pc, #140]	; (800229c <IBUS_Process+0x148>)
 800220e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002212:	021b      	lsls	r3, r3, #8
 8002214:	4313      	orrs	r3, r2
 8002216:	607b      	str	r3, [r7, #4]
					if(0xFFFF - check_sum_f(ibus.buffer)== cs)
 8002218:	4821      	ldr	r0, [pc, #132]	; (80022a0 <IBUS_Process+0x14c>)
 800221a:	f000 f843 	bl	80022a4 <check_sum_f>
 800221e:	4603      	mov	r3, r0
 8002220:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002224:	33ff      	adds	r3, #255	; 0xff
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	429a      	cmp	r2, r3
 800222a:	d121      	bne.n	8002270 <IBUS_Process+0x11c>
					{
						for(uint32_t radio = 0; radio < 28; radio +=2)
 800222c:	2300      	movs	r3, #0
 800222e:	60bb      	str	r3, [r7, #8]
 8002230:	e019      	b.n	8002266 <IBUS_Process+0x112>
						{
							ibus.channels[radio / 2] = (int32_t)(ibus.buffer[radio+2] | (ibus.buffer[radio + 3] << 8));
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	3302      	adds	r3, #2
 8002236:	4a19      	ldr	r2, [pc, #100]	; (800229c <IBUS_Process+0x148>)
 8002238:	4413      	add	r3, r2
 800223a:	791b      	ldrb	r3, [r3, #4]
 800223c:	b21a      	sxth	r2, r3
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	3303      	adds	r3, #3
 8002242:	4916      	ldr	r1, [pc, #88]	; (800229c <IBUS_Process+0x148>)
 8002244:	440b      	add	r3, r1
 8002246:	791b      	ldrb	r3, [r3, #4]
 8002248:	021b      	lsls	r3, r3, #8
 800224a:	b21b      	sxth	r3, r3
 800224c:	4313      	orrs	r3, r2
 800224e:	b219      	sxth	r1, r3
 8002250:	4b12      	ldr	r3, [pc, #72]	; (800229c <IBUS_Process+0x148>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	f023 0301 	bic.w	r3, r3, #1
 800225a:	4413      	add	r3, r2
 800225c:	b28a      	uxth	r2, r1
 800225e:	801a      	strh	r2, [r3, #0]
						for(uint32_t radio = 0; radio < 28; radio +=2)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	3302      	adds	r3, #2
 8002264:	60bb      	str	r3, [r7, #8]
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	2b1b      	cmp	r3, #27
 800226a:	d9e2      	bls.n	8002232 <IBUS_Process+0xde>
						}
						to_return = TRUE;
 800226c:	2301      	movs	r3, #1
 800226e:	737b      	strb	r3, [r7, #13]
					}
					ibus.state = STATE_IBUS_LENGTH ;
 8002270:	4b0a      	ldr	r3, [pc, #40]	; (800229c <IBUS_Process+0x148>)
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				}
				break;
 8002278:	e003      	b.n	8002282 <IBUS_Process+0x12e>
				break;
 800227a:	bf00      	nop
 800227c:	e002      	b.n	8002284 <IBUS_Process+0x130>
				break ;
 800227e:	bf00      	nop
 8002280:	e000      	b.n	8002284 <IBUS_Process+0x130>
				break;
 8002282:	bf00      	nop
		}
		nb_to_read --;
 8002284:	89fb      	ldrh	r3, [r7, #14]
 8002286:	3b01      	subs	r3, #1
 8002288:	81fb      	strh	r3, [r7, #14]
	while(nb_to_read)
 800228a:	89fb      	ldrh	r3, [r7, #14]
 800228c:	2b00      	cmp	r3, #0
 800228e:	f47f af78 	bne.w	8002182 <IBUS_Process+0x2e>
	}

	return to_return;
 8002292:	7b7b      	ldrb	r3, [r7, #13]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20000a78 	.word	0x20000a78
 80022a0:	20000a7c 	.word	0x20000a7c

080022a4 <check_sum_f>:

uint32_t check_sum_f(uint8_t * buffer)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
	uint32_t sum = 0 ;
 80022ac:	2300      	movs	r3, #0
 80022ae:	60fb      	str	r3, [r7, #12]
	for(uint8_t b=0; b <30; b++)
 80022b0:	2300      	movs	r3, #0
 80022b2:	72fb      	strb	r3, [r7, #11]
 80022b4:	e00a      	b.n	80022cc <check_sum_f+0x28>
		sum += (uint32_t)buffer[b];
 80022b6:	7afb      	ldrb	r3, [r7, #11]
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	4413      	add	r3, r2
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	461a      	mov	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4413      	add	r3, r2
 80022c4:	60fb      	str	r3, [r7, #12]
	for(uint8_t b=0; b <30; b++)
 80022c6:	7afb      	ldrb	r3, [r7, #11]
 80022c8:	3301      	adds	r3, #1
 80022ca:	72fb      	strb	r3, [r7, #11]
 80022cc:	7afb      	ldrb	r3, [r7, #11]
 80022ce:	2b1d      	cmp	r3, #29
 80022d0:	d9f1      	bls.n	80022b6 <check_sum_f+0x12>
	return sum ;
 80022d2:	68fb      	ldr	r3, [r7, #12]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <RADIO_Process_Init>:
#define TIMEOUT_RADIO_MS	50

static radio_t radio = { 0 };

void RADIO_Process_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
#if USE_IBUS
	IBUS_Init(radio.channels);
 80022e4:	4802      	ldr	r0, [pc, #8]	; (80022f0 <RADIO_Process_Init+0x10>)
 80022e6:	f7ff ff25 	bl	8002134 <IBUS_Init>
#endif
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20000aa4 	.word	0x20000aa4

080022f4 <RADIO_Process_Main>:

void RADIO_Process_Main(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0

#if USE_IBUS
	if(IBUS_Process())
 80022f8:	f7ff ff2c 	bl	8002154 <IBUS_Process>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d009      	beq.n	8002316 <RADIO_Process_Main+0x22>
	{
		radio.next_update = HAL_GetTick() + TIMEOUT_RADIO_MS;
 8002302:	f001 f935 	bl	8003570 <HAL_GetTick>
 8002306:	4603      	mov	r3, r0
 8002308:	3332      	adds	r3, #50	; 0x32
 800230a:	4a09      	ldr	r2, [pc, #36]	; (8002330 <RADIO_Process_Main+0x3c>)
 800230c:	6213      	str	r3, [r2, #32]
		radio.state = radio_state_eOK;
 800230e:	4b08      	ldr	r3, [pc, #32]	; (8002330 <RADIO_Process_Main+0x3c>)
 8002310:	2200      	movs	r2, #0
 8002312:	771a      	strb	r2, [r3, #28]
	else if(HAL_GetTick() > radio.next_update)
	{
		radio.state = radio_state_eTIMEOUT;
	}
#endif
}
 8002314:	e009      	b.n	800232a <RADIO_Process_Main+0x36>
	else if(HAL_GetTick() > radio.next_update)
 8002316:	f001 f92b 	bl	8003570 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	4b04      	ldr	r3, [pc, #16]	; (8002330 <RADIO_Process_Main+0x3c>)
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	429a      	cmp	r2, r3
 8002322:	d902      	bls.n	800232a <RADIO_Process_Main+0x36>
		radio.state = radio_state_eTIMEOUT;
 8002324:	4b02      	ldr	r3, [pc, #8]	; (8002330 <RADIO_Process_Main+0x3c>)
 8002326:	2201      	movs	r2, #1
 8002328:	771a      	strb	r2, [r3, #28]
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000aa4 	.word	0x20000aa4

08002334 <RADIO_Get_Channel>:
{
	return radio.state;
}

uint16_t * RADIO_Get_Channel(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
	return radio.channels;
 8002338:	4b02      	ldr	r3, [pc, #8]	; (8002344 <RADIO_Get_Channel+0x10>)
}
 800233a:	4618      	mov	r0, r3
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	20000aa4 	.word	0x20000aa4

08002348 <MPU_Init>:
/*
 * @brief Wake up the MPU6000
 *		  Configure the Gyroscope and the Accelerometer
 */
void MPU_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af02      	add	r7, sp, #8
	/* Set the Gyroscope and Accelerometer data buffer */
	mpu.gyro_data = &mpu.data[8];
 800234e:	4b54      	ldr	r3, [pc, #336]	; (80024a0 <MPU_Init+0x158>)
 8002350:	4a54      	ldr	r2, [pc, #336]	; (80024a4 <MPU_Init+0x15c>)
 8002352:	611a      	str	r2, [r3, #16]
	mpu.acc_data = &mpu.data[0];
 8002354:	4b52      	ldr	r3, [pc, #328]	; (80024a0 <MPU_Init+0x158>)
 8002356:	4a54      	ldr	r2, [pc, #336]	; (80024a8 <MPU_Init+0x160>)
 8002358:	625a      	str	r2, [r3, #36]	; 0x24
	/* Disable I2C */
	SPI_Transmit(SPI_MPU, CS_MPU, mpu_disable_i2c, 2);
	HAL_Delay(150);
#else
	/* Power up the mpu an wait for it to start */
	HAL_GPIO_WritePin(MPU_POWER_GPIO_Port, MPU_POWER_Pin, GPIO_PIN_SET);
 800235a:	2201      	movs	r2, #1
 800235c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002360:	4852      	ldr	r0, [pc, #328]	; (80024ac <MPU_Init+0x164>)
 8002362:	f001 ffe5 	bl	8004330 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8002366:	20c8      	movs	r0, #200	; 0xc8
 8002368:	f001 f90e 	bl	8003588 <HAL_Delay>
	/* Wake up the mpu */
	uint8_t wakeup_data = 0x80;
 800236c:	2380      	movs	r3, #128	; 0x80
 800236e:	71fb      	strb	r3, [r7, #7]
	I2C_Mem_Write(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_PWR_MGMT_1, &wakeup_data, 1);
 8002370:	1dfb      	adds	r3, r7, #7
 8002372:	2201      	movs	r2, #1
 8002374:	9200      	str	r2, [sp, #0]
 8002376:	226b      	movs	r2, #107	; 0x6b
 8002378:	21d0      	movs	r1, #208	; 0xd0
 800237a:	2000      	movs	r0, #0
 800237c:	f7ff fb4a 	bl	8001a14 <I2C_Mem_Write>
	HAL_Delay(15);
 8002380:	200f      	movs	r0, #15
 8002382:	f001 f901 	bl	8003588 <HAL_Delay>
	/* Select the clock */
	uint8_t clock_select = 0x03;
 8002386:	2303      	movs	r3, #3
 8002388:	71bb      	strb	r3, [r7, #6]
	I2C_Mem_Write(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_PWR_MGMT_1, &clock_select, 1);
 800238a:	1dbb      	adds	r3, r7, #6
 800238c:	2201      	movs	r2, #1
 800238e:	9200      	str	r2, [sp, #0]
 8002390:	226b      	movs	r2, #107	; 0x6b
 8002392:	21d0      	movs	r1, #208	; 0xd0
 8002394:	2000      	movs	r0, #0
 8002396:	f7ff fb3d 	bl	8001a14 <I2C_Mem_Write>
	SPI_Transmit(SPI_MPU, CS_MPU, temp_write, 2);
	HAL_Delay(150);
#else
	/* Sensitivity configuration */
	uint8_t temp;
	I2C_Mem_Read(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_GYRO_CONFIG, &temp, 1);
 800239a:	1d7b      	adds	r3, r7, #5
 800239c:	2201      	movs	r2, #1
 800239e:	9200      	str	r2, [sp, #0]
 80023a0:	221b      	movs	r2, #27
 80023a2:	21d0      	movs	r1, #208	; 0xd0
 80023a4:	2000      	movs	r0, #0
 80023a6:	f7ff fb59 	bl	8001a5c <I2C_Mem_Read>
	temp = (temp & 0xE7) | (uint8_t)mpu.gyro_range << 3;
 80023aa:	797b      	ldrb	r3, [r7, #5]
 80023ac:	b25b      	sxtb	r3, r3
 80023ae:	f023 0318 	bic.w	r3, r3, #24
 80023b2:	b25a      	sxtb	r2, r3
 80023b4:	4b3a      	ldr	r3, [pc, #232]	; (80024a0 <MPU_Init+0x158>)
 80023b6:	7bdb      	ldrb	r3, [r3, #15]
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	b25b      	sxtb	r3, r3
 80023bc:	4313      	orrs	r3, r2
 80023be:	b25b      	sxtb	r3, r3
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	717b      	strb	r3, [r7, #5]
	I2C_Mem_Write(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_GYRO_CONFIG, &temp, 1);
 80023c4:	1d7b      	adds	r3, r7, #5
 80023c6:	2201      	movs	r2, #1
 80023c8:	9200      	str	r2, [sp, #0]
 80023ca:	221b      	movs	r2, #27
 80023cc:	21d0      	movs	r1, #208	; 0xd0
 80023ce:	2000      	movs	r0, #0
 80023d0:	f7ff fb20 	bl	8001a14 <I2C_Mem_Write>
#endif
	switch(mpu.gyro_range)
 80023d4:	4b32      	ldr	r3, [pc, #200]	; (80024a0 <MPU_Init+0x158>)
 80023d6:	7bdb      	ldrb	r3, [r3, #15]
 80023d8:	2b03      	cmp	r3, #3
 80023da:	d81b      	bhi.n	8002414 <MPU_Init+0xcc>
 80023dc:	a201      	add	r2, pc, #4	; (adr r2, 80023e4 <MPU_Init+0x9c>)
 80023de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e2:	bf00      	nop
 80023e4:	080023f5 	.word	0x080023f5
 80023e8:	080023fd 	.word	0x080023fd
 80023ec:	08002405 	.word	0x08002405
 80023f0:	0800240d 	.word	0x0800240d
	{
		case MPU_GYRO_250s :
			mpu.gyro_conversion = (float)1 / MPU6050_GYRO_SENS_250 ;
 80023f4:	4b2a      	ldr	r3, [pc, #168]	; (80024a0 <MPU_Init+0x158>)
 80023f6:	4a2e      	ldr	r2, [pc, #184]	; (80024b0 <MPU_Init+0x168>)
 80023f8:	615a      	str	r2, [r3, #20]
			break;
 80023fa:	e00b      	b.n	8002414 <MPU_Init+0xcc>
		case MPU_GYRO_500s :
			mpu.gyro_conversion = (float)1 / MPU6050_GYRO_SENS_500 ;
 80023fc:	4b28      	ldr	r3, [pc, #160]	; (80024a0 <MPU_Init+0x158>)
 80023fe:	4a2d      	ldr	r2, [pc, #180]	; (80024b4 <MPU_Init+0x16c>)
 8002400:	615a      	str	r2, [r3, #20]
			break;
 8002402:	e007      	b.n	8002414 <MPU_Init+0xcc>
		case MPU_GYRO_1000s :
			mpu.gyro_conversion = (float)1 / MPU6050_GYRO_SENS_1000 ;
 8002404:	4b26      	ldr	r3, [pc, #152]	; (80024a0 <MPU_Init+0x158>)
 8002406:	4a2c      	ldr	r2, [pc, #176]	; (80024b8 <MPU_Init+0x170>)
 8002408:	615a      	str	r2, [r3, #20]
			break;
 800240a:	e003      	b.n	8002414 <MPU_Init+0xcc>
		case MPU_GYRO_2000s :
			mpu.gyro_conversion = (float)1 / MPU6050_GYRO_SENS_2000 ;
 800240c:	4b24      	ldr	r3, [pc, #144]	; (80024a0 <MPU_Init+0x158>)
 800240e:	4a2b      	ldr	r2, [pc, #172]	; (80024bc <MPU_Init+0x174>)
 8002410:	615a      	str	r2, [r3, #20]
			break;
 8002412:	bf00      	nop
	temp_write[1] = (temp_read[1] & 0xE7) | (uint8_t)mpu.acc_range << 3;
	SPI_Transmit(SPI_MPU, CS_MPU, temp_write, 2);
	HAL_Delay(150);
#else
	/* Sensitivity configuration */
	I2C_Mem_Read(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_ACCEL_CONFIG, &temp, 1);
 8002414:	1d7b      	adds	r3, r7, #5
 8002416:	2201      	movs	r2, #1
 8002418:	9200      	str	r2, [sp, #0]
 800241a:	221c      	movs	r2, #28
 800241c:	21d0      	movs	r1, #208	; 0xd0
 800241e:	2000      	movs	r0, #0
 8002420:	f7ff fb1c 	bl	8001a5c <I2C_Mem_Read>
	temp = (temp & 0xE7) | (uint8_t)mpu.acc_range << 3;
 8002424:	797b      	ldrb	r3, [r7, #5]
 8002426:	b25b      	sxtb	r3, r3
 8002428:	f023 0318 	bic.w	r3, r3, #24
 800242c:	b25a      	sxtb	r2, r3
 800242e:	4b1c      	ldr	r3, [pc, #112]	; (80024a0 <MPU_Init+0x158>)
 8002430:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	b25b      	sxtb	r3, r3
 8002438:	4313      	orrs	r3, r2
 800243a:	b25b      	sxtb	r3, r3
 800243c:	b2db      	uxtb	r3, r3
 800243e:	717b      	strb	r3, [r7, #5]
	I2C_Mem_Write(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_ACCEL_CONFIG, &temp, 1);
 8002440:	1d7b      	adds	r3, r7, #5
 8002442:	2201      	movs	r2, #1
 8002444:	9200      	str	r2, [sp, #0]
 8002446:	221c      	movs	r2, #28
 8002448:	21d0      	movs	r1, #208	; 0xd0
 800244a:	2000      	movs	r0, #0
 800244c:	f7ff fae2 	bl	8001a14 <I2C_Mem_Write>
#endif
	switch(mpu.acc_range)
 8002450:	4b13      	ldr	r3, [pc, #76]	; (80024a0 <MPU_Init+0x158>)
 8002452:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002456:	2b03      	cmp	r3, #3
 8002458:	d81e      	bhi.n	8002498 <MPU_Init+0x150>
 800245a:	a201      	add	r2, pc, #4	; (adr r2, 8002460 <MPU_Init+0x118>)
 800245c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002460:	08002471 	.word	0x08002471
 8002464:	0800247b 	.word	0x0800247b
 8002468:	08002485 	.word	0x08002485
 800246c:	0800248f 	.word	0x0800248f
	{
		case MPU_ACC_2G :
			mpu.acc_conversion = (float)1 / MPU6050_ACCE_SENS_2 ;
 8002470:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <MPU_Init+0x158>)
 8002472:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8002476:	62da      	str	r2, [r3, #44]	; 0x2c
			break;
 8002478:	e00e      	b.n	8002498 <MPU_Init+0x150>
		case MPU_ACC_4G :
			mpu.acc_conversion = (float)1 / MPU6050_ACCE_SENS_4 ;
 800247a:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <MPU_Init+0x158>)
 800247c:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8002480:	62da      	str	r2, [r3, #44]	; 0x2c
			break;
 8002482:	e009      	b.n	8002498 <MPU_Init+0x150>
		case MPU_ACC_8G :
			mpu.acc_conversion = (float)1 / MPU6050_ACCE_SENS_8 ;
 8002484:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <MPU_Init+0x158>)
 8002486:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800248a:	62da      	str	r2, [r3, #44]	; 0x2c
			break;
 800248c:	e004      	b.n	8002498 <MPU_Init+0x150>
		case MPU_ACC_16G :
			mpu.acc_conversion = (float)1 / MPU6050_ACCE_SENS_16 ;
 800248e:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <MPU_Init+0x158>)
 8002490:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8002494:	62da      	str	r2, [r3, #44]	; 0x2c
			break;
 8002496:	bf00      	nop
	}
}
 8002498:	bf00      	nop
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	200000a4 	.word	0x200000a4
 80024a4:	200000ad 	.word	0x200000ad
 80024a8:	200000a5 	.word	0x200000a5
 80024ac:	40020800 	.word	0x40020800
 80024b0:	3bfa232d 	.word	0x3bfa232d
 80024b4:	3c7a232d 	.word	0x3c7a232d
 80024b8:	3cf9c190 	.word	0x3cf9c190
 80024bc:	3d79c190 	.word	0x3d79c190

080024c0 <MPU_Get_Gyro_Ptr>:
float * MPU_Get_Gyro_Ptr(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
	return mpu.gyro;
 80024c4:	4b02      	ldr	r3, [pc, #8]	; (80024d0 <MPU_Get_Gyro_Ptr+0x10>)
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	200000bc 	.word	0x200000bc

080024d4 <MPU_Get_Acc_Ptr>:

float * MPU_Get_Acc_Ptr(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
	return mpu.acc;
 80024d8:	4b02      	ldr	r3, [pc, #8]	; (80024e4 <MPU_Get_Acc_Ptr+0x10>)
}
 80024da:	4618      	mov	r0, r3
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	200000d4 	.word	0x200000d4

080024e8 <MPU_Read_All>:

void MPU_Read_All(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af02      	add	r7, sp, #8
	if(mpu.state == mpu_state_eERROR)
 80024ee:	4b0d      	ldr	r3, [pc, #52]	; (8002524 <MPU_Read_All+0x3c>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d013      	beq.n	800251e <MPU_Read_All+0x36>
	}
#if USE_SPI
	uint8_t registers [14] = {MPU6050_ACCEL_XOUT_H | MPU6050_READ};
	SPI_Transmit_Receive(SPI_MPU, CS_MPU, registers, mpu.data, 14);
#else
	if(I2C_Mem_Read(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_ACCEL_XOUT_H, mpu.data, 14))
 80024f6:	230e      	movs	r3, #14
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <MPU_Read_All+0x40>)
 80024fc:	223b      	movs	r2, #59	; 0x3b
 80024fe:	21d0      	movs	r1, #208	; 0xd0
 8002500:	2000      	movs	r0, #0
 8002502:	f7ff faab 	bl	8001a5c <I2C_Mem_Read>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <MPU_Read_All+0x2c>
	{
		mpu.state = mpu_state_eERROR;
 800250c:	4b05      	ldr	r3, [pc, #20]	; (8002524 <MPU_Read_All+0x3c>)
 800250e:	2201      	movs	r2, #1
 8002510:	701a      	strb	r2, [r3, #0]
		return;
 8002512:	e005      	b.n	8002520 <MPU_Read_All+0x38>
	}
#endif
	MPU_Convert_Acc_Data();
 8002514:	f000 f80a 	bl	800252c <MPU_Convert_Acc_Data>
	MPU_Convert_Gyro_Data();
 8002518:	f000 f85c 	bl	80025d4 <MPU_Convert_Gyro_Data>
 800251c:	e000      	b.n	8002520 <MPU_Read_All+0x38>
		return;
 800251e:	bf00      	nop
}
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	200000a4 	.word	0x200000a4
 8002528:	200000a5 	.word	0x200000a5

0800252c <MPU_Convert_Acc_Data>:

/*
 * @brief Convert acc bytes to measurement
 */
void MPU_Convert_Acc_Data(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
	mpu.acc[0] = (int16_t)(mpu.acc_data[1] | (mpu.acc_data[0] << 8)) * mpu.acc_conversion;
 8002530:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <MPU_Convert_Acc_Data+0xa4>)
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	3301      	adds	r3, #1
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	b21a      	sxth	r2, r3
 800253a:	4b25      	ldr	r3, [pc, #148]	; (80025d0 <MPU_Convert_Acc_Data+0xa4>)
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	021b      	lsls	r3, r3, #8
 8002542:	b21b      	sxth	r3, r3
 8002544:	4313      	orrs	r3, r2
 8002546:	b21b      	sxth	r3, r3
 8002548:	ee07 3a90 	vmov	s15, r3
 800254c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002550:	4b1f      	ldr	r3, [pc, #124]	; (80025d0 <MPU_Convert_Acc_Data+0xa4>)
 8002552:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800255a:	4b1d      	ldr	r3, [pc, #116]	; (80025d0 <MPU_Convert_Acc_Data+0xa4>)
 800255c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	mpu.acc[1] = (int16_t)(mpu.acc_data[3] | (mpu.acc_data[2] << 8)) * mpu.acc_conversion;
 8002560:	4b1b      	ldr	r3, [pc, #108]	; (80025d0 <MPU_Convert_Acc_Data+0xa4>)
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	3303      	adds	r3, #3
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	b21a      	sxth	r2, r3
 800256a:	4b19      	ldr	r3, [pc, #100]	; (80025d0 <MPU_Convert_Acc_Data+0xa4>)
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	3302      	adds	r3, #2
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	021b      	lsls	r3, r3, #8
 8002574:	b21b      	sxth	r3, r3
 8002576:	4313      	orrs	r3, r2
 8002578:	b21b      	sxth	r3, r3
 800257a:	ee07 3a90 	vmov	s15, r3
 800257e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002582:	4b13      	ldr	r3, [pc, #76]	; (80025d0 <MPU_Convert_Acc_Data+0xa4>)
 8002584:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800258c:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <MPU_Convert_Acc_Data+0xa4>)
 800258e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	mpu.acc[2] = (int16_t)(mpu.acc_data[5] | (mpu.acc_data[4] << 8)) * mpu.acc_conversion;
 8002592:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <MPU_Convert_Acc_Data+0xa4>)
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002596:	3305      	adds	r3, #5
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	b21a      	sxth	r2, r3
 800259c:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <MPU_Convert_Acc_Data+0xa4>)
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	3304      	adds	r3, #4
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	021b      	lsls	r3, r3, #8
 80025a6:	b21b      	sxth	r3, r3
 80025a8:	4313      	orrs	r3, r2
 80025aa:	b21b      	sxth	r3, r3
 80025ac:	ee07 3a90 	vmov	s15, r3
 80025b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025b4:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <MPU_Convert_Acc_Data+0xa4>)
 80025b6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80025ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025be:	4b04      	ldr	r3, [pc, #16]	; (80025d0 <MPU_Convert_Acc_Data+0xa4>)
 80025c0:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
}
 80025c4:	bf00      	nop
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	200000a4 	.word	0x200000a4

080025d4 <MPU_Convert_Gyro_Data>:

/*
 * @brief Convert gyro bytes to measurement
 */
void MPU_Convert_Gyro_Data(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
	mpu.gyro[0] = (int16_t)(mpu.gyro_data[1] | (mpu.gyro_data[0] << 8)) * mpu.gyro_conversion;
 80025d8:	4b27      	ldr	r3, [pc, #156]	; (8002678 <MPU_Convert_Gyro_Data+0xa4>)
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	3301      	adds	r3, #1
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	b21a      	sxth	r2, r3
 80025e2:	4b25      	ldr	r3, [pc, #148]	; (8002678 <MPU_Convert_Gyro_Data+0xa4>)
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	021b      	lsls	r3, r3, #8
 80025ea:	b21b      	sxth	r3, r3
 80025ec:	4313      	orrs	r3, r2
 80025ee:	b21b      	sxth	r3, r3
 80025f0:	ee07 3a90 	vmov	s15, r3
 80025f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025f8:	4b1f      	ldr	r3, [pc, #124]	; (8002678 <MPU_Convert_Gyro_Data+0xa4>)
 80025fa:	edd3 7a05 	vldr	s15, [r3, #20]
 80025fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002602:	4b1d      	ldr	r3, [pc, #116]	; (8002678 <MPU_Convert_Gyro_Data+0xa4>)
 8002604:	edc3 7a06 	vstr	s15, [r3, #24]
	mpu.gyro[1] = (int16_t)(mpu.gyro_data[3] | (mpu.gyro_data[2] << 8)) * mpu.gyro_conversion;
 8002608:	4b1b      	ldr	r3, [pc, #108]	; (8002678 <MPU_Convert_Gyro_Data+0xa4>)
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	3303      	adds	r3, #3
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	b21a      	sxth	r2, r3
 8002612:	4b19      	ldr	r3, [pc, #100]	; (8002678 <MPU_Convert_Gyro_Data+0xa4>)
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	3302      	adds	r3, #2
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	021b      	lsls	r3, r3, #8
 800261c:	b21b      	sxth	r3, r3
 800261e:	4313      	orrs	r3, r2
 8002620:	b21b      	sxth	r3, r3
 8002622:	ee07 3a90 	vmov	s15, r3
 8002626:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800262a:	4b13      	ldr	r3, [pc, #76]	; (8002678 <MPU_Convert_Gyro_Data+0xa4>)
 800262c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002630:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002634:	4b10      	ldr	r3, [pc, #64]	; (8002678 <MPU_Convert_Gyro_Data+0xa4>)
 8002636:	edc3 7a07 	vstr	s15, [r3, #28]
	mpu.gyro[2] = (int16_t)(mpu.gyro_data[5] | (mpu.gyro_data[4] << 8)) * mpu.gyro_conversion;
 800263a:	4b0f      	ldr	r3, [pc, #60]	; (8002678 <MPU_Convert_Gyro_Data+0xa4>)
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	3305      	adds	r3, #5
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	b21a      	sxth	r2, r3
 8002644:	4b0c      	ldr	r3, [pc, #48]	; (8002678 <MPU_Convert_Gyro_Data+0xa4>)
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	3304      	adds	r3, #4
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	021b      	lsls	r3, r3, #8
 800264e:	b21b      	sxth	r3, r3
 8002650:	4313      	orrs	r3, r2
 8002652:	b21b      	sxth	r3, r3
 8002654:	ee07 3a90 	vmov	s15, r3
 8002658:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800265c:	4b06      	ldr	r3, [pc, #24]	; (8002678 <MPU_Convert_Gyro_Data+0xa4>)
 800265e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002666:	4b04      	ldr	r3, [pc, #16]	; (8002678 <MPU_Convert_Gyro_Data+0xa4>)
 8002668:	edc3 7a08 	vstr	s15, [r3, #32]
}
 800266c:	bf00      	nop
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	200000a4 	.word	0x200000a4

0800267c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	607b      	str	r3, [r7, #4]
 8002686:	4b27      	ldr	r3, [pc, #156]	; (8002724 <MX_DMA_Init+0xa8>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	4a26      	ldr	r2, [pc, #152]	; (8002724 <MX_DMA_Init+0xa8>)
 800268c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002690:	6313      	str	r3, [r2, #48]	; 0x30
 8002692:	4b24      	ldr	r3, [pc, #144]	; (8002724 <MX_DMA_Init+0xa8>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800269a:	607b      	str	r3, [r7, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	603b      	str	r3, [r7, #0]
 80026a2:	4b20      	ldr	r3, [pc, #128]	; (8002724 <MX_DMA_Init+0xa8>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	4a1f      	ldr	r2, [pc, #124]	; (8002724 <MX_DMA_Init+0xa8>)
 80026a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026ac:	6313      	str	r3, [r2, #48]	; 0x30
 80026ae:	4b1d      	ldr	r3, [pc, #116]	; (8002724 <MX_DMA_Init+0xa8>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026b6:	603b      	str	r3, [r7, #0]
 80026b8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80026ba:	2200      	movs	r2, #0
 80026bc:	2100      	movs	r1, #0
 80026be:	200b      	movs	r0, #11
 80026c0:	f001 f861 	bl	8003786 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80026c4:	200b      	movs	r0, #11
 80026c6:	f001 f87a 	bl	80037be <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80026ca:	2200      	movs	r2, #0
 80026cc:	2100      	movs	r1, #0
 80026ce:	200d      	movs	r0, #13
 80026d0:	f001 f859 	bl	8003786 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80026d4:	200d      	movs	r0, #13
 80026d6:	f001 f872 	bl	80037be <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80026da:	2200      	movs	r2, #0
 80026dc:	2100      	movs	r1, #0
 80026de:	200f      	movs	r0, #15
 80026e0:	f001 f851 	bl	8003786 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80026e4:	200f      	movs	r0, #15
 80026e6:	f001 f86a 	bl	80037be <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80026ea:	2200      	movs	r2, #0
 80026ec:	2100      	movs	r1, #0
 80026ee:	2011      	movs	r0, #17
 80026f0:	f001 f849 	bl	8003786 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80026f4:	2011      	movs	r0, #17
 80026f6:	f001 f862 	bl	80037be <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80026fa:	2200      	movs	r2, #0
 80026fc:	2100      	movs	r1, #0
 80026fe:	203a      	movs	r0, #58	; 0x3a
 8002700:	f001 f841 	bl	8003786 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002704:	203a      	movs	r0, #58	; 0x3a
 8002706:	f001 f85a 	bl	80037be <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800270a:	2200      	movs	r2, #0
 800270c:	2100      	movs	r1, #0
 800270e:	2046      	movs	r0, #70	; 0x46
 8002710:	f001 f839 	bl	8003786 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002714:	2046      	movs	r0, #70	; 0x46
 8002716:	f001 f852 	bl	80037be <HAL_NVIC_EnableIRQ>

}
 800271a:	bf00      	nop
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40023800 	.word	0x40023800

08002728 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b088      	sub	sp, #32
 800272c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800272e:	f107 030c 	add.w	r3, r7, #12
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	605a      	str	r2, [r3, #4]
 8002738:	609a      	str	r2, [r3, #8]
 800273a:	60da      	str	r2, [r3, #12]
 800273c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	4b20      	ldr	r3, [pc, #128]	; (80027c4 <MX_GPIO_Init+0x9c>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	4a1f      	ldr	r2, [pc, #124]	; (80027c4 <MX_GPIO_Init+0x9c>)
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	6313      	str	r3, [r2, #48]	; 0x30
 800274e:	4b1d      	ldr	r3, [pc, #116]	; (80027c4 <MX_GPIO_Init+0x9c>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	60bb      	str	r3, [r7, #8]
 8002758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	607b      	str	r3, [r7, #4]
 800275e:	4b19      	ldr	r3, [pc, #100]	; (80027c4 <MX_GPIO_Init+0x9c>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	4a18      	ldr	r2, [pc, #96]	; (80027c4 <MX_GPIO_Init+0x9c>)
 8002764:	f043 0302 	orr.w	r3, r3, #2
 8002768:	6313      	str	r3, [r2, #48]	; 0x30
 800276a:	4b16      	ldr	r3, [pc, #88]	; (80027c4 <MX_GPIO_Init+0x9c>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	607b      	str	r3, [r7, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	603b      	str	r3, [r7, #0]
 800277a:	4b12      	ldr	r3, [pc, #72]	; (80027c4 <MX_GPIO_Init+0x9c>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	4a11      	ldr	r2, [pc, #68]	; (80027c4 <MX_GPIO_Init+0x9c>)
 8002780:	f043 0304 	orr.w	r3, r3, #4
 8002784:	6313      	str	r3, [r2, #48]	; 0x30
 8002786:	4b0f      	ldr	r3, [pc, #60]	; (80027c4 <MX_GPIO_Init+0x9c>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	f003 0304 	and.w	r3, r3, #4
 800278e:	603b      	str	r3, [r7, #0]
 8002790:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MPU_POWER_GPIO_Port, MPU_POWER_Pin, GPIO_PIN_RESET);
 8002792:	2200      	movs	r2, #0
 8002794:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002798:	480b      	ldr	r0, [pc, #44]	; (80027c8 <MX_GPIO_Init+0xa0>)
 800279a:	f001 fdc9 	bl	8004330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MPU_POWER_Pin;
 800279e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027a4:	2301      	movs	r3, #1
 80027a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ac:	2300      	movs	r3, #0
 80027ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MPU_POWER_GPIO_Port, &GPIO_InitStruct);
 80027b0:	f107 030c 	add.w	r3, r7, #12
 80027b4:	4619      	mov	r1, r3
 80027b6:	4804      	ldr	r0, [pc, #16]	; (80027c8 <MX_GPIO_Init+0xa0>)
 80027b8:	f001 fc1e 	bl	8003ff8 <HAL_GPIO_Init>

}
 80027bc:	bf00      	nop
 80027be:	3720      	adds	r7, #32
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40023800 	.word	0x40023800
 80027c8:	40020800 	.word	0x40020800

080027cc <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80027d0:	4b12      	ldr	r3, [pc, #72]	; (800281c <MX_I2C1_Init+0x50>)
 80027d2:	4a13      	ldr	r2, [pc, #76]	; (8002820 <MX_I2C1_Init+0x54>)
 80027d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80027d6:	4b11      	ldr	r3, [pc, #68]	; (800281c <MX_I2C1_Init+0x50>)
 80027d8:	4a12      	ldr	r2, [pc, #72]	; (8002824 <MX_I2C1_Init+0x58>)
 80027da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80027dc:	4b0f      	ldr	r3, [pc, #60]	; (800281c <MX_I2C1_Init+0x50>)
 80027de:	2200      	movs	r2, #0
 80027e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80027e2:	4b0e      	ldr	r3, [pc, #56]	; (800281c <MX_I2C1_Init+0x50>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027e8:	4b0c      	ldr	r3, [pc, #48]	; (800281c <MX_I2C1_Init+0x50>)
 80027ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027f0:	4b0a      	ldr	r3, [pc, #40]	; (800281c <MX_I2C1_Init+0x50>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80027f6:	4b09      	ldr	r3, [pc, #36]	; (800281c <MX_I2C1_Init+0x50>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027fc:	4b07      	ldr	r3, [pc, #28]	; (800281c <MX_I2C1_Init+0x50>)
 80027fe:	2200      	movs	r2, #0
 8002800:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002802:	4b06      	ldr	r3, [pc, #24]	; (800281c <MX_I2C1_Init+0x50>)
 8002804:	2200      	movs	r2, #0
 8002806:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002808:	4804      	ldr	r0, [pc, #16]	; (800281c <MX_I2C1_Init+0x50>)
 800280a:	f001 fdab 	bl	8004364 <HAL_I2C_Init>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002814:	f000 f99a 	bl	8002b4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002818:	bf00      	nop
 800281a:	bd80      	pop	{r7, pc}
 800281c:	20000d5c 	.word	0x20000d5c
 8002820:	40005400 	.word	0x40005400
 8002824:	00061a80 	.word	0x00061a80

08002828 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08a      	sub	sp, #40	; 0x28
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002830:	f107 0314 	add.w	r3, r7, #20
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	605a      	str	r2, [r3, #4]
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	60da      	str	r2, [r3, #12]
 800283e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a48      	ldr	r2, [pc, #288]	; (8002968 <HAL_I2C_MspInit+0x140>)
 8002846:	4293      	cmp	r3, r2
 8002848:	f040 8089 	bne.w	800295e <HAL_I2C_MspInit+0x136>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800284c:	2300      	movs	r3, #0
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	4b46      	ldr	r3, [pc, #280]	; (800296c <HAL_I2C_MspInit+0x144>)
 8002852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002854:	4a45      	ldr	r2, [pc, #276]	; (800296c <HAL_I2C_MspInit+0x144>)
 8002856:	f043 0302 	orr.w	r3, r3, #2
 800285a:	6313      	str	r3, [r2, #48]	; 0x30
 800285c:	4b43      	ldr	r3, [pc, #268]	; (800296c <HAL_I2C_MspInit+0x144>)
 800285e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	613b      	str	r3, [r7, #16]
 8002866:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002868:	f44f 7340 	mov.w	r3, #768	; 0x300
 800286c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800286e:	2312      	movs	r3, #18
 8002870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002872:	2300      	movs	r3, #0
 8002874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002876:	2303      	movs	r3, #3
 8002878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800287a:	2304      	movs	r3, #4
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800287e:	f107 0314 	add.w	r3, r7, #20
 8002882:	4619      	mov	r1, r3
 8002884:	483a      	ldr	r0, [pc, #232]	; (8002970 <HAL_I2C_MspInit+0x148>)
 8002886:	f001 fbb7 	bl	8003ff8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	4b37      	ldr	r3, [pc, #220]	; (800296c <HAL_I2C_MspInit+0x144>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	4a36      	ldr	r2, [pc, #216]	; (800296c <HAL_I2C_MspInit+0x144>)
 8002894:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002898:	6413      	str	r3, [r2, #64]	; 0x40
 800289a:	4b34      	ldr	r3, [pc, #208]	; (800296c <HAL_I2C_MspInit+0x144>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80028a6:	4b33      	ldr	r3, [pc, #204]	; (8002974 <HAL_I2C_MspInit+0x14c>)
 80028a8:	4a33      	ldr	r2, [pc, #204]	; (8002978 <HAL_I2C_MspInit+0x150>)
 80028aa:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80028ac:	4b31      	ldr	r3, [pc, #196]	; (8002974 <HAL_I2C_MspInit+0x14c>)
 80028ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028b2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028b4:	4b2f      	ldr	r3, [pc, #188]	; (8002974 <HAL_I2C_MspInit+0x14c>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028ba:	4b2e      	ldr	r3, [pc, #184]	; (8002974 <HAL_I2C_MspInit+0x14c>)
 80028bc:	2200      	movs	r2, #0
 80028be:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028c0:	4b2c      	ldr	r3, [pc, #176]	; (8002974 <HAL_I2C_MspInit+0x14c>)
 80028c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028c6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028c8:	4b2a      	ldr	r3, [pc, #168]	; (8002974 <HAL_I2C_MspInit+0x14c>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028ce:	4b29      	ldr	r3, [pc, #164]	; (8002974 <HAL_I2C_MspInit+0x14c>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80028d4:	4b27      	ldr	r3, [pc, #156]	; (8002974 <HAL_I2C_MspInit+0x14c>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028da:	4b26      	ldr	r3, [pc, #152]	; (8002974 <HAL_I2C_MspInit+0x14c>)
 80028dc:	2200      	movs	r2, #0
 80028de:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028e0:	4b24      	ldr	r3, [pc, #144]	; (8002974 <HAL_I2C_MspInit+0x14c>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80028e6:	4823      	ldr	r0, [pc, #140]	; (8002974 <HAL_I2C_MspInit+0x14c>)
 80028e8:	f000 ff84 	bl	80037f4 <HAL_DMA_Init>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 80028f2:	f000 f92b 	bl	8002b4c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a1e      	ldr	r2, [pc, #120]	; (8002974 <HAL_I2C_MspInit+0x14c>)
 80028fa:	639a      	str	r2, [r3, #56]	; 0x38
 80028fc:	4a1d      	ldr	r2, [pc, #116]	; (8002974 <HAL_I2C_MspInit+0x14c>)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8002902:	4b1e      	ldr	r3, [pc, #120]	; (800297c <HAL_I2C_MspInit+0x154>)
 8002904:	4a1e      	ldr	r2, [pc, #120]	; (8002980 <HAL_I2C_MspInit+0x158>)
 8002906:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8002908:	4b1c      	ldr	r3, [pc, #112]	; (800297c <HAL_I2C_MspInit+0x154>)
 800290a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800290e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002910:	4b1a      	ldr	r3, [pc, #104]	; (800297c <HAL_I2C_MspInit+0x154>)
 8002912:	2240      	movs	r2, #64	; 0x40
 8002914:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002916:	4b19      	ldr	r3, [pc, #100]	; (800297c <HAL_I2C_MspInit+0x154>)
 8002918:	2200      	movs	r2, #0
 800291a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800291c:	4b17      	ldr	r3, [pc, #92]	; (800297c <HAL_I2C_MspInit+0x154>)
 800291e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002922:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002924:	4b15      	ldr	r3, [pc, #84]	; (800297c <HAL_I2C_MspInit+0x154>)
 8002926:	2200      	movs	r2, #0
 8002928:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800292a:	4b14      	ldr	r3, [pc, #80]	; (800297c <HAL_I2C_MspInit+0x154>)
 800292c:	2200      	movs	r2, #0
 800292e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002930:	4b12      	ldr	r3, [pc, #72]	; (800297c <HAL_I2C_MspInit+0x154>)
 8002932:	2200      	movs	r2, #0
 8002934:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002936:	4b11      	ldr	r3, [pc, #68]	; (800297c <HAL_I2C_MspInit+0x154>)
 8002938:	2200      	movs	r2, #0
 800293a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800293c:	4b0f      	ldr	r3, [pc, #60]	; (800297c <HAL_I2C_MspInit+0x154>)
 800293e:	2200      	movs	r2, #0
 8002940:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002942:	480e      	ldr	r0, [pc, #56]	; (800297c <HAL_I2C_MspInit+0x154>)
 8002944:	f000 ff56 	bl	80037f4 <HAL_DMA_Init>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 800294e:	f000 f8fd 	bl	8002b4c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a09      	ldr	r2, [pc, #36]	; (800297c <HAL_I2C_MspInit+0x154>)
 8002956:	635a      	str	r2, [r3, #52]	; 0x34
 8002958:	4a08      	ldr	r2, [pc, #32]	; (800297c <HAL_I2C_MspInit+0x154>)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800295e:	bf00      	nop
 8002960:	3728      	adds	r7, #40	; 0x28
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40005400 	.word	0x40005400
 800296c:	40023800 	.word	0x40023800
 8002970:	40020400 	.word	0x40020400
 8002974:	20000db0 	.word	0x20000db0
 8002978:	40026010 	.word	0x40026010
 800297c:	20000cfc 	.word	0x20000cfc
 8002980:	400260a0 	.word	0x400260a0

08002984 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002988:	f000 fd8c 	bl	80034a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800298c:	f000 f874 	bl	8002a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002990:	f7ff feca 	bl	8002728 <MX_GPIO_Init>
  MX_DMA_Init();
 8002994:	f7ff fe72 	bl	800267c <MX_DMA_Init>
  MX_UART4_Init();
 8002998:	f000 fac8 	bl	8002f2c <MX_UART4_Init>
  MX_USART1_UART_Init();
 800299c:	f000 faf0 	bl	8002f80 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80029a0:	f000 f9b0 	bl	8002d04 <MX_TIM3_Init>
  MX_I2C1_Init();
 80029a4:	f7ff ff12 	bl	80027cc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* Wait for everyone to start */
  HAL_Delay(15);
 80029a8:	200f      	movs	r0, #15
 80029aa:	f000 fded 	bl	8003588 <HAL_Delay>
  /* Peripherals initialization */
  UART_Init();
 80029ae:	f7ff fa51 	bl	8001e54 <UART_Init>
  /* Task definition */
  TASK_MANAGER_Add_Task("Gyro", 					MPU_Init, 						NULL, 								MPU_Read_All);
 80029b2:	4b1a      	ldr	r3, [pc, #104]	; (8002a1c <main+0x98>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	491a      	ldr	r1, [pc, #104]	; (8002a20 <main+0x9c>)
 80029b8:	481a      	ldr	r0, [pc, #104]	; (8002a24 <main+0xa0>)
 80029ba:	f000 fd1d 	bl	80033f8 <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("Complementary Filter", 	COMPLEMENTARY_FILTER_Init, 		NULL, 								COMPLEMENTARY_FILTER_Process);
 80029be:	4b1a      	ldr	r3, [pc, #104]	; (8002a28 <main+0xa4>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	491a      	ldr	r1, [pc, #104]	; (8002a2c <main+0xa8>)
 80029c4:	481a      	ldr	r0, [pc, #104]	; (8002a30 <main+0xac>)
 80029c6:	f000 fd17 	bl	80033f8 <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("Motors",					MOTOR_Init, 					NULL, 								MOTOR_Process);
 80029ca:	4b1a      	ldr	r3, [pc, #104]	; (8002a34 <main+0xb0>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	491a      	ldr	r1, [pc, #104]	; (8002a38 <main+0xb4>)
 80029d0:	481a      	ldr	r0, [pc, #104]	; (8002a3c <main+0xb8>)
 80029d2:	f000 fd11 	bl	80033f8 <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("Controller", 				CONTROLLER_Init, 				NULL, 								CONTROLLER_Process);
 80029d6:	4b1a      	ldr	r3, [pc, #104]	; (8002a40 <main+0xbc>)
 80029d8:	2200      	movs	r2, #0
 80029da:	491a      	ldr	r1, [pc, #104]	; (8002a44 <main+0xc0>)
 80029dc:	481a      	ldr	r0, [pc, #104]	; (8002a48 <main+0xc4>)
 80029de:	f000 fd0b 	bl	80033f8 <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("Motor Mixer", 				NULL, 							NULL, 								MOTOR_MIXER_Process);
 80029e2:	4b1a      	ldr	r3, [pc, #104]	; (8002a4c <main+0xc8>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	2100      	movs	r1, #0
 80029e8:	4819      	ldr	r0, [pc, #100]	; (8002a50 <main+0xcc>)
 80029ea:	f000 fd05 	bl	80033f8 <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("Radio", 					RADIO_Process_Init, 			RADIO_Process_Main, 				NULL);
 80029ee:	2300      	movs	r3, #0
 80029f0:	4a18      	ldr	r2, [pc, #96]	; (8002a54 <main+0xd0>)
 80029f2:	4919      	ldr	r1, [pc, #100]	; (8002a58 <main+0xd4>)
 80029f4:	4819      	ldr	r0, [pc, #100]	; (8002a5c <main+0xd8>)
 80029f6:	f000 fcff 	bl	80033f8 <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("Data Logger", 				DATA_LOGGER_Init, 				DATA_LOGGER_Main, 					NULL);
 80029fa:	2300      	movs	r3, #0
 80029fc:	4a18      	ldr	r2, [pc, #96]	; (8002a60 <main+0xdc>)
 80029fe:	4919      	ldr	r1, [pc, #100]	; (8002a64 <main+0xe0>)
 8002a00:	4819      	ldr	r0, [pc, #100]	; (8002a68 <main+0xe4>)
 8002a02:	f000 fcf9 	bl	80033f8 <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("High Level", 				HIGH_LEVEL_Init, 				HIGH_LEVEL_Process_Main, 			NULL);
 8002a06:	2300      	movs	r3, #0
 8002a08:	4a18      	ldr	r2, [pc, #96]	; (8002a6c <main+0xe8>)
 8002a0a:	4919      	ldr	r1, [pc, #100]	; (8002a70 <main+0xec>)
 8002a0c:	4819      	ldr	r0, [pc, #100]	; (8002a74 <main+0xf0>)
 8002a0e:	f000 fcf3 	bl	80033f8 <TASK_MANAGER_Add_Task>

  /* System initialization */
  TASK_MANAGER_Init();
 8002a12:	f000 fc63 	bl	80032dc <TASK_MANAGER_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  TASK_MANAGER_Main();
 8002a16:	f000 fc91 	bl	800333c <TASK_MANAGER_Main>
 8002a1a:	e7fc      	b.n	8002a16 <main+0x92>
 8002a1c:	080024e9 	.word	0x080024e9
 8002a20:	08002349 	.word	0x08002349
 8002a24:	08008a0c 	.word	0x08008a0c
 8002a28:	080004fd 	.word	0x080004fd
 8002a2c:	080004c1 	.word	0x080004c1
 8002a30:	08008a14 	.word	0x08008a14
 8002a34:	08001731 	.word	0x08001731
 8002a38:	08001721 	.word	0x08001721
 8002a3c:	08008a2c 	.word	0x08008a2c
 8002a40:	08000895 	.word	0x08000895
 8002a44:	0800085d 	.word	0x0800085d
 8002a48:	08008a34 	.word	0x08008a34
 8002a4c:	08001639 	.word	0x08001639
 8002a50:	08008a40 	.word	0x08008a40
 8002a54:	080022f5 	.word	0x080022f5
 8002a58:	080022e1 	.word	0x080022e1
 8002a5c:	08008a4c 	.word	0x08008a4c
 8002a60:	08000b39 	.word	0x08000b39
 8002a64:	08000a41 	.word	0x08000a41
 8002a68:	08008a54 	.word	0x08008a54
 8002a6c:	08001409 	.word	0x08001409
 8002a70:	080013d1 	.word	0x080013d1
 8002a74:	08008a60 	.word	0x08008a60

08002a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b094      	sub	sp, #80	; 0x50
 8002a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a7e:	f107 0320 	add.w	r3, r7, #32
 8002a82:	2230      	movs	r2, #48	; 0x30
 8002a84:	2100      	movs	r1, #0
 8002a86:	4618      	mov	r0, r3
 8002a88:	f005 f8d8 	bl	8007c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a8c:	f107 030c 	add.w	r3, r7, #12
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	609a      	str	r2, [r3, #8]
 8002a98:	60da      	str	r2, [r3, #12]
 8002a9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60bb      	str	r3, [r7, #8]
 8002aa0:	4b28      	ldr	r3, [pc, #160]	; (8002b44 <SystemClock_Config+0xcc>)
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	4a27      	ldr	r2, [pc, #156]	; (8002b44 <SystemClock_Config+0xcc>)
 8002aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8002aac:	4b25      	ldr	r3, [pc, #148]	; (8002b44 <SystemClock_Config+0xcc>)
 8002aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab4:	60bb      	str	r3, [r7, #8]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ab8:	2300      	movs	r3, #0
 8002aba:	607b      	str	r3, [r7, #4]
 8002abc:	4b22      	ldr	r3, [pc, #136]	; (8002b48 <SystemClock_Config+0xd0>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a21      	ldr	r2, [pc, #132]	; (8002b48 <SystemClock_Config+0xd0>)
 8002ac2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ac6:	6013      	str	r3, [r2, #0]
 8002ac8:	4b1f      	ldr	r3, [pc, #124]	; (8002b48 <SystemClock_Config+0xd0>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad0:	607b      	str	r3, [r7, #4]
 8002ad2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002adc:	2310      	movs	r3, #16
 8002ade:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002ae8:	2308      	movs	r3, #8
 8002aea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002aec:	23a8      	movs	r3, #168	; 0xa8
 8002aee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002af0:	2302      	movs	r3, #2
 8002af2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002af4:	2304      	movs	r3, #4
 8002af6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002af8:	f107 0320 	add.w	r3, r7, #32
 8002afc:	4618      	mov	r0, r3
 8002afe:	f002 fbf1 	bl	80052e4 <HAL_RCC_OscConfig>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002b08:	f000 f820 	bl	8002b4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b0c:	230f      	movs	r3, #15
 8002b0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b10:	2302      	movs	r3, #2
 8002b12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b14:	2300      	movs	r3, #0
 8002b16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002b18:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002b1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b22:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002b24:	f107 030c 	add.w	r3, r7, #12
 8002b28:	2105      	movs	r1, #5
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f002 fe52 	bl	80057d4 <HAL_RCC_ClockConfig>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002b36:	f000 f809 	bl	8002b4c <Error_Handler>
  }
}
 8002b3a:	bf00      	nop
 8002b3c:	3750      	adds	r7, #80	; 0x50
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40023800 	.word	0x40023800
 8002b48:	40007000 	.word	0x40007000

08002b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b50:	b672      	cpsid	i
}
 8002b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b54:	e7fe      	b.n	8002b54 <Error_Handler+0x8>
	...

08002b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	607b      	str	r3, [r7, #4]
 8002b62:	4b10      	ldr	r3, [pc, #64]	; (8002ba4 <HAL_MspInit+0x4c>)
 8002b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b66:	4a0f      	ldr	r2, [pc, #60]	; (8002ba4 <HAL_MspInit+0x4c>)
 8002b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ba4 <HAL_MspInit+0x4c>)
 8002b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b76:	607b      	str	r3, [r7, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	603b      	str	r3, [r7, #0]
 8002b7e:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <HAL_MspInit+0x4c>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	4a08      	ldr	r2, [pc, #32]	; (8002ba4 <HAL_MspInit+0x4c>)
 8002b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b88:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8a:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <HAL_MspInit+0x4c>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b92:	603b      	str	r3, [r7, #0]
 8002b94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	40023800 	.word	0x40023800

08002ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bac:	e7fe      	b.n	8002bac <NMI_Handler+0x4>

08002bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bb2:	e7fe      	b.n	8002bb2 <HardFault_Handler+0x4>

08002bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bb8:	e7fe      	b.n	8002bb8 <MemManage_Handler+0x4>

08002bba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bbe:	e7fe      	b.n	8002bbe <BusFault_Handler+0x4>

08002bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bc4:	e7fe      	b.n	8002bc4 <UsageFault_Handler+0x4>

08002bc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bca:	bf00      	nop
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bd8:	bf00      	nop
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002be2:	b480      	push	{r7}
 8002be4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002be6:	bf00      	nop
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bf4:	f000 fca8 	bl	8003548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  TASK_MANAGER_It_ms();
 8002bf8:	f000 fbcc 	bl	8003394 <TASK_MANAGER_It_ms>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002bfc:	bf00      	nop
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002c04:	4802      	ldr	r0, [pc, #8]	; (8002c10 <DMA1_Stream0_IRQHandler+0x10>)
 8002c06:	f000 ff8d 	bl	8003b24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002c0a:	bf00      	nop
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	20000db0 	.word	0x20000db0

08002c14 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002c18:	4802      	ldr	r0, [pc, #8]	; (8002c24 <DMA1_Stream2_IRQHandler+0x10>)
 8002c1a:	f000 ff83 	bl	8003b24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002c1e:	bf00      	nop
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	20000e58 	.word	0x20000e58

08002c28 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002c2c:	4802      	ldr	r0, [pc, #8]	; (8002c38 <DMA1_Stream4_IRQHandler+0x10>)
 8002c2e:	f000 ff79 	bl	8003b24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002c32:	bf00      	nop
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20001000 	.word	0x20001000

08002c3c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002c40:	4802      	ldr	r0, [pc, #8]	; (8002c4c <DMA1_Stream6_IRQHandler+0x10>)
 8002c42:	f000 ff6f 	bl	8003b24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20000cfc 	.word	0x20000cfc

08002c50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c54:	4803      	ldr	r0, [pc, #12]	; (8002c64 <USART1_IRQHandler+0x14>)
 8002c56:	f003 ff7f 	bl	8006b58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  UART_Idle_Line_Callback(uart_e1);
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	f7fe ffb0 	bl	8001bc0 <UART_Idle_Line_Callback>
  /* USER CODE END USART1_IRQn 1 */
}
 8002c60:	bf00      	nop
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	20000f78 	.word	0x20000f78

08002c68 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002c6c:	4803      	ldr	r0, [pc, #12]	; (8002c7c <UART4_IRQHandler+0x14>)
 8002c6e:	f003 ff73 	bl	8006b58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  UART_Idle_Line_Callback(uart_e4);
 8002c72:	2001      	movs	r0, #1
 8002c74:	f7fe ffa4 	bl	8001bc0 <UART_Idle_Line_Callback>
  /* USER CODE END UART4_IRQn 1 */
}
 8002c78:	bf00      	nop
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	20000fbc 	.word	0x20000fbc

08002c80 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002c84:	4802      	ldr	r0, [pc, #8]	; (8002c90 <DMA2_Stream2_IRQHandler+0x10>)
 8002c86:	f000 ff4d 	bl	8003b24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000f18 	.word	0x20000f18

08002c94 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002c98:	4802      	ldr	r0, [pc, #8]	; (8002ca4 <DMA2_Stream7_IRQHandler+0x10>)
 8002c9a:	f000 ff43 	bl	8003b24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	20000eb8 	.word	0x20000eb8

08002ca8 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
	if(huart == &huart4)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a09      	ldr	r2, [pc, #36]	; (8002cd8 <HAL_UART_TxCpltCallback+0x30>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d103      	bne.n	8002cc0 <HAL_UART_TxCpltCallback+0x18>
	{
		UART_Transfer_Complete_Callback(uart_e4);
 8002cb8:	2001      	movs	r0, #1
 8002cba:	f7fe ffcf 	bl	8001c5c <UART_Transfer_Complete_Callback>
	}
	else if(huart == &huart1)
	{
		UART_Transfer_Complete_Callback(uart_e1 );
	}
}
 8002cbe:	e006      	b.n	8002cce <HAL_UART_TxCpltCallback+0x26>
	else if(huart == &huart1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a06      	ldr	r2, [pc, #24]	; (8002cdc <HAL_UART_TxCpltCallback+0x34>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d102      	bne.n	8002cce <HAL_UART_TxCpltCallback+0x26>
		UART_Transfer_Complete_Callback(uart_e1 );
 8002cc8:	2000      	movs	r0, #0
 8002cca:	f7fe ffc7 	bl	8001c5c <UART_Transfer_Complete_Callback>
}
 8002cce:	bf00      	nop
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	20000fbc 	.word	0x20000fbc
 8002cdc:	20000f78 	.word	0x20000f78

08002ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ce4:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <SystemInit+0x20>)
 8002ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cea:	4a05      	ldr	r2, [pc, #20]	; (8002d00 <SystemInit+0x20>)
 8002cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cf4:	bf00      	nop
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	e000ed00 	.word	0xe000ed00

08002d04 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08e      	sub	sp, #56	; 0x38
 8002d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d0e:	2200      	movs	r2, #0
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	605a      	str	r2, [r3, #4]
 8002d14:	609a      	str	r2, [r3, #8]
 8002d16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d18:	f107 0320 	add.w	r3, r7, #32
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d22:	1d3b      	adds	r3, r7, #4
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	605a      	str	r2, [r3, #4]
 8002d2a:	609a      	str	r2, [r3, #8]
 8002d2c:	60da      	str	r2, [r3, #12]
 8002d2e:	611a      	str	r2, [r3, #16]
 8002d30:	615a      	str	r2, [r3, #20]
 8002d32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d34:	4b3d      	ldr	r3, [pc, #244]	; (8002e2c <MX_TIM3_Init+0x128>)
 8002d36:	4a3e      	ldr	r2, [pc, #248]	; (8002e30 <MX_TIM3_Init+0x12c>)
 8002d38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8002d3a:	4b3c      	ldr	r3, [pc, #240]	; (8002e2c <MX_TIM3_Init+0x128>)
 8002d3c:	2253      	movs	r2, #83	; 0x53
 8002d3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d40:	4b3a      	ldr	r3, [pc, #232]	; (8002e2c <MX_TIM3_Init+0x128>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3999;
 8002d46:	4b39      	ldr	r3, [pc, #228]	; (8002e2c <MX_TIM3_Init+0x128>)
 8002d48:	f640 729f 	movw	r2, #3999	; 0xf9f
 8002d4c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d4e:	4b37      	ldr	r3, [pc, #220]	; (8002e2c <MX_TIM3_Init+0x128>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d54:	4b35      	ldr	r3, [pc, #212]	; (8002e2c <MX_TIM3_Init+0x128>)
 8002d56:	2280      	movs	r2, #128	; 0x80
 8002d58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d5a:	4834      	ldr	r0, [pc, #208]	; (8002e2c <MX_TIM3_Init+0x128>)
 8002d5c:	f002 ff0a 	bl	8005b74 <HAL_TIM_Base_Init>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002d66:	f7ff fef1 	bl	8002b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d74:	4619      	mov	r1, r3
 8002d76:	482d      	ldr	r0, [pc, #180]	; (8002e2c <MX_TIM3_Init+0x128>)
 8002d78:	f003 f99e 	bl	80060b8 <HAL_TIM_ConfigClockSource>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002d82:	f7ff fee3 	bl	8002b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002d86:	4829      	ldr	r0, [pc, #164]	; (8002e2c <MX_TIM3_Init+0x128>)
 8002d88:	f002 ff43 	bl	8005c12 <HAL_TIM_PWM_Init>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002d92:	f7ff fedb 	bl	8002b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d96:	2300      	movs	r3, #0
 8002d98:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d9e:	f107 0320 	add.w	r3, r7, #32
 8002da2:	4619      	mov	r1, r3
 8002da4:	4821      	ldr	r0, [pc, #132]	; (8002e2c <MX_TIM3_Init+0x128>)
 8002da6:	f003 fd5f 	bl	8006868 <HAL_TIMEx_MasterConfigSynchronization>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002db0:	f7ff fecc 	bl	8002b4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002db4:	2360      	movs	r3, #96	; 0x60
 8002db6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 999;
 8002db8:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002dbc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002dc6:	1d3b      	adds	r3, r7, #4
 8002dc8:	2200      	movs	r2, #0
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4817      	ldr	r0, [pc, #92]	; (8002e2c <MX_TIM3_Init+0x128>)
 8002dce:	f003 f8b1 	bl	8005f34 <HAL_TIM_PWM_ConfigChannel>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002dd8:	f7ff feb8 	bl	8002b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ddc:	1d3b      	adds	r3, r7, #4
 8002dde:	2204      	movs	r2, #4
 8002de0:	4619      	mov	r1, r3
 8002de2:	4812      	ldr	r0, [pc, #72]	; (8002e2c <MX_TIM3_Init+0x128>)
 8002de4:	f003 f8a6 	bl	8005f34 <HAL_TIM_PWM_ConfigChannel>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002dee:	f7ff fead 	bl	8002b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002df2:	1d3b      	adds	r3, r7, #4
 8002df4:	2208      	movs	r2, #8
 8002df6:	4619      	mov	r1, r3
 8002df8:	480c      	ldr	r0, [pc, #48]	; (8002e2c <MX_TIM3_Init+0x128>)
 8002dfa:	f003 f89b 	bl	8005f34 <HAL_TIM_PWM_ConfigChannel>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8002e04:	f7ff fea2 	bl	8002b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002e08:	1d3b      	adds	r3, r7, #4
 8002e0a:	220c      	movs	r2, #12
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4807      	ldr	r0, [pc, #28]	; (8002e2c <MX_TIM3_Init+0x128>)
 8002e10:	f003 f890 	bl	8005f34 <HAL_TIM_PWM_ConfigChannel>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8002e1a:	f7ff fe97 	bl	8002b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002e1e:	4803      	ldr	r0, [pc, #12]	; (8002e2c <MX_TIM3_Init+0x128>)
 8002e20:	f000 f82a 	bl	8002e78 <HAL_TIM_MspPostInit>

}
 8002e24:	bf00      	nop
 8002e26:	3738      	adds	r7, #56	; 0x38
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	20000e10 	.word	0x20000e10
 8002e30:	40000400 	.word	0x40000400

08002e34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a0b      	ldr	r2, [pc, #44]	; (8002e70 <HAL_TIM_Base_MspInit+0x3c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d10d      	bne.n	8002e62 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	4b0a      	ldr	r3, [pc, #40]	; (8002e74 <HAL_TIM_Base_MspInit+0x40>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	4a09      	ldr	r2, [pc, #36]	; (8002e74 <HAL_TIM_Base_MspInit+0x40>)
 8002e50:	f043 0302 	orr.w	r3, r3, #2
 8002e54:	6413      	str	r3, [r2, #64]	; 0x40
 8002e56:	4b07      	ldr	r3, [pc, #28]	; (8002e74 <HAL_TIM_Base_MspInit+0x40>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002e62:	bf00      	nop
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40000400 	.word	0x40000400
 8002e74:	40023800 	.word	0x40023800

08002e78 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08a      	sub	sp, #40	; 0x28
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e80:	f107 0314 	add.w	r3, r7, #20
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	605a      	str	r2, [r3, #4]
 8002e8a:	609a      	str	r2, [r3, #8]
 8002e8c:	60da      	str	r2, [r3, #12]
 8002e8e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a21      	ldr	r2, [pc, #132]	; (8002f1c <HAL_TIM_MspPostInit+0xa4>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d13b      	bne.n	8002f12 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	613b      	str	r3, [r7, #16]
 8002e9e:	4b20      	ldr	r3, [pc, #128]	; (8002f20 <HAL_TIM_MspPostInit+0xa8>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	4a1f      	ldr	r2, [pc, #124]	; (8002f20 <HAL_TIM_MspPostInit+0xa8>)
 8002ea4:	f043 0301 	orr.w	r3, r3, #1
 8002ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eaa:	4b1d      	ldr	r3, [pc, #116]	; (8002f20 <HAL_TIM_MspPostInit+0xa8>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	613b      	str	r3, [r7, #16]
 8002eb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	4b19      	ldr	r3, [pc, #100]	; (8002f20 <HAL_TIM_MspPostInit+0xa8>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	4a18      	ldr	r2, [pc, #96]	; (8002f20 <HAL_TIM_MspPostInit+0xa8>)
 8002ec0:	f043 0302 	orr.w	r3, r3, #2
 8002ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec6:	4b16      	ldr	r3, [pc, #88]	; (8002f20 <HAL_TIM_MspPostInit+0xa8>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ed2:	23c0      	movs	r3, #192	; 0xc0
 8002ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eda:	2300      	movs	r3, #0
 8002edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee6:	f107 0314 	add.w	r3, r7, #20
 8002eea:	4619      	mov	r1, r3
 8002eec:	480d      	ldr	r0, [pc, #52]	; (8002f24 <HAL_TIM_MspPostInit+0xac>)
 8002eee:	f001 f883 	bl	8003ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efa:	2300      	movs	r3, #0
 8002efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002efe:	2300      	movs	r3, #0
 8002f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f02:	2302      	movs	r3, #2
 8002f04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f06:	f107 0314 	add.w	r3, r7, #20
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	4806      	ldr	r0, [pc, #24]	; (8002f28 <HAL_TIM_MspPostInit+0xb0>)
 8002f0e:	f001 f873 	bl	8003ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002f12:	bf00      	nop
 8002f14:	3728      	adds	r7, #40	; 0x28
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40000400 	.word	0x40000400
 8002f20:	40023800 	.word	0x40023800
 8002f24:	40020000 	.word	0x40020000
 8002f28:	40020400 	.word	0x40020400

08002f2c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart1_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002f30:	4b11      	ldr	r3, [pc, #68]	; (8002f78 <MX_UART4_Init+0x4c>)
 8002f32:	4a12      	ldr	r2, [pc, #72]	; (8002f7c <MX_UART4_Init+0x50>)
 8002f34:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002f36:	4b10      	ldr	r3, [pc, #64]	; (8002f78 <MX_UART4_Init+0x4c>)
 8002f38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f3c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002f3e:	4b0e      	ldr	r3, [pc, #56]	; (8002f78 <MX_UART4_Init+0x4c>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002f44:	4b0c      	ldr	r3, [pc, #48]	; (8002f78 <MX_UART4_Init+0x4c>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002f4a:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <MX_UART4_Init+0x4c>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002f50:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <MX_UART4_Init+0x4c>)
 8002f52:	220c      	movs	r2, #12
 8002f54:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f56:	4b08      	ldr	r3, [pc, #32]	; (8002f78 <MX_UART4_Init+0x4c>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f5c:	4b06      	ldr	r3, [pc, #24]	; (8002f78 <MX_UART4_Init+0x4c>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002f62:	4805      	ldr	r0, [pc, #20]	; (8002f78 <MX_UART4_Init+0x4c>)
 8002f64:	f003 fcfc 	bl	8006960 <HAL_UART_Init>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002f6e:	f7ff fded 	bl	8002b4c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002f72:	bf00      	nop
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20000fbc 	.word	0x20000fbc
 8002f7c:	40004c00 	.word	0x40004c00

08002f80 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f84:	4b11      	ldr	r3, [pc, #68]	; (8002fcc <MX_USART1_UART_Init+0x4c>)
 8002f86:	4a12      	ldr	r2, [pc, #72]	; (8002fd0 <MX_USART1_UART_Init+0x50>)
 8002f88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8002f8a:	4b10      	ldr	r3, [pc, #64]	; (8002fcc <MX_USART1_UART_Init+0x4c>)
 8002f8c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8002f90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f92:	4b0e      	ldr	r3, [pc, #56]	; (8002fcc <MX_USART1_UART_Init+0x4c>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f98:	4b0c      	ldr	r3, [pc, #48]	; (8002fcc <MX_USART1_UART_Init+0x4c>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f9e:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <MX_USART1_UART_Init+0x4c>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fa4:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <MX_USART1_UART_Init+0x4c>)
 8002fa6:	220c      	movs	r2, #12
 8002fa8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002faa:	4b08      	ldr	r3, [pc, #32]	; (8002fcc <MX_USART1_UART_Init+0x4c>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fb0:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <MX_USART1_UART_Init+0x4c>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002fb6:	4805      	ldr	r0, [pc, #20]	; (8002fcc <MX_USART1_UART_Init+0x4c>)
 8002fb8:	f003 fcd2 	bl	8006960 <HAL_UART_Init>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002fc2:	f7ff fdc3 	bl	8002b4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002fc6:	bf00      	nop
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	20000f78 	.word	0x20000f78
 8002fd0:	40011000 	.word	0x40011000

08002fd4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08c      	sub	sp, #48	; 0x30
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fdc:	f107 031c 	add.w	r3, r7, #28
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	605a      	str	r2, [r3, #4]
 8002fe6:	609a      	str	r2, [r3, #8]
 8002fe8:	60da      	str	r2, [r3, #12]
 8002fea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a98      	ldr	r2, [pc, #608]	; (8003254 <HAL_UART_MspInit+0x280>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	f040 8092 	bne.w	800311c <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	61bb      	str	r3, [r7, #24]
 8002ffc:	4b96      	ldr	r3, [pc, #600]	; (8003258 <HAL_UART_MspInit+0x284>)
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	4a95      	ldr	r2, [pc, #596]	; (8003258 <HAL_UART_MspInit+0x284>)
 8003002:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003006:	6413      	str	r3, [r2, #64]	; 0x40
 8003008:	4b93      	ldr	r3, [pc, #588]	; (8003258 <HAL_UART_MspInit+0x284>)
 800300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003010:	61bb      	str	r3, [r7, #24]
 8003012:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003014:	2300      	movs	r3, #0
 8003016:	617b      	str	r3, [r7, #20]
 8003018:	4b8f      	ldr	r3, [pc, #572]	; (8003258 <HAL_UART_MspInit+0x284>)
 800301a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301c:	4a8e      	ldr	r2, [pc, #568]	; (8003258 <HAL_UART_MspInit+0x284>)
 800301e:	f043 0301 	orr.w	r3, r3, #1
 8003022:	6313      	str	r3, [r2, #48]	; 0x30
 8003024:	4b8c      	ldr	r3, [pc, #560]	; (8003258 <HAL_UART_MspInit+0x284>)
 8003026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	617b      	str	r3, [r7, #20]
 800302e:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003030:	2303      	movs	r3, #3
 8003032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003034:	2302      	movs	r3, #2
 8003036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003038:	2300      	movs	r3, #0
 800303a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800303c:	2303      	movs	r3, #3
 800303e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003040:	2308      	movs	r3, #8
 8003042:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003044:	f107 031c 	add.w	r3, r7, #28
 8003048:	4619      	mov	r1, r3
 800304a:	4884      	ldr	r0, [pc, #528]	; (800325c <HAL_UART_MspInit+0x288>)
 800304c:	f000 ffd4 	bl	8003ff8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8003050:	4b83      	ldr	r3, [pc, #524]	; (8003260 <HAL_UART_MspInit+0x28c>)
 8003052:	4a84      	ldr	r2, [pc, #528]	; (8003264 <HAL_UART_MspInit+0x290>)
 8003054:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8003056:	4b82      	ldr	r3, [pc, #520]	; (8003260 <HAL_UART_MspInit+0x28c>)
 8003058:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800305c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800305e:	4b80      	ldr	r3, [pc, #512]	; (8003260 <HAL_UART_MspInit+0x28c>)
 8003060:	2200      	movs	r2, #0
 8003062:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003064:	4b7e      	ldr	r3, [pc, #504]	; (8003260 <HAL_UART_MspInit+0x28c>)
 8003066:	2200      	movs	r2, #0
 8003068:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800306a:	4b7d      	ldr	r3, [pc, #500]	; (8003260 <HAL_UART_MspInit+0x28c>)
 800306c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003070:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003072:	4b7b      	ldr	r3, [pc, #492]	; (8003260 <HAL_UART_MspInit+0x28c>)
 8003074:	2200      	movs	r2, #0
 8003076:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003078:	4b79      	ldr	r3, [pc, #484]	; (8003260 <HAL_UART_MspInit+0x28c>)
 800307a:	2200      	movs	r2, #0
 800307c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800307e:	4b78      	ldr	r3, [pc, #480]	; (8003260 <HAL_UART_MspInit+0x28c>)
 8003080:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003084:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003086:	4b76      	ldr	r3, [pc, #472]	; (8003260 <HAL_UART_MspInit+0x28c>)
 8003088:	2200      	movs	r2, #0
 800308a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800308c:	4b74      	ldr	r3, [pc, #464]	; (8003260 <HAL_UART_MspInit+0x28c>)
 800308e:	2200      	movs	r2, #0
 8003090:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8003092:	4873      	ldr	r0, [pc, #460]	; (8003260 <HAL_UART_MspInit+0x28c>)
 8003094:	f000 fbae 	bl	80037f4 <HAL_DMA_Init>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800309e:	f7ff fd55 	bl	8002b4c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a6e      	ldr	r2, [pc, #440]	; (8003260 <HAL_UART_MspInit+0x28c>)
 80030a6:	639a      	str	r2, [r3, #56]	; 0x38
 80030a8:	4a6d      	ldr	r2, [pc, #436]	; (8003260 <HAL_UART_MspInit+0x28c>)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80030ae:	4b6e      	ldr	r3, [pc, #440]	; (8003268 <HAL_UART_MspInit+0x294>)
 80030b0:	4a6e      	ldr	r2, [pc, #440]	; (800326c <HAL_UART_MspInit+0x298>)
 80030b2:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 80030b4:	4b6c      	ldr	r3, [pc, #432]	; (8003268 <HAL_UART_MspInit+0x294>)
 80030b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030ba:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030bc:	4b6a      	ldr	r3, [pc, #424]	; (8003268 <HAL_UART_MspInit+0x294>)
 80030be:	2240      	movs	r2, #64	; 0x40
 80030c0:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030c2:	4b69      	ldr	r3, [pc, #420]	; (8003268 <HAL_UART_MspInit+0x294>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030c8:	4b67      	ldr	r3, [pc, #412]	; (8003268 <HAL_UART_MspInit+0x294>)
 80030ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030ce:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030d0:	4b65      	ldr	r3, [pc, #404]	; (8003268 <HAL_UART_MspInit+0x294>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030d6:	4b64      	ldr	r3, [pc, #400]	; (8003268 <HAL_UART_MspInit+0x294>)
 80030d8:	2200      	movs	r2, #0
 80030da:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80030dc:	4b62      	ldr	r3, [pc, #392]	; (8003268 <HAL_UART_MspInit+0x294>)
 80030de:	2200      	movs	r2, #0
 80030e0:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80030e2:	4b61      	ldr	r3, [pc, #388]	; (8003268 <HAL_UART_MspInit+0x294>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030e8:	4b5f      	ldr	r3, [pc, #380]	; (8003268 <HAL_UART_MspInit+0x294>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80030ee:	485e      	ldr	r0, [pc, #376]	; (8003268 <HAL_UART_MspInit+0x294>)
 80030f0:	f000 fb80 	bl	80037f4 <HAL_DMA_Init>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80030fa:	f7ff fd27 	bl	8002b4c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a59      	ldr	r2, [pc, #356]	; (8003268 <HAL_UART_MspInit+0x294>)
 8003102:	635a      	str	r2, [r3, #52]	; 0x34
 8003104:	4a58      	ldr	r2, [pc, #352]	; (8003268 <HAL_UART_MspInit+0x294>)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800310a:	2200      	movs	r2, #0
 800310c:	2100      	movs	r1, #0
 800310e:	2034      	movs	r0, #52	; 0x34
 8003110:	f000 fb39 	bl	8003786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003114:	2034      	movs	r0, #52	; 0x34
 8003116:	f000 fb52 	bl	80037be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800311a:	e096      	b.n	800324a <HAL_UART_MspInit+0x276>
  else if(uartHandle->Instance==USART1)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a53      	ldr	r2, [pc, #332]	; (8003270 <HAL_UART_MspInit+0x29c>)
 8003122:	4293      	cmp	r3, r2
 8003124:	f040 8091 	bne.w	800324a <HAL_UART_MspInit+0x276>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003128:	2300      	movs	r3, #0
 800312a:	613b      	str	r3, [r7, #16]
 800312c:	4b4a      	ldr	r3, [pc, #296]	; (8003258 <HAL_UART_MspInit+0x284>)
 800312e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003130:	4a49      	ldr	r2, [pc, #292]	; (8003258 <HAL_UART_MspInit+0x284>)
 8003132:	f043 0310 	orr.w	r3, r3, #16
 8003136:	6453      	str	r3, [r2, #68]	; 0x44
 8003138:	4b47      	ldr	r3, [pc, #284]	; (8003258 <HAL_UART_MspInit+0x284>)
 800313a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313c:	f003 0310 	and.w	r3, r3, #16
 8003140:	613b      	str	r3, [r7, #16]
 8003142:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003144:	2300      	movs	r3, #0
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	4b43      	ldr	r3, [pc, #268]	; (8003258 <HAL_UART_MspInit+0x284>)
 800314a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314c:	4a42      	ldr	r2, [pc, #264]	; (8003258 <HAL_UART_MspInit+0x284>)
 800314e:	f043 0302 	orr.w	r3, r3, #2
 8003152:	6313      	str	r3, [r2, #48]	; 0x30
 8003154:	4b40      	ldr	r3, [pc, #256]	; (8003258 <HAL_UART_MspInit+0x284>)
 8003156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	60fb      	str	r3, [r7, #12]
 800315e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003160:	23c0      	movs	r3, #192	; 0xc0
 8003162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003164:	2302      	movs	r3, #2
 8003166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003168:	2300      	movs	r3, #0
 800316a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800316c:	2303      	movs	r3, #3
 800316e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003170:	2307      	movs	r3, #7
 8003172:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003174:	f107 031c 	add.w	r3, r7, #28
 8003178:	4619      	mov	r1, r3
 800317a:	483e      	ldr	r0, [pc, #248]	; (8003274 <HAL_UART_MspInit+0x2a0>)
 800317c:	f000 ff3c 	bl	8003ff8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003180:	4b3d      	ldr	r3, [pc, #244]	; (8003278 <HAL_UART_MspInit+0x2a4>)
 8003182:	4a3e      	ldr	r2, [pc, #248]	; (800327c <HAL_UART_MspInit+0x2a8>)
 8003184:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003186:	4b3c      	ldr	r3, [pc, #240]	; (8003278 <HAL_UART_MspInit+0x2a4>)
 8003188:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800318c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800318e:	4b3a      	ldr	r3, [pc, #232]	; (8003278 <HAL_UART_MspInit+0x2a4>)
 8003190:	2200      	movs	r2, #0
 8003192:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003194:	4b38      	ldr	r3, [pc, #224]	; (8003278 <HAL_UART_MspInit+0x2a4>)
 8003196:	2200      	movs	r2, #0
 8003198:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800319a:	4b37      	ldr	r3, [pc, #220]	; (8003278 <HAL_UART_MspInit+0x2a4>)
 800319c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031a0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031a2:	4b35      	ldr	r3, [pc, #212]	; (8003278 <HAL_UART_MspInit+0x2a4>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031a8:	4b33      	ldr	r3, [pc, #204]	; (8003278 <HAL_UART_MspInit+0x2a4>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80031ae:	4b32      	ldr	r3, [pc, #200]	; (8003278 <HAL_UART_MspInit+0x2a4>)
 80031b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031b4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80031b6:	4b30      	ldr	r3, [pc, #192]	; (8003278 <HAL_UART_MspInit+0x2a4>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031bc:	4b2e      	ldr	r3, [pc, #184]	; (8003278 <HAL_UART_MspInit+0x2a4>)
 80031be:	2200      	movs	r2, #0
 80031c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80031c2:	482d      	ldr	r0, [pc, #180]	; (8003278 <HAL_UART_MspInit+0x2a4>)
 80031c4:	f000 fb16 	bl	80037f4 <HAL_DMA_Init>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_UART_MspInit+0x1fe>
      Error_Handler();
 80031ce:	f7ff fcbd 	bl	8002b4c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a28      	ldr	r2, [pc, #160]	; (8003278 <HAL_UART_MspInit+0x2a4>)
 80031d6:	639a      	str	r2, [r3, #56]	; 0x38
 80031d8:	4a27      	ldr	r2, [pc, #156]	; (8003278 <HAL_UART_MspInit+0x2a4>)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80031de:	4b28      	ldr	r3, [pc, #160]	; (8003280 <HAL_UART_MspInit+0x2ac>)
 80031e0:	4a28      	ldr	r2, [pc, #160]	; (8003284 <HAL_UART_MspInit+0x2b0>)
 80031e2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80031e4:	4b26      	ldr	r3, [pc, #152]	; (8003280 <HAL_UART_MspInit+0x2ac>)
 80031e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031ea:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031ec:	4b24      	ldr	r3, [pc, #144]	; (8003280 <HAL_UART_MspInit+0x2ac>)
 80031ee:	2240      	movs	r2, #64	; 0x40
 80031f0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031f2:	4b23      	ldr	r3, [pc, #140]	; (8003280 <HAL_UART_MspInit+0x2ac>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80031f8:	4b21      	ldr	r3, [pc, #132]	; (8003280 <HAL_UART_MspInit+0x2ac>)
 80031fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031fe:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003200:	4b1f      	ldr	r3, [pc, #124]	; (8003280 <HAL_UART_MspInit+0x2ac>)
 8003202:	2200      	movs	r2, #0
 8003204:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003206:	4b1e      	ldr	r3, [pc, #120]	; (8003280 <HAL_UART_MspInit+0x2ac>)
 8003208:	2200      	movs	r2, #0
 800320a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800320c:	4b1c      	ldr	r3, [pc, #112]	; (8003280 <HAL_UART_MspInit+0x2ac>)
 800320e:	2200      	movs	r2, #0
 8003210:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003212:	4b1b      	ldr	r3, [pc, #108]	; (8003280 <HAL_UART_MspInit+0x2ac>)
 8003214:	2200      	movs	r2, #0
 8003216:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003218:	4b19      	ldr	r3, [pc, #100]	; (8003280 <HAL_UART_MspInit+0x2ac>)
 800321a:	2200      	movs	r2, #0
 800321c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800321e:	4818      	ldr	r0, [pc, #96]	; (8003280 <HAL_UART_MspInit+0x2ac>)
 8003220:	f000 fae8 	bl	80037f4 <HAL_DMA_Init>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <HAL_UART_MspInit+0x25a>
      Error_Handler();
 800322a:	f7ff fc8f 	bl	8002b4c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a13      	ldr	r2, [pc, #76]	; (8003280 <HAL_UART_MspInit+0x2ac>)
 8003232:	635a      	str	r2, [r3, #52]	; 0x34
 8003234:	4a12      	ldr	r2, [pc, #72]	; (8003280 <HAL_UART_MspInit+0x2ac>)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800323a:	2200      	movs	r2, #0
 800323c:	2100      	movs	r1, #0
 800323e:	2025      	movs	r0, #37	; 0x25
 8003240:	f000 faa1 	bl	8003786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003244:	2025      	movs	r0, #37	; 0x25
 8003246:	f000 faba 	bl	80037be <HAL_NVIC_EnableIRQ>
}
 800324a:	bf00      	nop
 800324c:	3730      	adds	r7, #48	; 0x30
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40004c00 	.word	0x40004c00
 8003258:	40023800 	.word	0x40023800
 800325c:	40020000 	.word	0x40020000
 8003260:	20000e58 	.word	0x20000e58
 8003264:	40026040 	.word	0x40026040
 8003268:	20001000 	.word	0x20001000
 800326c:	40026070 	.word	0x40026070
 8003270:	40011000 	.word	0x40011000
 8003274:	40020400 	.word	0x40020400
 8003278:	20000f18 	.word	0x20000f18
 800327c:	40026440 	.word	0x40026440
 8003280:	20000eb8 	.word	0x20000eb8
 8003284:	400264b8 	.word	0x400264b8

08003288 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003288:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800328c:	480d      	ldr	r0, [pc, #52]	; (80032c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800328e:	490e      	ldr	r1, [pc, #56]	; (80032c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003290:	4a0e      	ldr	r2, [pc, #56]	; (80032cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003294:	e002      	b.n	800329c <LoopCopyDataInit>

08003296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800329a:	3304      	adds	r3, #4

0800329c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800329c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800329e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032a0:	d3f9      	bcc.n	8003296 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032a2:	4a0b      	ldr	r2, [pc, #44]	; (80032d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80032a4:	4c0b      	ldr	r4, [pc, #44]	; (80032d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80032a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032a8:	e001      	b.n	80032ae <LoopFillZerobss>

080032aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032ac:	3204      	adds	r2, #4

080032ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032b0:	d3fb      	bcc.n	80032aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80032b2:	f7ff fd15 	bl	8002ce0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032b6:	f004 fc8f 	bl	8007bd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032ba:	f7ff fb63 	bl	8002984 <main>
  bx  lr    
 80032be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80032c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80032c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032c8:	20000154 	.word	0x20000154
  ldr r2, =_sidata
 80032cc:	08008e70 	.word	0x08008e70
  ldr r2, =_sbss
 80032d0:	20000154 	.word	0x20000154
  ldr r4, =_ebss
 80032d4:	20001064 	.word	0x20001064

080032d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032d8:	e7fe      	b.n	80032d8 <ADC_IRQHandler>
	...

080032dc <TASK_MANAGER_Init>:
static task_t task[MAX_NUMBER_OF_TASK] = { 0 };
static bool_e is_initialized = FALSE;
static uint8_t task_count = 0;

void TASK_MANAGER_Init(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
	for(uint8_t t = 0; t < task_count; t++)
 80032e2:	2300      	movs	r3, #0
 80032e4:	71fb      	strb	r3, [r7, #7]
 80032e6:	e017      	b.n	8003318 <TASK_MANAGER_Init+0x3c>
	{
		if(task[t].init.call)
 80032e8:	79fa      	ldrb	r2, [r7, #7]
 80032ea:	4911      	ldr	r1, [pc, #68]	; (8003330 <TASK_MANAGER_Init+0x54>)
 80032ec:	4613      	mov	r3, r2
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	1a9b      	subs	r3, r3, r2
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	440b      	add	r3, r1
 80032f6:	3308      	adds	r3, #8
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d009      	beq.n	8003312 <TASK_MANAGER_Init+0x36>
		{
			task[t].init.call();
 80032fe:	79fa      	ldrb	r2, [r7, #7]
 8003300:	490b      	ldr	r1, [pc, #44]	; (8003330 <TASK_MANAGER_Init+0x54>)
 8003302:	4613      	mov	r3, r2
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	1a9b      	subs	r3, r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	440b      	add	r3, r1
 800330c:	3308      	adds	r3, #8
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4798      	blx	r3
	for(uint8_t t = 0; t < task_count; t++)
 8003312:	79fb      	ldrb	r3, [r7, #7]
 8003314:	3301      	adds	r3, #1
 8003316:	71fb      	strb	r3, [r7, #7]
 8003318:	4b06      	ldr	r3, [pc, #24]	; (8003334 <TASK_MANAGER_Init+0x58>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	79fa      	ldrb	r2, [r7, #7]
 800331e:	429a      	cmp	r2, r3
 8003320:	d3e2      	bcc.n	80032e8 <TASK_MANAGER_Init+0xc>
		}
	}
	is_initialized = TRUE;
 8003322:	4b05      	ldr	r3, [pc, #20]	; (8003338 <TASK_MANAGER_Init+0x5c>)
 8003324:	2201      	movs	r2, #1
 8003326:	701a      	strb	r2, [r3, #0]
}
 8003328:	bf00      	nop
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	20000ac8 	.word	0x20000ac8
 8003334:	20000cf9 	.word	0x20000cf9
 8003338:	20000cf8 	.word	0x20000cf8

0800333c <TASK_MANAGER_Main>:


void TASK_MANAGER_Main(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
	for(uint8_t t = 0; t < task_count; t++)
 8003342:	2300      	movs	r3, #0
 8003344:	71fb      	strb	r3, [r7, #7]
 8003346:	e017      	b.n	8003378 <TASK_MANAGER_Main+0x3c>
	{
		if(task[t].main.call)
 8003348:	79fa      	ldrb	r2, [r7, #7]
 800334a:	4910      	ldr	r1, [pc, #64]	; (800338c <TASK_MANAGER_Main+0x50>)
 800334c:	4613      	mov	r3, r2
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	1a9b      	subs	r3, r3, r2
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	440b      	add	r3, r1
 8003356:	3318      	adds	r3, #24
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d009      	beq.n	8003372 <TASK_MANAGER_Main+0x36>
		{
			task[t].main.call();
 800335e:	79fa      	ldrb	r2, [r7, #7]
 8003360:	490a      	ldr	r1, [pc, #40]	; (800338c <TASK_MANAGER_Main+0x50>)
 8003362:	4613      	mov	r3, r2
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	1a9b      	subs	r3, r3, r2
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	440b      	add	r3, r1
 800336c:	3318      	adds	r3, #24
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4798      	blx	r3
	for(uint8_t t = 0; t < task_count; t++)
 8003372:	79fb      	ldrb	r3, [r7, #7]
 8003374:	3301      	adds	r3, #1
 8003376:	71fb      	strb	r3, [r7, #7]
 8003378:	4b05      	ldr	r3, [pc, #20]	; (8003390 <TASK_MANAGER_Main+0x54>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	79fa      	ldrb	r2, [r7, #7]
 800337e:	429a      	cmp	r2, r3
 8003380:	d3e2      	bcc.n	8003348 <TASK_MANAGER_Main+0xc>
		}
	}
}
 8003382:	bf00      	nop
 8003384:	bf00      	nop
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	20000ac8 	.word	0x20000ac8
 8003390:	20000cf9 	.word	0x20000cf9

08003394 <TASK_MANAGER_It_ms>:

void TASK_MANAGER_It_ms(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
	if(!is_initialized)
 800339a:	4b14      	ldr	r3, [pc, #80]	; (80033ec <TASK_MANAGER_It_ms+0x58>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d020      	beq.n	80033e4 <TASK_MANAGER_It_ms+0x50>
	{
		return;
	}
	for(uint8_t t = 0; t < task_count; t++)
 80033a2:	2300      	movs	r3, #0
 80033a4:	71fb      	strb	r3, [r7, #7]
 80033a6:	e017      	b.n	80033d8 <TASK_MANAGER_It_ms+0x44>
	{
		if(task[t].it.call)
 80033a8:	79fa      	ldrb	r2, [r7, #7]
 80033aa:	4911      	ldr	r1, [pc, #68]	; (80033f0 <TASK_MANAGER_It_ms+0x5c>)
 80033ac:	4613      	mov	r3, r2
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	1a9b      	subs	r3, r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	440b      	add	r3, r1
 80033b6:	3328      	adds	r3, #40	; 0x28
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d009      	beq.n	80033d2 <TASK_MANAGER_It_ms+0x3e>
		{
			task[t].it.call();
 80033be:	79fa      	ldrb	r2, [r7, #7]
 80033c0:	490b      	ldr	r1, [pc, #44]	; (80033f0 <TASK_MANAGER_It_ms+0x5c>)
 80033c2:	4613      	mov	r3, r2
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	1a9b      	subs	r3, r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	440b      	add	r3, r1
 80033cc:	3328      	adds	r3, #40	; 0x28
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4798      	blx	r3
	for(uint8_t t = 0; t < task_count; t++)
 80033d2:	79fb      	ldrb	r3, [r7, #7]
 80033d4:	3301      	adds	r3, #1
 80033d6:	71fb      	strb	r3, [r7, #7]
 80033d8:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <TASK_MANAGER_It_ms+0x60>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	79fa      	ldrb	r2, [r7, #7]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d3e2      	bcc.n	80033a8 <TASK_MANAGER_It_ms+0x14>
 80033e2:	e000      	b.n	80033e6 <TASK_MANAGER_It_ms+0x52>
		return;
 80033e4:	bf00      	nop
		}
	}
}
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	20000cf8 	.word	0x20000cf8
 80033f0:	20000ac8 	.word	0x20000ac8
 80033f4:	20000cf9 	.word	0x20000cf9

080033f8 <TASK_MANAGER_Add_Task>:

void TASK_MANAGER_Add_Task(char * name, void(*init)(void), void(*main)(void), void(*it)(void))
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
 8003404:	603b      	str	r3, [r7, #0]
	if(task_count == MAX_NUMBER_OF_TASK)
 8003406:	4b25      	ldr	r3, [pc, #148]	; (800349c <TASK_MANAGER_Add_Task+0xa4>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	2b0a      	cmp	r3, #10
 800340c:	d03f      	beq.n	800348e <TASK_MANAGER_Add_Task+0x96>
	{
		return;
	}
	task[task_count].name = name;
 800340e:	4b23      	ldr	r3, [pc, #140]	; (800349c <TASK_MANAGER_Add_Task+0xa4>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	4619      	mov	r1, r3
 8003414:	4a22      	ldr	r2, [pc, #136]	; (80034a0 <TASK_MANAGER_Add_Task+0xa8>)
 8003416:	460b      	mov	r3, r1
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	1a5b      	subs	r3, r3, r1
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	4413      	add	r3, r2
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	601a      	str	r2, [r3, #0]
	task[task_count].name_len = sizeof(name) - 1;
 8003424:	4b1d      	ldr	r3, [pc, #116]	; (800349c <TASK_MANAGER_Add_Task+0xa4>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	4619      	mov	r1, r3
 800342a:	4a1d      	ldr	r2, [pc, #116]	; (80034a0 <TASK_MANAGER_Add_Task+0xa8>)
 800342c:	460b      	mov	r3, r1
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	1a5b      	subs	r3, r3, r1
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	4413      	add	r3, r2
 8003436:	3304      	adds	r3, #4
 8003438:	2203      	movs	r2, #3
 800343a:	701a      	strb	r2, [r3, #0]
	task[task_count].init.call = init;
 800343c:	4b17      	ldr	r3, [pc, #92]	; (800349c <TASK_MANAGER_Add_Task+0xa4>)
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	4619      	mov	r1, r3
 8003442:	4a17      	ldr	r2, [pc, #92]	; (80034a0 <TASK_MANAGER_Add_Task+0xa8>)
 8003444:	460b      	mov	r3, r1
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	1a5b      	subs	r3, r3, r1
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	4413      	add	r3, r2
 800344e:	3308      	adds	r3, #8
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	601a      	str	r2, [r3, #0]
	task[task_count].main.call = main;
 8003454:	4b11      	ldr	r3, [pc, #68]	; (800349c <TASK_MANAGER_Add_Task+0xa4>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	4619      	mov	r1, r3
 800345a:	4a11      	ldr	r2, [pc, #68]	; (80034a0 <TASK_MANAGER_Add_Task+0xa8>)
 800345c:	460b      	mov	r3, r1
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	1a5b      	subs	r3, r3, r1
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	4413      	add	r3, r2
 8003466:	3318      	adds	r3, #24
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	601a      	str	r2, [r3, #0]
	task[task_count++].it.call = it;
 800346c:	4b0b      	ldr	r3, [pc, #44]	; (800349c <TASK_MANAGER_Add_Task+0xa4>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	1c5a      	adds	r2, r3, #1
 8003472:	b2d1      	uxtb	r1, r2
 8003474:	4a09      	ldr	r2, [pc, #36]	; (800349c <TASK_MANAGER_Add_Task+0xa4>)
 8003476:	7011      	strb	r1, [r2, #0]
 8003478:	4619      	mov	r1, r3
 800347a:	4a09      	ldr	r2, [pc, #36]	; (80034a0 <TASK_MANAGER_Add_Task+0xa8>)
 800347c:	460b      	mov	r3, r1
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	1a5b      	subs	r3, r3, r1
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	4413      	add	r3, r2
 8003486:	3328      	adds	r3, #40	; 0x28
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	e000      	b.n	8003490 <TASK_MANAGER_Add_Task+0x98>
		return;
 800348e:	bf00      	nop
}
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	20000cf9 	.word	0x20000cf9
 80034a0:	20000ac8 	.word	0x20000ac8

080034a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034a8:	4b0e      	ldr	r3, [pc, #56]	; (80034e4 <HAL_Init+0x40>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a0d      	ldr	r2, [pc, #52]	; (80034e4 <HAL_Init+0x40>)
 80034ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80034b4:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <HAL_Init+0x40>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a0a      	ldr	r2, [pc, #40]	; (80034e4 <HAL_Init+0x40>)
 80034ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034c0:	4b08      	ldr	r3, [pc, #32]	; (80034e4 <HAL_Init+0x40>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a07      	ldr	r2, [pc, #28]	; (80034e4 <HAL_Init+0x40>)
 80034c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034cc:	2003      	movs	r0, #3
 80034ce:	f000 f94f 	bl	8003770 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034d2:	200f      	movs	r0, #15
 80034d4:	f000 f808 	bl	80034e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034d8:	f7ff fb3e 	bl	8002b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	40023c00 	.word	0x40023c00

080034e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034f0:	4b12      	ldr	r3, [pc, #72]	; (800353c <HAL_InitTick+0x54>)
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	4b12      	ldr	r3, [pc, #72]	; (8003540 <HAL_InitTick+0x58>)
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	4619      	mov	r1, r3
 80034fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003502:	fbb2 f3f3 	udiv	r3, r2, r3
 8003506:	4618      	mov	r0, r3
 8003508:	f000 f967 	bl	80037da <HAL_SYSTICK_Config>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e00e      	b.n	8003534 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b0f      	cmp	r3, #15
 800351a:	d80a      	bhi.n	8003532 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800351c:	2200      	movs	r2, #0
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	f04f 30ff 	mov.w	r0, #4294967295
 8003524:	f000 f92f 	bl	8003786 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003528:	4a06      	ldr	r2, [pc, #24]	; (8003544 <HAL_InitTick+0x5c>)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800352e:	2300      	movs	r3, #0
 8003530:	e000      	b.n	8003534 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
}
 8003534:	4618      	mov	r0, r3
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	200000e0 	.word	0x200000e0
 8003540:	200000e8 	.word	0x200000e8
 8003544:	200000e4 	.word	0x200000e4

08003548 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800354c:	4b06      	ldr	r3, [pc, #24]	; (8003568 <HAL_IncTick+0x20>)
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	461a      	mov	r2, r3
 8003552:	4b06      	ldr	r3, [pc, #24]	; (800356c <HAL_IncTick+0x24>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4413      	add	r3, r2
 8003558:	4a04      	ldr	r2, [pc, #16]	; (800356c <HAL_IncTick+0x24>)
 800355a:	6013      	str	r3, [r2, #0]
}
 800355c:	bf00      	nop
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	200000e8 	.word	0x200000e8
 800356c:	20001060 	.word	0x20001060

08003570 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  return uwTick;
 8003574:	4b03      	ldr	r3, [pc, #12]	; (8003584 <HAL_GetTick+0x14>)
 8003576:	681b      	ldr	r3, [r3, #0]
}
 8003578:	4618      	mov	r0, r3
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	20001060 	.word	0x20001060

08003588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003590:	f7ff ffee 	bl	8003570 <HAL_GetTick>
 8003594:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a0:	d005      	beq.n	80035ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035a2:	4b0a      	ldr	r3, [pc, #40]	; (80035cc <HAL_Delay+0x44>)
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	461a      	mov	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	4413      	add	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80035ae:	bf00      	nop
 80035b0:	f7ff ffde 	bl	8003570 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d8f7      	bhi.n	80035b0 <HAL_Delay+0x28>
  {
  }
}
 80035c0:	bf00      	nop
 80035c2:	bf00      	nop
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	200000e8 	.word	0x200000e8

080035d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f003 0307 	and.w	r3, r3, #7
 80035de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035e0:	4b0c      	ldr	r3, [pc, #48]	; (8003614 <__NVIC_SetPriorityGrouping+0x44>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035ec:	4013      	ands	r3, r2
 80035ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003602:	4a04      	ldr	r2, [pc, #16]	; (8003614 <__NVIC_SetPriorityGrouping+0x44>)
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	60d3      	str	r3, [r2, #12]
}
 8003608:	bf00      	nop
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	e000ed00 	.word	0xe000ed00

08003618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800361c:	4b04      	ldr	r3, [pc, #16]	; (8003630 <__NVIC_GetPriorityGrouping+0x18>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	0a1b      	lsrs	r3, r3, #8
 8003622:	f003 0307 	and.w	r3, r3, #7
}
 8003626:	4618      	mov	r0, r3
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr
 8003630:	e000ed00 	.word	0xe000ed00

08003634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800363e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003642:	2b00      	cmp	r3, #0
 8003644:	db0b      	blt.n	800365e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003646:	79fb      	ldrb	r3, [r7, #7]
 8003648:	f003 021f 	and.w	r2, r3, #31
 800364c:	4907      	ldr	r1, [pc, #28]	; (800366c <__NVIC_EnableIRQ+0x38>)
 800364e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003652:	095b      	lsrs	r3, r3, #5
 8003654:	2001      	movs	r0, #1
 8003656:	fa00 f202 	lsl.w	r2, r0, r2
 800365a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	e000e100 	.word	0xe000e100

08003670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	4603      	mov	r3, r0
 8003678:	6039      	str	r1, [r7, #0]
 800367a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800367c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003680:	2b00      	cmp	r3, #0
 8003682:	db0a      	blt.n	800369a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	b2da      	uxtb	r2, r3
 8003688:	490c      	ldr	r1, [pc, #48]	; (80036bc <__NVIC_SetPriority+0x4c>)
 800368a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368e:	0112      	lsls	r2, r2, #4
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	440b      	add	r3, r1
 8003694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003698:	e00a      	b.n	80036b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	b2da      	uxtb	r2, r3
 800369e:	4908      	ldr	r1, [pc, #32]	; (80036c0 <__NVIC_SetPriority+0x50>)
 80036a0:	79fb      	ldrb	r3, [r7, #7]
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	3b04      	subs	r3, #4
 80036a8:	0112      	lsls	r2, r2, #4
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	440b      	add	r3, r1
 80036ae:	761a      	strb	r2, [r3, #24]
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	e000e100 	.word	0xe000e100
 80036c0:	e000ed00 	.word	0xe000ed00

080036c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b089      	sub	sp, #36	; 0x24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f1c3 0307 	rsb	r3, r3, #7
 80036de:	2b04      	cmp	r3, #4
 80036e0:	bf28      	it	cs
 80036e2:	2304      	movcs	r3, #4
 80036e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	3304      	adds	r3, #4
 80036ea:	2b06      	cmp	r3, #6
 80036ec:	d902      	bls.n	80036f4 <NVIC_EncodePriority+0x30>
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	3b03      	subs	r3, #3
 80036f2:	e000      	b.n	80036f6 <NVIC_EncodePriority+0x32>
 80036f4:	2300      	movs	r3, #0
 80036f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036f8:	f04f 32ff 	mov.w	r2, #4294967295
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	43da      	mvns	r2, r3
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	401a      	ands	r2, r3
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800370c:	f04f 31ff 	mov.w	r1, #4294967295
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	fa01 f303 	lsl.w	r3, r1, r3
 8003716:	43d9      	mvns	r1, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800371c:	4313      	orrs	r3, r2
         );
}
 800371e:	4618      	mov	r0, r3
 8003720:	3724      	adds	r7, #36	; 0x24
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
	...

0800372c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3b01      	subs	r3, #1
 8003738:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800373c:	d301      	bcc.n	8003742 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800373e:	2301      	movs	r3, #1
 8003740:	e00f      	b.n	8003762 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003742:	4a0a      	ldr	r2, [pc, #40]	; (800376c <SysTick_Config+0x40>)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3b01      	subs	r3, #1
 8003748:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800374a:	210f      	movs	r1, #15
 800374c:	f04f 30ff 	mov.w	r0, #4294967295
 8003750:	f7ff ff8e 	bl	8003670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003754:	4b05      	ldr	r3, [pc, #20]	; (800376c <SysTick_Config+0x40>)
 8003756:	2200      	movs	r2, #0
 8003758:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800375a:	4b04      	ldr	r3, [pc, #16]	; (800376c <SysTick_Config+0x40>)
 800375c:	2207      	movs	r2, #7
 800375e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	e000e010 	.word	0xe000e010

08003770 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f7ff ff29 	bl	80035d0 <__NVIC_SetPriorityGrouping>
}
 800377e:	bf00      	nop
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003786:	b580      	push	{r7, lr}
 8003788:	b086      	sub	sp, #24
 800378a:	af00      	add	r7, sp, #0
 800378c:	4603      	mov	r3, r0
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	607a      	str	r2, [r7, #4]
 8003792:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003794:	2300      	movs	r3, #0
 8003796:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003798:	f7ff ff3e 	bl	8003618 <__NVIC_GetPriorityGrouping>
 800379c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	68b9      	ldr	r1, [r7, #8]
 80037a2:	6978      	ldr	r0, [r7, #20]
 80037a4:	f7ff ff8e 	bl	80036c4 <NVIC_EncodePriority>
 80037a8:	4602      	mov	r2, r0
 80037aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ae:	4611      	mov	r1, r2
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff ff5d 	bl	8003670 <__NVIC_SetPriority>
}
 80037b6:	bf00      	nop
 80037b8:	3718      	adds	r7, #24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b082      	sub	sp, #8
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	4603      	mov	r3, r0
 80037c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff ff31 	bl	8003634 <__NVIC_EnableIRQ>
}
 80037d2:	bf00      	nop
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b082      	sub	sp, #8
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7ff ffa2 	bl	800372c <SysTick_Config>
 80037e8:	4603      	mov	r3, r0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
	...

080037f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003800:	f7ff feb6 	bl	8003570 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e099      	b.n	8003944 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2202      	movs	r2, #2
 8003814:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0201 	bic.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003830:	e00f      	b.n	8003852 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003832:	f7ff fe9d 	bl	8003570 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b05      	cmp	r3, #5
 800383e:	d908      	bls.n	8003852 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2220      	movs	r2, #32
 8003844:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2203      	movs	r2, #3
 800384a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e078      	b.n	8003944 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1e8      	bne.n	8003832 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	4b38      	ldr	r3, [pc, #224]	; (800394c <HAL_DMA_Init+0x158>)
 800386c:	4013      	ands	r3, r2
 800386e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800387e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800388a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003896:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	d107      	bne.n	80038bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b4:	4313      	orrs	r3, r2
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	f023 0307 	bic.w	r3, r3, #7
 80038d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	4313      	orrs	r3, r2
 80038dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d117      	bne.n	8003916 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00e      	beq.n	8003916 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 fb01 	bl	8003f00 <DMA_CheckFifoParam>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d008      	beq.n	8003916 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2240      	movs	r2, #64	; 0x40
 8003908:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003912:	2301      	movs	r3, #1
 8003914:	e016      	b.n	8003944 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 fab8 	bl	8003e94 <DMA_CalcBaseAndBitshift>
 8003924:	4603      	mov	r3, r0
 8003926:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392c:	223f      	movs	r2, #63	; 0x3f
 800392e:	409a      	lsls	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	f010803f 	.word	0xf010803f

08003950 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
 800395c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800395e:	2300      	movs	r3, #0
 8003960:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003966:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800396e:	2b01      	cmp	r3, #1
 8003970:	d101      	bne.n	8003976 <HAL_DMA_Start_IT+0x26>
 8003972:	2302      	movs	r3, #2
 8003974:	e040      	b.n	80039f8 <HAL_DMA_Start_IT+0xa8>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b01      	cmp	r3, #1
 8003988:	d12f      	bne.n	80039ea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2202      	movs	r2, #2
 800398e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	68b9      	ldr	r1, [r7, #8]
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f000 fa4a 	bl	8003e38 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a8:	223f      	movs	r2, #63	; 0x3f
 80039aa:	409a      	lsls	r2, r3
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0216 	orr.w	r2, r2, #22
 80039be:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d007      	beq.n	80039d8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0208 	orr.w	r2, r2, #8
 80039d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f042 0201 	orr.w	r2, r2, #1
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	e005      	b.n	80039f6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80039f2:	2302      	movs	r3, #2
 80039f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80039f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3718      	adds	r7, #24
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a0c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003a0e:	f7ff fdaf 	bl	8003570 <HAL_GetTick>
 8003a12:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d008      	beq.n	8003a32 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2280      	movs	r2, #128	; 0x80
 8003a24:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e052      	b.n	8003ad8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 0216 	bic.w	r2, r2, #22
 8003a40:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695a      	ldr	r2, [r3, #20]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a50:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d103      	bne.n	8003a62 <HAL_DMA_Abort+0x62>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d007      	beq.n	8003a72 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 0208 	bic.w	r2, r2, #8
 8003a70:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 0201 	bic.w	r2, r2, #1
 8003a80:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a82:	e013      	b.n	8003aac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a84:	f7ff fd74 	bl	8003570 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b05      	cmp	r3, #5
 8003a90:	d90c      	bls.n	8003aac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2220      	movs	r2, #32
 8003a96:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2203      	movs	r2, #3
 8003a9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e015      	b.n	8003ad8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1e4      	bne.n	8003a84 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003abe:	223f      	movs	r2, #63	; 0x3f
 8003ac0:	409a      	lsls	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d004      	beq.n	8003afe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2280      	movs	r2, #128	; 0x80
 8003af8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e00c      	b.n	8003b18 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2205      	movs	r2, #5
 8003b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 0201 	bic.w	r2, r2, #1
 8003b14:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b30:	4b92      	ldr	r3, [pc, #584]	; (8003d7c <HAL_DMA_IRQHandler+0x258>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a92      	ldr	r2, [pc, #584]	; (8003d80 <HAL_DMA_IRQHandler+0x25c>)
 8003b36:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3a:	0a9b      	lsrs	r3, r3, #10
 8003b3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4e:	2208      	movs	r2, #8
 8003b50:	409a      	lsls	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	4013      	ands	r3, r2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d01a      	beq.n	8003b90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d013      	beq.n	8003b90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 0204 	bic.w	r2, r2, #4
 8003b76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7c:	2208      	movs	r2, #8
 8003b7e:	409a      	lsls	r2, r3
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b88:	f043 0201 	orr.w	r2, r3, #1
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b94:	2201      	movs	r2, #1
 8003b96:	409a      	lsls	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d012      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00b      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	409a      	lsls	r2, r3
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bbe:	f043 0202 	orr.w	r2, r3, #2
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bca:	2204      	movs	r2, #4
 8003bcc:	409a      	lsls	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d012      	beq.n	8003bfc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00b      	beq.n	8003bfc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be8:	2204      	movs	r2, #4
 8003bea:	409a      	lsls	r2, r3
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf4:	f043 0204 	orr.w	r2, r3, #4
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c00:	2210      	movs	r2, #16
 8003c02:	409a      	lsls	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4013      	ands	r3, r2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d043      	beq.n	8003c94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d03c      	beq.n	8003c94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c1e:	2210      	movs	r2, #16
 8003c20:	409a      	lsls	r2, r3
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d018      	beq.n	8003c66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d108      	bne.n	8003c54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d024      	beq.n	8003c94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	4798      	blx	r3
 8003c52:	e01f      	b.n	8003c94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d01b      	beq.n	8003c94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	4798      	blx	r3
 8003c64:	e016      	b.n	8003c94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d107      	bne.n	8003c84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0208 	bic.w	r2, r2, #8
 8003c82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d003      	beq.n	8003c94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c98:	2220      	movs	r2, #32
 8003c9a:	409a      	lsls	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 808e 	beq.w	8003dc2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0310 	and.w	r3, r3, #16
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 8086 	beq.w	8003dc2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cba:	2220      	movs	r2, #32
 8003cbc:	409a      	lsls	r2, r3
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b05      	cmp	r3, #5
 8003ccc:	d136      	bne.n	8003d3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0216 	bic.w	r2, r2, #22
 8003cdc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	695a      	ldr	r2, [r3, #20]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d103      	bne.n	8003cfe <HAL_DMA_IRQHandler+0x1da>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d007      	beq.n	8003d0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 0208 	bic.w	r2, r2, #8
 8003d0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d12:	223f      	movs	r2, #63	; 0x3f
 8003d14:	409a      	lsls	r2, r3
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d07d      	beq.n	8003e2e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	4798      	blx	r3
        }
        return;
 8003d3a:	e078      	b.n	8003e2e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d01c      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d108      	bne.n	8003d6a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d030      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	4798      	blx	r3
 8003d68:	e02b      	b.n	8003dc2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d027      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	4798      	blx	r3
 8003d7a:	e022      	b.n	8003dc2 <HAL_DMA_IRQHandler+0x29e>
 8003d7c:	200000e0 	.word	0x200000e0
 8003d80:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10f      	bne.n	8003db2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0210 	bic.w	r2, r2, #16
 8003da0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d032      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d022      	beq.n	8003e1c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2205      	movs	r2, #5
 8003dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0201 	bic.w	r2, r2, #1
 8003dec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	3301      	adds	r3, #1
 8003df2:	60bb      	str	r3, [r7, #8]
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d307      	bcc.n	8003e0a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1f2      	bne.n	8003dee <HAL_DMA_IRQHandler+0x2ca>
 8003e08:	e000      	b.n	8003e0c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003e0a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d005      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	4798      	blx	r3
 8003e2c:	e000      	b.n	8003e30 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003e2e:	bf00      	nop
    }
  }
}
 8003e30:	3718      	adds	r7, #24
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop

08003e38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
 8003e44:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e54:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	2b40      	cmp	r3, #64	; 0x40
 8003e64:	d108      	bne.n	8003e78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e76:	e007      	b.n	8003e88 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	60da      	str	r2, [r3, #12]
}
 8003e88:	bf00      	nop
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	3b10      	subs	r3, #16
 8003ea4:	4a14      	ldr	r2, [pc, #80]	; (8003ef8 <DMA_CalcBaseAndBitshift+0x64>)
 8003ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eaa:	091b      	lsrs	r3, r3, #4
 8003eac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003eae:	4a13      	ldr	r2, [pc, #76]	; (8003efc <DMA_CalcBaseAndBitshift+0x68>)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2b03      	cmp	r3, #3
 8003ec0:	d909      	bls.n	8003ed6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003eca:	f023 0303 	bic.w	r3, r3, #3
 8003ece:	1d1a      	adds	r2, r3, #4
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	659a      	str	r2, [r3, #88]	; 0x58
 8003ed4:	e007      	b.n	8003ee6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ede:	f023 0303 	bic.w	r3, r3, #3
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	aaaaaaab 	.word	0xaaaaaaab
 8003efc:	08008a84 	.word	0x08008a84

08003f00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d11f      	bne.n	8003f5a <DMA_CheckFifoParam+0x5a>
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	2b03      	cmp	r3, #3
 8003f1e:	d856      	bhi.n	8003fce <DMA_CheckFifoParam+0xce>
 8003f20:	a201      	add	r2, pc, #4	; (adr r2, 8003f28 <DMA_CheckFifoParam+0x28>)
 8003f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f26:	bf00      	nop
 8003f28:	08003f39 	.word	0x08003f39
 8003f2c:	08003f4b 	.word	0x08003f4b
 8003f30:	08003f39 	.word	0x08003f39
 8003f34:	08003fcf 	.word	0x08003fcf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d046      	beq.n	8003fd2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f48:	e043      	b.n	8003fd2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f52:	d140      	bne.n	8003fd6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f58:	e03d      	b.n	8003fd6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f62:	d121      	bne.n	8003fa8 <DMA_CheckFifoParam+0xa8>
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	2b03      	cmp	r3, #3
 8003f68:	d837      	bhi.n	8003fda <DMA_CheckFifoParam+0xda>
 8003f6a:	a201      	add	r2, pc, #4	; (adr r2, 8003f70 <DMA_CheckFifoParam+0x70>)
 8003f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f70:	08003f81 	.word	0x08003f81
 8003f74:	08003f87 	.word	0x08003f87
 8003f78:	08003f81 	.word	0x08003f81
 8003f7c:	08003f99 	.word	0x08003f99
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	73fb      	strb	r3, [r7, #15]
      break;
 8003f84:	e030      	b.n	8003fe8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d025      	beq.n	8003fde <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f96:	e022      	b.n	8003fde <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003fa0:	d11f      	bne.n	8003fe2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003fa6:	e01c      	b.n	8003fe2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d903      	bls.n	8003fb6 <DMA_CheckFifoParam+0xb6>
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2b03      	cmp	r3, #3
 8003fb2:	d003      	beq.n	8003fbc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003fb4:	e018      	b.n	8003fe8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	73fb      	strb	r3, [r7, #15]
      break;
 8003fba:	e015      	b.n	8003fe8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00e      	beq.n	8003fe6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	73fb      	strb	r3, [r7, #15]
      break;
 8003fcc:	e00b      	b.n	8003fe6 <DMA_CheckFifoParam+0xe6>
      break;
 8003fce:	bf00      	nop
 8003fd0:	e00a      	b.n	8003fe8 <DMA_CheckFifoParam+0xe8>
      break;
 8003fd2:	bf00      	nop
 8003fd4:	e008      	b.n	8003fe8 <DMA_CheckFifoParam+0xe8>
      break;
 8003fd6:	bf00      	nop
 8003fd8:	e006      	b.n	8003fe8 <DMA_CheckFifoParam+0xe8>
      break;
 8003fda:	bf00      	nop
 8003fdc:	e004      	b.n	8003fe8 <DMA_CheckFifoParam+0xe8>
      break;
 8003fde:	bf00      	nop
 8003fe0:	e002      	b.n	8003fe8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003fe2:	bf00      	nop
 8003fe4:	e000      	b.n	8003fe8 <DMA_CheckFifoParam+0xe8>
      break;
 8003fe6:	bf00      	nop
    }
  } 
  
  return status; 
 8003fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3714      	adds	r7, #20
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop

08003ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b089      	sub	sp, #36	; 0x24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004002:	2300      	movs	r3, #0
 8004004:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004006:	2300      	movs	r3, #0
 8004008:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800400a:	2300      	movs	r3, #0
 800400c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800400e:	2300      	movs	r3, #0
 8004010:	61fb      	str	r3, [r7, #28]
 8004012:	e16b      	b.n	80042ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004014:	2201      	movs	r2, #1
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	fa02 f303 	lsl.w	r3, r2, r3
 800401c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	4013      	ands	r3, r2
 8004026:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	429a      	cmp	r2, r3
 800402e:	f040 815a 	bne.w	80042e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f003 0303 	and.w	r3, r3, #3
 800403a:	2b01      	cmp	r3, #1
 800403c:	d005      	beq.n	800404a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004046:	2b02      	cmp	r3, #2
 8004048:	d130      	bne.n	80040ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	2203      	movs	r2, #3
 8004056:	fa02 f303 	lsl.w	r3, r2, r3
 800405a:	43db      	mvns	r3, r3
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	4013      	ands	r3, r2
 8004060:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	68da      	ldr	r2, [r3, #12]
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	005b      	lsls	r3, r3, #1
 800406a:	fa02 f303 	lsl.w	r3, r2, r3
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	4313      	orrs	r3, r2
 8004072:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004080:	2201      	movs	r2, #1
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	fa02 f303 	lsl.w	r3, r2, r3
 8004088:	43db      	mvns	r3, r3
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	4013      	ands	r3, r2
 800408e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	091b      	lsrs	r3, r3, #4
 8004096:	f003 0201 	and.w	r2, r3, #1
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f003 0303 	and.w	r3, r3, #3
 80040b4:	2b03      	cmp	r3, #3
 80040b6:	d017      	beq.n	80040e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	2203      	movs	r2, #3
 80040c4:	fa02 f303 	lsl.w	r3, r2, r3
 80040c8:	43db      	mvns	r3, r3
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	4013      	ands	r3, r2
 80040ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	4313      	orrs	r3, r2
 80040e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f003 0303 	and.w	r3, r3, #3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d123      	bne.n	800413c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	08da      	lsrs	r2, r3, #3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	3208      	adds	r2, #8
 80040fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004100:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	220f      	movs	r2, #15
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	43db      	mvns	r3, r3
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	4013      	ands	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	691a      	ldr	r2, [r3, #16]
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	f003 0307 	and.w	r3, r3, #7
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	4313      	orrs	r3, r2
 800412c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	08da      	lsrs	r2, r3, #3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	3208      	adds	r2, #8
 8004136:	69b9      	ldr	r1, [r7, #24]
 8004138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	2203      	movs	r2, #3
 8004148:	fa02 f303 	lsl.w	r3, r2, r3
 800414c:	43db      	mvns	r3, r3
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	4013      	ands	r3, r2
 8004152:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f003 0203 	and.w	r2, r3, #3
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	fa02 f303 	lsl.w	r3, r2, r3
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	4313      	orrs	r3, r2
 8004168:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 80b4 	beq.w	80042e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800417e:	2300      	movs	r3, #0
 8004180:	60fb      	str	r3, [r7, #12]
 8004182:	4b60      	ldr	r3, [pc, #384]	; (8004304 <HAL_GPIO_Init+0x30c>)
 8004184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004186:	4a5f      	ldr	r2, [pc, #380]	; (8004304 <HAL_GPIO_Init+0x30c>)
 8004188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800418c:	6453      	str	r3, [r2, #68]	; 0x44
 800418e:	4b5d      	ldr	r3, [pc, #372]	; (8004304 <HAL_GPIO_Init+0x30c>)
 8004190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004196:	60fb      	str	r3, [r7, #12]
 8004198:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800419a:	4a5b      	ldr	r2, [pc, #364]	; (8004308 <HAL_GPIO_Init+0x310>)
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	089b      	lsrs	r3, r3, #2
 80041a0:	3302      	adds	r3, #2
 80041a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	220f      	movs	r2, #15
 80041b2:	fa02 f303 	lsl.w	r3, r2, r3
 80041b6:	43db      	mvns	r3, r3
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	4013      	ands	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a52      	ldr	r2, [pc, #328]	; (800430c <HAL_GPIO_Init+0x314>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d02b      	beq.n	800421e <HAL_GPIO_Init+0x226>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a51      	ldr	r2, [pc, #324]	; (8004310 <HAL_GPIO_Init+0x318>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d025      	beq.n	800421a <HAL_GPIO_Init+0x222>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a50      	ldr	r2, [pc, #320]	; (8004314 <HAL_GPIO_Init+0x31c>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d01f      	beq.n	8004216 <HAL_GPIO_Init+0x21e>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a4f      	ldr	r2, [pc, #316]	; (8004318 <HAL_GPIO_Init+0x320>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d019      	beq.n	8004212 <HAL_GPIO_Init+0x21a>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a4e      	ldr	r2, [pc, #312]	; (800431c <HAL_GPIO_Init+0x324>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d013      	beq.n	800420e <HAL_GPIO_Init+0x216>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a4d      	ldr	r2, [pc, #308]	; (8004320 <HAL_GPIO_Init+0x328>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d00d      	beq.n	800420a <HAL_GPIO_Init+0x212>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a4c      	ldr	r2, [pc, #304]	; (8004324 <HAL_GPIO_Init+0x32c>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d007      	beq.n	8004206 <HAL_GPIO_Init+0x20e>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a4b      	ldr	r2, [pc, #300]	; (8004328 <HAL_GPIO_Init+0x330>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d101      	bne.n	8004202 <HAL_GPIO_Init+0x20a>
 80041fe:	2307      	movs	r3, #7
 8004200:	e00e      	b.n	8004220 <HAL_GPIO_Init+0x228>
 8004202:	2308      	movs	r3, #8
 8004204:	e00c      	b.n	8004220 <HAL_GPIO_Init+0x228>
 8004206:	2306      	movs	r3, #6
 8004208:	e00a      	b.n	8004220 <HAL_GPIO_Init+0x228>
 800420a:	2305      	movs	r3, #5
 800420c:	e008      	b.n	8004220 <HAL_GPIO_Init+0x228>
 800420e:	2304      	movs	r3, #4
 8004210:	e006      	b.n	8004220 <HAL_GPIO_Init+0x228>
 8004212:	2303      	movs	r3, #3
 8004214:	e004      	b.n	8004220 <HAL_GPIO_Init+0x228>
 8004216:	2302      	movs	r3, #2
 8004218:	e002      	b.n	8004220 <HAL_GPIO_Init+0x228>
 800421a:	2301      	movs	r3, #1
 800421c:	e000      	b.n	8004220 <HAL_GPIO_Init+0x228>
 800421e:	2300      	movs	r3, #0
 8004220:	69fa      	ldr	r2, [r7, #28]
 8004222:	f002 0203 	and.w	r2, r2, #3
 8004226:	0092      	lsls	r2, r2, #2
 8004228:	4093      	lsls	r3, r2
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	4313      	orrs	r3, r2
 800422e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004230:	4935      	ldr	r1, [pc, #212]	; (8004308 <HAL_GPIO_Init+0x310>)
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	089b      	lsrs	r3, r3, #2
 8004236:	3302      	adds	r3, #2
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800423e:	4b3b      	ldr	r3, [pc, #236]	; (800432c <HAL_GPIO_Init+0x334>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	43db      	mvns	r3, r3
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	4013      	ands	r3, r2
 800424c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	4313      	orrs	r3, r2
 8004260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004262:	4a32      	ldr	r2, [pc, #200]	; (800432c <HAL_GPIO_Init+0x334>)
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004268:	4b30      	ldr	r3, [pc, #192]	; (800432c <HAL_GPIO_Init+0x334>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	43db      	mvns	r3, r3
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	4013      	ands	r3, r2
 8004276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d003      	beq.n	800428c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	4313      	orrs	r3, r2
 800428a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800428c:	4a27      	ldr	r2, [pc, #156]	; (800432c <HAL_GPIO_Init+0x334>)
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004292:	4b26      	ldr	r3, [pc, #152]	; (800432c <HAL_GPIO_Init+0x334>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	43db      	mvns	r3, r3
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	4013      	ands	r3, r2
 80042a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042b6:	4a1d      	ldr	r2, [pc, #116]	; (800432c <HAL_GPIO_Init+0x334>)
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042bc:	4b1b      	ldr	r3, [pc, #108]	; (800432c <HAL_GPIO_Init+0x334>)
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	43db      	mvns	r3, r3
 80042c6:	69ba      	ldr	r2, [r7, #24]
 80042c8:	4013      	ands	r3, r2
 80042ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d003      	beq.n	80042e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	4313      	orrs	r3, r2
 80042de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042e0:	4a12      	ldr	r2, [pc, #72]	; (800432c <HAL_GPIO_Init+0x334>)
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	3301      	adds	r3, #1
 80042ea:	61fb      	str	r3, [r7, #28]
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	2b0f      	cmp	r3, #15
 80042f0:	f67f ae90 	bls.w	8004014 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042f4:	bf00      	nop
 80042f6:	bf00      	nop
 80042f8:	3724      	adds	r7, #36	; 0x24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	40023800 	.word	0x40023800
 8004308:	40013800 	.word	0x40013800
 800430c:	40020000 	.word	0x40020000
 8004310:	40020400 	.word	0x40020400
 8004314:	40020800 	.word	0x40020800
 8004318:	40020c00 	.word	0x40020c00
 800431c:	40021000 	.word	0x40021000
 8004320:	40021400 	.word	0x40021400
 8004324:	40021800 	.word	0x40021800
 8004328:	40021c00 	.word	0x40021c00
 800432c:	40013c00 	.word	0x40013c00

08004330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	460b      	mov	r3, r1
 800433a:	807b      	strh	r3, [r7, #2]
 800433c:	4613      	mov	r3, r2
 800433e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004340:	787b      	ldrb	r3, [r7, #1]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004346:	887a      	ldrh	r2, [r7, #2]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800434c:	e003      	b.n	8004356 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800434e:	887b      	ldrh	r3, [r7, #2]
 8004350:	041a      	lsls	r2, r3, #16
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	619a      	str	r2, [r3, #24]
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
	...

08004364 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e12b      	b.n	80045ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d106      	bne.n	8004390 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7fe fa4c 	bl	8002828 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2224      	movs	r2, #36	; 0x24
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 0201 	bic.w	r2, r2, #1
 80043a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80043c8:	f001 fbac 	bl	8005b24 <HAL_RCC_GetPCLK1Freq>
 80043cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	4a81      	ldr	r2, [pc, #516]	; (80045d8 <HAL_I2C_Init+0x274>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d807      	bhi.n	80043e8 <HAL_I2C_Init+0x84>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4a80      	ldr	r2, [pc, #512]	; (80045dc <HAL_I2C_Init+0x278>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	bf94      	ite	ls
 80043e0:	2301      	movls	r3, #1
 80043e2:	2300      	movhi	r3, #0
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	e006      	b.n	80043f6 <HAL_I2C_Init+0x92>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	4a7d      	ldr	r2, [pc, #500]	; (80045e0 <HAL_I2C_Init+0x27c>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	bf94      	ite	ls
 80043f0:	2301      	movls	r3, #1
 80043f2:	2300      	movhi	r3, #0
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e0e7      	b.n	80045ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	4a78      	ldr	r2, [pc, #480]	; (80045e4 <HAL_I2C_Init+0x280>)
 8004402:	fba2 2303 	umull	r2, r3, r2, r3
 8004406:	0c9b      	lsrs	r3, r3, #18
 8004408:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	430a      	orrs	r2, r1
 800441c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	4a6a      	ldr	r2, [pc, #424]	; (80045d8 <HAL_I2C_Init+0x274>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d802      	bhi.n	8004438 <HAL_I2C_Init+0xd4>
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	3301      	adds	r3, #1
 8004436:	e009      	b.n	800444c <HAL_I2C_Init+0xe8>
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800443e:	fb02 f303 	mul.w	r3, r2, r3
 8004442:	4a69      	ldr	r2, [pc, #420]	; (80045e8 <HAL_I2C_Init+0x284>)
 8004444:	fba2 2303 	umull	r2, r3, r2, r3
 8004448:	099b      	lsrs	r3, r3, #6
 800444a:	3301      	adds	r3, #1
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	6812      	ldr	r2, [r2, #0]
 8004450:	430b      	orrs	r3, r1
 8004452:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800445e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	495c      	ldr	r1, [pc, #368]	; (80045d8 <HAL_I2C_Init+0x274>)
 8004468:	428b      	cmp	r3, r1
 800446a:	d819      	bhi.n	80044a0 <HAL_I2C_Init+0x13c>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	1e59      	subs	r1, r3, #1
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	fbb1 f3f3 	udiv	r3, r1, r3
 800447a:	1c59      	adds	r1, r3, #1
 800447c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004480:	400b      	ands	r3, r1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00a      	beq.n	800449c <HAL_I2C_Init+0x138>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	1e59      	subs	r1, r3, #1
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	fbb1 f3f3 	udiv	r3, r1, r3
 8004494:	3301      	adds	r3, #1
 8004496:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800449a:	e051      	b.n	8004540 <HAL_I2C_Init+0x1dc>
 800449c:	2304      	movs	r3, #4
 800449e:	e04f      	b.n	8004540 <HAL_I2C_Init+0x1dc>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d111      	bne.n	80044cc <HAL_I2C_Init+0x168>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	1e58      	subs	r0, r3, #1
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6859      	ldr	r1, [r3, #4]
 80044b0:	460b      	mov	r3, r1
 80044b2:	005b      	lsls	r3, r3, #1
 80044b4:	440b      	add	r3, r1
 80044b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80044ba:	3301      	adds	r3, #1
 80044bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	bf0c      	ite	eq
 80044c4:	2301      	moveq	r3, #1
 80044c6:	2300      	movne	r3, #0
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	e012      	b.n	80044f2 <HAL_I2C_Init+0x18e>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	1e58      	subs	r0, r3, #1
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6859      	ldr	r1, [r3, #4]
 80044d4:	460b      	mov	r3, r1
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	440b      	add	r3, r1
 80044da:	0099      	lsls	r1, r3, #2
 80044dc:	440b      	add	r3, r1
 80044de:	fbb0 f3f3 	udiv	r3, r0, r3
 80044e2:	3301      	adds	r3, #1
 80044e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	bf0c      	ite	eq
 80044ec:	2301      	moveq	r3, #1
 80044ee:	2300      	movne	r3, #0
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <HAL_I2C_Init+0x196>
 80044f6:	2301      	movs	r3, #1
 80044f8:	e022      	b.n	8004540 <HAL_I2C_Init+0x1dc>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10e      	bne.n	8004520 <HAL_I2C_Init+0x1bc>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	1e58      	subs	r0, r3, #1
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6859      	ldr	r1, [r3, #4]
 800450a:	460b      	mov	r3, r1
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	440b      	add	r3, r1
 8004510:	fbb0 f3f3 	udiv	r3, r0, r3
 8004514:	3301      	adds	r3, #1
 8004516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800451a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800451e:	e00f      	b.n	8004540 <HAL_I2C_Init+0x1dc>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	1e58      	subs	r0, r3, #1
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6859      	ldr	r1, [r3, #4]
 8004528:	460b      	mov	r3, r1
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	440b      	add	r3, r1
 800452e:	0099      	lsls	r1, r3, #2
 8004530:	440b      	add	r3, r1
 8004532:	fbb0 f3f3 	udiv	r3, r0, r3
 8004536:	3301      	adds	r3, #1
 8004538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800453c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004540:	6879      	ldr	r1, [r7, #4]
 8004542:	6809      	ldr	r1, [r1, #0]
 8004544:	4313      	orrs	r3, r2
 8004546:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69da      	ldr	r2, [r3, #28]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	431a      	orrs	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800456e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6911      	ldr	r1, [r2, #16]
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	68d2      	ldr	r2, [r2, #12]
 800457a:	4311      	orrs	r1, r2
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	6812      	ldr	r2, [r2, #0]
 8004580:	430b      	orrs	r3, r1
 8004582:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	695a      	ldr	r2, [r3, #20]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	431a      	orrs	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f042 0201 	orr.w	r2, r2, #1
 80045ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2220      	movs	r2, #32
 80045ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	000186a0 	.word	0x000186a0
 80045dc:	001e847f 	.word	0x001e847f
 80045e0:	003d08ff 	.word	0x003d08ff
 80045e4:	431bde83 	.word	0x431bde83
 80045e8:	10624dd3 	.word	0x10624dd3

080045ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b088      	sub	sp, #32
 80045f0:	af02      	add	r7, sp, #8
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	4608      	mov	r0, r1
 80045f6:	4611      	mov	r1, r2
 80045f8:	461a      	mov	r2, r3
 80045fa:	4603      	mov	r3, r0
 80045fc:	817b      	strh	r3, [r7, #10]
 80045fe:	460b      	mov	r3, r1
 8004600:	813b      	strh	r3, [r7, #8]
 8004602:	4613      	mov	r3, r2
 8004604:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004606:	f7fe ffb3 	bl	8003570 <HAL_GetTick>
 800460a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b20      	cmp	r3, #32
 8004616:	f040 80d9 	bne.w	80047cc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	2319      	movs	r3, #25
 8004620:	2201      	movs	r2, #1
 8004622:	496d      	ldr	r1, [pc, #436]	; (80047d8 <HAL_I2C_Mem_Write+0x1ec>)
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f000 fc7f 	bl	8004f28 <I2C_WaitOnFlagUntilTimeout>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004630:	2302      	movs	r3, #2
 8004632:	e0cc      	b.n	80047ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800463a:	2b01      	cmp	r3, #1
 800463c:	d101      	bne.n	8004642 <HAL_I2C_Mem_Write+0x56>
 800463e:	2302      	movs	r3, #2
 8004640:	e0c5      	b.n	80047ce <HAL_I2C_Mem_Write+0x1e2>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0301 	and.w	r3, r3, #1
 8004654:	2b01      	cmp	r3, #1
 8004656:	d007      	beq.n	8004668 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f042 0201 	orr.w	r2, r2, #1
 8004666:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004676:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2221      	movs	r2, #33	; 0x21
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2240      	movs	r2, #64	; 0x40
 8004684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6a3a      	ldr	r2, [r7, #32]
 8004692:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004698:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469e:	b29a      	uxth	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4a4d      	ldr	r2, [pc, #308]	; (80047dc <HAL_I2C_Mem_Write+0x1f0>)
 80046a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046aa:	88f8      	ldrh	r0, [r7, #6]
 80046ac:	893a      	ldrh	r2, [r7, #8]
 80046ae:	8979      	ldrh	r1, [r7, #10]
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	9301      	str	r3, [sp, #4]
 80046b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	4603      	mov	r3, r0
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f000 fab6 	bl	8004c2c <I2C_RequestMemoryWrite>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d052      	beq.n	800476c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e081      	b.n	80047ce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 fd00 	bl	80050d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00d      	beq.n	80046f6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	2b04      	cmp	r3, #4
 80046e0:	d107      	bne.n	80046f2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e06b      	b.n	80047ce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fa:	781a      	ldrb	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	1c5a      	adds	r2, r3, #1
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004710:	3b01      	subs	r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800471c:	b29b      	uxth	r3, r3
 800471e:	3b01      	subs	r3, #1
 8004720:	b29a      	uxth	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	f003 0304 	and.w	r3, r3, #4
 8004730:	2b04      	cmp	r3, #4
 8004732:	d11b      	bne.n	800476c <HAL_I2C_Mem_Write+0x180>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004738:	2b00      	cmp	r3, #0
 800473a:	d017      	beq.n	800476c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004740:	781a      	ldrb	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	1c5a      	adds	r2, r3, #1
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004756:	3b01      	subs	r3, #1
 8004758:	b29a      	uxth	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004762:	b29b      	uxth	r3, r3
 8004764:	3b01      	subs	r3, #1
 8004766:	b29a      	uxth	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1aa      	bne.n	80046ca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	f000 fcec 	bl	8005156 <I2C_WaitOnBTFFlagUntilTimeout>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00d      	beq.n	80047a0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004788:	2b04      	cmp	r3, #4
 800478a:	d107      	bne.n	800479c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800479a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e016      	b.n	80047ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2220      	movs	r2, #32
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80047c8:	2300      	movs	r3, #0
 80047ca:	e000      	b.n	80047ce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80047cc:	2302      	movs	r3, #2
  }
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3718      	adds	r7, #24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	00100002 	.word	0x00100002
 80047dc:	ffff0000 	.word	0xffff0000

080047e0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b08c      	sub	sp, #48	; 0x30
 80047e4:	af02      	add	r7, sp, #8
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	4608      	mov	r0, r1
 80047ea:	4611      	mov	r1, r2
 80047ec:	461a      	mov	r2, r3
 80047ee:	4603      	mov	r3, r0
 80047f0:	817b      	strh	r3, [r7, #10]
 80047f2:	460b      	mov	r3, r1
 80047f4:	813b      	strh	r3, [r7, #8]
 80047f6:	4613      	mov	r3, r2
 80047f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047fa:	f7fe feb9 	bl	8003570 <HAL_GetTick>
 80047fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b20      	cmp	r3, #32
 800480a:	f040 8208 	bne.w	8004c1e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800480e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	2319      	movs	r3, #25
 8004814:	2201      	movs	r2, #1
 8004816:	497b      	ldr	r1, [pc, #492]	; (8004a04 <HAL_I2C_Mem_Read+0x224>)
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f000 fb85 	bl	8004f28 <I2C_WaitOnFlagUntilTimeout>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d001      	beq.n	8004828 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004824:	2302      	movs	r3, #2
 8004826:	e1fb      	b.n	8004c20 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800482e:	2b01      	cmp	r3, #1
 8004830:	d101      	bne.n	8004836 <HAL_I2C_Mem_Read+0x56>
 8004832:	2302      	movs	r3, #2
 8004834:	e1f4      	b.n	8004c20 <HAL_I2C_Mem_Read+0x440>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0301 	and.w	r3, r3, #1
 8004848:	2b01      	cmp	r3, #1
 800484a:	d007      	beq.n	800485c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0201 	orr.w	r2, r2, #1
 800485a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800486a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2222      	movs	r2, #34	; 0x22
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2240      	movs	r2, #64	; 0x40
 8004878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004886:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800488c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004892:	b29a      	uxth	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4a5b      	ldr	r2, [pc, #364]	; (8004a08 <HAL_I2C_Mem_Read+0x228>)
 800489c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800489e:	88f8      	ldrh	r0, [r7, #6]
 80048a0:	893a      	ldrh	r2, [r7, #8]
 80048a2:	8979      	ldrh	r1, [r7, #10]
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	9301      	str	r3, [sp, #4]
 80048a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	4603      	mov	r3, r0
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f000 fa52 	bl	8004d58 <I2C_RequestMemoryRead>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e1b0      	b.n	8004c20 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d113      	bne.n	80048ee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048c6:	2300      	movs	r3, #0
 80048c8:	623b      	str	r3, [r7, #32]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	623b      	str	r3, [r7, #32]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	623b      	str	r3, [r7, #32]
 80048da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	e184      	b.n	8004bf8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d11b      	bne.n	800492e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004904:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004906:	2300      	movs	r3, #0
 8004908:	61fb      	str	r3, [r7, #28]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	61fb      	str	r3, [r7, #28]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	61fb      	str	r3, [r7, #28]
 800491a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800492a:	601a      	str	r2, [r3, #0]
 800492c:	e164      	b.n	8004bf8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004932:	2b02      	cmp	r3, #2
 8004934:	d11b      	bne.n	800496e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004944:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004954:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004956:	2300      	movs	r3, #0
 8004958:	61bb      	str	r3, [r7, #24]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	61bb      	str	r3, [r7, #24]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	61bb      	str	r3, [r7, #24]
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	e144      	b.n	8004bf8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800496e:	2300      	movs	r3, #0
 8004970:	617b      	str	r3, [r7, #20]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	617b      	str	r3, [r7, #20]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	617b      	str	r3, [r7, #20]
 8004982:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004984:	e138      	b.n	8004bf8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800498a:	2b03      	cmp	r3, #3
 800498c:	f200 80f1 	bhi.w	8004b72 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004994:	2b01      	cmp	r3, #1
 8004996:	d123      	bne.n	80049e0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800499a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 fc1b 	bl	80051d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d001      	beq.n	80049ac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e139      	b.n	8004c20 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	691a      	ldr	r2, [r3, #16]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	b2d2      	uxtb	r2, r2
 80049b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	1c5a      	adds	r2, r3, #1
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c8:	3b01      	subs	r3, #1
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	3b01      	subs	r3, #1
 80049d8:	b29a      	uxth	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049de:	e10b      	b.n	8004bf8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d14e      	bne.n	8004a86 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ea:	9300      	str	r3, [sp, #0]
 80049ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ee:	2200      	movs	r2, #0
 80049f0:	4906      	ldr	r1, [pc, #24]	; (8004a0c <HAL_I2C_Mem_Read+0x22c>)
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 fa98 	bl	8004f28 <I2C_WaitOnFlagUntilTimeout>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d008      	beq.n	8004a10 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e10e      	b.n	8004c20 <HAL_I2C_Mem_Read+0x440>
 8004a02:	bf00      	nop
 8004a04:	00100002 	.word	0x00100002
 8004a08:	ffff0000 	.word	0xffff0000
 8004a0c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	691a      	ldr	r2, [r3, #16]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2a:	b2d2      	uxtb	r2, r2
 8004a2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	1c5a      	adds	r2, r3, #1
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	691a      	ldr	r2, [r3, #16]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	b2d2      	uxtb	r2, r2
 8004a5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	1c5a      	adds	r2, r3, #1
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a84:	e0b8      	b.n	8004bf8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	4966      	ldr	r1, [pc, #408]	; (8004c28 <HAL_I2C_Mem_Read+0x448>)
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 fa49 	bl	8004f28 <I2C_WaitOnFlagUntilTimeout>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d001      	beq.n	8004aa0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e0bf      	b.n	8004c20 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	691a      	ldr	r2, [r3, #16]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aba:	b2d2      	uxtb	r2, r2
 8004abc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	1c5a      	adds	r2, r3, #1
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004acc:	3b01      	subs	r3, #1
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	3b01      	subs	r3, #1
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae8:	2200      	movs	r2, #0
 8004aea:	494f      	ldr	r1, [pc, #316]	; (8004c28 <HAL_I2C_Mem_Read+0x448>)
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 fa1b 	bl	8004f28 <I2C_WaitOnFlagUntilTimeout>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d001      	beq.n	8004afc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e091      	b.n	8004c20 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	691a      	ldr	r2, [r3, #16]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	b2d2      	uxtb	r2, r2
 8004b18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1e:	1c5a      	adds	r2, r3, #1
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	3b01      	subs	r3, #1
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	691a      	ldr	r2, [r3, #16]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b48:	b2d2      	uxtb	r2, r2
 8004b4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	1c5a      	adds	r2, r3, #1
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b70:	e042      	b.n	8004bf8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f000 fb2e 	bl	80051d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e04c      	b.n	8004c20 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	691a      	ldr	r2, [r3, #16]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b90:	b2d2      	uxtb	r2, r2
 8004b92:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b98:	1c5a      	adds	r2, r3, #1
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	f003 0304 	and.w	r3, r3, #4
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	d118      	bne.n	8004bf8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	691a      	ldr	r2, [r3, #16]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd0:	b2d2      	uxtb	r2, r2
 8004bd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	1c5a      	adds	r2, r3, #1
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be2:	3b01      	subs	r3, #1
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f47f aec2 	bne.w	8004986 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2220      	movs	r2, #32
 8004c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	e000      	b.n	8004c20 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004c1e:	2302      	movs	r3, #2
  }
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3728      	adds	r7, #40	; 0x28
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	00010004 	.word	0x00010004

08004c2c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b088      	sub	sp, #32
 8004c30:	af02      	add	r7, sp, #8
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	4608      	mov	r0, r1
 8004c36:	4611      	mov	r1, r2
 8004c38:	461a      	mov	r2, r3
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	817b      	strh	r3, [r7, #10]
 8004c3e:	460b      	mov	r3, r1
 8004c40:	813b      	strh	r3, [r7, #8]
 8004c42:	4613      	mov	r3, r2
 8004c44:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f000 f960 	bl	8004f28 <I2C_WaitOnFlagUntilTimeout>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00d      	beq.n	8004c8a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c7c:	d103      	bne.n	8004c86 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e05f      	b.n	8004d4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c8a:	897b      	ldrh	r3, [r7, #10]
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	461a      	mov	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9c:	6a3a      	ldr	r2, [r7, #32]
 8004c9e:	492d      	ldr	r1, [pc, #180]	; (8004d54 <I2C_RequestMemoryWrite+0x128>)
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f000 f998 	bl	8004fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e04c      	b.n	8004d4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	617b      	str	r3, [r7, #20]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	617b      	str	r3, [r7, #20]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	617b      	str	r3, [r7, #20]
 8004cc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cc8:	6a39      	ldr	r1, [r7, #32]
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f000 fa02 	bl	80050d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00d      	beq.n	8004cf2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cda:	2b04      	cmp	r3, #4
 8004cdc:	d107      	bne.n	8004cee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e02b      	b.n	8004d4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cf2:	88fb      	ldrh	r3, [r7, #6]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d105      	bne.n	8004d04 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cf8:	893b      	ldrh	r3, [r7, #8]
 8004cfa:	b2da      	uxtb	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	611a      	str	r2, [r3, #16]
 8004d02:	e021      	b.n	8004d48 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d04:	893b      	ldrh	r3, [r7, #8]
 8004d06:	0a1b      	lsrs	r3, r3, #8
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	b2da      	uxtb	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d14:	6a39      	ldr	r1, [r7, #32]
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f000 f9dc 	bl	80050d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00d      	beq.n	8004d3e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	2b04      	cmp	r3, #4
 8004d28:	d107      	bne.n	8004d3a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e005      	b.n	8004d4a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d3e:	893b      	ldrh	r3, [r7, #8]
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3718      	adds	r7, #24
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	00010002 	.word	0x00010002

08004d58 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b088      	sub	sp, #32
 8004d5c:	af02      	add	r7, sp, #8
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	4608      	mov	r0, r1
 8004d62:	4611      	mov	r1, r2
 8004d64:	461a      	mov	r2, r3
 8004d66:	4603      	mov	r3, r0
 8004d68:	817b      	strh	r3, [r7, #10]
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	813b      	strh	r3, [r7, #8]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d80:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d94:	9300      	str	r3, [sp, #0]
 8004d96:	6a3b      	ldr	r3, [r7, #32]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f000 f8c2 	bl	8004f28 <I2C_WaitOnFlagUntilTimeout>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00d      	beq.n	8004dc6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004db8:	d103      	bne.n	8004dc2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dc0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e0aa      	b.n	8004f1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004dc6:	897b      	ldrh	r3, [r7, #10]
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	461a      	mov	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004dd4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd8:	6a3a      	ldr	r2, [r7, #32]
 8004dda:	4952      	ldr	r1, [pc, #328]	; (8004f24 <I2C_RequestMemoryRead+0x1cc>)
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f000 f8fa 	bl	8004fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d001      	beq.n	8004dec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e097      	b.n	8004f1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dec:	2300      	movs	r3, #0
 8004dee:	617b      	str	r3, [r7, #20]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	617b      	str	r3, [r7, #20]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	617b      	str	r3, [r7, #20]
 8004e00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e04:	6a39      	ldr	r1, [r7, #32]
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f000 f964 	bl	80050d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00d      	beq.n	8004e2e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	2b04      	cmp	r3, #4
 8004e18:	d107      	bne.n	8004e2a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e076      	b.n	8004f1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e2e:	88fb      	ldrh	r3, [r7, #6]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d105      	bne.n	8004e40 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e34:	893b      	ldrh	r3, [r7, #8]
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	611a      	str	r2, [r3, #16]
 8004e3e:	e021      	b.n	8004e84 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e40:	893b      	ldrh	r3, [r7, #8]
 8004e42:	0a1b      	lsrs	r3, r3, #8
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	b2da      	uxtb	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e50:	6a39      	ldr	r1, [r7, #32]
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f000 f93e 	bl	80050d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00d      	beq.n	8004e7a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	2b04      	cmp	r3, #4
 8004e64:	d107      	bne.n	8004e76 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e050      	b.n	8004f1c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e7a:	893b      	ldrh	r3, [r7, #8]
 8004e7c:	b2da      	uxtb	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e86:	6a39      	ldr	r1, [r7, #32]
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f000 f923 	bl	80050d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00d      	beq.n	8004eb0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e98:	2b04      	cmp	r3, #4
 8004e9a:	d107      	bne.n	8004eac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eaa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e035      	b.n	8004f1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ebe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	6a3b      	ldr	r3, [r7, #32]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f000 f82b 	bl	8004f28 <I2C_WaitOnFlagUntilTimeout>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00d      	beq.n	8004ef4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ee6:	d103      	bne.n	8004ef0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004eee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e013      	b.n	8004f1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ef4:	897b      	ldrh	r3, [r7, #10]
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	f043 0301 	orr.w	r3, r3, #1
 8004efc:	b2da      	uxtb	r2, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	6a3a      	ldr	r2, [r7, #32]
 8004f08:	4906      	ldr	r1, [pc, #24]	; (8004f24 <I2C_RequestMemoryRead+0x1cc>)
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f000 f863 	bl	8004fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d001      	beq.n	8004f1a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e000      	b.n	8004f1c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3718      	adds	r7, #24
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	00010002 	.word	0x00010002

08004f28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	603b      	str	r3, [r7, #0]
 8004f34:	4613      	mov	r3, r2
 8004f36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f38:	e025      	b.n	8004f86 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f40:	d021      	beq.n	8004f86 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f42:	f7fe fb15 	bl	8003570 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d302      	bcc.n	8004f58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d116      	bne.n	8004f86 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2220      	movs	r2, #32
 8004f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f72:	f043 0220 	orr.w	r2, r3, #32
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e023      	b.n	8004fce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	0c1b      	lsrs	r3, r3, #16
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d10d      	bne.n	8004fac <I2C_WaitOnFlagUntilTimeout+0x84>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	43da      	mvns	r2, r3
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	bf0c      	ite	eq
 8004fa2:	2301      	moveq	r3, #1
 8004fa4:	2300      	movne	r3, #0
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	461a      	mov	r2, r3
 8004faa:	e00c      	b.n	8004fc6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	43da      	mvns	r2, r3
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	bf0c      	ite	eq
 8004fbe:	2301      	moveq	r3, #1
 8004fc0:	2300      	movne	r3, #0
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	79fb      	ldrb	r3, [r7, #7]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d0b6      	beq.n	8004f3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b084      	sub	sp, #16
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	60f8      	str	r0, [r7, #12]
 8004fde:	60b9      	str	r1, [r7, #8]
 8004fe0:	607a      	str	r2, [r7, #4]
 8004fe2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fe4:	e051      	b.n	800508a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	695b      	ldr	r3, [r3, #20]
 8004fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ff4:	d123      	bne.n	800503e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005004:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800500e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2220      	movs	r2, #32
 800501a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502a:	f043 0204 	orr.w	r2, r3, #4
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e046      	b.n	80050cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005044:	d021      	beq.n	800508a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005046:	f7fe fa93 	bl	8003570 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	429a      	cmp	r2, r3
 8005054:	d302      	bcc.n	800505c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d116      	bne.n	800508a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2220      	movs	r2, #32
 8005066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	f043 0220 	orr.w	r2, r3, #32
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e020      	b.n	80050cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	0c1b      	lsrs	r3, r3, #16
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2b01      	cmp	r3, #1
 8005092:	d10c      	bne.n	80050ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	43da      	mvns	r2, r3
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	4013      	ands	r3, r2
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	bf14      	ite	ne
 80050a6:	2301      	movne	r3, #1
 80050a8:	2300      	moveq	r3, #0
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	e00b      	b.n	80050c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	43da      	mvns	r2, r3
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	4013      	ands	r3, r2
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	2b00      	cmp	r3, #0
 80050be:	bf14      	ite	ne
 80050c0:	2301      	movne	r3, #1
 80050c2:	2300      	moveq	r3, #0
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d18d      	bne.n	8004fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050e0:	e02d      	b.n	800513e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f000 f8ce 	bl	8005284 <I2C_IsAcknowledgeFailed>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e02d      	b.n	800514e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f8:	d021      	beq.n	800513e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050fa:	f7fe fa39 	bl	8003570 <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	429a      	cmp	r2, r3
 8005108:	d302      	bcc.n	8005110 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d116      	bne.n	800513e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2220      	movs	r2, #32
 800511a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512a:	f043 0220 	orr.w	r2, r3, #32
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e007      	b.n	800514e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005148:	2b80      	cmp	r3, #128	; 0x80
 800514a:	d1ca      	bne.n	80050e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b084      	sub	sp, #16
 800515a:	af00      	add	r7, sp, #0
 800515c:	60f8      	str	r0, [r7, #12]
 800515e:	60b9      	str	r1, [r7, #8]
 8005160:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005162:	e02d      	b.n	80051c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f000 f88d 	bl	8005284 <I2C_IsAcknowledgeFailed>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d001      	beq.n	8005174 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e02d      	b.n	80051d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517a:	d021      	beq.n	80051c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800517c:	f7fe f9f8 	bl	8003570 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	68ba      	ldr	r2, [r7, #8]
 8005188:	429a      	cmp	r2, r3
 800518a:	d302      	bcc.n	8005192 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d116      	bne.n	80051c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2220      	movs	r2, #32
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ac:	f043 0220 	orr.w	r2, r3, #32
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e007      	b.n	80051d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	f003 0304 	and.w	r3, r3, #4
 80051ca:	2b04      	cmp	r3, #4
 80051cc:	d1ca      	bne.n	8005164 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3710      	adds	r7, #16
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051e4:	e042      	b.n	800526c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	f003 0310 	and.w	r3, r3, #16
 80051f0:	2b10      	cmp	r3, #16
 80051f2:	d119      	bne.n	8005228 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f06f 0210 	mvn.w	r2, #16
 80051fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2220      	movs	r2, #32
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e029      	b.n	800527c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005228:	f7fe f9a2 	bl	8003570 <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	429a      	cmp	r2, r3
 8005236:	d302      	bcc.n	800523e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d116      	bne.n	800526c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2220      	movs	r2, #32
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005258:	f043 0220 	orr.w	r2, r3, #32
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e007      	b.n	800527c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005276:	2b40      	cmp	r3, #64	; 0x40
 8005278:	d1b5      	bne.n	80051e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800529a:	d11b      	bne.n	80052d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2220      	movs	r2, #32
 80052b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c0:	f043 0204 	orr.w	r2, r3, #4
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e000      	b.n	80052d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
	...

080052e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b086      	sub	sp, #24
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e264      	b.n	80057c0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d075      	beq.n	80053ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005302:	4ba3      	ldr	r3, [pc, #652]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f003 030c 	and.w	r3, r3, #12
 800530a:	2b04      	cmp	r3, #4
 800530c:	d00c      	beq.n	8005328 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800530e:	4ba0      	ldr	r3, [pc, #640]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005316:	2b08      	cmp	r3, #8
 8005318:	d112      	bne.n	8005340 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800531a:	4b9d      	ldr	r3, [pc, #628]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005322:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005326:	d10b      	bne.n	8005340 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005328:	4b99      	ldr	r3, [pc, #612]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d05b      	beq.n	80053ec <HAL_RCC_OscConfig+0x108>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d157      	bne.n	80053ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e23f      	b.n	80057c0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005348:	d106      	bne.n	8005358 <HAL_RCC_OscConfig+0x74>
 800534a:	4b91      	ldr	r3, [pc, #580]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a90      	ldr	r2, [pc, #576]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005354:	6013      	str	r3, [r2, #0]
 8005356:	e01d      	b.n	8005394 <HAL_RCC_OscConfig+0xb0>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005360:	d10c      	bne.n	800537c <HAL_RCC_OscConfig+0x98>
 8005362:	4b8b      	ldr	r3, [pc, #556]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a8a      	ldr	r2, [pc, #552]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800536c:	6013      	str	r3, [r2, #0]
 800536e:	4b88      	ldr	r3, [pc, #544]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a87      	ldr	r2, [pc, #540]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005378:	6013      	str	r3, [r2, #0]
 800537a:	e00b      	b.n	8005394 <HAL_RCC_OscConfig+0xb0>
 800537c:	4b84      	ldr	r3, [pc, #528]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a83      	ldr	r2, [pc, #524]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005386:	6013      	str	r3, [r2, #0]
 8005388:	4b81      	ldr	r3, [pc, #516]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a80      	ldr	r2, [pc, #512]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 800538e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d013      	beq.n	80053c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800539c:	f7fe f8e8 	bl	8003570 <HAL_GetTick>
 80053a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053a2:	e008      	b.n	80053b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053a4:	f7fe f8e4 	bl	8003570 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b64      	cmp	r3, #100	; 0x64
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e204      	b.n	80057c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053b6:	4b76      	ldr	r3, [pc, #472]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d0f0      	beq.n	80053a4 <HAL_RCC_OscConfig+0xc0>
 80053c2:	e014      	b.n	80053ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c4:	f7fe f8d4 	bl	8003570 <HAL_GetTick>
 80053c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053ca:	e008      	b.n	80053de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053cc:	f7fe f8d0 	bl	8003570 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	2b64      	cmp	r3, #100	; 0x64
 80053d8:	d901      	bls.n	80053de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e1f0      	b.n	80057c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053de:	4b6c      	ldr	r3, [pc, #432]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1f0      	bne.n	80053cc <HAL_RCC_OscConfig+0xe8>
 80053ea:	e000      	b.n	80053ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0302 	and.w	r3, r3, #2
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d063      	beq.n	80054c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053fa:	4b65      	ldr	r3, [pc, #404]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f003 030c 	and.w	r3, r3, #12
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00b      	beq.n	800541e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005406:	4b62      	ldr	r3, [pc, #392]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800540e:	2b08      	cmp	r3, #8
 8005410:	d11c      	bne.n	800544c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005412:	4b5f      	ldr	r3, [pc, #380]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d116      	bne.n	800544c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800541e:	4b5c      	ldr	r3, [pc, #368]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d005      	beq.n	8005436 <HAL_RCC_OscConfig+0x152>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d001      	beq.n	8005436 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e1c4      	b.n	80057c0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005436:	4b56      	ldr	r3, [pc, #344]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	00db      	lsls	r3, r3, #3
 8005444:	4952      	ldr	r1, [pc, #328]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005446:	4313      	orrs	r3, r2
 8005448:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800544a:	e03a      	b.n	80054c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d020      	beq.n	8005496 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005454:	4b4f      	ldr	r3, [pc, #316]	; (8005594 <HAL_RCC_OscConfig+0x2b0>)
 8005456:	2201      	movs	r2, #1
 8005458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800545a:	f7fe f889 	bl	8003570 <HAL_GetTick>
 800545e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005460:	e008      	b.n	8005474 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005462:	f7fe f885 	bl	8003570 <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	2b02      	cmp	r3, #2
 800546e:	d901      	bls.n	8005474 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e1a5      	b.n	80057c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005474:	4b46      	ldr	r3, [pc, #280]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0302 	and.w	r3, r3, #2
 800547c:	2b00      	cmp	r3, #0
 800547e:	d0f0      	beq.n	8005462 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005480:	4b43      	ldr	r3, [pc, #268]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	00db      	lsls	r3, r3, #3
 800548e:	4940      	ldr	r1, [pc, #256]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005490:	4313      	orrs	r3, r2
 8005492:	600b      	str	r3, [r1, #0]
 8005494:	e015      	b.n	80054c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005496:	4b3f      	ldr	r3, [pc, #252]	; (8005594 <HAL_RCC_OscConfig+0x2b0>)
 8005498:	2200      	movs	r2, #0
 800549a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800549c:	f7fe f868 	bl	8003570 <HAL_GetTick>
 80054a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054a2:	e008      	b.n	80054b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054a4:	f7fe f864 	bl	8003570 <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e184      	b.n	80057c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054b6:	4b36      	ldr	r3, [pc, #216]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0302 	and.w	r3, r3, #2
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1f0      	bne.n	80054a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0308 	and.w	r3, r3, #8
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d030      	beq.n	8005530 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d016      	beq.n	8005504 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054d6:	4b30      	ldr	r3, [pc, #192]	; (8005598 <HAL_RCC_OscConfig+0x2b4>)
 80054d8:	2201      	movs	r2, #1
 80054da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054dc:	f7fe f848 	bl	8003570 <HAL_GetTick>
 80054e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054e2:	e008      	b.n	80054f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054e4:	f7fe f844 	bl	8003570 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e164      	b.n	80057c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054f6:	4b26      	ldr	r3, [pc, #152]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 80054f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d0f0      	beq.n	80054e4 <HAL_RCC_OscConfig+0x200>
 8005502:	e015      	b.n	8005530 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005504:	4b24      	ldr	r3, [pc, #144]	; (8005598 <HAL_RCC_OscConfig+0x2b4>)
 8005506:	2200      	movs	r2, #0
 8005508:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800550a:	f7fe f831 	bl	8003570 <HAL_GetTick>
 800550e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005510:	e008      	b.n	8005524 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005512:	f7fe f82d 	bl	8003570 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d901      	bls.n	8005524 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e14d      	b.n	80057c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005524:	4b1a      	ldr	r3, [pc, #104]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005528:	f003 0302 	and.w	r3, r3, #2
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1f0      	bne.n	8005512 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0304 	and.w	r3, r3, #4
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 80a0 	beq.w	800567e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800553e:	2300      	movs	r3, #0
 8005540:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005542:	4b13      	ldr	r3, [pc, #76]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10f      	bne.n	800556e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800554e:	2300      	movs	r3, #0
 8005550:	60bb      	str	r3, [r7, #8]
 8005552:	4b0f      	ldr	r3, [pc, #60]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005556:	4a0e      	ldr	r2, [pc, #56]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800555c:	6413      	str	r3, [r2, #64]	; 0x40
 800555e:	4b0c      	ldr	r3, [pc, #48]	; (8005590 <HAL_RCC_OscConfig+0x2ac>)
 8005560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005566:	60bb      	str	r3, [r7, #8]
 8005568:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800556a:	2301      	movs	r3, #1
 800556c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800556e:	4b0b      	ldr	r3, [pc, #44]	; (800559c <HAL_RCC_OscConfig+0x2b8>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005576:	2b00      	cmp	r3, #0
 8005578:	d121      	bne.n	80055be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800557a:	4b08      	ldr	r3, [pc, #32]	; (800559c <HAL_RCC_OscConfig+0x2b8>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a07      	ldr	r2, [pc, #28]	; (800559c <HAL_RCC_OscConfig+0x2b8>)
 8005580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005584:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005586:	f7fd fff3 	bl	8003570 <HAL_GetTick>
 800558a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800558c:	e011      	b.n	80055b2 <HAL_RCC_OscConfig+0x2ce>
 800558e:	bf00      	nop
 8005590:	40023800 	.word	0x40023800
 8005594:	42470000 	.word	0x42470000
 8005598:	42470e80 	.word	0x42470e80
 800559c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055a0:	f7fd ffe6 	bl	8003570 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d901      	bls.n	80055b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e106      	b.n	80057c0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055b2:	4b85      	ldr	r3, [pc, #532]	; (80057c8 <HAL_RCC_OscConfig+0x4e4>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d0f0      	beq.n	80055a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d106      	bne.n	80055d4 <HAL_RCC_OscConfig+0x2f0>
 80055c6:	4b81      	ldr	r3, [pc, #516]	; (80057cc <HAL_RCC_OscConfig+0x4e8>)
 80055c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ca:	4a80      	ldr	r2, [pc, #512]	; (80057cc <HAL_RCC_OscConfig+0x4e8>)
 80055cc:	f043 0301 	orr.w	r3, r3, #1
 80055d0:	6713      	str	r3, [r2, #112]	; 0x70
 80055d2:	e01c      	b.n	800560e <HAL_RCC_OscConfig+0x32a>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	2b05      	cmp	r3, #5
 80055da:	d10c      	bne.n	80055f6 <HAL_RCC_OscConfig+0x312>
 80055dc:	4b7b      	ldr	r3, [pc, #492]	; (80057cc <HAL_RCC_OscConfig+0x4e8>)
 80055de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e0:	4a7a      	ldr	r2, [pc, #488]	; (80057cc <HAL_RCC_OscConfig+0x4e8>)
 80055e2:	f043 0304 	orr.w	r3, r3, #4
 80055e6:	6713      	str	r3, [r2, #112]	; 0x70
 80055e8:	4b78      	ldr	r3, [pc, #480]	; (80057cc <HAL_RCC_OscConfig+0x4e8>)
 80055ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ec:	4a77      	ldr	r2, [pc, #476]	; (80057cc <HAL_RCC_OscConfig+0x4e8>)
 80055ee:	f043 0301 	orr.w	r3, r3, #1
 80055f2:	6713      	str	r3, [r2, #112]	; 0x70
 80055f4:	e00b      	b.n	800560e <HAL_RCC_OscConfig+0x32a>
 80055f6:	4b75      	ldr	r3, [pc, #468]	; (80057cc <HAL_RCC_OscConfig+0x4e8>)
 80055f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055fa:	4a74      	ldr	r2, [pc, #464]	; (80057cc <HAL_RCC_OscConfig+0x4e8>)
 80055fc:	f023 0301 	bic.w	r3, r3, #1
 8005600:	6713      	str	r3, [r2, #112]	; 0x70
 8005602:	4b72      	ldr	r3, [pc, #456]	; (80057cc <HAL_RCC_OscConfig+0x4e8>)
 8005604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005606:	4a71      	ldr	r2, [pc, #452]	; (80057cc <HAL_RCC_OscConfig+0x4e8>)
 8005608:	f023 0304 	bic.w	r3, r3, #4
 800560c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d015      	beq.n	8005642 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005616:	f7fd ffab 	bl	8003570 <HAL_GetTick>
 800561a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800561c:	e00a      	b.n	8005634 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800561e:	f7fd ffa7 	bl	8003570 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	f241 3288 	movw	r2, #5000	; 0x1388
 800562c:	4293      	cmp	r3, r2
 800562e:	d901      	bls.n	8005634 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e0c5      	b.n	80057c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005634:	4b65      	ldr	r3, [pc, #404]	; (80057cc <HAL_RCC_OscConfig+0x4e8>)
 8005636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d0ee      	beq.n	800561e <HAL_RCC_OscConfig+0x33a>
 8005640:	e014      	b.n	800566c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005642:	f7fd ff95 	bl	8003570 <HAL_GetTick>
 8005646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005648:	e00a      	b.n	8005660 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800564a:	f7fd ff91 	bl	8003570 <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	f241 3288 	movw	r2, #5000	; 0x1388
 8005658:	4293      	cmp	r3, r2
 800565a:	d901      	bls.n	8005660 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e0af      	b.n	80057c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005660:	4b5a      	ldr	r3, [pc, #360]	; (80057cc <HAL_RCC_OscConfig+0x4e8>)
 8005662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1ee      	bne.n	800564a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800566c:	7dfb      	ldrb	r3, [r7, #23]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d105      	bne.n	800567e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005672:	4b56      	ldr	r3, [pc, #344]	; (80057cc <HAL_RCC_OscConfig+0x4e8>)
 8005674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005676:	4a55      	ldr	r2, [pc, #340]	; (80057cc <HAL_RCC_OscConfig+0x4e8>)
 8005678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800567c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	2b00      	cmp	r3, #0
 8005684:	f000 809b 	beq.w	80057be <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005688:	4b50      	ldr	r3, [pc, #320]	; (80057cc <HAL_RCC_OscConfig+0x4e8>)
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f003 030c 	and.w	r3, r3, #12
 8005690:	2b08      	cmp	r3, #8
 8005692:	d05c      	beq.n	800574e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	2b02      	cmp	r3, #2
 800569a:	d141      	bne.n	8005720 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800569c:	4b4c      	ldr	r3, [pc, #304]	; (80057d0 <HAL_RCC_OscConfig+0x4ec>)
 800569e:	2200      	movs	r2, #0
 80056a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056a2:	f7fd ff65 	bl	8003570 <HAL_GetTick>
 80056a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056a8:	e008      	b.n	80056bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056aa:	f7fd ff61 	bl	8003570 <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d901      	bls.n	80056bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e081      	b.n	80057c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056bc:	4b43      	ldr	r3, [pc, #268]	; (80057cc <HAL_RCC_OscConfig+0x4e8>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1f0      	bne.n	80056aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	69da      	ldr	r2, [r3, #28]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	431a      	orrs	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d6:	019b      	lsls	r3, r3, #6
 80056d8:	431a      	orrs	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056de:	085b      	lsrs	r3, r3, #1
 80056e0:	3b01      	subs	r3, #1
 80056e2:	041b      	lsls	r3, r3, #16
 80056e4:	431a      	orrs	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ea:	061b      	lsls	r3, r3, #24
 80056ec:	4937      	ldr	r1, [pc, #220]	; (80057cc <HAL_RCC_OscConfig+0x4e8>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056f2:	4b37      	ldr	r3, [pc, #220]	; (80057d0 <HAL_RCC_OscConfig+0x4ec>)
 80056f4:	2201      	movs	r2, #1
 80056f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f8:	f7fd ff3a 	bl	8003570 <HAL_GetTick>
 80056fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056fe:	e008      	b.n	8005712 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005700:	f7fd ff36 	bl	8003570 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b02      	cmp	r3, #2
 800570c:	d901      	bls.n	8005712 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e056      	b.n	80057c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005712:	4b2e      	ldr	r3, [pc, #184]	; (80057cc <HAL_RCC_OscConfig+0x4e8>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d0f0      	beq.n	8005700 <HAL_RCC_OscConfig+0x41c>
 800571e:	e04e      	b.n	80057be <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005720:	4b2b      	ldr	r3, [pc, #172]	; (80057d0 <HAL_RCC_OscConfig+0x4ec>)
 8005722:	2200      	movs	r2, #0
 8005724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005726:	f7fd ff23 	bl	8003570 <HAL_GetTick>
 800572a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800572c:	e008      	b.n	8005740 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800572e:	f7fd ff1f 	bl	8003570 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b02      	cmp	r3, #2
 800573a:	d901      	bls.n	8005740 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e03f      	b.n	80057c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005740:	4b22      	ldr	r3, [pc, #136]	; (80057cc <HAL_RCC_OscConfig+0x4e8>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1f0      	bne.n	800572e <HAL_RCC_OscConfig+0x44a>
 800574c:	e037      	b.n	80057be <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d101      	bne.n	800575a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e032      	b.n	80057c0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800575a:	4b1c      	ldr	r3, [pc, #112]	; (80057cc <HAL_RCC_OscConfig+0x4e8>)
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d028      	beq.n	80057ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005772:	429a      	cmp	r2, r3
 8005774:	d121      	bne.n	80057ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005780:	429a      	cmp	r2, r3
 8005782:	d11a      	bne.n	80057ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800578a:	4013      	ands	r3, r2
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005790:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005792:	4293      	cmp	r3, r2
 8005794:	d111      	bne.n	80057ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a0:	085b      	lsrs	r3, r3, #1
 80057a2:	3b01      	subs	r3, #1
 80057a4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d107      	bne.n	80057ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d001      	beq.n	80057be <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e000      	b.n	80057c0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3718      	adds	r7, #24
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	40007000 	.word	0x40007000
 80057cc:	40023800 	.word	0x40023800
 80057d0:	42470060 	.word	0x42470060

080057d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d101      	bne.n	80057e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e0cc      	b.n	8005982 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057e8:	4b68      	ldr	r3, [pc, #416]	; (800598c <HAL_RCC_ClockConfig+0x1b8>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0307 	and.w	r3, r3, #7
 80057f0:	683a      	ldr	r2, [r7, #0]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d90c      	bls.n	8005810 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057f6:	4b65      	ldr	r3, [pc, #404]	; (800598c <HAL_RCC_ClockConfig+0x1b8>)
 80057f8:	683a      	ldr	r2, [r7, #0]
 80057fa:	b2d2      	uxtb	r2, r2
 80057fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057fe:	4b63      	ldr	r3, [pc, #396]	; (800598c <HAL_RCC_ClockConfig+0x1b8>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0307 	and.w	r3, r3, #7
 8005806:	683a      	ldr	r2, [r7, #0]
 8005808:	429a      	cmp	r2, r3
 800580a:	d001      	beq.n	8005810 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e0b8      	b.n	8005982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0302 	and.w	r3, r3, #2
 8005818:	2b00      	cmp	r3, #0
 800581a:	d020      	beq.n	800585e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0304 	and.w	r3, r3, #4
 8005824:	2b00      	cmp	r3, #0
 8005826:	d005      	beq.n	8005834 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005828:	4b59      	ldr	r3, [pc, #356]	; (8005990 <HAL_RCC_ClockConfig+0x1bc>)
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	4a58      	ldr	r2, [pc, #352]	; (8005990 <HAL_RCC_ClockConfig+0x1bc>)
 800582e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005832:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0308 	and.w	r3, r3, #8
 800583c:	2b00      	cmp	r3, #0
 800583e:	d005      	beq.n	800584c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005840:	4b53      	ldr	r3, [pc, #332]	; (8005990 <HAL_RCC_ClockConfig+0x1bc>)
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	4a52      	ldr	r2, [pc, #328]	; (8005990 <HAL_RCC_ClockConfig+0x1bc>)
 8005846:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800584a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800584c:	4b50      	ldr	r3, [pc, #320]	; (8005990 <HAL_RCC_ClockConfig+0x1bc>)
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	494d      	ldr	r1, [pc, #308]	; (8005990 <HAL_RCC_ClockConfig+0x1bc>)
 800585a:	4313      	orrs	r3, r2
 800585c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	2b00      	cmp	r3, #0
 8005868:	d044      	beq.n	80058f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d107      	bne.n	8005882 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005872:	4b47      	ldr	r3, [pc, #284]	; (8005990 <HAL_RCC_ClockConfig+0x1bc>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d119      	bne.n	80058b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e07f      	b.n	8005982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	2b02      	cmp	r3, #2
 8005888:	d003      	beq.n	8005892 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800588e:	2b03      	cmp	r3, #3
 8005890:	d107      	bne.n	80058a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005892:	4b3f      	ldr	r3, [pc, #252]	; (8005990 <HAL_RCC_ClockConfig+0x1bc>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d109      	bne.n	80058b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e06f      	b.n	8005982 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058a2:	4b3b      	ldr	r3, [pc, #236]	; (8005990 <HAL_RCC_ClockConfig+0x1bc>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0302 	and.w	r3, r3, #2
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e067      	b.n	8005982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058b2:	4b37      	ldr	r3, [pc, #220]	; (8005990 <HAL_RCC_ClockConfig+0x1bc>)
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f023 0203 	bic.w	r2, r3, #3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	4934      	ldr	r1, [pc, #208]	; (8005990 <HAL_RCC_ClockConfig+0x1bc>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058c4:	f7fd fe54 	bl	8003570 <HAL_GetTick>
 80058c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ca:	e00a      	b.n	80058e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058cc:	f7fd fe50 	bl	8003570 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80058da:	4293      	cmp	r3, r2
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e04f      	b.n	8005982 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058e2:	4b2b      	ldr	r3, [pc, #172]	; (8005990 <HAL_RCC_ClockConfig+0x1bc>)
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f003 020c 	and.w	r2, r3, #12
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d1eb      	bne.n	80058cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058f4:	4b25      	ldr	r3, [pc, #148]	; (800598c <HAL_RCC_ClockConfig+0x1b8>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0307 	and.w	r3, r3, #7
 80058fc:	683a      	ldr	r2, [r7, #0]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d20c      	bcs.n	800591c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005902:	4b22      	ldr	r3, [pc, #136]	; (800598c <HAL_RCC_ClockConfig+0x1b8>)
 8005904:	683a      	ldr	r2, [r7, #0]
 8005906:	b2d2      	uxtb	r2, r2
 8005908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800590a:	4b20      	ldr	r3, [pc, #128]	; (800598c <HAL_RCC_ClockConfig+0x1b8>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0307 	and.w	r3, r3, #7
 8005912:	683a      	ldr	r2, [r7, #0]
 8005914:	429a      	cmp	r2, r3
 8005916:	d001      	beq.n	800591c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e032      	b.n	8005982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0304 	and.w	r3, r3, #4
 8005924:	2b00      	cmp	r3, #0
 8005926:	d008      	beq.n	800593a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005928:	4b19      	ldr	r3, [pc, #100]	; (8005990 <HAL_RCC_ClockConfig+0x1bc>)
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	4916      	ldr	r1, [pc, #88]	; (8005990 <HAL_RCC_ClockConfig+0x1bc>)
 8005936:	4313      	orrs	r3, r2
 8005938:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0308 	and.w	r3, r3, #8
 8005942:	2b00      	cmp	r3, #0
 8005944:	d009      	beq.n	800595a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005946:	4b12      	ldr	r3, [pc, #72]	; (8005990 <HAL_RCC_ClockConfig+0x1bc>)
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	00db      	lsls	r3, r3, #3
 8005954:	490e      	ldr	r1, [pc, #56]	; (8005990 <HAL_RCC_ClockConfig+0x1bc>)
 8005956:	4313      	orrs	r3, r2
 8005958:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800595a:	f000 f821 	bl	80059a0 <HAL_RCC_GetSysClockFreq>
 800595e:	4602      	mov	r2, r0
 8005960:	4b0b      	ldr	r3, [pc, #44]	; (8005990 <HAL_RCC_ClockConfig+0x1bc>)
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	091b      	lsrs	r3, r3, #4
 8005966:	f003 030f 	and.w	r3, r3, #15
 800596a:	490a      	ldr	r1, [pc, #40]	; (8005994 <HAL_RCC_ClockConfig+0x1c0>)
 800596c:	5ccb      	ldrb	r3, [r1, r3]
 800596e:	fa22 f303 	lsr.w	r3, r2, r3
 8005972:	4a09      	ldr	r2, [pc, #36]	; (8005998 <HAL_RCC_ClockConfig+0x1c4>)
 8005974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005976:	4b09      	ldr	r3, [pc, #36]	; (800599c <HAL_RCC_ClockConfig+0x1c8>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4618      	mov	r0, r3
 800597c:	f7fd fdb4 	bl	80034e8 <HAL_InitTick>

  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	40023c00 	.word	0x40023c00
 8005990:	40023800 	.word	0x40023800
 8005994:	08008a6c 	.word	0x08008a6c
 8005998:	200000e0 	.word	0x200000e0
 800599c:	200000e4 	.word	0x200000e4

080059a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059a0:	b5b0      	push	{r4, r5, r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80059a6:	2100      	movs	r1, #0
 80059a8:	6079      	str	r1, [r7, #4]
 80059aa:	2100      	movs	r1, #0
 80059ac:	60f9      	str	r1, [r7, #12]
 80059ae:	2100      	movs	r1, #0
 80059b0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80059b2:	2100      	movs	r1, #0
 80059b4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059b6:	4952      	ldr	r1, [pc, #328]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x160>)
 80059b8:	6889      	ldr	r1, [r1, #8]
 80059ba:	f001 010c 	and.w	r1, r1, #12
 80059be:	2908      	cmp	r1, #8
 80059c0:	d00d      	beq.n	80059de <HAL_RCC_GetSysClockFreq+0x3e>
 80059c2:	2908      	cmp	r1, #8
 80059c4:	f200 8094 	bhi.w	8005af0 <HAL_RCC_GetSysClockFreq+0x150>
 80059c8:	2900      	cmp	r1, #0
 80059ca:	d002      	beq.n	80059d2 <HAL_RCC_GetSysClockFreq+0x32>
 80059cc:	2904      	cmp	r1, #4
 80059ce:	d003      	beq.n	80059d8 <HAL_RCC_GetSysClockFreq+0x38>
 80059d0:	e08e      	b.n	8005af0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059d2:	4b4c      	ldr	r3, [pc, #304]	; (8005b04 <HAL_RCC_GetSysClockFreq+0x164>)
 80059d4:	60bb      	str	r3, [r7, #8]
       break;
 80059d6:	e08e      	b.n	8005af6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059d8:	4b4b      	ldr	r3, [pc, #300]	; (8005b08 <HAL_RCC_GetSysClockFreq+0x168>)
 80059da:	60bb      	str	r3, [r7, #8]
      break;
 80059dc:	e08b      	b.n	8005af6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059de:	4948      	ldr	r1, [pc, #288]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x160>)
 80059e0:	6849      	ldr	r1, [r1, #4]
 80059e2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80059e6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059e8:	4945      	ldr	r1, [pc, #276]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x160>)
 80059ea:	6849      	ldr	r1, [r1, #4]
 80059ec:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80059f0:	2900      	cmp	r1, #0
 80059f2:	d024      	beq.n	8005a3e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059f4:	4942      	ldr	r1, [pc, #264]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x160>)
 80059f6:	6849      	ldr	r1, [r1, #4]
 80059f8:	0989      	lsrs	r1, r1, #6
 80059fa:	4608      	mov	r0, r1
 80059fc:	f04f 0100 	mov.w	r1, #0
 8005a00:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005a04:	f04f 0500 	mov.w	r5, #0
 8005a08:	ea00 0204 	and.w	r2, r0, r4
 8005a0c:	ea01 0305 	and.w	r3, r1, r5
 8005a10:	493d      	ldr	r1, [pc, #244]	; (8005b08 <HAL_RCC_GetSysClockFreq+0x168>)
 8005a12:	fb01 f003 	mul.w	r0, r1, r3
 8005a16:	2100      	movs	r1, #0
 8005a18:	fb01 f102 	mul.w	r1, r1, r2
 8005a1c:	1844      	adds	r4, r0, r1
 8005a1e:	493a      	ldr	r1, [pc, #232]	; (8005b08 <HAL_RCC_GetSysClockFreq+0x168>)
 8005a20:	fba2 0101 	umull	r0, r1, r2, r1
 8005a24:	1863      	adds	r3, r4, r1
 8005a26:	4619      	mov	r1, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	f04f 0300 	mov.w	r3, #0
 8005a30:	f7fa fbca 	bl	80001c8 <__aeabi_uldivmod>
 8005a34:	4602      	mov	r2, r0
 8005a36:	460b      	mov	r3, r1
 8005a38:	4613      	mov	r3, r2
 8005a3a:	60fb      	str	r3, [r7, #12]
 8005a3c:	e04a      	b.n	8005ad4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a3e:	4b30      	ldr	r3, [pc, #192]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x160>)
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	099b      	lsrs	r3, r3, #6
 8005a44:	461a      	mov	r2, r3
 8005a46:	f04f 0300 	mov.w	r3, #0
 8005a4a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005a4e:	f04f 0100 	mov.w	r1, #0
 8005a52:	ea02 0400 	and.w	r4, r2, r0
 8005a56:	ea03 0501 	and.w	r5, r3, r1
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	4629      	mov	r1, r5
 8005a5e:	f04f 0200 	mov.w	r2, #0
 8005a62:	f04f 0300 	mov.w	r3, #0
 8005a66:	014b      	lsls	r3, r1, #5
 8005a68:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005a6c:	0142      	lsls	r2, r0, #5
 8005a6e:	4610      	mov	r0, r2
 8005a70:	4619      	mov	r1, r3
 8005a72:	1b00      	subs	r0, r0, r4
 8005a74:	eb61 0105 	sbc.w	r1, r1, r5
 8005a78:	f04f 0200 	mov.w	r2, #0
 8005a7c:	f04f 0300 	mov.w	r3, #0
 8005a80:	018b      	lsls	r3, r1, #6
 8005a82:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005a86:	0182      	lsls	r2, r0, #6
 8005a88:	1a12      	subs	r2, r2, r0
 8005a8a:	eb63 0301 	sbc.w	r3, r3, r1
 8005a8e:	f04f 0000 	mov.w	r0, #0
 8005a92:	f04f 0100 	mov.w	r1, #0
 8005a96:	00d9      	lsls	r1, r3, #3
 8005a98:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a9c:	00d0      	lsls	r0, r2, #3
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	1912      	adds	r2, r2, r4
 8005aa4:	eb45 0303 	adc.w	r3, r5, r3
 8005aa8:	f04f 0000 	mov.w	r0, #0
 8005aac:	f04f 0100 	mov.w	r1, #0
 8005ab0:	0299      	lsls	r1, r3, #10
 8005ab2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005ab6:	0290      	lsls	r0, r2, #10
 8005ab8:	4602      	mov	r2, r0
 8005aba:	460b      	mov	r3, r1
 8005abc:	4610      	mov	r0, r2
 8005abe:	4619      	mov	r1, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	f04f 0300 	mov.w	r3, #0
 8005ac8:	f7fa fb7e 	bl	80001c8 <__aeabi_uldivmod>
 8005acc:	4602      	mov	r2, r0
 8005ace:	460b      	mov	r3, r1
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ad4:	4b0a      	ldr	r3, [pc, #40]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x160>)
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	0c1b      	lsrs	r3, r3, #16
 8005ada:	f003 0303 	and.w	r3, r3, #3
 8005ade:	3301      	adds	r3, #1
 8005ae0:	005b      	lsls	r3, r3, #1
 8005ae2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aec:	60bb      	str	r3, [r7, #8]
      break;
 8005aee:	e002      	b.n	8005af6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005af0:	4b04      	ldr	r3, [pc, #16]	; (8005b04 <HAL_RCC_GetSysClockFreq+0x164>)
 8005af2:	60bb      	str	r3, [r7, #8]
      break;
 8005af4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005af6:	68bb      	ldr	r3, [r7, #8]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bdb0      	pop	{r4, r5, r7, pc}
 8005b00:	40023800 	.word	0x40023800
 8005b04:	00f42400 	.word	0x00f42400
 8005b08:	017d7840 	.word	0x017d7840

08005b0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b10:	4b03      	ldr	r3, [pc, #12]	; (8005b20 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b12:	681b      	ldr	r3, [r3, #0]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	200000e0 	.word	0x200000e0

08005b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b28:	f7ff fff0 	bl	8005b0c <HAL_RCC_GetHCLKFreq>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	4b05      	ldr	r3, [pc, #20]	; (8005b44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	0a9b      	lsrs	r3, r3, #10
 8005b34:	f003 0307 	and.w	r3, r3, #7
 8005b38:	4903      	ldr	r1, [pc, #12]	; (8005b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b3a:	5ccb      	ldrb	r3, [r1, r3]
 8005b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	40023800 	.word	0x40023800
 8005b48:	08008a7c 	.word	0x08008a7c

08005b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b50:	f7ff ffdc 	bl	8005b0c <HAL_RCC_GetHCLKFreq>
 8005b54:	4602      	mov	r2, r0
 8005b56:	4b05      	ldr	r3, [pc, #20]	; (8005b6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	0b5b      	lsrs	r3, r3, #13
 8005b5c:	f003 0307 	and.w	r3, r3, #7
 8005b60:	4903      	ldr	r1, [pc, #12]	; (8005b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b62:	5ccb      	ldrb	r3, [r1, r3]
 8005b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	40023800 	.word	0x40023800
 8005b70:	08008a7c 	.word	0x08008a7c

08005b74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d101      	bne.n	8005b86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e041      	b.n	8005c0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d106      	bne.n	8005ba0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f7fd f94a 	bl	8002e34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	3304      	adds	r3, #4
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	4610      	mov	r0, r2
 8005bb4:	f000 fb48 	bl	8006248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3708      	adds	r7, #8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b082      	sub	sp, #8
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e041      	b.n	8005ca8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d106      	bne.n	8005c3e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 f839 	bl	8005cb0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2202      	movs	r2, #2
 8005c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	3304      	adds	r3, #4
 8005c4e:	4619      	mov	r1, r3
 8005c50:	4610      	mov	r0, r2
 8005c52:	f000 faf9 	bl	8006248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3708      	adds	r7, #8
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d109      	bne.n	8005ce8 <HAL_TIM_PWM_Start+0x24>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	bf14      	ite	ne
 8005ce0:	2301      	movne	r3, #1
 8005ce2:	2300      	moveq	r3, #0
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	e022      	b.n	8005d2e <HAL_TIM_PWM_Start+0x6a>
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	2b04      	cmp	r3, #4
 8005cec:	d109      	bne.n	8005d02 <HAL_TIM_PWM_Start+0x3e>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	bf14      	ite	ne
 8005cfa:	2301      	movne	r3, #1
 8005cfc:	2300      	moveq	r3, #0
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	e015      	b.n	8005d2e <HAL_TIM_PWM_Start+0x6a>
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	2b08      	cmp	r3, #8
 8005d06:	d109      	bne.n	8005d1c <HAL_TIM_PWM_Start+0x58>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	bf14      	ite	ne
 8005d14:	2301      	movne	r3, #1
 8005d16:	2300      	moveq	r3, #0
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	e008      	b.n	8005d2e <HAL_TIM_PWM_Start+0x6a>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	bf14      	ite	ne
 8005d28:	2301      	movne	r3, #1
 8005d2a:	2300      	moveq	r3, #0
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e07c      	b.n	8005e30 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d104      	bne.n	8005d46 <HAL_TIM_PWM_Start+0x82>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2202      	movs	r2, #2
 8005d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d44:	e013      	b.n	8005d6e <HAL_TIM_PWM_Start+0xaa>
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	2b04      	cmp	r3, #4
 8005d4a:	d104      	bne.n	8005d56 <HAL_TIM_PWM_Start+0x92>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2202      	movs	r2, #2
 8005d50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d54:	e00b      	b.n	8005d6e <HAL_TIM_PWM_Start+0xaa>
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	2b08      	cmp	r3, #8
 8005d5a:	d104      	bne.n	8005d66 <HAL_TIM_PWM_Start+0xa2>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2202      	movs	r2, #2
 8005d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d64:	e003      	b.n	8005d6e <HAL_TIM_PWM_Start+0xaa>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2202      	movs	r2, #2
 8005d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2201      	movs	r2, #1
 8005d74:	6839      	ldr	r1, [r7, #0]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 fd50 	bl	800681c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a2d      	ldr	r2, [pc, #180]	; (8005e38 <HAL_TIM_PWM_Start+0x174>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d004      	beq.n	8005d90 <HAL_TIM_PWM_Start+0xcc>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a2c      	ldr	r2, [pc, #176]	; (8005e3c <HAL_TIM_PWM_Start+0x178>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d101      	bne.n	8005d94 <HAL_TIM_PWM_Start+0xd0>
 8005d90:	2301      	movs	r3, #1
 8005d92:	e000      	b.n	8005d96 <HAL_TIM_PWM_Start+0xd2>
 8005d94:	2300      	movs	r3, #0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d007      	beq.n	8005daa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005da8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a22      	ldr	r2, [pc, #136]	; (8005e38 <HAL_TIM_PWM_Start+0x174>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d022      	beq.n	8005dfa <HAL_TIM_PWM_Start+0x136>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dbc:	d01d      	beq.n	8005dfa <HAL_TIM_PWM_Start+0x136>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a1f      	ldr	r2, [pc, #124]	; (8005e40 <HAL_TIM_PWM_Start+0x17c>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d018      	beq.n	8005dfa <HAL_TIM_PWM_Start+0x136>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a1d      	ldr	r2, [pc, #116]	; (8005e44 <HAL_TIM_PWM_Start+0x180>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d013      	beq.n	8005dfa <HAL_TIM_PWM_Start+0x136>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a1c      	ldr	r2, [pc, #112]	; (8005e48 <HAL_TIM_PWM_Start+0x184>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d00e      	beq.n	8005dfa <HAL_TIM_PWM_Start+0x136>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a16      	ldr	r2, [pc, #88]	; (8005e3c <HAL_TIM_PWM_Start+0x178>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d009      	beq.n	8005dfa <HAL_TIM_PWM_Start+0x136>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a18      	ldr	r2, [pc, #96]	; (8005e4c <HAL_TIM_PWM_Start+0x188>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d004      	beq.n	8005dfa <HAL_TIM_PWM_Start+0x136>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a16      	ldr	r2, [pc, #88]	; (8005e50 <HAL_TIM_PWM_Start+0x18c>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d111      	bne.n	8005e1e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f003 0307 	and.w	r3, r3, #7
 8005e04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2b06      	cmp	r3, #6
 8005e0a:	d010      	beq.n	8005e2e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f042 0201 	orr.w	r2, r2, #1
 8005e1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e1c:	e007      	b.n	8005e2e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f042 0201 	orr.w	r2, r2, #1
 8005e2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3710      	adds	r7, #16
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	40010000 	.word	0x40010000
 8005e3c:	40010400 	.word	0x40010400
 8005e40:	40000400 	.word	0x40000400
 8005e44:	40000800 	.word	0x40000800
 8005e48:	40000c00 	.word	0x40000c00
 8005e4c:	40014000 	.word	0x40014000
 8005e50:	40001800 	.word	0x40001800

08005e54 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2200      	movs	r2, #0
 8005e64:	6839      	ldr	r1, [r7, #0]
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 fcd8 	bl	800681c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a2e      	ldr	r2, [pc, #184]	; (8005f2c <HAL_TIM_PWM_Stop+0xd8>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d004      	beq.n	8005e80 <HAL_TIM_PWM_Stop+0x2c>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a2d      	ldr	r2, [pc, #180]	; (8005f30 <HAL_TIM_PWM_Stop+0xdc>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d101      	bne.n	8005e84 <HAL_TIM_PWM_Stop+0x30>
 8005e80:	2301      	movs	r3, #1
 8005e82:	e000      	b.n	8005e86 <HAL_TIM_PWM_Stop+0x32>
 8005e84:	2300      	movs	r3, #0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d017      	beq.n	8005eba <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	6a1a      	ldr	r2, [r3, #32]
 8005e90:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e94:	4013      	ands	r3, r2
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10f      	bne.n	8005eba <HAL_TIM_PWM_Stop+0x66>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6a1a      	ldr	r2, [r3, #32]
 8005ea0:	f240 4344 	movw	r3, #1092	; 0x444
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d107      	bne.n	8005eba <HAL_TIM_PWM_Stop+0x66>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005eb8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	6a1a      	ldr	r2, [r3, #32]
 8005ec0:	f241 1311 	movw	r3, #4369	; 0x1111
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10f      	bne.n	8005eea <HAL_TIM_PWM_Stop+0x96>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	6a1a      	ldr	r2, [r3, #32]
 8005ed0:	f240 4344 	movw	r3, #1092	; 0x444
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d107      	bne.n	8005eea <HAL_TIM_PWM_Stop+0x96>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f022 0201 	bic.w	r2, r2, #1
 8005ee8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d104      	bne.n	8005efa <HAL_TIM_PWM_Stop+0xa6>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ef8:	e013      	b.n	8005f22 <HAL_TIM_PWM_Stop+0xce>
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	2b04      	cmp	r3, #4
 8005efe:	d104      	bne.n	8005f0a <HAL_TIM_PWM_Stop+0xb6>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f08:	e00b      	b.n	8005f22 <HAL_TIM_PWM_Stop+0xce>
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	2b08      	cmp	r3, #8
 8005f0e:	d104      	bne.n	8005f1a <HAL_TIM_PWM_Stop+0xc6>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f18:	e003      	b.n	8005f22 <HAL_TIM_PWM_Stop+0xce>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3708      	adds	r7, #8
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	40010000 	.word	0x40010000
 8005f30:	40010400 	.word	0x40010400

08005f34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b086      	sub	sp, #24
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f40:	2300      	movs	r3, #0
 8005f42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d101      	bne.n	8005f52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f4e:	2302      	movs	r3, #2
 8005f50:	e0ae      	b.n	80060b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2b0c      	cmp	r3, #12
 8005f5e:	f200 809f 	bhi.w	80060a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005f62:	a201      	add	r2, pc, #4	; (adr r2, 8005f68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f68:	08005f9d 	.word	0x08005f9d
 8005f6c:	080060a1 	.word	0x080060a1
 8005f70:	080060a1 	.word	0x080060a1
 8005f74:	080060a1 	.word	0x080060a1
 8005f78:	08005fdd 	.word	0x08005fdd
 8005f7c:	080060a1 	.word	0x080060a1
 8005f80:	080060a1 	.word	0x080060a1
 8005f84:	080060a1 	.word	0x080060a1
 8005f88:	0800601f 	.word	0x0800601f
 8005f8c:	080060a1 	.word	0x080060a1
 8005f90:	080060a1 	.word	0x080060a1
 8005f94:	080060a1 	.word	0x080060a1
 8005f98:	0800605f 	.word	0x0800605f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68b9      	ldr	r1, [r7, #8]
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f000 f9f0 	bl	8006388 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	699a      	ldr	r2, [r3, #24]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f042 0208 	orr.w	r2, r2, #8
 8005fb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	699a      	ldr	r2, [r3, #24]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f022 0204 	bic.w	r2, r2, #4
 8005fc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6999      	ldr	r1, [r3, #24]
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	691a      	ldr	r2, [r3, #16]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	430a      	orrs	r2, r1
 8005fd8:	619a      	str	r2, [r3, #24]
      break;
 8005fda:	e064      	b.n	80060a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68b9      	ldr	r1, [r7, #8]
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f000 fa40 	bl	8006468 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	699a      	ldr	r2, [r3, #24]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ff6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	699a      	ldr	r2, [r3, #24]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006006:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6999      	ldr	r1, [r3, #24]
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	021a      	lsls	r2, r3, #8
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	430a      	orrs	r2, r1
 800601a:	619a      	str	r2, [r3, #24]
      break;
 800601c:	e043      	b.n	80060a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68b9      	ldr	r1, [r7, #8]
 8006024:	4618      	mov	r0, r3
 8006026:	f000 fa95 	bl	8006554 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	69da      	ldr	r2, [r3, #28]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f042 0208 	orr.w	r2, r2, #8
 8006038:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	69da      	ldr	r2, [r3, #28]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f022 0204 	bic.w	r2, r2, #4
 8006048:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	69d9      	ldr	r1, [r3, #28]
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	691a      	ldr	r2, [r3, #16]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	430a      	orrs	r2, r1
 800605a:	61da      	str	r2, [r3, #28]
      break;
 800605c:	e023      	b.n	80060a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68b9      	ldr	r1, [r7, #8]
 8006064:	4618      	mov	r0, r3
 8006066:	f000 fae9 	bl	800663c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	69da      	ldr	r2, [r3, #28]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006078:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	69da      	ldr	r2, [r3, #28]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006088:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	69d9      	ldr	r1, [r3, #28]
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	021a      	lsls	r2, r3, #8
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	430a      	orrs	r2, r1
 800609c:	61da      	str	r2, [r3, #28]
      break;
 800609e:	e002      	b.n	80060a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	75fb      	strb	r3, [r7, #23]
      break;
 80060a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3718      	adds	r7, #24
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060c2:	2300      	movs	r3, #0
 80060c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d101      	bne.n	80060d4 <HAL_TIM_ConfigClockSource+0x1c>
 80060d0:	2302      	movs	r3, #2
 80060d2:	e0b4      	b.n	800623e <HAL_TIM_ConfigClockSource+0x186>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2202      	movs	r2, #2
 80060e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80060f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68ba      	ldr	r2, [r7, #8]
 8006102:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800610c:	d03e      	beq.n	800618c <HAL_TIM_ConfigClockSource+0xd4>
 800610e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006112:	f200 8087 	bhi.w	8006224 <HAL_TIM_ConfigClockSource+0x16c>
 8006116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800611a:	f000 8086 	beq.w	800622a <HAL_TIM_ConfigClockSource+0x172>
 800611e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006122:	d87f      	bhi.n	8006224 <HAL_TIM_ConfigClockSource+0x16c>
 8006124:	2b70      	cmp	r3, #112	; 0x70
 8006126:	d01a      	beq.n	800615e <HAL_TIM_ConfigClockSource+0xa6>
 8006128:	2b70      	cmp	r3, #112	; 0x70
 800612a:	d87b      	bhi.n	8006224 <HAL_TIM_ConfigClockSource+0x16c>
 800612c:	2b60      	cmp	r3, #96	; 0x60
 800612e:	d050      	beq.n	80061d2 <HAL_TIM_ConfigClockSource+0x11a>
 8006130:	2b60      	cmp	r3, #96	; 0x60
 8006132:	d877      	bhi.n	8006224 <HAL_TIM_ConfigClockSource+0x16c>
 8006134:	2b50      	cmp	r3, #80	; 0x50
 8006136:	d03c      	beq.n	80061b2 <HAL_TIM_ConfigClockSource+0xfa>
 8006138:	2b50      	cmp	r3, #80	; 0x50
 800613a:	d873      	bhi.n	8006224 <HAL_TIM_ConfigClockSource+0x16c>
 800613c:	2b40      	cmp	r3, #64	; 0x40
 800613e:	d058      	beq.n	80061f2 <HAL_TIM_ConfigClockSource+0x13a>
 8006140:	2b40      	cmp	r3, #64	; 0x40
 8006142:	d86f      	bhi.n	8006224 <HAL_TIM_ConfigClockSource+0x16c>
 8006144:	2b30      	cmp	r3, #48	; 0x30
 8006146:	d064      	beq.n	8006212 <HAL_TIM_ConfigClockSource+0x15a>
 8006148:	2b30      	cmp	r3, #48	; 0x30
 800614a:	d86b      	bhi.n	8006224 <HAL_TIM_ConfigClockSource+0x16c>
 800614c:	2b20      	cmp	r3, #32
 800614e:	d060      	beq.n	8006212 <HAL_TIM_ConfigClockSource+0x15a>
 8006150:	2b20      	cmp	r3, #32
 8006152:	d867      	bhi.n	8006224 <HAL_TIM_ConfigClockSource+0x16c>
 8006154:	2b00      	cmp	r3, #0
 8006156:	d05c      	beq.n	8006212 <HAL_TIM_ConfigClockSource+0x15a>
 8006158:	2b10      	cmp	r3, #16
 800615a:	d05a      	beq.n	8006212 <HAL_TIM_ConfigClockSource+0x15a>
 800615c:	e062      	b.n	8006224 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6818      	ldr	r0, [r3, #0]
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	6899      	ldr	r1, [r3, #8]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	685a      	ldr	r2, [r3, #4]
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	f000 fb35 	bl	80067dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006180:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	609a      	str	r2, [r3, #8]
      break;
 800618a:	e04f      	b.n	800622c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6818      	ldr	r0, [r3, #0]
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	6899      	ldr	r1, [r3, #8]
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	685a      	ldr	r2, [r3, #4]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	f000 fb1e 	bl	80067dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	689a      	ldr	r2, [r3, #8]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061ae:	609a      	str	r2, [r3, #8]
      break;
 80061b0:	e03c      	b.n	800622c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6818      	ldr	r0, [r3, #0]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	6859      	ldr	r1, [r3, #4]
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	461a      	mov	r2, r3
 80061c0:	f000 fa92 	bl	80066e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2150      	movs	r1, #80	; 0x50
 80061ca:	4618      	mov	r0, r3
 80061cc:	f000 faeb 	bl	80067a6 <TIM_ITRx_SetConfig>
      break;
 80061d0:	e02c      	b.n	800622c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6818      	ldr	r0, [r3, #0]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	6859      	ldr	r1, [r3, #4]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	461a      	mov	r2, r3
 80061e0:	f000 fab1 	bl	8006746 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2160      	movs	r1, #96	; 0x60
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 fadb 	bl	80067a6 <TIM_ITRx_SetConfig>
      break;
 80061f0:	e01c      	b.n	800622c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6818      	ldr	r0, [r3, #0]
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	6859      	ldr	r1, [r3, #4]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	461a      	mov	r2, r3
 8006200:	f000 fa72 	bl	80066e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2140      	movs	r1, #64	; 0x40
 800620a:	4618      	mov	r0, r3
 800620c:	f000 facb 	bl	80067a6 <TIM_ITRx_SetConfig>
      break;
 8006210:	e00c      	b.n	800622c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4619      	mov	r1, r3
 800621c:	4610      	mov	r0, r2
 800621e:	f000 fac2 	bl	80067a6 <TIM_ITRx_SetConfig>
      break;
 8006222:	e003      	b.n	800622c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	73fb      	strb	r3, [r7, #15]
      break;
 8006228:	e000      	b.n	800622c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800622a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800623c:	7bfb      	ldrb	r3, [r7, #15]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
	...

08006248 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a40      	ldr	r2, [pc, #256]	; (800635c <TIM_Base_SetConfig+0x114>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d013      	beq.n	8006288 <TIM_Base_SetConfig+0x40>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006266:	d00f      	beq.n	8006288 <TIM_Base_SetConfig+0x40>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a3d      	ldr	r2, [pc, #244]	; (8006360 <TIM_Base_SetConfig+0x118>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d00b      	beq.n	8006288 <TIM_Base_SetConfig+0x40>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a3c      	ldr	r2, [pc, #240]	; (8006364 <TIM_Base_SetConfig+0x11c>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d007      	beq.n	8006288 <TIM_Base_SetConfig+0x40>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a3b      	ldr	r2, [pc, #236]	; (8006368 <TIM_Base_SetConfig+0x120>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d003      	beq.n	8006288 <TIM_Base_SetConfig+0x40>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a3a      	ldr	r2, [pc, #232]	; (800636c <TIM_Base_SetConfig+0x124>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d108      	bne.n	800629a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800628e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	4313      	orrs	r3, r2
 8006298:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a2f      	ldr	r2, [pc, #188]	; (800635c <TIM_Base_SetConfig+0x114>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d02b      	beq.n	80062fa <TIM_Base_SetConfig+0xb2>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a8:	d027      	beq.n	80062fa <TIM_Base_SetConfig+0xb2>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a2c      	ldr	r2, [pc, #176]	; (8006360 <TIM_Base_SetConfig+0x118>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d023      	beq.n	80062fa <TIM_Base_SetConfig+0xb2>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a2b      	ldr	r2, [pc, #172]	; (8006364 <TIM_Base_SetConfig+0x11c>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d01f      	beq.n	80062fa <TIM_Base_SetConfig+0xb2>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a2a      	ldr	r2, [pc, #168]	; (8006368 <TIM_Base_SetConfig+0x120>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d01b      	beq.n	80062fa <TIM_Base_SetConfig+0xb2>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a29      	ldr	r2, [pc, #164]	; (800636c <TIM_Base_SetConfig+0x124>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d017      	beq.n	80062fa <TIM_Base_SetConfig+0xb2>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a28      	ldr	r2, [pc, #160]	; (8006370 <TIM_Base_SetConfig+0x128>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d013      	beq.n	80062fa <TIM_Base_SetConfig+0xb2>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a27      	ldr	r2, [pc, #156]	; (8006374 <TIM_Base_SetConfig+0x12c>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d00f      	beq.n	80062fa <TIM_Base_SetConfig+0xb2>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a26      	ldr	r2, [pc, #152]	; (8006378 <TIM_Base_SetConfig+0x130>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d00b      	beq.n	80062fa <TIM_Base_SetConfig+0xb2>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a25      	ldr	r2, [pc, #148]	; (800637c <TIM_Base_SetConfig+0x134>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d007      	beq.n	80062fa <TIM_Base_SetConfig+0xb2>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a24      	ldr	r2, [pc, #144]	; (8006380 <TIM_Base_SetConfig+0x138>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d003      	beq.n	80062fa <TIM_Base_SetConfig+0xb2>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a23      	ldr	r2, [pc, #140]	; (8006384 <TIM_Base_SetConfig+0x13c>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d108      	bne.n	800630c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006300:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	4313      	orrs	r3, r2
 800630a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	4313      	orrs	r3, r2
 8006318:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	689a      	ldr	r2, [r3, #8]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a0a      	ldr	r2, [pc, #40]	; (800635c <TIM_Base_SetConfig+0x114>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d003      	beq.n	8006340 <TIM_Base_SetConfig+0xf8>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a0c      	ldr	r2, [pc, #48]	; (800636c <TIM_Base_SetConfig+0x124>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d103      	bne.n	8006348 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	691a      	ldr	r2, [r3, #16]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	615a      	str	r2, [r3, #20]
}
 800634e:	bf00      	nop
 8006350:	3714      	adds	r7, #20
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	40010000 	.word	0x40010000
 8006360:	40000400 	.word	0x40000400
 8006364:	40000800 	.word	0x40000800
 8006368:	40000c00 	.word	0x40000c00
 800636c:	40010400 	.word	0x40010400
 8006370:	40014000 	.word	0x40014000
 8006374:	40014400 	.word	0x40014400
 8006378:	40014800 	.word	0x40014800
 800637c:	40001800 	.word	0x40001800
 8006380:	40001c00 	.word	0x40001c00
 8006384:	40002000 	.word	0x40002000

08006388 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006388:	b480      	push	{r7}
 800638a:	b087      	sub	sp, #28
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	f023 0201 	bic.w	r2, r3, #1
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a1b      	ldr	r3, [r3, #32]
 80063a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f023 0303 	bic.w	r3, r3, #3
 80063be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	f023 0302 	bic.w	r3, r3, #2
 80063d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	4313      	orrs	r3, r2
 80063da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a20      	ldr	r2, [pc, #128]	; (8006460 <TIM_OC1_SetConfig+0xd8>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d003      	beq.n	80063ec <TIM_OC1_SetConfig+0x64>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a1f      	ldr	r2, [pc, #124]	; (8006464 <TIM_OC1_SetConfig+0xdc>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d10c      	bne.n	8006406 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	f023 0308 	bic.w	r3, r3, #8
 80063f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f023 0304 	bic.w	r3, r3, #4
 8006404:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a15      	ldr	r2, [pc, #84]	; (8006460 <TIM_OC1_SetConfig+0xd8>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d003      	beq.n	8006416 <TIM_OC1_SetConfig+0x8e>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a14      	ldr	r2, [pc, #80]	; (8006464 <TIM_OC1_SetConfig+0xdc>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d111      	bne.n	800643a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800641c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006424:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	695b      	ldr	r3, [r3, #20]
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	4313      	orrs	r3, r2
 800642e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	4313      	orrs	r3, r2
 8006438:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	685a      	ldr	r2, [r3, #4]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	621a      	str	r2, [r3, #32]
}
 8006454:	bf00      	nop
 8006456:	371c      	adds	r7, #28
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr
 8006460:	40010000 	.word	0x40010000
 8006464:	40010400 	.word	0x40010400

08006468 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006468:	b480      	push	{r7}
 800646a:	b087      	sub	sp, #28
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	f023 0210 	bic.w	r2, r3, #16
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800649e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	021b      	lsls	r3, r3, #8
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	f023 0320 	bic.w	r3, r3, #32
 80064b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	011b      	lsls	r3, r3, #4
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	4313      	orrs	r3, r2
 80064be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a22      	ldr	r2, [pc, #136]	; (800654c <TIM_OC2_SetConfig+0xe4>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d003      	beq.n	80064d0 <TIM_OC2_SetConfig+0x68>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a21      	ldr	r2, [pc, #132]	; (8006550 <TIM_OC2_SetConfig+0xe8>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d10d      	bne.n	80064ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	011b      	lsls	r3, r3, #4
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a17      	ldr	r2, [pc, #92]	; (800654c <TIM_OC2_SetConfig+0xe4>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d003      	beq.n	80064fc <TIM_OC2_SetConfig+0x94>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a16      	ldr	r2, [pc, #88]	; (8006550 <TIM_OC2_SetConfig+0xe8>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d113      	bne.n	8006524 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006502:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800650a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	695b      	ldr	r3, [r3, #20]
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	693a      	ldr	r2, [r7, #16]
 8006514:	4313      	orrs	r3, r2
 8006516:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	4313      	orrs	r3, r2
 8006522:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	693a      	ldr	r2, [r7, #16]
 8006528:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	621a      	str	r2, [r3, #32]
}
 800653e:	bf00      	nop
 8006540:	371c      	adds	r7, #28
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	40010000 	.word	0x40010000
 8006550:	40010400 	.word	0x40010400

08006554 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006554:	b480      	push	{r7}
 8006556:	b087      	sub	sp, #28
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	69db      	ldr	r3, [r3, #28]
 800657a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f023 0303 	bic.w	r3, r3, #3
 800658a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	4313      	orrs	r3, r2
 8006594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800659c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	021b      	lsls	r3, r3, #8
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a21      	ldr	r2, [pc, #132]	; (8006634 <TIM_OC3_SetConfig+0xe0>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d003      	beq.n	80065ba <TIM_OC3_SetConfig+0x66>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a20      	ldr	r2, [pc, #128]	; (8006638 <TIM_OC3_SetConfig+0xe4>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d10d      	bne.n	80065d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	021b      	lsls	r3, r3, #8
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a16      	ldr	r2, [pc, #88]	; (8006634 <TIM_OC3_SetConfig+0xe0>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d003      	beq.n	80065e6 <TIM_OC3_SetConfig+0x92>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a15      	ldr	r2, [pc, #84]	; (8006638 <TIM_OC3_SetConfig+0xe4>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d113      	bne.n	800660e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	695b      	ldr	r3, [r3, #20]
 80065fa:	011b      	lsls	r3, r3, #4
 80065fc:	693a      	ldr	r2, [r7, #16]
 80065fe:	4313      	orrs	r3, r2
 8006600:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	011b      	lsls	r3, r3, #4
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	4313      	orrs	r3, r2
 800660c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	685a      	ldr	r2, [r3, #4]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	697a      	ldr	r2, [r7, #20]
 8006626:	621a      	str	r2, [r3, #32]
}
 8006628:	bf00      	nop
 800662a:	371c      	adds	r7, #28
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr
 8006634:	40010000 	.word	0x40010000
 8006638:	40010400 	.word	0x40010400

0800663c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800663c:	b480      	push	{r7}
 800663e:	b087      	sub	sp, #28
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	69db      	ldr	r3, [r3, #28]
 8006662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800666a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006672:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	021b      	lsls	r3, r3, #8
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	4313      	orrs	r3, r2
 800667e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006686:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	031b      	lsls	r3, r3, #12
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	4313      	orrs	r3, r2
 8006692:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a12      	ldr	r2, [pc, #72]	; (80066e0 <TIM_OC4_SetConfig+0xa4>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d003      	beq.n	80066a4 <TIM_OC4_SetConfig+0x68>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a11      	ldr	r2, [pc, #68]	; (80066e4 <TIM_OC4_SetConfig+0xa8>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d109      	bne.n	80066b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	019b      	lsls	r3, r3, #6
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	685a      	ldr	r2, [r3, #4]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	621a      	str	r2, [r3, #32]
}
 80066d2:	bf00      	nop
 80066d4:	371c      	adds	r7, #28
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	40010000 	.word	0x40010000
 80066e4:	40010400 	.word	0x40010400

080066e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b087      	sub	sp, #28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6a1b      	ldr	r3, [r3, #32]
 80066f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	f023 0201 	bic.w	r2, r3, #1
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006712:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	011b      	lsls	r3, r3, #4
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	4313      	orrs	r3, r2
 800671c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	f023 030a 	bic.w	r3, r3, #10
 8006724:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	4313      	orrs	r3, r2
 800672c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	621a      	str	r2, [r3, #32]
}
 800673a:	bf00      	nop
 800673c:	371c      	adds	r7, #28
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006746:	b480      	push	{r7}
 8006748:	b087      	sub	sp, #28
 800674a:	af00      	add	r7, sp, #0
 800674c:	60f8      	str	r0, [r7, #12]
 800674e:	60b9      	str	r1, [r7, #8]
 8006750:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	f023 0210 	bic.w	r2, r3, #16
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6a1b      	ldr	r3, [r3, #32]
 8006768:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006770:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	031b      	lsls	r3, r3, #12
 8006776:	697a      	ldr	r2, [r7, #20]
 8006778:	4313      	orrs	r3, r2
 800677a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006782:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	011b      	lsls	r3, r3, #4
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	4313      	orrs	r3, r2
 800678c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	697a      	ldr	r2, [r7, #20]
 8006792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	693a      	ldr	r2, [r7, #16]
 8006798:	621a      	str	r2, [r3, #32]
}
 800679a:	bf00      	nop
 800679c:	371c      	adds	r7, #28
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr

080067a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067a6:	b480      	push	{r7}
 80067a8:	b085      	sub	sp, #20
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
 80067ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067be:	683a      	ldr	r2, [r7, #0]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	f043 0307 	orr.w	r3, r3, #7
 80067c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	609a      	str	r2, [r3, #8]
}
 80067d0:	bf00      	nop
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067dc:	b480      	push	{r7}
 80067de:	b087      	sub	sp, #28
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
 80067e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	021a      	lsls	r2, r3, #8
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	431a      	orrs	r2, r3
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	4313      	orrs	r3, r2
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	4313      	orrs	r3, r2
 8006808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	697a      	ldr	r2, [r7, #20]
 800680e:	609a      	str	r2, [r3, #8]
}
 8006810:	bf00      	nop
 8006812:	371c      	adds	r7, #28
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800681c:	b480      	push	{r7}
 800681e:	b087      	sub	sp, #28
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	f003 031f 	and.w	r3, r3, #31
 800682e:	2201      	movs	r2, #1
 8006830:	fa02 f303 	lsl.w	r3, r2, r3
 8006834:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6a1a      	ldr	r2, [r3, #32]
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	43db      	mvns	r3, r3
 800683e:	401a      	ands	r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6a1a      	ldr	r2, [r3, #32]
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	f003 031f 	and.w	r3, r3, #31
 800684e:	6879      	ldr	r1, [r7, #4]
 8006850:	fa01 f303 	lsl.w	r3, r1, r3
 8006854:	431a      	orrs	r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	621a      	str	r2, [r3, #32]
}
 800685a:	bf00      	nop
 800685c:	371c      	adds	r7, #28
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
	...

08006868 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006868:	b480      	push	{r7}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006878:	2b01      	cmp	r3, #1
 800687a:	d101      	bne.n	8006880 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800687c:	2302      	movs	r3, #2
 800687e:	e05a      	b.n	8006936 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2202      	movs	r2, #2
 800688c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a21      	ldr	r2, [pc, #132]	; (8006944 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d022      	beq.n	800690a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068cc:	d01d      	beq.n	800690a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a1d      	ldr	r2, [pc, #116]	; (8006948 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d018      	beq.n	800690a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a1b      	ldr	r2, [pc, #108]	; (800694c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d013      	beq.n	800690a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a1a      	ldr	r2, [pc, #104]	; (8006950 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d00e      	beq.n	800690a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a18      	ldr	r2, [pc, #96]	; (8006954 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d009      	beq.n	800690a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a17      	ldr	r2, [pc, #92]	; (8006958 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d004      	beq.n	800690a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a15      	ldr	r2, [pc, #84]	; (800695c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d10c      	bne.n	8006924 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006910:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	4313      	orrs	r3, r2
 800691a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3714      	adds	r7, #20
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	40010000 	.word	0x40010000
 8006948:	40000400 	.word	0x40000400
 800694c:	40000800 	.word	0x40000800
 8006950:	40000c00 	.word	0x40000c00
 8006954:	40010400 	.word	0x40010400
 8006958:	40014000 	.word	0x40014000
 800695c:	40001800 	.word	0x40001800

08006960 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d101      	bne.n	8006972 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e03f      	b.n	80069f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	d106      	bne.n	800698c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f7fc fb24 	bl	8002fd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2224      	movs	r2, #36	; 0x24
 8006990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68da      	ldr	r2, [r3, #12]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 ff49 	bl	800783c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	691a      	ldr	r2, [r3, #16]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	695a      	ldr	r2, [r3, #20]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80069c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	68da      	ldr	r2, [r3, #12]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2220      	movs	r2, #32
 80069e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2220      	movs	r2, #32
 80069ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3708      	adds	r7, #8
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
	...

080069fc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b08c      	sub	sp, #48	; 0x30
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	4613      	mov	r3, r2
 8006a08:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	2b20      	cmp	r3, #32
 8006a14:	d165      	bne.n	8006ae2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d002      	beq.n	8006a22 <HAL_UART_Transmit_DMA+0x26>
 8006a1c:	88fb      	ldrh	r3, [r7, #6]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d101      	bne.n	8006a26 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e05e      	b.n	8006ae4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d101      	bne.n	8006a34 <HAL_UART_Transmit_DMA+0x38>
 8006a30:	2302      	movs	r3, #2
 8006a32:	e057      	b.n	8006ae4 <HAL_UART_Transmit_DMA+0xe8>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006a3c:	68ba      	ldr	r2, [r7, #8]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	88fa      	ldrh	r2, [r7, #6]
 8006a46:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	88fa      	ldrh	r2, [r7, #6]
 8006a4c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2221      	movs	r2, #33	; 0x21
 8006a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a60:	4a22      	ldr	r2, [pc, #136]	; (8006aec <HAL_UART_Transmit_DMA+0xf0>)
 8006a62:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a68:	4a21      	ldr	r2, [pc, #132]	; (8006af0 <HAL_UART_Transmit_DMA+0xf4>)
 8006a6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a70:	4a20      	ldr	r2, [pc, #128]	; (8006af4 <HAL_UART_Transmit_DMA+0xf8>)
 8006a72:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a78:	2200      	movs	r2, #0
 8006a7a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8006a7c:	f107 0308 	add.w	r3, r7, #8
 8006a80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a88:	6819      	ldr	r1, [r3, #0]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	3304      	adds	r3, #4
 8006a90:	461a      	mov	r2, r3
 8006a92:	88fb      	ldrh	r3, [r7, #6]
 8006a94:	f7fc ff5c 	bl	8003950 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006aa0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	3314      	adds	r3, #20
 8006ab0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	e853 3f00 	ldrex	r3, [r3]
 8006ab8:	617b      	str	r3, [r7, #20]
   return(result);
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	3314      	adds	r3, #20
 8006ac8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006aca:	627a      	str	r2, [r7, #36]	; 0x24
 8006acc:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ace:	6a39      	ldr	r1, [r7, #32]
 8006ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ad2:	e841 2300 	strex	r3, r2, [r1]
 8006ad6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1e5      	bne.n	8006aaa <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	e000      	b.n	8006ae4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8006ae2:	2302      	movs	r3, #2
  }
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3730      	adds	r7, #48	; 0x30
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	080070dd 	.word	0x080070dd
 8006af0:	08007177 	.word	0x08007177
 8006af4:	080072ef 	.word	0x080072ef

08006af8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	4613      	mov	r3, r2
 8006b04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b20      	cmp	r3, #32
 8006b10:	d11d      	bne.n	8006b4e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d002      	beq.n	8006b1e <HAL_UART_Receive_DMA+0x26>
 8006b18:	88fb      	ldrh	r3, [r7, #6]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d101      	bne.n	8006b22 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e016      	b.n	8006b50 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d101      	bne.n	8006b30 <HAL_UART_Receive_DMA+0x38>
 8006b2c:	2302      	movs	r3, #2
 8006b2e:	e00f      	b.n	8006b50 <HAL_UART_Receive_DMA+0x58>
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006b3e:	88fb      	ldrh	r3, [r7, #6]
 8006b40:	461a      	mov	r2, r3
 8006b42:	68b9      	ldr	r1, [r7, #8]
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f000 fc1d 	bl	8007384 <UART_Start_Receive_DMA>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	e000      	b.n	8006b50 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006b4e:	2302      	movs	r3, #2
  }
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3710      	adds	r7, #16
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b0ba      	sub	sp, #232	; 0xe8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006b84:	2300      	movs	r3, #0
 8006b86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b8e:	f003 030f 	and.w	r3, r3, #15
 8006b92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006b96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d10f      	bne.n	8006bbe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ba2:	f003 0320 	and.w	r3, r3, #32
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d009      	beq.n	8006bbe <HAL_UART_IRQHandler+0x66>
 8006baa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bae:	f003 0320 	and.w	r3, r3, #32
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d003      	beq.n	8006bbe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 fd85 	bl	80076c6 <UART_Receive_IT>
      return;
 8006bbc:	e256      	b.n	800706c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006bbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	f000 80de 	beq.w	8006d84 <HAL_UART_IRQHandler+0x22c>
 8006bc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bcc:	f003 0301 	and.w	r3, r3, #1
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d106      	bne.n	8006be2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bd8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f000 80d1 	beq.w	8006d84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006be6:	f003 0301 	and.w	r3, r3, #1
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00b      	beq.n	8006c06 <HAL_UART_IRQHandler+0xae>
 8006bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d005      	beq.n	8006c06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfe:	f043 0201 	orr.w	r2, r3, #1
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c0a:	f003 0304 	and.w	r3, r3, #4
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00b      	beq.n	8006c2a <HAL_UART_IRQHandler+0xd2>
 8006c12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c16:	f003 0301 	and.w	r3, r3, #1
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d005      	beq.n	8006c2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c22:	f043 0202 	orr.w	r2, r3, #2
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c2e:	f003 0302 	and.w	r3, r3, #2
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00b      	beq.n	8006c4e <HAL_UART_IRQHandler+0xf6>
 8006c36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c3a:	f003 0301 	and.w	r3, r3, #1
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d005      	beq.n	8006c4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c46:	f043 0204 	orr.w	r2, r3, #4
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c52:	f003 0308 	and.w	r3, r3, #8
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d011      	beq.n	8006c7e <HAL_UART_IRQHandler+0x126>
 8006c5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c5e:	f003 0320 	and.w	r3, r3, #32
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d105      	bne.n	8006c72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006c66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c6a:	f003 0301 	and.w	r3, r3, #1
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d005      	beq.n	8006c7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c76:	f043 0208 	orr.w	r2, r3, #8
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f000 81ed 	beq.w	8007062 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c8c:	f003 0320 	and.w	r3, r3, #32
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d008      	beq.n	8006ca6 <HAL_UART_IRQHandler+0x14e>
 8006c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c98:	f003 0320 	and.w	r3, r3, #32
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d002      	beq.n	8006ca6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 fd10 	bl	80076c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	695b      	ldr	r3, [r3, #20]
 8006cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cb0:	2b40      	cmp	r3, #64	; 0x40
 8006cb2:	bf0c      	ite	eq
 8006cb4:	2301      	moveq	r3, #1
 8006cb6:	2300      	movne	r3, #0
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc2:	f003 0308 	and.w	r3, r3, #8
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d103      	bne.n	8006cd2 <HAL_UART_IRQHandler+0x17a>
 8006cca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d04f      	beq.n	8006d72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 fc18 	bl	8007508 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	695b      	ldr	r3, [r3, #20]
 8006cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce2:	2b40      	cmp	r3, #64	; 0x40
 8006ce4:	d141      	bne.n	8006d6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	3314      	adds	r3, #20
 8006cec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006cf4:	e853 3f00 	ldrex	r3, [r3]
 8006cf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006cfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	3314      	adds	r3, #20
 8006d0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006d12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006d16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006d1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006d22:	e841 2300 	strex	r3, r2, [r1]
 8006d26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006d2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1d9      	bne.n	8006ce6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d013      	beq.n	8006d62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3e:	4a7d      	ldr	r2, [pc, #500]	; (8006f34 <HAL_UART_IRQHandler+0x3dc>)
 8006d40:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7fc feca 	bl	8003ae0 <HAL_DMA_Abort_IT>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d016      	beq.n	8006d80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d5c:	4610      	mov	r0, r2
 8006d5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d60:	e00e      	b.n	8006d80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f9a4 	bl	80070b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d68:	e00a      	b.n	8006d80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 f9a0 	bl	80070b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d70:	e006      	b.n	8006d80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f99c 	bl	80070b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006d7e:	e170      	b.n	8007062 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d80:	bf00      	nop
    return;
 8006d82:	e16e      	b.n	8007062 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	f040 814a 	bne.w	8007022 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d92:	f003 0310 	and.w	r3, r3, #16
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	f000 8143 	beq.w	8007022 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006da0:	f003 0310 	and.w	r3, r3, #16
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f000 813c 	beq.w	8007022 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006daa:	2300      	movs	r3, #0
 8006dac:	60bb      	str	r3, [r7, #8]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	60bb      	str	r3, [r7, #8]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	60bb      	str	r3, [r7, #8]
 8006dbe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	695b      	ldr	r3, [r3, #20]
 8006dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dca:	2b40      	cmp	r3, #64	; 0x40
 8006dcc:	f040 80b4 	bne.w	8006f38 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ddc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f000 8140 	beq.w	8007066 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006dea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006dee:	429a      	cmp	r2, r3
 8006df0:	f080 8139 	bcs.w	8007066 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006dfa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e00:	69db      	ldr	r3, [r3, #28]
 8006e02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e06:	f000 8088 	beq.w	8006f1a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	330c      	adds	r3, #12
 8006e10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e18:	e853 3f00 	ldrex	r3, [r3]
 8006e1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006e20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	330c      	adds	r3, #12
 8006e32:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006e36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006e3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006e42:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e46:	e841 2300 	strex	r3, r2, [r1]
 8006e4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006e4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1d9      	bne.n	8006e0a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	3314      	adds	r3, #20
 8006e5c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e60:	e853 3f00 	ldrex	r3, [r3]
 8006e64:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006e66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e68:	f023 0301 	bic.w	r3, r3, #1
 8006e6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	3314      	adds	r3, #20
 8006e76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006e7a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006e7e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e80:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006e82:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006e86:	e841 2300 	strex	r3, r2, [r1]
 8006e8a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006e8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1e1      	bne.n	8006e56 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	3314      	adds	r3, #20
 8006e98:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e9c:	e853 3f00 	ldrex	r3, [r3]
 8006ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006ea2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ea4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ea8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	3314      	adds	r3, #20
 8006eb2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006eb6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006eb8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ebc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ebe:	e841 2300 	strex	r3, r2, [r1]
 8006ec2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006ec4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1e3      	bne.n	8006e92 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2220      	movs	r2, #32
 8006ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	330c      	adds	r3, #12
 8006ede:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ee2:	e853 3f00 	ldrex	r3, [r3]
 8006ee6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006ee8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006eea:	f023 0310 	bic.w	r3, r3, #16
 8006eee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	330c      	adds	r3, #12
 8006ef8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006efc:	65ba      	str	r2, [r7, #88]	; 0x58
 8006efe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f04:	e841 2300 	strex	r3, r2, [r1]
 8006f08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1e3      	bne.n	8006ed8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7fc fd73 	bl	8003a00 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	4619      	mov	r1, r3
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 f8ca 	bl	80070c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f30:	e099      	b.n	8007066 <HAL_UART_IRQHandler+0x50e>
 8006f32:	bf00      	nop
 8006f34:	080075cf 	.word	0x080075cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f000 808b 	beq.w	800706a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006f54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f000 8086 	beq.w	800706a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	330c      	adds	r3, #12
 8006f64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f68:	e853 3f00 	ldrex	r3, [r3]
 8006f6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	330c      	adds	r3, #12
 8006f7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006f82:	647a      	str	r2, [r7, #68]	; 0x44
 8006f84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f8a:	e841 2300 	strex	r3, r2, [r1]
 8006f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d1e3      	bne.n	8006f5e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	3314      	adds	r3, #20
 8006f9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa0:	e853 3f00 	ldrex	r3, [r3]
 8006fa4:	623b      	str	r3, [r7, #32]
   return(result);
 8006fa6:	6a3b      	ldr	r3, [r7, #32]
 8006fa8:	f023 0301 	bic.w	r3, r3, #1
 8006fac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	3314      	adds	r3, #20
 8006fb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006fba:	633a      	str	r2, [r7, #48]	; 0x30
 8006fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fc2:	e841 2300 	strex	r3, r2, [r1]
 8006fc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1e3      	bne.n	8006f96 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2220      	movs	r2, #32
 8006fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	330c      	adds	r3, #12
 8006fe2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	e853 3f00 	ldrex	r3, [r3]
 8006fea:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f023 0310 	bic.w	r3, r3, #16
 8006ff2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	330c      	adds	r3, #12
 8006ffc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007000:	61fa      	str	r2, [r7, #28]
 8007002:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007004:	69b9      	ldr	r1, [r7, #24]
 8007006:	69fa      	ldr	r2, [r7, #28]
 8007008:	e841 2300 	strex	r3, r2, [r1]
 800700c:	617b      	str	r3, [r7, #20]
   return(result);
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1e3      	bne.n	8006fdc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007014:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007018:	4619      	mov	r1, r3
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 f852 	bl	80070c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007020:	e023      	b.n	800706a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800702a:	2b00      	cmp	r3, #0
 800702c:	d009      	beq.n	8007042 <HAL_UART_IRQHandler+0x4ea>
 800702e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007036:	2b00      	cmp	r3, #0
 8007038:	d003      	beq.n	8007042 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fadb 	bl	80075f6 <UART_Transmit_IT>
    return;
 8007040:	e014      	b.n	800706c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00e      	beq.n	800706c <HAL_UART_IRQHandler+0x514>
 800704e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007056:	2b00      	cmp	r3, #0
 8007058:	d008      	beq.n	800706c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 fb1b 	bl	8007696 <UART_EndTransmit_IT>
    return;
 8007060:	e004      	b.n	800706c <HAL_UART_IRQHandler+0x514>
    return;
 8007062:	bf00      	nop
 8007064:	e002      	b.n	800706c <HAL_UART_IRQHandler+0x514>
      return;
 8007066:	bf00      	nop
 8007068:	e000      	b.n	800706c <HAL_UART_IRQHandler+0x514>
      return;
 800706a:	bf00      	nop
  }
}
 800706c:	37e8      	adds	r7, #232	; 0xe8
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop

08007074 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800707c:	bf00      	nop
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80070b8:	bf00      	nop
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	460b      	mov	r3, r1
 80070ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80070d0:	bf00      	nop
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b090      	sub	sp, #64	; 0x40
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d137      	bne.n	8007168 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80070f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070fa:	2200      	movs	r2, #0
 80070fc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80070fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	3314      	adds	r3, #20
 8007104:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007108:	e853 3f00 	ldrex	r3, [r3]
 800710c:	623b      	str	r3, [r7, #32]
   return(result);
 800710e:	6a3b      	ldr	r3, [r7, #32]
 8007110:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007114:	63bb      	str	r3, [r7, #56]	; 0x38
 8007116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	3314      	adds	r3, #20
 800711c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800711e:	633a      	str	r2, [r7, #48]	; 0x30
 8007120:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007122:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007126:	e841 2300 	strex	r3, r2, [r1]
 800712a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800712c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1e5      	bne.n	80070fe <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	330c      	adds	r3, #12
 8007138:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	e853 3f00 	ldrex	r3, [r3]
 8007140:	60fb      	str	r3, [r7, #12]
   return(result);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007148:	637b      	str	r3, [r7, #52]	; 0x34
 800714a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	330c      	adds	r3, #12
 8007150:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007152:	61fa      	str	r2, [r7, #28]
 8007154:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007156:	69b9      	ldr	r1, [r7, #24]
 8007158:	69fa      	ldr	r2, [r7, #28]
 800715a:	e841 2300 	strex	r3, r2, [r1]
 800715e:	617b      	str	r3, [r7, #20]
   return(result);
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1e5      	bne.n	8007132 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007166:	e002      	b.n	800716e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007168:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800716a:	f7fb fd9d 	bl	8002ca8 <HAL_UART_TxCpltCallback>
}
 800716e:	bf00      	nop
 8007170:	3740      	adds	r7, #64	; 0x40
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b084      	sub	sp, #16
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007182:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f7ff ff75 	bl	8007074 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800718a:	bf00      	nop
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b09c      	sub	sp, #112	; 0x70
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d172      	bne.n	8007294 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80071ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071b0:	2200      	movs	r2, #0
 80071b2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	330c      	adds	r3, #12
 80071ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071be:	e853 3f00 	ldrex	r3, [r3]
 80071c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80071c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80071cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	330c      	adds	r3, #12
 80071d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80071d4:	65ba      	str	r2, [r7, #88]	; 0x58
 80071d6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80071da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071dc:	e841 2300 	strex	r3, r2, [r1]
 80071e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80071e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1e5      	bne.n	80071b4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	3314      	adds	r3, #20
 80071ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f2:	e853 3f00 	ldrex	r3, [r3]
 80071f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071fa:	f023 0301 	bic.w	r3, r3, #1
 80071fe:	667b      	str	r3, [r7, #100]	; 0x64
 8007200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	3314      	adds	r3, #20
 8007206:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007208:	647a      	str	r2, [r7, #68]	; 0x44
 800720a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800720e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007210:	e841 2300 	strex	r3, r2, [r1]
 8007214:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007218:	2b00      	cmp	r3, #0
 800721a:	d1e5      	bne.n	80071e8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800721c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	3314      	adds	r3, #20
 8007222:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007226:	e853 3f00 	ldrex	r3, [r3]
 800722a:	623b      	str	r3, [r7, #32]
   return(result);
 800722c:	6a3b      	ldr	r3, [r7, #32]
 800722e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007232:	663b      	str	r3, [r7, #96]	; 0x60
 8007234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	3314      	adds	r3, #20
 800723a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800723c:	633a      	str	r2, [r7, #48]	; 0x30
 800723e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007240:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007242:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007244:	e841 2300 	strex	r3, r2, [r1]
 8007248:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800724a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1e5      	bne.n	800721c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007252:	2220      	movs	r2, #32
 8007254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800725a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725c:	2b01      	cmp	r3, #1
 800725e:	d119      	bne.n	8007294 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	330c      	adds	r3, #12
 8007266:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	e853 3f00 	ldrex	r3, [r3]
 800726e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f023 0310 	bic.w	r3, r3, #16
 8007276:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	330c      	adds	r3, #12
 800727e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007280:	61fa      	str	r2, [r7, #28]
 8007282:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007284:	69b9      	ldr	r1, [r7, #24]
 8007286:	69fa      	ldr	r2, [r7, #28]
 8007288:	e841 2300 	strex	r3, r2, [r1]
 800728c:	617b      	str	r3, [r7, #20]
   return(result);
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1e5      	bne.n	8007260 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007298:	2b01      	cmp	r3, #1
 800729a:	d106      	bne.n	80072aa <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800729c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800729e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072a0:	4619      	mov	r1, r3
 80072a2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80072a4:	f7ff ff0e 	bl	80070c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80072a8:	e002      	b.n	80072b0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80072aa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80072ac:	f7ff feec 	bl	8007088 <HAL_UART_RxCpltCallback>
}
 80072b0:	bf00      	nop
 80072b2:	3770      	adds	r7, #112	; 0x70
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d108      	bne.n	80072e0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072d2:	085b      	lsrs	r3, r3, #1
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	4619      	mov	r1, r3
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f7ff fef3 	bl	80070c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80072de:	e002      	b.n	80072e6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f7ff fedb 	bl	800709c <HAL_UART_RxHalfCpltCallback>
}
 80072e6:	bf00      	nop
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b084      	sub	sp, #16
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80072f6:	2300      	movs	r3, #0
 80072f8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	695b      	ldr	r3, [r3, #20]
 8007306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800730a:	2b80      	cmp	r3, #128	; 0x80
 800730c:	bf0c      	ite	eq
 800730e:	2301      	moveq	r3, #1
 8007310:	2300      	movne	r3, #0
 8007312:	b2db      	uxtb	r3, r3
 8007314:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2b21      	cmp	r3, #33	; 0x21
 8007320:	d108      	bne.n	8007334 <UART_DMAError+0x46>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d005      	beq.n	8007334 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	2200      	movs	r2, #0
 800732c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800732e:	68b8      	ldr	r0, [r7, #8]
 8007330:	f000 f8c2 	bl	80074b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	695b      	ldr	r3, [r3, #20]
 800733a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800733e:	2b40      	cmp	r3, #64	; 0x40
 8007340:	bf0c      	ite	eq
 8007342:	2301      	moveq	r3, #1
 8007344:	2300      	movne	r3, #0
 8007346:	b2db      	uxtb	r3, r3
 8007348:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007350:	b2db      	uxtb	r3, r3
 8007352:	2b22      	cmp	r3, #34	; 0x22
 8007354:	d108      	bne.n	8007368 <UART_DMAError+0x7a>
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d005      	beq.n	8007368 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	2200      	movs	r2, #0
 8007360:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007362:	68b8      	ldr	r0, [r7, #8]
 8007364:	f000 f8d0 	bl	8007508 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736c:	f043 0210 	orr.w	r2, r3, #16
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007374:	68b8      	ldr	r0, [r7, #8]
 8007376:	f7ff fe9b 	bl	80070b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800737a:	bf00      	nop
 800737c:	3710      	adds	r7, #16
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
	...

08007384 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b098      	sub	sp, #96	; 0x60
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	4613      	mov	r3, r2
 8007390:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007392:	68ba      	ldr	r2, [r7, #8]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	88fa      	ldrh	r2, [r7, #6]
 800739c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2200      	movs	r2, #0
 80073a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2222      	movs	r2, #34	; 0x22
 80073a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b0:	4a3e      	ldr	r2, [pc, #248]	; (80074ac <UART_Start_Receive_DMA+0x128>)
 80073b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b8:	4a3d      	ldr	r2, [pc, #244]	; (80074b0 <UART_Start_Receive_DMA+0x12c>)
 80073ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c0:	4a3c      	ldr	r2, [pc, #240]	; (80074b4 <UART_Start_Receive_DMA+0x130>)
 80073c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c8:	2200      	movs	r2, #0
 80073ca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80073cc:	f107 0308 	add.w	r3, r7, #8
 80073d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	3304      	adds	r3, #4
 80073dc:	4619      	mov	r1, r3
 80073de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	88fb      	ldrh	r3, [r7, #6]
 80073e4:	f7fc fab4 	bl	8003950 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80073e8:	2300      	movs	r3, #0
 80073ea:	613b      	str	r3, [r7, #16]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	613b      	str	r3, [r7, #16]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	613b      	str	r3, [r7, #16]
 80073fc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	330c      	adds	r3, #12
 800740c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007410:	e853 3f00 	ldrex	r3, [r3]
 8007414:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800741c:	65bb      	str	r3, [r7, #88]	; 0x58
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	330c      	adds	r3, #12
 8007424:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007426:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007428:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800742c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800742e:	e841 2300 	strex	r3, r2, [r1]
 8007432:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1e5      	bne.n	8007406 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	3314      	adds	r3, #20
 8007440:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007444:	e853 3f00 	ldrex	r3, [r3]
 8007448:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800744a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744c:	f043 0301 	orr.w	r3, r3, #1
 8007450:	657b      	str	r3, [r7, #84]	; 0x54
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	3314      	adds	r3, #20
 8007458:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800745a:	63ba      	str	r2, [r7, #56]	; 0x38
 800745c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007460:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007462:	e841 2300 	strex	r3, r2, [r1]
 8007466:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1e5      	bne.n	800743a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	3314      	adds	r3, #20
 8007474:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	e853 3f00 	ldrex	r3, [r3]
 800747c:	617b      	str	r3, [r7, #20]
   return(result);
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007484:	653b      	str	r3, [r7, #80]	; 0x50
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	3314      	adds	r3, #20
 800748c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800748e:	627a      	str	r2, [r7, #36]	; 0x24
 8007490:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007492:	6a39      	ldr	r1, [r7, #32]
 8007494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007496:	e841 2300 	strex	r3, r2, [r1]
 800749a:	61fb      	str	r3, [r7, #28]
   return(result);
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1e5      	bne.n	800746e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80074a2:	2300      	movs	r3, #0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3760      	adds	r7, #96	; 0x60
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	08007193 	.word	0x08007193
 80074b0:	080072b9 	.word	0x080072b9
 80074b4:	080072ef 	.word	0x080072ef

080074b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b089      	sub	sp, #36	; 0x24
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	330c      	adds	r3, #12
 80074c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	e853 3f00 	ldrex	r3, [r3]
 80074ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80074d6:	61fb      	str	r3, [r7, #28]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	330c      	adds	r3, #12
 80074de:	69fa      	ldr	r2, [r7, #28]
 80074e0:	61ba      	str	r2, [r7, #24]
 80074e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e4:	6979      	ldr	r1, [r7, #20]
 80074e6:	69ba      	ldr	r2, [r7, #24]
 80074e8:	e841 2300 	strex	r3, r2, [r1]
 80074ec:	613b      	str	r3, [r7, #16]
   return(result);
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d1e5      	bne.n	80074c0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2220      	movs	r2, #32
 80074f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80074fc:	bf00      	nop
 80074fe:	3724      	adds	r7, #36	; 0x24
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007508:	b480      	push	{r7}
 800750a:	b095      	sub	sp, #84	; 0x54
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	330c      	adds	r3, #12
 8007516:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800751a:	e853 3f00 	ldrex	r3, [r3]
 800751e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007522:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007526:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	330c      	adds	r3, #12
 800752e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007530:	643a      	str	r2, [r7, #64]	; 0x40
 8007532:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007534:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007536:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007538:	e841 2300 	strex	r3, r2, [r1]
 800753c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800753e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007540:	2b00      	cmp	r3, #0
 8007542:	d1e5      	bne.n	8007510 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	3314      	adds	r3, #20
 800754a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754c:	6a3b      	ldr	r3, [r7, #32]
 800754e:	e853 3f00 	ldrex	r3, [r3]
 8007552:	61fb      	str	r3, [r7, #28]
   return(result);
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	f023 0301 	bic.w	r3, r3, #1
 800755a:	64bb      	str	r3, [r7, #72]	; 0x48
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	3314      	adds	r3, #20
 8007562:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007564:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007566:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007568:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800756a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800756c:	e841 2300 	strex	r3, r2, [r1]
 8007570:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007574:	2b00      	cmp	r3, #0
 8007576:	d1e5      	bne.n	8007544 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800757c:	2b01      	cmp	r3, #1
 800757e:	d119      	bne.n	80075b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	330c      	adds	r3, #12
 8007586:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	e853 3f00 	ldrex	r3, [r3]
 800758e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	f023 0310 	bic.w	r3, r3, #16
 8007596:	647b      	str	r3, [r7, #68]	; 0x44
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	330c      	adds	r3, #12
 800759e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075a0:	61ba      	str	r2, [r7, #24]
 80075a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a4:	6979      	ldr	r1, [r7, #20]
 80075a6:	69ba      	ldr	r2, [r7, #24]
 80075a8:	e841 2300 	strex	r3, r2, [r1]
 80075ac:	613b      	str	r3, [r7, #16]
   return(result);
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1e5      	bne.n	8007580 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2220      	movs	r2, #32
 80075b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80075c2:	bf00      	nop
 80075c4:	3754      	adds	r7, #84	; 0x54
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr

080075ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b084      	sub	sp, #16
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2200      	movs	r2, #0
 80075e6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	f7ff fd61 	bl	80070b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075ee:	bf00      	nop
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b085      	sub	sp, #20
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007604:	b2db      	uxtb	r3, r3
 8007606:	2b21      	cmp	r3, #33	; 0x21
 8007608:	d13e      	bne.n	8007688 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007612:	d114      	bne.n	800763e <UART_Transmit_IT+0x48>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d110      	bne.n	800763e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6a1b      	ldr	r3, [r3, #32]
 8007620:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	881b      	ldrh	r3, [r3, #0]
 8007626:	461a      	mov	r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007630:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a1b      	ldr	r3, [r3, #32]
 8007636:	1c9a      	adds	r2, r3, #2
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	621a      	str	r2, [r3, #32]
 800763c:	e008      	b.n	8007650 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a1b      	ldr	r3, [r3, #32]
 8007642:	1c59      	adds	r1, r3, #1
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	6211      	str	r1, [r2, #32]
 8007648:	781a      	ldrb	r2, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007654:	b29b      	uxth	r3, r3
 8007656:	3b01      	subs	r3, #1
 8007658:	b29b      	uxth	r3, r3
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	4619      	mov	r1, r3
 800765e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007660:	2b00      	cmp	r3, #0
 8007662:	d10f      	bne.n	8007684 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	68da      	ldr	r2, [r3, #12]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007672:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	68da      	ldr	r2, [r3, #12]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007682:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007684:	2300      	movs	r3, #0
 8007686:	e000      	b.n	800768a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007688:	2302      	movs	r3, #2
  }
}
 800768a:	4618      	mov	r0, r3
 800768c:	3714      	adds	r7, #20
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr

08007696 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b082      	sub	sp, #8
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	68da      	ldr	r2, [r3, #12]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2220      	movs	r2, #32
 80076b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f7fb faf6 	bl	8002ca8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3708      	adds	r7, #8
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b08c      	sub	sp, #48	; 0x30
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	2b22      	cmp	r3, #34	; 0x22
 80076d8:	f040 80ab 	bne.w	8007832 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076e4:	d117      	bne.n	8007716 <UART_Receive_IT+0x50>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d113      	bne.n	8007716 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80076ee:	2300      	movs	r3, #0
 80076f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	b29b      	uxth	r3, r3
 8007700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007704:	b29a      	uxth	r2, r3
 8007706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007708:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800770e:	1c9a      	adds	r2, r3, #2
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	629a      	str	r2, [r3, #40]	; 0x28
 8007714:	e026      	b.n	8007764 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800771a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800771c:	2300      	movs	r3, #0
 800771e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007728:	d007      	beq.n	800773a <UART_Receive_IT+0x74>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10a      	bne.n	8007748 <UART_Receive_IT+0x82>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d106      	bne.n	8007748 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	b2da      	uxtb	r2, r3
 8007742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007744:	701a      	strb	r2, [r3, #0]
 8007746:	e008      	b.n	800775a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	b2db      	uxtb	r3, r3
 8007750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007754:	b2da      	uxtb	r2, r3
 8007756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007758:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775e:	1c5a      	adds	r2, r3, #1
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007768:	b29b      	uxth	r3, r3
 800776a:	3b01      	subs	r3, #1
 800776c:	b29b      	uxth	r3, r3
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	4619      	mov	r1, r3
 8007772:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007774:	2b00      	cmp	r3, #0
 8007776:	d15a      	bne.n	800782e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	68da      	ldr	r2, [r3, #12]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f022 0220 	bic.w	r2, r2, #32
 8007786:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	68da      	ldr	r2, [r3, #12]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007796:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	695a      	ldr	r2, [r3, #20]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f022 0201 	bic.w	r2, r2, #1
 80077a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2220      	movs	r2, #32
 80077ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d135      	bne.n	8007824 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	330c      	adds	r3, #12
 80077c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	e853 3f00 	ldrex	r3, [r3]
 80077cc:	613b      	str	r3, [r7, #16]
   return(result);
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	f023 0310 	bic.w	r3, r3, #16
 80077d4:	627b      	str	r3, [r7, #36]	; 0x24
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	330c      	adds	r3, #12
 80077dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077de:	623a      	str	r2, [r7, #32]
 80077e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e2:	69f9      	ldr	r1, [r7, #28]
 80077e4:	6a3a      	ldr	r2, [r7, #32]
 80077e6:	e841 2300 	strex	r3, r2, [r1]
 80077ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80077ec:	69bb      	ldr	r3, [r7, #24]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1e5      	bne.n	80077be <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 0310 	and.w	r3, r3, #16
 80077fc:	2b10      	cmp	r3, #16
 80077fe:	d10a      	bne.n	8007816 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007800:	2300      	movs	r3, #0
 8007802:	60fb      	str	r3, [r7, #12]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	60fb      	str	r3, [r7, #12]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	60fb      	str	r3, [r7, #12]
 8007814:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800781a:	4619      	mov	r1, r3
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f7ff fc51 	bl	80070c4 <HAL_UARTEx_RxEventCallback>
 8007822:	e002      	b.n	800782a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f7ff fc2f 	bl	8007088 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800782a:	2300      	movs	r3, #0
 800782c:	e002      	b.n	8007834 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800782e:	2300      	movs	r3, #0
 8007830:	e000      	b.n	8007834 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007832:	2302      	movs	r3, #2
  }
}
 8007834:	4618      	mov	r0, r3
 8007836:	3730      	adds	r7, #48	; 0x30
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800783c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007840:	b09f      	sub	sp, #124	; 0x7c
 8007842:	af00      	add	r7, sp, #0
 8007844:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007852:	68d9      	ldr	r1, [r3, #12]
 8007854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	ea40 0301 	orr.w	r3, r0, r1
 800785c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800785e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007860:	689a      	ldr	r2, [r3, #8]
 8007862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	431a      	orrs	r2, r3
 8007868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800786a:	695b      	ldr	r3, [r3, #20]
 800786c:	431a      	orrs	r2, r3
 800786e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007870:	69db      	ldr	r3, [r3, #28]
 8007872:	4313      	orrs	r3, r2
 8007874:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007880:	f021 010c 	bic.w	r1, r1, #12
 8007884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800788a:	430b      	orrs	r3, r1
 800788c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800788e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	695b      	ldr	r3, [r3, #20]
 8007894:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800789a:	6999      	ldr	r1, [r3, #24]
 800789c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	ea40 0301 	orr.w	r3, r0, r1
 80078a4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80078a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	4bc5      	ldr	r3, [pc, #788]	; (8007bc0 <UART_SetConfig+0x384>)
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d004      	beq.n	80078ba <UART_SetConfig+0x7e>
 80078b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	4bc3      	ldr	r3, [pc, #780]	; (8007bc4 <UART_SetConfig+0x388>)
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d103      	bne.n	80078c2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80078ba:	f7fe f947 	bl	8005b4c <HAL_RCC_GetPCLK2Freq>
 80078be:	6778      	str	r0, [r7, #116]	; 0x74
 80078c0:	e002      	b.n	80078c8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80078c2:	f7fe f92f 	bl	8005b24 <HAL_RCC_GetPCLK1Freq>
 80078c6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078ca:	69db      	ldr	r3, [r3, #28]
 80078cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078d0:	f040 80b6 	bne.w	8007a40 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80078d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078d6:	461c      	mov	r4, r3
 80078d8:	f04f 0500 	mov.w	r5, #0
 80078dc:	4622      	mov	r2, r4
 80078de:	462b      	mov	r3, r5
 80078e0:	1891      	adds	r1, r2, r2
 80078e2:	6439      	str	r1, [r7, #64]	; 0x40
 80078e4:	415b      	adcs	r3, r3
 80078e6:	647b      	str	r3, [r7, #68]	; 0x44
 80078e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80078ec:	1912      	adds	r2, r2, r4
 80078ee:	eb45 0303 	adc.w	r3, r5, r3
 80078f2:	f04f 0000 	mov.w	r0, #0
 80078f6:	f04f 0100 	mov.w	r1, #0
 80078fa:	00d9      	lsls	r1, r3, #3
 80078fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007900:	00d0      	lsls	r0, r2, #3
 8007902:	4602      	mov	r2, r0
 8007904:	460b      	mov	r3, r1
 8007906:	1911      	adds	r1, r2, r4
 8007908:	6639      	str	r1, [r7, #96]	; 0x60
 800790a:	416b      	adcs	r3, r5
 800790c:	667b      	str	r3, [r7, #100]	; 0x64
 800790e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	461a      	mov	r2, r3
 8007914:	f04f 0300 	mov.w	r3, #0
 8007918:	1891      	adds	r1, r2, r2
 800791a:	63b9      	str	r1, [r7, #56]	; 0x38
 800791c:	415b      	adcs	r3, r3
 800791e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007920:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007924:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007928:	f7f8 fc4e 	bl	80001c8 <__aeabi_uldivmod>
 800792c:	4602      	mov	r2, r0
 800792e:	460b      	mov	r3, r1
 8007930:	4ba5      	ldr	r3, [pc, #660]	; (8007bc8 <UART_SetConfig+0x38c>)
 8007932:	fba3 2302 	umull	r2, r3, r3, r2
 8007936:	095b      	lsrs	r3, r3, #5
 8007938:	011e      	lsls	r6, r3, #4
 800793a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800793c:	461c      	mov	r4, r3
 800793e:	f04f 0500 	mov.w	r5, #0
 8007942:	4622      	mov	r2, r4
 8007944:	462b      	mov	r3, r5
 8007946:	1891      	adds	r1, r2, r2
 8007948:	6339      	str	r1, [r7, #48]	; 0x30
 800794a:	415b      	adcs	r3, r3
 800794c:	637b      	str	r3, [r7, #52]	; 0x34
 800794e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007952:	1912      	adds	r2, r2, r4
 8007954:	eb45 0303 	adc.w	r3, r5, r3
 8007958:	f04f 0000 	mov.w	r0, #0
 800795c:	f04f 0100 	mov.w	r1, #0
 8007960:	00d9      	lsls	r1, r3, #3
 8007962:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007966:	00d0      	lsls	r0, r2, #3
 8007968:	4602      	mov	r2, r0
 800796a:	460b      	mov	r3, r1
 800796c:	1911      	adds	r1, r2, r4
 800796e:	65b9      	str	r1, [r7, #88]	; 0x58
 8007970:	416b      	adcs	r3, r5
 8007972:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	461a      	mov	r2, r3
 800797a:	f04f 0300 	mov.w	r3, #0
 800797e:	1891      	adds	r1, r2, r2
 8007980:	62b9      	str	r1, [r7, #40]	; 0x28
 8007982:	415b      	adcs	r3, r3
 8007984:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007986:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800798a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800798e:	f7f8 fc1b 	bl	80001c8 <__aeabi_uldivmod>
 8007992:	4602      	mov	r2, r0
 8007994:	460b      	mov	r3, r1
 8007996:	4b8c      	ldr	r3, [pc, #560]	; (8007bc8 <UART_SetConfig+0x38c>)
 8007998:	fba3 1302 	umull	r1, r3, r3, r2
 800799c:	095b      	lsrs	r3, r3, #5
 800799e:	2164      	movs	r1, #100	; 0x64
 80079a0:	fb01 f303 	mul.w	r3, r1, r3
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	00db      	lsls	r3, r3, #3
 80079a8:	3332      	adds	r3, #50	; 0x32
 80079aa:	4a87      	ldr	r2, [pc, #540]	; (8007bc8 <UART_SetConfig+0x38c>)
 80079ac:	fba2 2303 	umull	r2, r3, r2, r3
 80079b0:	095b      	lsrs	r3, r3, #5
 80079b2:	005b      	lsls	r3, r3, #1
 80079b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80079b8:	441e      	add	r6, r3
 80079ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079bc:	4618      	mov	r0, r3
 80079be:	f04f 0100 	mov.w	r1, #0
 80079c2:	4602      	mov	r2, r0
 80079c4:	460b      	mov	r3, r1
 80079c6:	1894      	adds	r4, r2, r2
 80079c8:	623c      	str	r4, [r7, #32]
 80079ca:	415b      	adcs	r3, r3
 80079cc:	627b      	str	r3, [r7, #36]	; 0x24
 80079ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80079d2:	1812      	adds	r2, r2, r0
 80079d4:	eb41 0303 	adc.w	r3, r1, r3
 80079d8:	f04f 0400 	mov.w	r4, #0
 80079dc:	f04f 0500 	mov.w	r5, #0
 80079e0:	00dd      	lsls	r5, r3, #3
 80079e2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80079e6:	00d4      	lsls	r4, r2, #3
 80079e8:	4622      	mov	r2, r4
 80079ea:	462b      	mov	r3, r5
 80079ec:	1814      	adds	r4, r2, r0
 80079ee:	653c      	str	r4, [r7, #80]	; 0x50
 80079f0:	414b      	adcs	r3, r1
 80079f2:	657b      	str	r3, [r7, #84]	; 0x54
 80079f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	461a      	mov	r2, r3
 80079fa:	f04f 0300 	mov.w	r3, #0
 80079fe:	1891      	adds	r1, r2, r2
 8007a00:	61b9      	str	r1, [r7, #24]
 8007a02:	415b      	adcs	r3, r3
 8007a04:	61fb      	str	r3, [r7, #28]
 8007a06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a0a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007a0e:	f7f8 fbdb 	bl	80001c8 <__aeabi_uldivmod>
 8007a12:	4602      	mov	r2, r0
 8007a14:	460b      	mov	r3, r1
 8007a16:	4b6c      	ldr	r3, [pc, #432]	; (8007bc8 <UART_SetConfig+0x38c>)
 8007a18:	fba3 1302 	umull	r1, r3, r3, r2
 8007a1c:	095b      	lsrs	r3, r3, #5
 8007a1e:	2164      	movs	r1, #100	; 0x64
 8007a20:	fb01 f303 	mul.w	r3, r1, r3
 8007a24:	1ad3      	subs	r3, r2, r3
 8007a26:	00db      	lsls	r3, r3, #3
 8007a28:	3332      	adds	r3, #50	; 0x32
 8007a2a:	4a67      	ldr	r2, [pc, #412]	; (8007bc8 <UART_SetConfig+0x38c>)
 8007a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a30:	095b      	lsrs	r3, r3, #5
 8007a32:	f003 0207 	and.w	r2, r3, #7
 8007a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4432      	add	r2, r6
 8007a3c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007a3e:	e0b9      	b.n	8007bb4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a42:	461c      	mov	r4, r3
 8007a44:	f04f 0500 	mov.w	r5, #0
 8007a48:	4622      	mov	r2, r4
 8007a4a:	462b      	mov	r3, r5
 8007a4c:	1891      	adds	r1, r2, r2
 8007a4e:	6139      	str	r1, [r7, #16]
 8007a50:	415b      	adcs	r3, r3
 8007a52:	617b      	str	r3, [r7, #20]
 8007a54:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007a58:	1912      	adds	r2, r2, r4
 8007a5a:	eb45 0303 	adc.w	r3, r5, r3
 8007a5e:	f04f 0000 	mov.w	r0, #0
 8007a62:	f04f 0100 	mov.w	r1, #0
 8007a66:	00d9      	lsls	r1, r3, #3
 8007a68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007a6c:	00d0      	lsls	r0, r2, #3
 8007a6e:	4602      	mov	r2, r0
 8007a70:	460b      	mov	r3, r1
 8007a72:	eb12 0804 	adds.w	r8, r2, r4
 8007a76:	eb43 0905 	adc.w	r9, r3, r5
 8007a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f04f 0100 	mov.w	r1, #0
 8007a84:	f04f 0200 	mov.w	r2, #0
 8007a88:	f04f 0300 	mov.w	r3, #0
 8007a8c:	008b      	lsls	r3, r1, #2
 8007a8e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007a92:	0082      	lsls	r2, r0, #2
 8007a94:	4640      	mov	r0, r8
 8007a96:	4649      	mov	r1, r9
 8007a98:	f7f8 fb96 	bl	80001c8 <__aeabi_uldivmod>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	4b49      	ldr	r3, [pc, #292]	; (8007bc8 <UART_SetConfig+0x38c>)
 8007aa2:	fba3 2302 	umull	r2, r3, r3, r2
 8007aa6:	095b      	lsrs	r3, r3, #5
 8007aa8:	011e      	lsls	r6, r3, #4
 8007aaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007aac:	4618      	mov	r0, r3
 8007aae:	f04f 0100 	mov.w	r1, #0
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	1894      	adds	r4, r2, r2
 8007ab8:	60bc      	str	r4, [r7, #8]
 8007aba:	415b      	adcs	r3, r3
 8007abc:	60fb      	str	r3, [r7, #12]
 8007abe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ac2:	1812      	adds	r2, r2, r0
 8007ac4:	eb41 0303 	adc.w	r3, r1, r3
 8007ac8:	f04f 0400 	mov.w	r4, #0
 8007acc:	f04f 0500 	mov.w	r5, #0
 8007ad0:	00dd      	lsls	r5, r3, #3
 8007ad2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007ad6:	00d4      	lsls	r4, r2, #3
 8007ad8:	4622      	mov	r2, r4
 8007ada:	462b      	mov	r3, r5
 8007adc:	1814      	adds	r4, r2, r0
 8007ade:	64bc      	str	r4, [r7, #72]	; 0x48
 8007ae0:	414b      	adcs	r3, r1
 8007ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f04f 0100 	mov.w	r1, #0
 8007aee:	f04f 0200 	mov.w	r2, #0
 8007af2:	f04f 0300 	mov.w	r3, #0
 8007af6:	008b      	lsls	r3, r1, #2
 8007af8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007afc:	0082      	lsls	r2, r0, #2
 8007afe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007b02:	f7f8 fb61 	bl	80001c8 <__aeabi_uldivmod>
 8007b06:	4602      	mov	r2, r0
 8007b08:	460b      	mov	r3, r1
 8007b0a:	4b2f      	ldr	r3, [pc, #188]	; (8007bc8 <UART_SetConfig+0x38c>)
 8007b0c:	fba3 1302 	umull	r1, r3, r3, r2
 8007b10:	095b      	lsrs	r3, r3, #5
 8007b12:	2164      	movs	r1, #100	; 0x64
 8007b14:	fb01 f303 	mul.w	r3, r1, r3
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	011b      	lsls	r3, r3, #4
 8007b1c:	3332      	adds	r3, #50	; 0x32
 8007b1e:	4a2a      	ldr	r2, [pc, #168]	; (8007bc8 <UART_SetConfig+0x38c>)
 8007b20:	fba2 2303 	umull	r2, r3, r2, r3
 8007b24:	095b      	lsrs	r3, r3, #5
 8007b26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b2a:	441e      	add	r6, r3
 8007b2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f04f 0100 	mov.w	r1, #0
 8007b34:	4602      	mov	r2, r0
 8007b36:	460b      	mov	r3, r1
 8007b38:	1894      	adds	r4, r2, r2
 8007b3a:	603c      	str	r4, [r7, #0]
 8007b3c:	415b      	adcs	r3, r3
 8007b3e:	607b      	str	r3, [r7, #4]
 8007b40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b44:	1812      	adds	r2, r2, r0
 8007b46:	eb41 0303 	adc.w	r3, r1, r3
 8007b4a:	f04f 0400 	mov.w	r4, #0
 8007b4e:	f04f 0500 	mov.w	r5, #0
 8007b52:	00dd      	lsls	r5, r3, #3
 8007b54:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007b58:	00d4      	lsls	r4, r2, #3
 8007b5a:	4622      	mov	r2, r4
 8007b5c:	462b      	mov	r3, r5
 8007b5e:	eb12 0a00 	adds.w	sl, r2, r0
 8007b62:	eb43 0b01 	adc.w	fp, r3, r1
 8007b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f04f 0100 	mov.w	r1, #0
 8007b70:	f04f 0200 	mov.w	r2, #0
 8007b74:	f04f 0300 	mov.w	r3, #0
 8007b78:	008b      	lsls	r3, r1, #2
 8007b7a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007b7e:	0082      	lsls	r2, r0, #2
 8007b80:	4650      	mov	r0, sl
 8007b82:	4659      	mov	r1, fp
 8007b84:	f7f8 fb20 	bl	80001c8 <__aeabi_uldivmod>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	4b0e      	ldr	r3, [pc, #56]	; (8007bc8 <UART_SetConfig+0x38c>)
 8007b8e:	fba3 1302 	umull	r1, r3, r3, r2
 8007b92:	095b      	lsrs	r3, r3, #5
 8007b94:	2164      	movs	r1, #100	; 0x64
 8007b96:	fb01 f303 	mul.w	r3, r1, r3
 8007b9a:	1ad3      	subs	r3, r2, r3
 8007b9c:	011b      	lsls	r3, r3, #4
 8007b9e:	3332      	adds	r3, #50	; 0x32
 8007ba0:	4a09      	ldr	r2, [pc, #36]	; (8007bc8 <UART_SetConfig+0x38c>)
 8007ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ba6:	095b      	lsrs	r3, r3, #5
 8007ba8:	f003 020f 	and.w	r2, r3, #15
 8007bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4432      	add	r2, r6
 8007bb2:	609a      	str	r2, [r3, #8]
}
 8007bb4:	bf00      	nop
 8007bb6:	377c      	adds	r7, #124	; 0x7c
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bbe:	bf00      	nop
 8007bc0:	40011000 	.word	0x40011000
 8007bc4:	40011400 	.word	0x40011400
 8007bc8:	51eb851f 	.word	0x51eb851f

08007bcc <__errno>:
 8007bcc:	4b01      	ldr	r3, [pc, #4]	; (8007bd4 <__errno+0x8>)
 8007bce:	6818      	ldr	r0, [r3, #0]
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	200000ec 	.word	0x200000ec

08007bd8 <__libc_init_array>:
 8007bd8:	b570      	push	{r4, r5, r6, lr}
 8007bda:	4d0d      	ldr	r5, [pc, #52]	; (8007c10 <__libc_init_array+0x38>)
 8007bdc:	4c0d      	ldr	r4, [pc, #52]	; (8007c14 <__libc_init_array+0x3c>)
 8007bde:	1b64      	subs	r4, r4, r5
 8007be0:	10a4      	asrs	r4, r4, #2
 8007be2:	2600      	movs	r6, #0
 8007be4:	42a6      	cmp	r6, r4
 8007be6:	d109      	bne.n	8007bfc <__libc_init_array+0x24>
 8007be8:	4d0b      	ldr	r5, [pc, #44]	; (8007c18 <__libc_init_array+0x40>)
 8007bea:	4c0c      	ldr	r4, [pc, #48]	; (8007c1c <__libc_init_array+0x44>)
 8007bec:	f000 fee2 	bl	80089b4 <_init>
 8007bf0:	1b64      	subs	r4, r4, r5
 8007bf2:	10a4      	asrs	r4, r4, #2
 8007bf4:	2600      	movs	r6, #0
 8007bf6:	42a6      	cmp	r6, r4
 8007bf8:	d105      	bne.n	8007c06 <__libc_init_array+0x2e>
 8007bfa:	bd70      	pop	{r4, r5, r6, pc}
 8007bfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c00:	4798      	blx	r3
 8007c02:	3601      	adds	r6, #1
 8007c04:	e7ee      	b.n	8007be4 <__libc_init_array+0xc>
 8007c06:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c0a:	4798      	blx	r3
 8007c0c:	3601      	adds	r6, #1
 8007c0e:	e7f2      	b.n	8007bf6 <__libc_init_array+0x1e>
 8007c10:	08008e68 	.word	0x08008e68
 8007c14:	08008e68 	.word	0x08008e68
 8007c18:	08008e68 	.word	0x08008e68
 8007c1c:	08008e6c 	.word	0x08008e6c

08007c20 <memcpy>:
 8007c20:	440a      	add	r2, r1
 8007c22:	4291      	cmp	r1, r2
 8007c24:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c28:	d100      	bne.n	8007c2c <memcpy+0xc>
 8007c2a:	4770      	bx	lr
 8007c2c:	b510      	push	{r4, lr}
 8007c2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c36:	4291      	cmp	r1, r2
 8007c38:	d1f9      	bne.n	8007c2e <memcpy+0xe>
 8007c3a:	bd10      	pop	{r4, pc}

08007c3c <memset>:
 8007c3c:	4402      	add	r2, r0
 8007c3e:	4603      	mov	r3, r0
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d100      	bne.n	8007c46 <memset+0xa>
 8007c44:	4770      	bx	lr
 8007c46:	f803 1b01 	strb.w	r1, [r3], #1
 8007c4a:	e7f9      	b.n	8007c40 <memset+0x4>

08007c4c <sinf>:
 8007c4c:	ee10 3a10 	vmov	r3, s0
 8007c50:	b507      	push	{r0, r1, r2, lr}
 8007c52:	4a1d      	ldr	r2, [pc, #116]	; (8007cc8 <sinf+0x7c>)
 8007c54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	dc05      	bgt.n	8007c68 <sinf+0x1c>
 8007c5c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8007ccc <sinf+0x80>
 8007c60:	2000      	movs	r0, #0
 8007c62:	f000 fd9d 	bl	80087a0 <__kernel_sinf>
 8007c66:	e004      	b.n	8007c72 <sinf+0x26>
 8007c68:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007c6c:	db04      	blt.n	8007c78 <sinf+0x2c>
 8007c6e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007c72:	b003      	add	sp, #12
 8007c74:	f85d fb04 	ldr.w	pc, [sp], #4
 8007c78:	4668      	mov	r0, sp
 8007c7a:	f000 f967 	bl	8007f4c <__ieee754_rem_pio2f>
 8007c7e:	f000 0003 	and.w	r0, r0, #3
 8007c82:	2801      	cmp	r0, #1
 8007c84:	d008      	beq.n	8007c98 <sinf+0x4c>
 8007c86:	2802      	cmp	r0, #2
 8007c88:	d00d      	beq.n	8007ca6 <sinf+0x5a>
 8007c8a:	b9b0      	cbnz	r0, 8007cba <sinf+0x6e>
 8007c8c:	eddd 0a01 	vldr	s1, [sp, #4]
 8007c90:	ed9d 0a00 	vldr	s0, [sp]
 8007c94:	2001      	movs	r0, #1
 8007c96:	e7e4      	b.n	8007c62 <sinf+0x16>
 8007c98:	eddd 0a01 	vldr	s1, [sp, #4]
 8007c9c:	ed9d 0a00 	vldr	s0, [sp]
 8007ca0:	f000 fa94 	bl	80081cc <__kernel_cosf>
 8007ca4:	e7e5      	b.n	8007c72 <sinf+0x26>
 8007ca6:	eddd 0a01 	vldr	s1, [sp, #4]
 8007caa:	ed9d 0a00 	vldr	s0, [sp]
 8007cae:	2001      	movs	r0, #1
 8007cb0:	f000 fd76 	bl	80087a0 <__kernel_sinf>
 8007cb4:	eeb1 0a40 	vneg.f32	s0, s0
 8007cb8:	e7db      	b.n	8007c72 <sinf+0x26>
 8007cba:	eddd 0a01 	vldr	s1, [sp, #4]
 8007cbe:	ed9d 0a00 	vldr	s0, [sp]
 8007cc2:	f000 fa83 	bl	80081cc <__kernel_cosf>
 8007cc6:	e7f5      	b.n	8007cb4 <sinf+0x68>
 8007cc8:	3f490fd8 	.word	0x3f490fd8
 8007ccc:	00000000 	.word	0x00000000

08007cd0 <asinf>:
 8007cd0:	b508      	push	{r3, lr}
 8007cd2:	ed2d 8b02 	vpush	{d8}
 8007cd6:	eeb0 8a40 	vmov.f32	s16, s0
 8007cda:	f000 f851 	bl	8007d80 <__ieee754_asinf>
 8007cde:	4b13      	ldr	r3, [pc, #76]	; (8007d2c <asinf+0x5c>)
 8007ce0:	f993 3000 	ldrsb.w	r3, [r3]
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	eef0 8a40 	vmov.f32	s17, s0
 8007cea:	d01a      	beq.n	8007d22 <asinf+0x52>
 8007cec:	eeb4 8a48 	vcmp.f32	s16, s16
 8007cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cf4:	d615      	bvs.n	8007d22 <asinf+0x52>
 8007cf6:	eeb0 0a48 	vmov.f32	s0, s16
 8007cfa:	f000 fd99 	bl	8008830 <fabsf>
 8007cfe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007d02:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8007d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d0a:	dd0a      	ble.n	8007d22 <asinf+0x52>
 8007d0c:	f7ff ff5e 	bl	8007bcc <__errno>
 8007d10:	ecbd 8b02 	vpop	{d8}
 8007d14:	2321      	movs	r3, #33	; 0x21
 8007d16:	6003      	str	r3, [r0, #0]
 8007d18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007d1c:	4804      	ldr	r0, [pc, #16]	; (8007d30 <asinf+0x60>)
 8007d1e:	f000 bdd1 	b.w	80088c4 <nanf>
 8007d22:	eeb0 0a68 	vmov.f32	s0, s17
 8007d26:	ecbd 8b02 	vpop	{d8}
 8007d2a:	bd08      	pop	{r3, pc}
 8007d2c:	20000150 	.word	0x20000150
 8007d30:	08008a8c 	.word	0x08008a8c

08007d34 <sqrtf>:
 8007d34:	b508      	push	{r3, lr}
 8007d36:	ed2d 8b02 	vpush	{d8}
 8007d3a:	eeb0 8a40 	vmov.f32	s16, s0
 8007d3e:	f000 fa41 	bl	80081c4 <__ieee754_sqrtf>
 8007d42:	4b0d      	ldr	r3, [pc, #52]	; (8007d78 <sqrtf+0x44>)
 8007d44:	f993 3000 	ldrsb.w	r3, [r3]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	d011      	beq.n	8007d70 <sqrtf+0x3c>
 8007d4c:	eeb4 8a48 	vcmp.f32	s16, s16
 8007d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d54:	d60c      	bvs.n	8007d70 <sqrtf+0x3c>
 8007d56:	eddf 8a09 	vldr	s17, [pc, #36]	; 8007d7c <sqrtf+0x48>
 8007d5a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d62:	d505      	bpl.n	8007d70 <sqrtf+0x3c>
 8007d64:	f7ff ff32 	bl	8007bcc <__errno>
 8007d68:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8007d6c:	2321      	movs	r3, #33	; 0x21
 8007d6e:	6003      	str	r3, [r0, #0]
 8007d70:	ecbd 8b02 	vpop	{d8}
 8007d74:	bd08      	pop	{r3, pc}
 8007d76:	bf00      	nop
 8007d78:	20000150 	.word	0x20000150
 8007d7c:	00000000 	.word	0x00000000

08007d80 <__ieee754_asinf>:
 8007d80:	b538      	push	{r3, r4, r5, lr}
 8007d82:	ee10 5a10 	vmov	r5, s0
 8007d86:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8007d8a:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8007d8e:	ed2d 8b04 	vpush	{d8-d9}
 8007d92:	d10c      	bne.n	8007dae <__ieee754_asinf+0x2e>
 8007d94:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8007f0c <__ieee754_asinf+0x18c>
 8007d98:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8007f10 <__ieee754_asinf+0x190>
 8007d9c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8007da0:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007da4:	eeb0 0a67 	vmov.f32	s0, s15
 8007da8:	ecbd 8b04 	vpop	{d8-d9}
 8007dac:	bd38      	pop	{r3, r4, r5, pc}
 8007dae:	dd04      	ble.n	8007dba <__ieee754_asinf+0x3a>
 8007db0:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007db4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8007db8:	e7f6      	b.n	8007da8 <__ieee754_asinf+0x28>
 8007dba:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8007dbe:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8007dc2:	da0b      	bge.n	8007ddc <__ieee754_asinf+0x5c>
 8007dc4:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8007dc8:	da52      	bge.n	8007e70 <__ieee754_asinf+0xf0>
 8007dca:	eddf 7a52 	vldr	s15, [pc, #328]	; 8007f14 <__ieee754_asinf+0x194>
 8007dce:	ee70 7a27 	vadd.f32	s15, s0, s15
 8007dd2:	eef4 7ae8 	vcmpe.f32	s15, s17
 8007dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dda:	dce5      	bgt.n	8007da8 <__ieee754_asinf+0x28>
 8007ddc:	f000 fd28 	bl	8008830 <fabsf>
 8007de0:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8007de4:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8007de8:	ee20 8a08 	vmul.f32	s16, s0, s16
 8007dec:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8007f18 <__ieee754_asinf+0x198>
 8007df0:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8007f1c <__ieee754_asinf+0x19c>
 8007df4:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8007f20 <__ieee754_asinf+0x1a0>
 8007df8:	eea8 7a27 	vfma.f32	s14, s16, s15
 8007dfc:	eddf 7a49 	vldr	s15, [pc, #292]	; 8007f24 <__ieee754_asinf+0x1a4>
 8007e00:	eee7 7a08 	vfma.f32	s15, s14, s16
 8007e04:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8007f28 <__ieee754_asinf+0x1a8>
 8007e08:	eea7 7a88 	vfma.f32	s14, s15, s16
 8007e0c:	eddf 7a47 	vldr	s15, [pc, #284]	; 8007f2c <__ieee754_asinf+0x1ac>
 8007e10:	eee7 7a08 	vfma.f32	s15, s14, s16
 8007e14:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8007f30 <__ieee754_asinf+0x1b0>
 8007e18:	eea7 9a88 	vfma.f32	s18, s15, s16
 8007e1c:	eddf 7a45 	vldr	s15, [pc, #276]	; 8007f34 <__ieee754_asinf+0x1b4>
 8007e20:	eee8 7a07 	vfma.f32	s15, s16, s14
 8007e24:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8007f38 <__ieee754_asinf+0x1b8>
 8007e28:	eea7 7a88 	vfma.f32	s14, s15, s16
 8007e2c:	eddf 7a43 	vldr	s15, [pc, #268]	; 8007f3c <__ieee754_asinf+0x1bc>
 8007e30:	eee7 7a08 	vfma.f32	s15, s14, s16
 8007e34:	eeb0 0a48 	vmov.f32	s0, s16
 8007e38:	eee7 8a88 	vfma.f32	s17, s15, s16
 8007e3c:	f000 f9c2 	bl	80081c4 <__ieee754_sqrtf>
 8007e40:	4b3f      	ldr	r3, [pc, #252]	; (8007f40 <__ieee754_asinf+0x1c0>)
 8007e42:	ee29 9a08 	vmul.f32	s18, s18, s16
 8007e46:	429c      	cmp	r4, r3
 8007e48:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8007e4c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007e50:	dd3d      	ble.n	8007ece <__ieee754_asinf+0x14e>
 8007e52:	eea0 0a06 	vfma.f32	s0, s0, s12
 8007e56:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8007f44 <__ieee754_asinf+0x1c4>
 8007e5a:	eee0 7a26 	vfma.f32	s15, s0, s13
 8007e5e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8007f10 <__ieee754_asinf+0x190>
 8007e62:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007e66:	2d00      	cmp	r5, #0
 8007e68:	bfd8      	it	le
 8007e6a:	eeb1 0a40 	vnegle.f32	s0, s0
 8007e6e:	e79b      	b.n	8007da8 <__ieee754_asinf+0x28>
 8007e70:	ee60 7a00 	vmul.f32	s15, s0, s0
 8007e74:	eddf 6a28 	vldr	s13, [pc, #160]	; 8007f18 <__ieee754_asinf+0x198>
 8007e78:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8007f1c <__ieee754_asinf+0x19c>
 8007e7c:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8007f30 <__ieee754_asinf+0x1b0>
 8007e80:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8007e84:	eddf 6a27 	vldr	s13, [pc, #156]	; 8007f24 <__ieee754_asinf+0x1a4>
 8007e88:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007e8c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8007f28 <__ieee754_asinf+0x1a8>
 8007e90:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007e94:	eddf 6a25 	vldr	s13, [pc, #148]	; 8007f2c <__ieee754_asinf+0x1ac>
 8007e98:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007e9c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8007f20 <__ieee754_asinf+0x1a0>
 8007ea0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007ea4:	eddf 6a23 	vldr	s13, [pc, #140]	; 8007f34 <__ieee754_asinf+0x1b4>
 8007ea8:	eee7 6a86 	vfma.f32	s13, s15, s12
 8007eac:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8007f38 <__ieee754_asinf+0x1b8>
 8007eb0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8007eb4:	eddf 6a21 	vldr	s13, [pc, #132]	; 8007f3c <__ieee754_asinf+0x1bc>
 8007eb8:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007ebc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007ec0:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8007ec4:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8007ec8:	eea0 0a27 	vfma.f32	s0, s0, s15
 8007ecc:	e76c      	b.n	8007da8 <__ieee754_asinf+0x28>
 8007ece:	ee10 3a10 	vmov	r3, s0
 8007ed2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007ed6:	f023 030f 	bic.w	r3, r3, #15
 8007eda:	ee07 3a10 	vmov	s14, r3
 8007ede:	eea7 8a47 	vfms.f32	s16, s14, s14
 8007ee2:	ee70 7a07 	vadd.f32	s15, s0, s14
 8007ee6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007eea:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8007eee:	eddf 7a07 	vldr	s15, [pc, #28]	; 8007f0c <__ieee754_asinf+0x18c>
 8007ef2:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8007ef6:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8007efa:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8007f48 <__ieee754_asinf+0x1c8>
 8007efe:	eeb0 6a40 	vmov.f32	s12, s0
 8007f02:	eea7 6a66 	vfms.f32	s12, s14, s13
 8007f06:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007f0a:	e7aa      	b.n	8007e62 <__ieee754_asinf+0xe2>
 8007f0c:	b33bbd2e 	.word	0xb33bbd2e
 8007f10:	3fc90fdb 	.word	0x3fc90fdb
 8007f14:	7149f2ca 	.word	0x7149f2ca
 8007f18:	3811ef08 	.word	0x3811ef08
 8007f1c:	3a4f7f04 	.word	0x3a4f7f04
 8007f20:	3e2aaaab 	.word	0x3e2aaaab
 8007f24:	bd241146 	.word	0xbd241146
 8007f28:	3e4e0aa8 	.word	0x3e4e0aa8
 8007f2c:	bea6b090 	.word	0xbea6b090
 8007f30:	3d9dc62e 	.word	0x3d9dc62e
 8007f34:	bf303361 	.word	0xbf303361
 8007f38:	4001572d 	.word	0x4001572d
 8007f3c:	c019d139 	.word	0xc019d139
 8007f40:	3f799999 	.word	0x3f799999
 8007f44:	333bbd2e 	.word	0x333bbd2e
 8007f48:	3f490fdb 	.word	0x3f490fdb

08007f4c <__ieee754_rem_pio2f>:
 8007f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f4e:	ee10 6a10 	vmov	r6, s0
 8007f52:	4b8e      	ldr	r3, [pc, #568]	; (800818c <__ieee754_rem_pio2f+0x240>)
 8007f54:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8007f58:	429d      	cmp	r5, r3
 8007f5a:	b087      	sub	sp, #28
 8007f5c:	eef0 7a40 	vmov.f32	s15, s0
 8007f60:	4604      	mov	r4, r0
 8007f62:	dc05      	bgt.n	8007f70 <__ieee754_rem_pio2f+0x24>
 8007f64:	2300      	movs	r3, #0
 8007f66:	ed80 0a00 	vstr	s0, [r0]
 8007f6a:	6043      	str	r3, [r0, #4]
 8007f6c:	2000      	movs	r0, #0
 8007f6e:	e01a      	b.n	8007fa6 <__ieee754_rem_pio2f+0x5a>
 8007f70:	4b87      	ldr	r3, [pc, #540]	; (8008190 <__ieee754_rem_pio2f+0x244>)
 8007f72:	429d      	cmp	r5, r3
 8007f74:	dc46      	bgt.n	8008004 <__ieee754_rem_pio2f+0xb8>
 8007f76:	2e00      	cmp	r6, #0
 8007f78:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8008194 <__ieee754_rem_pio2f+0x248>
 8007f7c:	4b86      	ldr	r3, [pc, #536]	; (8008198 <__ieee754_rem_pio2f+0x24c>)
 8007f7e:	f025 050f 	bic.w	r5, r5, #15
 8007f82:	dd1f      	ble.n	8007fc4 <__ieee754_rem_pio2f+0x78>
 8007f84:	429d      	cmp	r5, r3
 8007f86:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007f8a:	d00e      	beq.n	8007faa <__ieee754_rem_pio2f+0x5e>
 8007f8c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800819c <__ieee754_rem_pio2f+0x250>
 8007f90:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8007f94:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007f98:	ed80 0a00 	vstr	s0, [r0]
 8007f9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007fa0:	2001      	movs	r0, #1
 8007fa2:	edc4 7a01 	vstr	s15, [r4, #4]
 8007fa6:	b007      	add	sp, #28
 8007fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007faa:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80081a0 <__ieee754_rem_pio2f+0x254>
 8007fae:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80081a4 <__ieee754_rem_pio2f+0x258>
 8007fb2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007fb6:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8007fba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007fbe:	edc0 6a00 	vstr	s13, [r0]
 8007fc2:	e7eb      	b.n	8007f9c <__ieee754_rem_pio2f+0x50>
 8007fc4:	429d      	cmp	r5, r3
 8007fc6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007fca:	d00e      	beq.n	8007fea <__ieee754_rem_pio2f+0x9e>
 8007fcc:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800819c <__ieee754_rem_pio2f+0x250>
 8007fd0:	ee37 0a87 	vadd.f32	s0, s15, s14
 8007fd4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007fd8:	ed80 0a00 	vstr	s0, [r0]
 8007fdc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fe4:	edc4 7a01 	vstr	s15, [r4, #4]
 8007fe8:	e7dd      	b.n	8007fa6 <__ieee754_rem_pio2f+0x5a>
 8007fea:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80081a0 <__ieee754_rem_pio2f+0x254>
 8007fee:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80081a4 <__ieee754_rem_pio2f+0x258>
 8007ff2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007ff6:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007ffa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007ffe:	edc0 6a00 	vstr	s13, [r0]
 8008002:	e7eb      	b.n	8007fdc <__ieee754_rem_pio2f+0x90>
 8008004:	4b68      	ldr	r3, [pc, #416]	; (80081a8 <__ieee754_rem_pio2f+0x25c>)
 8008006:	429d      	cmp	r5, r3
 8008008:	dc72      	bgt.n	80080f0 <__ieee754_rem_pio2f+0x1a4>
 800800a:	f000 fc11 	bl	8008830 <fabsf>
 800800e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80081ac <__ieee754_rem_pio2f+0x260>
 8008012:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008016:	eee0 7a07 	vfma.f32	s15, s0, s14
 800801a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800801e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008022:	ee17 0a90 	vmov	r0, s15
 8008026:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8008194 <__ieee754_rem_pio2f+0x248>
 800802a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800802e:	281f      	cmp	r0, #31
 8008030:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800819c <__ieee754_rem_pio2f+0x250>
 8008034:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008038:	eeb1 6a47 	vneg.f32	s12, s14
 800803c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008040:	ee16 2a90 	vmov	r2, s13
 8008044:	dc1c      	bgt.n	8008080 <__ieee754_rem_pio2f+0x134>
 8008046:	495a      	ldr	r1, [pc, #360]	; (80081b0 <__ieee754_rem_pio2f+0x264>)
 8008048:	1e47      	subs	r7, r0, #1
 800804a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800804e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8008052:	428b      	cmp	r3, r1
 8008054:	d014      	beq.n	8008080 <__ieee754_rem_pio2f+0x134>
 8008056:	6022      	str	r2, [r4, #0]
 8008058:	ed94 7a00 	vldr	s14, [r4]
 800805c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008060:	2e00      	cmp	r6, #0
 8008062:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008066:	ed84 0a01 	vstr	s0, [r4, #4]
 800806a:	da9c      	bge.n	8007fa6 <__ieee754_rem_pio2f+0x5a>
 800806c:	eeb1 7a47 	vneg.f32	s14, s14
 8008070:	eeb1 0a40 	vneg.f32	s0, s0
 8008074:	ed84 7a00 	vstr	s14, [r4]
 8008078:	ed84 0a01 	vstr	s0, [r4, #4]
 800807c:	4240      	negs	r0, r0
 800807e:	e792      	b.n	8007fa6 <__ieee754_rem_pio2f+0x5a>
 8008080:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8008084:	15eb      	asrs	r3, r5, #23
 8008086:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800808a:	2d08      	cmp	r5, #8
 800808c:	dde3      	ble.n	8008056 <__ieee754_rem_pio2f+0x10a>
 800808e:	eddf 7a44 	vldr	s15, [pc, #272]	; 80081a0 <__ieee754_rem_pio2f+0x254>
 8008092:	eef0 6a40 	vmov.f32	s13, s0
 8008096:	eee6 6a27 	vfma.f32	s13, s12, s15
 800809a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800809e:	eea6 0a27 	vfma.f32	s0, s12, s15
 80080a2:	eddf 7a40 	vldr	s15, [pc, #256]	; 80081a4 <__ieee754_rem_pio2f+0x258>
 80080a6:	ee97 0a27 	vfnms.f32	s0, s14, s15
 80080aa:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80080ae:	eef0 7a40 	vmov.f32	s15, s0
 80080b2:	ee15 2a90 	vmov	r2, s11
 80080b6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80080ba:	1a5b      	subs	r3, r3, r1
 80080bc:	2b19      	cmp	r3, #25
 80080be:	dc04      	bgt.n	80080ca <__ieee754_rem_pio2f+0x17e>
 80080c0:	edc4 5a00 	vstr	s11, [r4]
 80080c4:	eeb0 0a66 	vmov.f32	s0, s13
 80080c8:	e7c6      	b.n	8008058 <__ieee754_rem_pio2f+0x10c>
 80080ca:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80081b4 <__ieee754_rem_pio2f+0x268>
 80080ce:	eeb0 0a66 	vmov.f32	s0, s13
 80080d2:	eea6 0a25 	vfma.f32	s0, s12, s11
 80080d6:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80080da:	eddf 6a37 	vldr	s13, [pc, #220]	; 80081b8 <__ieee754_rem_pio2f+0x26c>
 80080de:	eee6 7a25 	vfma.f32	s15, s12, s11
 80080e2:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80080e6:	ee30 7a67 	vsub.f32	s14, s0, s15
 80080ea:	ed84 7a00 	vstr	s14, [r4]
 80080ee:	e7b3      	b.n	8008058 <__ieee754_rem_pio2f+0x10c>
 80080f0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80080f4:	db06      	blt.n	8008104 <__ieee754_rem_pio2f+0x1b8>
 80080f6:	ee70 7a40 	vsub.f32	s15, s0, s0
 80080fa:	edc0 7a01 	vstr	s15, [r0, #4]
 80080fe:	edc0 7a00 	vstr	s15, [r0]
 8008102:	e733      	b.n	8007f6c <__ieee754_rem_pio2f+0x20>
 8008104:	15ea      	asrs	r2, r5, #23
 8008106:	3a86      	subs	r2, #134	; 0x86
 8008108:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800810c:	ee07 3a90 	vmov	s15, r3
 8008110:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008114:	eddf 6a29 	vldr	s13, [pc, #164]	; 80081bc <__ieee754_rem_pio2f+0x270>
 8008118:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800811c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008120:	ed8d 7a03 	vstr	s14, [sp, #12]
 8008124:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008128:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800812c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008130:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008134:	ed8d 7a04 	vstr	s14, [sp, #16]
 8008138:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800813c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008144:	edcd 7a05 	vstr	s15, [sp, #20]
 8008148:	d11e      	bne.n	8008188 <__ieee754_rem_pio2f+0x23c>
 800814a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800814e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008152:	bf14      	ite	ne
 8008154:	2302      	movne	r3, #2
 8008156:	2301      	moveq	r3, #1
 8008158:	4919      	ldr	r1, [pc, #100]	; (80081c0 <__ieee754_rem_pio2f+0x274>)
 800815a:	9101      	str	r1, [sp, #4]
 800815c:	2102      	movs	r1, #2
 800815e:	9100      	str	r1, [sp, #0]
 8008160:	a803      	add	r0, sp, #12
 8008162:	4621      	mov	r1, r4
 8008164:	f000 f892 	bl	800828c <__kernel_rem_pio2f>
 8008168:	2e00      	cmp	r6, #0
 800816a:	f6bf af1c 	bge.w	8007fa6 <__ieee754_rem_pio2f+0x5a>
 800816e:	edd4 7a00 	vldr	s15, [r4]
 8008172:	eef1 7a67 	vneg.f32	s15, s15
 8008176:	edc4 7a00 	vstr	s15, [r4]
 800817a:	edd4 7a01 	vldr	s15, [r4, #4]
 800817e:	eef1 7a67 	vneg.f32	s15, s15
 8008182:	edc4 7a01 	vstr	s15, [r4, #4]
 8008186:	e779      	b.n	800807c <__ieee754_rem_pio2f+0x130>
 8008188:	2303      	movs	r3, #3
 800818a:	e7e5      	b.n	8008158 <__ieee754_rem_pio2f+0x20c>
 800818c:	3f490fd8 	.word	0x3f490fd8
 8008190:	4016cbe3 	.word	0x4016cbe3
 8008194:	3fc90f80 	.word	0x3fc90f80
 8008198:	3fc90fd0 	.word	0x3fc90fd0
 800819c:	37354443 	.word	0x37354443
 80081a0:	37354400 	.word	0x37354400
 80081a4:	2e85a308 	.word	0x2e85a308
 80081a8:	43490f80 	.word	0x43490f80
 80081ac:	3f22f984 	.word	0x3f22f984
 80081b0:	08008a90 	.word	0x08008a90
 80081b4:	2e85a300 	.word	0x2e85a300
 80081b8:	248d3132 	.word	0x248d3132
 80081bc:	43800000 	.word	0x43800000
 80081c0:	08008b10 	.word	0x08008b10

080081c4 <__ieee754_sqrtf>:
 80081c4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80081c8:	4770      	bx	lr
	...

080081cc <__kernel_cosf>:
 80081cc:	ee10 3a10 	vmov	r3, s0
 80081d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80081d4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80081d8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80081dc:	da05      	bge.n	80081ea <__kernel_cosf+0x1e>
 80081de:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80081e2:	ee17 2a90 	vmov	r2, s15
 80081e6:	2a00      	cmp	r2, #0
 80081e8:	d03d      	beq.n	8008266 <__kernel_cosf+0x9a>
 80081ea:	ee60 5a00 	vmul.f32	s11, s0, s0
 80081ee:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800826c <__kernel_cosf+0xa0>
 80081f2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8008270 <__kernel_cosf+0xa4>
 80081f6:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8008274 <__kernel_cosf+0xa8>
 80081fa:	4a1f      	ldr	r2, [pc, #124]	; (8008278 <__kernel_cosf+0xac>)
 80081fc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8008200:	4293      	cmp	r3, r2
 8008202:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800827c <__kernel_cosf+0xb0>
 8008206:	eee7 7a25 	vfma.f32	s15, s14, s11
 800820a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8008280 <__kernel_cosf+0xb4>
 800820e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8008212:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8008284 <__kernel_cosf+0xb8>
 8008216:	eee7 7a25 	vfma.f32	s15, s14, s11
 800821a:	eeb0 7a66 	vmov.f32	s14, s13
 800821e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8008222:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8008226:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800822a:	ee67 6a25 	vmul.f32	s13, s14, s11
 800822e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8008232:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008236:	dc04      	bgt.n	8008242 <__kernel_cosf+0x76>
 8008238:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800823c:	ee36 0a47 	vsub.f32	s0, s12, s14
 8008240:	4770      	bx	lr
 8008242:	4a11      	ldr	r2, [pc, #68]	; (8008288 <__kernel_cosf+0xbc>)
 8008244:	4293      	cmp	r3, r2
 8008246:	bfda      	itte	le
 8008248:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800824c:	ee06 3a90 	vmovle	s13, r3
 8008250:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8008254:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008258:	ee36 0a66 	vsub.f32	s0, s12, s13
 800825c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008260:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008264:	4770      	bx	lr
 8008266:	eeb0 0a46 	vmov.f32	s0, s12
 800826a:	4770      	bx	lr
 800826c:	ad47d74e 	.word	0xad47d74e
 8008270:	310f74f6 	.word	0x310f74f6
 8008274:	3d2aaaab 	.word	0x3d2aaaab
 8008278:	3e999999 	.word	0x3e999999
 800827c:	b493f27c 	.word	0xb493f27c
 8008280:	37d00d01 	.word	0x37d00d01
 8008284:	bab60b61 	.word	0xbab60b61
 8008288:	3f480000 	.word	0x3f480000

0800828c <__kernel_rem_pio2f>:
 800828c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008290:	ed2d 8b04 	vpush	{d8-d9}
 8008294:	b0d7      	sub	sp, #348	; 0x15c
 8008296:	4616      	mov	r6, r2
 8008298:	4698      	mov	r8, r3
 800829a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800829c:	4bbb      	ldr	r3, [pc, #748]	; (800858c <__kernel_rem_pio2f+0x300>)
 800829e:	9001      	str	r0, [sp, #4]
 80082a0:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 80082a4:	1d33      	adds	r3, r6, #4
 80082a6:	460d      	mov	r5, r1
 80082a8:	f108 39ff 	add.w	r9, r8, #4294967295
 80082ac:	db29      	blt.n	8008302 <__kernel_rem_pio2f+0x76>
 80082ae:	1ef1      	subs	r1, r6, #3
 80082b0:	bf48      	it	mi
 80082b2:	1d31      	addmi	r1, r6, #4
 80082b4:	10c9      	asrs	r1, r1, #3
 80082b6:	1c4c      	adds	r4, r1, #1
 80082b8:	00e3      	lsls	r3, r4, #3
 80082ba:	9302      	str	r3, [sp, #8]
 80082bc:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80082be:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800859c <__kernel_rem_pio2f+0x310>
 80082c2:	eba1 0009 	sub.w	r0, r1, r9
 80082c6:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 80082ca:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 80082ce:	eb07 0c09 	add.w	ip, r7, r9
 80082d2:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 80082d6:	2300      	movs	r3, #0
 80082d8:	4563      	cmp	r3, ip
 80082da:	dd14      	ble.n	8008306 <__kernel_rem_pio2f+0x7a>
 80082dc:	ab1a      	add	r3, sp, #104	; 0x68
 80082de:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 80082e2:	46cc      	mov	ip, r9
 80082e4:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 80082e8:	f1c8 0b01 	rsb	fp, r8, #1
 80082ec:	eb0b 020c 	add.w	r2, fp, ip
 80082f0:	4297      	cmp	r7, r2
 80082f2:	db27      	blt.n	8008344 <__kernel_rem_pio2f+0xb8>
 80082f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80082f8:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800859c <__kernel_rem_pio2f+0x310>
 80082fc:	4618      	mov	r0, r3
 80082fe:	2200      	movs	r2, #0
 8008300:	e016      	b.n	8008330 <__kernel_rem_pio2f+0xa4>
 8008302:	2100      	movs	r1, #0
 8008304:	e7d7      	b.n	80082b6 <__kernel_rem_pio2f+0x2a>
 8008306:	42d8      	cmn	r0, r3
 8008308:	bf5d      	ittte	pl
 800830a:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 800830e:	ee07 2a90 	vmovpl	s15, r2
 8008312:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8008316:	eef0 7a47 	vmovmi.f32	s15, s14
 800831a:	ecea 7a01 	vstmia	sl!, {s15}
 800831e:	3301      	adds	r3, #1
 8008320:	e7da      	b.n	80082d8 <__kernel_rem_pio2f+0x4c>
 8008322:	ecfe 6a01 	vldmia	lr!, {s13}
 8008326:	ed90 7a00 	vldr	s14, [r0]
 800832a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800832e:	3201      	adds	r2, #1
 8008330:	454a      	cmp	r2, r9
 8008332:	f1a0 0004 	sub.w	r0, r0, #4
 8008336:	ddf4      	ble.n	8008322 <__kernel_rem_pio2f+0x96>
 8008338:	ecea 7a01 	vstmia	sl!, {s15}
 800833c:	3304      	adds	r3, #4
 800833e:	f10c 0c01 	add.w	ip, ip, #1
 8008342:	e7d3      	b.n	80082ec <__kernel_rem_pio2f+0x60>
 8008344:	ab06      	add	r3, sp, #24
 8008346:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800834a:	9304      	str	r3, [sp, #16]
 800834c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800834e:	eddf 8a92 	vldr	s17, [pc, #584]	; 8008598 <__kernel_rem_pio2f+0x30c>
 8008352:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8008594 <__kernel_rem_pio2f+0x308>
 8008356:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800835a:	9303      	str	r3, [sp, #12]
 800835c:	46ba      	mov	sl, r7
 800835e:	ab56      	add	r3, sp, #344	; 0x158
 8008360:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8008364:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8008368:	ab06      	add	r3, sp, #24
 800836a:	4618      	mov	r0, r3
 800836c:	4652      	mov	r2, sl
 800836e:	2a00      	cmp	r2, #0
 8008370:	dc51      	bgt.n	8008416 <__kernel_rem_pio2f+0x18a>
 8008372:	4620      	mov	r0, r4
 8008374:	9305      	str	r3, [sp, #20]
 8008376:	f000 faab 	bl	80088d0 <scalbnf>
 800837a:	eeb0 8a40 	vmov.f32	s16, s0
 800837e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8008382:	ee28 0a00 	vmul.f32	s0, s16, s0
 8008386:	f000 fa5b 	bl	8008840 <floorf>
 800838a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800838e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8008392:	2c00      	cmp	r4, #0
 8008394:	9b05      	ldr	r3, [sp, #20]
 8008396:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800839a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800839e:	edcd 7a00 	vstr	s15, [sp]
 80083a2:	ee38 8a40 	vsub.f32	s16, s16, s0
 80083a6:	dd4b      	ble.n	8008440 <__kernel_rem_pio2f+0x1b4>
 80083a8:	f10a 3cff 	add.w	ip, sl, #4294967295
 80083ac:	aa06      	add	r2, sp, #24
 80083ae:	f1c4 0e08 	rsb	lr, r4, #8
 80083b2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80083b6:	ee17 1a90 	vmov	r1, s15
 80083ba:	fa42 f00e 	asr.w	r0, r2, lr
 80083be:	4401      	add	r1, r0
 80083c0:	9100      	str	r1, [sp, #0]
 80083c2:	fa00 f00e 	lsl.w	r0, r0, lr
 80083c6:	a906      	add	r1, sp, #24
 80083c8:	1a12      	subs	r2, r2, r0
 80083ca:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80083ce:	f1c4 0007 	rsb	r0, r4, #7
 80083d2:	fa42 fb00 	asr.w	fp, r2, r0
 80083d6:	f1bb 0f00 	cmp.w	fp, #0
 80083da:	dd43      	ble.n	8008464 <__kernel_rem_pio2f+0x1d8>
 80083dc:	9a00      	ldr	r2, [sp, #0]
 80083de:	f04f 0e00 	mov.w	lr, #0
 80083e2:	3201      	adds	r2, #1
 80083e4:	9200      	str	r2, [sp, #0]
 80083e6:	4670      	mov	r0, lr
 80083e8:	45f2      	cmp	sl, lr
 80083ea:	dc6c      	bgt.n	80084c6 <__kernel_rem_pio2f+0x23a>
 80083ec:	2c00      	cmp	r4, #0
 80083ee:	dd04      	ble.n	80083fa <__kernel_rem_pio2f+0x16e>
 80083f0:	2c01      	cmp	r4, #1
 80083f2:	d079      	beq.n	80084e8 <__kernel_rem_pio2f+0x25c>
 80083f4:	2c02      	cmp	r4, #2
 80083f6:	f000 8082 	beq.w	80084fe <__kernel_rem_pio2f+0x272>
 80083fa:	f1bb 0f02 	cmp.w	fp, #2
 80083fe:	d131      	bne.n	8008464 <__kernel_rem_pio2f+0x1d8>
 8008400:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008404:	ee30 8a48 	vsub.f32	s16, s0, s16
 8008408:	b360      	cbz	r0, 8008464 <__kernel_rem_pio2f+0x1d8>
 800840a:	4620      	mov	r0, r4
 800840c:	f000 fa60 	bl	80088d0 <scalbnf>
 8008410:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008414:	e026      	b.n	8008464 <__kernel_rem_pio2f+0x1d8>
 8008416:	ee60 7a28 	vmul.f32	s15, s0, s17
 800841a:	3a01      	subs	r2, #1
 800841c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008420:	a942      	add	r1, sp, #264	; 0x108
 8008422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008426:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800842a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800842e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008432:	eca0 0a01 	vstmia	r0!, {s0}
 8008436:	ed9c 0a00 	vldr	s0, [ip]
 800843a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800843e:	e796      	b.n	800836e <__kernel_rem_pio2f+0xe2>
 8008440:	d107      	bne.n	8008452 <__kernel_rem_pio2f+0x1c6>
 8008442:	f10a 32ff 	add.w	r2, sl, #4294967295
 8008446:	a906      	add	r1, sp, #24
 8008448:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800844c:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8008450:	e7c1      	b.n	80083d6 <__kernel_rem_pio2f+0x14a>
 8008452:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008456:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800845a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800845e:	da2f      	bge.n	80084c0 <__kernel_rem_pio2f+0x234>
 8008460:	f04f 0b00 	mov.w	fp, #0
 8008464:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800846c:	f040 8098 	bne.w	80085a0 <__kernel_rem_pio2f+0x314>
 8008470:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008474:	469c      	mov	ip, r3
 8008476:	2200      	movs	r2, #0
 8008478:	45bc      	cmp	ip, r7
 800847a:	da48      	bge.n	800850e <__kernel_rem_pio2f+0x282>
 800847c:	2a00      	cmp	r2, #0
 800847e:	d05f      	beq.n	8008540 <__kernel_rem_pio2f+0x2b4>
 8008480:	aa06      	add	r2, sp, #24
 8008482:	3c08      	subs	r4, #8
 8008484:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008488:	2900      	cmp	r1, #0
 800848a:	d07d      	beq.n	8008588 <__kernel_rem_pio2f+0x2fc>
 800848c:	4620      	mov	r0, r4
 800848e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008492:	9301      	str	r3, [sp, #4]
 8008494:	f000 fa1c 	bl	80088d0 <scalbnf>
 8008498:	9b01      	ldr	r3, [sp, #4]
 800849a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8008598 <__kernel_rem_pio2f+0x30c>
 800849e:	4619      	mov	r1, r3
 80084a0:	2900      	cmp	r1, #0
 80084a2:	f280 80af 	bge.w	8008604 <__kernel_rem_pio2f+0x378>
 80084a6:	4618      	mov	r0, r3
 80084a8:	2400      	movs	r4, #0
 80084aa:	2800      	cmp	r0, #0
 80084ac:	f2c0 80d0 	blt.w	8008650 <__kernel_rem_pio2f+0x3c4>
 80084b0:	a942      	add	r1, sp, #264	; 0x108
 80084b2:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 80084b6:	4a36      	ldr	r2, [pc, #216]	; (8008590 <__kernel_rem_pio2f+0x304>)
 80084b8:	eddf 7a38 	vldr	s15, [pc, #224]	; 800859c <__kernel_rem_pio2f+0x310>
 80084bc:	2100      	movs	r1, #0
 80084be:	e0bb      	b.n	8008638 <__kernel_rem_pio2f+0x3ac>
 80084c0:	f04f 0b02 	mov.w	fp, #2
 80084c4:	e78a      	b.n	80083dc <__kernel_rem_pio2f+0x150>
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	b948      	cbnz	r0, 80084de <__kernel_rem_pio2f+0x252>
 80084ca:	b11a      	cbz	r2, 80084d4 <__kernel_rem_pio2f+0x248>
 80084cc:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80084d0:	601a      	str	r2, [r3, #0]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f10e 0e01 	add.w	lr, lr, #1
 80084d8:	3304      	adds	r3, #4
 80084da:	4610      	mov	r0, r2
 80084dc:	e784      	b.n	80083e8 <__kernel_rem_pio2f+0x15c>
 80084de:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 80084e2:	601a      	str	r2, [r3, #0]
 80084e4:	4602      	mov	r2, r0
 80084e6:	e7f5      	b.n	80084d4 <__kernel_rem_pio2f+0x248>
 80084e8:	f10a 3cff 	add.w	ip, sl, #4294967295
 80084ec:	ab06      	add	r3, sp, #24
 80084ee:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80084f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084f6:	aa06      	add	r2, sp, #24
 80084f8:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 80084fc:	e77d      	b.n	80083fa <__kernel_rem_pio2f+0x16e>
 80084fe:	f10a 3cff 	add.w	ip, sl, #4294967295
 8008502:	ab06      	add	r3, sp, #24
 8008504:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8008508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800850c:	e7f3      	b.n	80084f6 <__kernel_rem_pio2f+0x26a>
 800850e:	a906      	add	r1, sp, #24
 8008510:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8008514:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008518:	4302      	orrs	r2, r0
 800851a:	e7ad      	b.n	8008478 <__kernel_rem_pio2f+0x1ec>
 800851c:	3001      	adds	r0, #1
 800851e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008522:	2a00      	cmp	r2, #0
 8008524:	d0fa      	beq.n	800851c <__kernel_rem_pio2f+0x290>
 8008526:	a91a      	add	r1, sp, #104	; 0x68
 8008528:	eb0a 0208 	add.w	r2, sl, r8
 800852c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8008530:	f10a 0301 	add.w	r3, sl, #1
 8008534:	eb0a 0100 	add.w	r1, sl, r0
 8008538:	4299      	cmp	r1, r3
 800853a:	da04      	bge.n	8008546 <__kernel_rem_pio2f+0x2ba>
 800853c:	468a      	mov	sl, r1
 800853e:	e70e      	b.n	800835e <__kernel_rem_pio2f+0xd2>
 8008540:	9b04      	ldr	r3, [sp, #16]
 8008542:	2001      	movs	r0, #1
 8008544:	e7eb      	b.n	800851e <__kernel_rem_pio2f+0x292>
 8008546:	9803      	ldr	r0, [sp, #12]
 8008548:	f8dd c004 	ldr.w	ip, [sp, #4]
 800854c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8008550:	9000      	str	r0, [sp, #0]
 8008552:	ee07 0a90 	vmov	s15, r0
 8008556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800855a:	2000      	movs	r0, #0
 800855c:	ece2 7a01 	vstmia	r2!, {s15}
 8008560:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800859c <__kernel_rem_pio2f+0x310>
 8008564:	4696      	mov	lr, r2
 8008566:	4548      	cmp	r0, r9
 8008568:	dd06      	ble.n	8008578 <__kernel_rem_pio2f+0x2ec>
 800856a:	a842      	add	r0, sp, #264	; 0x108
 800856c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8008570:	edc0 7a00 	vstr	s15, [r0]
 8008574:	3301      	adds	r3, #1
 8008576:	e7df      	b.n	8008538 <__kernel_rem_pio2f+0x2ac>
 8008578:	ecfc 6a01 	vldmia	ip!, {s13}
 800857c:	ed3e 7a01 	vldmdb	lr!, {s14}
 8008580:	3001      	adds	r0, #1
 8008582:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008586:	e7ee      	b.n	8008566 <__kernel_rem_pio2f+0x2da>
 8008588:	3b01      	subs	r3, #1
 800858a:	e779      	b.n	8008480 <__kernel_rem_pio2f+0x1f4>
 800858c:	08008e54 	.word	0x08008e54
 8008590:	08008e28 	.word	0x08008e28
 8008594:	43800000 	.word	0x43800000
 8008598:	3b800000 	.word	0x3b800000
 800859c:	00000000 	.word	0x00000000
 80085a0:	9b02      	ldr	r3, [sp, #8]
 80085a2:	eeb0 0a48 	vmov.f32	s0, s16
 80085a6:	1b98      	subs	r0, r3, r6
 80085a8:	f000 f992 	bl	80088d0 <scalbnf>
 80085ac:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8008594 <__kernel_rem_pio2f+0x308>
 80085b0:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80085b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085b8:	db1b      	blt.n	80085f2 <__kernel_rem_pio2f+0x366>
 80085ba:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8008598 <__kernel_rem_pio2f+0x30c>
 80085be:	ee60 7a27 	vmul.f32	s15, s0, s15
 80085c2:	aa06      	add	r2, sp, #24
 80085c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085c8:	a906      	add	r1, sp, #24
 80085ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80085ce:	3408      	adds	r4, #8
 80085d0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80085d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085d8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80085dc:	ee10 3a10 	vmov	r3, s0
 80085e0:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 80085e4:	ee17 2a90 	vmov	r2, s15
 80085e8:	f10a 0301 	add.w	r3, sl, #1
 80085ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80085f0:	e74c      	b.n	800848c <__kernel_rem_pio2f+0x200>
 80085f2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80085f6:	aa06      	add	r2, sp, #24
 80085f8:	ee10 3a10 	vmov	r3, s0
 80085fc:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8008600:	4653      	mov	r3, sl
 8008602:	e743      	b.n	800848c <__kernel_rem_pio2f+0x200>
 8008604:	aa42      	add	r2, sp, #264	; 0x108
 8008606:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800860a:	aa06      	add	r2, sp, #24
 800860c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008610:	9201      	str	r2, [sp, #4]
 8008612:	ee07 2a90 	vmov	s15, r2
 8008616:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800861a:	3901      	subs	r1, #1
 800861c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008620:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008624:	edc0 7a00 	vstr	s15, [r0]
 8008628:	e73a      	b.n	80084a0 <__kernel_rem_pio2f+0x214>
 800862a:	ecf2 6a01 	vldmia	r2!, {s13}
 800862e:	ecb6 7a01 	vldmia	r6!, {s14}
 8008632:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008636:	3101      	adds	r1, #1
 8008638:	42b9      	cmp	r1, r7
 800863a:	dc01      	bgt.n	8008640 <__kernel_rem_pio2f+0x3b4>
 800863c:	428c      	cmp	r4, r1
 800863e:	daf4      	bge.n	800862a <__kernel_rem_pio2f+0x39e>
 8008640:	aa56      	add	r2, sp, #344	; 0x158
 8008642:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8008646:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800864a:	3801      	subs	r0, #1
 800864c:	3401      	adds	r4, #1
 800864e:	e72c      	b.n	80084aa <__kernel_rem_pio2f+0x21e>
 8008650:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8008652:	2a02      	cmp	r2, #2
 8008654:	dc0a      	bgt.n	800866c <__kernel_rem_pio2f+0x3e0>
 8008656:	2a00      	cmp	r2, #0
 8008658:	dc61      	bgt.n	800871e <__kernel_rem_pio2f+0x492>
 800865a:	d03c      	beq.n	80086d6 <__kernel_rem_pio2f+0x44a>
 800865c:	9b00      	ldr	r3, [sp, #0]
 800865e:	f003 0007 	and.w	r0, r3, #7
 8008662:	b057      	add	sp, #348	; 0x15c
 8008664:	ecbd 8b04 	vpop	{d8-d9}
 8008668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800866c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800866e:	2a03      	cmp	r2, #3
 8008670:	d1f4      	bne.n	800865c <__kernel_rem_pio2f+0x3d0>
 8008672:	aa2e      	add	r2, sp, #184	; 0xb8
 8008674:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8008678:	4608      	mov	r0, r1
 800867a:	461c      	mov	r4, r3
 800867c:	2c00      	cmp	r4, #0
 800867e:	f1a0 0004 	sub.w	r0, r0, #4
 8008682:	dc59      	bgt.n	8008738 <__kernel_rem_pio2f+0x4ac>
 8008684:	4618      	mov	r0, r3
 8008686:	2801      	cmp	r0, #1
 8008688:	f1a1 0104 	sub.w	r1, r1, #4
 800868c:	dc64      	bgt.n	8008758 <__kernel_rem_pio2f+0x4cc>
 800868e:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 800859c <__kernel_rem_pio2f+0x310>
 8008692:	2b01      	cmp	r3, #1
 8008694:	dc70      	bgt.n	8008778 <__kernel_rem_pio2f+0x4ec>
 8008696:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800869a:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800869e:	f1bb 0f00 	cmp.w	fp, #0
 80086a2:	d172      	bne.n	800878a <__kernel_rem_pio2f+0x4fe>
 80086a4:	edc5 6a00 	vstr	s13, [r5]
 80086a8:	ed85 7a01 	vstr	s14, [r5, #4]
 80086ac:	edc5 7a02 	vstr	s15, [r5, #8]
 80086b0:	e7d4      	b.n	800865c <__kernel_rem_pio2f+0x3d0>
 80086b2:	aa2e      	add	r2, sp, #184	; 0xb8
 80086b4:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80086b8:	ed91 7a00 	vldr	s14, [r1]
 80086bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80086c0:	3b01      	subs	r3, #1
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	daf5      	bge.n	80086b2 <__kernel_rem_pio2f+0x426>
 80086c6:	f1bb 0f00 	cmp.w	fp, #0
 80086ca:	d001      	beq.n	80086d0 <__kernel_rem_pio2f+0x444>
 80086cc:	eef1 7a67 	vneg.f32	s15, s15
 80086d0:	edc5 7a00 	vstr	s15, [r5]
 80086d4:	e7c2      	b.n	800865c <__kernel_rem_pio2f+0x3d0>
 80086d6:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800859c <__kernel_rem_pio2f+0x310>
 80086da:	e7f2      	b.n	80086c2 <__kernel_rem_pio2f+0x436>
 80086dc:	aa2e      	add	r2, sp, #184	; 0xb8
 80086de:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 80086e2:	edd0 7a00 	vldr	s15, [r0]
 80086e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80086ea:	3901      	subs	r1, #1
 80086ec:	2900      	cmp	r1, #0
 80086ee:	daf5      	bge.n	80086dc <__kernel_rem_pio2f+0x450>
 80086f0:	f1bb 0f00 	cmp.w	fp, #0
 80086f4:	d017      	beq.n	8008726 <__kernel_rem_pio2f+0x49a>
 80086f6:	eef1 7a47 	vneg.f32	s15, s14
 80086fa:	edc5 7a00 	vstr	s15, [r5]
 80086fe:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8008702:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008706:	a82f      	add	r0, sp, #188	; 0xbc
 8008708:	2101      	movs	r1, #1
 800870a:	428b      	cmp	r3, r1
 800870c:	da0e      	bge.n	800872c <__kernel_rem_pio2f+0x4a0>
 800870e:	f1bb 0f00 	cmp.w	fp, #0
 8008712:	d001      	beq.n	8008718 <__kernel_rem_pio2f+0x48c>
 8008714:	eef1 7a67 	vneg.f32	s15, s15
 8008718:	edc5 7a01 	vstr	s15, [r5, #4]
 800871c:	e79e      	b.n	800865c <__kernel_rem_pio2f+0x3d0>
 800871e:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 800859c <__kernel_rem_pio2f+0x310>
 8008722:	4619      	mov	r1, r3
 8008724:	e7e2      	b.n	80086ec <__kernel_rem_pio2f+0x460>
 8008726:	eef0 7a47 	vmov.f32	s15, s14
 800872a:	e7e6      	b.n	80086fa <__kernel_rem_pio2f+0x46e>
 800872c:	ecb0 7a01 	vldmia	r0!, {s14}
 8008730:	3101      	adds	r1, #1
 8008732:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008736:	e7e8      	b.n	800870a <__kernel_rem_pio2f+0x47e>
 8008738:	edd0 7a00 	vldr	s15, [r0]
 800873c:	edd0 6a01 	vldr	s13, [r0, #4]
 8008740:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008744:	3c01      	subs	r4, #1
 8008746:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800874a:	ed80 7a00 	vstr	s14, [r0]
 800874e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008752:	edc0 7a01 	vstr	s15, [r0, #4]
 8008756:	e791      	b.n	800867c <__kernel_rem_pio2f+0x3f0>
 8008758:	edd1 7a00 	vldr	s15, [r1]
 800875c:	edd1 6a01 	vldr	s13, [r1, #4]
 8008760:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008764:	3801      	subs	r0, #1
 8008766:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800876a:	ed81 7a00 	vstr	s14, [r1]
 800876e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008772:	edc1 7a01 	vstr	s15, [r1, #4]
 8008776:	e786      	b.n	8008686 <__kernel_rem_pio2f+0x3fa>
 8008778:	aa2e      	add	r2, sp, #184	; 0xb8
 800877a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800877e:	ed91 7a00 	vldr	s14, [r1]
 8008782:	3b01      	subs	r3, #1
 8008784:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008788:	e783      	b.n	8008692 <__kernel_rem_pio2f+0x406>
 800878a:	eef1 6a66 	vneg.f32	s13, s13
 800878e:	eeb1 7a47 	vneg.f32	s14, s14
 8008792:	edc5 6a00 	vstr	s13, [r5]
 8008796:	ed85 7a01 	vstr	s14, [r5, #4]
 800879a:	eef1 7a67 	vneg.f32	s15, s15
 800879e:	e785      	b.n	80086ac <__kernel_rem_pio2f+0x420>

080087a0 <__kernel_sinf>:
 80087a0:	ee10 3a10 	vmov	r3, s0
 80087a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80087a8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80087ac:	da04      	bge.n	80087b8 <__kernel_sinf+0x18>
 80087ae:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80087b2:	ee17 3a90 	vmov	r3, s15
 80087b6:	b35b      	cbz	r3, 8008810 <__kernel_sinf+0x70>
 80087b8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80087bc:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008814 <__kernel_sinf+0x74>
 80087c0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8008818 <__kernel_sinf+0x78>
 80087c4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80087c8:	eddf 7a14 	vldr	s15, [pc, #80]	; 800881c <__kernel_sinf+0x7c>
 80087cc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80087d0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8008820 <__kernel_sinf+0x80>
 80087d4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80087d8:	eddf 7a12 	vldr	s15, [pc, #72]	; 8008824 <__kernel_sinf+0x84>
 80087dc:	ee60 6a07 	vmul.f32	s13, s0, s14
 80087e0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80087e4:	b930      	cbnz	r0, 80087f4 <__kernel_sinf+0x54>
 80087e6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8008828 <__kernel_sinf+0x88>
 80087ea:	eea7 6a27 	vfma.f32	s12, s14, s15
 80087ee:	eea6 0a26 	vfma.f32	s0, s12, s13
 80087f2:	4770      	bx	lr
 80087f4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80087f8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80087fc:	eee0 7a86 	vfma.f32	s15, s1, s12
 8008800:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8008804:	eddf 7a09 	vldr	s15, [pc, #36]	; 800882c <__kernel_sinf+0x8c>
 8008808:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800880c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8008810:	4770      	bx	lr
 8008812:	bf00      	nop
 8008814:	2f2ec9d3 	.word	0x2f2ec9d3
 8008818:	b2d72f34 	.word	0xb2d72f34
 800881c:	3638ef1b 	.word	0x3638ef1b
 8008820:	b9500d01 	.word	0xb9500d01
 8008824:	3c088889 	.word	0x3c088889
 8008828:	be2aaaab 	.word	0xbe2aaaab
 800882c:	3e2aaaab 	.word	0x3e2aaaab

08008830 <fabsf>:
 8008830:	ee10 3a10 	vmov	r3, s0
 8008834:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008838:	ee00 3a10 	vmov	s0, r3
 800883c:	4770      	bx	lr
	...

08008840 <floorf>:
 8008840:	ee10 3a10 	vmov	r3, s0
 8008844:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008848:	3a7f      	subs	r2, #127	; 0x7f
 800884a:	2a16      	cmp	r2, #22
 800884c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008850:	dc2a      	bgt.n	80088a8 <floorf+0x68>
 8008852:	2a00      	cmp	r2, #0
 8008854:	da11      	bge.n	800887a <floorf+0x3a>
 8008856:	eddf 7a18 	vldr	s15, [pc, #96]	; 80088b8 <floorf+0x78>
 800885a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800885e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008866:	dd05      	ble.n	8008874 <floorf+0x34>
 8008868:	2b00      	cmp	r3, #0
 800886a:	da23      	bge.n	80088b4 <floorf+0x74>
 800886c:	4a13      	ldr	r2, [pc, #76]	; (80088bc <floorf+0x7c>)
 800886e:	2900      	cmp	r1, #0
 8008870:	bf18      	it	ne
 8008872:	4613      	movne	r3, r2
 8008874:	ee00 3a10 	vmov	s0, r3
 8008878:	4770      	bx	lr
 800887a:	4911      	ldr	r1, [pc, #68]	; (80088c0 <floorf+0x80>)
 800887c:	4111      	asrs	r1, r2
 800887e:	420b      	tst	r3, r1
 8008880:	d0fa      	beq.n	8008878 <floorf+0x38>
 8008882:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80088b8 <floorf+0x78>
 8008886:	ee30 0a27 	vadd.f32	s0, s0, s15
 800888a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800888e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008892:	ddef      	ble.n	8008874 <floorf+0x34>
 8008894:	2b00      	cmp	r3, #0
 8008896:	bfbe      	ittt	lt
 8008898:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800889c:	fa40 f202 	asrlt.w	r2, r0, r2
 80088a0:	189b      	addlt	r3, r3, r2
 80088a2:	ea23 0301 	bic.w	r3, r3, r1
 80088a6:	e7e5      	b.n	8008874 <floorf+0x34>
 80088a8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80088ac:	d3e4      	bcc.n	8008878 <floorf+0x38>
 80088ae:	ee30 0a00 	vadd.f32	s0, s0, s0
 80088b2:	4770      	bx	lr
 80088b4:	2300      	movs	r3, #0
 80088b6:	e7dd      	b.n	8008874 <floorf+0x34>
 80088b8:	7149f2ca 	.word	0x7149f2ca
 80088bc:	bf800000 	.word	0xbf800000
 80088c0:	007fffff 	.word	0x007fffff

080088c4 <nanf>:
 80088c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80088cc <nanf+0x8>
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop
 80088cc:	7fc00000 	.word	0x7fc00000

080088d0 <scalbnf>:
 80088d0:	ee10 3a10 	vmov	r3, s0
 80088d4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80088d8:	d025      	beq.n	8008926 <scalbnf+0x56>
 80088da:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80088de:	d302      	bcc.n	80088e6 <scalbnf+0x16>
 80088e0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80088e4:	4770      	bx	lr
 80088e6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80088ea:	d122      	bne.n	8008932 <scalbnf+0x62>
 80088ec:	4b2a      	ldr	r3, [pc, #168]	; (8008998 <scalbnf+0xc8>)
 80088ee:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800899c <scalbnf+0xcc>
 80088f2:	4298      	cmp	r0, r3
 80088f4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80088f8:	db16      	blt.n	8008928 <scalbnf+0x58>
 80088fa:	ee10 3a10 	vmov	r3, s0
 80088fe:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008902:	3a19      	subs	r2, #25
 8008904:	4402      	add	r2, r0
 8008906:	2afe      	cmp	r2, #254	; 0xfe
 8008908:	dd15      	ble.n	8008936 <scalbnf+0x66>
 800890a:	ee10 3a10 	vmov	r3, s0
 800890e:	eddf 7a24 	vldr	s15, [pc, #144]	; 80089a0 <scalbnf+0xd0>
 8008912:	eddf 6a24 	vldr	s13, [pc, #144]	; 80089a4 <scalbnf+0xd4>
 8008916:	2b00      	cmp	r3, #0
 8008918:	eeb0 7a67 	vmov.f32	s14, s15
 800891c:	bfb8      	it	lt
 800891e:	eef0 7a66 	vmovlt.f32	s15, s13
 8008922:	ee27 0a27 	vmul.f32	s0, s14, s15
 8008926:	4770      	bx	lr
 8008928:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80089a8 <scalbnf+0xd8>
 800892c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008930:	4770      	bx	lr
 8008932:	0dd2      	lsrs	r2, r2, #23
 8008934:	e7e6      	b.n	8008904 <scalbnf+0x34>
 8008936:	2a00      	cmp	r2, #0
 8008938:	dd06      	ble.n	8008948 <scalbnf+0x78>
 800893a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800893e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008942:	ee00 3a10 	vmov	s0, r3
 8008946:	4770      	bx	lr
 8008948:	f112 0f16 	cmn.w	r2, #22
 800894c:	da1a      	bge.n	8008984 <scalbnf+0xb4>
 800894e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008952:	4298      	cmp	r0, r3
 8008954:	ee10 3a10 	vmov	r3, s0
 8008958:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800895c:	dd0a      	ble.n	8008974 <scalbnf+0xa4>
 800895e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80089a0 <scalbnf+0xd0>
 8008962:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80089a4 <scalbnf+0xd4>
 8008966:	eef0 7a40 	vmov.f32	s15, s0
 800896a:	2b00      	cmp	r3, #0
 800896c:	bf18      	it	ne
 800896e:	eeb0 0a47 	vmovne.f32	s0, s14
 8008972:	e7db      	b.n	800892c <scalbnf+0x5c>
 8008974:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80089a8 <scalbnf+0xd8>
 8008978:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80089ac <scalbnf+0xdc>
 800897c:	eef0 7a40 	vmov.f32	s15, s0
 8008980:	2b00      	cmp	r3, #0
 8008982:	e7f3      	b.n	800896c <scalbnf+0x9c>
 8008984:	3219      	adds	r2, #25
 8008986:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800898a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800898e:	eddf 7a08 	vldr	s15, [pc, #32]	; 80089b0 <scalbnf+0xe0>
 8008992:	ee07 3a10 	vmov	s14, r3
 8008996:	e7c4      	b.n	8008922 <scalbnf+0x52>
 8008998:	ffff3cb0 	.word	0xffff3cb0
 800899c:	4c000000 	.word	0x4c000000
 80089a0:	7149f2ca 	.word	0x7149f2ca
 80089a4:	f149f2ca 	.word	0xf149f2ca
 80089a8:	0da24260 	.word	0x0da24260
 80089ac:	8da24260 	.word	0x8da24260
 80089b0:	33000000 	.word	0x33000000

080089b4 <_init>:
 80089b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b6:	bf00      	nop
 80089b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ba:	bc08      	pop	{r3}
 80089bc:	469e      	mov	lr, r3
 80089be:	4770      	bx	lr

080089c0 <_fini>:
 80089c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089c2:	bf00      	nop
 80089c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089c6:	bc08      	pop	{r3}
 80089c8:	469e      	mov	lr, r3
 80089ca:	4770      	bx	lr
