
Mark_I.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2bc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000500  0800b444  0800b444  0001b444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b944  0800b944  0002017c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b944  0800b944  0001b944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b94c  0800b94c  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b94c  0800b94c  0001b94c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b950  0800b950  0001b950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800b954  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002017c  2**0
                  CONTENTS
 10 .bss          00001718  2000017c  2000017c  0002017c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001894  20001894  0002017c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002405a  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000487a  00000000  00000000  00044206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001398  00000000  00000000  00048a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011c8  00000000  00000000  00049e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024638  00000000  00000000  0004afe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fa33  00000000  00000000  0006f618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5187  00000000  00000000  0008f04b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001541d2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004fe4  00000000  00000000  00154228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000017c 	.word	0x2000017c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b42c 	.word	0x0800b42c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000180 	.word	0x20000180
 80001c4:	0800b42c 	.word	0x0800b42c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <COMPLEMENTARY_FILTER_Init>:

/* Static function prototype */
static void angle_180(float * x);

void COMPLEMENTARY_FILTER_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	filter.gyro = MPU_Get_Gyro_Ptr();
 80004c4:	f002 fa10 	bl	80028e8 <MPU_Get_Gyro_Ptr>
 80004c8:	4603      	mov	r3, r0
 80004ca:	4a09      	ldr	r2, [pc, #36]	; (80004f0 <COMPLEMENTARY_FILTER_Init+0x30>)
 80004cc:	6013      	str	r3, [r2, #0]
	filter.gyro_raw = NULL;
 80004ce:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <COMPLEMENTARY_FILTER_Init+0x30>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	605a      	str	r2, [r3, #4]
	filter.acc = MPU_Get_Acc_Ptr();
 80004d4:	f002 fa12 	bl	80028fc <MPU_Get_Acc_Ptr>
 80004d8:	4603      	mov	r3, r0
 80004da:	4a05      	ldr	r2, [pc, #20]	; (80004f0 <COMPLEMENTARY_FILTER_Init+0x30>)
 80004dc:	6093      	str	r3, [r2, #8]
	filter.alpha_gyro = ALPHA;
 80004de:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <COMPLEMENTARY_FILTER_Init+0x30>)
 80004e0:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <COMPLEMENTARY_FILTER_Init+0x34>)
 80004e2:	62da      	str	r2, [r3, #44]	; 0x2c
	filter.alpha_acc = 1.0f - ALPHA;
 80004e4:	4b02      	ldr	r3, [pc, #8]	; (80004f0 <COMPLEMENTARY_FILTER_Init+0x30>)
 80004e6:	4a04      	ldr	r2, [pc, #16]	; (80004f8 <COMPLEMENTARY_FILTER_Init+0x38>)
 80004e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	20000000 	.word	0x20000000
 80004f4:	3f7f7cee 	.word	0x3f7f7cee
 80004f8:	3b031200 	.word	0x3b031200

080004fc <COMPLEMENTARY_FILTER_Process>:

void COMPLEMENTARY_FILTER_Process(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af00      	add	r7, sp, #0
	/* Total acceleration */
	float acc_total = filter.acc[0] * filter.acc[0];
 8000502:	4baf      	ldr	r3, [pc, #700]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000504:	689b      	ldr	r3, [r3, #8]
 8000506:	ed93 7a00 	vldr	s14, [r3]
 800050a:	4bad      	ldr	r3, [pc, #692]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800050c:	689b      	ldr	r3, [r3, #8]
 800050e:	edd3 7a00 	vldr	s15, [r3]
 8000512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000516:	edc7 7a05 	vstr	s15, [r7, #20]
	acc_total += filter.acc[1] * filter.acc[1];
 800051a:	4ba9      	ldr	r3, [pc, #676]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800051c:	689b      	ldr	r3, [r3, #8]
 800051e:	3304      	adds	r3, #4
 8000520:	ed93 7a00 	vldr	s14, [r3]
 8000524:	4ba6      	ldr	r3, [pc, #664]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000526:	689b      	ldr	r3, [r3, #8]
 8000528:	3304      	adds	r3, #4
 800052a:	edd3 7a00 	vldr	s15, [r3]
 800052e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000532:	ed97 7a05 	vldr	s14, [r7, #20]
 8000536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800053a:	edc7 7a05 	vstr	s15, [r7, #20]
	acc_total += filter.acc[2] * filter.acc[2];
 800053e:	4ba0      	ldr	r3, [pc, #640]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000540:	689b      	ldr	r3, [r3, #8]
 8000542:	3308      	adds	r3, #8
 8000544:	ed93 7a00 	vldr	s14, [r3]
 8000548:	4b9d      	ldr	r3, [pc, #628]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	3308      	adds	r3, #8
 800054e:	edd3 7a00 	vldr	s15, [r3]
 8000552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000556:	ed97 7a05 	vldr	s14, [r7, #20]
 800055a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800055e:	edc7 7a05 	vstr	s15, [r7, #20]
	acc_total = sqrtf(acc_total);
 8000562:	ed97 0a05 	vldr	s0, [r7, #20]
 8000566:	f00a f921 	bl	800a7ac <sqrtf>
 800056a:	ed87 0a05 	vstr	s0, [r7, #20]

	/* Guess the angles according to the accelerometer and some trigonometry */
	if(acc_total)
 800056e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000572:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800057a:	d06c      	beq.n	8000656 <COMPLEMENTARY_FILTER_Process+0x15a>
	{
		float inv_acc_total = 1.0f / acc_total;
 800057c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000580:	ed97 7a05 	vldr	s14, [r7, #20]
 8000584:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000588:	edc7 7a04 	vstr	s15, [r7, #16]
		if(absolute(filter.acc[axe_eROLL]) < acc_total)
 800058c:	4b8c      	ldr	r3, [pc, #560]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	edd3 7a00 	vldr	s15, [r3]
 8000594:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800059c:	db04      	blt.n	80005a8 <COMPLEMENTARY_FILTER_Process+0xac>
 800059e:	4b88      	ldr	r3, [pc, #544]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80005a0:	689b      	ldr	r3, [r3, #8]
 80005a2:	edd3 7a00 	vldr	s15, [r3]
 80005a6:	e005      	b.n	80005b4 <COMPLEMENTARY_FILTER_Process+0xb8>
 80005a8:	4b85      	ldr	r3, [pc, #532]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	edd3 7a00 	vldr	s15, [r3]
 80005b0:	eef1 7a67 	vneg.f32	s15, s15
 80005b4:	ed97 7a05 	vldr	s14, [r7, #20]
 80005b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005c0:	d516      	bpl.n	80005f0 <COMPLEMENTARY_FILTER_Process+0xf4>
		{
			filter.angle_acc[axe_ePITCH] = 	-asinf(filter.acc[axe_eROLL] * inv_acc_total) * RAD_TO_DEG;
 80005c2:	4b7f      	ldr	r3, [pc, #508]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80005c4:	689b      	ldr	r3, [r3, #8]
 80005c6:	ed93 7a00 	vldr	s14, [r3]
 80005ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80005ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005d2:	eeb0 0a67 	vmov.f32	s0, s15
 80005d6:	f00a f8b7 	bl	800a748 <asinf>
 80005da:	eef0 7a40 	vmov.f32	s15, s0
 80005de:	eef1 7a67 	vneg.f32	s15, s15
 80005e2:	ed9f 7a78 	vldr	s14, [pc, #480]	; 80007c4 <COMPLEMENTARY_FILTER_Process+0x2c8>
 80005e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005ea:	4b75      	ldr	r3, [pc, #468]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80005ec:	edc3 7a07 	vstr	s15, [r3, #28]
		}
		if(absolute(filter.acc[axe_ePITCH]) < acc_total)
 80005f0:	4b73      	ldr	r3, [pc, #460]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	3304      	adds	r3, #4
 80005f6:	edd3 7a00 	vldr	s15, [r3]
 80005fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80005fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000602:	db04      	blt.n	800060e <COMPLEMENTARY_FILTER_Process+0x112>
 8000604:	4b6e      	ldr	r3, [pc, #440]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	edd3 7a01 	vldr	s15, [r3, #4]
 800060c:	e006      	b.n	800061c <COMPLEMENTARY_FILTER_Process+0x120>
 800060e:	4b6c      	ldr	r3, [pc, #432]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000610:	689b      	ldr	r3, [r3, #8]
 8000612:	3304      	adds	r3, #4
 8000614:	edd3 7a00 	vldr	s15, [r3]
 8000618:	eef1 7a67 	vneg.f32	s15, s15
 800061c:	ed97 7a05 	vldr	s14, [r7, #20]
 8000620:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000628:	d515      	bpl.n	8000656 <COMPLEMENTARY_FILTER_Process+0x15a>
		{
			filter.angle_acc[axe_eROLL] = 	asinf(filter.acc[axe_ePITCH] * inv_acc_total) * RAD_TO_DEG;
 800062a:	4b65      	ldr	r3, [pc, #404]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800062c:	689b      	ldr	r3, [r3, #8]
 800062e:	3304      	adds	r3, #4
 8000630:	ed93 7a00 	vldr	s14, [r3]
 8000634:	edd7 7a04 	vldr	s15, [r7, #16]
 8000638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800063c:	eeb0 0a67 	vmov.f32	s0, s15
 8000640:	f00a f882 	bl	800a748 <asinf>
 8000644:	eef0 7a40 	vmov.f32	s15, s0
 8000648:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80007c4 <COMPLEMENTARY_FILTER_Process+0x2c8>
 800064c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000650:	4b5b      	ldr	r3, [pc, #364]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000652:	edc3 7a06 	vstr	s15, [r3, #24]
		}
	}

	if(!filter.used_once)
 8000656:	4b5a      	ldr	r3, [pc, #360]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000658:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800065c:	2b00      	cmp	r3, #0
 800065e:	d110      	bne.n	8000682 <COMPLEMENTARY_FILTER_Process+0x186>
	{
		filter.used_once = TRUE;
 8000660:	4b57      	ldr	r3, [pc, #348]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000662:	2201      	movs	r2, #1
 8000664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		filter.angle[axe_eROLL] = filter.angle_acc[axe_eROLL];
 8000668:	4b55      	ldr	r3, [pc, #340]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	4a54      	ldr	r2, [pc, #336]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800066e:	60d3      	str	r3, [r2, #12]
		filter.angle[axe_ePITCH] = filter.angle_acc[axe_ePITCH];
 8000670:	4b53      	ldr	r3, [pc, #332]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000672:	69db      	ldr	r3, [r3, #28]
 8000674:	4a52      	ldr	r2, [pc, #328]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000676:	6113      	str	r3, [r2, #16]
		filter.angle[axe_eYAW] = 0;
 8000678:	4b51      	ldr	r3, [pc, #324]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800067a:	f04f 0200 	mov.w	r2, #0
 800067e:	615a      	str	r2, [r3, #20]
		/* Finally, the complementary filter */
		filter.angle[axe_eROLL] = filter.alpha_gyro * filter.angle[axe_eROLL] + filter.alpha_acc * filter.angle_acc[axe_eROLL];
		filter.angle[axe_ePITCH] = filter.alpha_gyro * filter.angle[axe_ePITCH] + filter.alpha_acc * filter.angle_acc[axe_ePITCH];
	}

}
 8000680:	e09a      	b.n	80007b8 <COMPLEMENTARY_FILTER_Process+0x2bc>
		float dx = filter.gyro[axe_eROLL] * filter.period;
 8000682:	4b4f      	ldr	r3, [pc, #316]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	ed93 7a00 	vldr	s14, [r3]
 800068a:	4b4d      	ldr	r3, [pc, #308]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800068c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000694:	edc7 7a03 	vstr	s15, [r7, #12]
		float dy = filter.gyro[axe_ePITCH] * filter.period;
 8000698:	4b49      	ldr	r3, [pc, #292]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	3304      	adds	r3, #4
 800069e:	ed93 7a00 	vldr	s14, [r3]
 80006a2:	4b47      	ldr	r3, [pc, #284]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006a4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80006a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006ac:	edc7 7a02 	vstr	s15, [r7, #8]
		float dz = filter.gyro[axe_eYAW] * filter.period;
 80006b0:	4b43      	ldr	r3, [pc, #268]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	3308      	adds	r3, #8
 80006b6:	ed93 7a00 	vldr	s14, [r3]
 80006ba:	4b41      	ldr	r3, [pc, #260]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006bc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80006c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006c4:	edc7 7a01 	vstr	s15, [r7, #4]
		filter.angle[axe_eROLL] += dx;
 80006c8:	4b3d      	ldr	r3, [pc, #244]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006ca:	ed93 7a03 	vldr	s14, [r3, #12]
 80006ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80006d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006d6:	4b3a      	ldr	r3, [pc, #232]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006d8:	edc3 7a03 	vstr	s15, [r3, #12]
		filter.angle[axe_ePITCH] += dy;
 80006dc:	4b38      	ldr	r3, [pc, #224]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006de:	ed93 7a04 	vldr	s14, [r3, #16]
 80006e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80006e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006ea:	4b35      	ldr	r3, [pc, #212]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006ec:	edc3 7a04 	vstr	s15, [r3, #16]
		filter.angle[axe_eYAW] += dz;
 80006f0:	4b33      	ldr	r3, [pc, #204]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006f2:	ed93 7a05 	vldr	s14, [r3, #20]
 80006f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80006fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006fe:	4b30      	ldr	r3, [pc, #192]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000700:	edc3 7a05 	vstr	s15, [r3, #20]
		float sin_dz = sinf(DEG_TO_RAD * dz);
 8000704:	edd7 7a01 	vldr	s15, [r7, #4]
 8000708:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80007c8 <COMPLEMENTARY_FILTER_Process+0x2cc>
 800070c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000710:	eeb0 0a67 	vmov.f32	s0, s15
 8000714:	f009 ffd6 	bl	800a6c4 <sinf>
 8000718:	ed87 0a00 	vstr	s0, [r7]
		filter.angle[axe_eROLL] += sin_dz * filter.angle[axe_ePITCH];
 800071c:	4b28      	ldr	r3, [pc, #160]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800071e:	ed93 7a03 	vldr	s14, [r3, #12]
 8000722:	4b27      	ldr	r3, [pc, #156]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000724:	edd3 6a04 	vldr	s13, [r3, #16]
 8000728:	edd7 7a00 	vldr	s15, [r7]
 800072c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000734:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000736:	edc3 7a03 	vstr	s15, [r3, #12]
		filter.angle[axe_ePITCH] -= sin_dz * filter.angle[axe_eROLL];
 800073a:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800073c:	ed93 7a04 	vldr	s14, [r3, #16]
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000742:	edd3 6a03 	vldr	s13, [r3, #12]
 8000746:	edd7 7a00 	vldr	s15, [r7]
 800074a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800074e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000752:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000754:	edc3 7a04 	vstr	s15, [r3, #16]
		angle_180(&filter.angle[axe_eROLL]);
 8000758:	481c      	ldr	r0, [pc, #112]	; (80007cc <COMPLEMENTARY_FILTER_Process+0x2d0>)
 800075a:	f000 f845 	bl	80007e8 <angle_180>
		angle_180(&filter.angle[axe_ePITCH]);
 800075e:	481c      	ldr	r0, [pc, #112]	; (80007d0 <COMPLEMENTARY_FILTER_Process+0x2d4>)
 8000760:	f000 f842 	bl	80007e8 <angle_180>
		filter.angle[axe_eROLL] = filter.alpha_gyro * filter.angle[axe_eROLL] + filter.alpha_acc * filter.angle_acc[axe_eROLL];
 8000764:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000766:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800076c:	edd3 7a03 	vldr	s15, [r3, #12]
 8000770:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000776:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800077c:	edd3 7a06 	vldr	s15, [r3, #24]
 8000780:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000784:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000788:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800078a:	edc3 7a03 	vstr	s15, [r3, #12]
		filter.angle[axe_ePITCH] = filter.alpha_gyro * filter.angle[axe_ePITCH] + filter.alpha_acc * filter.angle_acc[axe_ePITCH];
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000790:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000794:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000796:	edd3 7a04 	vldr	s15, [r3, #16]
 800079a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80007a0:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80007a6:	edd3 7a07 	vldr	s15, [r3, #28]
 80007aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007b2:	4b03      	ldr	r3, [pc, #12]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80007b4:	edc3 7a04 	vstr	s15, [r3, #16]
}
 80007b8:	bf00      	nop
 80007ba:	3718      	adds	r7, #24
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000000 	.word	0x20000000
 80007c4:	42652ee1 	.word	0x42652ee1
 80007c8:	3c8efa34 	.word	0x3c8efa34
 80007cc:	2000000c 	.word	0x2000000c
 80007d0:	20000010 	.word	0x20000010

080007d4 <COMPLEMENTARY_FILTER_Get_Angles>:

float * COMPLEMENTARY_FILTER_Get_Angles(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
	return filter.angle;
 80007d8:	4b02      	ldr	r3, [pc, #8]	; (80007e4 <COMPLEMENTARY_FILTER_Get_Angles+0x10>)
}
 80007da:	4618      	mov	r0, r3
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	2000000c 	.word	0x2000000c

080007e8 <angle_180>:
{
	return filter.angle_acc;
}

static void angle_180(float * x)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	if(*x > 180)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	edd3 7a00 	vldr	s15, [r3]
 80007f6:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000850 <angle_180+0x68>
 80007fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000802:	dd0a      	ble.n	800081a <angle_180+0x32>
	{
		*x -= 360;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	edd3 7a00 	vldr	s15, [r3]
 800080a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000854 <angle_180+0x6c>
 800080e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	edc3 7a00 	vstr	s15, [r3]
	}
	else if( *x < -180)
	{
		*x += 360 ;
	}
}
 8000818:	e014      	b.n	8000844 <angle_180+0x5c>
	else if( *x < -180)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	edd3 7a00 	vldr	s15, [r3]
 8000820:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000858 <angle_180+0x70>
 8000824:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800082c:	d400      	bmi.n	8000830 <angle_180+0x48>
}
 800082e:	e009      	b.n	8000844 <angle_180+0x5c>
		*x += 360 ;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	edd3 7a00 	vldr	s15, [r3]
 8000836:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000854 <angle_180+0x6c>
 800083a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	edc3 7a00 	vstr	s15, [r3]
}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	43340000 	.word	0x43340000
 8000854:	43b40000 	.word	0x43b40000
 8000858:	c3340000 	.word	0xc3340000

0800085c <CONTROLLER_Init>:
		.angle_kp = 			{5.0f, 		5.0f, 		0},
		.angle_speed_kp = 		{0.8f, 		0.8f, 		1.2f},
};

void CONTROLLER_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	controller.angle = COMPLEMENTARY_FILTER_Get_Angles();
 8000860:	f7ff ffb8 	bl	80007d4 <COMPLEMENTARY_FILTER_Get_Angles>
 8000864:	4603      	mov	r3, r0
 8000866:	4a09      	ldr	r2, [pc, #36]	; (800088c <CONTROLLER_Init+0x30>)
 8000868:	6013      	str	r3, [r2, #0]
	controller.angle_speed = MPU_Get_Gyro_Ptr();
 800086a:	f002 f83d 	bl	80028e8 <MPU_Get_Gyro_Ptr>
 800086e:	4603      	mov	r3, r0
 8000870:	4a06      	ldr	r2, [pc, #24]	; (800088c <CONTROLLER_Init+0x30>)
 8000872:	6293      	str	r3, [r2, #40]	; 0x28
	controller.output = MOTOR_MIXER_Get_Angle_Input_Ptr();
 8000874:	f001 f8ea 	bl	8001a4c <MOTOR_MIXER_Get_Angle_Input_Ptr>
 8000878:	4603      	mov	r3, r0
 800087a:	4a04      	ldr	r2, [pc, #16]	; (800088c <CONTROLLER_Init+0x30>)
 800087c:	6513      	str	r3, [r2, #80]	; 0x50

	controller.state = controller_state_eDISABLED;
 800087e:	4b03      	ldr	r3, [pc, #12]	; (800088c <CONTROLLER_Init+0x30>)
 8000880:	2200      	movs	r2, #0
 8000882:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000038 	.word	0x20000038

08000890 <CONTROLLER_Process>:

void CONTROLLER_Process(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
	if(controller.new_state != controller.state)
 8000894:	4b55      	ldr	r3, [pc, #340]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000896:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 800089a:	4b54      	ldr	r3, [pc, #336]	; (80009ec <CONTROLLER_Process+0x15c>)
 800089c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d005      	beq.n	80008b0 <CONTROLLER_Process+0x20>
	{
		controller.state = controller.new_state;
 80008a4:	4b51      	ldr	r3, [pc, #324]	; (80009ec <CONTROLLER_Process+0x15c>)
 80008a6:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 80008aa:	4b50      	ldr	r3, [pc, #320]	; (80009ec <CONTROLLER_Process+0x15c>)
 80008ac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	}
	if(controller.state)
 80008b0:	4b4e      	ldr	r3, [pc, #312]	; (80009ec <CONTROLLER_Process+0x15c>)
 80008b2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	f000 8081 	beq.w	80009be <CONTROLLER_Process+0x12e>
	{
		/* A first PID to correct angle errors when we are in angle mode */
		if(controller.state == controller_state_eANGLE)
 80008bc:	4b4b      	ldr	r3, [pc, #300]	; (80009ec <CONTROLLER_Process+0x15c>)
 80008be:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80008c2:	2b02      	cmp	r3, #2
 80008c4:	d12e      	bne.n	8000924 <CONTROLLER_Process+0x94>
		{
			/* Compute angle errors */
			controller.angle_error[axe_eROLL] = controller.target_angle[axe_eROLL] - controller.angle[axe_eROLL];
 80008c6:	4b49      	ldr	r3, [pc, #292]	; (80009ec <CONTROLLER_Process+0x15c>)
 80008c8:	ed93 7a01 	vldr	s14, [r3, #4]
 80008cc:	4b47      	ldr	r3, [pc, #284]	; (80009ec <CONTROLLER_Process+0x15c>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	edd3 7a00 	vldr	s15, [r3]
 80008d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008d8:	4b44      	ldr	r3, [pc, #272]	; (80009ec <CONTROLLER_Process+0x15c>)
 80008da:	edc3 7a04 	vstr	s15, [r3, #16]
			controller.angle_error[axe_ePITCH] = controller.target_angle[axe_ePITCH] - controller.angle[axe_ePITCH];
 80008de:	4b43      	ldr	r3, [pc, #268]	; (80009ec <CONTROLLER_Process+0x15c>)
 80008e0:	ed93 7a02 	vldr	s14, [r3, #8]
 80008e4:	4b41      	ldr	r3, [pc, #260]	; (80009ec <CONTROLLER_Process+0x15c>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	3304      	adds	r3, #4
 80008ea:	edd3 7a00 	vldr	s15, [r3]
 80008ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008f2:	4b3e      	ldr	r3, [pc, #248]	; (80009ec <CONTROLLER_Process+0x15c>)
 80008f4:	edc3 7a05 	vstr	s15, [r3, #20]
			/* Handle angle continuity at -PI and + PI */
			//TODO ASAP
			/* Compute PID on angles */
			controller.target_angle_speed[axe_eROLL] = controller.angle_kp[axe_eROLL] * controller.angle_error[axe_eROLL];
 80008f8:	4b3c      	ldr	r3, [pc, #240]	; (80009ec <CONTROLLER_Process+0x15c>)
 80008fa:	ed93 7a07 	vldr	s14, [r3, #28]
 80008fe:	4b3b      	ldr	r3, [pc, #236]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000900:	edd3 7a04 	vldr	s15, [r3, #16]
 8000904:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000908:	4b38      	ldr	r3, [pc, #224]	; (80009ec <CONTROLLER_Process+0x15c>)
 800090a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			controller.target_angle_speed[axe_ePITCH] = controller.angle_kp[axe_ePITCH] * controller.angle_error[axe_ePITCH];
 800090e:	4b37      	ldr	r3, [pc, #220]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000910:	ed93 7a08 	vldr	s14, [r3, #32]
 8000914:	4b35      	ldr	r3, [pc, #212]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000916:	edd3 7a05 	vldr	s15, [r3, #20]
 800091a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800091e:	4b33      	ldr	r3, [pc, #204]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000920:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		}
		/* Angular speed regulation */
		/* First thing first, errors */
		controller.angle_speed_error[axe_eROLL] = controller.target_angle_speed[axe_eROLL] - controller.angle_speed[axe_eROLL];
 8000924:	4b31      	ldr	r3, [pc, #196]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000926:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800092a:	4b30      	ldr	r3, [pc, #192]	; (80009ec <CONTROLLER_Process+0x15c>)
 800092c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800092e:	edd3 7a00 	vldr	s15, [r3]
 8000932:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000936:	4b2d      	ldr	r3, [pc, #180]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000938:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		controller.angle_speed_error[axe_ePITCH] = controller.target_angle_speed[axe_ePITCH] - controller.angle_speed[axe_ePITCH];
 800093c:	4b2b      	ldr	r3, [pc, #172]	; (80009ec <CONTROLLER_Process+0x15c>)
 800093e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000942:	4b2a      	ldr	r3, [pc, #168]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000946:	3304      	adds	r3, #4
 8000948:	edd3 7a00 	vldr	s15, [r3]
 800094c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000950:	4b26      	ldr	r3, [pc, #152]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000952:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		controller.angle_speed_error[axe_eYAW] = controller.target_angle_speed[axe_eYAW] - controller.angle_speed[axe_eYAW];
 8000956:	4b25      	ldr	r3, [pc, #148]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000958:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800095c:	4b23      	ldr	r3, [pc, #140]	; (80009ec <CONTROLLER_Process+0x15c>)
 800095e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000960:	3308      	adds	r3, #8
 8000962:	edd3 7a00 	vldr	s15, [r3]
 8000966:	ee77 7a67 	vsub.f32	s15, s14, s15
 800096a:	4b20      	ldr	r3, [pc, #128]	; (80009ec <CONTROLLER_Process+0x15c>)
 800096c:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

		/* Now, PID's time ! */
		controller.output[axe_eROLL] = controller.angle_speed_error[axe_eROLL] * controller.angle_speed_kp[axe_eROLL];
 8000970:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000972:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8000976:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000978:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800097c:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <CONTROLLER_Process+0x15c>)
 800097e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000980:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000984:	edc3 7a00 	vstr	s15, [r3]
		controller.output[axe_ePITCH] = controller.angle_speed_error[axe_ePITCH] * controller.angle_speed_kp[axe_ePITCH];
 8000988:	4b18      	ldr	r3, [pc, #96]	; (80009ec <CONTROLLER_Process+0x15c>)
 800098a:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800098e:	4b17      	ldr	r3, [pc, #92]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000990:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8000994:	4b15      	ldr	r3, [pc, #84]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000998:	3304      	adds	r3, #4
 800099a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800099e:	edc3 7a00 	vstr	s15, [r3]
		controller.output[axe_eYAW] = controller.angle_speed_error[axe_eYAW] * controller.angle_speed_kp[axe_eYAW];
 80009a2:	4b12      	ldr	r3, [pc, #72]	; (80009ec <CONTROLLER_Process+0x15c>)
 80009a4:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80009a8:	4b10      	ldr	r3, [pc, #64]	; (80009ec <CONTROLLER_Process+0x15c>)
 80009aa:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80009ae:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <CONTROLLER_Process+0x15c>)
 80009b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009b2:	3308      	adds	r3, #8
 80009b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009b8:	edc3 7a00 	vstr	s15, [r3]
	{
		controller.output[axe_eROLL] = 0;
		controller.output[axe_ePITCH] = 0;
		controller.output[axe_eYAW] = 0;
	}
}
 80009bc:	e010      	b.n	80009e0 <CONTROLLER_Process+0x150>
		controller.output[axe_eROLL] = 0;
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <CONTROLLER_Process+0x15c>)
 80009c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009c2:	f04f 0200 	mov.w	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
		controller.output[axe_ePITCH] = 0;
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <CONTROLLER_Process+0x15c>)
 80009ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009cc:	3304      	adds	r3, #4
 80009ce:	f04f 0200 	mov.w	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
		controller.output[axe_eYAW] = 0;
 80009d4:	4b05      	ldr	r3, [pc, #20]	; (80009ec <CONTROLLER_Process+0x15c>)
 80009d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009d8:	3308      	adds	r3, #8
 80009da:	f04f 0200 	mov.w	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	20000038 	.word	0x20000038

080009f0 <CONTROLLER_Set_State>:

void CONTROLLER_Set_State(controller_state_e new_state)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	71fb      	strb	r3, [r7, #7]
	controller.new_state = new_state;
 80009fa:	4a05      	ldr	r2, [pc, #20]	; (8000a10 <CONTROLLER_Set_State+0x20>)
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	20000038 	.word	0x20000038

08000a14 <CONTROLLER_Get_Angle_Target>:

float * CONTROLLER_Get_Angle_Target(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
	return controller.target_angle;
 8000a18:	4b02      	ldr	r3, [pc, #8]	; (8000a24 <CONTROLLER_Get_Angle_Target+0x10>)
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	2000003c 	.word	0x2000003c

08000a28 <CONTROLLER_Get_Angle_Speed_Target>:

float * CONTROLLER_Get_Angle_Speed_Target(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
	return controller.target_angle_speed;
 8000a2c:	4b02      	ldr	r3, [pc, #8]	; (8000a38 <CONTROLLER_Get_Angle_Speed_Target+0x10>)
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	20000064 	.word	0x20000064

08000a3c <DATA_LOGGER_Init>:
/*
 * @brief Declare every data
 * @param mark1_ pointer to a system_t structure
 */
void DATA_LOGGER_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
	/* Retrieve structure from modules */
	float * gyro = MPU_Get_Gyro_Ptr();
 8000a42:	f001 ff51 	bl	80028e8 <MPU_Get_Gyro_Ptr>
 8000a46:	60f8      	str	r0, [r7, #12]
	float * acc = MPU_Get_Acc_Ptr();
 8000a48:	f001 ff58 	bl	80028fc <MPU_Get_Acc_Ptr>
 8000a4c:	60b8      	str	r0, [r7, #8]
	float * angle = COMPLEMENTARY_FILTER_Get_Angles();
 8000a4e:	f7ff fec1 	bl	80007d4 <COMPLEMENTARY_FILTER_Get_Angles>
 8000a52:	6078      	str	r0, [r7, #4]

	/* -------------- Outputs ----------------- */
	DEFINE_DATA(data_id_eANGLE_ROLL,			(void*)&angle[axe_eROLL],	data_format_e16B_FLOAT_2D,		"Angle Roll",		use_format_eAS_OUTPUT);
 8000a54:	4b8b      	ldr	r3, [pc, #556]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000a56:	2203      	movs	r2, #3
 8000a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000a5c:	4a89      	ldr	r2, [pc, #548]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6413      	str	r3, [r2, #64]	; 0x40
 8000a62:	4b88      	ldr	r3, [pc, #544]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000a64:	222a      	movs	r2, #42	; 0x2a
 8000a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000a6a:	4b86      	ldr	r3, [pc, #536]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000a6c:	4a86      	ldr	r2, [pc, #536]	; (8000c88 <DATA_LOGGER_Init+0x24c>)
 8000a6e:	649a      	str	r2, [r3, #72]	; 0x48
 8000a70:	4b84      	ldr	r3, [pc, #528]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000a72:	220a      	movs	r2, #10
 8000a74:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8000a78:	4b82      	ldr	r3, [pc, #520]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	DEFINE_DATA(data_id_eANGLE_PITCH,			(void*)&angle[axe_ePITCH],	data_format_e16B_FLOAT_2D,		"Angle Pitch",		use_format_eAS_OUTPUT);
 8000a80:	4b80      	ldr	r3, [pc, #512]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000a82:	2204      	movs	r2, #4
 8000a84:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3304      	adds	r3, #4
 8000a8c:	4a7d      	ldr	r2, [pc, #500]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000a8e:	6553      	str	r3, [r2, #84]	; 0x54
 8000a90:	4b7c      	ldr	r3, [pc, #496]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000a92:	222a      	movs	r2, #42	; 0x2a
 8000a94:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8000a98:	4b7a      	ldr	r3, [pc, #488]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000a9a:	4a7c      	ldr	r2, [pc, #496]	; (8000c8c <DATA_LOGGER_Init+0x250>)
 8000a9c:	65da      	str	r2, [r3, #92]	; 0x5c
 8000a9e:	4b79      	ldr	r3, [pc, #484]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000aa0:	220b      	movs	r2, #11
 8000aa2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8000aa6:	4b77      	ldr	r3, [pc, #476]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	DEFINE_DATA(data_id_eANGLE_YAW,				(void*)&angle[axe_eYAW],	data_format_e16B_FLOAT_2D,		"Angle Yaw",		use_format_eAS_OUTPUT);
 8000aae:	4b75      	ldr	r3, [pc, #468]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000ab0:	2205      	movs	r2, #5
 8000ab2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	3308      	adds	r3, #8
 8000aba:	4a72      	ldr	r2, [pc, #456]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000abc:	6693      	str	r3, [r2, #104]	; 0x68
 8000abe:	4b71      	ldr	r3, [pc, #452]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000ac0:	222a      	movs	r2, #42	; 0x2a
 8000ac2:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
 8000ac6:	4b6f      	ldr	r3, [pc, #444]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000ac8:	4a71      	ldr	r2, [pc, #452]	; (8000c90 <DATA_LOGGER_Init+0x254>)
 8000aca:	671a      	str	r2, [r3, #112]	; 0x70
 8000acc:	4b6d      	ldr	r3, [pc, #436]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000ace:	2209      	movs	r2, #9
 8000ad0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8000ad4:	4b6b      	ldr	r3, [pc, #428]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	DEFINE_DATA(data_id_eGYRO_ROLL,				(void*)&gyro[axe_eROLL],	data_format_e16B_FLOAT_2D,		"Gyro Roll",		use_format_eAS_OUTPUT);
 8000adc:	4b69      	ldr	r3, [pc, #420]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000ade:	2206      	movs	r2, #6
 8000ae0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8000ae4:	4a67      	ldr	r2, [pc, #412]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	67d3      	str	r3, [r2, #124]	; 0x7c
 8000aea:	4b66      	ldr	r3, [pc, #408]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000aec:	222a      	movs	r2, #42	; 0x2a
 8000aee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 8000af2:	4b64      	ldr	r3, [pc, #400]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000af4:	4a67      	ldr	r2, [pc, #412]	; (8000c94 <DATA_LOGGER_Init+0x258>)
 8000af6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8000afa:	4b62      	ldr	r3, [pc, #392]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000afc:	2209      	movs	r2, #9
 8000afe:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8000b02:	4b60      	ldr	r3, [pc, #384]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
	DEFINE_DATA(data_id_eGYRO_PITCH,			(void*)&gyro[axe_ePITCH],	data_format_e16B_FLOAT_2D,		"Gyro Pitch",		use_format_eAS_OUTPUT);
 8000b0a:	4b5e      	ldr	r3, [pc, #376]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000b0c:	2207      	movs	r2, #7
 8000b0e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	3304      	adds	r3, #4
 8000b16:	4a5b      	ldr	r2, [pc, #364]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000b18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000b1c:	4b59      	ldr	r3, [pc, #356]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000b1e:	222a      	movs	r2, #42	; 0x2a
 8000b20:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8000b24:	4b57      	ldr	r3, [pc, #348]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000b26:	4a5c      	ldr	r2, [pc, #368]	; (8000c98 <DATA_LOGGER_Init+0x25c>)
 8000b28:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8000b2c:	4b55      	ldr	r3, [pc, #340]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000b2e:	220a      	movs	r2, #10
 8000b30:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8000b34:	4b53      	ldr	r3, [pc, #332]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	DEFINE_DATA(data_id_eGYRO_YAW,				(void*)&gyro[axe_eYAW],		data_format_e16B_FLOAT_2D,		"Gyro Yaw",			use_format_eAS_OUTPUT);
 8000b3c:	4b51      	ldr	r3, [pc, #324]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000b3e:	2208      	movs	r2, #8
 8000b40:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	3308      	adds	r3, #8
 8000b48:	4a4e      	ldr	r2, [pc, #312]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000b4a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000b4e:	4b4d      	ldr	r3, [pc, #308]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000b50:	222a      	movs	r2, #42	; 0x2a
 8000b52:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 8000b56:	4b4b      	ldr	r3, [pc, #300]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000b58:	4a50      	ldr	r2, [pc, #320]	; (8000c9c <DATA_LOGGER_Init+0x260>)
 8000b5a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8000b5e:	4b49      	ldr	r3, [pc, #292]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000b60:	2208      	movs	r2, #8
 8000b62:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 8000b66:	4b47      	ldr	r3, [pc, #284]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	DEFINE_DATA(data_id_eACC_ROLL,				(void*)&acc[axe_eROLL],		data_format_e16B_FLOAT_2D,		"Acc Roll",			use_format_eNOT_USED);
 8000b6e:	4b45      	ldr	r3, [pc, #276]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000b70:	220c      	movs	r2, #12
 8000b72:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
 8000b76:	4a43      	ldr	r2, [pc, #268]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b7e:	4b41      	ldr	r3, [pc, #260]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000b80:	222a      	movs	r2, #42	; 0x2a
 8000b82:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
 8000b86:	4b3f      	ldr	r3, [pc, #252]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000b88:	4a45      	ldr	r2, [pc, #276]	; (8000ca0 <DATA_LOGGER_Init+0x264>)
 8000b8a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 8000b8e:	4b3d      	ldr	r3, [pc, #244]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000b90:	2208      	movs	r2, #8
 8000b92:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8000b96:	4b3b      	ldr	r3, [pc, #236]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
	DEFINE_DATA(data_id_eACC_PITCH,				(void*)&acc[axe_ePITCH],	data_format_e16B_FLOAT_2D,		"Acc Pitch",		use_format_eNOT_USED);
 8000b9e:	4b39      	ldr	r3, [pc, #228]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000ba0:	220d      	movs	r2, #13
 8000ba2:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	3304      	adds	r3, #4
 8000baa:	4a36      	ldr	r2, [pc, #216]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000bac:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
 8000bb0:	4b34      	ldr	r3, [pc, #208]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000bb2:	222a      	movs	r2, #42	; 0x2a
 8000bb4:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
 8000bb8:	4b32      	ldr	r3, [pc, #200]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000bba:	4a3a      	ldr	r2, [pc, #232]	; (8000ca4 <DATA_LOGGER_Init+0x268>)
 8000bbc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8000bc0:	4b30      	ldr	r3, [pc, #192]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000bc2:	2209      	movs	r2, #9
 8000bc4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 8000bc8:	4b2e      	ldr	r3, [pc, #184]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
	DEFINE_DATA(data_id_eACC_YAW,				(void*)&acc[axe_eYAW],		data_format_e16B_FLOAT_2D,		"Acc Yaw",			use_format_eNOT_USED);
 8000bd0:	4b2c      	ldr	r3, [pc, #176]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000bd2:	220e      	movs	r2, #14
 8000bd4:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	3308      	adds	r3, #8
 8000bdc:	4a29      	ldr	r2, [pc, #164]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000bde:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
 8000be2:	4b28      	ldr	r3, [pc, #160]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000be4:	222a      	movs	r2, #42	; 0x2a
 8000be6:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
 8000bea:	4b26      	ldr	r3, [pc, #152]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000bec:	4a2e      	ldr	r2, [pc, #184]	; (8000ca8 <DATA_LOGGER_Init+0x26c>)
 8000bee:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 8000bf2:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000bf4:	2207      	movs	r2, #7
 8000bf6:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 8000bfa:	4b22      	ldr	r3, [pc, #136]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129

	/* -------------- Inputs ----------------- */
	DEFINE_DATA(data_id_eCONFIG_REQUEST,		NULL,	data_format_e0B_BUTTON,		"Send Configuration",	use_format_eAS_INPUT);
 8000c02:	4b20      	ldr	r3, [pc, #128]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	721a      	strb	r2, [r3, #8]
 8000c08:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	725a      	strb	r2, [r3, #9]
 8000c14:	4b1b      	ldr	r3, [pc, #108]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000c16:	4a25      	ldr	r2, [pc, #148]	; (8000cac <DATA_LOGGER_Init+0x270>)
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000c1c:	2212      	movs	r2, #18
 8000c1e:	741a      	strb	r2, [r3, #16]
 8000c20:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000c22:	2202      	movs	r2, #2
 8000c24:	745a      	strb	r2, [r3, #17]
	DEFINE_DATA(data_id_eSTART_TRANSFER,		NULL,	data_format_e0B_BUTTON,		"Start Transfer",		use_format_eAS_INPUT);
 8000c26:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	771a      	strb	r2, [r3, #28]
 8000c2c:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	619a      	str	r2, [r3, #24]
 8000c32:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	775a      	strb	r2, [r3, #29]
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000c3a:	4a1d      	ldr	r2, [pc, #116]	; (8000cb0 <DATA_LOGGER_Init+0x274>)
 8000c3c:	621a      	str	r2, [r3, #32]
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000c40:	220e      	movs	r2, #14
 8000c42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000c46:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000c48:	2202      	movs	r2, #2
 8000c4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	DEFINE_DATA(data_id_eSTOP_TRANSFER,			NULL,	data_format_e0B_BUTTON,		"Stop Transfer",		use_format_eAS_INPUT);
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000c50:	2202      	movs	r2, #2
 8000c52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000c66:	4a13      	ldr	r2, [pc, #76]	; (8000cb4 <DATA_LOGGER_Init+0x278>)
 8000c68:	635a      	str	r2, [r3, #52]	; 0x34
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000c6c:	220d      	movs	r2, #13
 8000c6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8000c72:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <DATA_LOGGER_Init+0x248>)
 8000c74:	2202      	movs	r2, #2
 8000c76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8000c7a:	bf00      	nop
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000198 	.word	0x20000198
 8000c88:	0800b444 	.word	0x0800b444
 8000c8c:	0800b450 	.word	0x0800b450
 8000c90:	0800b45c 	.word	0x0800b45c
 8000c94:	0800b468 	.word	0x0800b468
 8000c98:	0800b474 	.word	0x0800b474
 8000c9c:	0800b480 	.word	0x0800b480
 8000ca0:	0800b48c 	.word	0x0800b48c
 8000ca4:	0800b498 	.word	0x0800b498
 8000ca8:	0800b4a4 	.word	0x0800b4a4
 8000cac:	0800b4ac 	.word	0x0800b4ac
 8000cb0:	0800b4c0 	.word	0x0800b4c0
 8000cb4:	0800b4d0 	.word	0x0800b4d0

08000cb8 <DATA_LOGGER_Start>:
/*
 * @brief Request to start logging data
 */
void DATA_LOGGER_Start()
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
	start_flag = TRUE;
 8000cbc:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <DATA_LOGGER_Start+0x14>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	701a      	strb	r2, [r3, #0]
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	200002c4 	.word	0x200002c4

08000cd0 <DATA_LOGGER_Stop>:
/*
 * @brief Request to stop logging data
 */
void DATA_LOGGER_Stop()
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
	stop_flag = TRUE;
 8000cd4:	4b03      	ldr	r3, [pc, #12]	; (8000ce4 <DATA_LOGGER_Stop+0x14>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	701a      	strb	r2, [r3, #0]
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	200002c6 	.word	0x200002c6

08000ce8 <DATA_LOGGER_Main>:

/*
 * @brief Call the state machine and the uart parser
 */
void DATA_LOGGER_Main(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
	state_machine();
 8000cec:	f000 fab0 	bl	8001250 <state_machine>
	parse_uart();
 8000cf0:	f000 fbc0 	bl	8001474 <parse_uart>
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <DATA_LOGGER_Reception>:
/*
 * @brief Parse input data
 * @param input_buffer Buffer to use to parse the data
 */
void DATA_LOGGER_Reception(uint8_t * input_buffer)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
	uint8_t id = input_buffer[0];
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp_uint_16 = 0 ;
 8000d06:	2300      	movs	r3, #0
 8000d08:	81bb      	strh	r3, [r7, #12]
	int16_t tmp_int_16 = 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	817b      	strh	r3, [r7, #10]
	switch(data_list[id].format)
 8000d0e:	7bfa      	ldrb	r2, [r7, #15]
 8000d10:	4954      	ldr	r1, [pc, #336]	; (8000e64 <DATA_LOGGER_Reception+0x16c>)
 8000d12:	4613      	mov	r3, r2
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	4413      	add	r3, r2
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	440b      	add	r3, r1
 8000d1c:	3309      	adds	r3, #9
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b2d      	cmp	r3, #45	; 0x2d
 8000d22:	f200 809a 	bhi.w	8000e5a <DATA_LOGGER_Reception+0x162>
 8000d26:	a201      	add	r2, pc, #4	; (adr r2, 8000d2c <DATA_LOGGER_Reception+0x34>)
 8000d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d2c:	08000de5 	.word	0x08000de5
 8000d30:	08000e5b 	.word	0x08000e5b
 8000d34:	08000e5b 	.word	0x08000e5b
 8000d38:	08000e5b 	.word	0x08000e5b
 8000d3c:	08000e5b 	.word	0x08000e5b
 8000d40:	08000e5b 	.word	0x08000e5b
 8000d44:	08000e5b 	.word	0x08000e5b
 8000d48:	08000e5b 	.word	0x08000e5b
 8000d4c:	08000e5b 	.word	0x08000e5b
 8000d50:	08000e5b 	.word	0x08000e5b
 8000d54:	08000e5b 	.word	0x08000e5b
 8000d58:	08000e5b 	.word	0x08000e5b
 8000d5c:	08000e5b 	.word	0x08000e5b
 8000d60:	08000e5b 	.word	0x08000e5b
 8000d64:	08000e5b 	.word	0x08000e5b
 8000d68:	08000e5b 	.word	0x08000e5b
 8000d6c:	08000e5b 	.word	0x08000e5b
 8000d70:	08000e5b 	.word	0x08000e5b
 8000d74:	08000e5b 	.word	0x08000e5b
 8000d78:	08000e5b 	.word	0x08000e5b
 8000d7c:	08000e5b 	.word	0x08000e5b
 8000d80:	08000e11 	.word	0x08000e11
 8000d84:	08000e5b 	.word	0x08000e5b
 8000d88:	08000e5b 	.word	0x08000e5b
 8000d8c:	08000e5b 	.word	0x08000e5b
 8000d90:	08000e5b 	.word	0x08000e5b
 8000d94:	08000e5b 	.word	0x08000e5b
 8000d98:	08000e5b 	.word	0x08000e5b
 8000d9c:	08000e5b 	.word	0x08000e5b
 8000da0:	08000e5b 	.word	0x08000e5b
 8000da4:	08000e5b 	.word	0x08000e5b
 8000da8:	08000e5b 	.word	0x08000e5b
 8000dac:	08000e5b 	.word	0x08000e5b
 8000db0:	08000e5b 	.word	0x08000e5b
 8000db4:	08000e5b 	.word	0x08000e5b
 8000db8:	08000e5b 	.word	0x08000e5b
 8000dbc:	08000e5b 	.word	0x08000e5b
 8000dc0:	08000e5b 	.word	0x08000e5b
 8000dc4:	08000e5b 	.word	0x08000e5b
 8000dc8:	08000e5b 	.word	0x08000e5b
 8000dcc:	08000e5b 	.word	0x08000e5b
 8000dd0:	08000e5b 	.word	0x08000e5b
 8000dd4:	08000e5b 	.word	0x08000e5b
 8000dd8:	08000e5b 	.word	0x08000e5b
 8000ddc:	08000e3d 	.word	0x08000e3d
 8000de0:	08000e1f 	.word	0x08000e1f
	{
		case data_format_e0B_BUTTON:
			/* Link an action to each id */
			switch(id)
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d00d      	beq.n	8000e06 <DATA_LOGGER_Reception+0x10e>
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	dc0e      	bgt.n	8000e0c <DATA_LOGGER_Reception+0x114>
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d002      	beq.n	8000df8 <DATA_LOGGER_Reception+0x100>
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d004      	beq.n	8000e00 <DATA_LOGGER_Reception+0x108>
			{
				default:
					break;
 8000df6:	e009      	b.n	8000e0c <DATA_LOGGER_Reception+0x114>
				case data_id_eCONFIG_REQUEST:
					send_config_flag = TRUE;
 8000df8:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <DATA_LOGGER_Reception+0x170>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	701a      	strb	r2, [r3, #0]
					break;
 8000dfe:	e006      	b.n	8000e0e <DATA_LOGGER_Reception+0x116>
				case data_id_eSTART_TRANSFER:
					DATA_LOGGER_Start();
 8000e00:	f7ff ff5a 	bl	8000cb8 <DATA_LOGGER_Start>
					break;
 8000e04:	e003      	b.n	8000e0e <DATA_LOGGER_Reception+0x116>
				case data_id_eSTOP_TRANSFER:
					DATA_LOGGER_Stop();
 8000e06:	f7ff ff63 	bl	8000cd0 <DATA_LOGGER_Stop>
					break;
 8000e0a:	e000      	b.n	8000e0e <DATA_LOGGER_Reception+0x116>
					break;
 8000e0c:	bf00      	nop
			}
			break;
 8000e0e:	e025      	b.n	8000e5c <DATA_LOGGER_Reception+0x164>
		case data_format_e8B_FLOAT_0D:
			break;
		case data_format_e8B_FLOAT_1D:
			break;
		case data_format_e8B_PWM:
			tmp_uint_16 = 4*input_buffer[1];
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3301      	adds	r3, #1
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	81bb      	strh	r3, [r7, #12]
			break;
 8000e1c:	e01e      	b.n	8000e5c <DATA_LOGGER_Reception+0x164>
		case data_format_e16B_INT16:
			tmp_int_16 = (int16_t)input_buffer[1] << 8;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	3301      	adds	r3, #1
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	021b      	lsls	r3, r3, #8
 8000e26:	817b      	strh	r3, [r7, #10]
			tmp_int_16 += (int16_t)input_buffer[2];
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3302      	adds	r3, #2
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	897b      	ldrh	r3, [r7, #10]
 8000e32:	4413      	add	r3, r2
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	817b      	strh	r3, [r7, #10]
			switch(id)
			{
				default:
					break;
 8000e38:	bf00      	nop
			}

			break;
 8000e3a:	e00f      	b.n	8000e5c <DATA_LOGGER_Reception+0x164>
		case data_format_e16B_UINT16:
			tmp_uint_16 = (uint16_t)input_buffer[1] << 8;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	021b      	lsls	r3, r3, #8
 8000e46:	81bb      	strh	r3, [r7, #12]
			tmp_uint_16 += (uint16_t)input_buffer[2];
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3302      	adds	r3, #2
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	89bb      	ldrh	r3, [r7, #12]
 8000e52:	4413      	add	r3, r2
 8000e54:	81bb      	strh	r3, [r7, #12]
			switch(id)
			{
				default:
					break;
 8000e56:	bf00      	nop
			}

		case data_format_e16B_FLOAT_1D:
			break;
 8000e58:	e000      	b.n	8000e5c <DATA_LOGGER_Reception+0x164>
		default:
			break;
 8000e5a:	bf00      	nop

	}
}
 8000e5c:	bf00      	nop
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000198 	.word	0x20000198
 8000e68:	200002c5 	.word	0x200002c5

08000e6c <DATA_LOGGER_Get_Data_Value>:
 * @param id Id of the data
 * @param buffer Buffer array
 * @return Number of bytes written
 */
uint8_t DATA_LOGGER_Get_Data_Value(data_id_e id, uint8_t * buffer)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b087      	sub	sp, #28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	73fb      	strb	r3, [r7, #15]

	/* Local temporary variables */
	int16_t tmp_16 = 0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	82fb      	strh	r3, [r7, #22]
	float tmp_float = 0;
 8000e7c:	f04f 0300 	mov.w	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]

	/* First byte is reserved for the id */
	buffer[0] = id ;
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	7bfa      	ldrb	r2, [r7, #15]
 8000e86:	701a      	strb	r2, [r3, #0]
	switch(data_list[id].format)
 8000e88:	7bfa      	ldrb	r2, [r7, #15]
 8000e8a:	498f      	ldr	r1, [pc, #572]	; (80010c8 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	4413      	add	r3, r2
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	440b      	add	r3, r1
 8000e96:	3309      	adds	r3, #9
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	3b14      	subs	r3, #20
 8000e9c:	2b19      	cmp	r3, #25
 8000e9e:	f200 80fb 	bhi.w	8001098 <DATA_LOGGER_Get_Data_Value+0x22c>
 8000ea2:	a201      	add	r2, pc, #4	; (adr r2, 8000ea8 <DATA_LOGGER_Get_Data_Value+0x3c>)
 8000ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea8:	08000f11 	.word	0x08000f11
 8000eac:	08001099 	.word	0x08001099
 8000eb0:	08001099 	.word	0x08001099
 8000eb4:	08000f2d 	.word	0x08000f2d
 8000eb8:	08001099 	.word	0x08001099
 8000ebc:	08001099 	.word	0x08001099
 8000ec0:	08001099 	.word	0x08001099
 8000ec4:	08001099 	.word	0x08001099
 8000ec8:	08001099 	.word	0x08001099
 8000ecc:	08001099 	.word	0x08001099
 8000ed0:	08001099 	.word	0x08001099
 8000ed4:	08001099 	.word	0x08001099
 8000ed8:	08001099 	.word	0x08001099
 8000edc:	08001099 	.word	0x08001099
 8000ee0:	08001099 	.word	0x08001099
 8000ee4:	08001099 	.word	0x08001099
 8000ee8:	08001099 	.word	0x08001099
 8000eec:	08001099 	.word	0x08001099
 8000ef0:	08001099 	.word	0x08001099
 8000ef4:	08001099 	.word	0x08001099
 8000ef8:	08001099 	.word	0x08001099
 8000efc:	08000f5d 	.word	0x08000f5d
 8000f00:	08000fa5 	.word	0x08000fa5
 8000f04:	08000fed 	.word	0x08000fed
 8000f08:	08001035 	.word	0x08001035
 8000f0c:	08001067 	.word	0x08001067
	{
		case data_format_e8B:
			buffer[1] = *(uint8_t*)data_list[id].data ;
 8000f10:	7bfa      	ldrb	r2, [r7, #15]
 8000f12:	496d      	ldr	r1, [pc, #436]	; (80010c8 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000f14:	4613      	mov	r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	4413      	add	r3, r2
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	440b      	add	r3, r1
 8000f1e:	3304      	adds	r3, #4
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	3301      	adds	r3, #1
 8000f26:	7812      	ldrb	r2, [r2, #0]
 8000f28:	701a      	strb	r2, [r3, #0]
			break;
 8000f2a:	e0b6      	b.n	800109a <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e8B_PWM:
			break;
		case data_format_e8B_FLOAT_0D:
			tmp_float = *(float*)data_list[id].data ;
 8000f2c:	7bfa      	ldrb	r2, [r7, #15]
 8000f2e:	4966      	ldr	r1, [pc, #408]	; (80010c8 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000f30:	4613      	mov	r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	4413      	add	r3, r2
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	440b      	add	r3, r1
 8000f3a:	3304      	adds	r3, #4
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	613b      	str	r3, [r7, #16]
			buffer[1] = (int8_t)tmp_float;
 8000f42:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f4a:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f4e:	793b      	ldrb	r3, [r7, #4]
 8000f50:	b25a      	sxtb	r2, r3
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	3301      	adds	r3, #1
 8000f56:	b2d2      	uxtb	r2, r2
 8000f58:	701a      	strb	r2, [r3, #0]
			break;
 8000f5a:	e09e      	b.n	800109a <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e8B_FLOAT_1D:
			break;
		case data_format_e16B:
			break;
		case data_format_e16B_FLOAT_1D:
			tmp_float = *(float*)data_list[id].data;
 8000f5c:	7bfa      	ldrb	r2, [r7, #15]
 8000f5e:	495a      	ldr	r1, [pc, #360]	; (80010c8 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000f60:	4613      	mov	r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	4413      	add	r3, r2
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	440b      	add	r3, r1
 8000f6a:	3304      	adds	r3, #4
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 10;
 8000f72:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f76:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000f7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f82:	ee17 3a90 	vmov	r3, s15
 8000f86:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8000f88:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f8c:	121b      	asrs	r3, r3, #8
 8000f8e:	b21a      	sxth	r2, r3
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	3301      	adds	r3, #1
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	3302      	adds	r3, #2
 8000f9c:	8afa      	ldrh	r2, [r7, #22]
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	701a      	strb	r2, [r3, #0]
			break;
 8000fa2:	e07a      	b.n	800109a <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e16B_FLOAT_2D:
			tmp_float = *(float*)data_list[id].data;
 8000fa4:	7bfa      	ldrb	r2, [r7, #15]
 8000fa6:	4948      	ldr	r1, [pc, #288]	; (80010c8 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000fa8:	4613      	mov	r3, r2
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	4413      	add	r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	3304      	adds	r3, #4
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 100;
 8000fba:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fbe:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80010cc <DATA_LOGGER_Get_Data_Value+0x260>
 8000fc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fca:	ee17 3a90 	vmov	r3, s15
 8000fce:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8000fd0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000fd4:	121b      	asrs	r3, r3, #8
 8000fd6:	b21a      	sxth	r2, r3
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	3302      	adds	r3, #2
 8000fe4:	8afa      	ldrh	r2, [r7, #22]
 8000fe6:	b2d2      	uxtb	r2, r2
 8000fe8:	701a      	strb	r2, [r3, #0]
			break;
 8000fea:	e056      	b.n	800109a <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e16B_FLOAT_3D:
			tmp_float = *(float*)data_list[id].data;
 8000fec:	7bfa      	ldrb	r2, [r7, #15]
 8000fee:	4936      	ldr	r1, [pc, #216]	; (80010c8 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4413      	add	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	3304      	adds	r3, #4
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 1000;
 8001002:	edd7 7a04 	vldr	s15, [r7, #16]
 8001006:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80010d0 <DATA_LOGGER_Get_Data_Value+0x264>
 800100a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800100e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001012:	ee17 3a90 	vmov	r3, s15
 8001016:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8001018:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800101c:	121b      	asrs	r3, r3, #8
 800101e:	b21a      	sxth	r2, r3
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	3301      	adds	r3, #1
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	3302      	adds	r3, #2
 800102c:	8afa      	ldrh	r2, [r7, #22]
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	701a      	strb	r2, [r3, #0]
			break;
 8001032:	e032      	b.n	800109a <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e16B_UINT16:
			tmp_16 = *(uint16_t*)data_list[id].data ;
 8001034:	7bfa      	ldrb	r2, [r7, #15]
 8001036:	4924      	ldr	r1, [pc, #144]	; (80010c8 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8001038:	4613      	mov	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	440b      	add	r3, r1
 8001042:	3304      	adds	r3, #4
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 800104a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800104e:	121b      	asrs	r3, r3, #8
 8001050:	b21a      	sxth	r2, r3
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	3301      	adds	r3, #1
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	3302      	adds	r3, #2
 800105e:	8afa      	ldrh	r2, [r7, #22]
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	701a      	strb	r2, [r3, #0]
			break;
 8001064:	e019      	b.n	800109a <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e16B_INT16:
			tmp_16 = *(int16_t*)data_list[id].data ;
 8001066:	7bfa      	ldrb	r2, [r7, #15]
 8001068:	4917      	ldr	r1, [pc, #92]	; (80010c8 <DATA_LOGGER_Get_Data_Value+0x25c>)
 800106a:	4613      	mov	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	4413      	add	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	440b      	add	r3, r1
 8001074:	3304      	adds	r3, #4
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 800107c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001080:	121b      	asrs	r3, r3, #8
 8001082:	b21a      	sxth	r2, r3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	3301      	adds	r3, #1
 8001088:	b2d2      	uxtb	r2, r2
 800108a:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	3302      	adds	r3, #2
 8001090:	8afa      	ldrh	r2, [r7, #22]
 8001092:	b2d2      	uxtb	r2, r2
 8001094:	701a      	strb	r2, [r3, #0]
			break;
 8001096:	e000      	b.n	800109a <DATA_LOGGER_Get_Data_Value+0x22e>
		default:
			break;
 8001098:	bf00      	nop
	}
	/* Length of the data array */
	return (data_list[id].format / 20) + 1;
 800109a:	7bfa      	ldrb	r2, [r7, #15]
 800109c:	490a      	ldr	r1, [pc, #40]	; (80010c8 <DATA_LOGGER_Get_Data_Value+0x25c>)
 800109e:	4613      	mov	r3, r2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	4413      	add	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	440b      	add	r3, r1
 80010a8:	3309      	adds	r3, #9
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	4a09      	ldr	r2, [pc, #36]	; (80010d4 <DATA_LOGGER_Get_Data_Value+0x268>)
 80010ae:	fba2 2303 	umull	r2, r3, r2, r3
 80010b2:	091b      	lsrs	r3, r3, #4
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	3301      	adds	r3, #1
 80010b8:	b2db      	uxtb	r3, r3
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	371c      	adds	r7, #28
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	20000198 	.word	0x20000198
 80010cc:	42c80000 	.word	0x42c80000
 80010d0:	447a0000 	.word	0x447a0000
 80010d4:	cccccccd 	.word	0xcccccccd

080010d8 <DATA_LOGGER_Get_Data_Config>:
 * @param id Id of the data
 * @param buffer Buffer array to write the configuration into
 * @return Number of bytes we wrote in the buffer
 */
uint8_t DATA_LOGGER_Get_Data_Config(data_id_e id, uint8_t * buffer)
{
 80010d8:	b590      	push	{r4, r7, lr}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	6039      	str	r1, [r7, #0]
 80010e2:	71fb      	strb	r3, [r7, #7]
	/* We send a configuration so it must start with 0xFF */
	buffer[0] = 0xFF;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	22ff      	movs	r2, #255	; 0xff
 80010e8:	701a      	strb	r2, [r3, #0]
	/* Then we put the length of the name */
	buffer[1] = data_list[id].len_name;
 80010ea:	79fa      	ldrb	r2, [r7, #7]
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	1c59      	adds	r1, r3, #1
 80010f0:	4828      	ldr	r0, [pc, #160]	; (8001194 <DATA_LOGGER_Get_Data_Config+0xbc>)
 80010f2:	4613      	mov	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	4413      	add	r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	4403      	add	r3, r0
 80010fc:	3310      	adds	r3, #16
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	700b      	strb	r3, [r1, #0]
	/* Then we write the data format */
	buffer[2] = data_list[id].format;
 8001102:	79fa      	ldrb	r2, [r7, #7]
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	1c99      	adds	r1, r3, #2
 8001108:	4822      	ldr	r0, [pc, #136]	; (8001194 <DATA_LOGGER_Get_Data_Config+0xbc>)
 800110a:	4613      	mov	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	4403      	add	r3, r0
 8001114:	3309      	adds	r3, #9
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	700b      	strb	r3, [r1, #0]
	/* Then the id of the data */
	buffer[3] = id;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	3303      	adds	r3, #3
 800111e:	79fa      	ldrb	r2, [r7, #7]
 8001120:	701a      	strb	r2, [r3, #0]
	/* When the data is used as output, we add 128 to the id */
	if(data_list[id].use_format == use_format_eAS_INPUT)
 8001122:	79fa      	ldrb	r2, [r7, #7]
 8001124:	491b      	ldr	r1, [pc, #108]	; (8001194 <DATA_LOGGER_Get_Data_Config+0xbc>)
 8001126:	4613      	mov	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4413      	add	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	440b      	add	r3, r1
 8001130:	3311      	adds	r3, #17
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b02      	cmp	r3, #2
 8001136:	d107      	bne.n	8001148 <DATA_LOGGER_Get_Data_Config+0x70>
	{
		buffer[3] += 128 ;
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	3303      	adds	r3, #3
 800113c:	781a      	ldrb	r2, [r3, #0]
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	3303      	adds	r3, #3
 8001142:	3a80      	subs	r2, #128	; 0x80
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	701a      	strb	r2, [r3, #0]
	}
	/* Finally we write the name */
	memcpy(&buffer[4], data_list[id].name, data_list[id].len_name);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	1d18      	adds	r0, r3, #4
 800114c:	79fa      	ldrb	r2, [r7, #7]
 800114e:	4911      	ldr	r1, [pc, #68]	; (8001194 <DATA_LOGGER_Get_Data_Config+0xbc>)
 8001150:	4613      	mov	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4413      	add	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	440b      	add	r3, r1
 800115a:	330c      	adds	r3, #12
 800115c:	6819      	ldr	r1, [r3, #0]
 800115e:	79fa      	ldrb	r2, [r7, #7]
 8001160:	4c0c      	ldr	r4, [pc, #48]	; (8001194 <DATA_LOGGER_Get_Data_Config+0xbc>)
 8001162:	4613      	mov	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4413      	add	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4423      	add	r3, r4
 800116c:	3310      	adds	r3, #16
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	f009 fa91 	bl	800a698 <memcpy>

	return 4 + data_list[id].len_name ;
 8001176:	79fa      	ldrb	r2, [r7, #7]
 8001178:	4906      	ldr	r1, [pc, #24]	; (8001194 <DATA_LOGGER_Get_Data_Config+0xbc>)
 800117a:	4613      	mov	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	4413      	add	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	440b      	add	r3, r1
 8001184:	3310      	adds	r3, #16
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	3304      	adds	r3, #4
 800118a:	b2db      	uxtb	r3, r3
}
 800118c:	4618      	mov	r0, r3
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	bd90      	pop	{r4, r7, pc}
 8001194:	20000198 	.word	0x20000198

08001198 <DATA_LOGGER_Get_Data>:
 * @brief Get data
 * @param id Id of the data
 * @return pointer to the data structure with the corresponding ID
 */
data_t * DATA_LOGGER_Get_Data(data_id_e id)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
	return &data_list[id];
 80011a2:	79fa      	ldrb	r2, [r7, #7]
 80011a4:	4613      	mov	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4413      	add	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4a03      	ldr	r2, [pc, #12]	; (80011bc <DATA_LOGGER_Get_Data+0x24>)
 80011ae:	4413      	add	r3, r2
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	20000198 	.word	0x20000198

080011c0 <push_data_to_uart>:
 * @brief Add the start byte and checksum to a message
 * @param buffer Data array to send
 * @param len Number of bytes to send
 */
void push_data_to_uart(uint8_t * buffer, uint8_t len)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b098      	sub	sp, #96	; 0x60
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	70fb      	strb	r3, [r7, #3]
	uint8_t buffer_new[80];
	uint32_t checksum = 0 ;
 80011cc:	2300      	movs	r3, #0
 80011ce:	65fb      	str	r3, [r7, #92]	; 0x5c
	buffer_new[0] = '$';
 80011d0:	2324      	movs	r3, #36	; 0x24
 80011d2:	723b      	strb	r3, [r7, #8]
	for(uint8_t b = 0; b < len; b++)
 80011d4:	2300      	movs	r3, #0
 80011d6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80011da:	e01d      	b.n	8001218 <push_data_to_uart+0x58>
	{
		buffer_new[1 + b] = buffer[b];
 80011dc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	441a      	add	r2, r3
 80011e4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80011e8:	3301      	adds	r3, #1
 80011ea:	7812      	ldrb	r2, [r2, #0]
 80011ec:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80011f0:	440b      	add	r3, r1
 80011f2:	f803 2c58 	strb.w	r2, [r3, #-88]
		checksum += (uint32_t)buffer_new[1 + b];
 80011f6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80011fa:	3301      	adds	r3, #1
 80011fc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001200:	4413      	add	r3, r2
 8001202:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8001206:	461a      	mov	r2, r3
 8001208:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800120a:	4413      	add	r3, r2
 800120c:	65fb      	str	r3, [r7, #92]	; 0x5c
	for(uint8_t b = 0; b < len; b++)
 800120e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001212:	3301      	adds	r3, #1
 8001214:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8001218:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800121c:	78fb      	ldrb	r3, [r7, #3]
 800121e:	429a      	cmp	r2, r3
 8001220:	d3dc      	bcc.n	80011dc <push_data_to_uart+0x1c>
	}
	buffer_new[1 + len] = (uint8_t)(checksum % 256) ;
 8001222:	78fb      	ldrb	r3, [r7, #3]
 8001224:	3301      	adds	r3, #1
 8001226:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800122e:	440b      	add	r3, r1
 8001230:	f803 2c58 	strb.w	r2, [r3, #-88]
	UART_Transmit(UART_TELEMETRY, buffer_new, len+2);
 8001234:	78fb      	ldrb	r3, [r7, #3]
 8001236:	b29b      	uxth	r3, r3
 8001238:	3302      	adds	r3, #2
 800123a:	b29a      	uxth	r2, r3
 800123c:	f107 0308 	add.w	r3, r7, #8
 8001240:	4619      	mov	r1, r3
 8001242:	2000      	movs	r0, #0
 8001244:	f001 f850 	bl	80022e8 <UART_Transmit>
}
 8001248:	bf00      	nop
 800124a:	3760      	adds	r7, #96	; 0x60
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <state_machine>:

/*
 * @brief data logger state machine
 */
static void state_machine(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
	/* Time management for periodic transmissions */
	static uint32_t next_time_state_machine = 0;
	static uint32_t current_period = PERIODE_PING;
	uint32_t time_ms = HAL_GetTick();
 8001256:	f002 fe13 	bl	8003e80 <HAL_GetTick>
 800125a:	60b8      	str	r0, [r7, #8]
	if(time_ms < next_time_state_machine)
 800125c:	4b78      	ldr	r3, [pc, #480]	; (8001440 <state_machine+0x1f0>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	68ba      	ldr	r2, [r7, #8]
 8001262:	429a      	cmp	r2, r3
 8001264:	f0c0 80e6 	bcc.w	8001434 <state_machine+0x1e4>
	{
		return;
	}
	next_time_state_machine = time_ms + current_period;
 8001268:	4b76      	ldr	r3, [pc, #472]	; (8001444 <state_machine+0x1f4>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	4413      	add	r3, r2
 8001270:	4a73      	ldr	r2, [pc, #460]	; (8001440 <state_machine+0x1f0>)
 8001272:	6013      	str	r3, [r2, #0]

	/* State machine variables */
	static data_logger_state_e state = data_logger_state_eIDLE;
	static data_logger_state_e previous_state = data_logger_state_eTRANSMIT_CONFIG ;
	bool_e entrance = previous_state != state ;
 8001274:	4b74      	ldr	r3, [pc, #464]	; (8001448 <state_machine+0x1f8>)
 8001276:	781a      	ldrb	r2, [r3, #0]
 8001278:	4b74      	ldr	r3, [pc, #464]	; (800144c <state_machine+0x1fc>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	429a      	cmp	r2, r3
 800127e:	bf14      	ite	ne
 8001280:	2301      	movne	r3, #1
 8001282:	2300      	moveq	r3, #0
 8001284:	b2db      	uxtb	r3, r3
 8001286:	71fb      	strb	r3, [r7, #7]
	previous_state = state ;
 8001288:	4b70      	ldr	r3, [pc, #448]	; (800144c <state_machine+0x1fc>)
 800128a:	781a      	ldrb	r2, [r3, #0]
 800128c:	4b6e      	ldr	r3, [pc, #440]	; (8001448 <state_machine+0x1f8>)
 800128e:	701a      	strb	r2, [r3, #0]
	switch(state)
 8001290:	4b6e      	ldr	r3, [pc, #440]	; (800144c <state_machine+0x1fc>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b02      	cmp	r3, #2
 8001296:	f000 8091 	beq.w	80013bc <state_machine+0x16c>
 800129a:	2b02      	cmp	r3, #2
 800129c:	f300 80cd 	bgt.w	800143a <state_machine+0x1ea>
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d002      	beq.n	80012aa <state_machine+0x5a>
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d043      	beq.n	8001330 <state_machine+0xe0>
 80012a8:	e0c7      	b.n	800143a <state_machine+0x1ea>
	{
		case data_logger_state_eIDLE :
			if(entrance)
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <state_machine+0x68>
			{
				/* When we are in the idle mode, we just ping the device at PERIODE_PING µs interval */
				current_period = PERIODE_PING;
 80012b0:	4b64      	ldr	r3, [pc, #400]	; (8001444 <state_machine+0x1f4>)
 80012b2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80012b6:	601a      	str	r2, [r3, #0]
			}

			tmp_len = DATA_LOGGER_Get_Data_Config(data_id_eCONFIG_REQUEST, tmp);
 80012b8:	4965      	ldr	r1, [pc, #404]	; (8001450 <state_machine+0x200>)
 80012ba:	2000      	movs	r0, #0
 80012bc:	f7ff ff0c 	bl	80010d8 <DATA_LOGGER_Get_Data_Config>
 80012c0:	4603      	mov	r3, r0
 80012c2:	461a      	mov	r2, r3
 80012c4:	4b63      	ldr	r3, [pc, #396]	; (8001454 <state_machine+0x204>)
 80012c6:	701a      	strb	r2, [r3, #0]
			push_data_to_uart(tmp, tmp_len);
 80012c8:	4b62      	ldr	r3, [pc, #392]	; (8001454 <state_machine+0x204>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	4619      	mov	r1, r3
 80012ce:	4860      	ldr	r0, [pc, #384]	; (8001450 <state_machine+0x200>)
 80012d0:	f7ff ff76 	bl	80011c0 <push_data_to_uart>

			/* If we receive a configuration request, we change the state */
			if(send_config_flag)
 80012d4:	4b60      	ldr	r3, [pc, #384]	; (8001458 <state_machine+0x208>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d01a      	beq.n	8001312 <state_machine+0xc2>
			{
				/* Reset flags */
				start_flag = FALSE;
 80012dc:	4b5f      	ldr	r3, [pc, #380]	; (800145c <state_machine+0x20c>)
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
				stop_flag = FALSE;
 80012e2:	4b5f      	ldr	r3, [pc, #380]	; (8001460 <state_machine+0x210>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	701a      	strb	r2, [r3, #0]
				send_config_flag = FALSE;
 80012e8:	4b5b      	ldr	r3, [pc, #364]	; (8001458 <state_machine+0x208>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	701a      	strb	r2, [r3, #0]
				/* Change the state */
				/* We send the configuration only if we did not send it before */
				if(config_not_sent)
 80012ee:	4b5d      	ldr	r3, [pc, #372]	; (8001464 <state_machine+0x214>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d009      	beq.n	800130a <state_machine+0xba>
				{
					id_init_counter = 0;
 80012f6:	4b5c      	ldr	r3, [pc, #368]	; (8001468 <state_machine+0x218>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
					is_any_data_used = FALSE;
 80012fc:	4b5b      	ldr	r3, [pc, #364]	; (800146c <state_machine+0x21c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]
					state = data_logger_state_eTRANSMIT_CONFIG;
 8001302:	4b52      	ldr	r3, [pc, #328]	; (800144c <state_machine+0x1fc>)
 8001304:	2201      	movs	r2, #1
 8001306:	701a      	strb	r2, [r3, #0]
			{
				start_flag = FALSE;
				stop_flag = FALSE;
				state = data_logger_state_eLOG;
			}
			break;
 8001308:	e096      	b.n	8001438 <state_machine+0x1e8>
					state = data_logger_state_eLOG;
 800130a:	4b50      	ldr	r3, [pc, #320]	; (800144c <state_machine+0x1fc>)
 800130c:	2202      	movs	r2, #2
 800130e:	701a      	strb	r2, [r3, #0]
			break;
 8001310:	e092      	b.n	8001438 <state_machine+0x1e8>
			else if(start_flag)
 8001312:	4b52      	ldr	r3, [pc, #328]	; (800145c <state_machine+0x20c>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	f000 808e 	beq.w	8001438 <state_machine+0x1e8>
				start_flag = FALSE;
 800131c:	4b4f      	ldr	r3, [pc, #316]	; (800145c <state_machine+0x20c>)
 800131e:	2200      	movs	r2, #0
 8001320:	701a      	strb	r2, [r3, #0]
				stop_flag = FALSE;
 8001322:	4b4f      	ldr	r3, [pc, #316]	; (8001460 <state_machine+0x210>)
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]
				state = data_logger_state_eLOG;
 8001328:	4b48      	ldr	r3, [pc, #288]	; (800144c <state_machine+0x1fc>)
 800132a:	2202      	movs	r2, #2
 800132c:	701a      	strb	r2, [r3, #0]
			break;
 800132e:	e083      	b.n	8001438 <state_machine+0x1e8>

		case data_logger_state_eTRANSMIT_CONFIG :
			/* Change the data logger task period to send configuration slowly */
			if(entrance)
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d009      	beq.n	800134a <state_machine+0xfa>
			{
				current_period = PERIODE_CONFIG_SEND;
 8001336:	4b43      	ldr	r3, [pc, #268]	; (8001444 <state_machine+0x1f4>)
 8001338:	220a      	movs	r2, #10
 800133a:	601a      	str	r2, [r3, #0]
			}
			while(data_list[id_init_counter].use_format == use_format_eNOT_USED && id_init_counter < data_id_eCOUNT)
 800133c:	e005      	b.n	800134a <state_machine+0xfa>
			{
				id_init_counter ++ ;
 800133e:	4b4a      	ldr	r3, [pc, #296]	; (8001468 <state_machine+0x218>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	3301      	adds	r3, #1
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4b48      	ldr	r3, [pc, #288]	; (8001468 <state_machine+0x218>)
 8001348:	701a      	strb	r2, [r3, #0]
			while(data_list[id_init_counter].use_format == use_format_eNOT_USED && id_init_counter < data_id_eCOUNT)
 800134a:	4b47      	ldr	r3, [pc, #284]	; (8001468 <state_machine+0x218>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	4619      	mov	r1, r3
 8001350:	4a47      	ldr	r2, [pc, #284]	; (8001470 <state_machine+0x220>)
 8001352:	460b      	mov	r3, r1
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	440b      	add	r3, r1
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	4413      	add	r3, r2
 800135c:	3311      	adds	r3, #17
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d103      	bne.n	800136c <state_machine+0x11c>
 8001364:	4b40      	ldr	r3, [pc, #256]	; (8001468 <state_machine+0x218>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b0e      	cmp	r3, #14
 800136a:	d9e8      	bls.n	800133e <state_machine+0xee>
			}
			if(id_init_counter < data_id_eCOUNT)
 800136c:	4b3e      	ldr	r3, [pc, #248]	; (8001468 <state_machine+0x218>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b0e      	cmp	r3, #14
 8001372:	d817      	bhi.n	80013a4 <state_machine+0x154>
			{
				is_any_data_used = TRUE;
 8001374:	4b3d      	ldr	r3, [pc, #244]	; (800146c <state_machine+0x21c>)
 8001376:	2201      	movs	r2, #1
 8001378:	701a      	strb	r2, [r3, #0]
				/* Get data configuration */
				tmp_len = DATA_LOGGER_Get_Data_Config(id_init_counter++, tmp);
 800137a:	4b3b      	ldr	r3, [pc, #236]	; (8001468 <state_machine+0x218>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	1c5a      	adds	r2, r3, #1
 8001380:	b2d1      	uxtb	r1, r2
 8001382:	4a39      	ldr	r2, [pc, #228]	; (8001468 <state_machine+0x218>)
 8001384:	7011      	strb	r1, [r2, #0]
 8001386:	4932      	ldr	r1, [pc, #200]	; (8001450 <state_machine+0x200>)
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fea5 	bl	80010d8 <DATA_LOGGER_Get_Data_Config>
 800138e:	4603      	mov	r3, r0
 8001390:	461a      	mov	r2, r3
 8001392:	4b30      	ldr	r3, [pc, #192]	; (8001454 <state_machine+0x204>)
 8001394:	701a      	strb	r2, [r3, #0]
				/* Send the configuration */
				push_data_to_uart(tmp, tmp_len);
 8001396:	4b2f      	ldr	r3, [pc, #188]	; (8001454 <state_machine+0x204>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	4619      	mov	r1, r3
 800139c:	482c      	ldr	r0, [pc, #176]	; (8001450 <state_machine+0x200>)
 800139e:	f7ff ff0f 	bl	80011c0 <push_data_to_uart>
				else
				{
					state = data_logger_state_eIDLE ;
				}
			}
			break;
 80013a2:	e04a      	b.n	800143a <state_machine+0x1ea>
				if(is_any_data_used)
 80013a4:	4b31      	ldr	r3, [pc, #196]	; (800146c <state_machine+0x21c>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <state_machine+0x164>
					state = data_logger_state_eLOG ;
 80013ac:	4b27      	ldr	r3, [pc, #156]	; (800144c <state_machine+0x1fc>)
 80013ae:	2202      	movs	r2, #2
 80013b0:	701a      	strb	r2, [r3, #0]
			break;
 80013b2:	e042      	b.n	800143a <state_machine+0x1ea>
					state = data_logger_state_eIDLE ;
 80013b4:	4b25      	ldr	r3, [pc, #148]	; (800144c <state_machine+0x1fc>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	701a      	strb	r2, [r3, #0]
			break;
 80013ba:	e03e      	b.n	800143a <state_machine+0x1ea>

		case data_logger_state_eLOG:
			if(entrance)
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d002      	beq.n	80013c8 <state_machine+0x178>
			{
				current_period = PERIODE_SEND;
 80013c2:	4b20      	ldr	r3, [pc, #128]	; (8001444 <state_machine+0x1f4>)
 80013c4:	220a      	movs	r2, #10
 80013c6:	601a      	str	r2, [r3, #0]
			}
			if(stop_flag)
 80013c8:	4b25      	ldr	r3, [pc, #148]	; (8001460 <state_machine+0x210>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d002      	beq.n	80013d6 <state_machine+0x186>
			{
				state = data_logger_state_eIDLE;
 80013d0:	4b1e      	ldr	r3, [pc, #120]	; (800144c <state_machine+0x1fc>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]
			}
			for(uint8_t d = 0; d < data_id_eCOUNT; d++)
 80013d6:	2300      	movs	r3, #0
 80013d8:	73fb      	strb	r3, [r7, #15]
 80013da:	e027      	b.n	800142c <state_machine+0x1dc>
			{
				if(data_list[d].use_format == use_format_eAS_OUTPUT && (data_list[d].data != NULL))
 80013dc:	7bfa      	ldrb	r2, [r7, #15]
 80013de:	4924      	ldr	r1, [pc, #144]	; (8001470 <state_machine+0x220>)
 80013e0:	4613      	mov	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4413      	add	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	440b      	add	r3, r1
 80013ea:	3311      	adds	r3, #17
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d119      	bne.n	8001426 <state_machine+0x1d6>
 80013f2:	7bfa      	ldrb	r2, [r7, #15]
 80013f4:	491e      	ldr	r1, [pc, #120]	; (8001470 <state_machine+0x220>)
 80013f6:	4613      	mov	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	440b      	add	r3, r1
 8001400:	3304      	adds	r3, #4
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d00e      	beq.n	8001426 <state_machine+0x1d6>
				{
					tmp_len = DATA_LOGGER_Get_Data_Value(d, tmp);
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	4911      	ldr	r1, [pc, #68]	; (8001450 <state_machine+0x200>)
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff fd2d 	bl	8000e6c <DATA_LOGGER_Get_Data_Value>
 8001412:	4603      	mov	r3, r0
 8001414:	461a      	mov	r2, r3
 8001416:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <state_machine+0x204>)
 8001418:	701a      	strb	r2, [r3, #0]
					push_data_to_uart(tmp, tmp_len);
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <state_machine+0x204>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	4619      	mov	r1, r3
 8001420:	480b      	ldr	r0, [pc, #44]	; (8001450 <state_machine+0x200>)
 8001422:	f7ff fecd 	bl	80011c0 <push_data_to_uart>
			for(uint8_t d = 0; d < data_id_eCOUNT; d++)
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	3301      	adds	r3, #1
 800142a:	73fb      	strb	r3, [r7, #15]
 800142c:	7bfb      	ldrb	r3, [r7, #15]
 800142e:	2b0e      	cmp	r3, #14
 8001430:	d9d4      	bls.n	80013dc <state_machine+0x18c>
				}
			}
			break;
 8001432:	e002      	b.n	800143a <state_machine+0x1ea>
		return;
 8001434:	bf00      	nop
 8001436:	e000      	b.n	800143a <state_machine+0x1ea>
			break;
 8001438:	bf00      	nop
	}
}
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000300 	.word	0x20000300
 8001444:	20000094 	.word	0x20000094
 8001448:	20000098 	.word	0x20000098
 800144c:	20000304 	.word	0x20000304
 8001450:	200002c8 	.word	0x200002c8
 8001454:	200002fa 	.word	0x200002fa
 8001458:	200002c5 	.word	0x200002c5
 800145c:	200002c4 	.word	0x200002c4
 8001460:	200002c6 	.word	0x200002c6
 8001464:	20000090 	.word	0x20000090
 8001468:	200002fb 	.word	0x200002fb
 800146c:	200002fc 	.word	0x200002fc
 8001470:	20000198 	.word	0x20000198

08001474 <parse_uart>:

/*
 * @brief Parse incoming bytes
 */
static void parse_uart(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
	static uint8_t trame[20] = { 0 };
	static uint8_t nb_byte_to_buffer = 0;
	static uint8_t buffer_counter = 0;
	static uint16_t checksum = 0;
	/* Check for available data */
	if(UART_Availables(UART_TELEMETRY))
 800147a:	2000      	movs	r0, #0
 800147c:	f000 fe8a 	bl	8002194 <UART_Availables>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d06c      	beq.n	8001560 <parse_uart+0xec>
	{
		uint8_t c;
		UART_Get(UART_TELEMETRY, &c);
 8001486:	1dfb      	adds	r3, r7, #7
 8001488:	4619      	mov	r1, r3
 800148a:	2000      	movs	r0, #0
 800148c:	f000 fe90 	bl	80021b0 <UART_Get>
		switch(state)
 8001490:	4b35      	ldr	r3, [pc, #212]	; (8001568 <parse_uart+0xf4>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b03      	cmp	r3, #3
 8001496:	d863      	bhi.n	8001560 <parse_uart+0xec>
 8001498:	a201      	add	r2, pc, #4	; (adr r2, 80014a0 <parse_uart+0x2c>)
 800149a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800149e:	bf00      	nop
 80014a0:	080014b1 	.word	0x080014b1
 80014a4:	080014bf 	.word	0x080014bf
 80014a8:	08001505 	.word	0x08001505
 80014ac:	0800153d 	.word	0x0800153d
		{
			case parser_state_eSTART_BYTE:
				if(c == '$')
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	2b24      	cmp	r3, #36	; 0x24
 80014b4:	d14f      	bne.n	8001556 <parse_uart+0xe2>
				{
					state = parser_state_eID;
 80014b6:	4b2c      	ldr	r3, [pc, #176]	; (8001568 <parse_uart+0xf4>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	701a      	strb	r2, [r3, #0]
				}
				break;
 80014bc:	e04b      	b.n	8001556 <parse_uart+0xe2>

			case parser_state_eID:
				if(c < data_id_eCOUNT)
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	2b0e      	cmp	r3, #14
 80014c2:	d84a      	bhi.n	800155a <parse_uart+0xe6>
				{
					/* Store the id for later use */
					trame[0] = c;
 80014c4:	79fa      	ldrb	r2, [r7, #7]
 80014c6:	4b29      	ldr	r3, [pc, #164]	; (800156c <parse_uart+0xf8>)
 80014c8:	701a      	strb	r2, [r3, #0]
					/* Reset the checksum */
					checksum = c;
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	4b28      	ldr	r3, [pc, #160]	; (8001570 <parse_uart+0xfc>)
 80014d0:	801a      	strh	r2, [r3, #0]
					/* Get the data length according to the data format */
					nb_byte_to_buffer = (DATA_LOGGER_Get_Data(c)->format / 20);
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fe5f 	bl	8001198 <DATA_LOGGER_Get_Data>
 80014da:	4603      	mov	r3, r0
 80014dc:	7a5b      	ldrb	r3, [r3, #9]
 80014de:	4a25      	ldr	r2, [pc, #148]	; (8001574 <parse_uart+0x100>)
 80014e0:	fba2 2303 	umull	r2, r3, r2, r3
 80014e4:	091b      	lsrs	r3, r3, #4
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	4b23      	ldr	r3, [pc, #140]	; (8001578 <parse_uart+0x104>)
 80014ea:	701a      	strb	r2, [r3, #0]
					if(nb_byte_to_buffer)
 80014ec:	4b22      	ldr	r3, [pc, #136]	; (8001578 <parse_uart+0x104>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d003      	beq.n	80014fc <parse_uart+0x88>
					{
						state = parser_state_eDATA;
 80014f4:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <parse_uart+0xf4>)
 80014f6:	2202      	movs	r2, #2
 80014f8:	701a      	strb	r2, [r3, #0]
					else
					{
						state = parser_state_eCHECKSUM;
					}
				}
				break;
 80014fa:	e02e      	b.n	800155a <parse_uart+0xe6>
						state = parser_state_eCHECKSUM;
 80014fc:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <parse_uart+0xf4>)
 80014fe:	2203      	movs	r2, #3
 8001500:	701a      	strb	r2, [r3, #0]
				break;
 8001502:	e02a      	b.n	800155a <parse_uart+0xe6>
			case parser_state_eDATA:
				trame[1+buffer_counter++] = c;
 8001504:	4b1d      	ldr	r3, [pc, #116]	; (800157c <parse_uart+0x108>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	1c5a      	adds	r2, r3, #1
 800150a:	b2d1      	uxtb	r1, r2
 800150c:	4a1b      	ldr	r2, [pc, #108]	; (800157c <parse_uart+0x108>)
 800150e:	7011      	strb	r1, [r2, #0]
 8001510:	3301      	adds	r3, #1
 8001512:	79f9      	ldrb	r1, [r7, #7]
 8001514:	4a15      	ldr	r2, [pc, #84]	; (800156c <parse_uart+0xf8>)
 8001516:	54d1      	strb	r1, [r2, r3]
				checksum += c;
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	b29a      	uxth	r2, r3
 800151c:	4b14      	ldr	r3, [pc, #80]	; (8001570 <parse_uart+0xfc>)
 800151e:	881b      	ldrh	r3, [r3, #0]
 8001520:	4413      	add	r3, r2
 8001522:	b29a      	uxth	r2, r3
 8001524:	4b12      	ldr	r3, [pc, #72]	; (8001570 <parse_uart+0xfc>)
 8001526:	801a      	strh	r2, [r3, #0]
				if(buffer_counter == nb_byte_to_buffer)
 8001528:	4b14      	ldr	r3, [pc, #80]	; (800157c <parse_uart+0x108>)
 800152a:	781a      	ldrb	r2, [r3, #0]
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <parse_uart+0x104>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	429a      	cmp	r2, r3
 8001532:	d114      	bne.n	800155e <parse_uart+0xea>
				{
					state = parser_state_eCHECKSUM;
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <parse_uart+0xf4>)
 8001536:	2203      	movs	r2, #3
 8001538:	701a      	strb	r2, [r3, #0]
				}
				break;
 800153a:	e010      	b.n	800155e <parse_uart+0xea>
			case parser_state_eCHECKSUM:
				if(checksum == c)
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	b29a      	uxth	r2, r3
 8001540:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <parse_uart+0xfc>)
 8001542:	881b      	ldrh	r3, [r3, #0]
 8001544:	429a      	cmp	r2, r3
 8001546:	d102      	bne.n	800154e <parse_uart+0xda>
				{
					DATA_LOGGER_Reception(trame);
 8001548:	4808      	ldr	r0, [pc, #32]	; (800156c <parse_uart+0xf8>)
 800154a:	f7ff fbd5 	bl	8000cf8 <DATA_LOGGER_Reception>
				}
				state = parser_state_eSTART_BYTE;
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <parse_uart+0xf4>)
 8001550:	2200      	movs	r2, #0
 8001552:	701a      	strb	r2, [r3, #0]
				break;
 8001554:	e004      	b.n	8001560 <parse_uart+0xec>
				break;
 8001556:	bf00      	nop
 8001558:	e002      	b.n	8001560 <parse_uart+0xec>
				break;
 800155a:	bf00      	nop
 800155c:	e000      	b.n	8001560 <parse_uart+0xec>
				break;
 800155e:	bf00      	nop


		}
	}

}
 8001560:	bf00      	nop
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000305 	.word	0x20000305
 800156c:	20000308 	.word	0x20000308
 8001570:	2000031c 	.word	0x2000031c
 8001574:	cccccccd 	.word	0xcccccccd
 8001578:	2000031e 	.word	0x2000031e
 800157c:	2000031f 	.word	0x2000031f

08001580 <HIGH_LEVEL_Init>:
#define RADIO_TO_ANGLE_RATE_YAW	((float)0.7f)

static high_level_t high_level = { 0 };

void HIGH_LEVEL_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
	high_level.radio = RADIO_Get_Channel();
 8001584:	f001 f8e0 	bl	8002748 <RADIO_Get_Channel>
 8001588:	4603      	mov	r3, r0
 800158a:	4a0c      	ldr	r2, [pc, #48]	; (80015bc <HIGH_LEVEL_Init+0x3c>)
 800158c:	6053      	str	r3, [r2, #4]
	high_level.target_angle = CONTROLLER_Get_Angle_Target();
 800158e:	f7ff fa41 	bl	8000a14 <CONTROLLER_Get_Angle_Target>
 8001592:	4603      	mov	r3, r0
 8001594:	4a09      	ldr	r2, [pc, #36]	; (80015bc <HIGH_LEVEL_Init+0x3c>)
 8001596:	60d3      	str	r3, [r2, #12]
	high_level.target_angle_speed = CONTROLLER_Get_Angle_Speed_Target();
 8001598:	f7ff fa46 	bl	8000a28 <CONTROLLER_Get_Angle_Speed_Target>
 800159c:	4603      	mov	r3, r0
 800159e:	4a07      	ldr	r2, [pc, #28]	; (80015bc <HIGH_LEVEL_Init+0x3c>)
 80015a0:	6113      	str	r3, [r2, #16]
	high_level.power = MOTOR_MIXER_Get_Power_Input_Ptr();
 80015a2:	f000 fa5d 	bl	8001a60 <MOTOR_MIXER_Get_Power_Input_Ptr>
 80015a6:	4603      	mov	r3, r0
 80015a8:	4a04      	ldr	r2, [pc, #16]	; (80015bc <HIGH_LEVEL_Init+0x3c>)
 80015aa:	6093      	str	r3, [r2, #8]
	high_level.state = high_level_eGROUND;
 80015ac:	4b03      	ldr	r3, [pc, #12]	; (80015bc <HIGH_LEVEL_Init+0x3c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]
	high_level.previous_state = high_level_eACCRO;
 80015b2:	4b02      	ldr	r3, [pc, #8]	; (80015bc <HIGH_LEVEL_Init+0x3c>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	705a      	strb	r2, [r3, #1]
}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20000320 	.word	0x20000320

080015c0 <HIGH_LEVEL_Process_Main>:

void HIGH_LEVEL_Process_Main(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
	/* entrance is used to know if we changed of state */
	bool_e entrance = high_level.state == high_level.previous_state;
 80015c6:	4b9c      	ldr	r3, [pc, #624]	; (8001838 <HIGH_LEVEL_Process_Main+0x278>)
 80015c8:	781a      	ldrb	r2, [r3, #0]
 80015ca:	4b9b      	ldr	r3, [pc, #620]	; (8001838 <HIGH_LEVEL_Process_Main+0x278>)
 80015cc:	785b      	ldrb	r3, [r3, #1]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	bf0c      	ite	eq
 80015d2:	2301      	moveq	r3, #1
 80015d4:	2300      	movne	r3, #0
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	71fb      	strb	r3, [r7, #7]
	high_level.previous_state = high_level.state;
 80015da:	4b97      	ldr	r3, [pc, #604]	; (8001838 <HIGH_LEVEL_Process_Main+0x278>)
 80015dc:	781a      	ldrb	r2, [r3, #0]
 80015de:	4b96      	ldr	r3, [pc, #600]	; (8001838 <HIGH_LEVEL_Process_Main+0x278>)
 80015e0:	705a      	strb	r2, [r3, #1]
	/* state machine */
	bool_e is_fly_allowed = MPU_Is_Ok();						/* We need the gyro to fly */
 80015e2:	f001 fadb 	bl	8002b9c <MPU_Is_Ok>
 80015e6:	4603      	mov	r3, r0
 80015e8:	71bb      	strb	r3, [r7, #6]
	is_fly_allowed &= high_level.radio[4] > 1500;				/* And the "Arm" switch */
 80015ea:	4b93      	ldr	r3, [pc, #588]	; (8001838 <HIGH_LEVEL_Process_Main+0x278>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	3308      	adds	r3, #8
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80015f6:	4293      	cmp	r3, r2
 80015f8:	bf8c      	ite	hi
 80015fa:	2301      	movhi	r3, #1
 80015fc:	2300      	movls	r3, #0
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	b25a      	sxtb	r2, r3
 8001602:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001606:	4013      	ands	r3, r2
 8001608:	b25b      	sxtb	r3, r3
 800160a:	71bb      	strb	r3, [r7, #6]
	is_fly_allowed &= (RADIO_Get_State() == radio_state_eOK);	/* We also need a working radio so it doesn't fly away */
 800160c:	f001 f890 	bl	8002730 <RADIO_Get_State>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	bf0c      	ite	eq
 8001616:	2301      	moveq	r3, #1
 8001618:	2300      	movne	r3, #0
 800161a:	b2db      	uxtb	r3, r3
 800161c:	b25a      	sxtb	r2, r3
 800161e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001622:	4013      	ands	r3, r2
 8001624:	b25b      	sxtb	r3, r3
 8001626:	71bb      	strb	r3, [r7, #6]
	switch(high_level.state)
 8001628:	4b83      	ldr	r3, [pc, #524]	; (8001838 <HIGH_LEVEL_Process_Main+0x278>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b02      	cmp	r3, #2
 800162e:	d039      	beq.n	80016a4 <HIGH_LEVEL_Process_Main+0xe4>
 8001630:	2b02      	cmp	r3, #2
 8001632:	f300 80fc 	bgt.w	800182e <HIGH_LEVEL_Process_Main+0x26e>
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HIGH_LEVEL_Process_Main+0x82>
 800163a:	2b01      	cmp	r3, #1
 800163c:	f000 8092 	beq.w	8001764 <HIGH_LEVEL_Process_Main+0x1a4>
			{
				high_level.state = high_level_eANGLE;
			}
			break;
	}
}
 8001640:	e0f5      	b.n	800182e <HIGH_LEVEL_Process_Main+0x26e>
			if(entrance)
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d007      	beq.n	8001658 <HIGH_LEVEL_Process_Main+0x98>
				CONTROLLER_Set_State(controller_state_eDISABLED);
 8001648:	2000      	movs	r0, #0
 800164a:	f7ff f9d1 	bl	80009f0 <CONTROLLER_Set_State>
				*high_level.power = 0;
 800164e:	4b7a      	ldr	r3, [pc, #488]	; (8001838 <HIGH_LEVEL_Process_Main+0x278>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
			if(is_fly_allowed && high_level.radio[2] < 1050)
 8001658:	79bb      	ldrb	r3, [r7, #6]
 800165a:	2b00      	cmp	r3, #0
 800165c:	f000 80e2 	beq.w	8001824 <HIGH_LEVEL_Process_Main+0x264>
 8001660:	4b75      	ldr	r3, [pc, #468]	; (8001838 <HIGH_LEVEL_Process_Main+0x278>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	3304      	adds	r3, #4
 8001666:	881b      	ldrh	r3, [r3, #0]
 8001668:	f240 4219 	movw	r2, #1049	; 0x419
 800166c:	4293      	cmp	r3, r2
 800166e:	f200 80d9 	bhi.w	8001824 <HIGH_LEVEL_Process_Main+0x264>
				if(high_level.radio[5] < 1300)
 8001672:	4b71      	ldr	r3, [pc, #452]	; (8001838 <HIGH_LEVEL_Process_Main+0x278>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	330a      	adds	r3, #10
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	f240 5213 	movw	r2, #1299	; 0x513
 800167e:	4293      	cmp	r3, r2
 8001680:	d803      	bhi.n	800168a <HIGH_LEVEL_Process_Main+0xca>
					high_level.state = high_level_eANGLE;
 8001682:	4b6d      	ldr	r3, [pc, #436]	; (8001838 <HIGH_LEVEL_Process_Main+0x278>)
 8001684:	2202      	movs	r2, #2
 8001686:	701a      	strb	r2, [r3, #0]
			break;
 8001688:	e0cc      	b.n	8001824 <HIGH_LEVEL_Process_Main+0x264>
				else if(high_level.radio[5] > 1300)
 800168a:	4b6b      	ldr	r3, [pc, #428]	; (8001838 <HIGH_LEVEL_Process_Main+0x278>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	330a      	adds	r3, #10
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	f240 5214 	movw	r2, #1300	; 0x514
 8001696:	4293      	cmp	r3, r2
 8001698:	f240 80c4 	bls.w	8001824 <HIGH_LEVEL_Process_Main+0x264>
					high_level.state = high_level_eACCRO;
 800169c:	4b66      	ldr	r3, [pc, #408]	; (8001838 <HIGH_LEVEL_Process_Main+0x278>)
 800169e:	2201      	movs	r2, #1
 80016a0:	701a      	strb	r2, [r3, #0]
			break;
 80016a2:	e0bf      	b.n	8001824 <HIGH_LEVEL_Process_Main+0x264>
			if(entrance)
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d002      	beq.n	80016b0 <HIGH_LEVEL_Process_Main+0xf0>
				CONTROLLER_Set_State(controller_state_eANGLE);
 80016aa:	2002      	movs	r0, #2
 80016ac:	f7ff f9a0 	bl	80009f0 <CONTROLLER_Set_State>
			high_level.target_angle[axe_eROLL] = (float)(high_level.radio[0]-1500) * RADIO_TO_ANGLE;
 80016b0:	4b61      	ldr	r3, [pc, #388]	; (8001838 <HIGH_LEVEL_Process_Main+0x278>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	881b      	ldrh	r3, [r3, #0]
 80016b6:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80016ba:	ee07 3a90 	vmov	s15, r3
 80016be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016c2:	4b5d      	ldr	r3, [pc, #372]	; (8001838 <HIGH_LEVEL_Process_Main+0x278>)
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800183c <HIGH_LEVEL_Process_Main+0x27c>
 80016ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ce:	edc3 7a00 	vstr	s15, [r3]
			high_level.target_angle[axe_ePITCH] = (float)(high_level.radio[1]-1500) * RADIO_TO_ANGLE;
 80016d2:	4b59      	ldr	r3, [pc, #356]	; (8001838 <HIGH_LEVEL_Process_Main+0x278>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	3302      	adds	r3, #2
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80016de:	ee07 3a90 	vmov	s15, r3
 80016e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016e6:	4b54      	ldr	r3, [pc, #336]	; (8001838 <HIGH_LEVEL_Process_Main+0x278>)
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	3304      	adds	r3, #4
 80016ec:	ed9f 7a53 	vldr	s14, [pc, #332]	; 800183c <HIGH_LEVEL_Process_Main+0x27c>
 80016f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016f4:	edc3 7a00 	vstr	s15, [r3]
			high_level.target_angle_speed[axe_eYAW] = -(float)(high_level.radio[3]-1500) * RADIO_TO_ANGLE_RATE_YAW;
 80016f8:	4b4f      	ldr	r3, [pc, #316]	; (8001838 <HIGH_LEVEL_Process_Main+0x278>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	3306      	adds	r3, #6
 80016fe:	881b      	ldrh	r3, [r3, #0]
 8001700:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8001704:	ee07 3a90 	vmov	s15, r3
 8001708:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800170c:	eef1 7a67 	vneg.f32	s15, s15
 8001710:	4b49      	ldr	r3, [pc, #292]	; (8001838 <HIGH_LEVEL_Process_Main+0x278>)
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	3308      	adds	r3, #8
 8001716:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001840 <HIGH_LEVEL_Process_Main+0x280>
 800171a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800171e:	edc3 7a00 	vstr	s15, [r3]
			*high_level.power = high_level.radio[2]-1000;
 8001722:	4b45      	ldr	r3, [pc, #276]	; (8001838 <HIGH_LEVEL_Process_Main+0x278>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	3304      	adds	r3, #4
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 800172e:	4b42      	ldr	r3, [pc, #264]	; (8001838 <HIGH_LEVEL_Process_Main+0x278>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	ee07 2a90 	vmov	s15, r2
 8001736:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800173a:	edc3 7a00 	vstr	s15, [r3]
			if(!is_fly_allowed)
 800173e:	79bb      	ldrb	r3, [r7, #6]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d103      	bne.n	800174c <HIGH_LEVEL_Process_Main+0x18c>
				high_level.state = high_level_eGROUND;
 8001744:	4b3c      	ldr	r3, [pc, #240]	; (8001838 <HIGH_LEVEL_Process_Main+0x278>)
 8001746:	2200      	movs	r2, #0
 8001748:	701a      	strb	r2, [r3, #0]
			break;
 800174a:	e06d      	b.n	8001828 <HIGH_LEVEL_Process_Main+0x268>
			else if(high_level.radio[5] > 1300)
 800174c:	4b3a      	ldr	r3, [pc, #232]	; (8001838 <HIGH_LEVEL_Process_Main+0x278>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	330a      	adds	r3, #10
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	f240 5214 	movw	r2, #1300	; 0x514
 8001758:	4293      	cmp	r3, r2
 800175a:	d965      	bls.n	8001828 <HIGH_LEVEL_Process_Main+0x268>
				high_level.state = high_level_eACCRO;
 800175c:	4b36      	ldr	r3, [pc, #216]	; (8001838 <HIGH_LEVEL_Process_Main+0x278>)
 800175e:	2201      	movs	r2, #1
 8001760:	701a      	strb	r2, [r3, #0]
			break;
 8001762:	e061      	b.n	8001828 <HIGH_LEVEL_Process_Main+0x268>
			if(entrance)
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d002      	beq.n	8001770 <HIGH_LEVEL_Process_Main+0x1b0>
				CONTROLLER_Set_State(controller_state_eSPEED);
 800176a:	2001      	movs	r0, #1
 800176c:	f7ff f940 	bl	80009f0 <CONTROLLER_Set_State>
			high_level.target_angle_speed[axe_eROLL] = (float)(high_level.radio[0]-1500) * RADIO_TO_ANGLE_RATE;
 8001770:	4b31      	ldr	r3, [pc, #196]	; (8001838 <HIGH_LEVEL_Process_Main+0x278>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	881b      	ldrh	r3, [r3, #0]
 8001776:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800177a:	ee07 3a90 	vmov	s15, r3
 800177e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001782:	4b2d      	ldr	r3, [pc, #180]	; (8001838 <HIGH_LEVEL_Process_Main+0x278>)
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800178a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800178e:	edc3 7a00 	vstr	s15, [r3]
			high_level.target_angle_speed[axe_ePITCH] = (float)(high_level.radio[1]-1500) * RADIO_TO_ANGLE_RATE;
 8001792:	4b29      	ldr	r3, [pc, #164]	; (8001838 <HIGH_LEVEL_Process_Main+0x278>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	3302      	adds	r3, #2
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800179e:	ee07 3a90 	vmov	s15, r3
 80017a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017a6:	4b24      	ldr	r3, [pc, #144]	; (8001838 <HIGH_LEVEL_Process_Main+0x278>)
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	3304      	adds	r3, #4
 80017ac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80017b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017b4:	edc3 7a00 	vstr	s15, [r3]
			high_level.target_angle_speed[axe_eYAW] = -(float)(high_level.radio[3]-1500) * RADIO_TO_ANGLE_RATE_YAW;
 80017b8:	4b1f      	ldr	r3, [pc, #124]	; (8001838 <HIGH_LEVEL_Process_Main+0x278>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	3306      	adds	r3, #6
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80017c4:	ee07 3a90 	vmov	s15, r3
 80017c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017cc:	eef1 7a67 	vneg.f32	s15, s15
 80017d0:	4b19      	ldr	r3, [pc, #100]	; (8001838 <HIGH_LEVEL_Process_Main+0x278>)
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	3308      	adds	r3, #8
 80017d6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001840 <HIGH_LEVEL_Process_Main+0x280>
 80017da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017de:	edc3 7a00 	vstr	s15, [r3]
			*high_level.power = high_level.radio[2]-1000;
 80017e2:	4b15      	ldr	r3, [pc, #84]	; (8001838 <HIGH_LEVEL_Process_Main+0x278>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	3304      	adds	r3, #4
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 80017ee:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HIGH_LEVEL_Process_Main+0x278>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	ee07 2a90 	vmov	s15, r2
 80017f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017fa:	edc3 7a00 	vstr	s15, [r3]
			if(!is_fly_allowed)
 80017fe:	79bb      	ldrb	r3, [r7, #6]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d103      	bne.n	800180c <HIGH_LEVEL_Process_Main+0x24c>
				high_level.state = high_level_eGROUND;
 8001804:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <HIGH_LEVEL_Process_Main+0x278>)
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
			break;
 800180a:	e00f      	b.n	800182c <HIGH_LEVEL_Process_Main+0x26c>
			else if(high_level.radio[5] < 1300)
 800180c:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <HIGH_LEVEL_Process_Main+0x278>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	330a      	adds	r3, #10
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	f240 5213 	movw	r2, #1299	; 0x513
 8001818:	4293      	cmp	r3, r2
 800181a:	d807      	bhi.n	800182c <HIGH_LEVEL_Process_Main+0x26c>
				high_level.state = high_level_eANGLE;
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HIGH_LEVEL_Process_Main+0x278>)
 800181e:	2202      	movs	r2, #2
 8001820:	701a      	strb	r2, [r3, #0]
			break;
 8001822:	e003      	b.n	800182c <HIGH_LEVEL_Process_Main+0x26c>
			break;
 8001824:	bf00      	nop
 8001826:	e002      	b.n	800182e <HIGH_LEVEL_Process_Main+0x26e>
			break;
 8001828:	bf00      	nop
 800182a:	e000      	b.n	800182e <HIGH_LEVEL_Process_Main+0x26e>
			break;
 800182c:	bf00      	nop
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000320 	.word	0x20000320
 800183c:	3dcccccd 	.word	0x3dcccccd
 8001840:	3f333333 	.word	0x3f333333

08001844 <Led_main_ms>:

/*
 * @brief called by main_ms, turn the led on or off to follow the sequence
 */
void Led_main_ms(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
	for (uint8_t led = 0; led < led_eCOUNT; led++)
 800184a:	2300      	movs	r3, #0
 800184c:	71fb      	strb	r3, [r7, #7]
 800184e:	e043      	b.n	80018d8 <Led_main_ms+0x94>
	{
		if (current_sequence[led] != led_sequence_eSEQUENCE_DISABLED)
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	4a25      	ldr	r2, [pc, #148]	; (80018e8 <Led_main_ms+0xa4>)
 8001854:	5cd3      	ldrb	r3, [r2, r3]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d03b      	beq.n	80018d2 <Led_main_ms+0x8e>
		{
			counter[led]++;
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	4a23      	ldr	r2, [pc, #140]	; (80018ec <Led_main_ms+0xa8>)
 800185e:	5cd2      	ldrb	r2, [r2, r3]
 8001860:	3201      	adds	r2, #1
 8001862:	b2d1      	uxtb	r1, r2
 8001864:	4a21      	ldr	r2, [pc, #132]	; (80018ec <Led_main_ms+0xa8>)
 8001866:	54d1      	strb	r1, [r2, r3]
			if (counter[led] == LED_PERIOD)
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	4a20      	ldr	r2, [pc, #128]	; (80018ec <Led_main_ms+0xa8>)
 800186c:	5cd3      	ldrb	r3, [r2, r3]
 800186e:	2bc8      	cmp	r3, #200	; 0xc8
 8001870:	d12f      	bne.n	80018d2 <Led_main_ms+0x8e>
			{
				uint8_t current_bit = 1	<< ((SEQUENCE_LENGTH - 1) - sequence_index[led]);
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	4a1e      	ldr	r2, [pc, #120]	; (80018f0 <Led_main_ms+0xac>)
 8001876:	5cd3      	ldrb	r3, [r2, r3]
 8001878:	f1c3 0307 	rsb	r3, r3, #7
 800187c:	2201      	movs	r2, #1
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	71bb      	strb	r3, [r7, #6]
				if (current_sequence[led] & current_bit)
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	4a18      	ldr	r2, [pc, #96]	; (80018e8 <Led_main_ms+0xa4>)
 8001888:	5cd2      	ldrb	r2, [r2, r3]
 800188a:	79bb      	ldrb	r3, [r7, #6]
 800188c:	4013      	ands	r3, r2
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b00      	cmp	r3, #0
 8001892:	d005      	beq.n	80018a0 <Led_main_ms+0x5c>
				{
					Led_Set(led, LED_HIGH);
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	2101      	movs	r1, #1
 8001898:	4618      	mov	r0, r3
 800189a:	f000 f82b 	bl	80018f4 <Led_Set>
 800189e:	e004      	b.n	80018aa <Led_main_ms+0x66>
				}
				else
				{
					Led_Set(led, LED_LOW);
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	2100      	movs	r1, #0
 80018a4:	4618      	mov	r0, r3
 80018a6:	f000 f825 	bl	80018f4 <Led_Set>
				}
				sequence_index[led]++;
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	4a10      	ldr	r2, [pc, #64]	; (80018f0 <Led_main_ms+0xac>)
 80018ae:	5cd2      	ldrb	r2, [r2, r3]
 80018b0:	3201      	adds	r2, #1
 80018b2:	b2d1      	uxtb	r1, r2
 80018b4:	4a0e      	ldr	r2, [pc, #56]	; (80018f0 <Led_main_ms+0xac>)
 80018b6:	54d1      	strb	r1, [r2, r3]
				counter[led] = 0;
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	4a0c      	ldr	r2, [pc, #48]	; (80018ec <Led_main_ms+0xa8>)
 80018bc:	2100      	movs	r1, #0
 80018be:	54d1      	strb	r1, [r2, r3]
				if (sequence_index[led] == 8)
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	4a0b      	ldr	r2, [pc, #44]	; (80018f0 <Led_main_ms+0xac>)
 80018c4:	5cd3      	ldrb	r3, [r2, r3]
 80018c6:	2b08      	cmp	r3, #8
 80018c8:	d103      	bne.n	80018d2 <Led_main_ms+0x8e>
				{
					sequence_index[led] = 0;
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	4a08      	ldr	r2, [pc, #32]	; (80018f0 <Led_main_ms+0xac>)
 80018ce:	2100      	movs	r1, #0
 80018d0:	54d1      	strb	r1, [r2, r3]
	for (uint8_t led = 0; led < led_eCOUNT; led++)
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	3301      	adds	r3, #1
 80018d6:	71fb      	strb	r3, [r7, #7]
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d9b8      	bls.n	8001850 <Led_main_ms+0xc>
				}
			}
		}
	}
}
 80018de:	bf00      	nop
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20000334 	.word	0x20000334
 80018ec:	2000033c 	.word	0x2000033c
 80018f0:	20000338 	.word	0x20000338

080018f4 <Led_Set>:
/*
 * @brief Set the state of the led
 * @param state State of the led to set
 */
void Led_Set(led_t led, LED_state_e state)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	460a      	mov	r2, r1
 80018fe:	71fb      	strb	r3, [r7, #7]
 8001900:	4613      	mov	r3, r2
 8001902:	71bb      	strb	r3, [r7, #6]
	switch (led)
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d002      	beq.n	8001910 <Led_Set+0x1c>
 800190a:	2b01      	cmp	r3, #1
 800190c:	d008      	beq.n	8001920 <Led_Set+0x2c>
			break;
		case led_eSTATE2:
			GPIO_Write_Pin(LED_STATE2_GPIO_Port, LED_STATE2_Pin, (GPIO_state_e) state);
			break;
		default:
			break;
 800190e:	e00f      	b.n	8001930 <Led_Set+0x3c>
			GPIO_Write_Pin(LED_STATE_GPIO_Port, LED_STATE_Pin, (GPIO_state_e) state);
 8001910:	79bb      	ldrb	r3, [r7, #6]
 8001912:	461a      	mov	r2, r3
 8001914:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001918:	4807      	ldr	r0, [pc, #28]	; (8001938 <Led_Set+0x44>)
 800191a:	f000 fa25 	bl	8001d68 <GPIO_Write_Pin>
			break;
 800191e:	e007      	b.n	8001930 <Led_Set+0x3c>
			GPIO_Write_Pin(LED_STATE2_GPIO_Port, LED_STATE2_Pin, (GPIO_state_e) state);
 8001920:	79bb      	ldrb	r3, [r7, #6]
 8001922:	461a      	mov	r2, r3
 8001924:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001928:	4803      	ldr	r0, [pc, #12]	; (8001938 <Led_Set+0x44>)
 800192a:	f000 fa1d 	bl	8001d68 <GPIO_Write_Pin>
			break;
 800192e:	bf00      	nop
	}
}
 8001930:	bf00      	nop
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40020800 	.word	0x40020800

0800193c <Led_Set_Sequence>:
/*
 * @brief Set the current led sequence
 * @param sequence The new sequence
 */
void Led_Set_Sequence(led_t led, led_sequence_e sequence)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	460a      	mov	r2, r1
 8001946:	71fb      	strb	r3, [r7, #7]
 8001948:	4613      	mov	r3, r2
 800194a:	71bb      	strb	r3, [r7, #6]
	if(current_sequence[led] == sequence)
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	4a0c      	ldr	r2, [pc, #48]	; (8001980 <Led_Set_Sequence+0x44>)
 8001950:	5cd3      	ldrb	r3, [r2, r3]
 8001952:	79ba      	ldrb	r2, [r7, #6]
 8001954:	429a      	cmp	r2, r3
 8001956:	d00c      	beq.n	8001972 <Led_Set_Sequence+0x36>
	{
		return;
	}
	/* Change the current led sequence */
	current_sequence[led] = sequence;
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	4909      	ldr	r1, [pc, #36]	; (8001980 <Led_Set_Sequence+0x44>)
 800195c:	79ba      	ldrb	r2, [r7, #6]
 800195e:	54ca      	strb	r2, [r1, r3]
	/* Reset counters to start from the beginning of the sequence */
	counter[led] = 0;
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	4a08      	ldr	r2, [pc, #32]	; (8001984 <Led_Set_Sequence+0x48>)
 8001964:	2100      	movs	r1, #0
 8001966:	54d1      	strb	r1, [r2, r3]
	sequence_index[led] = 0;
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	4a07      	ldr	r2, [pc, #28]	; (8001988 <Led_Set_Sequence+0x4c>)
 800196c:	2100      	movs	r1, #0
 800196e:	54d1      	strb	r1, [r2, r3]
 8001970:	e000      	b.n	8001974 <Led_Set_Sequence+0x38>
		return;
 8001972:	bf00      	nop
}
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	20000334 	.word	0x20000334
 8001984:	2000033c 	.word	0x2000033c
 8001988:	20000338 	.word	0x20000338

0800198c <MOTOR_MIXER_Process>:
#include "Motor_Mixer.h"

static motor_mixer_t motor_mixer = { 0 };

void MOTOR_MIXER_Process(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
	motor_mixer.output[motor_eFRONT_LEFT] = 	motor_mixer.input_power + motor_mixer.input_angle[axe_eROLL] - motor_mixer.input_angle[axe_ePITCH] - motor_mixer.input_angle[axe_eYAW];
 8001990:	4b2c      	ldr	r3, [pc, #176]	; (8001a44 <MOTOR_MIXER_Process+0xb8>)
 8001992:	ed93 7a03 	vldr	s14, [r3, #12]
 8001996:	4b2b      	ldr	r3, [pc, #172]	; (8001a44 <MOTOR_MIXER_Process+0xb8>)
 8001998:	edd3 7a00 	vldr	s15, [r3]
 800199c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019a0:	4b28      	ldr	r3, [pc, #160]	; (8001a44 <MOTOR_MIXER_Process+0xb8>)
 80019a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80019a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019aa:	4b26      	ldr	r3, [pc, #152]	; (8001a44 <MOTOR_MIXER_Process+0xb8>)
 80019ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80019b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019b4:	4b23      	ldr	r3, [pc, #140]	; (8001a44 <MOTOR_MIXER_Process+0xb8>)
 80019b6:	edc3 7a07 	vstr	s15, [r3, #28]
	motor_mixer.output[motor_eFRONT_RIGHT] = 	motor_mixer.input_power - motor_mixer.input_angle[axe_eROLL] - motor_mixer.input_angle[axe_ePITCH] + motor_mixer.input_angle[axe_eYAW];
 80019ba:	4b22      	ldr	r3, [pc, #136]	; (8001a44 <MOTOR_MIXER_Process+0xb8>)
 80019bc:	ed93 7a03 	vldr	s14, [r3, #12]
 80019c0:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <MOTOR_MIXER_Process+0xb8>)
 80019c2:	edd3 7a00 	vldr	s15, [r3]
 80019c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019ca:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <MOTOR_MIXER_Process+0xb8>)
 80019cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80019d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019d4:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <MOTOR_MIXER_Process+0xb8>)
 80019d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80019da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019de:	4b19      	ldr	r3, [pc, #100]	; (8001a44 <MOTOR_MIXER_Process+0xb8>)
 80019e0:	edc3 7a05 	vstr	s15, [r3, #20]
	motor_mixer.output[motor_eBACK_RIGHT] = 	motor_mixer.input_power - motor_mixer.input_angle[axe_eROLL] + motor_mixer.input_angle[axe_ePITCH] - motor_mixer.input_angle[axe_eYAW];
 80019e4:	4b17      	ldr	r3, [pc, #92]	; (8001a44 <MOTOR_MIXER_Process+0xb8>)
 80019e6:	ed93 7a03 	vldr	s14, [r3, #12]
 80019ea:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <MOTOR_MIXER_Process+0xb8>)
 80019ec:	edd3 7a00 	vldr	s15, [r3]
 80019f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019f4:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <MOTOR_MIXER_Process+0xb8>)
 80019f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80019fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019fe:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <MOTOR_MIXER_Process+0xb8>)
 8001a00:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a08:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <MOTOR_MIXER_Process+0xb8>)
 8001a0a:	edc3 7a04 	vstr	s15, [r3, #16]
	motor_mixer.output[motor_eBACK_LEFT] = 		motor_mixer.input_power + motor_mixer.input_angle[axe_eROLL] + motor_mixer.input_angle[axe_ePITCH] + motor_mixer.input_angle[axe_eYAW];
 8001a0e:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <MOTOR_MIXER_Process+0xb8>)
 8001a10:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <MOTOR_MIXER_Process+0xb8>)
 8001a16:	edd3 7a00 	vldr	s15, [r3]
 8001a1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a1e:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <MOTOR_MIXER_Process+0xb8>)
 8001a20:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <MOTOR_MIXER_Process+0xb8>)
 8001a2a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a32:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <MOTOR_MIXER_Process+0xb8>)
 8001a34:	edc3 7a06 	vstr	s15, [r3, #24]

	MOTOR_Set(motor_mixer.output);
 8001a38:	4803      	ldr	r0, [pc, #12]	; (8001a48 <MOTOR_MIXER_Process+0xbc>)
 8001a3a:	f000 f863 	bl	8001b04 <MOTOR_Set>
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000340 	.word	0x20000340
 8001a48:	20000350 	.word	0x20000350

08001a4c <MOTOR_MIXER_Get_Angle_Input_Ptr>:
float * MOTOR_MIXER_Get_Angle_Input_Ptr(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
	return motor_mixer.input_angle;
 8001a50:	4b02      	ldr	r3, [pc, #8]	; (8001a5c <MOTOR_MIXER_Get_Angle_Input_Ptr+0x10>)
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	20000340 	.word	0x20000340

08001a60 <MOTOR_MIXER_Get_Power_Input_Ptr>:
float * MOTOR_MIXER_Get_Power_Input_Ptr(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
	return &motor_mixer.input_power;
 8001a64:	4b02      	ldr	r3, [pc, #8]	; (8001a70 <MOTOR_MIXER_Get_Power_Input_Ptr+0x10>)
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	2000034c 	.word	0x2000034c

08001a74 <MOTOR_Init>:
static bool_e flag_stop = FALSE;



void MOTOR_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
	 TIMER_Start_All_Channels(TIMER_MOTOR);
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f000 fa0b 	bl	8001e94 <TIMER_Start_All_Channels>
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <MOTOR_Process>:

void MOTOR_Process(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
	if(flag_stop)
 8001a88:	4b1a      	ldr	r3, [pc, #104]	; (8001af4 <MOTOR_Process+0x70>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d009      	beq.n	8001aa4 <MOTOR_Process+0x20>
	{
		/* Clear flag */
		flag_stop = FALSE;
 8001a90:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <MOTOR_Process+0x70>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	701a      	strb	r2, [r3, #0]
		/* Stop pwm on every channel */
		TIMER_Stop_All_Channels(TIMER_MOTOR);
 8001a96:	2000      	movs	r0, #0
 8001a98:	f000 fa28 	bl	8001eec <TIMER_Stop_All_Channels>
		motor.is_enabled = FALSE;
 8001a9c:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <MOTOR_Process+0x74>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	701a      	strb	r2, [r3, #0]
 8001aa2:	e01c      	b.n	8001ade <MOTOR_Process+0x5a>
	}
	else if(flag_start)
 8001aa4:	4b15      	ldr	r3, [pc, #84]	; (8001afc <MOTOR_Process+0x78>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d018      	beq.n	8001ade <MOTOR_Process+0x5a>
	{
		/* Clear flag */
		flag_start = FALSE;
 8001aac:	4b13      	ldr	r3, [pc, #76]	; (8001afc <MOTOR_Process+0x78>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	701a      	strb	r2, [r3, #0]
		/* Reset target to 0 */
		motor.output[0] = 1000;
 8001ab2:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <MOTOR_Process+0x74>)
 8001ab4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ab8:	805a      	strh	r2, [r3, #2]
		motor.output[1] = 1000;
 8001aba:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <MOTOR_Process+0x74>)
 8001abc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ac0:	809a      	strh	r2, [r3, #4]
		motor.output[2] = 1000;
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <MOTOR_Process+0x74>)
 8001ac4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ac8:	80da      	strh	r2, [r3, #6]
		motor.output[3] = 1000;
 8001aca:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <MOTOR_Process+0x74>)
 8001acc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ad0:	811a      	strh	r2, [r3, #8]
		/* Start the pwm */
		TIMER_Start_All_Channels(TIMER_MOTOR);
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	f000 f9de 	bl	8001e94 <TIMER_Start_All_Channels>
		motor.is_enabled = TRUE;
 8001ad8:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <MOTOR_Process+0x74>)
 8001ada:	2201      	movs	r2, #1
 8001adc:	701a      	strb	r2, [r3, #0]
	}
	if(motor.is_enabled)
 8001ade:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <MOTOR_Process+0x74>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <MOTOR_Process+0x6a>
	{
		TIMER_Set_All_CCR(TIMER_MOTOR, motor.output);
 8001ae6:	4906      	ldr	r1, [pc, #24]	; (8001b00 <MOTOR_Process+0x7c>)
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f000 fa2b 	bl	8001f44 <TIMER_Set_All_CCR>
	}
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	2000036a 	.word	0x2000036a
 8001af8:	20000360 	.word	0x20000360
 8001afc:	20000099 	.word	0x20000099
 8001b00:	20000362 	.word	0x20000362

08001b04 <MOTOR_Set>:
/*
 * @brief update motor target values
 * @param array of new float values
 */
void MOTOR_Set(float * target)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
	target[0] = (uint16_t)MAX(target[0], 0);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	edd3 7a00 	vldr	s15, [r3]
 8001b12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b1a:	dd0c      	ble.n	8001b36 <MOTOR_Set+0x32>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	edd3 7a00 	vldr	s15, [r3]
 8001b22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b26:	ee17 3a90 	vmov	r3, s15
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	ee07 3a90 	vmov	s15, r3
 8001b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b34:	e001      	b.n	8001b3a <MOTOR_Set+0x36>
 8001b36:	eddf 7a89 	vldr	s15, [pc, #548]	; 8001d5c <MOTOR_Set+0x258>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	edc3 7a00 	vstr	s15, [r3]
	target[1] = (uint16_t)MAX(target[1], 0);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3304      	adds	r3, #4
 8001b44:	edd3 7a00 	vldr	s15, [r3]
 8001b48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b50:	dd0d      	ble.n	8001b6e <MOTOR_Set+0x6a>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	3304      	adds	r3, #4
 8001b56:	edd3 7a00 	vldr	s15, [r3]
 8001b5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b5e:	ee17 3a90 	vmov	r3, s15
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	ee07 3a90 	vmov	s15, r3
 8001b68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b6c:	e001      	b.n	8001b72 <MOTOR_Set+0x6e>
 8001b6e:	eddf 7a7b 	vldr	s15, [pc, #492]	; 8001d5c <MOTOR_Set+0x258>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3304      	adds	r3, #4
 8001b76:	edc3 7a00 	vstr	s15, [r3]
	target[2] = (uint16_t)MAX(target[2], 0);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	3308      	adds	r3, #8
 8001b7e:	edd3 7a00 	vldr	s15, [r3]
 8001b82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8a:	dd0d      	ble.n	8001ba8 <MOTOR_Set+0xa4>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3308      	adds	r3, #8
 8001b90:	edd3 7a00 	vldr	s15, [r3]
 8001b94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b98:	ee17 3a90 	vmov	r3, s15
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	ee07 3a90 	vmov	s15, r3
 8001ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ba6:	e001      	b.n	8001bac <MOTOR_Set+0xa8>
 8001ba8:	eddf 7a6c 	vldr	s15, [pc, #432]	; 8001d5c <MOTOR_Set+0x258>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3308      	adds	r3, #8
 8001bb0:	edc3 7a00 	vstr	s15, [r3]
	target[3] = (uint16_t)MAX(target[3], 0);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	330c      	adds	r3, #12
 8001bb8:	edd3 7a00 	vldr	s15, [r3]
 8001bbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc4:	dd0d      	ble.n	8001be2 <MOTOR_Set+0xde>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	330c      	adds	r3, #12
 8001bca:	edd3 7a00 	vldr	s15, [r3]
 8001bce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bd2:	ee17 3a90 	vmov	r3, s15
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	ee07 3a90 	vmov	s15, r3
 8001bdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001be0:	e001      	b.n	8001be6 <MOTOR_Set+0xe2>
 8001be2:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8001d5c <MOTOR_Set+0x258>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	330c      	adds	r3, #12
 8001bea:	edc3 7a00 	vstr	s15, [r3]

	target[0] = (uint16_t)MIN(target[0], MOTOR_SIGNAL_MAX);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	edd3 7a00 	vldr	s15, [r3]
 8001bf4:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001d60 <MOTOR_Set+0x25c>
 8001bf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c00:	dd02      	ble.n	8001c08 <MOTOR_Set+0x104>
 8001c02:	eddf 7a57 	vldr	s15, [pc, #348]	; 8001d60 <MOTOR_Set+0x25c>
 8001c06:	e00b      	b.n	8001c20 <MOTOR_Set+0x11c>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	edd3 7a00 	vldr	s15, [r3]
 8001c0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c12:	ee17 3a90 	vmov	r3, s15
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	ee07 3a90 	vmov	s15, r3
 8001c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	edc3 7a00 	vstr	s15, [r3]
	target[1] = (uint16_t)MIN(target[1], MOTOR_SIGNAL_MAX);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3304      	adds	r3, #4
 8001c2a:	edd3 7a00 	vldr	s15, [r3]
 8001c2e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001d60 <MOTOR_Set+0x25c>
 8001c32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3a:	dd02      	ble.n	8001c42 <MOTOR_Set+0x13e>
 8001c3c:	eddf 7a48 	vldr	s15, [pc, #288]	; 8001d60 <MOTOR_Set+0x25c>
 8001c40:	e00c      	b.n	8001c5c <MOTOR_Set+0x158>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	3304      	adds	r3, #4
 8001c46:	edd3 7a00 	vldr	s15, [r3]
 8001c4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c4e:	ee17 3a90 	vmov	r3, s15
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	ee07 3a90 	vmov	s15, r3
 8001c58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3304      	adds	r3, #4
 8001c60:	edc3 7a00 	vstr	s15, [r3]
	target[2] = (uint16_t)MIN(target[2], MOTOR_SIGNAL_MAX);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3308      	adds	r3, #8
 8001c68:	edd3 7a00 	vldr	s15, [r3]
 8001c6c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001d60 <MOTOR_Set+0x25c>
 8001c70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c78:	dd02      	ble.n	8001c80 <MOTOR_Set+0x17c>
 8001c7a:	eddf 7a39 	vldr	s15, [pc, #228]	; 8001d60 <MOTOR_Set+0x25c>
 8001c7e:	e00c      	b.n	8001c9a <MOTOR_Set+0x196>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3308      	adds	r3, #8
 8001c84:	edd3 7a00 	vldr	s15, [r3]
 8001c88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c8c:	ee17 3a90 	vmov	r3, s15
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	ee07 3a90 	vmov	s15, r3
 8001c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3308      	adds	r3, #8
 8001c9e:	edc3 7a00 	vstr	s15, [r3]
	target[3] = (uint16_t)MIN(target[3], MOTOR_SIGNAL_MAX);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	330c      	adds	r3, #12
 8001ca6:	edd3 7a00 	vldr	s15, [r3]
 8001caa:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001d60 <MOTOR_Set+0x25c>
 8001cae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb6:	dd02      	ble.n	8001cbe <MOTOR_Set+0x1ba>
 8001cb8:	eddf 7a29 	vldr	s15, [pc, #164]	; 8001d60 <MOTOR_Set+0x25c>
 8001cbc:	e00c      	b.n	8001cd8 <MOTOR_Set+0x1d4>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	330c      	adds	r3, #12
 8001cc2:	edd3 7a00 	vldr	s15, [r3]
 8001cc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cca:	ee17 3a90 	vmov	r3, s15
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	ee07 3a90 	vmov	s15, r3
 8001cd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	330c      	adds	r3, #12
 8001cdc:	edc3 7a00 	vstr	s15, [r3]

	motor.output[0] = (uint16_t)target[0]+1000;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	edd3 7a00 	vldr	s15, [r3]
 8001ce6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cea:	ee17 3a90 	vmov	r3, s15
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	4b1b      	ldr	r3, [pc, #108]	; (8001d64 <MOTOR_Set+0x260>)
 8001cf8:	805a      	strh	r2, [r3, #2]
	motor.output[1] = (uint16_t)target[1]+1000;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	edd3 7a00 	vldr	s15, [r3]
 8001d02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d06:	ee17 3a90 	vmov	r3, s15
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	4b14      	ldr	r3, [pc, #80]	; (8001d64 <MOTOR_Set+0x260>)
 8001d14:	809a      	strh	r2, [r3, #4]
	motor.output[2] = (uint16_t)target[2]+1000;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	3308      	adds	r3, #8
 8001d1a:	edd3 7a00 	vldr	s15, [r3]
 8001d1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d22:	ee17 3a90 	vmov	r3, s15
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <MOTOR_Set+0x260>)
 8001d30:	80da      	strh	r2, [r3, #6]
	motor.output[3] = (uint16_t)target[3]+1000;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	330c      	adds	r3, #12
 8001d36:	edd3 7a00 	vldr	s15, [r3]
 8001d3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d3e:	ee17 3a90 	vmov	r3, s15
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <MOTOR_Set+0x260>)
 8001d4c:	811a      	strh	r2, [r3, #8]
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	00000000 	.word	0x00000000
 8001d60:	43fa0000 	.word	0x43fa0000
 8001d64:	20000360 	.word	0x20000360

08001d68 <GPIO_Write_Pin>:
 * @param GPIOx pointer to an hal gpio handler structure
 * @param GPIO_Pin Number of the pin
 * @param state State to write to the pin
 */
void GPIO_Write_Pin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_state_e state)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	807b      	strh	r3, [r7, #2]
 8001d74:	4613      	mov	r3, r2
 8001d76:	707b      	strb	r3, [r7, #1]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, state);
 8001d78:	787a      	ldrb	r2, [r7, #1]
 8001d7a:	887b      	ldrh	r3, [r7, #2]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f002 ff78 	bl	8004c74 <HAL_GPIO_WritePin>
}
 8001d84:	bf00      	nop
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <I2C_Mem_Write>:

void I2C_Init(void)
{
}
HAL_StatusTypeDef I2C_Mem_Write(i2c_e i2c_id, uint8_t device_address, uint8_t mem_address, uint8_t * data, uint8_t size)
{
 8001d8c:	b590      	push	{r4, r7, lr}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af04      	add	r7, sp, #16
 8001d92:	603b      	str	r3, [r7, #0]
 8001d94:	4603      	mov	r3, r0
 8001d96:	71fb      	strb	r3, [r7, #7]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	71bb      	strb	r3, [r7, #6]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Write(i2c[i2c_id].hi2c, device_address, mem_address, I2C_MEMADD_SIZE_8BIT, data, size, I2C_OPERATION_TIMEOUT);
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	4a0b      	ldr	r2, [pc, #44]	; (8001dd0 <I2C_Mem_Write+0x44>)
 8001da4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001da8:	79bb      	ldrb	r3, [r7, #6]
 8001daa:	b299      	uxth	r1, r3
 8001dac:	797b      	ldrb	r3, [r7, #5]
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	7e3b      	ldrb	r3, [r7, #24]
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	240a      	movs	r4, #10
 8001db6:	9402      	str	r4, [sp, #8]
 8001db8:	9301      	str	r3, [sp, #4]
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	f003 f8b6 	bl	8004f30 <HAL_I2C_Mem_Write>
 8001dc4:	4603      	mov	r3, r0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd90      	pop	{r4, r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	2000009c 	.word	0x2000009c

08001dd4 <I2C_Mem_Read>:

HAL_StatusTypeDef I2C_Mem_Read(i2c_e i2c_id, uint8_t device_address, uint8_t mem_address, uint8_t * data, uint8_t size)
{
 8001dd4:	b590      	push	{r4, r7, lr}
 8001dd6:	b087      	sub	sp, #28
 8001dd8:	af04      	add	r7, sp, #16
 8001dda:	603b      	str	r3, [r7, #0]
 8001ddc:	4603      	mov	r3, r0
 8001dde:	71fb      	strb	r3, [r7, #7]
 8001de0:	460b      	mov	r3, r1
 8001de2:	71bb      	strb	r3, [r7, #6]
 8001de4:	4613      	mov	r3, r2
 8001de6:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Read(i2c[i2c_id].hi2c, device_address, mem_address, I2C_MEMADD_SIZE_8BIT, data, size, I2C_OPERATION_TIMEOUT);
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	4a0b      	ldr	r2, [pc, #44]	; (8001e18 <I2C_Mem_Read+0x44>)
 8001dec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001df0:	79bb      	ldrb	r3, [r7, #6]
 8001df2:	b299      	uxth	r1, r3
 8001df4:	797b      	ldrb	r3, [r7, #5]
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	7e3b      	ldrb	r3, [r7, #24]
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	240a      	movs	r4, #10
 8001dfe:	9402      	str	r4, [sp, #8]
 8001e00:	9301      	str	r3, [sp, #4]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	2301      	movs	r3, #1
 8001e08:	f003 f98c 	bl	8005124 <HAL_I2C_Mem_Read>
 8001e0c:	4603      	mov	r3, r0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd90      	pop	{r4, r7, pc}
 8001e16:	bf00      	nop
 8001e18:	2000009c 	.word	0x2000009c

08001e1c <I2C_Mem_Read_Dma>:

HAL_StatusTypeDef I2C_Mem_Read_Dma(i2c_e i2c_id, uint8_t device_address, uint8_t mem_address, uint8_t * data, uint8_t size)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af02      	add	r7, sp, #8
 8001e22:	603b      	str	r3, [r7, #0]
 8001e24:	4603      	mov	r3, r0
 8001e26:	71fb      	strb	r3, [r7, #7]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	71bb      	strb	r3, [r7, #6]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Read_DMA(i2c[i2c_id].hi2c, device_address, mem_address, I2C_MEMADD_SIZE_8BIT, data, size);
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	4a0a      	ldr	r2, [pc, #40]	; (8001e5c <I2C_Mem_Read_Dma+0x40>)
 8001e34:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001e38:	79bb      	ldrb	r3, [r7, #6]
 8001e3a:	b299      	uxth	r1, r3
 8001e3c:	797b      	ldrb	r3, [r7, #5]
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	7c3b      	ldrb	r3, [r7, #16]
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	9301      	str	r3, [sp, #4]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	f003 fb90 	bl	8005570 <HAL_I2C_Mem_Read_DMA>
 8001e50:	4603      	mov	r3, r0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	2000009c 	.word	0x2000009c

08001e60 <I2C_Is_Device_Ready>:

HAL_StatusTypeDef I2C_Is_Device_Ready(i2c_e i2c_id, uint8_t device_address)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	460a      	mov	r2, r1
 8001e6a:	71fb      	strb	r3, [r7, #7]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	71bb      	strb	r3, [r7, #6]
	return HAL_I2C_IsDeviceReady(i2c[i2c_id].hi2c, device_address, 10, 10);
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	4a07      	ldr	r2, [pc, #28]	; (8001e90 <I2C_Is_Device_Ready+0x30>)
 8001e74:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001e78:	79bb      	ldrb	r3, [r7, #6]
 8001e7a:	b299      	uxth	r1, r3
 8001e7c:	230a      	movs	r3, #10
 8001e7e:	220a      	movs	r2, #10
 8001e80:	f003 fd0a 	bl	8005898 <HAL_I2C_IsDeviceReady>
 8001e84:	4603      	mov	r3, r0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	2000009c 	.word	0x2000009c

08001e94 <TIMER_Start_All_Channels>:
/*
 * @brief Start all channels of a timer
 * @param timer_id id of the timer
 */
void TIMER_Start_All_Channels(timer_e timer_id)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	71fb      	strb	r3, [r7, #7]
	HAL_TIM_PWM_Start(timer[timer_id].htim, TIM_CHANNEL_1);
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	4a11      	ldr	r2, [pc, #68]	; (8001ee8 <TIMER_Start_All_Channels+0x54>)
 8001ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f006 fc47 	bl	800873c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer[timer_id].htim, TIM_CHANNEL_2);
 8001eae:	79fb      	ldrb	r3, [r7, #7]
 8001eb0:	4a0d      	ldr	r2, [pc, #52]	; (8001ee8 <TIMER_Start_All_Channels+0x54>)
 8001eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb6:	2104      	movs	r1, #4
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f006 fc3f 	bl	800873c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer[timer_id].htim, TIM_CHANNEL_3);
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	4a09      	ldr	r2, [pc, #36]	; (8001ee8 <TIMER_Start_All_Channels+0x54>)
 8001ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec6:	2108      	movs	r1, #8
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f006 fc37 	bl	800873c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer[timer_id].htim, TIM_CHANNEL_4);
 8001ece:	79fb      	ldrb	r3, [r7, #7]
 8001ed0:	4a05      	ldr	r2, [pc, #20]	; (8001ee8 <TIMER_Start_All_Channels+0x54>)
 8001ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed6:	210c      	movs	r1, #12
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f006 fc2f 	bl	800873c <HAL_TIM_PWM_Start>
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	200000a0 	.word	0x200000a0

08001eec <TIMER_Stop_All_Channels>:
/*
 * @brief Stop all channels of a timer
 * @param timer_id id of the timer
 */
void TIMER_Stop_All_Channels(timer_e timer_id)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	71fb      	strb	r3, [r7, #7]
	HAL_TIM_PWM_Stop(timer[timer_id].htim, TIM_CHANNEL_1);
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	4a11      	ldr	r2, [pc, #68]	; (8001f40 <TIMER_Stop_All_Channels+0x54>)
 8001efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f006 fce3 	bl	80088cc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(timer[timer_id].htim, TIM_CHANNEL_2);
 8001f06:	79fb      	ldrb	r3, [r7, #7]
 8001f08:	4a0d      	ldr	r2, [pc, #52]	; (8001f40 <TIMER_Stop_All_Channels+0x54>)
 8001f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f0e:	2104      	movs	r1, #4
 8001f10:	4618      	mov	r0, r3
 8001f12:	f006 fcdb 	bl	80088cc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(timer[timer_id].htim, TIM_CHANNEL_3);
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	4a09      	ldr	r2, [pc, #36]	; (8001f40 <TIMER_Stop_All_Channels+0x54>)
 8001f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f1e:	2108      	movs	r1, #8
 8001f20:	4618      	mov	r0, r3
 8001f22:	f006 fcd3 	bl	80088cc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(timer[timer_id].htim, TIM_CHANNEL_4);
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	4a05      	ldr	r2, [pc, #20]	; (8001f40 <TIMER_Stop_All_Channels+0x54>)
 8001f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f2e:	210c      	movs	r1, #12
 8001f30:	4618      	mov	r0, r3
 8001f32:	f006 fccb 	bl	80088cc <HAL_TIM_PWM_Stop>
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200000a0 	.word	0x200000a0

08001f44 <TIMER_Set_All_CCR>:
 * @brief Set new capture compare values
 * @param tiemr_id The timer to use
 * @param values The new values
 */
void TIMER_Set_All_CCR(timer_e timer_id, uint16_t * values)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	6039      	str	r1, [r7, #0]
 8001f4e:	71fb      	strb	r3, [r7, #7]
	timer[timer_id].htim->Instance->CCR1 = values[0];
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	8819      	ldrh	r1, [r3, #0]
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	4a15      	ldr	r2, [pc, #84]	; (8001fac <TIMER_Set_All_CCR+0x68>)
 8001f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	460a      	mov	r2, r1
 8001f60:	635a      	str	r2, [r3, #52]	; 0x34
	timer[timer_id].htim->Instance->CCR2 = values[1];
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	3302      	adds	r3, #2
 8001f66:	8819      	ldrh	r1, [r3, #0]
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	4a10      	ldr	r2, [pc, #64]	; (8001fac <TIMER_Set_All_CCR+0x68>)
 8001f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	460a      	mov	r2, r1
 8001f74:	639a      	str	r2, [r3, #56]	; 0x38
	timer[timer_id].htim->Instance->CCR3 = values[2];
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	3304      	adds	r3, #4
 8001f7a:	8819      	ldrh	r1, [r3, #0]
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	4a0b      	ldr	r2, [pc, #44]	; (8001fac <TIMER_Set_All_CCR+0x68>)
 8001f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	460a      	mov	r2, r1
 8001f88:	63da      	str	r2, [r3, #60]	; 0x3c
	timer[timer_id].htim->Instance->CCR4 = values[3];
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	3306      	adds	r3, #6
 8001f8e:	8819      	ldrh	r1, [r3, #0]
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	4a06      	ldr	r2, [pc, #24]	; (8001fac <TIMER_Set_All_CCR+0x68>)
 8001f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	460a      	mov	r2, r1
 8001f9c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	200000a0 	.word	0x200000a0

08001fb0 <UART_Idle_Line_Callback>:
/* -------------------------- Public callback functions -------------------------- */
/*
 * @brief Update the read index when the idle flag is raised
 */
void UART_Idle_Line_Callback(uart_e id)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	71fb      	strb	r3, [r7, #7]
	if(__HAL_UART_GET_FLAG(uart[id].huart, UART_FLAG_IDLE))
 8001fba:	79fa      	ldrb	r2, [r7, #7]
 8001fbc:	4922      	ldr	r1, [pc, #136]	; (8002048 <UART_Idle_Line_Callback+0x98>)
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	019b      	lsls	r3, r3, #6
 8001fc2:	4413      	add	r3, r2
 8001fc4:	011b      	lsls	r3, r3, #4
 8001fc6:	440b      	add	r3, r1
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0310 	and.w	r3, r3, #16
 8001fd2:	2b10      	cmp	r3, #16
 8001fd4:	d132      	bne.n	800203c <UART_Idle_Line_Callback+0x8c>
	{
		uart[id].index_write_rx = LEN_BUFFER - uart[id].huart->hdmarx->Instance->NDTR ;
 8001fd6:	79fa      	ldrb	r2, [r7, #7]
 8001fd8:	491b      	ldr	r1, [pc, #108]	; (8002048 <UART_Idle_Line_Callback+0x98>)
 8001fda:	4613      	mov	r3, r2
 8001fdc:	019b      	lsls	r3, r3, #6
 8001fde:	4413      	add	r3, r2
 8001fe0:	011b      	lsls	r3, r3, #4
 8001fe2:	440b      	add	r3, r1
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	79fa      	ldrb	r2, [r7, #7]
 8001ff0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001ff4:	b298      	uxth	r0, r3
 8001ff6:	4914      	ldr	r1, [pc, #80]	; (8002048 <UART_Idle_Line_Callback+0x98>)
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	019b      	lsls	r3, r3, #6
 8001ffc:	4413      	add	r3, r2
 8001ffe:	011b      	lsls	r3, r3, #4
 8002000:	440b      	add	r3, r1
 8002002:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8002006:	4602      	mov	r2, r0
 8002008:	801a      	strh	r2, [r3, #0]
	  __HAL_UART_CLEAR_IDLEFLAG(uart[id].huart);
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	79fa      	ldrb	r2, [r7, #7]
 8002010:	490d      	ldr	r1, [pc, #52]	; (8002048 <UART_Idle_Line_Callback+0x98>)
 8002012:	4613      	mov	r3, r2
 8002014:	019b      	lsls	r3, r3, #6
 8002016:	4413      	add	r3, r2
 8002018:	011b      	lsls	r3, r3, #4
 800201a:	440b      	add	r3, r1
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	79fa      	ldrb	r2, [r7, #7]
 8002026:	4908      	ldr	r1, [pc, #32]	; (8002048 <UART_Idle_Line_Callback+0x98>)
 8002028:	4613      	mov	r3, r2
 800202a:	019b      	lsls	r3, r3, #6
 800202c:	4413      	add	r3, r2
 800202e:	011b      	lsls	r3, r3, #4
 8002030:	440b      	add	r3, r1
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	68fb      	ldr	r3, [r7, #12]
	}
}
 800203c:	bf00      	nop
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	2000036c 	.word	0x2000036c

0800204c <UART_Transfer_Complete_Callback>:

/*
 * @brief Re start the dma transfer if there is data to send or reset the transmission state to idle
 */
void UART_Transfer_Complete_Callback(uart_e id)
{
 800204c:	b590      	push	{r4, r7, lr}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	71fb      	strb	r3, [r7, #7]
	if(uart[id].index_write_tx != uart[id].index_read_tx)
 8002056:	79fa      	ldrb	r2, [r7, #7]
 8002058:	494d      	ldr	r1, [pc, #308]	; (8002190 <UART_Transfer_Complete_Callback+0x144>)
 800205a:	4613      	mov	r3, r2
 800205c:	019b      	lsls	r3, r3, #6
 800205e:	4413      	add	r3, r2
 8002060:	011b      	lsls	r3, r3, #4
 8002062:	440b      	add	r3, r1
 8002064:	f203 2306 	addw	r3, r3, #518	; 0x206
 8002068:	8819      	ldrh	r1, [r3, #0]
 800206a:	79fa      	ldrb	r2, [r7, #7]
 800206c:	4848      	ldr	r0, [pc, #288]	; (8002190 <UART_Transfer_Complete_Callback+0x144>)
 800206e:	4613      	mov	r3, r2
 8002070:	019b      	lsls	r3, r3, #6
 8002072:	4413      	add	r3, r2
 8002074:	011b      	lsls	r3, r3, #4
 8002076:	4403      	add	r3, r0
 8002078:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800207c:	881b      	ldrh	r3, [r3, #0]
 800207e:	4299      	cmp	r1, r3
 8002080:	d077      	beq.n	8002172 <UART_Transfer_Complete_Callback+0x126>
	{
		uint16_t nb_bytes_to_read = 0;
 8002082:	2300      	movs	r3, #0
 8002084:	81fb      	strh	r3, [r7, #14]
		if(uart[id].index_write_tx > uart[id].index_read_tx)
 8002086:	79fa      	ldrb	r2, [r7, #7]
 8002088:	4941      	ldr	r1, [pc, #260]	; (8002190 <UART_Transfer_Complete_Callback+0x144>)
 800208a:	4613      	mov	r3, r2
 800208c:	019b      	lsls	r3, r3, #6
 800208e:	4413      	add	r3, r2
 8002090:	011b      	lsls	r3, r3, #4
 8002092:	440b      	add	r3, r1
 8002094:	f203 2306 	addw	r3, r3, #518	; 0x206
 8002098:	8819      	ldrh	r1, [r3, #0]
 800209a:	79fa      	ldrb	r2, [r7, #7]
 800209c:	483c      	ldr	r0, [pc, #240]	; (8002190 <UART_Transfer_Complete_Callback+0x144>)
 800209e:	4613      	mov	r3, r2
 80020a0:	019b      	lsls	r3, r3, #6
 80020a2:	4413      	add	r3, r2
 80020a4:	011b      	lsls	r3, r3, #4
 80020a6:	4403      	add	r3, r0
 80020a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020ac:	881b      	ldrh	r3, [r3, #0]
 80020ae:	4299      	cmp	r1, r3
 80020b0:	d916      	bls.n	80020e0 <UART_Transfer_Complete_Callback+0x94>
		{
			nb_bytes_to_read = uart[id].index_write_tx - uart[id].index_read_tx;
 80020b2:	79fa      	ldrb	r2, [r7, #7]
 80020b4:	4936      	ldr	r1, [pc, #216]	; (8002190 <UART_Transfer_Complete_Callback+0x144>)
 80020b6:	4613      	mov	r3, r2
 80020b8:	019b      	lsls	r3, r3, #6
 80020ba:	4413      	add	r3, r2
 80020bc:	011b      	lsls	r3, r3, #4
 80020be:	440b      	add	r3, r1
 80020c0:	f203 2306 	addw	r3, r3, #518	; 0x206
 80020c4:	8819      	ldrh	r1, [r3, #0]
 80020c6:	79fa      	ldrb	r2, [r7, #7]
 80020c8:	4831      	ldr	r0, [pc, #196]	; (8002190 <UART_Transfer_Complete_Callback+0x144>)
 80020ca:	4613      	mov	r3, r2
 80020cc:	019b      	lsls	r3, r3, #6
 80020ce:	4413      	add	r3, r2
 80020d0:	011b      	lsls	r3, r3, #4
 80020d2:	4403      	add	r3, r0
 80020d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	1acb      	subs	r3, r1, r3
 80020dc:	81fb      	strh	r3, [r7, #14]
 80020de:	e00c      	b.n	80020fa <UART_Transfer_Complete_Callback+0xae>
		}
		else
		{
			nb_bytes_to_read = LEN_BUFFER - uart[id].index_read_tx;
 80020e0:	79fa      	ldrb	r2, [r7, #7]
 80020e2:	492b      	ldr	r1, [pc, #172]	; (8002190 <UART_Transfer_Complete_Callback+0x144>)
 80020e4:	4613      	mov	r3, r2
 80020e6:	019b      	lsls	r3, r3, #6
 80020e8:	4413      	add	r3, r2
 80020ea:	011b      	lsls	r3, r3, #4
 80020ec:	440b      	add	r3, r1
 80020ee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020f2:	881b      	ldrh	r3, [r3, #0]
 80020f4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80020f8:	81fb      	strh	r3, [r7, #14]
		}
		HAL_UART_Transmit_DMA(uart[id].huart, &uart[id].buffer_tx[uart[id].index_read_tx], nb_bytes_to_read);
 80020fa:	79fa      	ldrb	r2, [r7, #7]
 80020fc:	4924      	ldr	r1, [pc, #144]	; (8002190 <UART_Transfer_Complete_Callback+0x144>)
 80020fe:	4613      	mov	r3, r2
 8002100:	019b      	lsls	r3, r3, #6
 8002102:	4413      	add	r3, r2
 8002104:	011b      	lsls	r3, r3, #4
 8002106:	440b      	add	r3, r1
 8002108:	6818      	ldr	r0, [r3, #0]
 800210a:	79fa      	ldrb	r2, [r7, #7]
 800210c:	79f9      	ldrb	r1, [r7, #7]
 800210e:	4c20      	ldr	r4, [pc, #128]	; (8002190 <UART_Transfer_Complete_Callback+0x144>)
 8002110:	460b      	mov	r3, r1
 8002112:	019b      	lsls	r3, r3, #6
 8002114:	440b      	add	r3, r1
 8002116:	011b      	lsls	r3, r3, #4
 8002118:	4423      	add	r3, r4
 800211a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	4619      	mov	r1, r3
 8002122:	4613      	mov	r3, r2
 8002124:	019b      	lsls	r3, r3, #6
 8002126:	4413      	add	r3, r2
 8002128:	011b      	lsls	r3, r3, #4
 800212a:	440b      	add	r3, r1
 800212c:	4a18      	ldr	r2, [pc, #96]	; (8002190 <UART_Transfer_Complete_Callback+0x144>)
 800212e:	4413      	add	r3, r2
 8002130:	3306      	adds	r3, #6
 8002132:	89fa      	ldrh	r2, [r7, #14]
 8002134:	4619      	mov	r1, r3
 8002136:	f007 f99d 	bl	8009474 <HAL_UART_Transmit_DMA>
		uart[id].index_read_tx = (uart[id].index_read_tx + nb_bytes_to_read) % LEN_BUFFER;
 800213a:	79fa      	ldrb	r2, [r7, #7]
 800213c:	4914      	ldr	r1, [pc, #80]	; (8002190 <UART_Transfer_Complete_Callback+0x144>)
 800213e:	4613      	mov	r3, r2
 8002140:	019b      	lsls	r3, r3, #6
 8002142:	4413      	add	r3, r2
 8002144:	011b      	lsls	r3, r3, #4
 8002146:	440b      	add	r3, r1
 8002148:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800214c:	881a      	ldrh	r2, [r3, #0]
 800214e:	89fb      	ldrh	r3, [r7, #14]
 8002150:	4413      	add	r3, r2
 8002152:	b29b      	uxth	r3, r3
 8002154:	79fa      	ldrb	r2, [r7, #7]
 8002156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800215a:	b298      	uxth	r0, r3
 800215c:	490c      	ldr	r1, [pc, #48]	; (8002190 <UART_Transfer_Complete_Callback+0x144>)
 800215e:	4613      	mov	r3, r2
 8002160:	019b      	lsls	r3, r3, #6
 8002162:	4413      	add	r3, r2
 8002164:	011b      	lsls	r3, r3, #4
 8002166:	440b      	add	r3, r1
 8002168:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800216c:	4602      	mov	r2, r0
 800216e:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		uart[id].transmission_state = transmission_state_eIDLE;
	}
}
 8002170:	e009      	b.n	8002186 <UART_Transfer_Complete_Callback+0x13a>
		uart[id].transmission_state = transmission_state_eIDLE;
 8002172:	79fa      	ldrb	r2, [r7, #7]
 8002174:	4906      	ldr	r1, [pc, #24]	; (8002190 <UART_Transfer_Complete_Callback+0x144>)
 8002176:	4613      	mov	r3, r2
 8002178:	019b      	lsls	r3, r3, #6
 800217a:	4413      	add	r3, r2
 800217c:	011b      	lsls	r3, r3, #4
 800217e:	440b      	add	r3, r1
 8002180:	3305      	adds	r3, #5
 8002182:	2200      	movs	r2, #0
 8002184:	701a      	strb	r2, [r3, #0]
}
 8002186:	bf00      	nop
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	bd90      	pop	{r4, r7, pc}
 800218e:	bf00      	nop
 8002190:	2000036c 	.word	0x2000036c

08002194 <UART_Availables>:
 * @brief Number of byte available in the RX buffer
 * @param id Id of the uart we are interested in
 * @return Number of bytes
 */
uint16_t UART_Availables(uart_e id)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	71fb      	strb	r3, [r7, #7]
	return get_nb_bytes_available(id);
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f000 f955 	bl	8002450 <get_nb_bytes_available>
 80021a6:	4603      	mov	r3, r0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <UART_Get>:
 * 		  Does nothing if there are no characters available
 * @param id Id of the uart
 * @param c Buffer to write the character into
 */
void UART_Get(uart_e id, uint8_t * c)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	6039      	str	r1, [r7, #0]
 80021ba:	71fb      	strb	r3, [r7, #7]
	if(get_nb_bytes_available(id))
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 f946 	bl	8002450 <get_nb_bytes_available>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d035      	beq.n	8002236 <UART_Get+0x86>
	{
		*c = uart[id].buffer_rx[uart[id].index_read_rx];
 80021ca:	79fa      	ldrb	r2, [r7, #7]
 80021cc:	79f9      	ldrb	r1, [r7, #7]
 80021ce:	481c      	ldr	r0, [pc, #112]	; (8002240 <UART_Get+0x90>)
 80021d0:	460b      	mov	r3, r1
 80021d2:	019b      	lsls	r3, r3, #6
 80021d4:	440b      	add	r3, r1
 80021d6:	011b      	lsls	r3, r3, #4
 80021d8:	4403      	add	r3, r0
 80021da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80021de:	881b      	ldrh	r3, [r3, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	4917      	ldr	r1, [pc, #92]	; (8002240 <UART_Get+0x90>)
 80021e4:	4613      	mov	r3, r2
 80021e6:	019b      	lsls	r3, r3, #6
 80021e8:	4413      	add	r3, r2
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	440b      	add	r3, r1
 80021ee:	4403      	add	r3, r0
 80021f0:	f203 230a 	addw	r3, r3, #522	; 0x20a
 80021f4:	781a      	ldrb	r2, [r3, #0]
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	701a      	strb	r2, [r3, #0]
		uart[id].index_read_rx = (uart[id].index_read_rx + 1) % LEN_BUFFER;
 80021fa:	79fa      	ldrb	r2, [r7, #7]
 80021fc:	4910      	ldr	r1, [pc, #64]	; (8002240 <UART_Get+0x90>)
 80021fe:	4613      	mov	r3, r2
 8002200:	019b      	lsls	r3, r3, #6
 8002202:	4413      	add	r3, r2
 8002204:	011b      	lsls	r3, r3, #4
 8002206:	440b      	add	r3, r1
 8002208:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	3301      	adds	r3, #1
 8002210:	425a      	negs	r2, r3
 8002212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002216:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800221a:	bf58      	it	pl
 800221c:	4253      	negpl	r3, r2
 800221e:	79fa      	ldrb	r2, [r7, #7]
 8002220:	b298      	uxth	r0, r3
 8002222:	4907      	ldr	r1, [pc, #28]	; (8002240 <UART_Get+0x90>)
 8002224:	4613      	mov	r3, r2
 8002226:	019b      	lsls	r3, r3, #6
 8002228:	4413      	add	r3, r2
 800222a:	011b      	lsls	r3, r3, #4
 800222c:	440b      	add	r3, r1
 800222e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002232:	4602      	mov	r2, r0
 8002234:	801a      	strh	r2, [r3, #0]
	}
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	2000036c 	.word	0x2000036c

08002244 <UART_Init>:

/*
 * @brief Initialize every uarts and start dma reception
 */
void UART_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
	/* Link  huarts to the right uarts structures */
	uart[uart_e1].huart = &huart1;
 800224a:	4b23      	ldr	r3, [pc, #140]	; (80022d8 <UART_Init+0x94>)
 800224c:	4a23      	ldr	r2, [pc, #140]	; (80022dc <UART_Init+0x98>)
 800224e:	601a      	str	r2, [r3, #0]
	uart[uart_e3].huart = &huart3;
 8002250:	4b21      	ldr	r3, [pc, #132]	; (80022d8 <UART_Init+0x94>)
 8002252:	4a23      	ldr	r2, [pc, #140]	; (80022e0 <UART_Init+0x9c>)
 8002254:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
	uart[uart_e4].huart = &huart4;
 8002258:	4b1f      	ldr	r3, [pc, #124]	; (80022d8 <UART_Init+0x94>)
 800225a:	4a22      	ldr	r2, [pc, #136]	; (80022e4 <UART_Init+0xa0>)
 800225c:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820

	/* Initialization */
	for(uint8_t u = 0; u < uart_eCOUNT; u ++)
 8002260:	2300      	movs	r3, #0
 8002262:	71fb      	strb	r3, [r7, #7]
 8002264:	e02f      	b.n	80022c6 <UART_Init+0x82>
	{
		__HAL_UART_ENABLE_IT(uart[u].huart, UART_IT_IDLE);
 8002266:	79fa      	ldrb	r2, [r7, #7]
 8002268:	491b      	ldr	r1, [pc, #108]	; (80022d8 <UART_Init+0x94>)
 800226a:	4613      	mov	r3, r2
 800226c:	019b      	lsls	r3, r3, #6
 800226e:	4413      	add	r3, r2
 8002270:	011b      	lsls	r3, r3, #4
 8002272:	440b      	add	r3, r1
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68d9      	ldr	r1, [r3, #12]
 800227a:	79fa      	ldrb	r2, [r7, #7]
 800227c:	4816      	ldr	r0, [pc, #88]	; (80022d8 <UART_Init+0x94>)
 800227e:	4613      	mov	r3, r2
 8002280:	019b      	lsls	r3, r3, #6
 8002282:	4413      	add	r3, r2
 8002284:	011b      	lsls	r3, r3, #4
 8002286:	4403      	add	r3, r0
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f041 0210 	orr.w	r2, r1, #16
 8002290:	60da      	str	r2, [r3, #12]
		HAL_UART_Receive_DMA(uart[u].huart, uart[u].buffer_rx, LEN_BUFFER);
 8002292:	79fa      	ldrb	r2, [r7, #7]
 8002294:	4910      	ldr	r1, [pc, #64]	; (80022d8 <UART_Init+0x94>)
 8002296:	4613      	mov	r3, r2
 8002298:	019b      	lsls	r3, r3, #6
 800229a:	4413      	add	r3, r2
 800229c:	011b      	lsls	r3, r3, #4
 800229e:	440b      	add	r3, r1
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	79fa      	ldrb	r2, [r7, #7]
 80022a4:	4613      	mov	r3, r2
 80022a6:	019b      	lsls	r3, r3, #6
 80022a8:	4413      	add	r3, r2
 80022aa:	011b      	lsls	r3, r3, #4
 80022ac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022b0:	4a09      	ldr	r2, [pc, #36]	; (80022d8 <UART_Init+0x94>)
 80022b2:	4413      	add	r3, r2
 80022b4:	3302      	adds	r3, #2
 80022b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022ba:	4619      	mov	r1, r3
 80022bc:	f007 f958 	bl	8009570 <HAL_UART_Receive_DMA>
	for(uint8_t u = 0; u < uart_eCOUNT; u ++)
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	3301      	adds	r3, #1
 80022c4:	71fb      	strb	r3, [r7, #7]
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d9cc      	bls.n	8002266 <UART_Init+0x22>
	}
}
 80022cc:	bf00      	nop
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	2000036c 	.word	0x2000036c
 80022dc:	200017a8 	.word	0x200017a8
 80022e0:	20001644 	.word	0x20001644
 80022e4:	200017ec 	.word	0x200017ec

080022e8 <UART_Transmit>:
 * @param id Id of the uart to use
 * @param data Array with the data
 * @param len Length of the data array
 */
void UART_Transmit(uart_e id, uint8_t * data, uint16_t len)
{
 80022e8:	b590      	push	{r4, r7, lr}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	6039      	str	r1, [r7, #0]
 80022f2:	71fb      	strb	r3, [r7, #7]
 80022f4:	4613      	mov	r3, r2
 80022f6:	80bb      	strh	r3, [r7, #4]
	for(uint16_t c = 0; c < len; c ++)
 80022f8:	2300      	movs	r3, #0
 80022fa:	81fb      	strh	r3, [r7, #14]
 80022fc:	e020      	b.n	8002340 <UART_Transmit+0x58>
	{
		uart[id].buffer_tx[(uart[id].index_write_tx + c) % LEN_BUFFER] = data[c];
 80022fe:	89fb      	ldrh	r3, [r7, #14]
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	18d0      	adds	r0, r2, r3
 8002304:	79fa      	ldrb	r2, [r7, #7]
 8002306:	79f9      	ldrb	r1, [r7, #7]
 8002308:	4c50      	ldr	r4, [pc, #320]	; (800244c <UART_Transmit+0x164>)
 800230a:	460b      	mov	r3, r1
 800230c:	019b      	lsls	r3, r3, #6
 800230e:	440b      	add	r3, r1
 8002310:	011b      	lsls	r3, r3, #4
 8002312:	4423      	add	r3, r4
 8002314:	f203 2306 	addw	r3, r3, #518	; 0x206
 8002318:	8819      	ldrh	r1, [r3, #0]
 800231a:	89fb      	ldrh	r3, [r7, #14]
 800231c:	440b      	add	r3, r1
 800231e:	b29b      	uxth	r3, r3
 8002320:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8002324:	7804      	ldrb	r4, [r0, #0]
 8002326:	4849      	ldr	r0, [pc, #292]	; (800244c <UART_Transmit+0x164>)
 8002328:	4613      	mov	r3, r2
 800232a:	019b      	lsls	r3, r3, #6
 800232c:	4413      	add	r3, r2
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	4403      	add	r3, r0
 8002332:	440b      	add	r3, r1
 8002334:	3306      	adds	r3, #6
 8002336:	4622      	mov	r2, r4
 8002338:	701a      	strb	r2, [r3, #0]
	for(uint16_t c = 0; c < len; c ++)
 800233a:	89fb      	ldrh	r3, [r7, #14]
 800233c:	3301      	adds	r3, #1
 800233e:	81fb      	strh	r3, [r7, #14]
 8002340:	89fa      	ldrh	r2, [r7, #14]
 8002342:	88bb      	ldrh	r3, [r7, #4]
 8002344:	429a      	cmp	r2, r3
 8002346:	d3da      	bcc.n	80022fe <UART_Transmit+0x16>
	}
	uart[id].index_write_tx = (uart[id].index_write_tx + len) % LEN_BUFFER;
 8002348:	79fa      	ldrb	r2, [r7, #7]
 800234a:	4940      	ldr	r1, [pc, #256]	; (800244c <UART_Transmit+0x164>)
 800234c:	4613      	mov	r3, r2
 800234e:	019b      	lsls	r3, r3, #6
 8002350:	4413      	add	r3, r2
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	440b      	add	r3, r1
 8002356:	f203 2306 	addw	r3, r3, #518	; 0x206
 800235a:	881a      	ldrh	r2, [r3, #0]
 800235c:	88bb      	ldrh	r3, [r7, #4]
 800235e:	4413      	add	r3, r2
 8002360:	b29b      	uxth	r3, r3
 8002362:	79fa      	ldrb	r2, [r7, #7]
 8002364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002368:	b298      	uxth	r0, r3
 800236a:	4938      	ldr	r1, [pc, #224]	; (800244c <UART_Transmit+0x164>)
 800236c:	4613      	mov	r3, r2
 800236e:	019b      	lsls	r3, r3, #6
 8002370:	4413      	add	r3, r2
 8002372:	011b      	lsls	r3, r3, #4
 8002374:	440b      	add	r3, r1
 8002376:	f203 2306 	addw	r3, r3, #518	; 0x206
 800237a:	4602      	mov	r2, r0
 800237c:	801a      	strh	r2, [r3, #0]
	if(uart[id].transmission_state == transmission_state_eIDLE)
 800237e:	79fa      	ldrb	r2, [r7, #7]
 8002380:	4932      	ldr	r1, [pc, #200]	; (800244c <UART_Transmit+0x164>)
 8002382:	4613      	mov	r3, r2
 8002384:	019b      	lsls	r3, r3, #6
 8002386:	4413      	add	r3, r2
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	440b      	add	r3, r1
 800238c:	3305      	adds	r3, #5
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d157      	bne.n	8002444 <UART_Transmit+0x15c>
	{
		uart[id].transmission_state = transmission_state_eIN_PROGRESS;
 8002394:	79fa      	ldrb	r2, [r7, #7]
 8002396:	492d      	ldr	r1, [pc, #180]	; (800244c <UART_Transmit+0x164>)
 8002398:	4613      	mov	r3, r2
 800239a:	019b      	lsls	r3, r3, #6
 800239c:	4413      	add	r3, r2
 800239e:	011b      	lsls	r3, r3, #4
 80023a0:	440b      	add	r3, r1
 80023a2:	3305      	adds	r3, #5
 80023a4:	2201      	movs	r2, #1
 80023a6:	701a      	strb	r2, [r3, #0]
		uint16_t nb_bytes_before_end_of_buffer = LEN_BUFFER - uart[id].index_read_tx;
 80023a8:	79fa      	ldrb	r2, [r7, #7]
 80023aa:	4928      	ldr	r1, [pc, #160]	; (800244c <UART_Transmit+0x164>)
 80023ac:	4613      	mov	r3, r2
 80023ae:	019b      	lsls	r3, r3, #6
 80023b0:	4413      	add	r3, r2
 80023b2:	011b      	lsls	r3, r3, #4
 80023b4:	440b      	add	r3, r1
 80023b6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80023c0:	81bb      	strh	r3, [r7, #12]
		len = MIN(len, nb_bytes_before_end_of_buffer);
 80023c2:	88ba      	ldrh	r2, [r7, #4]
 80023c4:	89bb      	ldrh	r3, [r7, #12]
 80023c6:	4293      	cmp	r3, r2
 80023c8:	bf28      	it	cs
 80023ca:	4613      	movcs	r3, r2
 80023cc:	80bb      	strh	r3, [r7, #4]
		HAL_UART_Transmit_DMA(uart[id].huart, &uart[id].buffer_tx[uart[id].index_read_tx], len);
 80023ce:	79fa      	ldrb	r2, [r7, #7]
 80023d0:	491e      	ldr	r1, [pc, #120]	; (800244c <UART_Transmit+0x164>)
 80023d2:	4613      	mov	r3, r2
 80023d4:	019b      	lsls	r3, r3, #6
 80023d6:	4413      	add	r3, r2
 80023d8:	011b      	lsls	r3, r3, #4
 80023da:	440b      	add	r3, r1
 80023dc:	6818      	ldr	r0, [r3, #0]
 80023de:	79fa      	ldrb	r2, [r7, #7]
 80023e0:	79f9      	ldrb	r1, [r7, #7]
 80023e2:	4c1a      	ldr	r4, [pc, #104]	; (800244c <UART_Transmit+0x164>)
 80023e4:	460b      	mov	r3, r1
 80023e6:	019b      	lsls	r3, r3, #6
 80023e8:	440b      	add	r3, r1
 80023ea:	011b      	lsls	r3, r3, #4
 80023ec:	4423      	add	r3, r4
 80023ee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023f2:	881b      	ldrh	r3, [r3, #0]
 80023f4:	4619      	mov	r1, r3
 80023f6:	4613      	mov	r3, r2
 80023f8:	019b      	lsls	r3, r3, #6
 80023fa:	4413      	add	r3, r2
 80023fc:	011b      	lsls	r3, r3, #4
 80023fe:	440b      	add	r3, r1
 8002400:	4a12      	ldr	r2, [pc, #72]	; (800244c <UART_Transmit+0x164>)
 8002402:	4413      	add	r3, r2
 8002404:	3306      	adds	r3, #6
 8002406:	88ba      	ldrh	r2, [r7, #4]
 8002408:	4619      	mov	r1, r3
 800240a:	f007 f833 	bl	8009474 <HAL_UART_Transmit_DMA>
		uart[id].index_read_tx = (uart[id].index_read_tx + len) % LEN_BUFFER;
 800240e:	79fa      	ldrb	r2, [r7, #7]
 8002410:	490e      	ldr	r1, [pc, #56]	; (800244c <UART_Transmit+0x164>)
 8002412:	4613      	mov	r3, r2
 8002414:	019b      	lsls	r3, r3, #6
 8002416:	4413      	add	r3, r2
 8002418:	011b      	lsls	r3, r3, #4
 800241a:	440b      	add	r3, r1
 800241c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002420:	881a      	ldrh	r2, [r3, #0]
 8002422:	88bb      	ldrh	r3, [r7, #4]
 8002424:	4413      	add	r3, r2
 8002426:	b29b      	uxth	r3, r3
 8002428:	79fa      	ldrb	r2, [r7, #7]
 800242a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800242e:	b298      	uxth	r0, r3
 8002430:	4906      	ldr	r1, [pc, #24]	; (800244c <UART_Transmit+0x164>)
 8002432:	4613      	mov	r3, r2
 8002434:	019b      	lsls	r3, r3, #6
 8002436:	4413      	add	r3, r2
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	440b      	add	r3, r1
 800243c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002440:	4602      	mov	r2, r0
 8002442:	801a      	strh	r2, [r3, #0]
	}
}
 8002444:	bf00      	nop
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	bd90      	pop	{r4, r7, pc}
 800244c:	2000036c 	.word	0x2000036c

08002450 <get_nb_bytes_available>:
 * @brief Compute the numbers of byte available in the buffer
 * @param id Id of the uart
 * @return nb of bytes available
 */
uint16_t get_nb_bytes_available(uart_e id)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	71fb      	strb	r3, [r7, #7]
	uint16_t nb = 0 ;
 800245a:	2300      	movs	r3, #0
 800245c:	81fb      	strh	r3, [r7, #14]
	if(uart[id].index_write_rx > uart[id].index_read_rx)
 800245e:	79fa      	ldrb	r2, [r7, #7]
 8002460:	4932      	ldr	r1, [pc, #200]	; (800252c <get_nb_bytes_available+0xdc>)
 8002462:	4613      	mov	r3, r2
 8002464:	019b      	lsls	r3, r3, #6
 8002466:	4413      	add	r3, r2
 8002468:	011b      	lsls	r3, r3, #4
 800246a:	440b      	add	r3, r1
 800246c:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8002470:	881b      	ldrh	r3, [r3, #0]
 8002472:	b299      	uxth	r1, r3
 8002474:	79fa      	ldrb	r2, [r7, #7]
 8002476:	482d      	ldr	r0, [pc, #180]	; (800252c <get_nb_bytes_available+0xdc>)
 8002478:	4613      	mov	r3, r2
 800247a:	019b      	lsls	r3, r3, #6
 800247c:	4413      	add	r3, r2
 800247e:	011b      	lsls	r3, r3, #4
 8002480:	4403      	add	r3, r0
 8002482:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	4299      	cmp	r1, r3
 800248a:	d917      	bls.n	80024bc <get_nb_bytes_available+0x6c>
	{
		nb = uart[id].index_write_rx - uart[id].index_read_rx ;
 800248c:	79fa      	ldrb	r2, [r7, #7]
 800248e:	4927      	ldr	r1, [pc, #156]	; (800252c <get_nb_bytes_available+0xdc>)
 8002490:	4613      	mov	r3, r2
 8002492:	019b      	lsls	r3, r3, #6
 8002494:	4413      	add	r3, r2
 8002496:	011b      	lsls	r3, r3, #4
 8002498:	440b      	add	r3, r1
 800249a:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	b299      	uxth	r1, r3
 80024a2:	79fa      	ldrb	r2, [r7, #7]
 80024a4:	4821      	ldr	r0, [pc, #132]	; (800252c <get_nb_bytes_available+0xdc>)
 80024a6:	4613      	mov	r3, r2
 80024a8:	019b      	lsls	r3, r3, #6
 80024aa:	4413      	add	r3, r2
 80024ac:	011b      	lsls	r3, r3, #4
 80024ae:	4403      	add	r3, r0
 80024b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	1acb      	subs	r3, r1, r3
 80024b8:	81fb      	strh	r3, [r7, #14]
 80024ba:	e030      	b.n	800251e <get_nb_bytes_available+0xce>
	}
	else if(uart[id].index_write_rx < uart[id].index_read_rx)
 80024bc:	79fa      	ldrb	r2, [r7, #7]
 80024be:	491b      	ldr	r1, [pc, #108]	; (800252c <get_nb_bytes_available+0xdc>)
 80024c0:	4613      	mov	r3, r2
 80024c2:	019b      	lsls	r3, r3, #6
 80024c4:	4413      	add	r3, r2
 80024c6:	011b      	lsls	r3, r3, #4
 80024c8:	440b      	add	r3, r1
 80024ca:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	b299      	uxth	r1, r3
 80024d2:	79fa      	ldrb	r2, [r7, #7]
 80024d4:	4815      	ldr	r0, [pc, #84]	; (800252c <get_nb_bytes_available+0xdc>)
 80024d6:	4613      	mov	r3, r2
 80024d8:	019b      	lsls	r3, r3, #6
 80024da:	4413      	add	r3, r2
 80024dc:	011b      	lsls	r3, r3, #4
 80024de:	4403      	add	r3, r0
 80024e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	4299      	cmp	r1, r3
 80024e8:	d219      	bcs.n	800251e <get_nb_bytes_available+0xce>
	{
		nb = LEN_BUFFER - uart[id].index_read_rx + uart[id].index_write_rx ;
 80024ea:	79fa      	ldrb	r2, [r7, #7]
 80024ec:	490f      	ldr	r1, [pc, #60]	; (800252c <get_nb_bytes_available+0xdc>)
 80024ee:	4613      	mov	r3, r2
 80024f0:	019b      	lsls	r3, r3, #6
 80024f2:	4413      	add	r3, r2
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	440b      	add	r3, r1
 80024f8:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 80024fc:	881b      	ldrh	r3, [r3, #0]
 80024fe:	b299      	uxth	r1, r3
 8002500:	79fa      	ldrb	r2, [r7, #7]
 8002502:	480a      	ldr	r0, [pc, #40]	; (800252c <get_nb_bytes_available+0xdc>)
 8002504:	4613      	mov	r3, r2
 8002506:	019b      	lsls	r3, r3, #6
 8002508:	4413      	add	r3, r2
 800250a:	011b      	lsls	r3, r3, #4
 800250c:	4403      	add	r3, r0
 800250e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002512:	881b      	ldrh	r3, [r3, #0]
 8002514:	1acb      	subs	r3, r1, r3
 8002516:	b29b      	uxth	r3, r3
 8002518:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800251c:	81fb      	strh	r3, [r7, #14]
	}
	return nb;
 800251e:	89fb      	ldrh	r3, [r7, #14]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	2000036c 	.word	0x2000036c

08002530 <IBUS_Init>:
#define NB_BYTE_MAX_PER_PROCESS		50

static ibus_t ibus = { 0 };

void IBUS_Init(uint16_t * channels)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
	ibus.channels = channels;
 8002538:	4a04      	ldr	r2, [pc, #16]	; (800254c <IBUS_Init+0x1c>)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6013      	str	r3, [r2, #0]
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	20000f9c 	.word	0x20000f9c

08002550 <IBUS_Process>:
/*
 * @brief Check for new data on the uart and update channels array
 * @return True when a new have been successfully read
 */
bool_e IBUS_Process(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
	uint16_t nb_to_read = UART_Availables(UART_IBUS);
 8002556:	2001      	movs	r0, #1
 8002558:	f7ff fe1c 	bl	8002194 <UART_Availables>
 800255c:	4603      	mov	r3, r0
 800255e:	81fb      	strh	r3, [r7, #14]
	if(!nb_to_read)
 8002560:	89fb      	ldrh	r3, [r7, #14]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <IBUS_Process+0x1a>
	{
		return FALSE;
 8002566:	2300      	movs	r3, #0
 8002568:	e092      	b.n	8002690 <IBUS_Process+0x140>
	}
	nb_to_read = MIN(nb_to_read, NB_BYTE_MAX_PER_PROCESS);
 800256a:	89fb      	ldrh	r3, [r7, #14]
 800256c:	2b32      	cmp	r3, #50	; 0x32
 800256e:	bf28      	it	cs
 8002570:	2332      	movcs	r3, #50	; 0x32
 8002572:	81fb      	strh	r3, [r7, #14]
	bool_e to_return = FALSE;
 8002574:	2300      	movs	r3, #0
 8002576:	737b      	strb	r3, [r7, #13]
	uint8_t c = 0;
 8002578:	2300      	movs	r3, #0
 800257a:	70fb      	strb	r3, [r7, #3]
	while(nb_to_read)
 800257c:	e083      	b.n	8002686 <IBUS_Process+0x136>
	{
		UART_Get(UART_IBUS, &c);
 800257e:	1cfb      	adds	r3, r7, #3
 8002580:	4619      	mov	r1, r3
 8002582:	2001      	movs	r0, #1
 8002584:	f7ff fe14 	bl	80021b0 <UART_Get>
		switch(ibus.state)
 8002588:	4b43      	ldr	r3, [pc, #268]	; (8002698 <IBUS_Process+0x148>)
 800258a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800258e:	2b02      	cmp	r3, #2
 8002590:	d027      	beq.n	80025e2 <IBUS_Process+0x92>
 8002592:	2b02      	cmp	r3, #2
 8002594:	dc74      	bgt.n	8002680 <IBUS_Process+0x130>
 8002596:	2b00      	cmp	r3, #0
 8002598:	d002      	beq.n	80025a0 <IBUS_Process+0x50>
 800259a:	2b01      	cmp	r3, #1
 800259c:	d00b      	beq.n	80025b6 <IBUS_Process+0x66>
 800259e:	e06f      	b.n	8002680 <IBUS_Process+0x130>
		{
			case STATE_IBUS_LENGTH :
				if(c == 0x20)
 80025a0:	78fb      	ldrb	r3, [r7, #3]
 80025a2:	2b20      	cmp	r3, #32
 80025a4:	d167      	bne.n	8002676 <IBUS_Process+0x126>
				{
					ibus.state = STATE_IBUS_COMMAND ;
 80025a6:	4b3c      	ldr	r3, [pc, #240]	; (8002698 <IBUS_Process+0x148>)
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
					ibus.buffer[0] = c ;
 80025ae:	78fa      	ldrb	r2, [r7, #3]
 80025b0:	4b39      	ldr	r3, [pc, #228]	; (8002698 <IBUS_Process+0x148>)
 80025b2:	711a      	strb	r2, [r3, #4]
				}
				break;
 80025b4:	e05f      	b.n	8002676 <IBUS_Process+0x126>
			case STATE_IBUS_COMMAND :
				if(c == 0x40)
 80025b6:	78fb      	ldrb	r3, [r7, #3]
 80025b8:	2b40      	cmp	r3, #64	; 0x40
 80025ba:	d10a      	bne.n	80025d2 <IBUS_Process+0x82>
				{
					ibus.state = STATE_IBUS_CHANNELS ;
 80025bc:	4b36      	ldr	r3, [pc, #216]	; (8002698 <IBUS_Process+0x148>)
 80025be:	2202      	movs	r2, #2
 80025c0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
					ibus.buffer[1] = c ;
 80025c4:	78fa      	ldrb	r2, [r7, #3]
 80025c6:	4b34      	ldr	r3, [pc, #208]	; (8002698 <IBUS_Process+0x148>)
 80025c8:	715a      	strb	r2, [r3, #5]
					ibus.compteur = 2 ;
 80025ca:	4b33      	ldr	r3, [pc, #204]	; (8002698 <IBUS_Process+0x148>)
 80025cc:	2202      	movs	r2, #2
 80025ce:	849a      	strh	r2, [r3, #36]	; 0x24
				}
				else if(c != 0x20)
				{
					ibus.state = STATE_IBUS_LENGTH ;
				}
				break ;
 80025d0:	e053      	b.n	800267a <IBUS_Process+0x12a>
				else if(c != 0x20)
 80025d2:	78fb      	ldrb	r3, [r7, #3]
 80025d4:	2b20      	cmp	r3, #32
 80025d6:	d050      	beq.n	800267a <IBUS_Process+0x12a>
					ibus.state = STATE_IBUS_LENGTH ;
 80025d8:	4b2f      	ldr	r3, [pc, #188]	; (8002698 <IBUS_Process+0x148>)
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				break ;
 80025e0:	e04b      	b.n	800267a <IBUS_Process+0x12a>

			case STATE_IBUS_CHANNELS :
				ibus.buffer[ibus.compteur++] = c ;
 80025e2:	4b2d      	ldr	r3, [pc, #180]	; (8002698 <IBUS_Process+0x148>)
 80025e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80025e6:	1c5a      	adds	r2, r3, #1
 80025e8:	b291      	uxth	r1, r2
 80025ea:	4a2b      	ldr	r2, [pc, #172]	; (8002698 <IBUS_Process+0x148>)
 80025ec:	8491      	strh	r1, [r2, #36]	; 0x24
 80025ee:	4619      	mov	r1, r3
 80025f0:	78fa      	ldrb	r2, [r7, #3]
 80025f2:	4b29      	ldr	r3, [pc, #164]	; (8002698 <IBUS_Process+0x148>)
 80025f4:	440b      	add	r3, r1
 80025f6:	711a      	strb	r2, [r3, #4]
				if(ibus.compteur == 32)
 80025f8:	4b27      	ldr	r3, [pc, #156]	; (8002698 <IBUS_Process+0x148>)
 80025fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80025fc:	2b20      	cmp	r3, #32
 80025fe:	d13e      	bne.n	800267e <IBUS_Process+0x12e>
				{
					uint32_t cs = (uint32_t)(ibus.buffer[30] | (ibus.buffer[31] << 8)) ;
 8002600:	4b25      	ldr	r3, [pc, #148]	; (8002698 <IBUS_Process+0x148>)
 8002602:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002606:	461a      	mov	r2, r3
 8002608:	4b23      	ldr	r3, [pc, #140]	; (8002698 <IBUS_Process+0x148>)
 800260a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800260e:	021b      	lsls	r3, r3, #8
 8002610:	4313      	orrs	r3, r2
 8002612:	607b      	str	r3, [r7, #4]
					if(0xFFFF - check_sum_f(ibus.buffer)== cs)
 8002614:	4821      	ldr	r0, [pc, #132]	; (800269c <IBUS_Process+0x14c>)
 8002616:	f000 f843 	bl	80026a0 <check_sum_f>
 800261a:	4603      	mov	r3, r0
 800261c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002620:	33ff      	adds	r3, #255	; 0xff
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	429a      	cmp	r2, r3
 8002626:	d121      	bne.n	800266c <IBUS_Process+0x11c>
					{
						for(uint32_t radio = 0; radio < 28; radio +=2)
 8002628:	2300      	movs	r3, #0
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	e019      	b.n	8002662 <IBUS_Process+0x112>
						{
							ibus.channels[radio / 2] = (int32_t)(ibus.buffer[radio+2] | (ibus.buffer[radio + 3] << 8));
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	3302      	adds	r3, #2
 8002632:	4a19      	ldr	r2, [pc, #100]	; (8002698 <IBUS_Process+0x148>)
 8002634:	4413      	add	r3, r2
 8002636:	791b      	ldrb	r3, [r3, #4]
 8002638:	b21a      	sxth	r2, r3
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	3303      	adds	r3, #3
 800263e:	4916      	ldr	r1, [pc, #88]	; (8002698 <IBUS_Process+0x148>)
 8002640:	440b      	add	r3, r1
 8002642:	791b      	ldrb	r3, [r3, #4]
 8002644:	021b      	lsls	r3, r3, #8
 8002646:	b21b      	sxth	r3, r3
 8002648:	4313      	orrs	r3, r2
 800264a:	b219      	sxth	r1, r3
 800264c:	4b12      	ldr	r3, [pc, #72]	; (8002698 <IBUS_Process+0x148>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	f023 0301 	bic.w	r3, r3, #1
 8002656:	4413      	add	r3, r2
 8002658:	b28a      	uxth	r2, r1
 800265a:	801a      	strh	r2, [r3, #0]
						for(uint32_t radio = 0; radio < 28; radio +=2)
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	3302      	adds	r3, #2
 8002660:	60bb      	str	r3, [r7, #8]
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	2b1b      	cmp	r3, #27
 8002666:	d9e2      	bls.n	800262e <IBUS_Process+0xde>
						}
						to_return = TRUE;
 8002668:	2301      	movs	r3, #1
 800266a:	737b      	strb	r3, [r7, #13]
					}
					ibus.state = STATE_IBUS_LENGTH ;
 800266c:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <IBUS_Process+0x148>)
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				}
				break;
 8002674:	e003      	b.n	800267e <IBUS_Process+0x12e>
				break;
 8002676:	bf00      	nop
 8002678:	e002      	b.n	8002680 <IBUS_Process+0x130>
				break ;
 800267a:	bf00      	nop
 800267c:	e000      	b.n	8002680 <IBUS_Process+0x130>
				break;
 800267e:	bf00      	nop
		}
		nb_to_read --;
 8002680:	89fb      	ldrh	r3, [r7, #14]
 8002682:	3b01      	subs	r3, #1
 8002684:	81fb      	strh	r3, [r7, #14]
	while(nb_to_read)
 8002686:	89fb      	ldrh	r3, [r7, #14]
 8002688:	2b00      	cmp	r3, #0
 800268a:	f47f af78 	bne.w	800257e <IBUS_Process+0x2e>
	}

	return to_return;
 800268e:	7b7b      	ldrb	r3, [r7, #13]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	20000f9c 	.word	0x20000f9c
 800269c:	20000fa0 	.word	0x20000fa0

080026a0 <check_sum_f>:

uint32_t check_sum_f(uint8_t * buffer)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
	uint32_t sum = 0 ;
 80026a8:	2300      	movs	r3, #0
 80026aa:	60fb      	str	r3, [r7, #12]
	for(uint8_t b=0; b <30; b++)
 80026ac:	2300      	movs	r3, #0
 80026ae:	72fb      	strb	r3, [r7, #11]
 80026b0:	e00a      	b.n	80026c8 <check_sum_f+0x28>
		sum += (uint32_t)buffer[b];
 80026b2:	7afb      	ldrb	r3, [r7, #11]
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	4413      	add	r3, r2
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4413      	add	r3, r2
 80026c0:	60fb      	str	r3, [r7, #12]
	for(uint8_t b=0; b <30; b++)
 80026c2:	7afb      	ldrb	r3, [r7, #11]
 80026c4:	3301      	adds	r3, #1
 80026c6:	72fb      	strb	r3, [r7, #11]
 80026c8:	7afb      	ldrb	r3, [r7, #11]
 80026ca:	2b1d      	cmp	r3, #29
 80026cc:	d9f1      	bls.n	80026b2 <check_sum_f+0x12>
	return sum ;
 80026ce:	68fb      	ldr	r3, [r7, #12]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <RADIO_Process_Init>:
#define TIMEOUT_RADIO_MS	50

static radio_t radio = { 0 };

void RADIO_Process_Init(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
#if USE_IBUS
	IBUS_Init(radio.channels);
 80026e0:	4802      	ldr	r0, [pc, #8]	; (80026ec <RADIO_Process_Init+0x10>)
 80026e2:	f7ff ff25 	bl	8002530 <IBUS_Init>
#endif
}
 80026e6:	bf00      	nop
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20000fc8 	.word	0x20000fc8

080026f0 <RADIO_Process_Main>:

void RADIO_Process_Main(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0

#if USE_IBUS
	if(IBUS_Process())
 80026f4:	f7ff ff2c 	bl	8002550 <IBUS_Process>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d009      	beq.n	8002712 <RADIO_Process_Main+0x22>
	{
		radio.next_update = HAL_GetTick() + TIMEOUT_RADIO_MS;
 80026fe:	f001 fbbf 	bl	8003e80 <HAL_GetTick>
 8002702:	4603      	mov	r3, r0
 8002704:	3332      	adds	r3, #50	; 0x32
 8002706:	4a09      	ldr	r2, [pc, #36]	; (800272c <RADIO_Process_Main+0x3c>)
 8002708:	6213      	str	r3, [r2, #32]
		radio.state = radio_state_eOK;
 800270a:	4b08      	ldr	r3, [pc, #32]	; (800272c <RADIO_Process_Main+0x3c>)
 800270c:	2200      	movs	r2, #0
 800270e:	771a      	strb	r2, [r3, #28]
	else if(HAL_GetTick() > radio.next_update)
	{
		radio.state = radio_state_eTIMEOUT;
	}
#endif
}
 8002710:	e009      	b.n	8002726 <RADIO_Process_Main+0x36>
	else if(HAL_GetTick() > radio.next_update)
 8002712:	f001 fbb5 	bl	8003e80 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	4b04      	ldr	r3, [pc, #16]	; (800272c <RADIO_Process_Main+0x3c>)
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	429a      	cmp	r2, r3
 800271e:	d902      	bls.n	8002726 <RADIO_Process_Main+0x36>
		radio.state = radio_state_eTIMEOUT;
 8002720:	4b02      	ldr	r3, [pc, #8]	; (800272c <RADIO_Process_Main+0x3c>)
 8002722:	2201      	movs	r2, #1
 8002724:	771a      	strb	r2, [r3, #28]
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20000fc8 	.word	0x20000fc8

08002730 <RADIO_Get_State>:

radio_state_e RADIO_Get_State(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
	return radio.state;
 8002734:	4b03      	ldr	r3, [pc, #12]	; (8002744 <RADIO_Get_State+0x14>)
 8002736:	7f1b      	ldrb	r3, [r3, #28]
}
 8002738:	4618      	mov	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	20000fc8 	.word	0x20000fc8

08002748 <RADIO_Get_Channel>:

uint16_t * RADIO_Get_Channel(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
	return radio.channels;
 800274c:	4b02      	ldr	r3, [pc, #8]	; (8002758 <RADIO_Get_Channel+0x10>)
}
 800274e:	4618      	mov	r0, r3
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	20000fc8 	.word	0x20000fc8

0800275c <MPU_Init>:
/*
 * @brief Wake up the MPU6000
 *		  Configure the Gyroscope and the Accelerometer
 */
void MPU_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af02      	add	r7, sp, #8
	/* Set the Gyroscope and Accelerometer data buffer */
	mpu.gyro_data = &mpu.data[8];
 8002762:	4b59      	ldr	r3, [pc, #356]	; (80028c8 <MPU_Init+0x16c>)
 8002764:	4a59      	ldr	r2, [pc, #356]	; (80028cc <MPU_Init+0x170>)
 8002766:	611a      	str	r2, [r3, #16]
	mpu.acc_data = &mpu.data[0];
 8002768:	4b57      	ldr	r3, [pc, #348]	; (80028c8 <MPU_Init+0x16c>)
 800276a:	4a59      	ldr	r2, [pc, #356]	; (80028d0 <MPU_Init+0x174>)
 800276c:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Disable I2C */
	SPI_Transmit(SPI_MPU, CS_MPU, mpu_disable_i2c, 2);
	HAL_Delay(150);
#else
	/* Check is the mpu responds */
	if(I2C_Is_Device_Ready(I2C_MPU, MPU6050_I2C_ADDR))
 800276e:	21d0      	movs	r1, #208	; 0xd0
 8002770:	2000      	movs	r0, #0
 8002772:	f7ff fb75 	bl	8001e60 <I2C_Is_Device_Ready>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d003      	beq.n	8002784 <MPU_Init+0x28>
	{
		mpu.state = mpu_state_eERROR;
 800277c:	4b52      	ldr	r3, [pc, #328]	; (80028c8 <MPU_Init+0x16c>)
 800277e:	2201      	movs	r2, #1
 8002780:	701a      	strb	r2, [r3, #0]
 8002782:	e09d      	b.n	80028c0 <MPU_Init+0x164>
		return;
	}
	/* Power up the mpu an wait for it to start */
	HAL_GPIO_WritePin(MPU_POWER_GPIO_Port, MPU_POWER_Pin, GPIO_PIN_SET);
 8002784:	2201      	movs	r2, #1
 8002786:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800278a:	4852      	ldr	r0, [pc, #328]	; (80028d4 <MPU_Init+0x178>)
 800278c:	f002 fa72 	bl	8004c74 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8002790:	20c8      	movs	r0, #200	; 0xc8
 8002792:	f001 fb81 	bl	8003e98 <HAL_Delay>
	/* Wake up the mpu */
	uint8_t wakeup_data = 0x80;
 8002796:	2380      	movs	r3, #128	; 0x80
 8002798:	71fb      	strb	r3, [r7, #7]
	I2C_Mem_Write(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_PWR_MGMT_1, &wakeup_data, 1);
 800279a:	1dfb      	adds	r3, r7, #7
 800279c:	2201      	movs	r2, #1
 800279e:	9200      	str	r2, [sp, #0]
 80027a0:	226b      	movs	r2, #107	; 0x6b
 80027a2:	21d0      	movs	r1, #208	; 0xd0
 80027a4:	2000      	movs	r0, #0
 80027a6:	f7ff faf1 	bl	8001d8c <I2C_Mem_Write>
	HAL_Delay(15);
 80027aa:	200f      	movs	r0, #15
 80027ac:	f001 fb74 	bl	8003e98 <HAL_Delay>
	/* Select the clock */
	uint8_t clock_select = 0x03;
 80027b0:	2303      	movs	r3, #3
 80027b2:	71bb      	strb	r3, [r7, #6]
	I2C_Mem_Write(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_PWR_MGMT_1, &clock_select, 1);
 80027b4:	1dbb      	adds	r3, r7, #6
 80027b6:	2201      	movs	r2, #1
 80027b8:	9200      	str	r2, [sp, #0]
 80027ba:	226b      	movs	r2, #107	; 0x6b
 80027bc:	21d0      	movs	r1, #208	; 0xd0
 80027be:	2000      	movs	r0, #0
 80027c0:	f7ff fae4 	bl	8001d8c <I2C_Mem_Write>
	SPI_Transmit(SPI_MPU, CS_MPU, temp_write, 2);
	HAL_Delay(150);
#else
	/* Sensitivity configuration */
	uint8_t temp;
	I2C_Mem_Read(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_GYRO_CONFIG, &temp, 1);
 80027c4:	1d7b      	adds	r3, r7, #5
 80027c6:	2201      	movs	r2, #1
 80027c8:	9200      	str	r2, [sp, #0]
 80027ca:	221b      	movs	r2, #27
 80027cc:	21d0      	movs	r1, #208	; 0xd0
 80027ce:	2000      	movs	r0, #0
 80027d0:	f7ff fb00 	bl	8001dd4 <I2C_Mem_Read>
	temp = (temp & 0xE7) | (uint8_t)mpu.gyro_range << 3;
 80027d4:	797b      	ldrb	r3, [r7, #5]
 80027d6:	b25b      	sxtb	r3, r3
 80027d8:	f023 0318 	bic.w	r3, r3, #24
 80027dc:	b25a      	sxtb	r2, r3
 80027de:	4b3a      	ldr	r3, [pc, #232]	; (80028c8 <MPU_Init+0x16c>)
 80027e0:	7bdb      	ldrb	r3, [r3, #15]
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	b25b      	sxtb	r3, r3
 80027e6:	4313      	orrs	r3, r2
 80027e8:	b25b      	sxtb	r3, r3
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	717b      	strb	r3, [r7, #5]
	I2C_Mem_Write(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_GYRO_CONFIG, &temp, 1);
 80027ee:	1d7b      	adds	r3, r7, #5
 80027f0:	2201      	movs	r2, #1
 80027f2:	9200      	str	r2, [sp, #0]
 80027f4:	221b      	movs	r2, #27
 80027f6:	21d0      	movs	r1, #208	; 0xd0
 80027f8:	2000      	movs	r0, #0
 80027fa:	f7ff fac7 	bl	8001d8c <I2C_Mem_Write>
#endif
	switch(mpu.gyro_range)
 80027fe:	4b32      	ldr	r3, [pc, #200]	; (80028c8 <MPU_Init+0x16c>)
 8002800:	7bdb      	ldrb	r3, [r3, #15]
 8002802:	2b03      	cmp	r3, #3
 8002804:	d81a      	bhi.n	800283c <MPU_Init+0xe0>
 8002806:	a201      	add	r2, pc, #4	; (adr r2, 800280c <MPU_Init+0xb0>)
 8002808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800280c:	0800281d 	.word	0x0800281d
 8002810:	08002825 	.word	0x08002825
 8002814:	0800282d 	.word	0x0800282d
 8002818:	08002835 	.word	0x08002835
	{
		case MPU_GYRO_250s :
			mpu.gyro_conversion = (float)1 / MPU6050_GYRO_SENS_250 ;
 800281c:	4b2a      	ldr	r3, [pc, #168]	; (80028c8 <MPU_Init+0x16c>)
 800281e:	4a2e      	ldr	r2, [pc, #184]	; (80028d8 <MPU_Init+0x17c>)
 8002820:	615a      	str	r2, [r3, #20]
			break;
 8002822:	e00b      	b.n	800283c <MPU_Init+0xe0>
		case MPU_GYRO_500s :
			mpu.gyro_conversion = (float)1 / MPU6050_GYRO_SENS_500 ;
 8002824:	4b28      	ldr	r3, [pc, #160]	; (80028c8 <MPU_Init+0x16c>)
 8002826:	4a2d      	ldr	r2, [pc, #180]	; (80028dc <MPU_Init+0x180>)
 8002828:	615a      	str	r2, [r3, #20]
			break;
 800282a:	e007      	b.n	800283c <MPU_Init+0xe0>
		case MPU_GYRO_1000s :
			mpu.gyro_conversion = (float)1 / MPU6050_GYRO_SENS_1000 ;
 800282c:	4b26      	ldr	r3, [pc, #152]	; (80028c8 <MPU_Init+0x16c>)
 800282e:	4a2c      	ldr	r2, [pc, #176]	; (80028e0 <MPU_Init+0x184>)
 8002830:	615a      	str	r2, [r3, #20]
			break;
 8002832:	e003      	b.n	800283c <MPU_Init+0xe0>
		case MPU_GYRO_2000s :
			mpu.gyro_conversion = (float)1 / MPU6050_GYRO_SENS_2000 ;
 8002834:	4b24      	ldr	r3, [pc, #144]	; (80028c8 <MPU_Init+0x16c>)
 8002836:	4a2b      	ldr	r2, [pc, #172]	; (80028e4 <MPU_Init+0x188>)
 8002838:	615a      	str	r2, [r3, #20]
			break;
 800283a:	bf00      	nop
	temp_write[1] = (temp_read[1] & 0xE7) | (uint8_t)mpu.acc_range << 3;
	SPI_Transmit(SPI_MPU, CS_MPU, temp_write, 2);
	HAL_Delay(150);
#else
	/* Sensitivity configuration */
	I2C_Mem_Read(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_ACCEL_CONFIG, &temp, 1);
 800283c:	1d7b      	adds	r3, r7, #5
 800283e:	2201      	movs	r2, #1
 8002840:	9200      	str	r2, [sp, #0]
 8002842:	221c      	movs	r2, #28
 8002844:	21d0      	movs	r1, #208	; 0xd0
 8002846:	2000      	movs	r0, #0
 8002848:	f7ff fac4 	bl	8001dd4 <I2C_Mem_Read>
	temp = (temp & 0xE7) | (uint8_t)mpu.acc_range << 3;
 800284c:	797b      	ldrb	r3, [r7, #5]
 800284e:	b25b      	sxtb	r3, r3
 8002850:	f023 0318 	bic.w	r3, r3, #24
 8002854:	b25a      	sxtb	r2, r3
 8002856:	4b1c      	ldr	r3, [pc, #112]	; (80028c8 <MPU_Init+0x16c>)
 8002858:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	b25b      	sxtb	r3, r3
 8002860:	4313      	orrs	r3, r2
 8002862:	b25b      	sxtb	r3, r3
 8002864:	b2db      	uxtb	r3, r3
 8002866:	717b      	strb	r3, [r7, #5]
	I2C_Mem_Write(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_ACCEL_CONFIG, &temp, 1);
 8002868:	1d7b      	adds	r3, r7, #5
 800286a:	2201      	movs	r2, #1
 800286c:	9200      	str	r2, [sp, #0]
 800286e:	221c      	movs	r2, #28
 8002870:	21d0      	movs	r1, #208	; 0xd0
 8002872:	2000      	movs	r0, #0
 8002874:	f7ff fa8a 	bl	8001d8c <I2C_Mem_Write>
#endif
	switch(mpu.acc_range)
 8002878:	4b13      	ldr	r3, [pc, #76]	; (80028c8 <MPU_Init+0x16c>)
 800287a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800287e:	2b03      	cmp	r3, #3
 8002880:	d81e      	bhi.n	80028c0 <MPU_Init+0x164>
 8002882:	a201      	add	r2, pc, #4	; (adr r2, 8002888 <MPU_Init+0x12c>)
 8002884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002888:	08002899 	.word	0x08002899
 800288c:	080028a3 	.word	0x080028a3
 8002890:	080028ad 	.word	0x080028ad
 8002894:	080028b7 	.word	0x080028b7
	{
		case MPU_ACC_2G :
			mpu.acc_conversion = (float)1 / MPU6050_ACCE_SENS_2 ;
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <MPU_Init+0x16c>)
 800289a:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 800289e:	645a      	str	r2, [r3, #68]	; 0x44
			break;
 80028a0:	e00e      	b.n	80028c0 <MPU_Init+0x164>
		case MPU_ACC_4G :
			mpu.acc_conversion = (float)1 / MPU6050_ACCE_SENS_4 ;
 80028a2:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <MPU_Init+0x16c>)
 80028a4:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80028a8:	645a      	str	r2, [r3, #68]	; 0x44
			break;
 80028aa:	e009      	b.n	80028c0 <MPU_Init+0x164>
		case MPU_ACC_8G :
			mpu.acc_conversion = (float)1 / MPU6050_ACCE_SENS_8 ;
 80028ac:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <MPU_Init+0x16c>)
 80028ae:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80028b2:	645a      	str	r2, [r3, #68]	; 0x44
			break;
 80028b4:	e004      	b.n	80028c0 <MPU_Init+0x164>
		case MPU_ACC_16G :
			mpu.acc_conversion = (float)1 / MPU6050_ACCE_SENS_16 ;
 80028b6:	4b04      	ldr	r3, [pc, #16]	; (80028c8 <MPU_Init+0x16c>)
 80028b8:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 80028bc:	645a      	str	r2, [r3, #68]	; 0x44
			break;
 80028be:	bf00      	nop
	}
}
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	200000a4 	.word	0x200000a4
 80028cc:	200000ad 	.word	0x200000ad
 80028d0:	200000a5 	.word	0x200000a5
 80028d4:	40020800 	.word	0x40020800
 80028d8:	3bfa232d 	.word	0x3bfa232d
 80028dc:	3c7a232d 	.word	0x3c7a232d
 80028e0:	3cf9c190 	.word	0x3cf9c190
 80028e4:	3d79c190 	.word	0x3d79c190

080028e8 <MPU_Get_Gyro_Ptr>:
float * MPU_Get_Gyro_Ptr(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
	return mpu.gyro;
 80028ec:	4b02      	ldr	r3, [pc, #8]	; (80028f8 <MPU_Get_Gyro_Ptr+0x10>)
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	200000bc 	.word	0x200000bc

080028fc <MPU_Get_Acc_Ptr>:

float * MPU_Get_Acc_Ptr(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
	return mpu.acc;
 8002900:	4b02      	ldr	r3, [pc, #8]	; (800290c <MPU_Get_Acc_Ptr+0x10>)
}
 8002902:	4618      	mov	r0, r3
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	200000ec 	.word	0x200000ec

08002910 <MPU_Read_All_Dma>:
	MPU_Convert_Acc_Data();
	MPU_Convert_Gyro_Data();
}

void MPU_Read_All_Dma(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af02      	add	r7, sp, #8
	if(mpu.state == mpu_state_eERROR)
 8002916:	4b0f      	ldr	r3, [pc, #60]	; (8002954 <MPU_Read_All_Dma+0x44>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d015      	beq.n	800294a <MPU_Read_All_Dma+0x3a>
	}
#if USE_SPI
	uint8_t registers [14] = {MPU6050_ACCEL_XOUT_H | MPU6050_READ};
	SPI_Transmit_Receive(SPI_MPU, CS_MPU, registers, mpu.data, 14);
#else
	HAL_StatusTypeDef state = I2C_Mem_Read_Dma(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_ACCEL_XOUT_H, mpu.data, 14);
 800291e:	230e      	movs	r3, #14
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	4b0d      	ldr	r3, [pc, #52]	; (8002958 <MPU_Read_All_Dma+0x48>)
 8002924:	223b      	movs	r2, #59	; 0x3b
 8002926:	21d0      	movs	r1, #208	; 0xd0
 8002928:	2000      	movs	r0, #0
 800292a:	f7ff fa77 	bl	8001e1c <I2C_Mem_Read_Dma>
 800292e:	4603      	mov	r3, r0
 8002930:	71fb      	strb	r3, [r7, #7]
	if(state)
 8002932:	79fb      	ldrb	r3, [r7, #7]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <MPU_Read_All_Dma+0x30>
	{
		mpu.state = mpu_state_eERROR;
 8002938:	4b06      	ldr	r3, [pc, #24]	; (8002954 <MPU_Read_All_Dma+0x44>)
 800293a:	2201      	movs	r2, #1
 800293c:	701a      	strb	r2, [r3, #0]
		return;
 800293e:	e005      	b.n	800294c <MPU_Read_All_Dma+0x3c>
	}
	mpu.dma_state = dma_state_eIN_PORGRESS_ALL;
 8002940:	4b04      	ldr	r3, [pc, #16]	; (8002954 <MPU_Read_All_Dma+0x44>)
 8002942:	2203      	movs	r2, #3
 8002944:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8002948:	e000      	b.n	800294c <MPU_Read_All_Dma+0x3c>
		return;
 800294a:	bf00      	nop
#endif
}
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	200000a4 	.word	0x200000a4
 8002958:	200000a5 	.word	0x200000a5

0800295c <MPU_Convert_Acc_Data>:

/*
 * @brief Convert acc bytes to measurement
 */
void MPU_Convert_Acc_Data(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
	mpu.acc_raw[0] = (int16_t)(mpu.acc_data[1] | (mpu.acc_data[0] << 8)) * mpu.acc_conversion;
 8002960:	4b43      	ldr	r3, [pc, #268]	; (8002a70 <MPU_Convert_Acc_Data+0x114>)
 8002962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002964:	3301      	adds	r3, #1
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	b21a      	sxth	r2, r3
 800296a:	4b41      	ldr	r3, [pc, #260]	; (8002a70 <MPU_Convert_Acc_Data+0x114>)
 800296c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	021b      	lsls	r3, r3, #8
 8002972:	b21b      	sxth	r3, r3
 8002974:	4313      	orrs	r3, r2
 8002976:	b21b      	sxth	r3, r3
 8002978:	ee07 3a90 	vmov	s15, r3
 800297c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002980:	4b3b      	ldr	r3, [pc, #236]	; (8002a70 <MPU_Convert_Acc_Data+0x114>)
 8002982:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800298a:	4b39      	ldr	r3, [pc, #228]	; (8002a70 <MPU_Convert_Acc_Data+0x114>)
 800298c:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	mpu.acc_raw[1] = (int16_t)(mpu.acc_data[3] | (mpu.acc_data[2] << 8)) * mpu.acc_conversion;
 8002990:	4b37      	ldr	r3, [pc, #220]	; (8002a70 <MPU_Convert_Acc_Data+0x114>)
 8002992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002994:	3303      	adds	r3, #3
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	b21a      	sxth	r2, r3
 800299a:	4b35      	ldr	r3, [pc, #212]	; (8002a70 <MPU_Convert_Acc_Data+0x114>)
 800299c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299e:	3302      	adds	r3, #2
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	021b      	lsls	r3, r3, #8
 80029a4:	b21b      	sxth	r3, r3
 80029a6:	4313      	orrs	r3, r2
 80029a8:	b21b      	sxth	r3, r3
 80029aa:	ee07 3a90 	vmov	s15, r3
 80029ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029b2:	4b2f      	ldr	r3, [pc, #188]	; (8002a70 <MPU_Convert_Acc_Data+0x114>)
 80029b4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80029b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029bc:	4b2c      	ldr	r3, [pc, #176]	; (8002a70 <MPU_Convert_Acc_Data+0x114>)
 80029be:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	mpu.acc_raw[2] = (int16_t)(mpu.acc_data[5] | (mpu.acc_data[4] << 8)) * mpu.acc_conversion;
 80029c2:	4b2b      	ldr	r3, [pc, #172]	; (8002a70 <MPU_Convert_Acc_Data+0x114>)
 80029c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c6:	3305      	adds	r3, #5
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	b21a      	sxth	r2, r3
 80029cc:	4b28      	ldr	r3, [pc, #160]	; (8002a70 <MPU_Convert_Acc_Data+0x114>)
 80029ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d0:	3304      	adds	r3, #4
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	021b      	lsls	r3, r3, #8
 80029d6:	b21b      	sxth	r3, r3
 80029d8:	4313      	orrs	r3, r2
 80029da:	b21b      	sxth	r3, r3
 80029dc:	ee07 3a90 	vmov	s15, r3
 80029e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029e4:	4b22      	ldr	r3, [pc, #136]	; (8002a70 <MPU_Convert_Acc_Data+0x114>)
 80029e6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80029ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ee:	4b20      	ldr	r3, [pc, #128]	; (8002a70 <MPU_Convert_Acc_Data+0x114>)
 80029f0:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	/* Filtering */
	mpu.acc[0] = (mpu.acc[0] * COEF_ACC_FILTERING) + (mpu.acc_raw[0] * (float)(1-COEF_ACC_FILTERING));
 80029f4:	4b1e      	ldr	r3, [pc, #120]	; (8002a70 <MPU_Convert_Acc_Data+0x114>)
 80029f6:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80029fa:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002a74 <MPU_Convert_Acc_Data+0x118>
 80029fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a02:	4b1b      	ldr	r3, [pc, #108]	; (8002a70 <MPU_Convert_Acc_Data+0x114>)
 8002a04:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002a08:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002a78 <MPU_Convert_Acc_Data+0x11c>
 8002a0c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a14:	4b16      	ldr	r3, [pc, #88]	; (8002a70 <MPU_Convert_Acc_Data+0x114>)
 8002a16:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	mpu.acc[1] = (mpu.acc[1] * COEF_ACC_FILTERING) + (mpu.acc_raw[1] * (float)(1-COEF_ACC_FILTERING));
 8002a1a:	4b15      	ldr	r3, [pc, #84]	; (8002a70 <MPU_Convert_Acc_Data+0x114>)
 8002a1c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002a20:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002a74 <MPU_Convert_Acc_Data+0x118>
 8002a24:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a28:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <MPU_Convert_Acc_Data+0x114>)
 8002a2a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002a2e:	eddf 6a12 	vldr	s13, [pc, #72]	; 8002a78 <MPU_Convert_Acc_Data+0x11c>
 8002a32:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a3a:	4b0d      	ldr	r3, [pc, #52]	; (8002a70 <MPU_Convert_Acc_Data+0x114>)
 8002a3c:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	mpu.acc[2] = (mpu.acc[2] * COEF_ACC_FILTERING) + (mpu.acc_raw[2] * (float)(1-COEF_ACC_FILTERING));
 8002a40:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <MPU_Convert_Acc_Data+0x114>)
 8002a42:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002a46:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002a74 <MPU_Convert_Acc_Data+0x118>
 8002a4a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a4e:	4b08      	ldr	r3, [pc, #32]	; (8002a70 <MPU_Convert_Acc_Data+0x114>)
 8002a50:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002a54:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002a78 <MPU_Convert_Acc_Data+0x11c>
 8002a58:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a60:	4b03      	ldr	r3, [pc, #12]	; (8002a70 <MPU_Convert_Acc_Data+0x114>)
 8002a62:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
}
 8002a66:	bf00      	nop
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	200000a4 	.word	0x200000a4
 8002a74:	3f666666 	.word	0x3f666666
 8002a78:	3dccccd0 	.word	0x3dccccd0

08002a7c <MPU_Convert_Gyro_Data>:

/*
 * @brief Convert gyro bytes to measurement
 */
void MPU_Convert_Gyro_Data(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
	/* Data convertion */
	mpu.gyro_raw[0] = (int16_t)(mpu.gyro_data[1] | (mpu.gyro_data[0] << 8)) * mpu.gyro_conversion;
 8002a80:	4b43      	ldr	r3, [pc, #268]	; (8002b90 <MPU_Convert_Gyro_Data+0x114>)
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	3301      	adds	r3, #1
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	b21a      	sxth	r2, r3
 8002a8a:	4b41      	ldr	r3, [pc, #260]	; (8002b90 <MPU_Convert_Gyro_Data+0x114>)
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	021b      	lsls	r3, r3, #8
 8002a92:	b21b      	sxth	r3, r3
 8002a94:	4313      	orrs	r3, r2
 8002a96:	b21b      	sxth	r3, r3
 8002a98:	ee07 3a90 	vmov	s15, r3
 8002a9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002aa0:	4b3b      	ldr	r3, [pc, #236]	; (8002b90 <MPU_Convert_Gyro_Data+0x114>)
 8002aa2:	edd3 7a05 	vldr	s15, [r3, #20]
 8002aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aaa:	4b39      	ldr	r3, [pc, #228]	; (8002b90 <MPU_Convert_Gyro_Data+0x114>)
 8002aac:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	mpu.gyro_raw[1] = (int16_t)(mpu.gyro_data[3] | (mpu.gyro_data[2] << 8)) * mpu.gyro_conversion;
 8002ab0:	4b37      	ldr	r3, [pc, #220]	; (8002b90 <MPU_Convert_Gyro_Data+0x114>)
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	3303      	adds	r3, #3
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	b21a      	sxth	r2, r3
 8002aba:	4b35      	ldr	r3, [pc, #212]	; (8002b90 <MPU_Convert_Gyro_Data+0x114>)
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	3302      	adds	r3, #2
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	021b      	lsls	r3, r3, #8
 8002ac4:	b21b      	sxth	r3, r3
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	b21b      	sxth	r3, r3
 8002aca:	ee07 3a90 	vmov	s15, r3
 8002ace:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ad2:	4b2f      	ldr	r3, [pc, #188]	; (8002b90 <MPU_Convert_Gyro_Data+0x114>)
 8002ad4:	edd3 7a05 	vldr	s15, [r3, #20]
 8002ad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002adc:	4b2c      	ldr	r3, [pc, #176]	; (8002b90 <MPU_Convert_Gyro_Data+0x114>)
 8002ade:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	mpu.gyro_raw[2] = (int16_t)(mpu.gyro_data[5] | (mpu.gyro_data[4] << 8)) * mpu.gyro_conversion;
 8002ae2:	4b2b      	ldr	r3, [pc, #172]	; (8002b90 <MPU_Convert_Gyro_Data+0x114>)
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	3305      	adds	r3, #5
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	b21a      	sxth	r2, r3
 8002aec:	4b28      	ldr	r3, [pc, #160]	; (8002b90 <MPU_Convert_Gyro_Data+0x114>)
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	3304      	adds	r3, #4
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	021b      	lsls	r3, r3, #8
 8002af6:	b21b      	sxth	r3, r3
 8002af8:	4313      	orrs	r3, r2
 8002afa:	b21b      	sxth	r3, r3
 8002afc:	ee07 3a90 	vmov	s15, r3
 8002b00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b04:	4b22      	ldr	r3, [pc, #136]	; (8002b90 <MPU_Convert_Gyro_Data+0x114>)
 8002b06:	edd3 7a05 	vldr	s15, [r3, #20]
 8002b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b0e:	4b20      	ldr	r3, [pc, #128]	; (8002b90 <MPU_Convert_Gyro_Data+0x114>)
 8002b10:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	/* Filtering */
	mpu.gyro[0] = (mpu.gyro[0] * COEF_GYRO_FILTERING) + (mpu.gyro_raw[0] * (float)(1-COEF_GYRO_FILTERING));
 8002b14:	4b1e      	ldr	r3, [pc, #120]	; (8002b90 <MPU_Convert_Gyro_Data+0x114>)
 8002b16:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b1a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002b94 <MPU_Convert_Gyro_Data+0x118>
 8002b1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b22:	4b1b      	ldr	r3, [pc, #108]	; (8002b90 <MPU_Convert_Gyro_Data+0x114>)
 8002b24:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002b28:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002b98 <MPU_Convert_Gyro_Data+0x11c>
 8002b2c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b34:	4b16      	ldr	r3, [pc, #88]	; (8002b90 <MPU_Convert_Gyro_Data+0x114>)
 8002b36:	edc3 7a06 	vstr	s15, [r3, #24]
	mpu.gyro[1] = (mpu.gyro[1] * COEF_GYRO_FILTERING) + (mpu.gyro_raw[1] * (float)(1-COEF_GYRO_FILTERING));
 8002b3a:	4b15      	ldr	r3, [pc, #84]	; (8002b90 <MPU_Convert_Gyro_Data+0x114>)
 8002b3c:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b40:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002b94 <MPU_Convert_Gyro_Data+0x118>
 8002b44:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b48:	4b11      	ldr	r3, [pc, #68]	; (8002b90 <MPU_Convert_Gyro_Data+0x114>)
 8002b4a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002b4e:	eddf 6a12 	vldr	s13, [pc, #72]	; 8002b98 <MPU_Convert_Gyro_Data+0x11c>
 8002b52:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b5a:	4b0d      	ldr	r3, [pc, #52]	; (8002b90 <MPU_Convert_Gyro_Data+0x114>)
 8002b5c:	edc3 7a07 	vstr	s15, [r3, #28]
	mpu.gyro[2] = (mpu.gyro[2] * COEF_GYRO_FILTERING) + (mpu.gyro_raw[2] * (float)(1-COEF_GYRO_FILTERING));
 8002b60:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <MPU_Convert_Gyro_Data+0x114>)
 8002b62:	edd3 7a08 	vldr	s15, [r3, #32]
 8002b66:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002b94 <MPU_Convert_Gyro_Data+0x118>
 8002b6a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b6e:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <MPU_Convert_Gyro_Data+0x114>)
 8002b70:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002b74:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002b98 <MPU_Convert_Gyro_Data+0x11c>
 8002b78:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b80:	4b03      	ldr	r3, [pc, #12]	; (8002b90 <MPU_Convert_Gyro_Data+0x114>)
 8002b82:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8002b86:	bf00      	nop
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	200000a4 	.word	0x200000a4
 8002b94:	3f666666 	.word	0x3f666666
 8002b98:	3dccccd0 	.word	0x3dccccd0

08002b9c <MPU_Is_Ok>:

/*
 * @brief get state of the mpu
 */
bool_e MPU_Is_Ok(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
	return mpu.state == mpu_state_eOK;
 8002ba0:	4b05      	ldr	r3, [pc, #20]	; (8002bb8 <MPU_Is_Ok+0x1c>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	bf0c      	ite	eq
 8002ba8:	2301      	moveq	r3, #1
 8002baa:	2300      	movne	r3, #0
 8002bac:	b2db      	uxtb	r3, r3
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	200000a4 	.word	0x200000a4

08002bbc <MPU_Rx_Complete_Callback>:

/*
 * @brief Called back on half rx cplt it
 */
bool_e MPU_Rx_Complete_Callback(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
	if(mpu.dma_state)
 8002bc0:	4b12      	ldr	r3, [pc, #72]	; (8002c0c <MPU_Rx_Complete_Callback+0x50>)
 8002bc2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d01d      	beq.n	8002c06 <MPU_Rx_Complete_Callback+0x4a>
	{
		switch(mpu.dma_state)
 8002bca:	4b10      	ldr	r3, [pc, #64]	; (8002c0c <MPU_Rx_Complete_Callback+0x50>)
 8002bcc:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8002bd0:	2b03      	cmp	r3, #3
 8002bd2:	d00c      	beq.n	8002bee <MPU_Rx_Complete_Callback+0x32>
 8002bd4:	2b03      	cmp	r3, #3
 8002bd6:	dc0f      	bgt.n	8002bf8 <MPU_Rx_Complete_Callback+0x3c>
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d002      	beq.n	8002be2 <MPU_Rx_Complete_Callback+0x26>
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d003      	beq.n	8002be8 <MPU_Rx_Complete_Callback+0x2c>
			case dma_state_eIN_PORGRESS_ALL:
				MPU_Convert_Acc_Data();
				MPU_Convert_Gyro_Data();
				break;
			default:
				break;
 8002be0:	e00a      	b.n	8002bf8 <MPU_Rx_Complete_Callback+0x3c>
				MPU_Convert_Gyro_Data();
 8002be2:	f7ff ff4b 	bl	8002a7c <MPU_Convert_Gyro_Data>
				break;
 8002be6:	e008      	b.n	8002bfa <MPU_Rx_Complete_Callback+0x3e>
				MPU_Convert_Acc_Data();
 8002be8:	f7ff feb8 	bl	800295c <MPU_Convert_Acc_Data>
				break;
 8002bec:	e005      	b.n	8002bfa <MPU_Rx_Complete_Callback+0x3e>
				MPU_Convert_Acc_Data();
 8002bee:	f7ff feb5 	bl	800295c <MPU_Convert_Acc_Data>
				MPU_Convert_Gyro_Data();
 8002bf2:	f7ff ff43 	bl	8002a7c <MPU_Convert_Gyro_Data>
				break;
 8002bf6:	e000      	b.n	8002bfa <MPU_Rx_Complete_Callback+0x3e>
				break;
 8002bf8:	bf00      	nop
		}
		mpu.dma_state = dma_state_eIDLE;
 8002bfa:	4b04      	ldr	r3, [pc, #16]	; (8002c0c <MPU_Rx_Complete_Callback+0x50>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		return TRUE;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e000      	b.n	8002c08 <MPU_Rx_Complete_Callback+0x4c>
	}
	return FALSE;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	200000a4 	.word	0x200000a4

08002c10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c16:	2300      	movs	r3, #0
 8002c18:	607b      	str	r3, [r7, #4]
 8002c1a:	4b2f      	ldr	r3, [pc, #188]	; (8002cd8 <MX_DMA_Init+0xc8>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	4a2e      	ldr	r2, [pc, #184]	; (8002cd8 <MX_DMA_Init+0xc8>)
 8002c20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c24:	6313      	str	r3, [r2, #48]	; 0x30
 8002c26:	4b2c      	ldr	r3, [pc, #176]	; (8002cd8 <MX_DMA_Init+0xc8>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c2e:	607b      	str	r3, [r7, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	603b      	str	r3, [r7, #0]
 8002c36:	4b28      	ldr	r3, [pc, #160]	; (8002cd8 <MX_DMA_Init+0xc8>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	4a27      	ldr	r2, [pc, #156]	; (8002cd8 <MX_DMA_Init+0xc8>)
 8002c3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c40:	6313      	str	r3, [r2, #48]	; 0x30
 8002c42:	4b25      	ldr	r3, [pc, #148]	; (8002cd8 <MX_DMA_Init+0xc8>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c4a:	603b      	str	r3, [r7, #0]
 8002c4c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002c4e:	2200      	movs	r2, #0
 8002c50:	2100      	movs	r1, #0
 8002c52:	200b      	movs	r0, #11
 8002c54:	f001 fa1f 	bl	8004096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002c58:	200b      	movs	r0, #11
 8002c5a:	f001 fa38 	bl	80040ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002c5e:	2200      	movs	r2, #0
 8002c60:	2100      	movs	r1, #0
 8002c62:	200c      	movs	r0, #12
 8002c64:	f001 fa17 	bl	8004096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002c68:	200c      	movs	r0, #12
 8002c6a:	f001 fa30 	bl	80040ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002c6e:	2200      	movs	r2, #0
 8002c70:	2100      	movs	r1, #0
 8002c72:	200d      	movs	r0, #13
 8002c74:	f001 fa0f 	bl	8004096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002c78:	200d      	movs	r0, #13
 8002c7a:	f001 fa28 	bl	80040ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002c7e:	2200      	movs	r2, #0
 8002c80:	2100      	movs	r1, #0
 8002c82:	200e      	movs	r0, #14
 8002c84:	f001 fa07 	bl	8004096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002c88:	200e      	movs	r0, #14
 8002c8a:	f001 fa20 	bl	80040ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2100      	movs	r1, #0
 8002c92:	200f      	movs	r0, #15
 8002c94:	f001 f9ff 	bl	8004096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002c98:	200f      	movs	r0, #15
 8002c9a:	f001 fa18 	bl	80040ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	2011      	movs	r0, #17
 8002ca4:	f001 f9f7 	bl	8004096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002ca8:	2011      	movs	r0, #17
 8002caa:	f001 fa10 	bl	80040ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002cae:	2200      	movs	r2, #0
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	203a      	movs	r0, #58	; 0x3a
 8002cb4:	f001 f9ef 	bl	8004096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002cb8:	203a      	movs	r0, #58	; 0x3a
 8002cba:	f001 fa08 	bl	80040ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	2046      	movs	r0, #70	; 0x46
 8002cc4:	f001 f9e7 	bl	8004096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002cc8:	2046      	movs	r0, #70	; 0x46
 8002cca:	f001 fa00 	bl	80040ce <HAL_NVIC_EnableIRQ>

}
 8002cce:	bf00      	nop
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40023800 	.word	0x40023800

08002cdc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b088      	sub	sp, #32
 8002ce0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce2:	f107 030c 	add.w	r3, r7, #12
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	605a      	str	r2, [r3, #4]
 8002cec:	609a      	str	r2, [r3, #8]
 8002cee:	60da      	str	r2, [r3, #12]
 8002cf0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	60bb      	str	r3, [r7, #8]
 8002cf6:	4b20      	ldr	r3, [pc, #128]	; (8002d78 <MX_GPIO_Init+0x9c>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	4a1f      	ldr	r2, [pc, #124]	; (8002d78 <MX_GPIO_Init+0x9c>)
 8002cfc:	f043 0304 	orr.w	r3, r3, #4
 8002d00:	6313      	str	r3, [r2, #48]	; 0x30
 8002d02:	4b1d      	ldr	r3, [pc, #116]	; (8002d78 <MX_GPIO_Init+0x9c>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	60bb      	str	r3, [r7, #8]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	607b      	str	r3, [r7, #4]
 8002d12:	4b19      	ldr	r3, [pc, #100]	; (8002d78 <MX_GPIO_Init+0x9c>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	4a18      	ldr	r2, [pc, #96]	; (8002d78 <MX_GPIO_Init+0x9c>)
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d1e:	4b16      	ldr	r3, [pc, #88]	; (8002d78 <MX_GPIO_Init+0x9c>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	607b      	str	r3, [r7, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	603b      	str	r3, [r7, #0]
 8002d2e:	4b12      	ldr	r3, [pc, #72]	; (8002d78 <MX_GPIO_Init+0x9c>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	4a11      	ldr	r2, [pc, #68]	; (8002d78 <MX_GPIO_Init+0x9c>)
 8002d34:	f043 0302 	orr.w	r3, r3, #2
 8002d38:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3a:	4b0f      	ldr	r3, [pc, #60]	; (8002d78 <MX_GPIO_Init+0x9c>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	603b      	str	r3, [r7, #0]
 8002d44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_STATE_Pin|LED_STATE2_Pin|MPU_POWER_Pin, GPIO_PIN_RESET);
 8002d46:	2200      	movs	r2, #0
 8002d48:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8002d4c:	480b      	ldr	r0, [pc, #44]	; (8002d7c <MX_GPIO_Init+0xa0>)
 8002d4e:	f001 ff91 	bl	8004c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_STATE_Pin|LED_STATE2_Pin|MPU_POWER_Pin;
 8002d52:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002d56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d60:	2300      	movs	r3, #0
 8002d62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d64:	f107 030c 	add.w	r3, r7, #12
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4804      	ldr	r0, [pc, #16]	; (8002d7c <MX_GPIO_Init+0xa0>)
 8002d6c:	f001 fde6 	bl	800493c <HAL_GPIO_Init>

}
 8002d70:	bf00      	nop
 8002d72:	3720      	adds	r7, #32
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	40020800 	.word	0x40020800

08002d80 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d84:	4b12      	ldr	r3, [pc, #72]	; (8002dd0 <MX_I2C1_Init+0x50>)
 8002d86:	4a13      	ldr	r2, [pc, #76]	; (8002dd4 <MX_I2C1_Init+0x54>)
 8002d88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002d8a:	4b11      	ldr	r3, [pc, #68]	; (8002dd0 <MX_I2C1_Init+0x50>)
 8002d8c:	4a12      	ldr	r2, [pc, #72]	; (8002dd8 <MX_I2C1_Init+0x58>)
 8002d8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d90:	4b0f      	ldr	r3, [pc, #60]	; (8002dd0 <MX_I2C1_Init+0x50>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002d96:	4b0e      	ldr	r3, [pc, #56]	; (8002dd0 <MX_I2C1_Init+0x50>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d9c:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <MX_I2C1_Init+0x50>)
 8002d9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002da2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002da4:	4b0a      	ldr	r3, [pc, #40]	; (8002dd0 <MX_I2C1_Init+0x50>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002daa:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <MX_I2C1_Init+0x50>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002db0:	4b07      	ldr	r3, [pc, #28]	; (8002dd0 <MX_I2C1_Init+0x50>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002db6:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <MX_I2C1_Init+0x50>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002dbc:	4804      	ldr	r0, [pc, #16]	; (8002dd0 <MX_I2C1_Init+0x50>)
 8002dbe:	f001 ff73 	bl	8004ca8 <HAL_I2C_Init>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002dc8:	f000 f9d6 	bl	8003178 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002dcc:	bf00      	nop
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	20001488 	.word	0x20001488
 8002dd4:	40005400 	.word	0x40005400
 8002dd8:	00061a80 	.word	0x00061a80

08002ddc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08a      	sub	sp, #40	; 0x28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de4:	f107 0314 	add.w	r3, r7, #20
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	605a      	str	r2, [r3, #4]
 8002dee:	609a      	str	r2, [r3, #8]
 8002df0:	60da      	str	r2, [r3, #12]
 8002df2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a50      	ldr	r2, [pc, #320]	; (8002f3c <HAL_I2C_MspInit+0x160>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	f040 8099 	bne.w	8002f32 <HAL_I2C_MspInit+0x156>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e00:	2300      	movs	r3, #0
 8002e02:	613b      	str	r3, [r7, #16]
 8002e04:	4b4e      	ldr	r3, [pc, #312]	; (8002f40 <HAL_I2C_MspInit+0x164>)
 8002e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e08:	4a4d      	ldr	r2, [pc, #308]	; (8002f40 <HAL_I2C_MspInit+0x164>)
 8002e0a:	f043 0302 	orr.w	r3, r3, #2
 8002e0e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e10:	4b4b      	ldr	r3, [pc, #300]	; (8002f40 <HAL_I2C_MspInit+0x164>)
 8002e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	613b      	str	r3, [r7, #16]
 8002e1a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e1c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e22:	2312      	movs	r3, #18
 8002e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e2e:	2304      	movs	r3, #4
 8002e30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e32:	f107 0314 	add.w	r3, r7, #20
 8002e36:	4619      	mov	r1, r3
 8002e38:	4842      	ldr	r0, [pc, #264]	; (8002f44 <HAL_I2C_MspInit+0x168>)
 8002e3a:	f001 fd7f 	bl	800493c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	4b3f      	ldr	r3, [pc, #252]	; (8002f40 <HAL_I2C_MspInit+0x164>)
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	4a3e      	ldr	r2, [pc, #248]	; (8002f40 <HAL_I2C_MspInit+0x164>)
 8002e48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e4e:	4b3c      	ldr	r3, [pc, #240]	; (8002f40 <HAL_I2C_MspInit+0x164>)
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8002e5a:	4b3b      	ldr	r3, [pc, #236]	; (8002f48 <HAL_I2C_MspInit+0x16c>)
 8002e5c:	4a3b      	ldr	r2, [pc, #236]	; (8002f4c <HAL_I2C_MspInit+0x170>)
 8002e5e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002e60:	4b39      	ldr	r3, [pc, #228]	; (8002f48 <HAL_I2C_MspInit+0x16c>)
 8002e62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e66:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e68:	4b37      	ldr	r3, [pc, #220]	; (8002f48 <HAL_I2C_MspInit+0x16c>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e6e:	4b36      	ldr	r3, [pc, #216]	; (8002f48 <HAL_I2C_MspInit+0x16c>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e74:	4b34      	ldr	r3, [pc, #208]	; (8002f48 <HAL_I2C_MspInit+0x16c>)
 8002e76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e7a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e7c:	4b32      	ldr	r3, [pc, #200]	; (8002f48 <HAL_I2C_MspInit+0x16c>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e82:	4b31      	ldr	r3, [pc, #196]	; (8002f48 <HAL_I2C_MspInit+0x16c>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002e88:	4b2f      	ldr	r3, [pc, #188]	; (8002f48 <HAL_I2C_MspInit+0x16c>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e8e:	4b2e      	ldr	r3, [pc, #184]	; (8002f48 <HAL_I2C_MspInit+0x16c>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e94:	4b2c      	ldr	r3, [pc, #176]	; (8002f48 <HAL_I2C_MspInit+0x16c>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002e9a:	482b      	ldr	r0, [pc, #172]	; (8002f48 <HAL_I2C_MspInit+0x16c>)
 8002e9c:	f001 f932 	bl	8004104 <HAL_DMA_Init>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8002ea6:	f000 f967 	bl	8003178 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a26      	ldr	r2, [pc, #152]	; (8002f48 <HAL_I2C_MspInit+0x16c>)
 8002eae:	639a      	str	r2, [r3, #56]	; 0x38
 8002eb0:	4a25      	ldr	r2, [pc, #148]	; (8002f48 <HAL_I2C_MspInit+0x16c>)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8002eb6:	4b26      	ldr	r3, [pc, #152]	; (8002f50 <HAL_I2C_MspInit+0x174>)
 8002eb8:	4a26      	ldr	r2, [pc, #152]	; (8002f54 <HAL_I2C_MspInit+0x178>)
 8002eba:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8002ebc:	4b24      	ldr	r3, [pc, #144]	; (8002f50 <HAL_I2C_MspInit+0x174>)
 8002ebe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ec2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ec4:	4b22      	ldr	r3, [pc, #136]	; (8002f50 <HAL_I2C_MspInit+0x174>)
 8002ec6:	2240      	movs	r2, #64	; 0x40
 8002ec8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eca:	4b21      	ldr	r3, [pc, #132]	; (8002f50 <HAL_I2C_MspInit+0x174>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ed0:	4b1f      	ldr	r3, [pc, #124]	; (8002f50 <HAL_I2C_MspInit+0x174>)
 8002ed2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ed6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ed8:	4b1d      	ldr	r3, [pc, #116]	; (8002f50 <HAL_I2C_MspInit+0x174>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ede:	4b1c      	ldr	r3, [pc, #112]	; (8002f50 <HAL_I2C_MspInit+0x174>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002ee4:	4b1a      	ldr	r3, [pc, #104]	; (8002f50 <HAL_I2C_MspInit+0x174>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002eea:	4b19      	ldr	r3, [pc, #100]	; (8002f50 <HAL_I2C_MspInit+0x174>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ef0:	4b17      	ldr	r3, [pc, #92]	; (8002f50 <HAL_I2C_MspInit+0x174>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002ef6:	4816      	ldr	r0, [pc, #88]	; (8002f50 <HAL_I2C_MspInit+0x174>)
 8002ef8:	f001 f904 	bl	8004104 <HAL_DMA_Init>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8002f02:	f000 f939 	bl	8003178 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a11      	ldr	r2, [pc, #68]	; (8002f50 <HAL_I2C_MspInit+0x174>)
 8002f0a:	635a      	str	r2, [r3, #52]	; 0x34
 8002f0c:	4a10      	ldr	r2, [pc, #64]	; (8002f50 <HAL_I2C_MspInit+0x174>)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002f12:	2200      	movs	r2, #0
 8002f14:	2100      	movs	r1, #0
 8002f16:	201f      	movs	r0, #31
 8002f18:	f001 f8bd 	bl	8004096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002f1c:	201f      	movs	r0, #31
 8002f1e:	f001 f8d6 	bl	80040ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002f22:	2200      	movs	r2, #0
 8002f24:	2100      	movs	r1, #0
 8002f26:	2020      	movs	r0, #32
 8002f28:	f001 f8b5 	bl	8004096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002f2c:	2020      	movs	r0, #32
 8002f2e:	f001 f8ce 	bl	80040ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002f32:	bf00      	nop
 8002f34:	3728      	adds	r7, #40	; 0x28
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40005400 	.word	0x40005400
 8002f40:	40023800 	.word	0x40023800
 8002f44:	40020400 	.word	0x40020400
 8002f48:	200014dc 	.word	0x200014dc
 8002f4c:	40026010 	.word	0x40026010
 8002f50:	20001428 	.word	0x20001428
 8002f54:	400260a0 	.word	0x400260a0

08002f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f5e:	f000 ff29 	bl	8003db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f62:	f000 f89f 	bl	80030a4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f66:	f7ff feb9 	bl	8002cdc <MX_GPIO_Init>
  MX_DMA_Init();
 8002f6a:	f7ff fe51 	bl	8002c10 <MX_DMA_Init>
  MX_UART4_Init();
 8002f6e:	f000 fb41 	bl	80035f4 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8002f72:	f000 fb69 	bl	8003648 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002f76:	f000 fa29 	bl	80033cc <MX_TIM3_Init>
  MX_I2C1_Init();
 8002f7a:	f7ff ff01 	bl	8002d80 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8002f7e:	f000 fb8d 	bl	800369c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Wait for everyone to start */
  HAL_Delay(15);
 8002f82:	200f      	movs	r0, #15
 8002f84:	f000 ff88 	bl	8003e98 <HAL_Delay>
  /* Peripherals initialization */
  UART_Init();
 8002f88:	f7ff f95c 	bl	8002244 <UART_Init>
  /* Task definition 	Name						Init process					Main process						1ms it process						Gyro data callback process */
  TASK_MANAGER_Add_Task("Gyro", 					MPU_Init, 						NULL, 								MPU_Read_All_Dma,  					NULL);
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	4b29      	ldr	r3, [pc, #164]	; (8003038 <main+0xe0>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	4929      	ldr	r1, [pc, #164]	; (800303c <main+0xe4>)
 8002f96:	482a      	ldr	r0, [pc, #168]	; (8003040 <main+0xe8>)
 8002f98:	f000 feaa 	bl	8003cf0 <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("Complementary Filter", 	COMPLEMENTARY_FILTER_Init, 		NULL, 								NULL,								COMPLEMENTARY_FILTER_Process);
 8002f9c:	4b29      	ldr	r3, [pc, #164]	; (8003044 <main+0xec>)
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	4928      	ldr	r1, [pc, #160]	; (8003048 <main+0xf0>)
 8002fa6:	4829      	ldr	r0, [pc, #164]	; (800304c <main+0xf4>)
 8002fa8:	f000 fea2 	bl	8003cf0 <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("Controller", 				CONTROLLER_Init, 				NULL, 								NULL, 								CONTROLLER_Process);
 8002fac:	4b28      	ldr	r3, [pc, #160]	; (8003050 <main+0xf8>)
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	4927      	ldr	r1, [pc, #156]	; (8003054 <main+0xfc>)
 8002fb6:	4828      	ldr	r0, [pc, #160]	; (8003058 <main+0x100>)
 8002fb8:	f000 fe9a 	bl	8003cf0 <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("Motor Mixer", 				NULL, 							NULL, 								MOTOR_MIXER_Process, 				MOTOR_MIXER_Process);
 8002fbc:	4b27      	ldr	r3, [pc, #156]	; (800305c <main+0x104>)
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	4b26      	ldr	r3, [pc, #152]	; (800305c <main+0x104>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	4826      	ldr	r0, [pc, #152]	; (8003060 <main+0x108>)
 8002fc8:	f000 fe92 	bl	8003cf0 <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("Motors",					MOTOR_Init, 					NULL, 								NULL, 								MOTOR_Process);
 8002fcc:	4b25      	ldr	r3, [pc, #148]	; (8003064 <main+0x10c>)
 8002fce:	9300      	str	r3, [sp, #0]
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	4924      	ldr	r1, [pc, #144]	; (8003068 <main+0x110>)
 8002fd6:	4825      	ldr	r0, [pc, #148]	; (800306c <main+0x114>)
 8002fd8:	f000 fe8a 	bl	8003cf0 <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("Radio", 					RADIO_Process_Init, 			RADIO_Process_Main, 				NULL, 								NULL);
 8002fdc:	2300      	movs	r3, #0
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	4a23      	ldr	r2, [pc, #140]	; (8003070 <main+0x118>)
 8002fe4:	4923      	ldr	r1, [pc, #140]	; (8003074 <main+0x11c>)
 8002fe6:	4824      	ldr	r0, [pc, #144]	; (8003078 <main+0x120>)
 8002fe8:	f000 fe82 	bl	8003cf0 <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("Data Logger", 				DATA_LOGGER_Init, 				DATA_LOGGER_Main, 					NULL, 								NULL);
 8002fec:	2300      	movs	r3, #0
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	4a22      	ldr	r2, [pc, #136]	; (800307c <main+0x124>)
 8002ff4:	4922      	ldr	r1, [pc, #136]	; (8003080 <main+0x128>)
 8002ff6:	4823      	ldr	r0, [pc, #140]	; (8003084 <main+0x12c>)
 8002ff8:	f000 fe7a 	bl	8003cf0 <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("High Level", 				HIGH_LEVEL_Init, 				HIGH_LEVEL_Process_Main, 			NULL, 								NULL);
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	2300      	movs	r3, #0
 8003002:	4a21      	ldr	r2, [pc, #132]	; (8003088 <main+0x130>)
 8003004:	4921      	ldr	r1, [pc, #132]	; (800308c <main+0x134>)
 8003006:	4822      	ldr	r0, [pc, #136]	; (8003090 <main+0x138>)
 8003008:	f000 fe72 	bl	8003cf0 <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("Led", 						NULL, 							NULL, 								Led_main_ms, NULL);
 800300c:	2300      	movs	r3, #0
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	4b20      	ldr	r3, [pc, #128]	; (8003094 <main+0x13c>)
 8003012:	2200      	movs	r2, #0
 8003014:	2100      	movs	r1, #0
 8003016:	4820      	ldr	r0, [pc, #128]	; (8003098 <main+0x140>)
 8003018:	f000 fe6a 	bl	8003cf0 <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("Supervisor", 				NULL, 							NULL, 								SUPERVISOR_Process_Ms, NULL);
 800301c:	2300      	movs	r3, #0
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	4b1e      	ldr	r3, [pc, #120]	; (800309c <main+0x144>)
 8003022:	2200      	movs	r2, #0
 8003024:	2100      	movs	r1, #0
 8003026:	481e      	ldr	r0, [pc, #120]	; (80030a0 <main+0x148>)
 8003028:	f000 fe62 	bl	8003cf0 <TASK_MANAGER_Add_Task>

  /* System initialization */
  TASK_MANAGER_Init();
 800302c:	f000 fda6 	bl	8003b7c <TASK_MANAGER_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  TASK_MANAGER_Main();
 8003030:	f000 fdd4 	bl	8003bdc <TASK_MANAGER_Main>
 8003034:	e7fc      	b.n	8003030 <main+0xd8>
 8003036:	bf00      	nop
 8003038:	08002911 	.word	0x08002911
 800303c:	0800275d 	.word	0x0800275d
 8003040:	0800b4e0 	.word	0x0800b4e0
 8003044:	080004fd 	.word	0x080004fd
 8003048:	080004c1 	.word	0x080004c1
 800304c:	0800b4e8 	.word	0x0800b4e8
 8003050:	08000891 	.word	0x08000891
 8003054:	0800085d 	.word	0x0800085d
 8003058:	0800b500 	.word	0x0800b500
 800305c:	0800198d 	.word	0x0800198d
 8003060:	0800b50c 	.word	0x0800b50c
 8003064:	08001a85 	.word	0x08001a85
 8003068:	08001a75 	.word	0x08001a75
 800306c:	0800b518 	.word	0x0800b518
 8003070:	080026f1 	.word	0x080026f1
 8003074:	080026dd 	.word	0x080026dd
 8003078:	0800b520 	.word	0x0800b520
 800307c:	08000ce9 	.word	0x08000ce9
 8003080:	08000a3d 	.word	0x08000a3d
 8003084:	0800b528 	.word	0x0800b528
 8003088:	080015c1 	.word	0x080015c1
 800308c:	08001581 	.word	0x08001581
 8003090:	0800b534 	.word	0x0800b534
 8003094:	08001845 	.word	0x08001845
 8003098:	0800b540 	.word	0x0800b540
 800309c:	08003b43 	.word	0x08003b43
 80030a0:	0800b544 	.word	0x0800b544

080030a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b094      	sub	sp, #80	; 0x50
 80030a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030aa:	f107 0320 	add.w	r3, r7, #32
 80030ae:	2230      	movs	r2, #48	; 0x30
 80030b0:	2100      	movs	r1, #0
 80030b2:	4618      	mov	r0, r3
 80030b4:	f007 fafe 	bl	800a6b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030b8:	f107 030c 	add.w	r3, r7, #12
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	605a      	str	r2, [r3, #4]
 80030c2:	609a      	str	r2, [r3, #8]
 80030c4:	60da      	str	r2, [r3, #12]
 80030c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80030c8:	2300      	movs	r3, #0
 80030ca:	60bb      	str	r3, [r7, #8]
 80030cc:	4b28      	ldr	r3, [pc, #160]	; (8003170 <SystemClock_Config+0xcc>)
 80030ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d0:	4a27      	ldr	r2, [pc, #156]	; (8003170 <SystemClock_Config+0xcc>)
 80030d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030d6:	6413      	str	r3, [r2, #64]	; 0x40
 80030d8:	4b25      	ldr	r3, [pc, #148]	; (8003170 <SystemClock_Config+0xcc>)
 80030da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e0:	60bb      	str	r3, [r7, #8]
 80030e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030e4:	2300      	movs	r3, #0
 80030e6:	607b      	str	r3, [r7, #4]
 80030e8:	4b22      	ldr	r3, [pc, #136]	; (8003174 <SystemClock_Config+0xd0>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a21      	ldr	r2, [pc, #132]	; (8003174 <SystemClock_Config+0xd0>)
 80030ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030f2:	6013      	str	r3, [r2, #0]
 80030f4:	4b1f      	ldr	r3, [pc, #124]	; (8003174 <SystemClock_Config+0xd0>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030fc:	607b      	str	r3, [r7, #4]
 80030fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003100:	2302      	movs	r3, #2
 8003102:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003104:	2301      	movs	r3, #1
 8003106:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003108:	2310      	movs	r3, #16
 800310a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800310c:	2302      	movs	r3, #2
 800310e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003110:	2300      	movs	r3, #0
 8003112:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003114:	2308      	movs	r3, #8
 8003116:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003118:	23a8      	movs	r3, #168	; 0xa8
 800311a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800311c:	2302      	movs	r3, #2
 800311e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003120:	2304      	movs	r3, #4
 8003122:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003124:	f107 0320 	add.w	r3, r7, #32
 8003128:	4618      	mov	r0, r3
 800312a:	f004 fe17 	bl	8007d5c <HAL_RCC_OscConfig>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003134:	f000 f820 	bl	8003178 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003138:	230f      	movs	r3, #15
 800313a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800313c:	2302      	movs	r3, #2
 800313e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003144:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003148:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800314a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800314e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003150:	f107 030c 	add.w	r3, r7, #12
 8003154:	2105      	movs	r1, #5
 8003156:	4618      	mov	r0, r3
 8003158:	f005 f878 	bl	800824c <HAL_RCC_ClockConfig>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003162:	f000 f809 	bl	8003178 <Error_Handler>
  }
}
 8003166:	bf00      	nop
 8003168:	3750      	adds	r7, #80	; 0x50
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40023800 	.word	0x40023800
 8003174:	40007000 	.word	0x40007000

08003178 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800317c:	b672      	cpsid	i
}
 800317e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003180:	e7fe      	b.n	8003180 <Error_Handler+0x8>
	...

08003184 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800318a:	2300      	movs	r3, #0
 800318c:	607b      	str	r3, [r7, #4]
 800318e:	4b10      	ldr	r3, [pc, #64]	; (80031d0 <HAL_MspInit+0x4c>)
 8003190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003192:	4a0f      	ldr	r2, [pc, #60]	; (80031d0 <HAL_MspInit+0x4c>)
 8003194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003198:	6453      	str	r3, [r2, #68]	; 0x44
 800319a:	4b0d      	ldr	r3, [pc, #52]	; (80031d0 <HAL_MspInit+0x4c>)
 800319c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031a2:	607b      	str	r3, [r7, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031a6:	2300      	movs	r3, #0
 80031a8:	603b      	str	r3, [r7, #0]
 80031aa:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <HAL_MspInit+0x4c>)
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	4a08      	ldr	r2, [pc, #32]	; (80031d0 <HAL_MspInit+0x4c>)
 80031b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b4:	6413      	str	r3, [r2, #64]	; 0x40
 80031b6:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <HAL_MspInit+0x4c>)
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031be:	603b      	str	r3, [r7, #0]
 80031c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40023800 	.word	0x40023800

080031d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031d8:	e7fe      	b.n	80031d8 <NMI_Handler+0x4>

080031da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031da:	b480      	push	{r7}
 80031dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031de:	e7fe      	b.n	80031de <HardFault_Handler+0x4>

080031e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031e4:	e7fe      	b.n	80031e4 <MemManage_Handler+0x4>

080031e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031e6:	b480      	push	{r7}
 80031e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031ea:	e7fe      	b.n	80031ea <BusFault_Handler+0x4>

080031ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031f0:	e7fe      	b.n	80031f0 <UsageFault_Handler+0x4>

080031f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031f2:	b480      	push	{r7}
 80031f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031f6:	bf00      	nop
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003204:	bf00      	nop
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800320e:	b480      	push	{r7}
 8003210:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003212:	bf00      	nop
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003220:	f000 fe1a 	bl	8003e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  TASK_MANAGER_It_ms();
 8003224:	f000 fd06 	bl	8003c34 <TASK_MANAGER_It_ms>
  /* USER CODE END SysTick_IRQn 1 */
}
 8003228:	bf00      	nop
 800322a:	bd80      	pop	{r7, pc}

0800322c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003230:	4802      	ldr	r0, [pc, #8]	; (800323c <DMA1_Stream0_IRQHandler+0x10>)
 8003232:	f001 f8ff 	bl	8004434 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003236:	bf00      	nop
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	200014dc 	.word	0x200014dc

08003240 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003244:	4802      	ldr	r0, [pc, #8]	; (8003250 <DMA1_Stream1_IRQHandler+0x10>)
 8003246:	f001 f8f5 	bl	8004434 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800324a:	bf00      	nop
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	200015e4 	.word	0x200015e4

08003254 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003258:	4802      	ldr	r0, [pc, #8]	; (8003264 <DMA1_Stream2_IRQHandler+0x10>)
 800325a:	f001 f8eb 	bl	8004434 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800325e:	bf00      	nop
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	20001584 	.word	0x20001584

08003268 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800326c:	4802      	ldr	r0, [pc, #8]	; (8003278 <DMA1_Stream3_IRQHandler+0x10>)
 800326e:	f001 f8e1 	bl	8004434 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003272:	bf00      	nop
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	20001688 	.word	0x20001688

0800327c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8003280:	4802      	ldr	r0, [pc, #8]	; (800328c <DMA1_Stream4_IRQHandler+0x10>)
 8003282:	f001 f8d7 	bl	8004434 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003286:	bf00      	nop
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	20001830 	.word	0x20001830

08003290 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003294:	4802      	ldr	r0, [pc, #8]	; (80032a0 <DMA1_Stream6_IRQHandler+0x10>)
 8003296:	f001 f8cd 	bl	8004434 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800329a:	bf00      	nop
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	20001428 	.word	0x20001428

080032a4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80032a8:	4802      	ldr	r0, [pc, #8]	; (80032b4 <I2C1_EV_IRQHandler+0x10>)
 80032aa:	f002 fc23 	bl	8005af4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80032ae:	bf00      	nop
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20001488 	.word	0x20001488

080032b8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80032bc:	4802      	ldr	r0, [pc, #8]	; (80032c8 <I2C1_ER_IRQHandler+0x10>)
 80032be:	f002 fd8a 	bl	8005dd6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80032c2:	bf00      	nop
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	20001488 	.word	0x20001488

080032cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80032d0:	4803      	ldr	r0, [pc, #12]	; (80032e0 <USART1_IRQHandler+0x14>)
 80032d2:	f006 f97d 	bl	80095d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  UART_Idle_Line_Callback(uart_e1);
 80032d6:	2000      	movs	r0, #0
 80032d8:	f7fe fe6a 	bl	8001fb0 <UART_Idle_Line_Callback>
  /* USER CODE END USART1_IRQn 1 */
}
 80032dc:	bf00      	nop
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	200017a8 	.word	0x200017a8

080032e4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80032e8:	4803      	ldr	r0, [pc, #12]	; (80032f8 <USART3_IRQHandler+0x14>)
 80032ea:	f006 f971 	bl	80095d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  UART_Idle_Line_Callback(uart_e3);
 80032ee:	2001      	movs	r0, #1
 80032f0:	f7fe fe5e 	bl	8001fb0 <UART_Idle_Line_Callback>
  /* USER CODE END USART3_IRQn 1 */
}
 80032f4:	bf00      	nop
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	20001644 	.word	0x20001644

080032fc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003300:	4803      	ldr	r0, [pc, #12]	; (8003310 <UART4_IRQHandler+0x14>)
 8003302:	f006 f965 	bl	80095d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  UART_Idle_Line_Callback(uart_e4);
 8003306:	2002      	movs	r0, #2
 8003308:	f7fe fe52 	bl	8001fb0 <UART_Idle_Line_Callback>
  /* USER CODE END UART4_IRQn 1 */
}
 800330c:	bf00      	nop
 800330e:	bd80      	pop	{r7, pc}
 8003310:	200017ec 	.word	0x200017ec

08003314 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003318:	4802      	ldr	r0, [pc, #8]	; (8003324 <DMA2_Stream2_IRQHandler+0x10>)
 800331a:	f001 f88b 	bl	8004434 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800331e:	bf00      	nop
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	20001748 	.word	0x20001748

08003328 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800332c:	4802      	ldr	r0, [pc, #8]	; (8003338 <DMA2_Stream7_IRQHandler+0x10>)
 800332e:	f001 f881 	bl	8004434 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003332:	bf00      	nop
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	200016e8 	.word	0x200016e8

0800333c <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
	if(huart == &huart4)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a0d      	ldr	r2, [pc, #52]	; (800337c <HAL_UART_TxCpltCallback+0x40>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d103      	bne.n	8003354 <HAL_UART_TxCpltCallback+0x18>
	{
		UART_Transfer_Complete_Callback(uart_e4);
 800334c:	2002      	movs	r0, #2
 800334e:	f7fe fe7d 	bl	800204c <UART_Transfer_Complete_Callback>
	}
	else if(huart == &huart3)
	{
		UART_Transfer_Complete_Callback(uart_e3);
	}
}
 8003352:	e00e      	b.n	8003372 <HAL_UART_TxCpltCallback+0x36>
	else if(huart == &huart1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a0a      	ldr	r2, [pc, #40]	; (8003380 <HAL_UART_TxCpltCallback+0x44>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d103      	bne.n	8003364 <HAL_UART_TxCpltCallback+0x28>
		UART_Transfer_Complete_Callback(uart_e1);
 800335c:	2000      	movs	r0, #0
 800335e:	f7fe fe75 	bl	800204c <UART_Transfer_Complete_Callback>
}
 8003362:	e006      	b.n	8003372 <HAL_UART_TxCpltCallback+0x36>
	else if(huart == &huart3)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a07      	ldr	r2, [pc, #28]	; (8003384 <HAL_UART_TxCpltCallback+0x48>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d102      	bne.n	8003372 <HAL_UART_TxCpltCallback+0x36>
		UART_Transfer_Complete_Callback(uart_e3);
 800336c:	2001      	movs	r0, #1
 800336e:	f7fe fe6d 	bl	800204c <UART_Transfer_Complete_Callback>
}
 8003372:	bf00      	nop
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	200017ec 	.word	0x200017ec
 8003380:	200017a8 	.word	0x200017a8
 8003384:	20001644 	.word	0x20001644

08003388 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
	if(MPU_Rx_Complete_Callback())
 8003390:	f7ff fc14 	bl	8002bbc <MPU_Rx_Complete_Callback>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <HAL_I2C_MemRxCpltCallback+0x16>
	{
	  TASK_MANAGER_Gyro_Data_Ready();
 800339a:	f000 fc7d 	bl	8003c98 <TASK_MANAGER_Gyro_Data_Ready>
	}
}
 800339e:	bf00      	nop
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
	...

080033a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033ac:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <SystemInit+0x20>)
 80033ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b2:	4a05      	ldr	r2, [pc, #20]	; (80033c8 <SystemInit+0x20>)
 80033b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033bc:	bf00      	nop
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	e000ed00 	.word	0xe000ed00

080033cc <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b08e      	sub	sp, #56	; 0x38
 80033d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]
 80033da:	605a      	str	r2, [r3, #4]
 80033dc:	609a      	str	r2, [r3, #8]
 80033de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033e0:	f107 0320 	add.w	r3, r7, #32
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033ea:	1d3b      	adds	r3, r7, #4
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	605a      	str	r2, [r3, #4]
 80033f2:	609a      	str	r2, [r3, #8]
 80033f4:	60da      	str	r2, [r3, #12]
 80033f6:	611a      	str	r2, [r3, #16]
 80033f8:	615a      	str	r2, [r3, #20]
 80033fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80033fc:	4b3d      	ldr	r3, [pc, #244]	; (80034f4 <MX_TIM3_Init+0x128>)
 80033fe:	4a3e      	ldr	r2, [pc, #248]	; (80034f8 <MX_TIM3_Init+0x12c>)
 8003400:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8003402:	4b3c      	ldr	r3, [pc, #240]	; (80034f4 <MX_TIM3_Init+0x128>)
 8003404:	2253      	movs	r2, #83	; 0x53
 8003406:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003408:	4b3a      	ldr	r3, [pc, #232]	; (80034f4 <MX_TIM3_Init+0x128>)
 800340a:	2200      	movs	r2, #0
 800340c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3999;
 800340e:	4b39      	ldr	r3, [pc, #228]	; (80034f4 <MX_TIM3_Init+0x128>)
 8003410:	f640 729f 	movw	r2, #3999	; 0xf9f
 8003414:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003416:	4b37      	ldr	r3, [pc, #220]	; (80034f4 <MX_TIM3_Init+0x128>)
 8003418:	2200      	movs	r2, #0
 800341a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800341c:	4b35      	ldr	r3, [pc, #212]	; (80034f4 <MX_TIM3_Init+0x128>)
 800341e:	2280      	movs	r2, #128	; 0x80
 8003420:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003422:	4834      	ldr	r0, [pc, #208]	; (80034f4 <MX_TIM3_Init+0x128>)
 8003424:	f005 f8e2 	bl	80085ec <HAL_TIM_Base_Init>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800342e:	f7ff fea3 	bl	8003178 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003432:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003436:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003438:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800343c:	4619      	mov	r1, r3
 800343e:	482d      	ldr	r0, [pc, #180]	; (80034f4 <MX_TIM3_Init+0x128>)
 8003440:	f005 fb76 	bl	8008b30 <HAL_TIM_ConfigClockSource>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800344a:	f7ff fe95 	bl	8003178 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800344e:	4829      	ldr	r0, [pc, #164]	; (80034f4 <MX_TIM3_Init+0x128>)
 8003450:	f005 f91b 	bl	800868a <HAL_TIM_PWM_Init>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800345a:	f7ff fe8d 	bl	8003178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800345e:	2300      	movs	r3, #0
 8003460:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003462:	2300      	movs	r3, #0
 8003464:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003466:	f107 0320 	add.w	r3, r7, #32
 800346a:	4619      	mov	r1, r3
 800346c:	4821      	ldr	r0, [pc, #132]	; (80034f4 <MX_TIM3_Init+0x128>)
 800346e:	f005 ff37 	bl	80092e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003478:	f7ff fe7e 	bl	8003178 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800347c:	2360      	movs	r3, #96	; 0x60
 800347e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 999;
 8003480:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003484:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003486:	2300      	movs	r3, #0
 8003488:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800348a:	2300      	movs	r3, #0
 800348c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800348e:	1d3b      	adds	r3, r7, #4
 8003490:	2200      	movs	r2, #0
 8003492:	4619      	mov	r1, r3
 8003494:	4817      	ldr	r0, [pc, #92]	; (80034f4 <MX_TIM3_Init+0x128>)
 8003496:	f005 fa89 	bl	80089ac <HAL_TIM_PWM_ConfigChannel>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80034a0:	f7ff fe6a 	bl	8003178 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80034a4:	1d3b      	adds	r3, r7, #4
 80034a6:	2204      	movs	r2, #4
 80034a8:	4619      	mov	r1, r3
 80034aa:	4812      	ldr	r0, [pc, #72]	; (80034f4 <MX_TIM3_Init+0x128>)
 80034ac:	f005 fa7e 	bl	80089ac <HAL_TIM_PWM_ConfigChannel>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80034b6:	f7ff fe5f 	bl	8003178 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80034ba:	1d3b      	adds	r3, r7, #4
 80034bc:	2208      	movs	r2, #8
 80034be:	4619      	mov	r1, r3
 80034c0:	480c      	ldr	r0, [pc, #48]	; (80034f4 <MX_TIM3_Init+0x128>)
 80034c2:	f005 fa73 	bl	80089ac <HAL_TIM_PWM_ConfigChannel>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80034cc:	f7ff fe54 	bl	8003178 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80034d0:	1d3b      	adds	r3, r7, #4
 80034d2:	220c      	movs	r2, #12
 80034d4:	4619      	mov	r1, r3
 80034d6:	4807      	ldr	r0, [pc, #28]	; (80034f4 <MX_TIM3_Init+0x128>)
 80034d8:	f005 fa68 	bl	80089ac <HAL_TIM_PWM_ConfigChannel>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 80034e2:	f7ff fe49 	bl	8003178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80034e6:	4803      	ldr	r0, [pc, #12]	; (80034f4 <MX_TIM3_Init+0x128>)
 80034e8:	f000 f82a 	bl	8003540 <HAL_TIM_MspPostInit>

}
 80034ec:	bf00      	nop
 80034ee:	3738      	adds	r7, #56	; 0x38
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	2000153c 	.word	0x2000153c
 80034f8:	40000400 	.word	0x40000400

080034fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a0b      	ldr	r2, [pc, #44]	; (8003538 <HAL_TIM_Base_MspInit+0x3c>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d10d      	bne.n	800352a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800350e:	2300      	movs	r3, #0
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	4b0a      	ldr	r3, [pc, #40]	; (800353c <HAL_TIM_Base_MspInit+0x40>)
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	4a09      	ldr	r2, [pc, #36]	; (800353c <HAL_TIM_Base_MspInit+0x40>)
 8003518:	f043 0302 	orr.w	r3, r3, #2
 800351c:	6413      	str	r3, [r2, #64]	; 0x40
 800351e:	4b07      	ldr	r3, [pc, #28]	; (800353c <HAL_TIM_Base_MspInit+0x40>)
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800352a:	bf00      	nop
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	40000400 	.word	0x40000400
 800353c:	40023800 	.word	0x40023800

08003540 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b08a      	sub	sp, #40	; 0x28
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003548:	f107 0314 	add.w	r3, r7, #20
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	605a      	str	r2, [r3, #4]
 8003552:	609a      	str	r2, [r3, #8]
 8003554:	60da      	str	r2, [r3, #12]
 8003556:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a21      	ldr	r2, [pc, #132]	; (80035e4 <HAL_TIM_MspPostInit+0xa4>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d13b      	bne.n	80035da <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003562:	2300      	movs	r3, #0
 8003564:	613b      	str	r3, [r7, #16]
 8003566:	4b20      	ldr	r3, [pc, #128]	; (80035e8 <HAL_TIM_MspPostInit+0xa8>)
 8003568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356a:	4a1f      	ldr	r2, [pc, #124]	; (80035e8 <HAL_TIM_MspPostInit+0xa8>)
 800356c:	f043 0301 	orr.w	r3, r3, #1
 8003570:	6313      	str	r3, [r2, #48]	; 0x30
 8003572:	4b1d      	ldr	r3, [pc, #116]	; (80035e8 <HAL_TIM_MspPostInit+0xa8>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	613b      	str	r3, [r7, #16]
 800357c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800357e:	2300      	movs	r3, #0
 8003580:	60fb      	str	r3, [r7, #12]
 8003582:	4b19      	ldr	r3, [pc, #100]	; (80035e8 <HAL_TIM_MspPostInit+0xa8>)
 8003584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003586:	4a18      	ldr	r2, [pc, #96]	; (80035e8 <HAL_TIM_MspPostInit+0xa8>)
 8003588:	f043 0302 	orr.w	r3, r3, #2
 800358c:	6313      	str	r3, [r2, #48]	; 0x30
 800358e:	4b16      	ldr	r3, [pc, #88]	; (80035e8 <HAL_TIM_MspPostInit+0xa8>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800359a:	23c0      	movs	r3, #192	; 0xc0
 800359c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359e:	2302      	movs	r3, #2
 80035a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a6:	2300      	movs	r3, #0
 80035a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80035aa:	2302      	movs	r3, #2
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ae:	f107 0314 	add.w	r3, r7, #20
 80035b2:	4619      	mov	r1, r3
 80035b4:	480d      	ldr	r0, [pc, #52]	; (80035ec <HAL_TIM_MspPostInit+0xac>)
 80035b6:	f001 f9c1 	bl	800493c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80035ba:	2303      	movs	r3, #3
 80035bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035be:	2302      	movs	r3, #2
 80035c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c2:	2300      	movs	r3, #0
 80035c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035c6:	2300      	movs	r3, #0
 80035c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80035ca:	2302      	movs	r3, #2
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035ce:	f107 0314 	add.w	r3, r7, #20
 80035d2:	4619      	mov	r1, r3
 80035d4:	4806      	ldr	r0, [pc, #24]	; (80035f0 <HAL_TIM_MspPostInit+0xb0>)
 80035d6:	f001 f9b1 	bl	800493c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80035da:	bf00      	nop
 80035dc:	3728      	adds	r7, #40	; 0x28
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40000400 	.word	0x40000400
 80035e8:	40023800 	.word	0x40023800
 80035ec:	40020000 	.word	0x40020000
 80035f0:	40020400 	.word	0x40020400

080035f4 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80035f8:	4b11      	ldr	r3, [pc, #68]	; (8003640 <MX_UART4_Init+0x4c>)
 80035fa:	4a12      	ldr	r2, [pc, #72]	; (8003644 <MX_UART4_Init+0x50>)
 80035fc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80035fe:	4b10      	ldr	r3, [pc, #64]	; (8003640 <MX_UART4_Init+0x4c>)
 8003600:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003604:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003606:	4b0e      	ldr	r3, [pc, #56]	; (8003640 <MX_UART4_Init+0x4c>)
 8003608:	2200      	movs	r2, #0
 800360a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800360c:	4b0c      	ldr	r3, [pc, #48]	; (8003640 <MX_UART4_Init+0x4c>)
 800360e:	2200      	movs	r2, #0
 8003610:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003612:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <MX_UART4_Init+0x4c>)
 8003614:	2200      	movs	r2, #0
 8003616:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003618:	4b09      	ldr	r3, [pc, #36]	; (8003640 <MX_UART4_Init+0x4c>)
 800361a:	220c      	movs	r2, #12
 800361c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800361e:	4b08      	ldr	r3, [pc, #32]	; (8003640 <MX_UART4_Init+0x4c>)
 8003620:	2200      	movs	r2, #0
 8003622:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003624:	4b06      	ldr	r3, [pc, #24]	; (8003640 <MX_UART4_Init+0x4c>)
 8003626:	2200      	movs	r2, #0
 8003628:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800362a:	4805      	ldr	r0, [pc, #20]	; (8003640 <MX_UART4_Init+0x4c>)
 800362c:	f005 fed4 	bl	80093d8 <HAL_UART_Init>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8003636:	f7ff fd9f 	bl	8003178 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800363a:	bf00      	nop
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	200017ec 	.word	0x200017ec
 8003644:	40004c00 	.word	0x40004c00

08003648 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800364c:	4b11      	ldr	r3, [pc, #68]	; (8003694 <MX_USART1_UART_Init+0x4c>)
 800364e:	4a12      	ldr	r2, [pc, #72]	; (8003698 <MX_USART1_UART_Init+0x50>)
 8003650:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8003652:	4b10      	ldr	r3, [pc, #64]	; (8003694 <MX_USART1_UART_Init+0x4c>)
 8003654:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8003658:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800365a:	4b0e      	ldr	r3, [pc, #56]	; (8003694 <MX_USART1_UART_Init+0x4c>)
 800365c:	2200      	movs	r2, #0
 800365e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003660:	4b0c      	ldr	r3, [pc, #48]	; (8003694 <MX_USART1_UART_Init+0x4c>)
 8003662:	2200      	movs	r2, #0
 8003664:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003666:	4b0b      	ldr	r3, [pc, #44]	; (8003694 <MX_USART1_UART_Init+0x4c>)
 8003668:	2200      	movs	r2, #0
 800366a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800366c:	4b09      	ldr	r3, [pc, #36]	; (8003694 <MX_USART1_UART_Init+0x4c>)
 800366e:	220c      	movs	r2, #12
 8003670:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003672:	4b08      	ldr	r3, [pc, #32]	; (8003694 <MX_USART1_UART_Init+0x4c>)
 8003674:	2200      	movs	r2, #0
 8003676:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003678:	4b06      	ldr	r3, [pc, #24]	; (8003694 <MX_USART1_UART_Init+0x4c>)
 800367a:	2200      	movs	r2, #0
 800367c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800367e:	4805      	ldr	r0, [pc, #20]	; (8003694 <MX_USART1_UART_Init+0x4c>)
 8003680:	f005 feaa 	bl	80093d8 <HAL_UART_Init>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800368a:	f7ff fd75 	bl	8003178 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800368e:	bf00      	nop
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	200017a8 	.word	0x200017a8
 8003698:	40011000 	.word	0x40011000

0800369c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80036a0:	4b11      	ldr	r3, [pc, #68]	; (80036e8 <MX_USART3_UART_Init+0x4c>)
 80036a2:	4a12      	ldr	r2, [pc, #72]	; (80036ec <MX_USART3_UART_Init+0x50>)
 80036a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80036a6:	4b10      	ldr	r3, [pc, #64]	; (80036e8 <MX_USART3_UART_Init+0x4c>)
 80036a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80036ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80036ae:	4b0e      	ldr	r3, [pc, #56]	; (80036e8 <MX_USART3_UART_Init+0x4c>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80036b4:	4b0c      	ldr	r3, [pc, #48]	; (80036e8 <MX_USART3_UART_Init+0x4c>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80036ba:	4b0b      	ldr	r3, [pc, #44]	; (80036e8 <MX_USART3_UART_Init+0x4c>)
 80036bc:	2200      	movs	r2, #0
 80036be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80036c0:	4b09      	ldr	r3, [pc, #36]	; (80036e8 <MX_USART3_UART_Init+0x4c>)
 80036c2:	220c      	movs	r2, #12
 80036c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036c6:	4b08      	ldr	r3, [pc, #32]	; (80036e8 <MX_USART3_UART_Init+0x4c>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80036cc:	4b06      	ldr	r3, [pc, #24]	; (80036e8 <MX_USART3_UART_Init+0x4c>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80036d2:	4805      	ldr	r0, [pc, #20]	; (80036e8 <MX_USART3_UART_Init+0x4c>)
 80036d4:	f005 fe80 	bl	80093d8 <HAL_UART_Init>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80036de:	f7ff fd4b 	bl	8003178 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80036e2:	bf00      	nop
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	20001644 	.word	0x20001644
 80036ec:	40004800 	.word	0x40004800

080036f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b08e      	sub	sp, #56	; 0x38
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	605a      	str	r2, [r3, #4]
 8003702:	609a      	str	r2, [r3, #8]
 8003704:	60da      	str	r2, [r3, #12]
 8003706:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a96      	ldr	r2, [pc, #600]	; (8003968 <HAL_UART_MspInit+0x278>)
 800370e:	4293      	cmp	r3, r2
 8003710:	f040 8092 	bne.w	8003838 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003714:	2300      	movs	r3, #0
 8003716:	623b      	str	r3, [r7, #32]
 8003718:	4b94      	ldr	r3, [pc, #592]	; (800396c <HAL_UART_MspInit+0x27c>)
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	4a93      	ldr	r2, [pc, #588]	; (800396c <HAL_UART_MspInit+0x27c>)
 800371e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003722:	6413      	str	r3, [r2, #64]	; 0x40
 8003724:	4b91      	ldr	r3, [pc, #580]	; (800396c <HAL_UART_MspInit+0x27c>)
 8003726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003728:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800372c:	623b      	str	r3, [r7, #32]
 800372e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003730:	2300      	movs	r3, #0
 8003732:	61fb      	str	r3, [r7, #28]
 8003734:	4b8d      	ldr	r3, [pc, #564]	; (800396c <HAL_UART_MspInit+0x27c>)
 8003736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003738:	4a8c      	ldr	r2, [pc, #560]	; (800396c <HAL_UART_MspInit+0x27c>)
 800373a:	f043 0301 	orr.w	r3, r3, #1
 800373e:	6313      	str	r3, [r2, #48]	; 0x30
 8003740:	4b8a      	ldr	r3, [pc, #552]	; (800396c <HAL_UART_MspInit+0x27c>)
 8003742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	61fb      	str	r3, [r7, #28]
 800374a:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800374c:	2303      	movs	r3, #3
 800374e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003750:	2302      	movs	r3, #2
 8003752:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003754:	2300      	movs	r3, #0
 8003756:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003758:	2303      	movs	r3, #3
 800375a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800375c:	2308      	movs	r3, #8
 800375e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003764:	4619      	mov	r1, r3
 8003766:	4882      	ldr	r0, [pc, #520]	; (8003970 <HAL_UART_MspInit+0x280>)
 8003768:	f001 f8e8 	bl	800493c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800376c:	4b81      	ldr	r3, [pc, #516]	; (8003974 <HAL_UART_MspInit+0x284>)
 800376e:	4a82      	ldr	r2, [pc, #520]	; (8003978 <HAL_UART_MspInit+0x288>)
 8003770:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8003772:	4b80      	ldr	r3, [pc, #512]	; (8003974 <HAL_UART_MspInit+0x284>)
 8003774:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003778:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800377a:	4b7e      	ldr	r3, [pc, #504]	; (8003974 <HAL_UART_MspInit+0x284>)
 800377c:	2200      	movs	r2, #0
 800377e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003780:	4b7c      	ldr	r3, [pc, #496]	; (8003974 <HAL_UART_MspInit+0x284>)
 8003782:	2200      	movs	r2, #0
 8003784:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003786:	4b7b      	ldr	r3, [pc, #492]	; (8003974 <HAL_UART_MspInit+0x284>)
 8003788:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800378c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800378e:	4b79      	ldr	r3, [pc, #484]	; (8003974 <HAL_UART_MspInit+0x284>)
 8003790:	2200      	movs	r2, #0
 8003792:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003794:	4b77      	ldr	r3, [pc, #476]	; (8003974 <HAL_UART_MspInit+0x284>)
 8003796:	2200      	movs	r2, #0
 8003798:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800379a:	4b76      	ldr	r3, [pc, #472]	; (8003974 <HAL_UART_MspInit+0x284>)
 800379c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037a0:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80037a2:	4b74      	ldr	r3, [pc, #464]	; (8003974 <HAL_UART_MspInit+0x284>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037a8:	4b72      	ldr	r3, [pc, #456]	; (8003974 <HAL_UART_MspInit+0x284>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80037ae:	4871      	ldr	r0, [pc, #452]	; (8003974 <HAL_UART_MspInit+0x284>)
 80037b0:	f000 fca8 	bl	8004104 <HAL_DMA_Init>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80037ba:	f7ff fcdd 	bl	8003178 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a6c      	ldr	r2, [pc, #432]	; (8003974 <HAL_UART_MspInit+0x284>)
 80037c2:	639a      	str	r2, [r3, #56]	; 0x38
 80037c4:	4a6b      	ldr	r2, [pc, #428]	; (8003974 <HAL_UART_MspInit+0x284>)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80037ca:	4b6c      	ldr	r3, [pc, #432]	; (800397c <HAL_UART_MspInit+0x28c>)
 80037cc:	4a6c      	ldr	r2, [pc, #432]	; (8003980 <HAL_UART_MspInit+0x290>)
 80037ce:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 80037d0:	4b6a      	ldr	r3, [pc, #424]	; (800397c <HAL_UART_MspInit+0x28c>)
 80037d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037d6:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037d8:	4b68      	ldr	r3, [pc, #416]	; (800397c <HAL_UART_MspInit+0x28c>)
 80037da:	2240      	movs	r2, #64	; 0x40
 80037dc:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037de:	4b67      	ldr	r3, [pc, #412]	; (800397c <HAL_UART_MspInit+0x28c>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80037e4:	4b65      	ldr	r3, [pc, #404]	; (800397c <HAL_UART_MspInit+0x28c>)
 80037e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037ea:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037ec:	4b63      	ldr	r3, [pc, #396]	; (800397c <HAL_UART_MspInit+0x28c>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037f2:	4b62      	ldr	r3, [pc, #392]	; (800397c <HAL_UART_MspInit+0x28c>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80037f8:	4b60      	ldr	r3, [pc, #384]	; (800397c <HAL_UART_MspInit+0x28c>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80037fe:	4b5f      	ldr	r3, [pc, #380]	; (800397c <HAL_UART_MspInit+0x28c>)
 8003800:	2200      	movs	r2, #0
 8003802:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003804:	4b5d      	ldr	r3, [pc, #372]	; (800397c <HAL_UART_MspInit+0x28c>)
 8003806:	2200      	movs	r2, #0
 8003808:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800380a:	485c      	ldr	r0, [pc, #368]	; (800397c <HAL_UART_MspInit+0x28c>)
 800380c:	f000 fc7a 	bl	8004104 <HAL_DMA_Init>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8003816:	f7ff fcaf 	bl	8003178 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a57      	ldr	r2, [pc, #348]	; (800397c <HAL_UART_MspInit+0x28c>)
 800381e:	635a      	str	r2, [r3, #52]	; 0x34
 8003820:	4a56      	ldr	r2, [pc, #344]	; (800397c <HAL_UART_MspInit+0x28c>)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003826:	2200      	movs	r2, #0
 8003828:	2100      	movs	r1, #0
 800382a:	2034      	movs	r0, #52	; 0x34
 800382c:	f000 fc33 	bl	8004096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003830:	2034      	movs	r0, #52	; 0x34
 8003832:	f000 fc4c 	bl	80040ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003836:	e149      	b.n	8003acc <HAL_UART_MspInit+0x3dc>
  else if(uartHandle->Instance==USART1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a51      	ldr	r2, [pc, #324]	; (8003984 <HAL_UART_MspInit+0x294>)
 800383e:	4293      	cmp	r3, r2
 8003840:	f040 80ac 	bne.w	800399c <HAL_UART_MspInit+0x2ac>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003844:	2300      	movs	r3, #0
 8003846:	61bb      	str	r3, [r7, #24]
 8003848:	4b48      	ldr	r3, [pc, #288]	; (800396c <HAL_UART_MspInit+0x27c>)
 800384a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384c:	4a47      	ldr	r2, [pc, #284]	; (800396c <HAL_UART_MspInit+0x27c>)
 800384e:	f043 0310 	orr.w	r3, r3, #16
 8003852:	6453      	str	r3, [r2, #68]	; 0x44
 8003854:	4b45      	ldr	r3, [pc, #276]	; (800396c <HAL_UART_MspInit+0x27c>)
 8003856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003858:	f003 0310 	and.w	r3, r3, #16
 800385c:	61bb      	str	r3, [r7, #24]
 800385e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003860:	2300      	movs	r3, #0
 8003862:	617b      	str	r3, [r7, #20]
 8003864:	4b41      	ldr	r3, [pc, #260]	; (800396c <HAL_UART_MspInit+0x27c>)
 8003866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003868:	4a40      	ldr	r2, [pc, #256]	; (800396c <HAL_UART_MspInit+0x27c>)
 800386a:	f043 0302 	orr.w	r3, r3, #2
 800386e:	6313      	str	r3, [r2, #48]	; 0x30
 8003870:	4b3e      	ldr	r3, [pc, #248]	; (800396c <HAL_UART_MspInit+0x27c>)
 8003872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	617b      	str	r3, [r7, #20]
 800387a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800387c:	23c0      	movs	r3, #192	; 0xc0
 800387e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003880:	2302      	movs	r3, #2
 8003882:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003884:	2300      	movs	r3, #0
 8003886:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003888:	2303      	movs	r3, #3
 800388a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800388c:	2307      	movs	r3, #7
 800388e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003894:	4619      	mov	r1, r3
 8003896:	483c      	ldr	r0, [pc, #240]	; (8003988 <HAL_UART_MspInit+0x298>)
 8003898:	f001 f850 	bl	800493c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800389c:	4b3b      	ldr	r3, [pc, #236]	; (800398c <HAL_UART_MspInit+0x29c>)
 800389e:	4a3c      	ldr	r2, [pc, #240]	; (8003990 <HAL_UART_MspInit+0x2a0>)
 80038a0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80038a2:	4b3a      	ldr	r3, [pc, #232]	; (800398c <HAL_UART_MspInit+0x29c>)
 80038a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80038a8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038aa:	4b38      	ldr	r3, [pc, #224]	; (800398c <HAL_UART_MspInit+0x29c>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038b0:	4b36      	ldr	r3, [pc, #216]	; (800398c <HAL_UART_MspInit+0x29c>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80038b6:	4b35      	ldr	r3, [pc, #212]	; (800398c <HAL_UART_MspInit+0x29c>)
 80038b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038bc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038be:	4b33      	ldr	r3, [pc, #204]	; (800398c <HAL_UART_MspInit+0x29c>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038c4:	4b31      	ldr	r3, [pc, #196]	; (800398c <HAL_UART_MspInit+0x29c>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80038ca:	4b30      	ldr	r3, [pc, #192]	; (800398c <HAL_UART_MspInit+0x29c>)
 80038cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038d0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80038d2:	4b2e      	ldr	r3, [pc, #184]	; (800398c <HAL_UART_MspInit+0x29c>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038d8:	4b2c      	ldr	r3, [pc, #176]	; (800398c <HAL_UART_MspInit+0x29c>)
 80038da:	2200      	movs	r2, #0
 80038dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80038de:	482b      	ldr	r0, [pc, #172]	; (800398c <HAL_UART_MspInit+0x29c>)
 80038e0:	f000 fc10 	bl	8004104 <HAL_DMA_Init>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <HAL_UART_MspInit+0x1fe>
      Error_Handler();
 80038ea:	f7ff fc45 	bl	8003178 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a26      	ldr	r2, [pc, #152]	; (800398c <HAL_UART_MspInit+0x29c>)
 80038f2:	639a      	str	r2, [r3, #56]	; 0x38
 80038f4:	4a25      	ldr	r2, [pc, #148]	; (800398c <HAL_UART_MspInit+0x29c>)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80038fa:	4b26      	ldr	r3, [pc, #152]	; (8003994 <HAL_UART_MspInit+0x2a4>)
 80038fc:	4a26      	ldr	r2, [pc, #152]	; (8003998 <HAL_UART_MspInit+0x2a8>)
 80038fe:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003900:	4b24      	ldr	r3, [pc, #144]	; (8003994 <HAL_UART_MspInit+0x2a4>)
 8003902:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003906:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003908:	4b22      	ldr	r3, [pc, #136]	; (8003994 <HAL_UART_MspInit+0x2a4>)
 800390a:	2240      	movs	r2, #64	; 0x40
 800390c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800390e:	4b21      	ldr	r3, [pc, #132]	; (8003994 <HAL_UART_MspInit+0x2a4>)
 8003910:	2200      	movs	r2, #0
 8003912:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003914:	4b1f      	ldr	r3, [pc, #124]	; (8003994 <HAL_UART_MspInit+0x2a4>)
 8003916:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800391a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800391c:	4b1d      	ldr	r3, [pc, #116]	; (8003994 <HAL_UART_MspInit+0x2a4>)
 800391e:	2200      	movs	r2, #0
 8003920:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003922:	4b1c      	ldr	r3, [pc, #112]	; (8003994 <HAL_UART_MspInit+0x2a4>)
 8003924:	2200      	movs	r2, #0
 8003926:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003928:	4b1a      	ldr	r3, [pc, #104]	; (8003994 <HAL_UART_MspInit+0x2a4>)
 800392a:	2200      	movs	r2, #0
 800392c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800392e:	4b19      	ldr	r3, [pc, #100]	; (8003994 <HAL_UART_MspInit+0x2a4>)
 8003930:	2200      	movs	r2, #0
 8003932:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003934:	4b17      	ldr	r3, [pc, #92]	; (8003994 <HAL_UART_MspInit+0x2a4>)
 8003936:	2200      	movs	r2, #0
 8003938:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800393a:	4816      	ldr	r0, [pc, #88]	; (8003994 <HAL_UART_MspInit+0x2a4>)
 800393c:	f000 fbe2 	bl	8004104 <HAL_DMA_Init>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <HAL_UART_MspInit+0x25a>
      Error_Handler();
 8003946:	f7ff fc17 	bl	8003178 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a11      	ldr	r2, [pc, #68]	; (8003994 <HAL_UART_MspInit+0x2a4>)
 800394e:	635a      	str	r2, [r3, #52]	; 0x34
 8003950:	4a10      	ldr	r2, [pc, #64]	; (8003994 <HAL_UART_MspInit+0x2a4>)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003956:	2200      	movs	r2, #0
 8003958:	2100      	movs	r1, #0
 800395a:	2025      	movs	r0, #37	; 0x25
 800395c:	f000 fb9b 	bl	8004096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003960:	2025      	movs	r0, #37	; 0x25
 8003962:	f000 fbb4 	bl	80040ce <HAL_NVIC_EnableIRQ>
}
 8003966:	e0b1      	b.n	8003acc <HAL_UART_MspInit+0x3dc>
 8003968:	40004c00 	.word	0x40004c00
 800396c:	40023800 	.word	0x40023800
 8003970:	40020000 	.word	0x40020000
 8003974:	20001584 	.word	0x20001584
 8003978:	40026040 	.word	0x40026040
 800397c:	20001830 	.word	0x20001830
 8003980:	40026070 	.word	0x40026070
 8003984:	40011000 	.word	0x40011000
 8003988:	40020400 	.word	0x40020400
 800398c:	20001748 	.word	0x20001748
 8003990:	40026440 	.word	0x40026440
 8003994:	200016e8 	.word	0x200016e8
 8003998:	400264b8 	.word	0x400264b8
  else if(uartHandle->Instance==USART3)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a4c      	ldr	r2, [pc, #304]	; (8003ad4 <HAL_UART_MspInit+0x3e4>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	f040 8092 	bne.w	8003acc <HAL_UART_MspInit+0x3dc>
    __HAL_RCC_USART3_CLK_ENABLE();
 80039a8:	2300      	movs	r3, #0
 80039aa:	613b      	str	r3, [r7, #16]
 80039ac:	4b4a      	ldr	r3, [pc, #296]	; (8003ad8 <HAL_UART_MspInit+0x3e8>)
 80039ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b0:	4a49      	ldr	r2, [pc, #292]	; (8003ad8 <HAL_UART_MspInit+0x3e8>)
 80039b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039b6:	6413      	str	r3, [r2, #64]	; 0x40
 80039b8:	4b47      	ldr	r3, [pc, #284]	; (8003ad8 <HAL_UART_MspInit+0x3e8>)
 80039ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039c0:	613b      	str	r3, [r7, #16]
 80039c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039c4:	2300      	movs	r3, #0
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	4b43      	ldr	r3, [pc, #268]	; (8003ad8 <HAL_UART_MspInit+0x3e8>)
 80039ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039cc:	4a42      	ldr	r2, [pc, #264]	; (8003ad8 <HAL_UART_MspInit+0x3e8>)
 80039ce:	f043 0302 	orr.w	r3, r3, #2
 80039d2:	6313      	str	r3, [r2, #48]	; 0x30
 80039d4:	4b40      	ldr	r3, [pc, #256]	; (8003ad8 <HAL_UART_MspInit+0x3e8>)
 80039d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80039e0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80039e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e6:	2302      	movs	r3, #2
 80039e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ea:	2300      	movs	r3, #0
 80039ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ee:	2303      	movs	r3, #3
 80039f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80039f2:	2307      	movs	r3, #7
 80039f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039fa:	4619      	mov	r1, r3
 80039fc:	4837      	ldr	r0, [pc, #220]	; (8003adc <HAL_UART_MspInit+0x3ec>)
 80039fe:	f000 ff9d 	bl	800493c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003a02:	4b37      	ldr	r3, [pc, #220]	; (8003ae0 <HAL_UART_MspInit+0x3f0>)
 8003a04:	4a37      	ldr	r2, [pc, #220]	; (8003ae4 <HAL_UART_MspInit+0x3f4>)
 8003a06:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003a08:	4b35      	ldr	r3, [pc, #212]	; (8003ae0 <HAL_UART_MspInit+0x3f0>)
 8003a0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a0e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a10:	4b33      	ldr	r3, [pc, #204]	; (8003ae0 <HAL_UART_MspInit+0x3f0>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a16:	4b32      	ldr	r3, [pc, #200]	; (8003ae0 <HAL_UART_MspInit+0x3f0>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a1c:	4b30      	ldr	r3, [pc, #192]	; (8003ae0 <HAL_UART_MspInit+0x3f0>)
 8003a1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a22:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a24:	4b2e      	ldr	r3, [pc, #184]	; (8003ae0 <HAL_UART_MspInit+0x3f0>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a2a:	4b2d      	ldr	r3, [pc, #180]	; (8003ae0 <HAL_UART_MspInit+0x3f0>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003a30:	4b2b      	ldr	r3, [pc, #172]	; (8003ae0 <HAL_UART_MspInit+0x3f0>)
 8003a32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a36:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003a38:	4b29      	ldr	r3, [pc, #164]	; (8003ae0 <HAL_UART_MspInit+0x3f0>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a3e:	4b28      	ldr	r3, [pc, #160]	; (8003ae0 <HAL_UART_MspInit+0x3f0>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003a44:	4826      	ldr	r0, [pc, #152]	; (8003ae0 <HAL_UART_MspInit+0x3f0>)
 8003a46:	f000 fb5d 	bl	8004104 <HAL_DMA_Init>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <HAL_UART_MspInit+0x364>
      Error_Handler();
 8003a50:	f7ff fb92 	bl	8003178 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a22      	ldr	r2, [pc, #136]	; (8003ae0 <HAL_UART_MspInit+0x3f0>)
 8003a58:	639a      	str	r2, [r3, #56]	; 0x38
 8003a5a:	4a21      	ldr	r2, [pc, #132]	; (8003ae0 <HAL_UART_MspInit+0x3f0>)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003a60:	4b21      	ldr	r3, [pc, #132]	; (8003ae8 <HAL_UART_MspInit+0x3f8>)
 8003a62:	4a22      	ldr	r2, [pc, #136]	; (8003aec <HAL_UART_MspInit+0x3fc>)
 8003a64:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8003a66:	4b20      	ldr	r3, [pc, #128]	; (8003ae8 <HAL_UART_MspInit+0x3f8>)
 8003a68:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a6c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a6e:	4b1e      	ldr	r3, [pc, #120]	; (8003ae8 <HAL_UART_MspInit+0x3f8>)
 8003a70:	2240      	movs	r2, #64	; 0x40
 8003a72:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a74:	4b1c      	ldr	r3, [pc, #112]	; (8003ae8 <HAL_UART_MspInit+0x3f8>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a7a:	4b1b      	ldr	r3, [pc, #108]	; (8003ae8 <HAL_UART_MspInit+0x3f8>)
 8003a7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a80:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a82:	4b19      	ldr	r3, [pc, #100]	; (8003ae8 <HAL_UART_MspInit+0x3f8>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a88:	4b17      	ldr	r3, [pc, #92]	; (8003ae8 <HAL_UART_MspInit+0x3f8>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003a8e:	4b16      	ldr	r3, [pc, #88]	; (8003ae8 <HAL_UART_MspInit+0x3f8>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a94:	4b14      	ldr	r3, [pc, #80]	; (8003ae8 <HAL_UART_MspInit+0x3f8>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a9a:	4b13      	ldr	r3, [pc, #76]	; (8003ae8 <HAL_UART_MspInit+0x3f8>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003aa0:	4811      	ldr	r0, [pc, #68]	; (8003ae8 <HAL_UART_MspInit+0x3f8>)
 8003aa2:	f000 fb2f 	bl	8004104 <HAL_DMA_Init>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <HAL_UART_MspInit+0x3c0>
      Error_Handler();
 8003aac:	f7ff fb64 	bl	8003178 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a0d      	ldr	r2, [pc, #52]	; (8003ae8 <HAL_UART_MspInit+0x3f8>)
 8003ab4:	635a      	str	r2, [r3, #52]	; 0x34
 8003ab6:	4a0c      	ldr	r2, [pc, #48]	; (8003ae8 <HAL_UART_MspInit+0x3f8>)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003abc:	2200      	movs	r2, #0
 8003abe:	2100      	movs	r1, #0
 8003ac0:	2027      	movs	r0, #39	; 0x27
 8003ac2:	f000 fae8 	bl	8004096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003ac6:	2027      	movs	r0, #39	; 0x27
 8003ac8:	f000 fb01 	bl	80040ce <HAL_NVIC_EnableIRQ>
}
 8003acc:	bf00      	nop
 8003ace:	3738      	adds	r7, #56	; 0x38
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	40004800 	.word	0x40004800
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	40020400 	.word	0x40020400
 8003ae0:	200015e4 	.word	0x200015e4
 8003ae4:	40026028 	.word	0x40026028
 8003ae8:	20001688 	.word	0x20001688
 8003aec:	40026058 	.word	0x40026058

08003af0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003af0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003af4:	480d      	ldr	r0, [pc, #52]	; (8003b2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003af6:	490e      	ldr	r1, [pc, #56]	; (8003b30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003af8:	4a0e      	ldr	r2, [pc, #56]	; (8003b34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003afc:	e002      	b.n	8003b04 <LoopCopyDataInit>

08003afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b02:	3304      	adds	r3, #4

08003b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b08:	d3f9      	bcc.n	8003afe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b0a:	4a0b      	ldr	r2, [pc, #44]	; (8003b38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003b0c:	4c0b      	ldr	r4, [pc, #44]	; (8003b3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8003b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b10:	e001      	b.n	8003b16 <LoopFillZerobss>

08003b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b14:	3204      	adds	r2, #4

08003b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b18:	d3fb      	bcc.n	8003b12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003b1a:	f7ff fc45 	bl	80033a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b1e:	f006 fd97 	bl	800a650 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b22:	f7ff fa19 	bl	8002f58 <main>
  bx  lr    
 8003b26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003b28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003b2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b30:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8003b34:	0800b954 	.word	0x0800b954
  ldr r2, =_sbss
 8003b38:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8003b3c:	20001894 	.word	0x20001894

08003b40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b40:	e7fe      	b.n	8003b40 <ADC_IRQHandler>

08003b42 <SUPERVISOR_Process_Ms>:
#include "../Sensors/Mpu.h"
#include "../Led/Led.h"
#include "../Radio/Radio.h"

void SUPERVISOR_Process_Ms(void)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	af00      	add	r7, sp, #0
	if(!MPU_Is_Ok())
 8003b46:	f7ff f829 	bl	8002b9c <MPU_Is_Ok>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d104      	bne.n	8003b5a <SUPERVISOR_Process_Ms+0x18>
	{
		Led_Set_Sequence(led_eSTATE, led_sequence_eGYRO_OFF);
 8003b50:	21a0      	movs	r1, #160	; 0xa0
 8003b52:	2000      	movs	r0, #0
 8003b54:	f7fd fef2 	bl	800193c <Led_Set_Sequence>
	}
	else
	{
		Led_Set_Sequence(led_eSTATE, led_sequence_eOK);
	}
}
 8003b58:	e00d      	b.n	8003b76 <SUPERVISOR_Process_Ms+0x34>
	else if(RADIO_Get_State() == radio_state_eTIMEOUT)
 8003b5a:	f7fe fde9 	bl	8002730 <RADIO_Get_State>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d104      	bne.n	8003b6e <SUPERVISOR_Process_Ms+0x2c>
		Led_Set_Sequence(led_eSTATE, led_sequence_eRADIO_TIMEOUT);
 8003b64:	21a8      	movs	r1, #168	; 0xa8
 8003b66:	2000      	movs	r0, #0
 8003b68:	f7fd fee8 	bl	800193c <Led_Set_Sequence>
}
 8003b6c:	e003      	b.n	8003b76 <SUPERVISOR_Process_Ms+0x34>
		Led_Set_Sequence(led_eSTATE, led_sequence_eOK);
 8003b6e:	2180      	movs	r1, #128	; 0x80
 8003b70:	2000      	movs	r0, #0
 8003b72:	f7fd fee3 	bl	800193c <Led_Set_Sequence>
}
 8003b76:	bf00      	nop
 8003b78:	bd80      	pop	{r7, pc}
	...

08003b7c <TASK_MANAGER_Init>:
static task_t task[MAX_NUMBER_OF_TASK] = { 0 };
static bool_e is_initialized = FALSE;
static uint8_t task_count = 0;

void TASK_MANAGER_Init(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
	for(uint8_t t = 0; t < task_count; t++)
 8003b82:	2300      	movs	r3, #0
 8003b84:	71fb      	strb	r3, [r7, #7]
 8003b86:	e017      	b.n	8003bb8 <TASK_MANAGER_Init+0x3c>
	{
		if(task[t].init.call)
 8003b88:	79fa      	ldrb	r2, [r7, #7]
 8003b8a:	4911      	ldr	r1, [pc, #68]	; (8003bd0 <TASK_MANAGER_Init+0x54>)
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	4413      	add	r3, r2
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	440b      	add	r3, r1
 8003b96:	3308      	adds	r3, #8
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d009      	beq.n	8003bb2 <TASK_MANAGER_Init+0x36>
		{
			task[t].init.call();
 8003b9e:	79fa      	ldrb	r2, [r7, #7]
 8003ba0:	490b      	ldr	r1, [pc, #44]	; (8003bd0 <TASK_MANAGER_Init+0x54>)
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	4413      	add	r3, r2
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	440b      	add	r3, r1
 8003bac:	3308      	adds	r3, #8
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4798      	blx	r3
	for(uint8_t t = 0; t < task_count; t++)
 8003bb2:	79fb      	ldrb	r3, [r7, #7]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	71fb      	strb	r3, [r7, #7]
 8003bb8:	4b06      	ldr	r3, [pc, #24]	; (8003bd4 <TASK_MANAGER_Init+0x58>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	79fa      	ldrb	r2, [r7, #7]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d3e2      	bcc.n	8003b88 <TASK_MANAGER_Init+0xc>
		}
	}
	is_initialized = TRUE;
 8003bc2:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <TASK_MANAGER_Init+0x5c>)
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	701a      	strb	r2, [r3, #0]
}
 8003bc8:	bf00      	nop
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	20000fec 	.word	0x20000fec
 8003bd4:	20001425 	.word	0x20001425
 8003bd8:	20001424 	.word	0x20001424

08003bdc <TASK_MANAGER_Main>:


void TASK_MANAGER_Main(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
	for(uint8_t t = 0; t < task_count; t++)
 8003be2:	2300      	movs	r3, #0
 8003be4:	71fb      	strb	r3, [r7, #7]
 8003be6:	e017      	b.n	8003c18 <TASK_MANAGER_Main+0x3c>
	{
		if(task[t].main.call)
 8003be8:	79fa      	ldrb	r2, [r7, #7]
 8003bea:	4910      	ldr	r1, [pc, #64]	; (8003c2c <TASK_MANAGER_Main+0x50>)
 8003bec:	4613      	mov	r3, r2
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	4413      	add	r3, r2
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	440b      	add	r3, r1
 8003bf6:	3318      	adds	r3, #24
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d009      	beq.n	8003c12 <TASK_MANAGER_Main+0x36>
		{
			task[t].main.call();
 8003bfe:	79fa      	ldrb	r2, [r7, #7]
 8003c00:	490a      	ldr	r1, [pc, #40]	; (8003c2c <TASK_MANAGER_Main+0x50>)
 8003c02:	4613      	mov	r3, r2
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	4413      	add	r3, r2
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	440b      	add	r3, r1
 8003c0c:	3318      	adds	r3, #24
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4798      	blx	r3
	for(uint8_t t = 0; t < task_count; t++)
 8003c12:	79fb      	ldrb	r3, [r7, #7]
 8003c14:	3301      	adds	r3, #1
 8003c16:	71fb      	strb	r3, [r7, #7]
 8003c18:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <TASK_MANAGER_Main+0x54>)
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	79fa      	ldrb	r2, [r7, #7]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d3e2      	bcc.n	8003be8 <TASK_MANAGER_Main+0xc>
		}
	}
}
 8003c22:	bf00      	nop
 8003c24:	bf00      	nop
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	20000fec 	.word	0x20000fec
 8003c30:	20001425 	.word	0x20001425

08003c34 <TASK_MANAGER_It_ms>:

void TASK_MANAGER_It_ms(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
	if(!is_initialized)
 8003c3a:	4b14      	ldr	r3, [pc, #80]	; (8003c8c <TASK_MANAGER_It_ms+0x58>)
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d020      	beq.n	8003c84 <TASK_MANAGER_It_ms+0x50>
	{
		return;
	}
	for(uint8_t t = 0; t < task_count; t++)
 8003c42:	2300      	movs	r3, #0
 8003c44:	71fb      	strb	r3, [r7, #7]
 8003c46:	e017      	b.n	8003c78 <TASK_MANAGER_It_ms+0x44>
	{
		if(task[t].it.call)
 8003c48:	79fa      	ldrb	r2, [r7, #7]
 8003c4a:	4911      	ldr	r1, [pc, #68]	; (8003c90 <TASK_MANAGER_It_ms+0x5c>)
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	4413      	add	r3, r2
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	440b      	add	r3, r1
 8003c56:	3328      	adds	r3, #40	; 0x28
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d009      	beq.n	8003c72 <TASK_MANAGER_It_ms+0x3e>
		{
			task[t].it.call();
 8003c5e:	79fa      	ldrb	r2, [r7, #7]
 8003c60:	490b      	ldr	r1, [pc, #44]	; (8003c90 <TASK_MANAGER_It_ms+0x5c>)
 8003c62:	4613      	mov	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	4413      	add	r3, r2
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	440b      	add	r3, r1
 8003c6c:	3328      	adds	r3, #40	; 0x28
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4798      	blx	r3
	for(uint8_t t = 0; t < task_count; t++)
 8003c72:	79fb      	ldrb	r3, [r7, #7]
 8003c74:	3301      	adds	r3, #1
 8003c76:	71fb      	strb	r3, [r7, #7]
 8003c78:	4b06      	ldr	r3, [pc, #24]	; (8003c94 <TASK_MANAGER_It_ms+0x60>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	79fa      	ldrb	r2, [r7, #7]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d3e2      	bcc.n	8003c48 <TASK_MANAGER_It_ms+0x14>
 8003c82:	e000      	b.n	8003c86 <TASK_MANAGER_It_ms+0x52>
		return;
 8003c84:	bf00      	nop
		}
	}
}
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	20001424 	.word	0x20001424
 8003c90:	20000fec 	.word	0x20000fec
 8003c94:	20001425 	.word	0x20001425

08003c98 <TASK_MANAGER_Gyro_Data_Ready>:

void TASK_MANAGER_Gyro_Data_Ready(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
	for(uint8_t t = 0; t < task_count; t++)
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	71fb      	strb	r3, [r7, #7]
 8003ca2:	e017      	b.n	8003cd4 <TASK_MANAGER_Gyro_Data_Ready+0x3c>
	{
		if(task[t].gyro_data_ready.call)
 8003ca4:	79fa      	ldrb	r2, [r7, #7]
 8003ca6:	4910      	ldr	r1, [pc, #64]	; (8003ce8 <TASK_MANAGER_Gyro_Data_Ready+0x50>)
 8003ca8:	4613      	mov	r3, r2
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	4413      	add	r3, r2
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	440b      	add	r3, r1
 8003cb2:	3338      	adds	r3, #56	; 0x38
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d009      	beq.n	8003cce <TASK_MANAGER_Gyro_Data_Ready+0x36>
		{
			task[t].gyro_data_ready.call();
 8003cba:	79fa      	ldrb	r2, [r7, #7]
 8003cbc:	490a      	ldr	r1, [pc, #40]	; (8003ce8 <TASK_MANAGER_Gyro_Data_Ready+0x50>)
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	4413      	add	r3, r2
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	440b      	add	r3, r1
 8003cc8:	3338      	adds	r3, #56	; 0x38
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4798      	blx	r3
	for(uint8_t t = 0; t < task_count; t++)
 8003cce:	79fb      	ldrb	r3, [r7, #7]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	71fb      	strb	r3, [r7, #7]
 8003cd4:	4b05      	ldr	r3, [pc, #20]	; (8003cec <TASK_MANAGER_Gyro_Data_Ready+0x54>)
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	79fa      	ldrb	r2, [r7, #7]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d3e2      	bcc.n	8003ca4 <TASK_MANAGER_Gyro_Data_Ready+0xc>
		}
	}
}
 8003cde:	bf00      	nop
 8003ce0:	bf00      	nop
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	20000fec 	.word	0x20000fec
 8003cec:	20001425 	.word	0x20001425

08003cf0 <TASK_MANAGER_Add_Task>:

void TASK_MANAGER_Add_Task(char * name, void(*init)(void), void(*main)(void), void(*it)(void), void(*gyro)(void))
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
 8003cfc:	603b      	str	r3, [r7, #0]
	if(task_count == MAX_NUMBER_OF_TASK)
 8003cfe:	4b2b      	ldr	r3, [pc, #172]	; (8003dac <TASK_MANAGER_Add_Task+0xbc>)
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	2b0f      	cmp	r3, #15
 8003d04:	d04b      	beq.n	8003d9e <TASK_MANAGER_Add_Task+0xae>
	{
		return;
	}
	task[task_count].name = name;
 8003d06:	4b29      	ldr	r3, [pc, #164]	; (8003dac <TASK_MANAGER_Add_Task+0xbc>)
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	4a28      	ldr	r2, [pc, #160]	; (8003db0 <TASK_MANAGER_Add_Task+0xc0>)
 8003d0e:	460b      	mov	r3, r1
 8003d10:	00db      	lsls	r3, r3, #3
 8003d12:	440b      	add	r3, r1
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	4413      	add	r3, r2
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	601a      	str	r2, [r3, #0]
	task[task_count].name_len = sizeof(name) - 1;
 8003d1c:	4b23      	ldr	r3, [pc, #140]	; (8003dac <TASK_MANAGER_Add_Task+0xbc>)
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	4619      	mov	r1, r3
 8003d22:	4a23      	ldr	r2, [pc, #140]	; (8003db0 <TASK_MANAGER_Add_Task+0xc0>)
 8003d24:	460b      	mov	r3, r1
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	440b      	add	r3, r1
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	4413      	add	r3, r2
 8003d2e:	3304      	adds	r3, #4
 8003d30:	2203      	movs	r2, #3
 8003d32:	701a      	strb	r2, [r3, #0]
	task[task_count].init.call = init;
 8003d34:	4b1d      	ldr	r3, [pc, #116]	; (8003dac <TASK_MANAGER_Add_Task+0xbc>)
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4a1d      	ldr	r2, [pc, #116]	; (8003db0 <TASK_MANAGER_Add_Task+0xc0>)
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	440b      	add	r3, r1
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	4413      	add	r3, r2
 8003d46:	3308      	adds	r3, #8
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	601a      	str	r2, [r3, #0]
	task[task_count].main.call = main;
 8003d4c:	4b17      	ldr	r3, [pc, #92]	; (8003dac <TASK_MANAGER_Add_Task+0xbc>)
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	4619      	mov	r1, r3
 8003d52:	4a17      	ldr	r2, [pc, #92]	; (8003db0 <TASK_MANAGER_Add_Task+0xc0>)
 8003d54:	460b      	mov	r3, r1
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	440b      	add	r3, r1
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	4413      	add	r3, r2
 8003d5e:	3318      	adds	r3, #24
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	601a      	str	r2, [r3, #0]
	task[task_count].it.call = it;
 8003d64:	4b11      	ldr	r3, [pc, #68]	; (8003dac <TASK_MANAGER_Add_Task+0xbc>)
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	4619      	mov	r1, r3
 8003d6a:	4a11      	ldr	r2, [pc, #68]	; (8003db0 <TASK_MANAGER_Add_Task+0xc0>)
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	440b      	add	r3, r1
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	4413      	add	r3, r2
 8003d76:	3328      	adds	r3, #40	; 0x28
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	601a      	str	r2, [r3, #0]
	task[task_count++].gyro_data_ready.call = gyro;
 8003d7c:	4b0b      	ldr	r3, [pc, #44]	; (8003dac <TASK_MANAGER_Add_Task+0xbc>)
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	1c5a      	adds	r2, r3, #1
 8003d82:	b2d1      	uxtb	r1, r2
 8003d84:	4a09      	ldr	r2, [pc, #36]	; (8003dac <TASK_MANAGER_Add_Task+0xbc>)
 8003d86:	7011      	strb	r1, [r2, #0]
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4a09      	ldr	r2, [pc, #36]	; (8003db0 <TASK_MANAGER_Add_Task+0xc0>)
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	440b      	add	r3, r1
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	4413      	add	r3, r2
 8003d96:	3338      	adds	r3, #56	; 0x38
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	e000      	b.n	8003da0 <TASK_MANAGER_Add_Task+0xb0>
		return;
 8003d9e:	bf00      	nop
}
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	20001425 	.word	0x20001425
 8003db0:	20000fec 	.word	0x20000fec

08003db4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003db8:	4b0e      	ldr	r3, [pc, #56]	; (8003df4 <HAL_Init+0x40>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a0d      	ldr	r2, [pc, #52]	; (8003df4 <HAL_Init+0x40>)
 8003dbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003dc4:	4b0b      	ldr	r3, [pc, #44]	; (8003df4 <HAL_Init+0x40>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a0a      	ldr	r2, [pc, #40]	; (8003df4 <HAL_Init+0x40>)
 8003dca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003dd0:	4b08      	ldr	r3, [pc, #32]	; (8003df4 <HAL_Init+0x40>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a07      	ldr	r2, [pc, #28]	; (8003df4 <HAL_Init+0x40>)
 8003dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ddc:	2003      	movs	r0, #3
 8003dde:	f000 f94f 	bl	8004080 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003de2:	200f      	movs	r0, #15
 8003de4:	f000 f808 	bl	8003df8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003de8:	f7ff f9cc 	bl	8003184 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	40023c00 	.word	0x40023c00

08003df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e00:	4b12      	ldr	r3, [pc, #72]	; (8003e4c <HAL_InitTick+0x54>)
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	4b12      	ldr	r3, [pc, #72]	; (8003e50 <HAL_InitTick+0x58>)
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	4619      	mov	r1, r3
 8003e0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 f967 	bl	80040ea <HAL_SYSTICK_Config>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e00e      	b.n	8003e44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b0f      	cmp	r3, #15
 8003e2a:	d80a      	bhi.n	8003e42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	6879      	ldr	r1, [r7, #4]
 8003e30:	f04f 30ff 	mov.w	r0, #4294967295
 8003e34:	f000 f92f 	bl	8004096 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e38:	4a06      	ldr	r2, [pc, #24]	; (8003e54 <HAL_InitTick+0x5c>)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	e000      	b.n	8003e44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	20000108 	.word	0x20000108
 8003e50:	20000110 	.word	0x20000110
 8003e54:	2000010c 	.word	0x2000010c

08003e58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e5c:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <HAL_IncTick+0x20>)
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	461a      	mov	r2, r3
 8003e62:	4b06      	ldr	r3, [pc, #24]	; (8003e7c <HAL_IncTick+0x24>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4413      	add	r3, r2
 8003e68:	4a04      	ldr	r2, [pc, #16]	; (8003e7c <HAL_IncTick+0x24>)
 8003e6a:	6013      	str	r3, [r2, #0]
}
 8003e6c:	bf00      	nop
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	20000110 	.word	0x20000110
 8003e7c:	20001890 	.word	0x20001890

08003e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
  return uwTick;
 8003e84:	4b03      	ldr	r3, [pc, #12]	; (8003e94 <HAL_GetTick+0x14>)
 8003e86:	681b      	ldr	r3, [r3, #0]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	20001890 	.word	0x20001890

08003e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ea0:	f7ff ffee 	bl	8003e80 <HAL_GetTick>
 8003ea4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb0:	d005      	beq.n	8003ebe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003eb2:	4b0a      	ldr	r3, [pc, #40]	; (8003edc <HAL_Delay+0x44>)
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4413      	add	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ebe:	bf00      	nop
 8003ec0:	f7ff ffde 	bl	8003e80 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d8f7      	bhi.n	8003ec0 <HAL_Delay+0x28>
  {
  }
}
 8003ed0:	bf00      	nop
 8003ed2:	bf00      	nop
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	20000110 	.word	0x20000110

08003ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ef0:	4b0c      	ldr	r3, [pc, #48]	; (8003f24 <__NVIC_SetPriorityGrouping+0x44>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003efc:	4013      	ands	r3, r2
 8003efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f12:	4a04      	ldr	r2, [pc, #16]	; (8003f24 <__NVIC_SetPriorityGrouping+0x44>)
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	60d3      	str	r3, [r2, #12]
}
 8003f18:	bf00      	nop
 8003f1a:	3714      	adds	r7, #20
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	e000ed00 	.word	0xe000ed00

08003f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f2c:	4b04      	ldr	r3, [pc, #16]	; (8003f40 <__NVIC_GetPriorityGrouping+0x18>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	0a1b      	lsrs	r3, r3, #8
 8003f32:	f003 0307 	and.w	r3, r3, #7
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr
 8003f40:	e000ed00 	.word	0xe000ed00

08003f44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	db0b      	blt.n	8003f6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f56:	79fb      	ldrb	r3, [r7, #7]
 8003f58:	f003 021f 	and.w	r2, r3, #31
 8003f5c:	4907      	ldr	r1, [pc, #28]	; (8003f7c <__NVIC_EnableIRQ+0x38>)
 8003f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f62:	095b      	lsrs	r3, r3, #5
 8003f64:	2001      	movs	r0, #1
 8003f66:	fa00 f202 	lsl.w	r2, r0, r2
 8003f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f6e:	bf00      	nop
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	e000e100 	.word	0xe000e100

08003f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	4603      	mov	r3, r0
 8003f88:	6039      	str	r1, [r7, #0]
 8003f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	db0a      	blt.n	8003faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	490c      	ldr	r1, [pc, #48]	; (8003fcc <__NVIC_SetPriority+0x4c>)
 8003f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f9e:	0112      	lsls	r2, r2, #4
 8003fa0:	b2d2      	uxtb	r2, r2
 8003fa2:	440b      	add	r3, r1
 8003fa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fa8:	e00a      	b.n	8003fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	b2da      	uxtb	r2, r3
 8003fae:	4908      	ldr	r1, [pc, #32]	; (8003fd0 <__NVIC_SetPriority+0x50>)
 8003fb0:	79fb      	ldrb	r3, [r7, #7]
 8003fb2:	f003 030f 	and.w	r3, r3, #15
 8003fb6:	3b04      	subs	r3, #4
 8003fb8:	0112      	lsls	r2, r2, #4
 8003fba:	b2d2      	uxtb	r2, r2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	761a      	strb	r2, [r3, #24]
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	e000e100 	.word	0xe000e100
 8003fd0:	e000ed00 	.word	0xe000ed00

08003fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b089      	sub	sp, #36	; 0x24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f003 0307 	and.w	r3, r3, #7
 8003fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	f1c3 0307 	rsb	r3, r3, #7
 8003fee:	2b04      	cmp	r3, #4
 8003ff0:	bf28      	it	cs
 8003ff2:	2304      	movcs	r3, #4
 8003ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	2b06      	cmp	r3, #6
 8003ffc:	d902      	bls.n	8004004 <NVIC_EncodePriority+0x30>
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	3b03      	subs	r3, #3
 8004002:	e000      	b.n	8004006 <NVIC_EncodePriority+0x32>
 8004004:	2300      	movs	r3, #0
 8004006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004008:	f04f 32ff 	mov.w	r2, #4294967295
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	fa02 f303 	lsl.w	r3, r2, r3
 8004012:	43da      	mvns	r2, r3
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	401a      	ands	r2, r3
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800401c:	f04f 31ff 	mov.w	r1, #4294967295
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	fa01 f303 	lsl.w	r3, r1, r3
 8004026:	43d9      	mvns	r1, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800402c:	4313      	orrs	r3, r2
         );
}
 800402e:	4618      	mov	r0, r3
 8004030:	3724      	adds	r7, #36	; 0x24
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
	...

0800403c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3b01      	subs	r3, #1
 8004048:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800404c:	d301      	bcc.n	8004052 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800404e:	2301      	movs	r3, #1
 8004050:	e00f      	b.n	8004072 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004052:	4a0a      	ldr	r2, [pc, #40]	; (800407c <SysTick_Config+0x40>)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	3b01      	subs	r3, #1
 8004058:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800405a:	210f      	movs	r1, #15
 800405c:	f04f 30ff 	mov.w	r0, #4294967295
 8004060:	f7ff ff8e 	bl	8003f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004064:	4b05      	ldr	r3, [pc, #20]	; (800407c <SysTick_Config+0x40>)
 8004066:	2200      	movs	r2, #0
 8004068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800406a:	4b04      	ldr	r3, [pc, #16]	; (800407c <SysTick_Config+0x40>)
 800406c:	2207      	movs	r2, #7
 800406e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	e000e010 	.word	0xe000e010

08004080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f7ff ff29 	bl	8003ee0 <__NVIC_SetPriorityGrouping>
}
 800408e:	bf00      	nop
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004096:	b580      	push	{r7, lr}
 8004098:	b086      	sub	sp, #24
 800409a:	af00      	add	r7, sp, #0
 800409c:	4603      	mov	r3, r0
 800409e:	60b9      	str	r1, [r7, #8]
 80040a0:	607a      	str	r2, [r7, #4]
 80040a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040a4:	2300      	movs	r3, #0
 80040a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040a8:	f7ff ff3e 	bl	8003f28 <__NVIC_GetPriorityGrouping>
 80040ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	68b9      	ldr	r1, [r7, #8]
 80040b2:	6978      	ldr	r0, [r7, #20]
 80040b4:	f7ff ff8e 	bl	8003fd4 <NVIC_EncodePriority>
 80040b8:	4602      	mov	r2, r0
 80040ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040be:	4611      	mov	r1, r2
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7ff ff5d 	bl	8003f80 <__NVIC_SetPriority>
}
 80040c6:	bf00      	nop
 80040c8:	3718      	adds	r7, #24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b082      	sub	sp, #8
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	4603      	mov	r3, r0
 80040d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040dc:	4618      	mov	r0, r3
 80040de:	f7ff ff31 	bl	8003f44 <__NVIC_EnableIRQ>
}
 80040e2:	bf00      	nop
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b082      	sub	sp, #8
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7ff ffa2 	bl	800403c <SysTick_Config>
 80040f8:	4603      	mov	r3, r0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
	...

08004104 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800410c:	2300      	movs	r3, #0
 800410e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004110:	f7ff feb6 	bl	8003e80 <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e099      	b.n	8004254 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 0201 	bic.w	r2, r2, #1
 800413e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004140:	e00f      	b.n	8004162 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004142:	f7ff fe9d 	bl	8003e80 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b05      	cmp	r3, #5
 800414e:	d908      	bls.n	8004162 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2220      	movs	r2, #32
 8004154:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2203      	movs	r2, #3
 800415a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e078      	b.n	8004254 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1e8      	bne.n	8004142 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	4b38      	ldr	r3, [pc, #224]	; (800425c <HAL_DMA_Init+0x158>)
 800417c:	4013      	ands	r3, r2
 800417e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800418e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800419a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	2b04      	cmp	r3, #4
 80041ba:	d107      	bne.n	80041cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c4:	4313      	orrs	r3, r2
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	f023 0307 	bic.w	r3, r3, #7
 80041e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f2:	2b04      	cmp	r3, #4
 80041f4:	d117      	bne.n	8004226 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00e      	beq.n	8004226 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 fb1b 	bl	8004844 <DMA_CheckFifoParam>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d008      	beq.n	8004226 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2240      	movs	r2, #64	; 0x40
 8004218:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004222:	2301      	movs	r3, #1
 8004224:	e016      	b.n	8004254 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fad2 	bl	80047d8 <DMA_CalcBaseAndBitshift>
 8004234:	4603      	mov	r3, r0
 8004236:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800423c:	223f      	movs	r2, #63	; 0x3f
 800423e:	409a      	lsls	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3718      	adds	r7, #24
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	f010803f 	.word	0xf010803f

08004260 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
 800426c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800426e:	2300      	movs	r3, #0
 8004270:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004276:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800427e:	2b01      	cmp	r3, #1
 8004280:	d101      	bne.n	8004286 <HAL_DMA_Start_IT+0x26>
 8004282:	2302      	movs	r3, #2
 8004284:	e040      	b.n	8004308 <HAL_DMA_Start_IT+0xa8>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b01      	cmp	r3, #1
 8004298:	d12f      	bne.n	80042fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2202      	movs	r2, #2
 800429e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	68b9      	ldr	r1, [r7, #8]
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f000 fa64 	bl	800477c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b8:	223f      	movs	r2, #63	; 0x3f
 80042ba:	409a      	lsls	r2, r3
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f042 0216 	orr.w	r2, r2, #22
 80042ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d007      	beq.n	80042e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0208 	orr.w	r2, r2, #8
 80042e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0201 	orr.w	r2, r2, #1
 80042f6:	601a      	str	r2, [r3, #0]
 80042f8:	e005      	b.n	8004306 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004302:	2302      	movs	r3, #2
 8004304:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004306:	7dfb      	ldrb	r3, [r7, #23]
}
 8004308:	4618      	mov	r0, r3
 800430a:	3718      	adds	r7, #24
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800431e:	f7ff fdaf 	bl	8003e80 <HAL_GetTick>
 8004322:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d008      	beq.n	8004342 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2280      	movs	r2, #128	; 0x80
 8004334:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e052      	b.n	80043e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0216 	bic.w	r2, r2, #22
 8004350:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	695a      	ldr	r2, [r3, #20]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004360:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	2b00      	cmp	r3, #0
 8004368:	d103      	bne.n	8004372 <HAL_DMA_Abort+0x62>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800436e:	2b00      	cmp	r3, #0
 8004370:	d007      	beq.n	8004382 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 0208 	bic.w	r2, r2, #8
 8004380:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 0201 	bic.w	r2, r2, #1
 8004390:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004392:	e013      	b.n	80043bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004394:	f7ff fd74 	bl	8003e80 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b05      	cmp	r3, #5
 80043a0:	d90c      	bls.n	80043bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2220      	movs	r2, #32
 80043a6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2203      	movs	r2, #3
 80043ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e015      	b.n	80043e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1e4      	bne.n	8004394 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ce:	223f      	movs	r2, #63	; 0x3f
 80043d0:	409a      	lsls	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d004      	beq.n	800440e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2280      	movs	r2, #128	; 0x80
 8004408:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e00c      	b.n	8004428 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2205      	movs	r2, #5
 8004412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0201 	bic.w	r2, r2, #1
 8004424:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800443c:	2300      	movs	r3, #0
 800443e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004440:	4b92      	ldr	r3, [pc, #584]	; (800468c <HAL_DMA_IRQHandler+0x258>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a92      	ldr	r2, [pc, #584]	; (8004690 <HAL_DMA_IRQHandler+0x25c>)
 8004446:	fba2 2303 	umull	r2, r3, r2, r3
 800444a:	0a9b      	lsrs	r3, r3, #10
 800444c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004452:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800445e:	2208      	movs	r2, #8
 8004460:	409a      	lsls	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	4013      	ands	r3, r2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d01a      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0304 	and.w	r3, r3, #4
 8004474:	2b00      	cmp	r3, #0
 8004476:	d013      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 0204 	bic.w	r2, r2, #4
 8004486:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800448c:	2208      	movs	r2, #8
 800448e:	409a      	lsls	r2, r3
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004498:	f043 0201 	orr.w	r2, r3, #1
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a4:	2201      	movs	r2, #1
 80044a6:	409a      	lsls	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	4013      	ands	r3, r2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d012      	beq.n	80044d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00b      	beq.n	80044d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c2:	2201      	movs	r2, #1
 80044c4:	409a      	lsls	r2, r3
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ce:	f043 0202 	orr.w	r2, r3, #2
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044da:	2204      	movs	r2, #4
 80044dc:	409a      	lsls	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	4013      	ands	r3, r2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d012      	beq.n	800450c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00b      	beq.n	800450c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f8:	2204      	movs	r2, #4
 80044fa:	409a      	lsls	r2, r3
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004504:	f043 0204 	orr.w	r2, r3, #4
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004510:	2210      	movs	r2, #16
 8004512:	409a      	lsls	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	4013      	ands	r3, r2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d043      	beq.n	80045a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	2b00      	cmp	r3, #0
 8004528:	d03c      	beq.n	80045a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800452e:	2210      	movs	r2, #16
 8004530:	409a      	lsls	r2, r3
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d018      	beq.n	8004576 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d108      	bne.n	8004564 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	2b00      	cmp	r3, #0
 8004558:	d024      	beq.n	80045a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	4798      	blx	r3
 8004562:	e01f      	b.n	80045a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004568:	2b00      	cmp	r3, #0
 800456a:	d01b      	beq.n	80045a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	4798      	blx	r3
 8004574:	e016      	b.n	80045a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004580:	2b00      	cmp	r3, #0
 8004582:	d107      	bne.n	8004594 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0208 	bic.w	r2, r2, #8
 8004592:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a8:	2220      	movs	r2, #32
 80045aa:	409a      	lsls	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	4013      	ands	r3, r2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f000 808e 	beq.w	80046d2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0310 	and.w	r3, r3, #16
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f000 8086 	beq.w	80046d2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ca:	2220      	movs	r2, #32
 80045cc:	409a      	lsls	r2, r3
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b05      	cmp	r3, #5
 80045dc:	d136      	bne.n	800464c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 0216 	bic.w	r2, r2, #22
 80045ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	695a      	ldr	r2, [r3, #20]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	2b00      	cmp	r3, #0
 8004604:	d103      	bne.n	800460e <HAL_DMA_IRQHandler+0x1da>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800460a:	2b00      	cmp	r3, #0
 800460c:	d007      	beq.n	800461e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 0208 	bic.w	r2, r2, #8
 800461c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004622:	223f      	movs	r2, #63	; 0x3f
 8004624:	409a      	lsls	r2, r3
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800463e:	2b00      	cmp	r3, #0
 8004640:	d07d      	beq.n	800473e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	4798      	blx	r3
        }
        return;
 800464a:	e078      	b.n	800473e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d01c      	beq.n	8004694 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d108      	bne.n	800467a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466c:	2b00      	cmp	r3, #0
 800466e:	d030      	beq.n	80046d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	4798      	blx	r3
 8004678:	e02b      	b.n	80046d2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800467e:	2b00      	cmp	r3, #0
 8004680:	d027      	beq.n	80046d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	4798      	blx	r3
 800468a:	e022      	b.n	80046d2 <HAL_DMA_IRQHandler+0x29e>
 800468c:	20000108 	.word	0x20000108
 8004690:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10f      	bne.n	80046c2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0210 	bic.w	r2, r2, #16
 80046b0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d032      	beq.n	8004740 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d022      	beq.n	800472c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2205      	movs	r2, #5
 80046ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 0201 	bic.w	r2, r2, #1
 80046fc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	3301      	adds	r3, #1
 8004702:	60bb      	str	r3, [r7, #8]
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	429a      	cmp	r2, r3
 8004708:	d307      	bcc.n	800471a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1f2      	bne.n	80046fe <HAL_DMA_IRQHandler+0x2ca>
 8004718:	e000      	b.n	800471c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800471a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004730:	2b00      	cmp	r3, #0
 8004732:	d005      	beq.n	8004740 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	4798      	blx	r3
 800473c:	e000      	b.n	8004740 <HAL_DMA_IRQHandler+0x30c>
        return;
 800473e:	bf00      	nop
    }
  }
}
 8004740:	3718      	adds	r7, #24
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop

08004748 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004756:	b2db      	uxtb	r3, r3
}
 8004758:	4618      	mov	r0, r3
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004770:	4618      	mov	r0, r3
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
 8004788:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004798:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	2b40      	cmp	r3, #64	; 0x40
 80047a8:	d108      	bne.n	80047bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80047ba:	e007      	b.n	80047cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	60da      	str	r2, [r3, #12]
}
 80047cc:	bf00      	nop
 80047ce:	3714      	adds	r7, #20
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	3b10      	subs	r3, #16
 80047e8:	4a14      	ldr	r2, [pc, #80]	; (800483c <DMA_CalcBaseAndBitshift+0x64>)
 80047ea:	fba2 2303 	umull	r2, r3, r2, r3
 80047ee:	091b      	lsrs	r3, r3, #4
 80047f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80047f2:	4a13      	ldr	r2, [pc, #76]	; (8004840 <DMA_CalcBaseAndBitshift+0x68>)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4413      	add	r3, r2
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	461a      	mov	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2b03      	cmp	r3, #3
 8004804:	d909      	bls.n	800481a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800480e:	f023 0303 	bic.w	r3, r3, #3
 8004812:	1d1a      	adds	r2, r3, #4
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	659a      	str	r2, [r3, #88]	; 0x58
 8004818:	e007      	b.n	800482a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004822:	f023 0303 	bic.w	r3, r3, #3
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800482e:	4618      	mov	r0, r3
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	aaaaaaab 	.word	0xaaaaaaab
 8004840:	0800b568 	.word	0x0800b568

08004844 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800484c:	2300      	movs	r3, #0
 800484e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004854:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d11f      	bne.n	800489e <DMA_CheckFifoParam+0x5a>
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	2b03      	cmp	r3, #3
 8004862:	d856      	bhi.n	8004912 <DMA_CheckFifoParam+0xce>
 8004864:	a201      	add	r2, pc, #4	; (adr r2, 800486c <DMA_CheckFifoParam+0x28>)
 8004866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486a:	bf00      	nop
 800486c:	0800487d 	.word	0x0800487d
 8004870:	0800488f 	.word	0x0800488f
 8004874:	0800487d 	.word	0x0800487d
 8004878:	08004913 	.word	0x08004913
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004880:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d046      	beq.n	8004916 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800488c:	e043      	b.n	8004916 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004892:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004896:	d140      	bne.n	800491a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800489c:	e03d      	b.n	800491a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048a6:	d121      	bne.n	80048ec <DMA_CheckFifoParam+0xa8>
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	2b03      	cmp	r3, #3
 80048ac:	d837      	bhi.n	800491e <DMA_CheckFifoParam+0xda>
 80048ae:	a201      	add	r2, pc, #4	; (adr r2, 80048b4 <DMA_CheckFifoParam+0x70>)
 80048b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b4:	080048c5 	.word	0x080048c5
 80048b8:	080048cb 	.word	0x080048cb
 80048bc:	080048c5 	.word	0x080048c5
 80048c0:	080048dd 	.word	0x080048dd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	73fb      	strb	r3, [r7, #15]
      break;
 80048c8:	e030      	b.n	800492c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d025      	beq.n	8004922 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048da:	e022      	b.n	8004922 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80048e4:	d11f      	bne.n	8004926 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80048ea:	e01c      	b.n	8004926 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d903      	bls.n	80048fa <DMA_CheckFifoParam+0xb6>
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	2b03      	cmp	r3, #3
 80048f6:	d003      	beq.n	8004900 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80048f8:	e018      	b.n	800492c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	73fb      	strb	r3, [r7, #15]
      break;
 80048fe:	e015      	b.n	800492c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004904:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00e      	beq.n	800492a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	73fb      	strb	r3, [r7, #15]
      break;
 8004910:	e00b      	b.n	800492a <DMA_CheckFifoParam+0xe6>
      break;
 8004912:	bf00      	nop
 8004914:	e00a      	b.n	800492c <DMA_CheckFifoParam+0xe8>
      break;
 8004916:	bf00      	nop
 8004918:	e008      	b.n	800492c <DMA_CheckFifoParam+0xe8>
      break;
 800491a:	bf00      	nop
 800491c:	e006      	b.n	800492c <DMA_CheckFifoParam+0xe8>
      break;
 800491e:	bf00      	nop
 8004920:	e004      	b.n	800492c <DMA_CheckFifoParam+0xe8>
      break;
 8004922:	bf00      	nop
 8004924:	e002      	b.n	800492c <DMA_CheckFifoParam+0xe8>
      break;   
 8004926:	bf00      	nop
 8004928:	e000      	b.n	800492c <DMA_CheckFifoParam+0xe8>
      break;
 800492a:	bf00      	nop
    }
  } 
  
  return status; 
 800492c:	7bfb      	ldrb	r3, [r7, #15]
}
 800492e:	4618      	mov	r0, r3
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop

0800493c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800493c:	b480      	push	{r7}
 800493e:	b089      	sub	sp, #36	; 0x24
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004946:	2300      	movs	r3, #0
 8004948:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800494a:	2300      	movs	r3, #0
 800494c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800494e:	2300      	movs	r3, #0
 8004950:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004952:	2300      	movs	r3, #0
 8004954:	61fb      	str	r3, [r7, #28]
 8004956:	e16b      	b.n	8004c30 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004958:	2201      	movs	r2, #1
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	fa02 f303 	lsl.w	r3, r2, r3
 8004960:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	4013      	ands	r3, r2
 800496a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	429a      	cmp	r2, r3
 8004972:	f040 815a 	bne.w	8004c2a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f003 0303 	and.w	r3, r3, #3
 800497e:	2b01      	cmp	r3, #1
 8004980:	d005      	beq.n	800498e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800498a:	2b02      	cmp	r3, #2
 800498c:	d130      	bne.n	80049f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	005b      	lsls	r3, r3, #1
 8004998:	2203      	movs	r2, #3
 800499a:	fa02 f303 	lsl.w	r3, r2, r3
 800499e:	43db      	mvns	r3, r3
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	4013      	ands	r3, r2
 80049a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	68da      	ldr	r2, [r3, #12]
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	fa02 f303 	lsl.w	r3, r2, r3
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	69ba      	ldr	r2, [r7, #24]
 80049bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049c4:	2201      	movs	r2, #1
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	fa02 f303 	lsl.w	r3, r2, r3
 80049cc:	43db      	mvns	r3, r3
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	4013      	ands	r3, r2
 80049d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	091b      	lsrs	r3, r3, #4
 80049da:	f003 0201 	and.w	r2, r3, #1
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	fa02 f303 	lsl.w	r3, r2, r3
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f003 0303 	and.w	r3, r3, #3
 80049f8:	2b03      	cmp	r3, #3
 80049fa:	d017      	beq.n	8004a2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	2203      	movs	r2, #3
 8004a08:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0c:	43db      	mvns	r3, r3
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	4013      	ands	r3, r2
 8004a12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	689a      	ldr	r2, [r3, #8]
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f003 0303 	and.w	r3, r3, #3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d123      	bne.n	8004a80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	08da      	lsrs	r2, r3, #3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3208      	adds	r2, #8
 8004a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	f003 0307 	and.w	r3, r3, #7
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	220f      	movs	r2, #15
 8004a50:	fa02 f303 	lsl.w	r3, r2, r3
 8004a54:	43db      	mvns	r3, r3
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	691a      	ldr	r2, [r3, #16]
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	f003 0307 	and.w	r3, r3, #7
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	08da      	lsrs	r2, r3, #3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	3208      	adds	r2, #8
 8004a7a:	69b9      	ldr	r1, [r7, #24]
 8004a7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	2203      	movs	r2, #3
 8004a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a90:	43db      	mvns	r3, r3
 8004a92:	69ba      	ldr	r2, [r7, #24]
 8004a94:	4013      	ands	r3, r2
 8004a96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f003 0203 	and.w	r2, r3, #3
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa8:	69ba      	ldr	r2, [r7, #24]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 80b4 	beq.w	8004c2a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60fb      	str	r3, [r7, #12]
 8004ac6:	4b60      	ldr	r3, [pc, #384]	; (8004c48 <HAL_GPIO_Init+0x30c>)
 8004ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aca:	4a5f      	ldr	r2, [pc, #380]	; (8004c48 <HAL_GPIO_Init+0x30c>)
 8004acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8004ad2:	4b5d      	ldr	r3, [pc, #372]	; (8004c48 <HAL_GPIO_Init+0x30c>)
 8004ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ada:	60fb      	str	r3, [r7, #12]
 8004adc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ade:	4a5b      	ldr	r2, [pc, #364]	; (8004c4c <HAL_GPIO_Init+0x310>)
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	089b      	lsrs	r3, r3, #2
 8004ae4:	3302      	adds	r3, #2
 8004ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	f003 0303 	and.w	r3, r3, #3
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	220f      	movs	r2, #15
 8004af6:	fa02 f303 	lsl.w	r3, r2, r3
 8004afa:	43db      	mvns	r3, r3
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	4013      	ands	r3, r2
 8004b00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a52      	ldr	r2, [pc, #328]	; (8004c50 <HAL_GPIO_Init+0x314>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d02b      	beq.n	8004b62 <HAL_GPIO_Init+0x226>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a51      	ldr	r2, [pc, #324]	; (8004c54 <HAL_GPIO_Init+0x318>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d025      	beq.n	8004b5e <HAL_GPIO_Init+0x222>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a50      	ldr	r2, [pc, #320]	; (8004c58 <HAL_GPIO_Init+0x31c>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d01f      	beq.n	8004b5a <HAL_GPIO_Init+0x21e>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a4f      	ldr	r2, [pc, #316]	; (8004c5c <HAL_GPIO_Init+0x320>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d019      	beq.n	8004b56 <HAL_GPIO_Init+0x21a>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a4e      	ldr	r2, [pc, #312]	; (8004c60 <HAL_GPIO_Init+0x324>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d013      	beq.n	8004b52 <HAL_GPIO_Init+0x216>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a4d      	ldr	r2, [pc, #308]	; (8004c64 <HAL_GPIO_Init+0x328>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d00d      	beq.n	8004b4e <HAL_GPIO_Init+0x212>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a4c      	ldr	r2, [pc, #304]	; (8004c68 <HAL_GPIO_Init+0x32c>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d007      	beq.n	8004b4a <HAL_GPIO_Init+0x20e>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a4b      	ldr	r2, [pc, #300]	; (8004c6c <HAL_GPIO_Init+0x330>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d101      	bne.n	8004b46 <HAL_GPIO_Init+0x20a>
 8004b42:	2307      	movs	r3, #7
 8004b44:	e00e      	b.n	8004b64 <HAL_GPIO_Init+0x228>
 8004b46:	2308      	movs	r3, #8
 8004b48:	e00c      	b.n	8004b64 <HAL_GPIO_Init+0x228>
 8004b4a:	2306      	movs	r3, #6
 8004b4c:	e00a      	b.n	8004b64 <HAL_GPIO_Init+0x228>
 8004b4e:	2305      	movs	r3, #5
 8004b50:	e008      	b.n	8004b64 <HAL_GPIO_Init+0x228>
 8004b52:	2304      	movs	r3, #4
 8004b54:	e006      	b.n	8004b64 <HAL_GPIO_Init+0x228>
 8004b56:	2303      	movs	r3, #3
 8004b58:	e004      	b.n	8004b64 <HAL_GPIO_Init+0x228>
 8004b5a:	2302      	movs	r3, #2
 8004b5c:	e002      	b.n	8004b64 <HAL_GPIO_Init+0x228>
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e000      	b.n	8004b64 <HAL_GPIO_Init+0x228>
 8004b62:	2300      	movs	r3, #0
 8004b64:	69fa      	ldr	r2, [r7, #28]
 8004b66:	f002 0203 	and.w	r2, r2, #3
 8004b6a:	0092      	lsls	r2, r2, #2
 8004b6c:	4093      	lsls	r3, r2
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b74:	4935      	ldr	r1, [pc, #212]	; (8004c4c <HAL_GPIO_Init+0x310>)
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	089b      	lsrs	r3, r3, #2
 8004b7a:	3302      	adds	r3, #2
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b82:	4b3b      	ldr	r3, [pc, #236]	; (8004c70 <HAL_GPIO_Init+0x334>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	43db      	mvns	r3, r3
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	4013      	ands	r3, r2
 8004b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d003      	beq.n	8004ba6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ba6:	4a32      	ldr	r2, [pc, #200]	; (8004c70 <HAL_GPIO_Init+0x334>)
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004bac:	4b30      	ldr	r3, [pc, #192]	; (8004c70 <HAL_GPIO_Init+0x334>)
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	43db      	mvns	r3, r3
 8004bb6:	69ba      	ldr	r2, [r7, #24]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d003      	beq.n	8004bd0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004bd0:	4a27      	ldr	r2, [pc, #156]	; (8004c70 <HAL_GPIO_Init+0x334>)
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004bd6:	4b26      	ldr	r3, [pc, #152]	; (8004c70 <HAL_GPIO_Init+0x334>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	43db      	mvns	r3, r3
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	4013      	ands	r3, r2
 8004be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004bf2:	69ba      	ldr	r2, [r7, #24]
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004bfa:	4a1d      	ldr	r2, [pc, #116]	; (8004c70 <HAL_GPIO_Init+0x334>)
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c00:	4b1b      	ldr	r3, [pc, #108]	; (8004c70 <HAL_GPIO_Init+0x334>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	43db      	mvns	r3, r3
 8004c0a:	69ba      	ldr	r2, [r7, #24]
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c24:	4a12      	ldr	r2, [pc, #72]	; (8004c70 <HAL_GPIO_Init+0x334>)
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	61fb      	str	r3, [r7, #28]
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	2b0f      	cmp	r3, #15
 8004c34:	f67f ae90 	bls.w	8004958 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c38:	bf00      	nop
 8004c3a:	bf00      	nop
 8004c3c:	3724      	adds	r7, #36	; 0x24
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	40023800 	.word	0x40023800
 8004c4c:	40013800 	.word	0x40013800
 8004c50:	40020000 	.word	0x40020000
 8004c54:	40020400 	.word	0x40020400
 8004c58:	40020800 	.word	0x40020800
 8004c5c:	40020c00 	.word	0x40020c00
 8004c60:	40021000 	.word	0x40021000
 8004c64:	40021400 	.word	0x40021400
 8004c68:	40021800 	.word	0x40021800
 8004c6c:	40021c00 	.word	0x40021c00
 8004c70:	40013c00 	.word	0x40013c00

08004c74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	807b      	strh	r3, [r7, #2]
 8004c80:	4613      	mov	r3, r2
 8004c82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c84:	787b      	ldrb	r3, [r7, #1]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d003      	beq.n	8004c92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c8a:	887a      	ldrh	r2, [r7, #2]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c90:	e003      	b.n	8004c9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c92:	887b      	ldrh	r3, [r7, #2]
 8004c94:	041a      	lsls	r2, r3, #16
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	619a      	str	r2, [r3, #24]
}
 8004c9a:	bf00      	nop
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
	...

08004ca8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e12b      	b.n	8004f12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d106      	bne.n	8004cd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7fe f884 	bl	8002ddc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2224      	movs	r2, #36	; 0x24
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 0201 	bic.w	r2, r2, #1
 8004cea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cfa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d0c:	f003 fc46 	bl	800859c <HAL_RCC_GetPCLK1Freq>
 8004d10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	4a81      	ldr	r2, [pc, #516]	; (8004f1c <HAL_I2C_Init+0x274>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d807      	bhi.n	8004d2c <HAL_I2C_Init+0x84>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	4a80      	ldr	r2, [pc, #512]	; (8004f20 <HAL_I2C_Init+0x278>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	bf94      	ite	ls
 8004d24:	2301      	movls	r3, #1
 8004d26:	2300      	movhi	r3, #0
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	e006      	b.n	8004d3a <HAL_I2C_Init+0x92>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	4a7d      	ldr	r2, [pc, #500]	; (8004f24 <HAL_I2C_Init+0x27c>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	bf94      	ite	ls
 8004d34:	2301      	movls	r3, #1
 8004d36:	2300      	movhi	r3, #0
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d001      	beq.n	8004d42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e0e7      	b.n	8004f12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	4a78      	ldr	r2, [pc, #480]	; (8004f28 <HAL_I2C_Init+0x280>)
 8004d46:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4a:	0c9b      	lsrs	r3, r3, #18
 8004d4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	4a6a      	ldr	r2, [pc, #424]	; (8004f1c <HAL_I2C_Init+0x274>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d802      	bhi.n	8004d7c <HAL_I2C_Init+0xd4>
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	e009      	b.n	8004d90 <HAL_I2C_Init+0xe8>
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004d82:	fb02 f303 	mul.w	r3, r2, r3
 8004d86:	4a69      	ldr	r2, [pc, #420]	; (8004f2c <HAL_I2C_Init+0x284>)
 8004d88:	fba2 2303 	umull	r2, r3, r2, r3
 8004d8c:	099b      	lsrs	r3, r3, #6
 8004d8e:	3301      	adds	r3, #1
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	6812      	ldr	r2, [r2, #0]
 8004d94:	430b      	orrs	r3, r1
 8004d96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004da2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	495c      	ldr	r1, [pc, #368]	; (8004f1c <HAL_I2C_Init+0x274>)
 8004dac:	428b      	cmp	r3, r1
 8004dae:	d819      	bhi.n	8004de4 <HAL_I2C_Init+0x13c>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	1e59      	subs	r1, r3, #1
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	fbb1 f3f3 	udiv	r3, r1, r3
 8004dbe:	1c59      	adds	r1, r3, #1
 8004dc0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004dc4:	400b      	ands	r3, r1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00a      	beq.n	8004de0 <HAL_I2C_Init+0x138>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	1e59      	subs	r1, r3, #1
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	005b      	lsls	r3, r3, #1
 8004dd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004dd8:	3301      	adds	r3, #1
 8004dda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dde:	e051      	b.n	8004e84 <HAL_I2C_Init+0x1dc>
 8004de0:	2304      	movs	r3, #4
 8004de2:	e04f      	b.n	8004e84 <HAL_I2C_Init+0x1dc>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d111      	bne.n	8004e10 <HAL_I2C_Init+0x168>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	1e58      	subs	r0, r3, #1
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6859      	ldr	r1, [r3, #4]
 8004df4:	460b      	mov	r3, r1
 8004df6:	005b      	lsls	r3, r3, #1
 8004df8:	440b      	add	r3, r1
 8004dfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dfe:	3301      	adds	r3, #1
 8004e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	bf0c      	ite	eq
 8004e08:	2301      	moveq	r3, #1
 8004e0a:	2300      	movne	r3, #0
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	e012      	b.n	8004e36 <HAL_I2C_Init+0x18e>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	1e58      	subs	r0, r3, #1
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6859      	ldr	r1, [r3, #4]
 8004e18:	460b      	mov	r3, r1
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	440b      	add	r3, r1
 8004e1e:	0099      	lsls	r1, r3, #2
 8004e20:	440b      	add	r3, r1
 8004e22:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e26:	3301      	adds	r3, #1
 8004e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	bf0c      	ite	eq
 8004e30:	2301      	moveq	r3, #1
 8004e32:	2300      	movne	r3, #0
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <HAL_I2C_Init+0x196>
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e022      	b.n	8004e84 <HAL_I2C_Init+0x1dc>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10e      	bne.n	8004e64 <HAL_I2C_Init+0x1bc>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	1e58      	subs	r0, r3, #1
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6859      	ldr	r1, [r3, #4]
 8004e4e:	460b      	mov	r3, r1
 8004e50:	005b      	lsls	r3, r3, #1
 8004e52:	440b      	add	r3, r1
 8004e54:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e58:	3301      	adds	r3, #1
 8004e5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e62:	e00f      	b.n	8004e84 <HAL_I2C_Init+0x1dc>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	1e58      	subs	r0, r3, #1
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6859      	ldr	r1, [r3, #4]
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	440b      	add	r3, r1
 8004e72:	0099      	lsls	r1, r3, #2
 8004e74:	440b      	add	r3, r1
 8004e76:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e84:	6879      	ldr	r1, [r7, #4]
 8004e86:	6809      	ldr	r1, [r1, #0]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	69da      	ldr	r2, [r3, #28]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004eb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	6911      	ldr	r1, [r2, #16]
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	68d2      	ldr	r2, [r2, #12]
 8004ebe:	4311      	orrs	r1, r2
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	6812      	ldr	r2, [r2, #0]
 8004ec4:	430b      	orrs	r3, r1
 8004ec6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	695a      	ldr	r2, [r3, #20]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	431a      	orrs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f042 0201 	orr.w	r2, r2, #1
 8004ef2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2220      	movs	r2, #32
 8004efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	000186a0 	.word	0x000186a0
 8004f20:	001e847f 	.word	0x001e847f
 8004f24:	003d08ff 	.word	0x003d08ff
 8004f28:	431bde83 	.word	0x431bde83
 8004f2c:	10624dd3 	.word	0x10624dd3

08004f30 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b088      	sub	sp, #32
 8004f34:	af02      	add	r7, sp, #8
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	4608      	mov	r0, r1
 8004f3a:	4611      	mov	r1, r2
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	4603      	mov	r3, r0
 8004f40:	817b      	strh	r3, [r7, #10]
 8004f42:	460b      	mov	r3, r1
 8004f44:	813b      	strh	r3, [r7, #8]
 8004f46:	4613      	mov	r3, r2
 8004f48:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f4a:	f7fe ff99 	bl	8003e80 <HAL_GetTick>
 8004f4e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b20      	cmp	r3, #32
 8004f5a:	f040 80d9 	bne.w	8005110 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	2319      	movs	r3, #25
 8004f64:	2201      	movs	r2, #1
 8004f66:	496d      	ldr	r1, [pc, #436]	; (800511c <HAL_I2C_Mem_Write+0x1ec>)
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f002 fccd 	bl	8007908 <I2C_WaitOnFlagUntilTimeout>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d001      	beq.n	8004f78 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004f74:	2302      	movs	r3, #2
 8004f76:	e0cc      	b.n	8005112 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d101      	bne.n	8004f86 <HAL_I2C_Mem_Write+0x56>
 8004f82:	2302      	movs	r3, #2
 8004f84:	e0c5      	b.n	8005112 <HAL_I2C_Mem_Write+0x1e2>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d007      	beq.n	8004fac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f042 0201 	orr.w	r2, r2, #1
 8004faa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2221      	movs	r2, #33	; 0x21
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2240      	movs	r2, #64	; 0x40
 8004fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6a3a      	ldr	r2, [r7, #32]
 8004fd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004fdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	4a4d      	ldr	r2, [pc, #308]	; (8005120 <HAL_I2C_Mem_Write+0x1f0>)
 8004fec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004fee:	88f8      	ldrh	r0, [r7, #6]
 8004ff0:	893a      	ldrh	r2, [r7, #8]
 8004ff2:	8979      	ldrh	r1, [r7, #10]
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	9301      	str	r3, [sp, #4]
 8004ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f002 f94a 	bl	8007298 <I2C_RequestMemoryWrite>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d052      	beq.n	80050b0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e081      	b.n	8005112 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f002 fd4e 	bl	8007ab4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00d      	beq.n	800503a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005022:	2b04      	cmp	r3, #4
 8005024:	d107      	bne.n	8005036 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005034:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e06b      	b.n	8005112 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503e:	781a      	ldrb	r2, [r3, #0]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504a:	1c5a      	adds	r2, r3, #1
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005054:	3b01      	subs	r3, #1
 8005056:	b29a      	uxth	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005060:	b29b      	uxth	r3, r3
 8005062:	3b01      	subs	r3, #1
 8005064:	b29a      	uxth	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	f003 0304 	and.w	r3, r3, #4
 8005074:	2b04      	cmp	r3, #4
 8005076:	d11b      	bne.n	80050b0 <HAL_I2C_Mem_Write+0x180>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800507c:	2b00      	cmp	r3, #0
 800507e:	d017      	beq.n	80050b0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	781a      	ldrb	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	1c5a      	adds	r2, r3, #1
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800509a:	3b01      	subs	r3, #1
 800509c:	b29a      	uxth	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	3b01      	subs	r3, #1
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1aa      	bne.n	800500e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f002 fd3a 	bl	8007b36 <I2C_WaitOnBTFFlagUntilTimeout>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00d      	beq.n	80050e4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050cc:	2b04      	cmp	r3, #4
 80050ce:	d107      	bne.n	80050e0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e016      	b.n	8005112 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800510c:	2300      	movs	r3, #0
 800510e:	e000      	b.n	8005112 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005110:	2302      	movs	r3, #2
  }
}
 8005112:	4618      	mov	r0, r3
 8005114:	3718      	adds	r7, #24
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	00100002 	.word	0x00100002
 8005120:	ffff0000 	.word	0xffff0000

08005124 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b08c      	sub	sp, #48	; 0x30
 8005128:	af02      	add	r7, sp, #8
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	4608      	mov	r0, r1
 800512e:	4611      	mov	r1, r2
 8005130:	461a      	mov	r2, r3
 8005132:	4603      	mov	r3, r0
 8005134:	817b      	strh	r3, [r7, #10]
 8005136:	460b      	mov	r3, r1
 8005138:	813b      	strh	r3, [r7, #8]
 800513a:	4613      	mov	r3, r2
 800513c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800513e:	f7fe fe9f 	bl	8003e80 <HAL_GetTick>
 8005142:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b20      	cmp	r3, #32
 800514e:	f040 8208 	bne.w	8005562 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	2319      	movs	r3, #25
 8005158:	2201      	movs	r2, #1
 800515a:	497b      	ldr	r1, [pc, #492]	; (8005348 <HAL_I2C_Mem_Read+0x224>)
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f002 fbd3 	bl	8007908 <I2C_WaitOnFlagUntilTimeout>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d001      	beq.n	800516c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005168:	2302      	movs	r3, #2
 800516a:	e1fb      	b.n	8005564 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005172:	2b01      	cmp	r3, #1
 8005174:	d101      	bne.n	800517a <HAL_I2C_Mem_Read+0x56>
 8005176:	2302      	movs	r3, #2
 8005178:	e1f4      	b.n	8005564 <HAL_I2C_Mem_Read+0x440>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	2b01      	cmp	r3, #1
 800518e:	d007      	beq.n	80051a0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f042 0201 	orr.w	r2, r2, #1
 800519e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2222      	movs	r2, #34	; 0x22
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2240      	movs	r2, #64	; 0x40
 80051bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80051d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4a5b      	ldr	r2, [pc, #364]	; (800534c <HAL_I2C_Mem_Read+0x228>)
 80051e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051e2:	88f8      	ldrh	r0, [r7, #6]
 80051e4:	893a      	ldrh	r2, [r7, #8]
 80051e6:	8979      	ldrh	r1, [r7, #10]
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	9301      	str	r3, [sp, #4]
 80051ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	4603      	mov	r3, r0
 80051f2:	68f8      	ldr	r0, [r7, #12]
 80051f4:	f002 f8e6 	bl	80073c4 <I2C_RequestMemoryRead>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e1b0      	b.n	8005564 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005206:	2b00      	cmp	r3, #0
 8005208:	d113      	bne.n	8005232 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800520a:	2300      	movs	r3, #0
 800520c:	623b      	str	r3, [r7, #32]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	623b      	str	r3, [r7, #32]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	623b      	str	r3, [r7, #32]
 800521e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800522e:	601a      	str	r2, [r3, #0]
 8005230:	e184      	b.n	800553c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005236:	2b01      	cmp	r3, #1
 8005238:	d11b      	bne.n	8005272 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005248:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800524a:	2300      	movs	r3, #0
 800524c:	61fb      	str	r3, [r7, #28]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	61fb      	str	r3, [r7, #28]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	61fb      	str	r3, [r7, #28]
 800525e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800526e:	601a      	str	r2, [r3, #0]
 8005270:	e164      	b.n	800553c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005276:	2b02      	cmp	r3, #2
 8005278:	d11b      	bne.n	80052b2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005288:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005298:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800529a:	2300      	movs	r3, #0
 800529c:	61bb      	str	r3, [r7, #24]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	61bb      	str	r3, [r7, #24]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	61bb      	str	r3, [r7, #24]
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	e144      	b.n	800553c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052b2:	2300      	movs	r3, #0
 80052b4:	617b      	str	r3, [r7, #20]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	617b      	str	r3, [r7, #20]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	617b      	str	r3, [r7, #20]
 80052c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80052c8:	e138      	b.n	800553c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ce:	2b03      	cmp	r3, #3
 80052d0:	f200 80f1 	bhi.w	80054b6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d123      	bne.n	8005324 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f002 fc9b 	bl	8007c1c <I2C_WaitOnRXNEFlagUntilTimeout>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d001      	beq.n	80052f0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e139      	b.n	8005564 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	691a      	ldr	r2, [r3, #16]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fa:	b2d2      	uxtb	r2, r2
 80052fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005302:	1c5a      	adds	r2, r3, #1
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800530c:	3b01      	subs	r3, #1
 800530e:	b29a      	uxth	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005318:	b29b      	uxth	r3, r3
 800531a:	3b01      	subs	r3, #1
 800531c:	b29a      	uxth	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005322:	e10b      	b.n	800553c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005328:	2b02      	cmp	r3, #2
 800532a:	d14e      	bne.n	80053ca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	9300      	str	r3, [sp, #0]
 8005330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005332:	2200      	movs	r2, #0
 8005334:	4906      	ldr	r1, [pc, #24]	; (8005350 <HAL_I2C_Mem_Read+0x22c>)
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f002 fae6 	bl	8007908 <I2C_WaitOnFlagUntilTimeout>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d008      	beq.n	8005354 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e10e      	b.n	8005564 <HAL_I2C_Mem_Read+0x440>
 8005346:	bf00      	nop
 8005348:	00100002 	.word	0x00100002
 800534c:	ffff0000 	.word	0xffff0000
 8005350:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005362:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	691a      	ldr	r2, [r3, #16]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	b2d2      	uxtb	r2, r2
 8005370:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005376:	1c5a      	adds	r2, r3, #1
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005380:	3b01      	subs	r3, #1
 8005382:	b29a      	uxth	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800538c:	b29b      	uxth	r3, r3
 800538e:	3b01      	subs	r3, #1
 8005390:	b29a      	uxth	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	691a      	ldr	r2, [r3, #16]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a0:	b2d2      	uxtb	r2, r2
 80053a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a8:	1c5a      	adds	r2, r3, #1
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053b2:	3b01      	subs	r3, #1
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053be:	b29b      	uxth	r3, r3
 80053c0:	3b01      	subs	r3, #1
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80053c8:	e0b8      	b.n	800553c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d0:	2200      	movs	r2, #0
 80053d2:	4966      	ldr	r1, [pc, #408]	; (800556c <HAL_I2C_Mem_Read+0x448>)
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f002 fa97 	bl	8007908 <I2C_WaitOnFlagUntilTimeout>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d001      	beq.n	80053e4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e0bf      	b.n	8005564 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	691a      	ldr	r2, [r3, #16]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fe:	b2d2      	uxtb	r2, r2
 8005400:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005406:	1c5a      	adds	r2, r3, #1
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005410:	3b01      	subs	r3, #1
 8005412:	b29a      	uxth	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800541c:	b29b      	uxth	r3, r3
 800541e:	3b01      	subs	r3, #1
 8005420:	b29a      	uxth	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005428:	9300      	str	r3, [sp, #0]
 800542a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542c:	2200      	movs	r2, #0
 800542e:	494f      	ldr	r1, [pc, #316]	; (800556c <HAL_I2C_Mem_Read+0x448>)
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	f002 fa69 	bl	8007908 <I2C_WaitOnFlagUntilTimeout>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d001      	beq.n	8005440 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e091      	b.n	8005564 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800544e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	691a      	ldr	r2, [r3, #16]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545a:	b2d2      	uxtb	r2, r2
 800545c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005462:	1c5a      	adds	r2, r3, #1
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800546c:	3b01      	subs	r3, #1
 800546e:	b29a      	uxth	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005478:	b29b      	uxth	r3, r3
 800547a:	3b01      	subs	r3, #1
 800547c:	b29a      	uxth	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	691a      	ldr	r2, [r3, #16]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548c:	b2d2      	uxtb	r2, r2
 800548e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005494:	1c5a      	adds	r2, r3, #1
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800549e:	3b01      	subs	r3, #1
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	3b01      	subs	r3, #1
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80054b4:	e042      	b.n	800553c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f002 fbae 	bl	8007c1c <I2C_WaitOnRXNEFlagUntilTimeout>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d001      	beq.n	80054ca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e04c      	b.n	8005564 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	691a      	ldr	r2, [r3, #16]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d4:	b2d2      	uxtb	r2, r2
 80054d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054dc:	1c5a      	adds	r2, r3, #1
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e6:	3b01      	subs	r3, #1
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	3b01      	subs	r3, #1
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	f003 0304 	and.w	r3, r3, #4
 8005506:	2b04      	cmp	r3, #4
 8005508:	d118      	bne.n	800553c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	691a      	ldr	r2, [r3, #16]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005514:	b2d2      	uxtb	r2, r2
 8005516:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551c:	1c5a      	adds	r2, r3, #1
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005526:	3b01      	subs	r3, #1
 8005528:	b29a      	uxth	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005532:	b29b      	uxth	r3, r3
 8005534:	3b01      	subs	r3, #1
 8005536:	b29a      	uxth	r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005540:	2b00      	cmp	r3, #0
 8005542:	f47f aec2 	bne.w	80052ca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2220      	movs	r2, #32
 800554a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800555e:	2300      	movs	r3, #0
 8005560:	e000      	b.n	8005564 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005562:	2302      	movs	r3, #2
  }
}
 8005564:	4618      	mov	r0, r3
 8005566:	3728      	adds	r7, #40	; 0x28
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	00010004 	.word	0x00010004

08005570 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b08c      	sub	sp, #48	; 0x30
 8005574:	af02      	add	r7, sp, #8
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	4608      	mov	r0, r1
 800557a:	4611      	mov	r1, r2
 800557c:	461a      	mov	r2, r3
 800557e:	4603      	mov	r3, r0
 8005580:	817b      	strh	r3, [r7, #10]
 8005582:	460b      	mov	r3, r1
 8005584:	813b      	strh	r3, [r7, #8]
 8005586:	4613      	mov	r3, r2
 8005588:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800558a:	f7fe fc79 	bl	8003e80 <HAL_GetTick>
 800558e:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8005590:	2300      	movs	r3, #0
 8005592:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b20      	cmp	r3, #32
 800559e:	f040 8176 	bne.w	800588e <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80055a2:	4b95      	ldr	r3, [pc, #596]	; (80057f8 <HAL_I2C_Mem_Read_DMA+0x288>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	08db      	lsrs	r3, r3, #3
 80055a8:	4a94      	ldr	r2, [pc, #592]	; (80057fc <HAL_I2C_Mem_Read_DMA+0x28c>)
 80055aa:	fba2 2303 	umull	r2, r3, r2, r3
 80055ae:	0a1a      	lsrs	r2, r3, #8
 80055b0:	4613      	mov	r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4413      	add	r3, r2
 80055b6:	009a      	lsls	r2, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	3b01      	subs	r3, #1
 80055c0:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d116      	bne.n	80055f6 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2220      	movs	r2, #32
 80055d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e2:	f043 0220 	orr.w	r2, r3, #32
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e14c      	b.n	8005890 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	f003 0302 	and.w	r3, r3, #2
 8005600:	2b02      	cmp	r3, #2
 8005602:	d0db      	beq.n	80055bc <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800560a:	2b01      	cmp	r3, #1
 800560c:	d101      	bne.n	8005612 <HAL_I2C_Mem_Read_DMA+0xa2>
 800560e:	2302      	movs	r3, #2
 8005610:	e13e      	b.n	8005890 <HAL_I2C_Mem_Read_DMA+0x320>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	2b01      	cmp	r3, #1
 8005626:	d007      	beq.n	8005638 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f042 0201 	orr.w	r2, r2, #1
 8005636:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005646:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2222      	movs	r2, #34	; 0x22
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2240      	movs	r2, #64	; 0x40
 8005654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005662:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005668:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800566e:	b29a      	uxth	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4a62      	ldr	r2, [pc, #392]	; (8005800 <HAL_I2C_Mem_Read_DMA+0x290>)
 8005678:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800567a:	897a      	ldrh	r2, [r7, #10]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8005680:	893a      	ldrh	r2, [r7, #8]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8005686:	88fa      	ldrh	r2, [r7, #6]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 80cc 	beq.w	8005834 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d02d      	beq.n	8005700 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a8:	4a56      	ldr	r2, [pc, #344]	; (8005804 <HAL_I2C_Mem_Read_DMA+0x294>)
 80056aa:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b0:	4a55      	ldr	r2, [pc, #340]	; (8005808 <HAL_I2C_Mem_Read_DMA+0x298>)
 80056b2:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b8:	2200      	movs	r2, #0
 80056ba:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c0:	2200      	movs	r2, #0
 80056c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c8:	2200      	movs	r2, #0
 80056ca:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d0:	2200      	movs	r2, #0
 80056d2:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	3310      	adds	r3, #16
 80056de:	4619      	mov	r1, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e4:	461a      	mov	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ea:	f7fe fdb9 	bl	8004260 <HAL_DMA_Start_IT>
 80056ee:	4603      	mov	r3, r0
 80056f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80056f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f040 8087 	bne.w	800580c <HAL_I2C_Mem_Read_DMA+0x29c>
 80056fe:	e013      	b.n	8005728 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2220      	movs	r2, #32
 8005704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005714:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e0b3      	b.n	8005890 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005728:	88f8      	ldrh	r0, [r7, #6]
 800572a:	893a      	ldrh	r2, [r7, #8]
 800572c:	8979      	ldrh	r1, [r7, #10]
 800572e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005730:	9301      	str	r3, [sp, #4]
 8005732:	2323      	movs	r3, #35	; 0x23
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	4603      	mov	r3, r0
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f001 fe43 	bl	80073c4 <I2C_RequestMemoryRead>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d023      	beq.n	800578c <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005748:	4618      	mov	r0, r3
 800574a:	f7fe fe51 	bl	80043f0 <HAL_DMA_Abort_IT>
 800574e:	4603      	mov	r3, r0
 8005750:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005758:	2200      	movs	r2, #0
 800575a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800576a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 0201 	bic.w	r2, r2, #1
 8005786:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e081      	b.n	8005890 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005790:	2b01      	cmp	r3, #1
 8005792:	d108      	bne.n	80057a6 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057a2:	601a      	str	r2, [r3, #0]
 80057a4:	e007      	b.n	80057b6 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80057b4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057b6:	2300      	movs	r3, #0
 80057b8:	61bb      	str	r3, [r7, #24]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	695b      	ldr	r3, [r3, #20]
 80057c0:	61bb      	str	r3, [r7, #24]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	61bb      	str	r3, [r7, #24]
 80057ca:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057e2:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685a      	ldr	r2, [r3, #4]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057f2:	605a      	str	r2, [r3, #4]
 80057f4:	e049      	b.n	800588a <HAL_I2C_Mem_Read_DMA+0x31a>
 80057f6:	bf00      	nop
 80057f8:	20000108 	.word	0x20000108
 80057fc:	14f8b589 	.word	0x14f8b589
 8005800:	ffff0000 	.word	0xffff0000
 8005804:	08007595 	.word	0x08007595
 8005808:	0800773f 	.word	0x0800773f
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2220      	movs	r2, #32
 8005810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005820:	f043 0210 	orr.w	r2, r3, #16
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e02d      	b.n	8005890 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005834:	88f8      	ldrh	r0, [r7, #6]
 8005836:	893a      	ldrh	r2, [r7, #8]
 8005838:	8979      	ldrh	r1, [r7, #10]
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	9301      	str	r3, [sp, #4]
 800583e:	2323      	movs	r3, #35	; 0x23
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	4603      	mov	r3, r0
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f001 fdbd 	bl	80073c4 <I2C_RequestMemoryRead>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d001      	beq.n	8005854 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e01d      	b.n	8005890 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005854:	2300      	movs	r3, #0
 8005856:	617b      	str	r3, [r7, #20]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	617b      	str	r3, [r7, #20]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	617b      	str	r3, [r7, #20]
 8005868:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005878:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2220      	movs	r2, #32
 800587e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 800588a:	2300      	movs	r3, #0
 800588c:	e000      	b.n	8005890 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 800588e:	2302      	movs	r3, #2
  }
}
 8005890:	4618      	mov	r0, r3
 8005892:	3728      	adds	r7, #40	; 0x28
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b08a      	sub	sp, #40	; 0x28
 800589c:	af02      	add	r7, sp, #8
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	607a      	str	r2, [r7, #4]
 80058a2:	603b      	str	r3, [r7, #0]
 80058a4:	460b      	mov	r3, r1
 80058a6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80058a8:	f7fe faea 	bl	8003e80 <HAL_GetTick>
 80058ac:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80058ae:	2301      	movs	r3, #1
 80058b0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b20      	cmp	r3, #32
 80058bc:	f040 8111 	bne.w	8005ae2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	9300      	str	r3, [sp, #0]
 80058c4:	2319      	movs	r3, #25
 80058c6:	2201      	movs	r2, #1
 80058c8:	4988      	ldr	r1, [pc, #544]	; (8005aec <HAL_I2C_IsDeviceReady+0x254>)
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f002 f81c 	bl	8007908 <I2C_WaitOnFlagUntilTimeout>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80058d6:	2302      	movs	r3, #2
 80058d8:	e104      	b.n	8005ae4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d101      	bne.n	80058e8 <HAL_I2C_IsDeviceReady+0x50>
 80058e4:	2302      	movs	r3, #2
 80058e6:	e0fd      	b.n	8005ae4 <HAL_I2C_IsDeviceReady+0x24c>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d007      	beq.n	800590e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f042 0201 	orr.w	r2, r2, #1
 800590c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800591c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2224      	movs	r2, #36	; 0x24
 8005922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4a70      	ldr	r2, [pc, #448]	; (8005af0 <HAL_I2C_IsDeviceReady+0x258>)
 8005930:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005940:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	2200      	movs	r2, #0
 800594a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f001 ffda 	bl	8007908 <I2C_WaitOnFlagUntilTimeout>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00d      	beq.n	8005976 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005964:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005968:	d103      	bne.n	8005972 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005970:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e0b6      	b.n	8005ae4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005976:	897b      	ldrh	r3, [r7, #10]
 8005978:	b2db      	uxtb	r3, r3
 800597a:	461a      	mov	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005984:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005986:	f7fe fa7b 	bl	8003e80 <HAL_GetTick>
 800598a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	f003 0302 	and.w	r3, r3, #2
 8005996:	2b02      	cmp	r3, #2
 8005998:	bf0c      	ite	eq
 800599a:	2301      	moveq	r3, #1
 800599c:	2300      	movne	r3, #0
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059b0:	bf0c      	ite	eq
 80059b2:	2301      	moveq	r3, #1
 80059b4:	2300      	movne	r3, #0
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80059ba:	e025      	b.n	8005a08 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80059bc:	f7fe fa60 	bl	8003e80 <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	683a      	ldr	r2, [r7, #0]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d302      	bcc.n	80059d2 <HAL_I2C_IsDeviceReady+0x13a>
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d103      	bne.n	80059da <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	22a0      	movs	r2, #160	; 0xa0
 80059d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	f003 0302 	and.w	r3, r3, #2
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	bf0c      	ite	eq
 80059e8:	2301      	moveq	r3, #1
 80059ea:	2300      	movne	r3, #0
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059fe:	bf0c      	ite	eq
 8005a00:	2301      	moveq	r3, #1
 8005a02:	2300      	movne	r3, #0
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	2ba0      	cmp	r3, #160	; 0xa0
 8005a12:	d005      	beq.n	8005a20 <HAL_I2C_IsDeviceReady+0x188>
 8005a14:	7dfb      	ldrb	r3, [r7, #23]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d102      	bne.n	8005a20 <HAL_I2C_IsDeviceReady+0x188>
 8005a1a:	7dbb      	ldrb	r3, [r7, #22]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d0cd      	beq.n	80059bc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2220      	movs	r2, #32
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d129      	bne.n	8005a8a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a44:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a46:	2300      	movs	r3, #0
 8005a48:	613b      	str	r3, [r7, #16]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	613b      	str	r3, [r7, #16]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	613b      	str	r3, [r7, #16]
 8005a5a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	9300      	str	r3, [sp, #0]
 8005a60:	2319      	movs	r3, #25
 8005a62:	2201      	movs	r2, #1
 8005a64:	4921      	ldr	r1, [pc, #132]	; (8005aec <HAL_I2C_IsDeviceReady+0x254>)
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f001 ff4e 	bl	8007908 <I2C_WaitOnFlagUntilTimeout>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e036      	b.n	8005ae4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2220      	movs	r2, #32
 8005a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005a86:	2300      	movs	r3, #0
 8005a88:	e02c      	b.n	8005ae4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a98:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005aa2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	9300      	str	r3, [sp, #0]
 8005aa8:	2319      	movs	r3, #25
 8005aaa:	2201      	movs	r2, #1
 8005aac:	490f      	ldr	r1, [pc, #60]	; (8005aec <HAL_I2C_IsDeviceReady+0x254>)
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f001 ff2a 	bl	8007908 <I2C_WaitOnFlagUntilTimeout>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e012      	b.n	8005ae4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005ac4:	69ba      	ldr	r2, [r7, #24]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	f4ff af32 	bcc.w	8005932 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2220      	movs	r2, #32
 8005ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e000      	b.n	8005ae4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005ae2:	2302      	movs	r3, #2
  }
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3720      	adds	r7, #32
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	00100002 	.word	0x00100002
 8005af0:	ffff0000 	.word	0xffff0000

08005af4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b088      	sub	sp, #32
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005afc:	2300      	movs	r3, #0
 8005afe:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b14:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b1c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005b1e:	7bfb      	ldrb	r3, [r7, #15]
 8005b20:	2b10      	cmp	r3, #16
 8005b22:	d003      	beq.n	8005b2c <HAL_I2C_EV_IRQHandler+0x38>
 8005b24:	7bfb      	ldrb	r3, [r7, #15]
 8005b26:	2b40      	cmp	r3, #64	; 0x40
 8005b28:	f040 80c1 	bne.w	8005cae <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d10d      	bne.n	8005b62 <HAL_I2C_EV_IRQHandler+0x6e>
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005b4c:	d003      	beq.n	8005b56 <HAL_I2C_EV_IRQHandler+0x62>
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005b54:	d101      	bne.n	8005b5a <HAL_I2C_EV_IRQHandler+0x66>
 8005b56:	2301      	movs	r3, #1
 8005b58:	e000      	b.n	8005b5c <HAL_I2C_EV_IRQHandler+0x68>
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	f000 8132 	beq.w	8005dc6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00c      	beq.n	8005b86 <HAL_I2C_EV_IRQHandler+0x92>
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	0a5b      	lsrs	r3, r3, #9
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d006      	beq.n	8005b86 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f002 f8d4 	bl	8007d26 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 fd6f 	bl	8006662 <I2C_Master_SB>
 8005b84:	e092      	b.n	8005cac <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	08db      	lsrs	r3, r3, #3
 8005b8a:	f003 0301 	and.w	r3, r3, #1
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d009      	beq.n	8005ba6 <HAL_I2C_EV_IRQHandler+0xb2>
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	0a5b      	lsrs	r3, r3, #9
 8005b96:	f003 0301 	and.w	r3, r3, #1
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 fde5 	bl	800676e <I2C_Master_ADD10>
 8005ba4:	e082      	b.n	8005cac <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	085b      	lsrs	r3, r3, #1
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d009      	beq.n	8005bc6 <HAL_I2C_EV_IRQHandler+0xd2>
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	0a5b      	lsrs	r3, r3, #9
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d003      	beq.n	8005bc6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 fdff 	bl	80067c2 <I2C_Master_ADDR>
 8005bc4:	e072      	b.n	8005cac <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	089b      	lsrs	r3, r3, #2
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d03b      	beq.n	8005c4a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005be0:	f000 80f3 	beq.w	8005dca <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	09db      	lsrs	r3, r3, #7
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00f      	beq.n	8005c10 <HAL_I2C_EV_IRQHandler+0x11c>
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	0a9b      	lsrs	r3, r3, #10
 8005bf4:	f003 0301 	and.w	r3, r3, #1
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d009      	beq.n	8005c10 <HAL_I2C_EV_IRQHandler+0x11c>
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	089b      	lsrs	r3, r3, #2
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d103      	bne.n	8005c10 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 f9e9 	bl	8005fe0 <I2C_MasterTransmit_TXE>
 8005c0e:	e04d      	b.n	8005cac <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	089b      	lsrs	r3, r3, #2
 8005c14:	f003 0301 	and.w	r3, r3, #1
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f000 80d6 	beq.w	8005dca <HAL_I2C_EV_IRQHandler+0x2d6>
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	0a5b      	lsrs	r3, r3, #9
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	f000 80cf 	beq.w	8005dca <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005c2c:	7bbb      	ldrb	r3, [r7, #14]
 8005c2e:	2b21      	cmp	r3, #33	; 0x21
 8005c30:	d103      	bne.n	8005c3a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 fa70 	bl	8006118 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c38:	e0c7      	b.n	8005dca <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005c3a:	7bfb      	ldrb	r3, [r7, #15]
 8005c3c:	2b40      	cmp	r3, #64	; 0x40
 8005c3e:	f040 80c4 	bne.w	8005dca <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 fade 	bl	8006204 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c48:	e0bf      	b.n	8005dca <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c58:	f000 80b7 	beq.w	8005dca <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	099b      	lsrs	r3, r3, #6
 8005c60:	f003 0301 	and.w	r3, r3, #1
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00f      	beq.n	8005c88 <HAL_I2C_EV_IRQHandler+0x194>
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	0a9b      	lsrs	r3, r3, #10
 8005c6c:	f003 0301 	and.w	r3, r3, #1
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d009      	beq.n	8005c88 <HAL_I2C_EV_IRQHandler+0x194>
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	089b      	lsrs	r3, r3, #2
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d103      	bne.n	8005c88 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 fb53 	bl	800632c <I2C_MasterReceive_RXNE>
 8005c86:	e011      	b.n	8005cac <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	089b      	lsrs	r3, r3, #2
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f000 809a 	beq.w	8005dca <HAL_I2C_EV_IRQHandler+0x2d6>
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	0a5b      	lsrs	r3, r3, #9
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f000 8093 	beq.w	8005dca <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 fbf2 	bl	800648e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005caa:	e08e      	b.n	8005dca <HAL_I2C_EV_IRQHandler+0x2d6>
 8005cac:	e08d      	b.n	8005dca <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d004      	beq.n	8005cc0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	695b      	ldr	r3, [r3, #20]
 8005cbc:	61fb      	str	r3, [r7, #28]
 8005cbe:	e007      	b.n	8005cd0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	085b      	lsrs	r3, r3, #1
 8005cd4:	f003 0301 	and.w	r3, r3, #1
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d012      	beq.n	8005d02 <HAL_I2C_EV_IRQHandler+0x20e>
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	0a5b      	lsrs	r3, r3, #9
 8005ce0:	f003 0301 	and.w	r3, r3, #1
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00c      	beq.n	8005d02 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d003      	beq.n	8005cf8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005cf8:	69b9      	ldr	r1, [r7, #24]
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 ffb0 	bl	8006c60 <I2C_Slave_ADDR>
 8005d00:	e066      	b.n	8005dd0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	091b      	lsrs	r3, r3, #4
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d009      	beq.n	8005d22 <HAL_I2C_EV_IRQHandler+0x22e>
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	0a5b      	lsrs	r3, r3, #9
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d003      	beq.n	8005d22 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 ffea 	bl	8006cf4 <I2C_Slave_STOPF>
 8005d20:	e056      	b.n	8005dd0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005d22:	7bbb      	ldrb	r3, [r7, #14]
 8005d24:	2b21      	cmp	r3, #33	; 0x21
 8005d26:	d002      	beq.n	8005d2e <HAL_I2C_EV_IRQHandler+0x23a>
 8005d28:	7bbb      	ldrb	r3, [r7, #14]
 8005d2a:	2b29      	cmp	r3, #41	; 0x29
 8005d2c:	d125      	bne.n	8005d7a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	09db      	lsrs	r3, r3, #7
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00f      	beq.n	8005d5a <HAL_I2C_EV_IRQHandler+0x266>
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	0a9b      	lsrs	r3, r3, #10
 8005d3e:	f003 0301 	and.w	r3, r3, #1
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d009      	beq.n	8005d5a <HAL_I2C_EV_IRQHandler+0x266>
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	089b      	lsrs	r3, r3, #2
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d103      	bne.n	8005d5a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 fec6 	bl	8006ae4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d58:	e039      	b.n	8005dce <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	089b      	lsrs	r3, r3, #2
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d033      	beq.n	8005dce <HAL_I2C_EV_IRQHandler+0x2da>
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	0a5b      	lsrs	r3, r3, #9
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d02d      	beq.n	8005dce <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 fef3 	bl	8006b5e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d78:	e029      	b.n	8005dce <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	099b      	lsrs	r3, r3, #6
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00f      	beq.n	8005da6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	0a9b      	lsrs	r3, r3, #10
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d009      	beq.n	8005da6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	089b      	lsrs	r3, r3, #2
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d103      	bne.n	8005da6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fefe 	bl	8006ba0 <I2C_SlaveReceive_RXNE>
 8005da4:	e014      	b.n	8005dd0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	089b      	lsrs	r3, r3, #2
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00e      	beq.n	8005dd0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	0a5b      	lsrs	r3, r3, #9
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d008      	beq.n	8005dd0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 ff2c 	bl	8006c1c <I2C_SlaveReceive_BTF>
 8005dc4:	e004      	b.n	8005dd0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005dc6:	bf00      	nop
 8005dc8:	e002      	b.n	8005dd0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005dca:	bf00      	nop
 8005dcc:	e000      	b.n	8005dd0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005dce:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005dd0:	3720      	adds	r7, #32
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b08a      	sub	sp, #40	; 0x28
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005dee:	2300      	movs	r3, #0
 8005df0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005df8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005dfa:	6a3b      	ldr	r3, [r7, #32]
 8005dfc:	0a1b      	lsrs	r3, r3, #8
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00e      	beq.n	8005e24 <HAL_I2C_ER_IRQHandler+0x4e>
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	0a1b      	lsrs	r3, r3, #8
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d008      	beq.n	8005e24 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e14:	f043 0301 	orr.w	r3, r3, #1
 8005e18:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005e22:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005e24:	6a3b      	ldr	r3, [r7, #32]
 8005e26:	0a5b      	lsrs	r3, r3, #9
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00e      	beq.n	8005e4e <HAL_I2C_ER_IRQHandler+0x78>
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	0a1b      	lsrs	r3, r3, #8
 8005e34:	f003 0301 	and.w	r3, r3, #1
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d008      	beq.n	8005e4e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	f043 0302 	orr.w	r3, r3, #2
 8005e42:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005e4c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005e4e:	6a3b      	ldr	r3, [r7, #32]
 8005e50:	0a9b      	lsrs	r3, r3, #10
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d03f      	beq.n	8005eda <HAL_I2C_ER_IRQHandler+0x104>
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	0a1b      	lsrs	r3, r3, #8
 8005e5e:	f003 0301 	and.w	r3, r3, #1
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d039      	beq.n	8005eda <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005e66:	7efb      	ldrb	r3, [r7, #27]
 8005e68:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e78:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005e80:	7ebb      	ldrb	r3, [r7, #26]
 8005e82:	2b20      	cmp	r3, #32
 8005e84:	d112      	bne.n	8005eac <HAL_I2C_ER_IRQHandler+0xd6>
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10f      	bne.n	8005eac <HAL_I2C_ER_IRQHandler+0xd6>
 8005e8c:	7cfb      	ldrb	r3, [r7, #19]
 8005e8e:	2b21      	cmp	r3, #33	; 0x21
 8005e90:	d008      	beq.n	8005ea4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005e92:	7cfb      	ldrb	r3, [r7, #19]
 8005e94:	2b29      	cmp	r3, #41	; 0x29
 8005e96:	d005      	beq.n	8005ea4 <HAL_I2C_ER_IRQHandler+0xce>
 8005e98:	7cfb      	ldrb	r3, [r7, #19]
 8005e9a:	2b28      	cmp	r3, #40	; 0x28
 8005e9c:	d106      	bne.n	8005eac <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2b21      	cmp	r3, #33	; 0x21
 8005ea2:	d103      	bne.n	8005eac <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f001 f855 	bl	8006f54 <I2C_Slave_AF>
 8005eaa:	e016      	b.n	8005eda <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005eb4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb8:	f043 0304 	orr.w	r3, r3, #4
 8005ebc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005ebe:	7efb      	ldrb	r3, [r7, #27]
 8005ec0:	2b10      	cmp	r3, #16
 8005ec2:	d002      	beq.n	8005eca <HAL_I2C_ER_IRQHandler+0xf4>
 8005ec4:	7efb      	ldrb	r3, [r7, #27]
 8005ec6:	2b40      	cmp	r3, #64	; 0x40
 8005ec8:	d107      	bne.n	8005eda <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ed8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	0adb      	lsrs	r3, r3, #11
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00e      	beq.n	8005f04 <HAL_I2C_ER_IRQHandler+0x12e>
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	0a1b      	lsrs	r3, r3, #8
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d008      	beq.n	8005f04 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	f043 0308 	orr.w	r3, r3, #8
 8005ef8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005f02:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d008      	beq.n	8005f1c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	431a      	orrs	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f001 f88c 	bl	8007034 <I2C_ITError>
  }
}
 8005f1c:	bf00      	nop
 8005f1e:	3728      	adds	r7, #40	; 0x28
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005f2c:	bf00      	nop
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	70fb      	strb	r3, [r7, #3]
 8005f80:	4613      	mov	r3, r2
 8005f82:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fee:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ff6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006002:	2b00      	cmp	r3, #0
 8006004:	d150      	bne.n	80060a8 <I2C_MasterTransmit_TXE+0xc8>
 8006006:	7bfb      	ldrb	r3, [r7, #15]
 8006008:	2b21      	cmp	r3, #33	; 0x21
 800600a:	d14d      	bne.n	80060a8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	2b08      	cmp	r3, #8
 8006010:	d01d      	beq.n	800604e <I2C_MasterTransmit_TXE+0x6e>
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2b20      	cmp	r3, #32
 8006016:	d01a      	beq.n	800604e <I2C_MasterTransmit_TXE+0x6e>
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800601e:	d016      	beq.n	800604e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685a      	ldr	r2, [r3, #4]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800602e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2211      	movs	r2, #17
 8006034:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2220      	movs	r2, #32
 8006042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7ff ff6c 	bl	8005f24 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800604c:	e060      	b.n	8006110 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	685a      	ldr	r2, [r3, #4]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800605c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800606c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2220      	movs	r2, #32
 8006078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006082:	b2db      	uxtb	r3, r3
 8006084:	2b40      	cmp	r3, #64	; 0x40
 8006086:	d107      	bne.n	8006098 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f7ff ff87 	bl	8005fa4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006096:	e03b      	b.n	8006110 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f7ff ff3f 	bl	8005f24 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80060a6:	e033      	b.n	8006110 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80060a8:	7bfb      	ldrb	r3, [r7, #15]
 80060aa:	2b21      	cmp	r3, #33	; 0x21
 80060ac:	d005      	beq.n	80060ba <I2C_MasterTransmit_TXE+0xda>
 80060ae:	7bbb      	ldrb	r3, [r7, #14]
 80060b0:	2b40      	cmp	r3, #64	; 0x40
 80060b2:	d12d      	bne.n	8006110 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80060b4:	7bfb      	ldrb	r3, [r7, #15]
 80060b6:	2b22      	cmp	r3, #34	; 0x22
 80060b8:	d12a      	bne.n	8006110 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060be:	b29b      	uxth	r3, r3
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d108      	bne.n	80060d6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	685a      	ldr	r2, [r3, #4]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060d2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80060d4:	e01c      	b.n	8006110 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	2b40      	cmp	r3, #64	; 0x40
 80060e0:	d103      	bne.n	80060ea <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f88e 	bl	8006204 <I2C_MemoryTransmit_TXE_BTF>
}
 80060e8:	e012      	b.n	8006110 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ee:	781a      	ldrb	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fa:	1c5a      	adds	r2, r3, #1
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006104:	b29b      	uxth	r3, r3
 8006106:	3b01      	subs	r3, #1
 8006108:	b29a      	uxth	r2, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800610e:	e7ff      	b.n	8006110 <I2C_MasterTransmit_TXE+0x130>
 8006110:	bf00      	nop
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006124:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b21      	cmp	r3, #33	; 0x21
 8006130:	d164      	bne.n	80061fc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006136:	b29b      	uxth	r3, r3
 8006138:	2b00      	cmp	r3, #0
 800613a:	d012      	beq.n	8006162 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006140:	781a      	ldrb	r2, [r3, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614c:	1c5a      	adds	r2, r3, #1
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006156:	b29b      	uxth	r3, r3
 8006158:	3b01      	subs	r3, #1
 800615a:	b29a      	uxth	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006160:	e04c      	b.n	80061fc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2b08      	cmp	r3, #8
 8006166:	d01d      	beq.n	80061a4 <I2C_MasterTransmit_BTF+0x8c>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2b20      	cmp	r3, #32
 800616c:	d01a      	beq.n	80061a4 <I2C_MasterTransmit_BTF+0x8c>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006174:	d016      	beq.n	80061a4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	685a      	ldr	r2, [r3, #4]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006184:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2211      	movs	r2, #17
 800618a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2220      	movs	r2, #32
 8006198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f7ff fec1 	bl	8005f24 <HAL_I2C_MasterTxCpltCallback>
}
 80061a2:	e02b      	b.n	80061fc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80061b2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061c2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2220      	movs	r2, #32
 80061ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b40      	cmp	r3, #64	; 0x40
 80061dc:	d107      	bne.n	80061ee <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f7ff fedc 	bl	8005fa4 <HAL_I2C_MemTxCpltCallback>
}
 80061ec:	e006      	b.n	80061fc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f7ff fe94 	bl	8005f24 <HAL_I2C_MasterTxCpltCallback>
}
 80061fc:	bf00      	nop
 80061fe:	3710      	adds	r7, #16
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006212:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006218:	2b00      	cmp	r3, #0
 800621a:	d11d      	bne.n	8006258 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006220:	2b01      	cmp	r3, #1
 8006222:	d10b      	bne.n	800623c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006228:	b2da      	uxtb	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006234:	1c9a      	adds	r2, r3, #2
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800623a:	e073      	b.n	8006324 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006240:	b29b      	uxth	r3, r3
 8006242:	121b      	asrs	r3, r3, #8
 8006244:	b2da      	uxtb	r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006250:	1c5a      	adds	r2, r3, #1
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006256:	e065      	b.n	8006324 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800625c:	2b01      	cmp	r3, #1
 800625e:	d10b      	bne.n	8006278 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006264:	b2da      	uxtb	r2, r3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006270:	1c5a      	adds	r2, r3, #1
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006276:	e055      	b.n	8006324 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800627c:	2b02      	cmp	r3, #2
 800627e:	d151      	bne.n	8006324 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006280:	7bfb      	ldrb	r3, [r7, #15]
 8006282:	2b22      	cmp	r3, #34	; 0x22
 8006284:	d10d      	bne.n	80062a2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006294:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800629a:	1c5a      	adds	r2, r3, #1
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	651a      	str	r2, [r3, #80]	; 0x50
}
 80062a0:	e040      	b.n	8006324 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d015      	beq.n	80062d8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80062ac:	7bfb      	ldrb	r3, [r7, #15]
 80062ae:	2b21      	cmp	r3, #33	; 0x21
 80062b0:	d112      	bne.n	80062d8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b6:	781a      	ldrb	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c2:	1c5a      	adds	r2, r3, #1
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	3b01      	subs	r3, #1
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80062d6:	e025      	b.n	8006324 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062dc:	b29b      	uxth	r3, r3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d120      	bne.n	8006324 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80062e2:	7bfb      	ldrb	r3, [r7, #15]
 80062e4:	2b21      	cmp	r3, #33	; 0x21
 80062e6:	d11d      	bne.n	8006324 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	685a      	ldr	r2, [r3, #4]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80062f6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006306:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2220      	movs	r2, #32
 8006312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f7ff fe40 	bl	8005fa4 <HAL_I2C_MemTxCpltCallback>
}
 8006324:	bf00      	nop
 8006326:	3710      	adds	r7, #16
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800633a:	b2db      	uxtb	r3, r3
 800633c:	2b22      	cmp	r3, #34	; 0x22
 800633e:	f040 80a2 	bne.w	8006486 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006346:	b29b      	uxth	r3, r3
 8006348:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2b03      	cmp	r3, #3
 800634e:	d921      	bls.n	8006394 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	691a      	ldr	r2, [r3, #16]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635a:	b2d2      	uxtb	r2, r2
 800635c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006362:	1c5a      	adds	r2, r3, #1
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800636c:	b29b      	uxth	r3, r3
 800636e:	3b01      	subs	r3, #1
 8006370:	b29a      	uxth	r2, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800637a:	b29b      	uxth	r3, r3
 800637c:	2b03      	cmp	r3, #3
 800637e:	f040 8082 	bne.w	8006486 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	685a      	ldr	r2, [r3, #4]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006390:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8006392:	e078      	b.n	8006486 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006398:	2b02      	cmp	r3, #2
 800639a:	d074      	beq.n	8006486 <I2C_MasterReceive_RXNE+0x15a>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d002      	beq.n	80063a8 <I2C_MasterReceive_RXNE+0x7c>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d16e      	bne.n	8006486 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f001 fc05 	bl	8007bb8 <I2C_WaitOnSTOPRequestThroughIT>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d142      	bne.n	800643a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063c2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	685a      	ldr	r2, [r3, #4]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80063d2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	691a      	ldr	r2, [r3, #16]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063de:	b2d2      	uxtb	r2, r2
 80063e0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e6:	1c5a      	adds	r2, r3, #1
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	3b01      	subs	r3, #1
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2220      	movs	r2, #32
 80063fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b40      	cmp	r3, #64	; 0x40
 800640c:	d10a      	bne.n	8006424 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f7fc ffb3 	bl	8003388 <HAL_I2C_MemRxCpltCallback>
}
 8006422:	e030      	b.n	8006486 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2212      	movs	r2, #18
 8006430:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7ff fd80 	bl	8005f38 <HAL_I2C_MasterRxCpltCallback>
}
 8006438:	e025      	b.n	8006486 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	685a      	ldr	r2, [r3, #4]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006448:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	691a      	ldr	r2, [r3, #16]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006454:	b2d2      	uxtb	r2, r2
 8006456:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645c:	1c5a      	adds	r2, r3, #1
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006466:	b29b      	uxth	r3, r3
 8006468:	3b01      	subs	r3, #1
 800646a:	b29a      	uxth	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2220      	movs	r2, #32
 8006474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f7ff fd99 	bl	8005fb8 <HAL_I2C_ErrorCallback>
}
 8006486:	bf00      	nop
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b084      	sub	sp, #16
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	2b04      	cmp	r3, #4
 80064a4:	d11b      	bne.n	80064de <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	685a      	ldr	r2, [r3, #4]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064b4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	691a      	ldr	r2, [r3, #16]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c0:	b2d2      	uxtb	r2, r2
 80064c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c8:	1c5a      	adds	r2, r3, #1
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	3b01      	subs	r3, #1
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80064dc:	e0bd      	b.n	800665a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	2b03      	cmp	r3, #3
 80064e6:	d129      	bne.n	800653c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	685a      	ldr	r2, [r3, #4]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064f6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2b04      	cmp	r3, #4
 80064fc:	d00a      	beq.n	8006514 <I2C_MasterReceive_BTF+0x86>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2b02      	cmp	r3, #2
 8006502:	d007      	beq.n	8006514 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006512:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	691a      	ldr	r2, [r3, #16]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651e:	b2d2      	uxtb	r2, r2
 8006520:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006526:	1c5a      	adds	r2, r3, #1
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006530:	b29b      	uxth	r3, r3
 8006532:	3b01      	subs	r3, #1
 8006534:	b29a      	uxth	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800653a:	e08e      	b.n	800665a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006540:	b29b      	uxth	r3, r3
 8006542:	2b02      	cmp	r3, #2
 8006544:	d176      	bne.n	8006634 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d002      	beq.n	8006552 <I2C_MasterReceive_BTF+0xc4>
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2b10      	cmp	r3, #16
 8006550:	d108      	bne.n	8006564 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006560:	601a      	str	r2, [r3, #0]
 8006562:	e019      	b.n	8006598 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2b04      	cmp	r3, #4
 8006568:	d002      	beq.n	8006570 <I2C_MasterReceive_BTF+0xe2>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2b02      	cmp	r3, #2
 800656e:	d108      	bne.n	8006582 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800657e:	601a      	str	r2, [r3, #0]
 8006580:	e00a      	b.n	8006598 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2b10      	cmp	r3, #16
 8006586:	d007      	beq.n	8006598 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006596:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	691a      	ldr	r2, [r3, #16]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a2:	b2d2      	uxtb	r2, r2
 80065a4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065aa:	1c5a      	adds	r2, r3, #1
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	3b01      	subs	r3, #1
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	691a      	ldr	r2, [r3, #16]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c8:	b2d2      	uxtb	r2, r2
 80065ca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d0:	1c5a      	adds	r2, r3, #1
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065da:	b29b      	uxth	r3, r3
 80065dc:	3b01      	subs	r3, #1
 80065de:	b29a      	uxth	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	685a      	ldr	r2, [r3, #4]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80065f2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2220      	movs	r2, #32
 80065f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006602:	b2db      	uxtb	r3, r3
 8006604:	2b40      	cmp	r3, #64	; 0x40
 8006606:	d10a      	bne.n	800661e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f7fc feb6 	bl	8003388 <HAL_I2C_MemRxCpltCallback>
}
 800661c:	e01d      	b.n	800665a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2212      	movs	r2, #18
 800662a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f7ff fc83 	bl	8005f38 <HAL_I2C_MasterRxCpltCallback>
}
 8006632:	e012      	b.n	800665a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	691a      	ldr	r2, [r3, #16]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663e:	b2d2      	uxtb	r2, r2
 8006640:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006646:	1c5a      	adds	r2, r3, #1
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006650:	b29b      	uxth	r3, r3
 8006652:	3b01      	subs	r3, #1
 8006654:	b29a      	uxth	r2, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800665a:	bf00      	nop
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006662:	b480      	push	{r7}
 8006664:	b083      	sub	sp, #12
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006670:	b2db      	uxtb	r3, r3
 8006672:	2b40      	cmp	r3, #64	; 0x40
 8006674:	d117      	bne.n	80066a6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800667a:	2b00      	cmp	r3, #0
 800667c:	d109      	bne.n	8006692 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006682:	b2db      	uxtb	r3, r3
 8006684:	461a      	mov	r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800668e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006690:	e067      	b.n	8006762 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006696:	b2db      	uxtb	r3, r3
 8006698:	f043 0301 	orr.w	r3, r3, #1
 800669c:	b2da      	uxtb	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	611a      	str	r2, [r3, #16]
}
 80066a4:	e05d      	b.n	8006762 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066ae:	d133      	bne.n	8006718 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	2b21      	cmp	r3, #33	; 0x21
 80066ba:	d109      	bne.n	80066d0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	461a      	mov	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80066cc:	611a      	str	r2, [r3, #16]
 80066ce:	e008      	b.n	80066e2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	f043 0301 	orr.w	r3, r3, #1
 80066da:	b2da      	uxtb	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d004      	beq.n	80066f4 <I2C_Master_SB+0x92>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d108      	bne.n	8006706 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d032      	beq.n	8006762 <I2C_Master_SB+0x100>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006702:	2b00      	cmp	r3, #0
 8006704:	d02d      	beq.n	8006762 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	685a      	ldr	r2, [r3, #4]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006714:	605a      	str	r2, [r3, #4]
}
 8006716:	e024      	b.n	8006762 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10e      	bne.n	800673e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006724:	b29b      	uxth	r3, r3
 8006726:	11db      	asrs	r3, r3, #7
 8006728:	b2db      	uxtb	r3, r3
 800672a:	f003 0306 	and.w	r3, r3, #6
 800672e:	b2db      	uxtb	r3, r3
 8006730:	f063 030f 	orn	r3, r3, #15
 8006734:	b2da      	uxtb	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	611a      	str	r2, [r3, #16]
}
 800673c:	e011      	b.n	8006762 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006742:	2b01      	cmp	r3, #1
 8006744:	d10d      	bne.n	8006762 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800674a:	b29b      	uxth	r3, r3
 800674c:	11db      	asrs	r3, r3, #7
 800674e:	b2db      	uxtb	r3, r3
 8006750:	f003 0306 	and.w	r3, r3, #6
 8006754:	b2db      	uxtb	r3, r3
 8006756:	f063 030e 	orn	r3, r3, #14
 800675a:	b2da      	uxtb	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	611a      	str	r2, [r3, #16]
}
 8006762:	bf00      	nop
 8006764:	370c      	adds	r7, #12
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800676e:	b480      	push	{r7}
 8006770:	b083      	sub	sp, #12
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800677a:	b2da      	uxtb	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006786:	2b00      	cmp	r3, #0
 8006788:	d004      	beq.n	8006794 <I2C_Master_ADD10+0x26>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800678e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006790:	2b00      	cmp	r3, #0
 8006792:	d108      	bne.n	80067a6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00c      	beq.n	80067b6 <I2C_Master_ADD10+0x48>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d007      	beq.n	80067b6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067b4:	605a      	str	r2, [r3, #4]
  }
}
 80067b6:	bf00      	nop
 80067b8:	370c      	adds	r7, #12
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b091      	sub	sp, #68	; 0x44
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067de:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	2b22      	cmp	r3, #34	; 0x22
 80067ea:	f040 8169 	bne.w	8006ac0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10f      	bne.n	8006816 <I2C_Master_ADDR+0x54>
 80067f6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80067fa:	2b40      	cmp	r3, #64	; 0x40
 80067fc:	d10b      	bne.n	8006816 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067fe:	2300      	movs	r3, #0
 8006800:	633b      	str	r3, [r7, #48]	; 0x30
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	695b      	ldr	r3, [r3, #20]
 8006808:	633b      	str	r3, [r7, #48]	; 0x30
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	633b      	str	r3, [r7, #48]	; 0x30
 8006812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006814:	e160      	b.n	8006ad8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800681a:	2b00      	cmp	r3, #0
 800681c:	d11d      	bne.n	800685a <I2C_Master_ADDR+0x98>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006826:	d118      	bne.n	800685a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006828:	2300      	movs	r3, #0
 800682a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800683c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800684c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006852:	1c5a      	adds	r2, r3, #1
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	651a      	str	r2, [r3, #80]	; 0x50
 8006858:	e13e      	b.n	8006ad8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800685e:	b29b      	uxth	r3, r3
 8006860:	2b00      	cmp	r3, #0
 8006862:	d113      	bne.n	800688c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006864:	2300      	movs	r3, #0
 8006866:	62bb      	str	r3, [r7, #40]	; 0x28
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	62bb      	str	r3, [r7, #40]	; 0x28
 8006878:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006888:	601a      	str	r2, [r3, #0]
 800688a:	e115      	b.n	8006ab8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006890:	b29b      	uxth	r3, r3
 8006892:	2b01      	cmp	r3, #1
 8006894:	f040 808a 	bne.w	80069ac <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800689e:	d137      	bne.n	8006910 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068ae:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068be:	d113      	bne.n	80068e8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068ce:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068d0:	2300      	movs	r3, #0
 80068d2:	627b      	str	r3, [r7, #36]	; 0x24
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	627b      	str	r3, [r7, #36]	; 0x24
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	627b      	str	r3, [r7, #36]	; 0x24
 80068e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e6:	e0e7      	b.n	8006ab8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068e8:	2300      	movs	r3, #0
 80068ea:	623b      	str	r3, [r7, #32]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	695b      	ldr	r3, [r3, #20]
 80068f2:	623b      	str	r3, [r7, #32]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	623b      	str	r3, [r7, #32]
 80068fc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800690c:	601a      	str	r2, [r3, #0]
 800690e:	e0d3      	b.n	8006ab8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006912:	2b08      	cmp	r3, #8
 8006914:	d02e      	beq.n	8006974 <I2C_Master_ADDR+0x1b2>
 8006916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006918:	2b20      	cmp	r3, #32
 800691a:	d02b      	beq.n	8006974 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800691c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800691e:	2b12      	cmp	r3, #18
 8006920:	d102      	bne.n	8006928 <I2C_Master_ADDR+0x166>
 8006922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006924:	2b01      	cmp	r3, #1
 8006926:	d125      	bne.n	8006974 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692a:	2b04      	cmp	r3, #4
 800692c:	d00e      	beq.n	800694c <I2C_Master_ADDR+0x18a>
 800692e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006930:	2b02      	cmp	r3, #2
 8006932:	d00b      	beq.n	800694c <I2C_Master_ADDR+0x18a>
 8006934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006936:	2b10      	cmp	r3, #16
 8006938:	d008      	beq.n	800694c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006948:	601a      	str	r2, [r3, #0]
 800694a:	e007      	b.n	800695c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800695a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800695c:	2300      	movs	r3, #0
 800695e:	61fb      	str	r3, [r7, #28]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	61fb      	str	r3, [r7, #28]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	61fb      	str	r3, [r7, #28]
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	e0a1      	b.n	8006ab8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006982:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006984:	2300      	movs	r3, #0
 8006986:	61bb      	str	r3, [r7, #24]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	61bb      	str	r3, [r7, #24]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	61bb      	str	r3, [r7, #24]
 8006998:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069a8:	601a      	str	r2, [r3, #0]
 80069aa:	e085      	b.n	8006ab8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	d14d      	bne.n	8006a52 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80069b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b8:	2b04      	cmp	r3, #4
 80069ba:	d016      	beq.n	80069ea <I2C_Master_ADDR+0x228>
 80069bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d013      	beq.n	80069ea <I2C_Master_ADDR+0x228>
 80069c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c4:	2b10      	cmp	r3, #16
 80069c6:	d010      	beq.n	80069ea <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069d6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069e6:	601a      	str	r2, [r3, #0]
 80069e8:	e007      	b.n	80069fa <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069f8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a08:	d117      	bne.n	8006a3a <I2C_Master_ADDR+0x278>
 8006a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a10:	d00b      	beq.n	8006a2a <I2C_Master_ADDR+0x268>
 8006a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d008      	beq.n	8006a2a <I2C_Master_ADDR+0x268>
 8006a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1a:	2b08      	cmp	r3, #8
 8006a1c:	d005      	beq.n	8006a2a <I2C_Master_ADDR+0x268>
 8006a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a20:	2b10      	cmp	r3, #16
 8006a22:	d002      	beq.n	8006a2a <I2C_Master_ADDR+0x268>
 8006a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a26:	2b20      	cmp	r3, #32
 8006a28:	d107      	bne.n	8006a3a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	685a      	ldr	r2, [r3, #4]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a38:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	617b      	str	r3, [r7, #20]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	695b      	ldr	r3, [r3, #20]
 8006a44:	617b      	str	r3, [r7, #20]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	617b      	str	r3, [r7, #20]
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	e032      	b.n	8006ab8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a60:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a70:	d117      	bne.n	8006aa2 <I2C_Master_ADDR+0x2e0>
 8006a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a78:	d00b      	beq.n	8006a92 <I2C_Master_ADDR+0x2d0>
 8006a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d008      	beq.n	8006a92 <I2C_Master_ADDR+0x2d0>
 8006a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a82:	2b08      	cmp	r3, #8
 8006a84:	d005      	beq.n	8006a92 <I2C_Master_ADDR+0x2d0>
 8006a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a88:	2b10      	cmp	r3, #16
 8006a8a:	d002      	beq.n	8006a92 <I2C_Master_ADDR+0x2d0>
 8006a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8e:	2b20      	cmp	r3, #32
 8006a90:	d107      	bne.n	8006aa2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	685a      	ldr	r2, [r3, #4]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006aa0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	613b      	str	r3, [r7, #16]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	695b      	ldr	r3, [r3, #20]
 8006aac:	613b      	str	r3, [r7, #16]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	613b      	str	r3, [r7, #16]
 8006ab6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006abe:	e00b      	b.n	8006ad8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	60fb      	str	r3, [r7, #12]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	60fb      	str	r3, [r7, #12]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	60fb      	str	r3, [r7, #12]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
}
 8006ad6:	e7ff      	b.n	8006ad8 <I2C_Master_ADDR+0x316>
 8006ad8:	bf00      	nop
 8006ada:	3744      	adds	r7, #68	; 0x44
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006af2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d02b      	beq.n	8006b56 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b02:	781a      	ldrb	r2, [r3, #0]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0e:	1c5a      	adds	r2, r3, #1
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	b29a      	uxth	r2, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d114      	bne.n	8006b56 <I2C_SlaveTransmit_TXE+0x72>
 8006b2c:	7bfb      	ldrb	r3, [r7, #15]
 8006b2e:	2b29      	cmp	r3, #41	; 0x29
 8006b30:	d111      	bne.n	8006b56 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	685a      	ldr	r2, [r3, #4]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b40:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2221      	movs	r2, #33	; 0x21
 8006b46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2228      	movs	r2, #40	; 0x28
 8006b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f7ff f9fb 	bl	8005f4c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006b56:	bf00      	nop
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b083      	sub	sp, #12
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d011      	beq.n	8006b94 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b74:	781a      	ldrb	r2, [r3, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b80:	1c5a      	adds	r2, r3, #1
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006b94:	bf00      	nop
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bae:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d02c      	beq.n	8006c14 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	691a      	ldr	r2, [r3, #16]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc4:	b2d2      	uxtb	r2, r2
 8006bc6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bcc:	1c5a      	adds	r2, r3, #1
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d114      	bne.n	8006c14 <I2C_SlaveReceive_RXNE+0x74>
 8006bea:	7bfb      	ldrb	r3, [r7, #15]
 8006bec:	2b2a      	cmp	r3, #42	; 0x2a
 8006bee:	d111      	bne.n	8006c14 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685a      	ldr	r2, [r3, #4]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bfe:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2222      	movs	r2, #34	; 0x22
 8006c04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2228      	movs	r2, #40	; 0x28
 8006c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7ff f9a6 	bl	8005f60 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006c14:	bf00      	nop
 8006c16:	3710      	adds	r7, #16
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d012      	beq.n	8006c54 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	691a      	ldr	r2, [r3, #16]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c38:	b2d2      	uxtb	r2, r2
 8006c3a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c40:	1c5a      	adds	r2, r3, #1
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006c54:	bf00      	nop
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006c7a:	2b28      	cmp	r3, #40	; 0x28
 8006c7c:	d127      	bne.n	8006cce <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	685a      	ldr	r2, [r3, #4]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c8c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	089b      	lsrs	r3, r3, #2
 8006c92:	f003 0301 	and.w	r3, r3, #1
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d101      	bne.n	8006c9e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	09db      	lsrs	r3, r3, #7
 8006ca2:	f003 0301 	and.w	r3, r3, #1
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d103      	bne.n	8006cb2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	81bb      	strh	r3, [r7, #12]
 8006cb0:	e002      	b.n	8006cb8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006cc0:	89ba      	ldrh	r2, [r7, #12]
 8006cc2:	7bfb      	ldrb	r3, [r7, #15]
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f7ff f954 	bl	8005f74 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006ccc:	e00e      	b.n	8006cec <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cce:	2300      	movs	r3, #0
 8006cd0:	60bb      	str	r3, [r7, #8]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	695b      	ldr	r3, [r3, #20]
 8006cd8:	60bb      	str	r3, [r7, #8]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	699b      	ldr	r3, [r3, #24]
 8006ce0:	60bb      	str	r3, [r7, #8]
 8006ce2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006cec:	bf00      	nop
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d02:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	685a      	ldr	r2, [r3, #4]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d12:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006d14:	2300      	movs	r3, #0
 8006d16:	60bb      	str	r3, [r7, #8]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	695b      	ldr	r3, [r3, #20]
 8006d1e:	60bb      	str	r3, [r7, #8]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f042 0201 	orr.w	r2, r2, #1
 8006d2e:	601a      	str	r2, [r3, #0]
 8006d30:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d40:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d50:	d172      	bne.n	8006e38 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006d52:	7bfb      	ldrb	r3, [r7, #15]
 8006d54:	2b22      	cmp	r3, #34	; 0x22
 8006d56:	d002      	beq.n	8006d5e <I2C_Slave_STOPF+0x6a>
 8006d58:	7bfb      	ldrb	r3, [r7, #15]
 8006d5a:	2b2a      	cmp	r3, #42	; 0x2a
 8006d5c:	d135      	bne.n	8006dca <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d005      	beq.n	8006d82 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7a:	f043 0204 	orr.w	r2, r3, #4
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	685a      	ldr	r2, [r3, #4]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d90:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7fd fcd6 	bl	8004748 <HAL_DMA_GetState>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d049      	beq.n	8006e36 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da6:	4a69      	ldr	r2, [pc, #420]	; (8006f4c <I2C_Slave_STOPF+0x258>)
 8006da8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7fd fb1e 	bl	80043f0 <HAL_DMA_Abort_IT>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d03d      	beq.n	8006e36 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006dc4:	4610      	mov	r0, r2
 8006dc6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006dc8:	e035      	b.n	8006e36 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d005      	beq.n	8006dee <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de6:	f043 0204 	orr.w	r2, r3, #4
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	685a      	ldr	r2, [r3, #4]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006dfc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7fd fca0 	bl	8004748 <HAL_DMA_GetState>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d014      	beq.n	8006e38 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e12:	4a4e      	ldr	r2, [pc, #312]	; (8006f4c <I2C_Slave_STOPF+0x258>)
 8006e14:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7fd fae8 	bl	80043f0 <HAL_DMA_Abort_IT>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d008      	beq.n	8006e38 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006e30:	4610      	mov	r0, r2
 8006e32:	4798      	blx	r3
 8006e34:	e000      	b.n	8006e38 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006e36:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d03e      	beq.n	8006ec0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	695b      	ldr	r3, [r3, #20]
 8006e48:	f003 0304 	and.w	r3, r3, #4
 8006e4c:	2b04      	cmp	r3, #4
 8006e4e:	d112      	bne.n	8006e76 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	691a      	ldr	r2, [r3, #16]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5a:	b2d2      	uxtb	r2, r2
 8006e5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e62:	1c5a      	adds	r2, r3, #1
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	695b      	ldr	r3, [r3, #20]
 8006e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e80:	2b40      	cmp	r3, #64	; 0x40
 8006e82:	d112      	bne.n	8006eaa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	691a      	ldr	r2, [r3, #16]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8e:	b2d2      	uxtb	r2, r2
 8006e90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e96:	1c5a      	adds	r2, r3, #1
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d005      	beq.n	8006ec0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb8:	f043 0204 	orr.w	r2, r3, #4
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d003      	beq.n	8006ed0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 f8b3 	bl	8007034 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006ece:	e039      	b.n	8006f44 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006ed0:	7bfb      	ldrb	r3, [r7, #15]
 8006ed2:	2b2a      	cmp	r3, #42	; 0x2a
 8006ed4:	d109      	bne.n	8006eea <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2228      	movs	r2, #40	; 0x28
 8006ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f7ff f83b 	bl	8005f60 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	2b28      	cmp	r3, #40	; 0x28
 8006ef4:	d111      	bne.n	8006f1a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a15      	ldr	r2, [pc, #84]	; (8006f50 <I2C_Slave_STOPF+0x25c>)
 8006efa:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2220      	movs	r2, #32
 8006f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f7ff f83c 	bl	8005f90 <HAL_I2C_ListenCpltCallback>
}
 8006f18:	e014      	b.n	8006f44 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f1e:	2b22      	cmp	r3, #34	; 0x22
 8006f20:	d002      	beq.n	8006f28 <I2C_Slave_STOPF+0x234>
 8006f22:	7bfb      	ldrb	r3, [r7, #15]
 8006f24:	2b22      	cmp	r3, #34	; 0x22
 8006f26:	d10d      	bne.n	8006f44 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2220      	movs	r2, #32
 8006f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f7ff f80e 	bl	8005f60 <HAL_I2C_SlaveRxCpltCallback>
}
 8006f44:	bf00      	nop
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	080077b9 	.word	0x080077b9
 8006f50:	ffff0000 	.word	0xffff0000

08006f54 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f62:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f68:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	2b08      	cmp	r3, #8
 8006f6e:	d002      	beq.n	8006f76 <I2C_Slave_AF+0x22>
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	2b20      	cmp	r3, #32
 8006f74:	d129      	bne.n	8006fca <I2C_Slave_AF+0x76>
 8006f76:	7bfb      	ldrb	r3, [r7, #15]
 8006f78:	2b28      	cmp	r3, #40	; 0x28
 8006f7a:	d126      	bne.n	8006fca <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a2c      	ldr	r2, [pc, #176]	; (8007030 <I2C_Slave_AF+0xdc>)
 8006f80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	685a      	ldr	r2, [r3, #4]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f90:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f9a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006faa:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2220      	movs	r2, #32
 8006fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f7fe ffe4 	bl	8005f90 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006fc8:	e02e      	b.n	8007028 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006fca:	7bfb      	ldrb	r3, [r7, #15]
 8006fcc:	2b21      	cmp	r3, #33	; 0x21
 8006fce:	d126      	bne.n	800701e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a17      	ldr	r2, [pc, #92]	; (8007030 <I2C_Slave_AF+0xdc>)
 8006fd4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2221      	movs	r2, #33	; 0x21
 8006fda:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2220      	movs	r2, #32
 8006fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	685a      	ldr	r2, [r3, #4]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ffa:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007004:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007014:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f7fe ff98 	bl	8005f4c <HAL_I2C_SlaveTxCpltCallback>
}
 800701c:	e004      	b.n	8007028 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007026:	615a      	str	r2, [r3, #20]
}
 8007028:	bf00      	nop
 800702a:	3710      	adds	r7, #16
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	ffff0000 	.word	0xffff0000

08007034 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007042:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800704a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800704c:	7bbb      	ldrb	r3, [r7, #14]
 800704e:	2b10      	cmp	r3, #16
 8007050:	d002      	beq.n	8007058 <I2C_ITError+0x24>
 8007052:	7bbb      	ldrb	r3, [r7, #14]
 8007054:	2b40      	cmp	r3, #64	; 0x40
 8007056:	d10a      	bne.n	800706e <I2C_ITError+0x3a>
 8007058:	7bfb      	ldrb	r3, [r7, #15]
 800705a:	2b22      	cmp	r3, #34	; 0x22
 800705c:	d107      	bne.n	800706e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800706c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800706e:	7bfb      	ldrb	r3, [r7, #15]
 8007070:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007074:	2b28      	cmp	r3, #40	; 0x28
 8007076:	d107      	bne.n	8007088 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2228      	movs	r2, #40	; 0x28
 8007082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007086:	e015      	b.n	80070b4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007092:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007096:	d00a      	beq.n	80070ae <I2C_ITError+0x7a>
 8007098:	7bfb      	ldrb	r3, [r7, #15]
 800709a:	2b60      	cmp	r3, #96	; 0x60
 800709c:	d007      	beq.n	80070ae <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2220      	movs	r2, #32
 80070a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070c2:	d162      	bne.n	800718a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	685a      	ldr	r2, [r3, #4]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070d2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d020      	beq.n	8007124 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070e6:	4a6a      	ldr	r2, [pc, #424]	; (8007290 <I2C_ITError+0x25c>)
 80070e8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7fd f97e 	bl	80043f0 <HAL_DMA_Abort_IT>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	f000 8089 	beq.w	800720e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f022 0201 	bic.w	r2, r2, #1
 800710a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2220      	movs	r2, #32
 8007110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800711e:	4610      	mov	r0, r2
 8007120:	4798      	blx	r3
 8007122:	e074      	b.n	800720e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007128:	4a59      	ldr	r2, [pc, #356]	; (8007290 <I2C_ITError+0x25c>)
 800712a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007130:	4618      	mov	r0, r3
 8007132:	f7fd f95d 	bl	80043f0 <HAL_DMA_Abort_IT>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d068      	beq.n	800720e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	695b      	ldr	r3, [r3, #20]
 8007142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007146:	2b40      	cmp	r3, #64	; 0x40
 8007148:	d10b      	bne.n	8007162 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	691a      	ldr	r2, [r3, #16]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007154:	b2d2      	uxtb	r2, r2
 8007156:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715c:	1c5a      	adds	r2, r3, #1
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f022 0201 	bic.w	r2, r2, #1
 8007170:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2220      	movs	r2, #32
 8007176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007184:	4610      	mov	r0, r2
 8007186:	4798      	blx	r3
 8007188:	e041      	b.n	800720e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007190:	b2db      	uxtb	r3, r3
 8007192:	2b60      	cmp	r3, #96	; 0x60
 8007194:	d125      	bne.n	80071e2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2220      	movs	r2, #32
 800719a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	695b      	ldr	r3, [r3, #20]
 80071aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ae:	2b40      	cmp	r3, #64	; 0x40
 80071b0:	d10b      	bne.n	80071ca <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	691a      	ldr	r2, [r3, #16]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071bc:	b2d2      	uxtb	r2, r2
 80071be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c4:	1c5a      	adds	r2, r3, #1
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f022 0201 	bic.w	r2, r2, #1
 80071d8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f7fe fef6 	bl	8005fcc <HAL_I2C_AbortCpltCallback>
 80071e0:	e015      	b.n	800720e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	695b      	ldr	r3, [r3, #20]
 80071e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ec:	2b40      	cmp	r3, #64	; 0x40
 80071ee:	d10b      	bne.n	8007208 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	691a      	ldr	r2, [r3, #16]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fa:	b2d2      	uxtb	r2, r2
 80071fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007202:	1c5a      	adds	r2, r3, #1
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f7fe fed5 	bl	8005fb8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007212:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	2b00      	cmp	r3, #0
 800721c:	d10e      	bne.n	800723c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007224:	2b00      	cmp	r3, #0
 8007226:	d109      	bne.n	800723c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800722e:	2b00      	cmp	r3, #0
 8007230:	d104      	bne.n	800723c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007238:	2b00      	cmp	r3, #0
 800723a:	d007      	beq.n	800724c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	685a      	ldr	r2, [r3, #4]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800724a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007252:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007258:	f003 0304 	and.w	r3, r3, #4
 800725c:	2b04      	cmp	r3, #4
 800725e:	d113      	bne.n	8007288 <I2C_ITError+0x254>
 8007260:	7bfb      	ldrb	r3, [r7, #15]
 8007262:	2b28      	cmp	r3, #40	; 0x28
 8007264:	d110      	bne.n	8007288 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	4a0a      	ldr	r2, [pc, #40]	; (8007294 <I2C_ITError+0x260>)
 800726a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2220      	movs	r2, #32
 8007276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f7fe fe84 	bl	8005f90 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007288:	bf00      	nop
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	080077b9 	.word	0x080077b9
 8007294:	ffff0000 	.word	0xffff0000

08007298 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b088      	sub	sp, #32
 800729c:	af02      	add	r7, sp, #8
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	4608      	mov	r0, r1
 80072a2:	4611      	mov	r1, r2
 80072a4:	461a      	mov	r2, r3
 80072a6:	4603      	mov	r3, r0
 80072a8:	817b      	strh	r3, [r7, #10]
 80072aa:	460b      	mov	r3, r1
 80072ac:	813b      	strh	r3, [r7, #8]
 80072ae:	4613      	mov	r3, r2
 80072b0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80072c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	6a3b      	ldr	r3, [r7, #32]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	f000 fb1a 	bl	8007908 <I2C_WaitOnFlagUntilTimeout>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00d      	beq.n	80072f6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072e8:	d103      	bne.n	80072f2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	e05f      	b.n	80073b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80072f6:	897b      	ldrh	r3, [r7, #10]
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	461a      	mov	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007304:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007308:	6a3a      	ldr	r2, [r7, #32]
 800730a:	492d      	ldr	r1, [pc, #180]	; (80073c0 <I2C_RequestMemoryWrite+0x128>)
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f000 fb52 	bl	80079b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d001      	beq.n	800731c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	e04c      	b.n	80073b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800731c:	2300      	movs	r3, #0
 800731e:	617b      	str	r3, [r7, #20]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	695b      	ldr	r3, [r3, #20]
 8007326:	617b      	str	r3, [r7, #20]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	617b      	str	r3, [r7, #20]
 8007330:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007334:	6a39      	ldr	r1, [r7, #32]
 8007336:	68f8      	ldr	r0, [r7, #12]
 8007338:	f000 fbbc 	bl	8007ab4 <I2C_WaitOnTXEFlagUntilTimeout>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d00d      	beq.n	800735e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007346:	2b04      	cmp	r3, #4
 8007348:	d107      	bne.n	800735a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007358:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e02b      	b.n	80073b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800735e:	88fb      	ldrh	r3, [r7, #6]
 8007360:	2b01      	cmp	r3, #1
 8007362:	d105      	bne.n	8007370 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007364:	893b      	ldrh	r3, [r7, #8]
 8007366:	b2da      	uxtb	r2, r3
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	611a      	str	r2, [r3, #16]
 800736e:	e021      	b.n	80073b4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007370:	893b      	ldrh	r3, [r7, #8]
 8007372:	0a1b      	lsrs	r3, r3, #8
 8007374:	b29b      	uxth	r3, r3
 8007376:	b2da      	uxtb	r2, r3
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800737e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007380:	6a39      	ldr	r1, [r7, #32]
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f000 fb96 	bl	8007ab4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00d      	beq.n	80073aa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007392:	2b04      	cmp	r3, #4
 8007394:	d107      	bne.n	80073a6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	e005      	b.n	80073b6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80073aa:	893b      	ldrh	r3, [r7, #8]
 80073ac:	b2da      	uxtb	r2, r3
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3718      	adds	r7, #24
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	00010002 	.word	0x00010002

080073c4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b088      	sub	sp, #32
 80073c8:	af02      	add	r7, sp, #8
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	4608      	mov	r0, r1
 80073ce:	4611      	mov	r1, r2
 80073d0:	461a      	mov	r2, r3
 80073d2:	4603      	mov	r3, r0
 80073d4:	817b      	strh	r3, [r7, #10]
 80073d6:	460b      	mov	r3, r1
 80073d8:	813b      	strh	r3, [r7, #8]
 80073da:	4613      	mov	r3, r2
 80073dc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80073ec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80073fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007400:	9300      	str	r3, [sp, #0]
 8007402:	6a3b      	ldr	r3, [r7, #32]
 8007404:	2200      	movs	r2, #0
 8007406:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f000 fa7c 	bl	8007908 <I2C_WaitOnFlagUntilTimeout>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00d      	beq.n	8007432 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007420:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007424:	d103      	bne.n	800742e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f44f 7200 	mov.w	r2, #512	; 0x200
 800742c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800742e:	2303      	movs	r3, #3
 8007430:	e0aa      	b.n	8007588 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007432:	897b      	ldrh	r3, [r7, #10]
 8007434:	b2db      	uxtb	r3, r3
 8007436:	461a      	mov	r2, r3
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007440:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007444:	6a3a      	ldr	r2, [r7, #32]
 8007446:	4952      	ldr	r1, [pc, #328]	; (8007590 <I2C_RequestMemoryRead+0x1cc>)
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	f000 fab4 	bl	80079b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d001      	beq.n	8007458 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	e097      	b.n	8007588 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007458:	2300      	movs	r3, #0
 800745a:	617b      	str	r3, [r7, #20]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	695b      	ldr	r3, [r3, #20]
 8007462:	617b      	str	r3, [r7, #20]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	699b      	ldr	r3, [r3, #24]
 800746a:	617b      	str	r3, [r7, #20]
 800746c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800746e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007470:	6a39      	ldr	r1, [r7, #32]
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f000 fb1e 	bl	8007ab4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00d      	beq.n	800749a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007482:	2b04      	cmp	r3, #4
 8007484:	d107      	bne.n	8007496 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007494:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	e076      	b.n	8007588 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800749a:	88fb      	ldrh	r3, [r7, #6]
 800749c:	2b01      	cmp	r3, #1
 800749e:	d105      	bne.n	80074ac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80074a0:	893b      	ldrh	r3, [r7, #8]
 80074a2:	b2da      	uxtb	r2, r3
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	611a      	str	r2, [r3, #16]
 80074aa:	e021      	b.n	80074f0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80074ac:	893b      	ldrh	r3, [r7, #8]
 80074ae:	0a1b      	lsrs	r3, r3, #8
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	b2da      	uxtb	r2, r3
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80074ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074bc:	6a39      	ldr	r1, [r7, #32]
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f000 faf8 	bl	8007ab4 <I2C_WaitOnTXEFlagUntilTimeout>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00d      	beq.n	80074e6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ce:	2b04      	cmp	r3, #4
 80074d0:	d107      	bne.n	80074e2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e050      	b.n	8007588 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80074e6:	893b      	ldrh	r3, [r7, #8]
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80074f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074f2:	6a39      	ldr	r1, [r7, #32]
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	f000 fadd 	bl	8007ab4 <I2C_WaitOnTXEFlagUntilTimeout>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d00d      	beq.n	800751c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007504:	2b04      	cmp	r3, #4
 8007506:	d107      	bne.n	8007518 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007516:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	e035      	b.n	8007588 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800752a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800752c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752e:	9300      	str	r3, [sp, #0]
 8007530:	6a3b      	ldr	r3, [r7, #32]
 8007532:	2200      	movs	r2, #0
 8007534:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007538:	68f8      	ldr	r0, [r7, #12]
 800753a:	f000 f9e5 	bl	8007908 <I2C_WaitOnFlagUntilTimeout>
 800753e:	4603      	mov	r3, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d00d      	beq.n	8007560 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800754e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007552:	d103      	bne.n	800755c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f44f 7200 	mov.w	r2, #512	; 0x200
 800755a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800755c:	2303      	movs	r3, #3
 800755e:	e013      	b.n	8007588 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007560:	897b      	ldrh	r3, [r7, #10]
 8007562:	b2db      	uxtb	r3, r3
 8007564:	f043 0301 	orr.w	r3, r3, #1
 8007568:	b2da      	uxtb	r2, r3
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007572:	6a3a      	ldr	r2, [r7, #32]
 8007574:	4906      	ldr	r1, [pc, #24]	; (8007590 <I2C_RequestMemoryRead+0x1cc>)
 8007576:	68f8      	ldr	r0, [r7, #12]
 8007578:	f000 fa1d 	bl	80079b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d001      	beq.n	8007586 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	e000      	b.n	8007588 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007586:	2300      	movs	r3, #0
}
 8007588:	4618      	mov	r0, r3
 800758a:	3718      	adds	r7, #24
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	00010002 	.word	0x00010002

08007594 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b086      	sub	sp, #24
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075a8:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075b0:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b6:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	685a      	ldr	r2, [r3, #4]
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80075c6:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d003      	beq.n	80075d8 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075d4:	2200      	movs	r2, #0
 80075d6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d003      	beq.n	80075e8 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e4:	2200      	movs	r2, #0
 80075e6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80075e8:	7cfb      	ldrb	r3, [r7, #19]
 80075ea:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80075ee:	2b21      	cmp	r3, #33	; 0x21
 80075f0:	d007      	beq.n	8007602 <I2C_DMAXferCplt+0x6e>
 80075f2:	7cfb      	ldrb	r3, [r7, #19]
 80075f4:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80075f8:	2b22      	cmp	r3, #34	; 0x22
 80075fa:	d131      	bne.n	8007660 <I2C_DMAXferCplt+0xcc>
 80075fc:	7cbb      	ldrb	r3, [r7, #18]
 80075fe:	2b20      	cmp	r3, #32
 8007600:	d12e      	bne.n	8007660 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	685a      	ldr	r2, [r3, #4]
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007610:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	2200      	movs	r2, #0
 8007616:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007618:	7cfb      	ldrb	r3, [r7, #19]
 800761a:	2b29      	cmp	r3, #41	; 0x29
 800761c:	d10a      	bne.n	8007634 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	2221      	movs	r2, #33	; 0x21
 8007622:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	2228      	movs	r2, #40	; 0x28
 8007628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800762c:	6978      	ldr	r0, [r7, #20]
 800762e:	f7fe fc8d 	bl	8005f4c <HAL_I2C_SlaveTxCpltCallback>
 8007632:	e00c      	b.n	800764e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007634:	7cfb      	ldrb	r3, [r7, #19]
 8007636:	2b2a      	cmp	r3, #42	; 0x2a
 8007638:	d109      	bne.n	800764e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	2222      	movs	r2, #34	; 0x22
 800763e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	2228      	movs	r2, #40	; 0x28
 8007644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007648:	6978      	ldr	r0, [r7, #20]
 800764a:	f7fe fc89 	bl	8005f60 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	685a      	ldr	r2, [r3, #4]
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800765c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800765e:	e06a      	b.n	8007736 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007666:	b2db      	uxtb	r3, r3
 8007668:	2b00      	cmp	r3, #0
 800766a:	d064      	beq.n	8007736 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007670:	b29b      	uxth	r3, r3
 8007672:	2b01      	cmp	r3, #1
 8007674:	d107      	bne.n	8007686 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007684:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	685a      	ldr	r2, [r3, #4]
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007694:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800769c:	d009      	beq.n	80076b2 <I2C_DMAXferCplt+0x11e>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2b08      	cmp	r3, #8
 80076a2:	d006      	beq.n	80076b2 <I2C_DMAXferCplt+0x11e>
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80076aa:	d002      	beq.n	80076b2 <I2C_DMAXferCplt+0x11e>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2b20      	cmp	r3, #32
 80076b0:	d107      	bne.n	80076c2 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076c0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	685a      	ldr	r2, [r3, #4]
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80076d0:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	685a      	ldr	r2, [r3, #4]
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076e0:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	2200      	movs	r2, #0
 80076e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d003      	beq.n	80076f8 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80076f0:	6978      	ldr	r0, [r7, #20]
 80076f2:	f7fe fc61 	bl	8005fb8 <HAL_I2C_ErrorCallback>
}
 80076f6:	e01e      	b.n	8007736 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	2220      	movs	r2, #32
 80076fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007706:	b2db      	uxtb	r3, r3
 8007708:	2b40      	cmp	r3, #64	; 0x40
 800770a:	d10a      	bne.n	8007722 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	2200      	movs	r2, #0
 8007718:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800771a:	6978      	ldr	r0, [r7, #20]
 800771c:	f7fb fe34 	bl	8003388 <HAL_I2C_MemRxCpltCallback>
}
 8007720:	e009      	b.n	8007736 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	2212      	movs	r2, #18
 800772e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8007730:	6978      	ldr	r0, [r7, #20]
 8007732:	f7fe fc01 	bl	8005f38 <HAL_I2C_MasterRxCpltCallback>
}
 8007736:	bf00      	nop
 8007738:	3718      	adds	r7, #24
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b084      	sub	sp, #16
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800774a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007750:	2b00      	cmp	r3, #0
 8007752:	d003      	beq.n	800775c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007758:	2200      	movs	r2, #0
 800775a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007760:	2b00      	cmp	r3, #0
 8007762:	d003      	beq.n	800776c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007768:	2200      	movs	r2, #0
 800776a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f7fc fff9 	bl	8004764 <HAL_DMA_GetError>
 8007772:	4603      	mov	r3, r0
 8007774:	2b02      	cmp	r3, #2
 8007776:	d01b      	beq.n	80077b0 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007786:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2200      	movs	r2, #0
 800778c:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2220      	movs	r2, #32
 8007792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a2:	f043 0210 	orr.w	r2, r3, #16
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	f7fe fc04 	bl	8005fb8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80077b0:	bf00      	nop
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b086      	sub	sp, #24
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077c0:	2300      	movs	r3, #0
 80077c2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077d0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80077d2:	4b4b      	ldr	r3, [pc, #300]	; (8007900 <I2C_DMAAbort+0x148>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	08db      	lsrs	r3, r3, #3
 80077d8:	4a4a      	ldr	r2, [pc, #296]	; (8007904 <I2C_DMAAbort+0x14c>)
 80077da:	fba2 2303 	umull	r2, r3, r2, r3
 80077de:	0a1a      	lsrs	r2, r3, #8
 80077e0:	4613      	mov	r3, r2
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4413      	add	r3, r2
 80077e6:	00da      	lsls	r2, r3, #3
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d106      	bne.n	8007800 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f6:	f043 0220 	orr.w	r2, r3, #32
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80077fe:	e00a      	b.n	8007816 <I2C_DMAAbort+0x5e>
    }
    count--;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	3b01      	subs	r3, #1
 8007804:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007814:	d0ea      	beq.n	80077ec <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800781a:	2b00      	cmp	r3, #0
 800781c:	d003      	beq.n	8007826 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007822:	2200      	movs	r2, #0
 8007824:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782a:	2b00      	cmp	r3, #0
 800782c:	d003      	beq.n	8007836 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007832:	2200      	movs	r2, #0
 8007834:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007844:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	2200      	movs	r2, #0
 800784a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007850:	2b00      	cmp	r3, #0
 8007852:	d003      	beq.n	800785c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007858:	2200      	movs	r2, #0
 800785a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007860:	2b00      	cmp	r3, #0
 8007862:	d003      	beq.n	800786c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007868:	2200      	movs	r2, #0
 800786a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f022 0201 	bic.w	r2, r2, #1
 800787a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007882:	b2db      	uxtb	r3, r3
 8007884:	2b60      	cmp	r3, #96	; 0x60
 8007886:	d10e      	bne.n	80078a6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	2220      	movs	r2, #32
 800788c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	2200      	movs	r2, #0
 8007894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	2200      	movs	r2, #0
 800789c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800789e:	6978      	ldr	r0, [r7, #20]
 80078a0:	f7fe fb94 	bl	8005fcc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80078a4:	e027      	b.n	80078f6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80078a6:	7cfb      	ldrb	r3, [r7, #19]
 80078a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80078ac:	2b28      	cmp	r3, #40	; 0x28
 80078ae:	d117      	bne.n	80078e0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f042 0201 	orr.w	r2, r2, #1
 80078be:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078ce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	2200      	movs	r2, #0
 80078d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	2228      	movs	r2, #40	; 0x28
 80078da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80078de:	e007      	b.n	80078f0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	2220      	movs	r2, #32
 80078e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80078f0:	6978      	ldr	r0, [r7, #20]
 80078f2:	f7fe fb61 	bl	8005fb8 <HAL_I2C_ErrorCallback>
}
 80078f6:	bf00      	nop
 80078f8:	3718      	adds	r7, #24
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	20000108 	.word	0x20000108
 8007904:	14f8b589 	.word	0x14f8b589

08007908 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	603b      	str	r3, [r7, #0]
 8007914:	4613      	mov	r3, r2
 8007916:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007918:	e025      	b.n	8007966 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007920:	d021      	beq.n	8007966 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007922:	f7fc faad 	bl	8003e80 <HAL_GetTick>
 8007926:	4602      	mov	r2, r0
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	1ad3      	subs	r3, r2, r3
 800792c:	683a      	ldr	r2, [r7, #0]
 800792e:	429a      	cmp	r2, r3
 8007930:	d302      	bcc.n	8007938 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d116      	bne.n	8007966 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2200      	movs	r2, #0
 800793c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2220      	movs	r2, #32
 8007942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007952:	f043 0220 	orr.w	r2, r3, #32
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2200      	movs	r2, #0
 800795e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	e023      	b.n	80079ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	0c1b      	lsrs	r3, r3, #16
 800796a:	b2db      	uxtb	r3, r3
 800796c:	2b01      	cmp	r3, #1
 800796e:	d10d      	bne.n	800798c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	695b      	ldr	r3, [r3, #20]
 8007976:	43da      	mvns	r2, r3
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	4013      	ands	r3, r2
 800797c:	b29b      	uxth	r3, r3
 800797e:	2b00      	cmp	r3, #0
 8007980:	bf0c      	ite	eq
 8007982:	2301      	moveq	r3, #1
 8007984:	2300      	movne	r3, #0
 8007986:	b2db      	uxtb	r3, r3
 8007988:	461a      	mov	r2, r3
 800798a:	e00c      	b.n	80079a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	699b      	ldr	r3, [r3, #24]
 8007992:	43da      	mvns	r2, r3
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	4013      	ands	r3, r2
 8007998:	b29b      	uxth	r3, r3
 800799a:	2b00      	cmp	r3, #0
 800799c:	bf0c      	ite	eq
 800799e:	2301      	moveq	r3, #1
 80079a0:	2300      	movne	r3, #0
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	461a      	mov	r2, r3
 80079a6:	79fb      	ldrb	r3, [r7, #7]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d0b6      	beq.n	800791a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b084      	sub	sp, #16
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	60f8      	str	r0, [r7, #12]
 80079be:	60b9      	str	r1, [r7, #8]
 80079c0:	607a      	str	r2, [r7, #4]
 80079c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80079c4:	e051      	b.n	8007a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	695b      	ldr	r3, [r3, #20]
 80079cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079d4:	d123      	bne.n	8007a1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80079ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2200      	movs	r2, #0
 80079f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2220      	movs	r2, #32
 80079fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0a:	f043 0204 	orr.w	r2, r3, #4
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e046      	b.n	8007aac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a24:	d021      	beq.n	8007a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a26:	f7fc fa2b 	bl	8003e80 <HAL_GetTick>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	1ad3      	subs	r3, r2, r3
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d302      	bcc.n	8007a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d116      	bne.n	8007a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2220      	movs	r2, #32
 8007a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a56:	f043 0220 	orr.w	r2, r3, #32
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e020      	b.n	8007aac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	0c1b      	lsrs	r3, r3, #16
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d10c      	bne.n	8007a8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	695b      	ldr	r3, [r3, #20]
 8007a7a:	43da      	mvns	r2, r3
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	4013      	ands	r3, r2
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	bf14      	ite	ne
 8007a86:	2301      	movne	r3, #1
 8007a88:	2300      	moveq	r3, #0
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	e00b      	b.n	8007aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	699b      	ldr	r3, [r3, #24]
 8007a94:	43da      	mvns	r2, r3
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	4013      	ands	r3, r2
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	bf14      	ite	ne
 8007aa0:	2301      	movne	r3, #1
 8007aa2:	2300      	moveq	r3, #0
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d18d      	bne.n	80079c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007aaa:	2300      	movs	r3, #0
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3710      	adds	r7, #16
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ac0:	e02d      	b.n	8007b1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007ac2:	68f8      	ldr	r0, [r7, #12]
 8007ac4:	f000 f900 	bl	8007cc8 <I2C_IsAcknowledgeFailed>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d001      	beq.n	8007ad2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e02d      	b.n	8007b2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ad8:	d021      	beq.n	8007b1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ada:	f7fc f9d1 	bl	8003e80 <HAL_GetTick>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	1ad3      	subs	r3, r2, r3
 8007ae4:	68ba      	ldr	r2, [r7, #8]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d302      	bcc.n	8007af0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d116      	bne.n	8007b1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2220      	movs	r2, #32
 8007afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0a:	f043 0220 	orr.w	r2, r3, #32
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e007      	b.n	8007b2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	695b      	ldr	r3, [r3, #20]
 8007b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b28:	2b80      	cmp	r3, #128	; 0x80
 8007b2a:	d1ca      	bne.n	8007ac2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b084      	sub	sp, #16
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	60f8      	str	r0, [r7, #12]
 8007b3e:	60b9      	str	r1, [r7, #8]
 8007b40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007b42:	e02d      	b.n	8007ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	f000 f8bf 	bl	8007cc8 <I2C_IsAcknowledgeFailed>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d001      	beq.n	8007b54 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	e02d      	b.n	8007bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b5a:	d021      	beq.n	8007ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b5c:	f7fc f990 	bl	8003e80 <HAL_GetTick>
 8007b60:	4602      	mov	r2, r0
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	1ad3      	subs	r3, r2, r3
 8007b66:	68ba      	ldr	r2, [r7, #8]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d302      	bcc.n	8007b72 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d116      	bne.n	8007ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2200      	movs	r2, #0
 8007b76:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2220      	movs	r2, #32
 8007b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8c:	f043 0220 	orr.w	r2, r3, #32
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e007      	b.n	8007bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	695b      	ldr	r3, [r3, #20]
 8007ba6:	f003 0304 	and.w	r3, r3, #4
 8007baa:	2b04      	cmp	r3, #4
 8007bac:	d1ca      	bne.n	8007b44 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007bae:	2300      	movs	r3, #0
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3710      	adds	r7, #16
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007bc4:	4b13      	ldr	r3, [pc, #76]	; (8007c14 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	08db      	lsrs	r3, r3, #3
 8007bca:	4a13      	ldr	r2, [pc, #76]	; (8007c18 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8007bd0:	0a1a      	lsrs	r2, r3, #8
 8007bd2:	4613      	mov	r3, r2
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	4413      	add	r3, r2
 8007bd8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d107      	bne.n	8007bf6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bea:	f043 0220 	orr.w	r2, r3, #32
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e008      	b.n	8007c08 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c04:	d0e9      	beq.n	8007bda <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3714      	adds	r7, #20
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr
 8007c14:	20000108 	.word	0x20000108
 8007c18:	14f8b589 	.word	0x14f8b589

08007c1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007c28:	e042      	b.n	8007cb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	695b      	ldr	r3, [r3, #20]
 8007c30:	f003 0310 	and.w	r3, r3, #16
 8007c34:	2b10      	cmp	r3, #16
 8007c36:	d119      	bne.n	8007c6c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f06f 0210 	mvn.w	r2, #16
 8007c40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2200      	movs	r2, #0
 8007c46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2220      	movs	r2, #32
 8007c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e029      	b.n	8007cc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c6c:	f7fc f908 	bl	8003e80 <HAL_GetTick>
 8007c70:	4602      	mov	r2, r0
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	1ad3      	subs	r3, r2, r3
 8007c76:	68ba      	ldr	r2, [r7, #8]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d302      	bcc.n	8007c82 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d116      	bne.n	8007cb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2200      	movs	r2, #0
 8007c86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2220      	movs	r2, #32
 8007c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c9c:	f043 0220 	orr.w	r2, r3, #32
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	e007      	b.n	8007cc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	695b      	ldr	r3, [r3, #20]
 8007cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cba:	2b40      	cmp	r3, #64	; 0x40
 8007cbc:	d1b5      	bne.n	8007c2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3710      	adds	r7, #16
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	695b      	ldr	r3, [r3, #20]
 8007cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cde:	d11b      	bne.n	8007d18 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007ce8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2220      	movs	r2, #32
 8007cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d04:	f043 0204 	orr.w	r2, r3, #4
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	e000      	b.n	8007d1a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	370c      	adds	r7, #12
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr

08007d26 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007d26:	b480      	push	{r7}
 8007d28:	b083      	sub	sp, #12
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d32:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007d36:	d103      	bne.n	8007d40 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007d3e:	e007      	b.n	8007d50 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d44:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007d48:	d102      	bne.n	8007d50 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2208      	movs	r2, #8
 8007d4e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007d50:	bf00      	nop
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b086      	sub	sp, #24
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d101      	bne.n	8007d6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e264      	b.n	8008238 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 0301 	and.w	r3, r3, #1
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d075      	beq.n	8007e66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007d7a:	4ba3      	ldr	r3, [pc, #652]	; (8008008 <HAL_RCC_OscConfig+0x2ac>)
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	f003 030c 	and.w	r3, r3, #12
 8007d82:	2b04      	cmp	r3, #4
 8007d84:	d00c      	beq.n	8007da0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d86:	4ba0      	ldr	r3, [pc, #640]	; (8008008 <HAL_RCC_OscConfig+0x2ac>)
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007d8e:	2b08      	cmp	r3, #8
 8007d90:	d112      	bne.n	8007db8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d92:	4b9d      	ldr	r3, [pc, #628]	; (8008008 <HAL_RCC_OscConfig+0x2ac>)
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d9e:	d10b      	bne.n	8007db8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007da0:	4b99      	ldr	r3, [pc, #612]	; (8008008 <HAL_RCC_OscConfig+0x2ac>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d05b      	beq.n	8007e64 <HAL_RCC_OscConfig+0x108>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d157      	bne.n	8007e64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	e23f      	b.n	8008238 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dc0:	d106      	bne.n	8007dd0 <HAL_RCC_OscConfig+0x74>
 8007dc2:	4b91      	ldr	r3, [pc, #580]	; (8008008 <HAL_RCC_OscConfig+0x2ac>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a90      	ldr	r2, [pc, #576]	; (8008008 <HAL_RCC_OscConfig+0x2ac>)
 8007dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dcc:	6013      	str	r3, [r2, #0]
 8007dce:	e01d      	b.n	8007e0c <HAL_RCC_OscConfig+0xb0>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007dd8:	d10c      	bne.n	8007df4 <HAL_RCC_OscConfig+0x98>
 8007dda:	4b8b      	ldr	r3, [pc, #556]	; (8008008 <HAL_RCC_OscConfig+0x2ac>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a8a      	ldr	r2, [pc, #552]	; (8008008 <HAL_RCC_OscConfig+0x2ac>)
 8007de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007de4:	6013      	str	r3, [r2, #0]
 8007de6:	4b88      	ldr	r3, [pc, #544]	; (8008008 <HAL_RCC_OscConfig+0x2ac>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a87      	ldr	r2, [pc, #540]	; (8008008 <HAL_RCC_OscConfig+0x2ac>)
 8007dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007df0:	6013      	str	r3, [r2, #0]
 8007df2:	e00b      	b.n	8007e0c <HAL_RCC_OscConfig+0xb0>
 8007df4:	4b84      	ldr	r3, [pc, #528]	; (8008008 <HAL_RCC_OscConfig+0x2ac>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a83      	ldr	r2, [pc, #524]	; (8008008 <HAL_RCC_OscConfig+0x2ac>)
 8007dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dfe:	6013      	str	r3, [r2, #0]
 8007e00:	4b81      	ldr	r3, [pc, #516]	; (8008008 <HAL_RCC_OscConfig+0x2ac>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a80      	ldr	r2, [pc, #512]	; (8008008 <HAL_RCC_OscConfig+0x2ac>)
 8007e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d013      	beq.n	8007e3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e14:	f7fc f834 	bl	8003e80 <HAL_GetTick>
 8007e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e1a:	e008      	b.n	8007e2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e1c:	f7fc f830 	bl	8003e80 <HAL_GetTick>
 8007e20:	4602      	mov	r2, r0
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	1ad3      	subs	r3, r2, r3
 8007e26:	2b64      	cmp	r3, #100	; 0x64
 8007e28:	d901      	bls.n	8007e2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	e204      	b.n	8008238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e2e:	4b76      	ldr	r3, [pc, #472]	; (8008008 <HAL_RCC_OscConfig+0x2ac>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d0f0      	beq.n	8007e1c <HAL_RCC_OscConfig+0xc0>
 8007e3a:	e014      	b.n	8007e66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e3c:	f7fc f820 	bl	8003e80 <HAL_GetTick>
 8007e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e42:	e008      	b.n	8007e56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e44:	f7fc f81c 	bl	8003e80 <HAL_GetTick>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	1ad3      	subs	r3, r2, r3
 8007e4e:	2b64      	cmp	r3, #100	; 0x64
 8007e50:	d901      	bls.n	8007e56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007e52:	2303      	movs	r3, #3
 8007e54:	e1f0      	b.n	8008238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e56:	4b6c      	ldr	r3, [pc, #432]	; (8008008 <HAL_RCC_OscConfig+0x2ac>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d1f0      	bne.n	8007e44 <HAL_RCC_OscConfig+0xe8>
 8007e62:	e000      	b.n	8007e66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 0302 	and.w	r3, r3, #2
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d063      	beq.n	8007f3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007e72:	4b65      	ldr	r3, [pc, #404]	; (8008008 <HAL_RCC_OscConfig+0x2ac>)
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	f003 030c 	and.w	r3, r3, #12
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00b      	beq.n	8007e96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e7e:	4b62      	ldr	r3, [pc, #392]	; (8008008 <HAL_RCC_OscConfig+0x2ac>)
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007e86:	2b08      	cmp	r3, #8
 8007e88:	d11c      	bne.n	8007ec4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e8a:	4b5f      	ldr	r3, [pc, #380]	; (8008008 <HAL_RCC_OscConfig+0x2ac>)
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d116      	bne.n	8007ec4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e96:	4b5c      	ldr	r3, [pc, #368]	; (8008008 <HAL_RCC_OscConfig+0x2ac>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f003 0302 	and.w	r3, r3, #2
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d005      	beq.n	8007eae <HAL_RCC_OscConfig+0x152>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d001      	beq.n	8007eae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e1c4      	b.n	8008238 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007eae:	4b56      	ldr	r3, [pc, #344]	; (8008008 <HAL_RCC_OscConfig+0x2ac>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	00db      	lsls	r3, r3, #3
 8007ebc:	4952      	ldr	r1, [pc, #328]	; (8008008 <HAL_RCC_OscConfig+0x2ac>)
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ec2:	e03a      	b.n	8007f3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d020      	beq.n	8007f0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ecc:	4b4f      	ldr	r3, [pc, #316]	; (800800c <HAL_RCC_OscConfig+0x2b0>)
 8007ece:	2201      	movs	r2, #1
 8007ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ed2:	f7fb ffd5 	bl	8003e80 <HAL_GetTick>
 8007ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ed8:	e008      	b.n	8007eec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007eda:	f7fb ffd1 	bl	8003e80 <HAL_GetTick>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	1ad3      	subs	r3, r2, r3
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d901      	bls.n	8007eec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	e1a5      	b.n	8008238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007eec:	4b46      	ldr	r3, [pc, #280]	; (8008008 <HAL_RCC_OscConfig+0x2ac>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f003 0302 	and.w	r3, r3, #2
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d0f0      	beq.n	8007eda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ef8:	4b43      	ldr	r3, [pc, #268]	; (8008008 <HAL_RCC_OscConfig+0x2ac>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	691b      	ldr	r3, [r3, #16]
 8007f04:	00db      	lsls	r3, r3, #3
 8007f06:	4940      	ldr	r1, [pc, #256]	; (8008008 <HAL_RCC_OscConfig+0x2ac>)
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	600b      	str	r3, [r1, #0]
 8007f0c:	e015      	b.n	8007f3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f0e:	4b3f      	ldr	r3, [pc, #252]	; (800800c <HAL_RCC_OscConfig+0x2b0>)
 8007f10:	2200      	movs	r2, #0
 8007f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f14:	f7fb ffb4 	bl	8003e80 <HAL_GetTick>
 8007f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f1a:	e008      	b.n	8007f2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f1c:	f7fb ffb0 	bl	8003e80 <HAL_GetTick>
 8007f20:	4602      	mov	r2, r0
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	1ad3      	subs	r3, r2, r3
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	d901      	bls.n	8007f2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007f2a:	2303      	movs	r3, #3
 8007f2c:	e184      	b.n	8008238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f2e:	4b36      	ldr	r3, [pc, #216]	; (8008008 <HAL_RCC_OscConfig+0x2ac>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 0302 	and.w	r3, r3, #2
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1f0      	bne.n	8007f1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 0308 	and.w	r3, r3, #8
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d030      	beq.n	8007fa8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	695b      	ldr	r3, [r3, #20]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d016      	beq.n	8007f7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f4e:	4b30      	ldr	r3, [pc, #192]	; (8008010 <HAL_RCC_OscConfig+0x2b4>)
 8007f50:	2201      	movs	r2, #1
 8007f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f54:	f7fb ff94 	bl	8003e80 <HAL_GetTick>
 8007f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f5a:	e008      	b.n	8007f6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f5c:	f7fb ff90 	bl	8003e80 <HAL_GetTick>
 8007f60:	4602      	mov	r2, r0
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	1ad3      	subs	r3, r2, r3
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	d901      	bls.n	8007f6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	e164      	b.n	8008238 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f6e:	4b26      	ldr	r3, [pc, #152]	; (8008008 <HAL_RCC_OscConfig+0x2ac>)
 8007f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f72:	f003 0302 	and.w	r3, r3, #2
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d0f0      	beq.n	8007f5c <HAL_RCC_OscConfig+0x200>
 8007f7a:	e015      	b.n	8007fa8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f7c:	4b24      	ldr	r3, [pc, #144]	; (8008010 <HAL_RCC_OscConfig+0x2b4>)
 8007f7e:	2200      	movs	r2, #0
 8007f80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f82:	f7fb ff7d 	bl	8003e80 <HAL_GetTick>
 8007f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f88:	e008      	b.n	8007f9c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f8a:	f7fb ff79 	bl	8003e80 <HAL_GetTick>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	1ad3      	subs	r3, r2, r3
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	d901      	bls.n	8007f9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007f98:	2303      	movs	r3, #3
 8007f9a:	e14d      	b.n	8008238 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f9c:	4b1a      	ldr	r3, [pc, #104]	; (8008008 <HAL_RCC_OscConfig+0x2ac>)
 8007f9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fa0:	f003 0302 	and.w	r3, r3, #2
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d1f0      	bne.n	8007f8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 0304 	and.w	r3, r3, #4
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	f000 80a0 	beq.w	80080f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007fba:	4b13      	ldr	r3, [pc, #76]	; (8008008 <HAL_RCC_OscConfig+0x2ac>)
 8007fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d10f      	bne.n	8007fe6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	60bb      	str	r3, [r7, #8]
 8007fca:	4b0f      	ldr	r3, [pc, #60]	; (8008008 <HAL_RCC_OscConfig+0x2ac>)
 8007fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fce:	4a0e      	ldr	r2, [pc, #56]	; (8008008 <HAL_RCC_OscConfig+0x2ac>)
 8007fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8007fd6:	4b0c      	ldr	r3, [pc, #48]	; (8008008 <HAL_RCC_OscConfig+0x2ac>)
 8007fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fde:	60bb      	str	r3, [r7, #8]
 8007fe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fe6:	4b0b      	ldr	r3, [pc, #44]	; (8008014 <HAL_RCC_OscConfig+0x2b8>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d121      	bne.n	8008036 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ff2:	4b08      	ldr	r3, [pc, #32]	; (8008014 <HAL_RCC_OscConfig+0x2b8>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a07      	ldr	r2, [pc, #28]	; (8008014 <HAL_RCC_OscConfig+0x2b8>)
 8007ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ffc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ffe:	f7fb ff3f 	bl	8003e80 <HAL_GetTick>
 8008002:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008004:	e011      	b.n	800802a <HAL_RCC_OscConfig+0x2ce>
 8008006:	bf00      	nop
 8008008:	40023800 	.word	0x40023800
 800800c:	42470000 	.word	0x42470000
 8008010:	42470e80 	.word	0x42470e80
 8008014:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008018:	f7fb ff32 	bl	8003e80 <HAL_GetTick>
 800801c:	4602      	mov	r2, r0
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	1ad3      	subs	r3, r2, r3
 8008022:	2b02      	cmp	r3, #2
 8008024:	d901      	bls.n	800802a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008026:	2303      	movs	r3, #3
 8008028:	e106      	b.n	8008238 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800802a:	4b85      	ldr	r3, [pc, #532]	; (8008240 <HAL_RCC_OscConfig+0x4e4>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008032:	2b00      	cmp	r3, #0
 8008034:	d0f0      	beq.n	8008018 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	2b01      	cmp	r3, #1
 800803c:	d106      	bne.n	800804c <HAL_RCC_OscConfig+0x2f0>
 800803e:	4b81      	ldr	r3, [pc, #516]	; (8008244 <HAL_RCC_OscConfig+0x4e8>)
 8008040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008042:	4a80      	ldr	r2, [pc, #512]	; (8008244 <HAL_RCC_OscConfig+0x4e8>)
 8008044:	f043 0301 	orr.w	r3, r3, #1
 8008048:	6713      	str	r3, [r2, #112]	; 0x70
 800804a:	e01c      	b.n	8008086 <HAL_RCC_OscConfig+0x32a>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	2b05      	cmp	r3, #5
 8008052:	d10c      	bne.n	800806e <HAL_RCC_OscConfig+0x312>
 8008054:	4b7b      	ldr	r3, [pc, #492]	; (8008244 <HAL_RCC_OscConfig+0x4e8>)
 8008056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008058:	4a7a      	ldr	r2, [pc, #488]	; (8008244 <HAL_RCC_OscConfig+0x4e8>)
 800805a:	f043 0304 	orr.w	r3, r3, #4
 800805e:	6713      	str	r3, [r2, #112]	; 0x70
 8008060:	4b78      	ldr	r3, [pc, #480]	; (8008244 <HAL_RCC_OscConfig+0x4e8>)
 8008062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008064:	4a77      	ldr	r2, [pc, #476]	; (8008244 <HAL_RCC_OscConfig+0x4e8>)
 8008066:	f043 0301 	orr.w	r3, r3, #1
 800806a:	6713      	str	r3, [r2, #112]	; 0x70
 800806c:	e00b      	b.n	8008086 <HAL_RCC_OscConfig+0x32a>
 800806e:	4b75      	ldr	r3, [pc, #468]	; (8008244 <HAL_RCC_OscConfig+0x4e8>)
 8008070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008072:	4a74      	ldr	r2, [pc, #464]	; (8008244 <HAL_RCC_OscConfig+0x4e8>)
 8008074:	f023 0301 	bic.w	r3, r3, #1
 8008078:	6713      	str	r3, [r2, #112]	; 0x70
 800807a:	4b72      	ldr	r3, [pc, #456]	; (8008244 <HAL_RCC_OscConfig+0x4e8>)
 800807c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800807e:	4a71      	ldr	r2, [pc, #452]	; (8008244 <HAL_RCC_OscConfig+0x4e8>)
 8008080:	f023 0304 	bic.w	r3, r3, #4
 8008084:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d015      	beq.n	80080ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800808e:	f7fb fef7 	bl	8003e80 <HAL_GetTick>
 8008092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008094:	e00a      	b.n	80080ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008096:	f7fb fef3 	bl	8003e80 <HAL_GetTick>
 800809a:	4602      	mov	r2, r0
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	1ad3      	subs	r3, r2, r3
 80080a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d901      	bls.n	80080ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80080a8:	2303      	movs	r3, #3
 80080aa:	e0c5      	b.n	8008238 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080ac:	4b65      	ldr	r3, [pc, #404]	; (8008244 <HAL_RCC_OscConfig+0x4e8>)
 80080ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080b0:	f003 0302 	and.w	r3, r3, #2
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d0ee      	beq.n	8008096 <HAL_RCC_OscConfig+0x33a>
 80080b8:	e014      	b.n	80080e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080ba:	f7fb fee1 	bl	8003e80 <HAL_GetTick>
 80080be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80080c0:	e00a      	b.n	80080d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80080c2:	f7fb fedd 	bl	8003e80 <HAL_GetTick>
 80080c6:	4602      	mov	r2, r0
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	1ad3      	subs	r3, r2, r3
 80080cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d901      	bls.n	80080d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80080d4:	2303      	movs	r3, #3
 80080d6:	e0af      	b.n	8008238 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80080d8:	4b5a      	ldr	r3, [pc, #360]	; (8008244 <HAL_RCC_OscConfig+0x4e8>)
 80080da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080dc:	f003 0302 	and.w	r3, r3, #2
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d1ee      	bne.n	80080c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80080e4:	7dfb      	ldrb	r3, [r7, #23]
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d105      	bne.n	80080f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80080ea:	4b56      	ldr	r3, [pc, #344]	; (8008244 <HAL_RCC_OscConfig+0x4e8>)
 80080ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ee:	4a55      	ldr	r2, [pc, #340]	; (8008244 <HAL_RCC_OscConfig+0x4e8>)
 80080f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	699b      	ldr	r3, [r3, #24]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	f000 809b 	beq.w	8008236 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008100:	4b50      	ldr	r3, [pc, #320]	; (8008244 <HAL_RCC_OscConfig+0x4e8>)
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	f003 030c 	and.w	r3, r3, #12
 8008108:	2b08      	cmp	r3, #8
 800810a:	d05c      	beq.n	80081c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	699b      	ldr	r3, [r3, #24]
 8008110:	2b02      	cmp	r3, #2
 8008112:	d141      	bne.n	8008198 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008114:	4b4c      	ldr	r3, [pc, #304]	; (8008248 <HAL_RCC_OscConfig+0x4ec>)
 8008116:	2200      	movs	r2, #0
 8008118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800811a:	f7fb feb1 	bl	8003e80 <HAL_GetTick>
 800811e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008120:	e008      	b.n	8008134 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008122:	f7fb fead 	bl	8003e80 <HAL_GetTick>
 8008126:	4602      	mov	r2, r0
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	1ad3      	subs	r3, r2, r3
 800812c:	2b02      	cmp	r3, #2
 800812e:	d901      	bls.n	8008134 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008130:	2303      	movs	r3, #3
 8008132:	e081      	b.n	8008238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008134:	4b43      	ldr	r3, [pc, #268]	; (8008244 <HAL_RCC_OscConfig+0x4e8>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800813c:	2b00      	cmp	r3, #0
 800813e:	d1f0      	bne.n	8008122 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	69da      	ldr	r2, [r3, #28]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6a1b      	ldr	r3, [r3, #32]
 8008148:	431a      	orrs	r2, r3
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814e:	019b      	lsls	r3, r3, #6
 8008150:	431a      	orrs	r2, r3
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008156:	085b      	lsrs	r3, r3, #1
 8008158:	3b01      	subs	r3, #1
 800815a:	041b      	lsls	r3, r3, #16
 800815c:	431a      	orrs	r2, r3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008162:	061b      	lsls	r3, r3, #24
 8008164:	4937      	ldr	r1, [pc, #220]	; (8008244 <HAL_RCC_OscConfig+0x4e8>)
 8008166:	4313      	orrs	r3, r2
 8008168:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800816a:	4b37      	ldr	r3, [pc, #220]	; (8008248 <HAL_RCC_OscConfig+0x4ec>)
 800816c:	2201      	movs	r2, #1
 800816e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008170:	f7fb fe86 	bl	8003e80 <HAL_GetTick>
 8008174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008176:	e008      	b.n	800818a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008178:	f7fb fe82 	bl	8003e80 <HAL_GetTick>
 800817c:	4602      	mov	r2, r0
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	2b02      	cmp	r3, #2
 8008184:	d901      	bls.n	800818a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008186:	2303      	movs	r3, #3
 8008188:	e056      	b.n	8008238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800818a:	4b2e      	ldr	r3, [pc, #184]	; (8008244 <HAL_RCC_OscConfig+0x4e8>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008192:	2b00      	cmp	r3, #0
 8008194:	d0f0      	beq.n	8008178 <HAL_RCC_OscConfig+0x41c>
 8008196:	e04e      	b.n	8008236 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008198:	4b2b      	ldr	r3, [pc, #172]	; (8008248 <HAL_RCC_OscConfig+0x4ec>)
 800819a:	2200      	movs	r2, #0
 800819c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800819e:	f7fb fe6f 	bl	8003e80 <HAL_GetTick>
 80081a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081a4:	e008      	b.n	80081b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081a6:	f7fb fe6b 	bl	8003e80 <HAL_GetTick>
 80081aa:	4602      	mov	r2, r0
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	1ad3      	subs	r3, r2, r3
 80081b0:	2b02      	cmp	r3, #2
 80081b2:	d901      	bls.n	80081b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80081b4:	2303      	movs	r3, #3
 80081b6:	e03f      	b.n	8008238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081b8:	4b22      	ldr	r3, [pc, #136]	; (8008244 <HAL_RCC_OscConfig+0x4e8>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d1f0      	bne.n	80081a6 <HAL_RCC_OscConfig+0x44a>
 80081c4:	e037      	b.n	8008236 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	699b      	ldr	r3, [r3, #24]
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d101      	bne.n	80081d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	e032      	b.n	8008238 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80081d2:	4b1c      	ldr	r3, [pc, #112]	; (8008244 <HAL_RCC_OscConfig+0x4e8>)
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	699b      	ldr	r3, [r3, #24]
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d028      	beq.n	8008232 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d121      	bne.n	8008232 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d11a      	bne.n	8008232 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008202:	4013      	ands	r3, r2
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008208:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800820a:	4293      	cmp	r3, r2
 800820c:	d111      	bne.n	8008232 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008218:	085b      	lsrs	r3, r3, #1
 800821a:	3b01      	subs	r3, #1
 800821c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800821e:	429a      	cmp	r2, r3
 8008220:	d107      	bne.n	8008232 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800822c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800822e:	429a      	cmp	r2, r3
 8008230:	d001      	beq.n	8008236 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	e000      	b.n	8008238 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8008236:	2300      	movs	r3, #0
}
 8008238:	4618      	mov	r0, r3
 800823a:	3718      	adds	r7, #24
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	40007000 	.word	0x40007000
 8008244:	40023800 	.word	0x40023800
 8008248:	42470060 	.word	0x42470060

0800824c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d101      	bne.n	8008260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800825c:	2301      	movs	r3, #1
 800825e:	e0cc      	b.n	80083fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008260:	4b68      	ldr	r3, [pc, #416]	; (8008404 <HAL_RCC_ClockConfig+0x1b8>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f003 0307 	and.w	r3, r3, #7
 8008268:	683a      	ldr	r2, [r7, #0]
 800826a:	429a      	cmp	r2, r3
 800826c:	d90c      	bls.n	8008288 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800826e:	4b65      	ldr	r3, [pc, #404]	; (8008404 <HAL_RCC_ClockConfig+0x1b8>)
 8008270:	683a      	ldr	r2, [r7, #0]
 8008272:	b2d2      	uxtb	r2, r2
 8008274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008276:	4b63      	ldr	r3, [pc, #396]	; (8008404 <HAL_RCC_ClockConfig+0x1b8>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f003 0307 	and.w	r3, r3, #7
 800827e:	683a      	ldr	r2, [r7, #0]
 8008280:	429a      	cmp	r2, r3
 8008282:	d001      	beq.n	8008288 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008284:	2301      	movs	r3, #1
 8008286:	e0b8      	b.n	80083fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f003 0302 	and.w	r3, r3, #2
 8008290:	2b00      	cmp	r3, #0
 8008292:	d020      	beq.n	80082d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f003 0304 	and.w	r3, r3, #4
 800829c:	2b00      	cmp	r3, #0
 800829e:	d005      	beq.n	80082ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80082a0:	4b59      	ldr	r3, [pc, #356]	; (8008408 <HAL_RCC_ClockConfig+0x1bc>)
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	4a58      	ldr	r2, [pc, #352]	; (8008408 <HAL_RCC_ClockConfig+0x1bc>)
 80082a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80082aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f003 0308 	and.w	r3, r3, #8
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d005      	beq.n	80082c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80082b8:	4b53      	ldr	r3, [pc, #332]	; (8008408 <HAL_RCC_ClockConfig+0x1bc>)
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	4a52      	ldr	r2, [pc, #328]	; (8008408 <HAL_RCC_ClockConfig+0x1bc>)
 80082be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80082c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80082c4:	4b50      	ldr	r3, [pc, #320]	; (8008408 <HAL_RCC_ClockConfig+0x1bc>)
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	494d      	ldr	r1, [pc, #308]	; (8008408 <HAL_RCC_ClockConfig+0x1bc>)
 80082d2:	4313      	orrs	r3, r2
 80082d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f003 0301 	and.w	r3, r3, #1
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d044      	beq.n	800836c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d107      	bne.n	80082fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082ea:	4b47      	ldr	r3, [pc, #284]	; (8008408 <HAL_RCC_ClockConfig+0x1bc>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d119      	bne.n	800832a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	e07f      	b.n	80083fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	2b02      	cmp	r3, #2
 8008300:	d003      	beq.n	800830a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008306:	2b03      	cmp	r3, #3
 8008308:	d107      	bne.n	800831a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800830a:	4b3f      	ldr	r3, [pc, #252]	; (8008408 <HAL_RCC_ClockConfig+0x1bc>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008312:	2b00      	cmp	r3, #0
 8008314:	d109      	bne.n	800832a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	e06f      	b.n	80083fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800831a:	4b3b      	ldr	r3, [pc, #236]	; (8008408 <HAL_RCC_ClockConfig+0x1bc>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f003 0302 	and.w	r3, r3, #2
 8008322:	2b00      	cmp	r3, #0
 8008324:	d101      	bne.n	800832a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008326:	2301      	movs	r3, #1
 8008328:	e067      	b.n	80083fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800832a:	4b37      	ldr	r3, [pc, #220]	; (8008408 <HAL_RCC_ClockConfig+0x1bc>)
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	f023 0203 	bic.w	r2, r3, #3
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	4934      	ldr	r1, [pc, #208]	; (8008408 <HAL_RCC_ClockConfig+0x1bc>)
 8008338:	4313      	orrs	r3, r2
 800833a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800833c:	f7fb fda0 	bl	8003e80 <HAL_GetTick>
 8008340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008342:	e00a      	b.n	800835a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008344:	f7fb fd9c 	bl	8003e80 <HAL_GetTick>
 8008348:	4602      	mov	r2, r0
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	1ad3      	subs	r3, r2, r3
 800834e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008352:	4293      	cmp	r3, r2
 8008354:	d901      	bls.n	800835a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008356:	2303      	movs	r3, #3
 8008358:	e04f      	b.n	80083fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800835a:	4b2b      	ldr	r3, [pc, #172]	; (8008408 <HAL_RCC_ClockConfig+0x1bc>)
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	f003 020c 	and.w	r2, r3, #12
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	429a      	cmp	r2, r3
 800836a:	d1eb      	bne.n	8008344 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800836c:	4b25      	ldr	r3, [pc, #148]	; (8008404 <HAL_RCC_ClockConfig+0x1b8>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f003 0307 	and.w	r3, r3, #7
 8008374:	683a      	ldr	r2, [r7, #0]
 8008376:	429a      	cmp	r2, r3
 8008378:	d20c      	bcs.n	8008394 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800837a:	4b22      	ldr	r3, [pc, #136]	; (8008404 <HAL_RCC_ClockConfig+0x1b8>)
 800837c:	683a      	ldr	r2, [r7, #0]
 800837e:	b2d2      	uxtb	r2, r2
 8008380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008382:	4b20      	ldr	r3, [pc, #128]	; (8008404 <HAL_RCC_ClockConfig+0x1b8>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f003 0307 	and.w	r3, r3, #7
 800838a:	683a      	ldr	r2, [r7, #0]
 800838c:	429a      	cmp	r2, r3
 800838e:	d001      	beq.n	8008394 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	e032      	b.n	80083fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f003 0304 	and.w	r3, r3, #4
 800839c:	2b00      	cmp	r3, #0
 800839e:	d008      	beq.n	80083b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80083a0:	4b19      	ldr	r3, [pc, #100]	; (8008408 <HAL_RCC_ClockConfig+0x1bc>)
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	4916      	ldr	r1, [pc, #88]	; (8008408 <HAL_RCC_ClockConfig+0x1bc>)
 80083ae:	4313      	orrs	r3, r2
 80083b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f003 0308 	and.w	r3, r3, #8
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d009      	beq.n	80083d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80083be:	4b12      	ldr	r3, [pc, #72]	; (8008408 <HAL_RCC_ClockConfig+0x1bc>)
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	00db      	lsls	r3, r3, #3
 80083cc:	490e      	ldr	r1, [pc, #56]	; (8008408 <HAL_RCC_ClockConfig+0x1bc>)
 80083ce:	4313      	orrs	r3, r2
 80083d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80083d2:	f000 f821 	bl	8008418 <HAL_RCC_GetSysClockFreq>
 80083d6:	4602      	mov	r2, r0
 80083d8:	4b0b      	ldr	r3, [pc, #44]	; (8008408 <HAL_RCC_ClockConfig+0x1bc>)
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	091b      	lsrs	r3, r3, #4
 80083de:	f003 030f 	and.w	r3, r3, #15
 80083e2:	490a      	ldr	r1, [pc, #40]	; (800840c <HAL_RCC_ClockConfig+0x1c0>)
 80083e4:	5ccb      	ldrb	r3, [r1, r3]
 80083e6:	fa22 f303 	lsr.w	r3, r2, r3
 80083ea:	4a09      	ldr	r2, [pc, #36]	; (8008410 <HAL_RCC_ClockConfig+0x1c4>)
 80083ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80083ee:	4b09      	ldr	r3, [pc, #36]	; (8008414 <HAL_RCC_ClockConfig+0x1c8>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7fb fd00 	bl	8003df8 <HAL_InitTick>

  return HAL_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	40023c00 	.word	0x40023c00
 8008408:	40023800 	.word	0x40023800
 800840c:	0800b550 	.word	0x0800b550
 8008410:	20000108 	.word	0x20000108
 8008414:	2000010c 	.word	0x2000010c

08008418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008418:	b5b0      	push	{r4, r5, r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800841e:	2100      	movs	r1, #0
 8008420:	6079      	str	r1, [r7, #4]
 8008422:	2100      	movs	r1, #0
 8008424:	60f9      	str	r1, [r7, #12]
 8008426:	2100      	movs	r1, #0
 8008428:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800842a:	2100      	movs	r1, #0
 800842c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800842e:	4952      	ldr	r1, [pc, #328]	; (8008578 <HAL_RCC_GetSysClockFreq+0x160>)
 8008430:	6889      	ldr	r1, [r1, #8]
 8008432:	f001 010c 	and.w	r1, r1, #12
 8008436:	2908      	cmp	r1, #8
 8008438:	d00d      	beq.n	8008456 <HAL_RCC_GetSysClockFreq+0x3e>
 800843a:	2908      	cmp	r1, #8
 800843c:	f200 8094 	bhi.w	8008568 <HAL_RCC_GetSysClockFreq+0x150>
 8008440:	2900      	cmp	r1, #0
 8008442:	d002      	beq.n	800844a <HAL_RCC_GetSysClockFreq+0x32>
 8008444:	2904      	cmp	r1, #4
 8008446:	d003      	beq.n	8008450 <HAL_RCC_GetSysClockFreq+0x38>
 8008448:	e08e      	b.n	8008568 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800844a:	4b4c      	ldr	r3, [pc, #304]	; (800857c <HAL_RCC_GetSysClockFreq+0x164>)
 800844c:	60bb      	str	r3, [r7, #8]
       break;
 800844e:	e08e      	b.n	800856e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008450:	4b4b      	ldr	r3, [pc, #300]	; (8008580 <HAL_RCC_GetSysClockFreq+0x168>)
 8008452:	60bb      	str	r3, [r7, #8]
      break;
 8008454:	e08b      	b.n	800856e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008456:	4948      	ldr	r1, [pc, #288]	; (8008578 <HAL_RCC_GetSysClockFreq+0x160>)
 8008458:	6849      	ldr	r1, [r1, #4]
 800845a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800845e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008460:	4945      	ldr	r1, [pc, #276]	; (8008578 <HAL_RCC_GetSysClockFreq+0x160>)
 8008462:	6849      	ldr	r1, [r1, #4]
 8008464:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8008468:	2900      	cmp	r1, #0
 800846a:	d024      	beq.n	80084b6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800846c:	4942      	ldr	r1, [pc, #264]	; (8008578 <HAL_RCC_GetSysClockFreq+0x160>)
 800846e:	6849      	ldr	r1, [r1, #4]
 8008470:	0989      	lsrs	r1, r1, #6
 8008472:	4608      	mov	r0, r1
 8008474:	f04f 0100 	mov.w	r1, #0
 8008478:	f240 14ff 	movw	r4, #511	; 0x1ff
 800847c:	f04f 0500 	mov.w	r5, #0
 8008480:	ea00 0204 	and.w	r2, r0, r4
 8008484:	ea01 0305 	and.w	r3, r1, r5
 8008488:	493d      	ldr	r1, [pc, #244]	; (8008580 <HAL_RCC_GetSysClockFreq+0x168>)
 800848a:	fb01 f003 	mul.w	r0, r1, r3
 800848e:	2100      	movs	r1, #0
 8008490:	fb01 f102 	mul.w	r1, r1, r2
 8008494:	1844      	adds	r4, r0, r1
 8008496:	493a      	ldr	r1, [pc, #232]	; (8008580 <HAL_RCC_GetSysClockFreq+0x168>)
 8008498:	fba2 0101 	umull	r0, r1, r2, r1
 800849c:	1863      	adds	r3, r4, r1
 800849e:	4619      	mov	r1, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	461a      	mov	r2, r3
 80084a4:	f04f 0300 	mov.w	r3, #0
 80084a8:	f7f7 fe8e 	bl	80001c8 <__aeabi_uldivmod>
 80084ac:	4602      	mov	r2, r0
 80084ae:	460b      	mov	r3, r1
 80084b0:	4613      	mov	r3, r2
 80084b2:	60fb      	str	r3, [r7, #12]
 80084b4:	e04a      	b.n	800854c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80084b6:	4b30      	ldr	r3, [pc, #192]	; (8008578 <HAL_RCC_GetSysClockFreq+0x160>)
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	099b      	lsrs	r3, r3, #6
 80084bc:	461a      	mov	r2, r3
 80084be:	f04f 0300 	mov.w	r3, #0
 80084c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80084c6:	f04f 0100 	mov.w	r1, #0
 80084ca:	ea02 0400 	and.w	r4, r2, r0
 80084ce:	ea03 0501 	and.w	r5, r3, r1
 80084d2:	4620      	mov	r0, r4
 80084d4:	4629      	mov	r1, r5
 80084d6:	f04f 0200 	mov.w	r2, #0
 80084da:	f04f 0300 	mov.w	r3, #0
 80084de:	014b      	lsls	r3, r1, #5
 80084e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80084e4:	0142      	lsls	r2, r0, #5
 80084e6:	4610      	mov	r0, r2
 80084e8:	4619      	mov	r1, r3
 80084ea:	1b00      	subs	r0, r0, r4
 80084ec:	eb61 0105 	sbc.w	r1, r1, r5
 80084f0:	f04f 0200 	mov.w	r2, #0
 80084f4:	f04f 0300 	mov.w	r3, #0
 80084f8:	018b      	lsls	r3, r1, #6
 80084fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80084fe:	0182      	lsls	r2, r0, #6
 8008500:	1a12      	subs	r2, r2, r0
 8008502:	eb63 0301 	sbc.w	r3, r3, r1
 8008506:	f04f 0000 	mov.w	r0, #0
 800850a:	f04f 0100 	mov.w	r1, #0
 800850e:	00d9      	lsls	r1, r3, #3
 8008510:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008514:	00d0      	lsls	r0, r2, #3
 8008516:	4602      	mov	r2, r0
 8008518:	460b      	mov	r3, r1
 800851a:	1912      	adds	r2, r2, r4
 800851c:	eb45 0303 	adc.w	r3, r5, r3
 8008520:	f04f 0000 	mov.w	r0, #0
 8008524:	f04f 0100 	mov.w	r1, #0
 8008528:	0299      	lsls	r1, r3, #10
 800852a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800852e:	0290      	lsls	r0, r2, #10
 8008530:	4602      	mov	r2, r0
 8008532:	460b      	mov	r3, r1
 8008534:	4610      	mov	r0, r2
 8008536:	4619      	mov	r1, r3
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	461a      	mov	r2, r3
 800853c:	f04f 0300 	mov.w	r3, #0
 8008540:	f7f7 fe42 	bl	80001c8 <__aeabi_uldivmod>
 8008544:	4602      	mov	r2, r0
 8008546:	460b      	mov	r3, r1
 8008548:	4613      	mov	r3, r2
 800854a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800854c:	4b0a      	ldr	r3, [pc, #40]	; (8008578 <HAL_RCC_GetSysClockFreq+0x160>)
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	0c1b      	lsrs	r3, r3, #16
 8008552:	f003 0303 	and.w	r3, r3, #3
 8008556:	3301      	adds	r3, #1
 8008558:	005b      	lsls	r3, r3, #1
 800855a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	fbb2 f3f3 	udiv	r3, r2, r3
 8008564:	60bb      	str	r3, [r7, #8]
      break;
 8008566:	e002      	b.n	800856e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008568:	4b04      	ldr	r3, [pc, #16]	; (800857c <HAL_RCC_GetSysClockFreq+0x164>)
 800856a:	60bb      	str	r3, [r7, #8]
      break;
 800856c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800856e:	68bb      	ldr	r3, [r7, #8]
}
 8008570:	4618      	mov	r0, r3
 8008572:	3710      	adds	r7, #16
 8008574:	46bd      	mov	sp, r7
 8008576:	bdb0      	pop	{r4, r5, r7, pc}
 8008578:	40023800 	.word	0x40023800
 800857c:	00f42400 	.word	0x00f42400
 8008580:	017d7840 	.word	0x017d7840

08008584 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008584:	b480      	push	{r7}
 8008586:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008588:	4b03      	ldr	r3, [pc, #12]	; (8008598 <HAL_RCC_GetHCLKFreq+0x14>)
 800858a:	681b      	ldr	r3, [r3, #0]
}
 800858c:	4618      	mov	r0, r3
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop
 8008598:	20000108 	.word	0x20000108

0800859c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80085a0:	f7ff fff0 	bl	8008584 <HAL_RCC_GetHCLKFreq>
 80085a4:	4602      	mov	r2, r0
 80085a6:	4b05      	ldr	r3, [pc, #20]	; (80085bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	0a9b      	lsrs	r3, r3, #10
 80085ac:	f003 0307 	and.w	r3, r3, #7
 80085b0:	4903      	ldr	r1, [pc, #12]	; (80085c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80085b2:	5ccb      	ldrb	r3, [r1, r3]
 80085b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	bd80      	pop	{r7, pc}
 80085bc:	40023800 	.word	0x40023800
 80085c0:	0800b560 	.word	0x0800b560

080085c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80085c8:	f7ff ffdc 	bl	8008584 <HAL_RCC_GetHCLKFreq>
 80085cc:	4602      	mov	r2, r0
 80085ce:	4b05      	ldr	r3, [pc, #20]	; (80085e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	0b5b      	lsrs	r3, r3, #13
 80085d4:	f003 0307 	and.w	r3, r3, #7
 80085d8:	4903      	ldr	r1, [pc, #12]	; (80085e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80085da:	5ccb      	ldrb	r3, [r1, r3]
 80085dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	40023800 	.word	0x40023800
 80085e8:	0800b560 	.word	0x0800b560

080085ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d101      	bne.n	80085fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	e041      	b.n	8008682 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008604:	b2db      	uxtb	r3, r3
 8008606:	2b00      	cmp	r3, #0
 8008608:	d106      	bne.n	8008618 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f7fa ff72 	bl	80034fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2202      	movs	r2, #2
 800861c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	3304      	adds	r3, #4
 8008628:	4619      	mov	r1, r3
 800862a:	4610      	mov	r0, r2
 800862c:	f000 fb48 	bl	8008cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2201      	movs	r2, #1
 800863c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2201      	movs	r2, #1
 8008654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2201      	movs	r2, #1
 8008664:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2201      	movs	r2, #1
 800867c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008680:	2300      	movs	r3, #0
}
 8008682:	4618      	mov	r0, r3
 8008684:	3708      	adds	r7, #8
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b082      	sub	sp, #8
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d101      	bne.n	800869c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008698:	2301      	movs	r3, #1
 800869a:	e041      	b.n	8008720 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d106      	bne.n	80086b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 f839 	bl	8008728 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2202      	movs	r2, #2
 80086ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	3304      	adds	r3, #4
 80086c6:	4619      	mov	r1, r3
 80086c8:	4610      	mov	r0, r2
 80086ca:	f000 faf9 	bl	8008cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2201      	movs	r2, #1
 80086d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2201      	movs	r2, #1
 80086da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2201      	movs	r2, #1
 80086e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2201      	movs	r2, #1
 80086ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2201      	movs	r2, #1
 80086f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2201      	movs	r2, #1
 80086fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2201      	movs	r2, #1
 8008702:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2201      	movs	r2, #1
 800870a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2201      	movs	r2, #1
 8008712:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2201      	movs	r2, #1
 800871a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800871e:	2300      	movs	r3, #0
}
 8008720:	4618      	mov	r0, r3
 8008722:	3708      	adds	r7, #8
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008730:	bf00      	nop
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d109      	bne.n	8008760 <HAL_TIM_PWM_Start+0x24>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008752:	b2db      	uxtb	r3, r3
 8008754:	2b01      	cmp	r3, #1
 8008756:	bf14      	ite	ne
 8008758:	2301      	movne	r3, #1
 800875a:	2300      	moveq	r3, #0
 800875c:	b2db      	uxtb	r3, r3
 800875e:	e022      	b.n	80087a6 <HAL_TIM_PWM_Start+0x6a>
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	2b04      	cmp	r3, #4
 8008764:	d109      	bne.n	800877a <HAL_TIM_PWM_Start+0x3e>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800876c:	b2db      	uxtb	r3, r3
 800876e:	2b01      	cmp	r3, #1
 8008770:	bf14      	ite	ne
 8008772:	2301      	movne	r3, #1
 8008774:	2300      	moveq	r3, #0
 8008776:	b2db      	uxtb	r3, r3
 8008778:	e015      	b.n	80087a6 <HAL_TIM_PWM_Start+0x6a>
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	2b08      	cmp	r3, #8
 800877e:	d109      	bne.n	8008794 <HAL_TIM_PWM_Start+0x58>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008786:	b2db      	uxtb	r3, r3
 8008788:	2b01      	cmp	r3, #1
 800878a:	bf14      	ite	ne
 800878c:	2301      	movne	r3, #1
 800878e:	2300      	moveq	r3, #0
 8008790:	b2db      	uxtb	r3, r3
 8008792:	e008      	b.n	80087a6 <HAL_TIM_PWM_Start+0x6a>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800879a:	b2db      	uxtb	r3, r3
 800879c:	2b01      	cmp	r3, #1
 800879e:	bf14      	ite	ne
 80087a0:	2301      	movne	r3, #1
 80087a2:	2300      	moveq	r3, #0
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d001      	beq.n	80087ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e07c      	b.n	80088a8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d104      	bne.n	80087be <HAL_TIM_PWM_Start+0x82>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2202      	movs	r2, #2
 80087b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80087bc:	e013      	b.n	80087e6 <HAL_TIM_PWM_Start+0xaa>
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	2b04      	cmp	r3, #4
 80087c2:	d104      	bne.n	80087ce <HAL_TIM_PWM_Start+0x92>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2202      	movs	r2, #2
 80087c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80087cc:	e00b      	b.n	80087e6 <HAL_TIM_PWM_Start+0xaa>
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	2b08      	cmp	r3, #8
 80087d2:	d104      	bne.n	80087de <HAL_TIM_PWM_Start+0xa2>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2202      	movs	r2, #2
 80087d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087dc:	e003      	b.n	80087e6 <HAL_TIM_PWM_Start+0xaa>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2202      	movs	r2, #2
 80087e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2201      	movs	r2, #1
 80087ec:	6839      	ldr	r1, [r7, #0]
 80087ee:	4618      	mov	r0, r3
 80087f0:	f000 fd50 	bl	8009294 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a2d      	ldr	r2, [pc, #180]	; (80088b0 <HAL_TIM_PWM_Start+0x174>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d004      	beq.n	8008808 <HAL_TIM_PWM_Start+0xcc>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a2c      	ldr	r2, [pc, #176]	; (80088b4 <HAL_TIM_PWM_Start+0x178>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d101      	bne.n	800880c <HAL_TIM_PWM_Start+0xd0>
 8008808:	2301      	movs	r3, #1
 800880a:	e000      	b.n	800880e <HAL_TIM_PWM_Start+0xd2>
 800880c:	2300      	movs	r3, #0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d007      	beq.n	8008822 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008820:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a22      	ldr	r2, [pc, #136]	; (80088b0 <HAL_TIM_PWM_Start+0x174>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d022      	beq.n	8008872 <HAL_TIM_PWM_Start+0x136>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008834:	d01d      	beq.n	8008872 <HAL_TIM_PWM_Start+0x136>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a1f      	ldr	r2, [pc, #124]	; (80088b8 <HAL_TIM_PWM_Start+0x17c>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d018      	beq.n	8008872 <HAL_TIM_PWM_Start+0x136>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a1d      	ldr	r2, [pc, #116]	; (80088bc <HAL_TIM_PWM_Start+0x180>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d013      	beq.n	8008872 <HAL_TIM_PWM_Start+0x136>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a1c      	ldr	r2, [pc, #112]	; (80088c0 <HAL_TIM_PWM_Start+0x184>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d00e      	beq.n	8008872 <HAL_TIM_PWM_Start+0x136>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a16      	ldr	r2, [pc, #88]	; (80088b4 <HAL_TIM_PWM_Start+0x178>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d009      	beq.n	8008872 <HAL_TIM_PWM_Start+0x136>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a18      	ldr	r2, [pc, #96]	; (80088c4 <HAL_TIM_PWM_Start+0x188>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d004      	beq.n	8008872 <HAL_TIM_PWM_Start+0x136>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a16      	ldr	r2, [pc, #88]	; (80088c8 <HAL_TIM_PWM_Start+0x18c>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d111      	bne.n	8008896 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	f003 0307 	and.w	r3, r3, #7
 800887c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2b06      	cmp	r3, #6
 8008882:	d010      	beq.n	80088a6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f042 0201 	orr.w	r2, r2, #1
 8008892:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008894:	e007      	b.n	80088a6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f042 0201 	orr.w	r2, r2, #1
 80088a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3710      	adds	r7, #16
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}
 80088b0:	40010000 	.word	0x40010000
 80088b4:	40010400 	.word	0x40010400
 80088b8:	40000400 	.word	0x40000400
 80088bc:	40000800 	.word	0x40000800
 80088c0:	40000c00 	.word	0x40000c00
 80088c4:	40014000 	.word	0x40014000
 80088c8:	40001800 	.word	0x40001800

080088cc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	2200      	movs	r2, #0
 80088dc:	6839      	ldr	r1, [r7, #0]
 80088de:	4618      	mov	r0, r3
 80088e0:	f000 fcd8 	bl	8009294 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a2e      	ldr	r2, [pc, #184]	; (80089a4 <HAL_TIM_PWM_Stop+0xd8>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d004      	beq.n	80088f8 <HAL_TIM_PWM_Stop+0x2c>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a2d      	ldr	r2, [pc, #180]	; (80089a8 <HAL_TIM_PWM_Stop+0xdc>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d101      	bne.n	80088fc <HAL_TIM_PWM_Stop+0x30>
 80088f8:	2301      	movs	r3, #1
 80088fa:	e000      	b.n	80088fe <HAL_TIM_PWM_Stop+0x32>
 80088fc:	2300      	movs	r3, #0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d017      	beq.n	8008932 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	6a1a      	ldr	r2, [r3, #32]
 8008908:	f241 1311 	movw	r3, #4369	; 0x1111
 800890c:	4013      	ands	r3, r2
 800890e:	2b00      	cmp	r3, #0
 8008910:	d10f      	bne.n	8008932 <HAL_TIM_PWM_Stop+0x66>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	6a1a      	ldr	r2, [r3, #32]
 8008918:	f240 4344 	movw	r3, #1092	; 0x444
 800891c:	4013      	ands	r3, r2
 800891e:	2b00      	cmp	r3, #0
 8008920:	d107      	bne.n	8008932 <HAL_TIM_PWM_Stop+0x66>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008930:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	6a1a      	ldr	r2, [r3, #32]
 8008938:	f241 1311 	movw	r3, #4369	; 0x1111
 800893c:	4013      	ands	r3, r2
 800893e:	2b00      	cmp	r3, #0
 8008940:	d10f      	bne.n	8008962 <HAL_TIM_PWM_Stop+0x96>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	6a1a      	ldr	r2, [r3, #32]
 8008948:	f240 4344 	movw	r3, #1092	; 0x444
 800894c:	4013      	ands	r3, r2
 800894e:	2b00      	cmp	r3, #0
 8008950:	d107      	bne.n	8008962 <HAL_TIM_PWM_Stop+0x96>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f022 0201 	bic.w	r2, r2, #1
 8008960:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d104      	bne.n	8008972 <HAL_TIM_PWM_Stop+0xa6>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008970:	e013      	b.n	800899a <HAL_TIM_PWM_Stop+0xce>
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	2b04      	cmp	r3, #4
 8008976:	d104      	bne.n	8008982 <HAL_TIM_PWM_Stop+0xb6>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2201      	movs	r2, #1
 800897c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008980:	e00b      	b.n	800899a <HAL_TIM_PWM_Stop+0xce>
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	2b08      	cmp	r3, #8
 8008986:	d104      	bne.n	8008992 <HAL_TIM_PWM_Stop+0xc6>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2201      	movs	r2, #1
 800898c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008990:	e003      	b.n	800899a <HAL_TIM_PWM_Stop+0xce>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2201      	movs	r2, #1
 8008996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3708      	adds	r7, #8
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	40010000 	.word	0x40010000
 80089a8:	40010400 	.word	0x40010400

080089ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b086      	sub	sp, #24
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80089b8:	2300      	movs	r3, #0
 80089ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d101      	bne.n	80089ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80089c6:	2302      	movs	r3, #2
 80089c8:	e0ae      	b.n	8008b28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2201      	movs	r2, #1
 80089ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2b0c      	cmp	r3, #12
 80089d6:	f200 809f 	bhi.w	8008b18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80089da:	a201      	add	r2, pc, #4	; (adr r2, 80089e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80089dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089e0:	08008a15 	.word	0x08008a15
 80089e4:	08008b19 	.word	0x08008b19
 80089e8:	08008b19 	.word	0x08008b19
 80089ec:	08008b19 	.word	0x08008b19
 80089f0:	08008a55 	.word	0x08008a55
 80089f4:	08008b19 	.word	0x08008b19
 80089f8:	08008b19 	.word	0x08008b19
 80089fc:	08008b19 	.word	0x08008b19
 8008a00:	08008a97 	.word	0x08008a97
 8008a04:	08008b19 	.word	0x08008b19
 8008a08:	08008b19 	.word	0x08008b19
 8008a0c:	08008b19 	.word	0x08008b19
 8008a10:	08008ad7 	.word	0x08008ad7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	68b9      	ldr	r1, [r7, #8]
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f000 f9f0 	bl	8008e00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	699a      	ldr	r2, [r3, #24]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f042 0208 	orr.w	r2, r2, #8
 8008a2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	699a      	ldr	r2, [r3, #24]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f022 0204 	bic.w	r2, r2, #4
 8008a3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	6999      	ldr	r1, [r3, #24]
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	691a      	ldr	r2, [r3, #16]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	430a      	orrs	r2, r1
 8008a50:	619a      	str	r2, [r3, #24]
      break;
 8008a52:	e064      	b.n	8008b1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	68b9      	ldr	r1, [r7, #8]
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f000 fa40 	bl	8008ee0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	699a      	ldr	r2, [r3, #24]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	699a      	ldr	r2, [r3, #24]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	6999      	ldr	r1, [r3, #24]
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	021a      	lsls	r2, r3, #8
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	430a      	orrs	r2, r1
 8008a92:	619a      	str	r2, [r3, #24]
      break;
 8008a94:	e043      	b.n	8008b1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	68b9      	ldr	r1, [r7, #8]
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f000 fa95 	bl	8008fcc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	69da      	ldr	r2, [r3, #28]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f042 0208 	orr.w	r2, r2, #8
 8008ab0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	69da      	ldr	r2, [r3, #28]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f022 0204 	bic.w	r2, r2, #4
 8008ac0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	69d9      	ldr	r1, [r3, #28]
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	691a      	ldr	r2, [r3, #16]
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	430a      	orrs	r2, r1
 8008ad2:	61da      	str	r2, [r3, #28]
      break;
 8008ad4:	e023      	b.n	8008b1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	68b9      	ldr	r1, [r7, #8]
 8008adc:	4618      	mov	r0, r3
 8008ade:	f000 fae9 	bl	80090b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	69da      	ldr	r2, [r3, #28]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008af0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	69da      	ldr	r2, [r3, #28]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	69d9      	ldr	r1, [r3, #28]
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	691b      	ldr	r3, [r3, #16]
 8008b0c:	021a      	lsls	r2, r3, #8
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	430a      	orrs	r2, r1
 8008b14:	61da      	str	r2, [r3, #28]
      break;
 8008b16:	e002      	b.n	8008b1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	75fb      	strb	r3, [r7, #23]
      break;
 8008b1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2200      	movs	r2, #0
 8008b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3718      	adds	r7, #24
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d101      	bne.n	8008b4c <HAL_TIM_ConfigClockSource+0x1c>
 8008b48:	2302      	movs	r3, #2
 8008b4a:	e0b4      	b.n	8008cb6 <HAL_TIM_ConfigClockSource+0x186>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2202      	movs	r2, #2
 8008b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	689b      	ldr	r3, [r3, #8]
 8008b62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008b6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	68ba      	ldr	r2, [r7, #8]
 8008b7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b84:	d03e      	beq.n	8008c04 <HAL_TIM_ConfigClockSource+0xd4>
 8008b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b8a:	f200 8087 	bhi.w	8008c9c <HAL_TIM_ConfigClockSource+0x16c>
 8008b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b92:	f000 8086 	beq.w	8008ca2 <HAL_TIM_ConfigClockSource+0x172>
 8008b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b9a:	d87f      	bhi.n	8008c9c <HAL_TIM_ConfigClockSource+0x16c>
 8008b9c:	2b70      	cmp	r3, #112	; 0x70
 8008b9e:	d01a      	beq.n	8008bd6 <HAL_TIM_ConfigClockSource+0xa6>
 8008ba0:	2b70      	cmp	r3, #112	; 0x70
 8008ba2:	d87b      	bhi.n	8008c9c <HAL_TIM_ConfigClockSource+0x16c>
 8008ba4:	2b60      	cmp	r3, #96	; 0x60
 8008ba6:	d050      	beq.n	8008c4a <HAL_TIM_ConfigClockSource+0x11a>
 8008ba8:	2b60      	cmp	r3, #96	; 0x60
 8008baa:	d877      	bhi.n	8008c9c <HAL_TIM_ConfigClockSource+0x16c>
 8008bac:	2b50      	cmp	r3, #80	; 0x50
 8008bae:	d03c      	beq.n	8008c2a <HAL_TIM_ConfigClockSource+0xfa>
 8008bb0:	2b50      	cmp	r3, #80	; 0x50
 8008bb2:	d873      	bhi.n	8008c9c <HAL_TIM_ConfigClockSource+0x16c>
 8008bb4:	2b40      	cmp	r3, #64	; 0x40
 8008bb6:	d058      	beq.n	8008c6a <HAL_TIM_ConfigClockSource+0x13a>
 8008bb8:	2b40      	cmp	r3, #64	; 0x40
 8008bba:	d86f      	bhi.n	8008c9c <HAL_TIM_ConfigClockSource+0x16c>
 8008bbc:	2b30      	cmp	r3, #48	; 0x30
 8008bbe:	d064      	beq.n	8008c8a <HAL_TIM_ConfigClockSource+0x15a>
 8008bc0:	2b30      	cmp	r3, #48	; 0x30
 8008bc2:	d86b      	bhi.n	8008c9c <HAL_TIM_ConfigClockSource+0x16c>
 8008bc4:	2b20      	cmp	r3, #32
 8008bc6:	d060      	beq.n	8008c8a <HAL_TIM_ConfigClockSource+0x15a>
 8008bc8:	2b20      	cmp	r3, #32
 8008bca:	d867      	bhi.n	8008c9c <HAL_TIM_ConfigClockSource+0x16c>
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d05c      	beq.n	8008c8a <HAL_TIM_ConfigClockSource+0x15a>
 8008bd0:	2b10      	cmp	r3, #16
 8008bd2:	d05a      	beq.n	8008c8a <HAL_TIM_ConfigClockSource+0x15a>
 8008bd4:	e062      	b.n	8008c9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6818      	ldr	r0, [r3, #0]
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	6899      	ldr	r1, [r3, #8]
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	685a      	ldr	r2, [r3, #4]
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	f000 fb35 	bl	8009254 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	689b      	ldr	r3, [r3, #8]
 8008bf0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008bf8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	68ba      	ldr	r2, [r7, #8]
 8008c00:	609a      	str	r2, [r3, #8]
      break;
 8008c02:	e04f      	b.n	8008ca4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6818      	ldr	r0, [r3, #0]
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	6899      	ldr	r1, [r3, #8]
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	685a      	ldr	r2, [r3, #4]
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	f000 fb1e 	bl	8009254 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	689a      	ldr	r2, [r3, #8]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c26:	609a      	str	r2, [r3, #8]
      break;
 8008c28:	e03c      	b.n	8008ca4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6818      	ldr	r0, [r3, #0]
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	6859      	ldr	r1, [r3, #4]
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	68db      	ldr	r3, [r3, #12]
 8008c36:	461a      	mov	r2, r3
 8008c38:	f000 fa92 	bl	8009160 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2150      	movs	r1, #80	; 0x50
 8008c42:	4618      	mov	r0, r3
 8008c44:	f000 faeb 	bl	800921e <TIM_ITRx_SetConfig>
      break;
 8008c48:	e02c      	b.n	8008ca4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6818      	ldr	r0, [r3, #0]
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	6859      	ldr	r1, [r3, #4]
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	68db      	ldr	r3, [r3, #12]
 8008c56:	461a      	mov	r2, r3
 8008c58:	f000 fab1 	bl	80091be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2160      	movs	r1, #96	; 0x60
 8008c62:	4618      	mov	r0, r3
 8008c64:	f000 fadb 	bl	800921e <TIM_ITRx_SetConfig>
      break;
 8008c68:	e01c      	b.n	8008ca4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6818      	ldr	r0, [r3, #0]
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	6859      	ldr	r1, [r3, #4]
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	461a      	mov	r2, r3
 8008c78:	f000 fa72 	bl	8009160 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	2140      	movs	r1, #64	; 0x40
 8008c82:	4618      	mov	r0, r3
 8008c84:	f000 facb 	bl	800921e <TIM_ITRx_SetConfig>
      break;
 8008c88:	e00c      	b.n	8008ca4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4619      	mov	r1, r3
 8008c94:	4610      	mov	r0, r2
 8008c96:	f000 fac2 	bl	800921e <TIM_ITRx_SetConfig>
      break;
 8008c9a:	e003      	b.n	8008ca4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8008ca0:	e000      	b.n	8008ca4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008ca2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3710      	adds	r7, #16
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
	...

08008cc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b085      	sub	sp, #20
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	4a40      	ldr	r2, [pc, #256]	; (8008dd4 <TIM_Base_SetConfig+0x114>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d013      	beq.n	8008d00 <TIM_Base_SetConfig+0x40>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cde:	d00f      	beq.n	8008d00 <TIM_Base_SetConfig+0x40>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4a3d      	ldr	r2, [pc, #244]	; (8008dd8 <TIM_Base_SetConfig+0x118>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d00b      	beq.n	8008d00 <TIM_Base_SetConfig+0x40>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a3c      	ldr	r2, [pc, #240]	; (8008ddc <TIM_Base_SetConfig+0x11c>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d007      	beq.n	8008d00 <TIM_Base_SetConfig+0x40>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a3b      	ldr	r2, [pc, #236]	; (8008de0 <TIM_Base_SetConfig+0x120>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d003      	beq.n	8008d00 <TIM_Base_SetConfig+0x40>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4a3a      	ldr	r2, [pc, #232]	; (8008de4 <TIM_Base_SetConfig+0x124>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d108      	bne.n	8008d12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	68fa      	ldr	r2, [r7, #12]
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4a2f      	ldr	r2, [pc, #188]	; (8008dd4 <TIM_Base_SetConfig+0x114>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d02b      	beq.n	8008d72 <TIM_Base_SetConfig+0xb2>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d20:	d027      	beq.n	8008d72 <TIM_Base_SetConfig+0xb2>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a2c      	ldr	r2, [pc, #176]	; (8008dd8 <TIM_Base_SetConfig+0x118>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d023      	beq.n	8008d72 <TIM_Base_SetConfig+0xb2>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a2b      	ldr	r2, [pc, #172]	; (8008ddc <TIM_Base_SetConfig+0x11c>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d01f      	beq.n	8008d72 <TIM_Base_SetConfig+0xb2>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a2a      	ldr	r2, [pc, #168]	; (8008de0 <TIM_Base_SetConfig+0x120>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d01b      	beq.n	8008d72 <TIM_Base_SetConfig+0xb2>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4a29      	ldr	r2, [pc, #164]	; (8008de4 <TIM_Base_SetConfig+0x124>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d017      	beq.n	8008d72 <TIM_Base_SetConfig+0xb2>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4a28      	ldr	r2, [pc, #160]	; (8008de8 <TIM_Base_SetConfig+0x128>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d013      	beq.n	8008d72 <TIM_Base_SetConfig+0xb2>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4a27      	ldr	r2, [pc, #156]	; (8008dec <TIM_Base_SetConfig+0x12c>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d00f      	beq.n	8008d72 <TIM_Base_SetConfig+0xb2>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4a26      	ldr	r2, [pc, #152]	; (8008df0 <TIM_Base_SetConfig+0x130>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d00b      	beq.n	8008d72 <TIM_Base_SetConfig+0xb2>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4a25      	ldr	r2, [pc, #148]	; (8008df4 <TIM_Base_SetConfig+0x134>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d007      	beq.n	8008d72 <TIM_Base_SetConfig+0xb2>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4a24      	ldr	r2, [pc, #144]	; (8008df8 <TIM_Base_SetConfig+0x138>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d003      	beq.n	8008d72 <TIM_Base_SetConfig+0xb2>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4a23      	ldr	r2, [pc, #140]	; (8008dfc <TIM_Base_SetConfig+0x13c>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d108      	bne.n	8008d84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	4313      	orrs	r3, r2
 8008d82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	695b      	ldr	r3, [r3, #20]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	689a      	ldr	r2, [r3, #8]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4a0a      	ldr	r2, [pc, #40]	; (8008dd4 <TIM_Base_SetConfig+0x114>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d003      	beq.n	8008db8 <TIM_Base_SetConfig+0xf8>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4a0c      	ldr	r2, [pc, #48]	; (8008de4 <TIM_Base_SetConfig+0x124>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d103      	bne.n	8008dc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	691a      	ldr	r2, [r3, #16]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	615a      	str	r2, [r3, #20]
}
 8008dc6:	bf00      	nop
 8008dc8:	3714      	adds	r7, #20
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop
 8008dd4:	40010000 	.word	0x40010000
 8008dd8:	40000400 	.word	0x40000400
 8008ddc:	40000800 	.word	0x40000800
 8008de0:	40000c00 	.word	0x40000c00
 8008de4:	40010400 	.word	0x40010400
 8008de8:	40014000 	.word	0x40014000
 8008dec:	40014400 	.word	0x40014400
 8008df0:	40014800 	.word	0x40014800
 8008df4:	40001800 	.word	0x40001800
 8008df8:	40001c00 	.word	0x40001c00
 8008dfc:	40002000 	.word	0x40002000

08008e00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b087      	sub	sp, #28
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6a1b      	ldr	r3, [r3, #32]
 8008e0e:	f023 0201 	bic.w	r2, r3, #1
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6a1b      	ldr	r3, [r3, #32]
 8008e1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	699b      	ldr	r3, [r3, #24]
 8008e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f023 0303 	bic.w	r3, r3, #3
 8008e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	68fa      	ldr	r2, [r7, #12]
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	f023 0302 	bic.w	r3, r3, #2
 8008e48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	697a      	ldr	r2, [r7, #20]
 8008e50:	4313      	orrs	r3, r2
 8008e52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	4a20      	ldr	r2, [pc, #128]	; (8008ed8 <TIM_OC1_SetConfig+0xd8>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d003      	beq.n	8008e64 <TIM_OC1_SetConfig+0x64>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	4a1f      	ldr	r2, [pc, #124]	; (8008edc <TIM_OC1_SetConfig+0xdc>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d10c      	bne.n	8008e7e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	f023 0308 	bic.w	r3, r3, #8
 8008e6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	697a      	ldr	r2, [r7, #20]
 8008e72:	4313      	orrs	r3, r2
 8008e74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	f023 0304 	bic.w	r3, r3, #4
 8008e7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	4a15      	ldr	r2, [pc, #84]	; (8008ed8 <TIM_OC1_SetConfig+0xd8>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d003      	beq.n	8008e8e <TIM_OC1_SetConfig+0x8e>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	4a14      	ldr	r2, [pc, #80]	; (8008edc <TIM_OC1_SetConfig+0xdc>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d111      	bne.n	8008eb2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	695b      	ldr	r3, [r3, #20]
 8008ea2:	693a      	ldr	r2, [r7, #16]
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	699b      	ldr	r3, [r3, #24]
 8008eac:	693a      	ldr	r2, [r7, #16]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	693a      	ldr	r2, [r7, #16]
 8008eb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	68fa      	ldr	r2, [r7, #12]
 8008ebc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	685a      	ldr	r2, [r3, #4]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	697a      	ldr	r2, [r7, #20]
 8008eca:	621a      	str	r2, [r3, #32]
}
 8008ecc:	bf00      	nop
 8008ece:	371c      	adds	r7, #28
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr
 8008ed8:	40010000 	.word	0x40010000
 8008edc:	40010400 	.word	0x40010400

08008ee0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b087      	sub	sp, #28
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6a1b      	ldr	r3, [r3, #32]
 8008eee:	f023 0210 	bic.w	r2, r3, #16
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6a1b      	ldr	r3, [r3, #32]
 8008efa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	699b      	ldr	r3, [r3, #24]
 8008f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	021b      	lsls	r3, r3, #8
 8008f1e:	68fa      	ldr	r2, [r7, #12]
 8008f20:	4313      	orrs	r3, r2
 8008f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	f023 0320 	bic.w	r3, r3, #32
 8008f2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	011b      	lsls	r3, r3, #4
 8008f32:	697a      	ldr	r2, [r7, #20]
 8008f34:	4313      	orrs	r3, r2
 8008f36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	4a22      	ldr	r2, [pc, #136]	; (8008fc4 <TIM_OC2_SetConfig+0xe4>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d003      	beq.n	8008f48 <TIM_OC2_SetConfig+0x68>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	4a21      	ldr	r2, [pc, #132]	; (8008fc8 <TIM_OC2_SetConfig+0xe8>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d10d      	bne.n	8008f64 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	68db      	ldr	r3, [r3, #12]
 8008f54:	011b      	lsls	r3, r3, #4
 8008f56:	697a      	ldr	r2, [r7, #20]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4a17      	ldr	r2, [pc, #92]	; (8008fc4 <TIM_OC2_SetConfig+0xe4>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d003      	beq.n	8008f74 <TIM_OC2_SetConfig+0x94>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	4a16      	ldr	r2, [pc, #88]	; (8008fc8 <TIM_OC2_SetConfig+0xe8>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d113      	bne.n	8008f9c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	695b      	ldr	r3, [r3, #20]
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	693a      	ldr	r2, [r7, #16]
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	699b      	ldr	r3, [r3, #24]
 8008f94:	009b      	lsls	r3, r3, #2
 8008f96:	693a      	ldr	r2, [r7, #16]
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	693a      	ldr	r2, [r7, #16]
 8008fa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	68fa      	ldr	r2, [r7, #12]
 8008fa6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	685a      	ldr	r2, [r3, #4]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	697a      	ldr	r2, [r7, #20]
 8008fb4:	621a      	str	r2, [r3, #32]
}
 8008fb6:	bf00      	nop
 8008fb8:	371c      	adds	r7, #28
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop
 8008fc4:	40010000 	.word	0x40010000
 8008fc8:	40010400 	.word	0x40010400

08008fcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b087      	sub	sp, #28
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6a1b      	ldr	r3, [r3, #32]
 8008fda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6a1b      	ldr	r3, [r3, #32]
 8008fe6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	69db      	ldr	r3, [r3, #28]
 8008ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f023 0303 	bic.w	r3, r3, #3
 8009002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	4313      	orrs	r3, r2
 800900c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009014:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	021b      	lsls	r3, r3, #8
 800901c:	697a      	ldr	r2, [r7, #20]
 800901e:	4313      	orrs	r3, r2
 8009020:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4a21      	ldr	r2, [pc, #132]	; (80090ac <TIM_OC3_SetConfig+0xe0>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d003      	beq.n	8009032 <TIM_OC3_SetConfig+0x66>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	4a20      	ldr	r2, [pc, #128]	; (80090b0 <TIM_OC3_SetConfig+0xe4>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d10d      	bne.n	800904e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009038:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	021b      	lsls	r3, r3, #8
 8009040:	697a      	ldr	r2, [r7, #20]
 8009042:	4313      	orrs	r3, r2
 8009044:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800904c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	4a16      	ldr	r2, [pc, #88]	; (80090ac <TIM_OC3_SetConfig+0xe0>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d003      	beq.n	800905e <TIM_OC3_SetConfig+0x92>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	4a15      	ldr	r2, [pc, #84]	; (80090b0 <TIM_OC3_SetConfig+0xe4>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d113      	bne.n	8009086 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009064:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800906c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	695b      	ldr	r3, [r3, #20]
 8009072:	011b      	lsls	r3, r3, #4
 8009074:	693a      	ldr	r2, [r7, #16]
 8009076:	4313      	orrs	r3, r2
 8009078:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	699b      	ldr	r3, [r3, #24]
 800907e:	011b      	lsls	r3, r3, #4
 8009080:	693a      	ldr	r2, [r7, #16]
 8009082:	4313      	orrs	r3, r2
 8009084:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	693a      	ldr	r2, [r7, #16]
 800908a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	68fa      	ldr	r2, [r7, #12]
 8009090:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	685a      	ldr	r2, [r3, #4]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	697a      	ldr	r2, [r7, #20]
 800909e:	621a      	str	r2, [r3, #32]
}
 80090a0:	bf00      	nop
 80090a2:	371c      	adds	r7, #28
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr
 80090ac:	40010000 	.word	0x40010000
 80090b0:	40010400 	.word	0x40010400

080090b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b087      	sub	sp, #28
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6a1b      	ldr	r3, [r3, #32]
 80090c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6a1b      	ldr	r3, [r3, #32]
 80090ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	69db      	ldr	r3, [r3, #28]
 80090da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	021b      	lsls	r3, r3, #8
 80090f2:	68fa      	ldr	r2, [r7, #12]
 80090f4:	4313      	orrs	r3, r2
 80090f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80090fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	031b      	lsls	r3, r3, #12
 8009106:	693a      	ldr	r2, [r7, #16]
 8009108:	4313      	orrs	r3, r2
 800910a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	4a12      	ldr	r2, [pc, #72]	; (8009158 <TIM_OC4_SetConfig+0xa4>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d003      	beq.n	800911c <TIM_OC4_SetConfig+0x68>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	4a11      	ldr	r2, [pc, #68]	; (800915c <TIM_OC4_SetConfig+0xa8>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d109      	bne.n	8009130 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009122:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	695b      	ldr	r3, [r3, #20]
 8009128:	019b      	lsls	r3, r3, #6
 800912a:	697a      	ldr	r2, [r7, #20]
 800912c:	4313      	orrs	r3, r2
 800912e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	697a      	ldr	r2, [r7, #20]
 8009134:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	685a      	ldr	r2, [r3, #4]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	693a      	ldr	r2, [r7, #16]
 8009148:	621a      	str	r2, [r3, #32]
}
 800914a:	bf00      	nop
 800914c:	371c      	adds	r7, #28
 800914e:	46bd      	mov	sp, r7
 8009150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009154:	4770      	bx	lr
 8009156:	bf00      	nop
 8009158:	40010000 	.word	0x40010000
 800915c:	40010400 	.word	0x40010400

08009160 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009160:	b480      	push	{r7}
 8009162:	b087      	sub	sp, #28
 8009164:	af00      	add	r7, sp, #0
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	60b9      	str	r1, [r7, #8]
 800916a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6a1b      	ldr	r3, [r3, #32]
 8009170:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	6a1b      	ldr	r3, [r3, #32]
 8009176:	f023 0201 	bic.w	r2, r3, #1
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	699b      	ldr	r3, [r3, #24]
 8009182:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800918a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	011b      	lsls	r3, r3, #4
 8009190:	693a      	ldr	r2, [r7, #16]
 8009192:	4313      	orrs	r3, r2
 8009194:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	f023 030a 	bic.w	r3, r3, #10
 800919c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800919e:	697a      	ldr	r2, [r7, #20]
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	4313      	orrs	r3, r2
 80091a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	693a      	ldr	r2, [r7, #16]
 80091aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	697a      	ldr	r2, [r7, #20]
 80091b0:	621a      	str	r2, [r3, #32]
}
 80091b2:	bf00      	nop
 80091b4:	371c      	adds	r7, #28
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr

080091be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091be:	b480      	push	{r7}
 80091c0:	b087      	sub	sp, #28
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	60f8      	str	r0, [r7, #12]
 80091c6:	60b9      	str	r1, [r7, #8]
 80091c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	6a1b      	ldr	r3, [r3, #32]
 80091ce:	f023 0210 	bic.w	r2, r3, #16
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	699b      	ldr	r3, [r3, #24]
 80091da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6a1b      	ldr	r3, [r3, #32]
 80091e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80091e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	031b      	lsls	r3, r3, #12
 80091ee:	697a      	ldr	r2, [r7, #20]
 80091f0:	4313      	orrs	r3, r2
 80091f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80091fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	011b      	lsls	r3, r3, #4
 8009200:	693a      	ldr	r2, [r7, #16]
 8009202:	4313      	orrs	r3, r2
 8009204:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	697a      	ldr	r2, [r7, #20]
 800920a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	693a      	ldr	r2, [r7, #16]
 8009210:	621a      	str	r2, [r3, #32]
}
 8009212:	bf00      	nop
 8009214:	371c      	adds	r7, #28
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr

0800921e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800921e:	b480      	push	{r7}
 8009220:	b085      	sub	sp, #20
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
 8009226:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	689b      	ldr	r3, [r3, #8]
 800922c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009234:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009236:	683a      	ldr	r2, [r7, #0]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	4313      	orrs	r3, r2
 800923c:	f043 0307 	orr.w	r3, r3, #7
 8009240:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	68fa      	ldr	r2, [r7, #12]
 8009246:	609a      	str	r2, [r3, #8]
}
 8009248:	bf00      	nop
 800924a:	3714      	adds	r7, #20
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr

08009254 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009254:	b480      	push	{r7}
 8009256:	b087      	sub	sp, #28
 8009258:	af00      	add	r7, sp, #0
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	607a      	str	r2, [r7, #4]
 8009260:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	689b      	ldr	r3, [r3, #8]
 8009266:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800926e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	021a      	lsls	r2, r3, #8
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	431a      	orrs	r2, r3
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	4313      	orrs	r3, r2
 800927c:	697a      	ldr	r2, [r7, #20]
 800927e:	4313      	orrs	r3, r2
 8009280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	697a      	ldr	r2, [r7, #20]
 8009286:	609a      	str	r2, [r3, #8]
}
 8009288:	bf00      	nop
 800928a:	371c      	adds	r7, #28
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009294:	b480      	push	{r7}
 8009296:	b087      	sub	sp, #28
 8009298:	af00      	add	r7, sp, #0
 800929a:	60f8      	str	r0, [r7, #12]
 800929c:	60b9      	str	r1, [r7, #8]
 800929e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	f003 031f 	and.w	r3, r3, #31
 80092a6:	2201      	movs	r2, #1
 80092a8:	fa02 f303 	lsl.w	r3, r2, r3
 80092ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	6a1a      	ldr	r2, [r3, #32]
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	43db      	mvns	r3, r3
 80092b6:	401a      	ands	r2, r3
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6a1a      	ldr	r2, [r3, #32]
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	f003 031f 	and.w	r3, r3, #31
 80092c6:	6879      	ldr	r1, [r7, #4]
 80092c8:	fa01 f303 	lsl.w	r3, r1, r3
 80092cc:	431a      	orrs	r2, r3
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	621a      	str	r2, [r3, #32]
}
 80092d2:	bf00      	nop
 80092d4:	371c      	adds	r7, #28
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr
	...

080092e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b085      	sub	sp, #20
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	d101      	bne.n	80092f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80092f4:	2302      	movs	r3, #2
 80092f6:	e05a      	b.n	80093ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2202      	movs	r2, #2
 8009304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800931e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	68fa      	ldr	r2, [r7, #12]
 8009326:	4313      	orrs	r3, r2
 8009328:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	68fa      	ldr	r2, [r7, #12]
 8009330:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a21      	ldr	r2, [pc, #132]	; (80093bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d022      	beq.n	8009382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009344:	d01d      	beq.n	8009382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a1d      	ldr	r2, [pc, #116]	; (80093c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d018      	beq.n	8009382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a1b      	ldr	r2, [pc, #108]	; (80093c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d013      	beq.n	8009382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a1a      	ldr	r2, [pc, #104]	; (80093c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d00e      	beq.n	8009382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a18      	ldr	r2, [pc, #96]	; (80093cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d009      	beq.n	8009382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a17      	ldr	r2, [pc, #92]	; (80093d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d004      	beq.n	8009382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a15      	ldr	r2, [pc, #84]	; (80093d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d10c      	bne.n	800939c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009388:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	68ba      	ldr	r2, [r7, #8]
 8009390:	4313      	orrs	r3, r2
 8009392:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	68ba      	ldr	r2, [r7, #8]
 800939a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2201      	movs	r2, #1
 80093a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80093ac:	2300      	movs	r3, #0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3714      	adds	r7, #20
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr
 80093ba:	bf00      	nop
 80093bc:	40010000 	.word	0x40010000
 80093c0:	40000400 	.word	0x40000400
 80093c4:	40000800 	.word	0x40000800
 80093c8:	40000c00 	.word	0x40000c00
 80093cc:	40010400 	.word	0x40010400
 80093d0:	40014000 	.word	0x40014000
 80093d4:	40001800 	.word	0x40001800

080093d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d101      	bne.n	80093ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093e6:	2301      	movs	r3, #1
 80093e8:	e03f      	b.n	800946a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d106      	bne.n	8009404 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2200      	movs	r2, #0
 80093fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f7fa f976 	bl	80036f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2224      	movs	r2, #36	; 0x24
 8009408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	68da      	ldr	r2, [r3, #12]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800941a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 ff49 	bl	800a2b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	691a      	ldr	r2, [r3, #16]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009430:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	695a      	ldr	r2, [r3, #20]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009440:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	68da      	ldr	r2, [r3, #12]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009450:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2220      	movs	r2, #32
 800945c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2220      	movs	r2, #32
 8009464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009468:	2300      	movs	r3, #0
}
 800946a:	4618      	mov	r0, r3
 800946c:	3708      	adds	r7, #8
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
	...

08009474 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b08c      	sub	sp, #48	; 0x30
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	60b9      	str	r1, [r7, #8]
 800947e:	4613      	mov	r3, r2
 8009480:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009488:	b2db      	uxtb	r3, r3
 800948a:	2b20      	cmp	r3, #32
 800948c:	d165      	bne.n	800955a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d002      	beq.n	800949a <HAL_UART_Transmit_DMA+0x26>
 8009494:	88fb      	ldrh	r3, [r7, #6]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d101      	bne.n	800949e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	e05e      	b.n	800955c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d101      	bne.n	80094ac <HAL_UART_Transmit_DMA+0x38>
 80094a8:	2302      	movs	r3, #2
 80094aa:	e057      	b.n	800955c <HAL_UART_Transmit_DMA+0xe8>
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2201      	movs	r2, #1
 80094b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80094b4:	68ba      	ldr	r2, [r7, #8]
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	88fa      	ldrh	r2, [r7, #6]
 80094be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	88fa      	ldrh	r2, [r7, #6]
 80094c4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2200      	movs	r2, #0
 80094ca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2221      	movs	r2, #33	; 0x21
 80094d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094d8:	4a22      	ldr	r2, [pc, #136]	; (8009564 <HAL_UART_Transmit_DMA+0xf0>)
 80094da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094e0:	4a21      	ldr	r2, [pc, #132]	; (8009568 <HAL_UART_Transmit_DMA+0xf4>)
 80094e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094e8:	4a20      	ldr	r2, [pc, #128]	; (800956c <HAL_UART_Transmit_DMA+0xf8>)
 80094ea:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094f0:	2200      	movs	r2, #0
 80094f2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80094f4:	f107 0308 	add.w	r3, r7, #8
 80094f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80094fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009500:	6819      	ldr	r1, [r3, #0]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	3304      	adds	r3, #4
 8009508:	461a      	mov	r2, r3
 800950a:	88fb      	ldrh	r3, [r7, #6]
 800950c:	f7fa fea8 	bl	8004260 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009518:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2200      	movs	r2, #0
 800951e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	3314      	adds	r3, #20
 8009528:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800952a:	69bb      	ldr	r3, [r7, #24]
 800952c:	e853 3f00 	ldrex	r3, [r3]
 8009530:	617b      	str	r3, [r7, #20]
   return(result);
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009538:	62bb      	str	r3, [r7, #40]	; 0x28
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	3314      	adds	r3, #20
 8009540:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009542:	627a      	str	r2, [r7, #36]	; 0x24
 8009544:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009546:	6a39      	ldr	r1, [r7, #32]
 8009548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800954a:	e841 2300 	strex	r3, r2, [r1]
 800954e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d1e5      	bne.n	8009522 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8009556:	2300      	movs	r3, #0
 8009558:	e000      	b.n	800955c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800955a:	2302      	movs	r3, #2
  }
}
 800955c:	4618      	mov	r0, r3
 800955e:	3730      	adds	r7, #48	; 0x30
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}
 8009564:	08009b55 	.word	0x08009b55
 8009568:	08009bef 	.word	0x08009bef
 800956c:	08009d67 	.word	0x08009d67

08009570 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b084      	sub	sp, #16
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	4613      	mov	r3, r2
 800957c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009584:	b2db      	uxtb	r3, r3
 8009586:	2b20      	cmp	r3, #32
 8009588:	d11d      	bne.n	80095c6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d002      	beq.n	8009596 <HAL_UART_Receive_DMA+0x26>
 8009590:	88fb      	ldrh	r3, [r7, #6]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d101      	bne.n	800959a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009596:	2301      	movs	r3, #1
 8009598:	e016      	b.n	80095c8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d101      	bne.n	80095a8 <HAL_UART_Receive_DMA+0x38>
 80095a4:	2302      	movs	r3, #2
 80095a6:	e00f      	b.n	80095c8 <HAL_UART_Receive_DMA+0x58>
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2201      	movs	r2, #1
 80095ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2200      	movs	r2, #0
 80095b4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80095b6:	88fb      	ldrh	r3, [r7, #6]
 80095b8:	461a      	mov	r2, r3
 80095ba:	68b9      	ldr	r1, [r7, #8]
 80095bc:	68f8      	ldr	r0, [r7, #12]
 80095be:	f000 fc1d 	bl	8009dfc <UART_Start_Receive_DMA>
 80095c2:	4603      	mov	r3, r0
 80095c4:	e000      	b.n	80095c8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80095c6:	2302      	movs	r3, #2
  }
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3710      	adds	r7, #16
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b0ba      	sub	sp, #232	; 0xe8
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	695b      	ldr	r3, [r3, #20]
 80095f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80095f6:	2300      	movs	r3, #0
 80095f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80095fc:	2300      	movs	r3, #0
 80095fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009606:	f003 030f 	and.w	r3, r3, #15
 800960a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800960e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009612:	2b00      	cmp	r3, #0
 8009614:	d10f      	bne.n	8009636 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800961a:	f003 0320 	and.w	r3, r3, #32
 800961e:	2b00      	cmp	r3, #0
 8009620:	d009      	beq.n	8009636 <HAL_UART_IRQHandler+0x66>
 8009622:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009626:	f003 0320 	and.w	r3, r3, #32
 800962a:	2b00      	cmp	r3, #0
 800962c:	d003      	beq.n	8009636 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 fd85 	bl	800a13e <UART_Receive_IT>
      return;
 8009634:	e256      	b.n	8009ae4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009636:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800963a:	2b00      	cmp	r3, #0
 800963c:	f000 80de 	beq.w	80097fc <HAL_UART_IRQHandler+0x22c>
 8009640:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009644:	f003 0301 	and.w	r3, r3, #1
 8009648:	2b00      	cmp	r3, #0
 800964a:	d106      	bne.n	800965a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800964c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009650:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009654:	2b00      	cmp	r3, #0
 8009656:	f000 80d1 	beq.w	80097fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800965a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800965e:	f003 0301 	and.w	r3, r3, #1
 8009662:	2b00      	cmp	r3, #0
 8009664:	d00b      	beq.n	800967e <HAL_UART_IRQHandler+0xae>
 8009666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800966a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800966e:	2b00      	cmp	r3, #0
 8009670:	d005      	beq.n	800967e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009676:	f043 0201 	orr.w	r2, r3, #1
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800967e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009682:	f003 0304 	and.w	r3, r3, #4
 8009686:	2b00      	cmp	r3, #0
 8009688:	d00b      	beq.n	80096a2 <HAL_UART_IRQHandler+0xd2>
 800968a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800968e:	f003 0301 	and.w	r3, r3, #1
 8009692:	2b00      	cmp	r3, #0
 8009694:	d005      	beq.n	80096a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800969a:	f043 0202 	orr.w	r2, r3, #2
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80096a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096a6:	f003 0302 	and.w	r3, r3, #2
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d00b      	beq.n	80096c6 <HAL_UART_IRQHandler+0xf6>
 80096ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096b2:	f003 0301 	and.w	r3, r3, #1
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d005      	beq.n	80096c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096be:	f043 0204 	orr.w	r2, r3, #4
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80096c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096ca:	f003 0308 	and.w	r3, r3, #8
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d011      	beq.n	80096f6 <HAL_UART_IRQHandler+0x126>
 80096d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096d6:	f003 0320 	and.w	r3, r3, #32
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d105      	bne.n	80096ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80096de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096e2:	f003 0301 	and.w	r3, r3, #1
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d005      	beq.n	80096f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ee:	f043 0208 	orr.w	r2, r3, #8
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	f000 81ed 	beq.w	8009ada <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009704:	f003 0320 	and.w	r3, r3, #32
 8009708:	2b00      	cmp	r3, #0
 800970a:	d008      	beq.n	800971e <HAL_UART_IRQHandler+0x14e>
 800970c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009710:	f003 0320 	and.w	r3, r3, #32
 8009714:	2b00      	cmp	r3, #0
 8009716:	d002      	beq.n	800971e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 fd10 	bl	800a13e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	695b      	ldr	r3, [r3, #20]
 8009724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009728:	2b40      	cmp	r3, #64	; 0x40
 800972a:	bf0c      	ite	eq
 800972c:	2301      	moveq	r3, #1
 800972e:	2300      	movne	r3, #0
 8009730:	b2db      	uxtb	r3, r3
 8009732:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800973a:	f003 0308 	and.w	r3, r3, #8
 800973e:	2b00      	cmp	r3, #0
 8009740:	d103      	bne.n	800974a <HAL_UART_IRQHandler+0x17a>
 8009742:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009746:	2b00      	cmp	r3, #0
 8009748:	d04f      	beq.n	80097ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 fc18 	bl	8009f80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	695b      	ldr	r3, [r3, #20]
 8009756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800975a:	2b40      	cmp	r3, #64	; 0x40
 800975c:	d141      	bne.n	80097e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	3314      	adds	r3, #20
 8009764:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009768:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800976c:	e853 3f00 	ldrex	r3, [r3]
 8009770:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009774:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800977c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	3314      	adds	r3, #20
 8009786:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800978a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800978e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009792:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009796:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800979a:	e841 2300 	strex	r3, r2, [r1]
 800979e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80097a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d1d9      	bne.n	800975e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d013      	beq.n	80097da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b6:	4a7d      	ldr	r2, [pc, #500]	; (80099ac <HAL_UART_IRQHandler+0x3dc>)
 80097b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097be:	4618      	mov	r0, r3
 80097c0:	f7fa fe16 	bl	80043f0 <HAL_DMA_Abort_IT>
 80097c4:	4603      	mov	r3, r0
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d016      	beq.n	80097f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097d0:	687a      	ldr	r2, [r7, #4]
 80097d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80097d4:	4610      	mov	r0, r2
 80097d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097d8:	e00e      	b.n	80097f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 f9a4 	bl	8009b28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097e0:	e00a      	b.n	80097f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 f9a0 	bl	8009b28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097e8:	e006      	b.n	80097f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 f99c 	bl	8009b28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2200      	movs	r2, #0
 80097f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80097f6:	e170      	b.n	8009ada <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097f8:	bf00      	nop
    return;
 80097fa:	e16e      	b.n	8009ada <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009800:	2b01      	cmp	r3, #1
 8009802:	f040 814a 	bne.w	8009a9a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800980a:	f003 0310 	and.w	r3, r3, #16
 800980e:	2b00      	cmp	r3, #0
 8009810:	f000 8143 	beq.w	8009a9a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009818:	f003 0310 	and.w	r3, r3, #16
 800981c:	2b00      	cmp	r3, #0
 800981e:	f000 813c 	beq.w	8009a9a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009822:	2300      	movs	r3, #0
 8009824:	60bb      	str	r3, [r7, #8]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	60bb      	str	r3, [r7, #8]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	60bb      	str	r3, [r7, #8]
 8009836:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	695b      	ldr	r3, [r3, #20]
 800983e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009842:	2b40      	cmp	r3, #64	; 0x40
 8009844:	f040 80b4 	bne.w	80099b0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009854:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009858:	2b00      	cmp	r3, #0
 800985a:	f000 8140 	beq.w	8009ade <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009862:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009866:	429a      	cmp	r2, r3
 8009868:	f080 8139 	bcs.w	8009ade <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009872:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009878:	69db      	ldr	r3, [r3, #28]
 800987a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800987e:	f000 8088 	beq.w	8009992 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	330c      	adds	r3, #12
 8009888:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800988c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009890:	e853 3f00 	ldrex	r3, [r3]
 8009894:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009898:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800989c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	330c      	adds	r3, #12
 80098aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80098ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80098b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80098ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80098be:	e841 2300 	strex	r3, r2, [r1]
 80098c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80098c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d1d9      	bne.n	8009882 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	3314      	adds	r3, #20
 80098d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80098d8:	e853 3f00 	ldrex	r3, [r3]
 80098dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80098de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80098e0:	f023 0301 	bic.w	r3, r3, #1
 80098e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	3314      	adds	r3, #20
 80098ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80098f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80098f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80098fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80098fe:	e841 2300 	strex	r3, r2, [r1]
 8009902:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009904:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009906:	2b00      	cmp	r3, #0
 8009908:	d1e1      	bne.n	80098ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	3314      	adds	r3, #20
 8009910:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009912:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009914:	e853 3f00 	ldrex	r3, [r3]
 8009918:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800991a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800991c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009920:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	3314      	adds	r3, #20
 800992a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800992e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009930:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009932:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009934:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009936:	e841 2300 	strex	r3, r2, [r1]
 800993a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800993c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800993e:	2b00      	cmp	r3, #0
 8009940:	d1e3      	bne.n	800990a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2220      	movs	r2, #32
 8009946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2200      	movs	r2, #0
 800994e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	330c      	adds	r3, #12
 8009956:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800995a:	e853 3f00 	ldrex	r3, [r3]
 800995e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009962:	f023 0310 	bic.w	r3, r3, #16
 8009966:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	330c      	adds	r3, #12
 8009970:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009974:	65ba      	str	r2, [r7, #88]	; 0x58
 8009976:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009978:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800997a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800997c:	e841 2300 	strex	r3, r2, [r1]
 8009980:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009984:	2b00      	cmp	r3, #0
 8009986:	d1e3      	bne.n	8009950 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800998c:	4618      	mov	r0, r3
 800998e:	f7fa fcbf 	bl	8004310 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800999a:	b29b      	uxth	r3, r3
 800999c:	1ad3      	subs	r3, r2, r3
 800999e:	b29b      	uxth	r3, r3
 80099a0:	4619      	mov	r1, r3
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f000 f8ca 	bl	8009b3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80099a8:	e099      	b.n	8009ade <HAL_UART_IRQHandler+0x50e>
 80099aa:	bf00      	nop
 80099ac:	0800a047 	.word	0x0800a047
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	1ad3      	subs	r3, r2, r3
 80099bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	f000 808b 	beq.w	8009ae2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80099cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	f000 8086 	beq.w	8009ae2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	330c      	adds	r3, #12
 80099dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e0:	e853 3f00 	ldrex	r3, [r3]
 80099e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80099e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80099ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	330c      	adds	r3, #12
 80099f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80099fa:	647a      	str	r2, [r7, #68]	; 0x44
 80099fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009a00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a02:	e841 2300 	strex	r3, r2, [r1]
 8009a06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d1e3      	bne.n	80099d6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	3314      	adds	r3, #20
 8009a14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a18:	e853 3f00 	ldrex	r3, [r3]
 8009a1c:	623b      	str	r3, [r7, #32]
   return(result);
 8009a1e:	6a3b      	ldr	r3, [r7, #32]
 8009a20:	f023 0301 	bic.w	r3, r3, #1
 8009a24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	3314      	adds	r3, #20
 8009a2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009a32:	633a      	str	r2, [r7, #48]	; 0x30
 8009a34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a3a:	e841 2300 	strex	r3, r2, [r1]
 8009a3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d1e3      	bne.n	8009a0e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2220      	movs	r2, #32
 8009a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2200      	movs	r2, #0
 8009a52:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	330c      	adds	r3, #12
 8009a5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	e853 3f00 	ldrex	r3, [r3]
 8009a62:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f023 0310 	bic.w	r3, r3, #16
 8009a6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	330c      	adds	r3, #12
 8009a74:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009a78:	61fa      	str	r2, [r7, #28]
 8009a7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a7c:	69b9      	ldr	r1, [r7, #24]
 8009a7e:	69fa      	ldr	r2, [r7, #28]
 8009a80:	e841 2300 	strex	r3, r2, [r1]
 8009a84:	617b      	str	r3, [r7, #20]
   return(result);
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d1e3      	bne.n	8009a54 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009a8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009a90:	4619      	mov	r1, r3
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 f852 	bl	8009b3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009a98:	e023      	b.n	8009ae2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d009      	beq.n	8009aba <HAL_UART_IRQHandler+0x4ea>
 8009aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d003      	beq.n	8009aba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 fadb 	bl	800a06e <UART_Transmit_IT>
    return;
 8009ab8:	e014      	b.n	8009ae4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d00e      	beq.n	8009ae4 <HAL_UART_IRQHandler+0x514>
 8009ac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d008      	beq.n	8009ae4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 fb1b 	bl	800a10e <UART_EndTransmit_IT>
    return;
 8009ad8:	e004      	b.n	8009ae4 <HAL_UART_IRQHandler+0x514>
    return;
 8009ada:	bf00      	nop
 8009adc:	e002      	b.n	8009ae4 <HAL_UART_IRQHandler+0x514>
      return;
 8009ade:	bf00      	nop
 8009ae0:	e000      	b.n	8009ae4 <HAL_UART_IRQHandler+0x514>
      return;
 8009ae2:	bf00      	nop
  }
}
 8009ae4:	37e8      	adds	r7, #232	; 0xe8
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop

08009aec <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009af4:	bf00      	nop
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b083      	sub	sp, #12
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009b08:	bf00      	nop
 8009b0a:	370c      	adds	r7, #12
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b083      	sub	sp, #12
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009b1c:	bf00      	nop
 8009b1e:	370c      	adds	r7, #12
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b083      	sub	sp, #12
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009b30:	bf00      	nop
 8009b32:	370c      	adds	r7, #12
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	460b      	mov	r3, r1
 8009b46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009b48:	bf00      	nop
 8009b4a:	370c      	adds	r7, #12
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr

08009b54 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b090      	sub	sp, #64	; 0x40
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b60:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d137      	bne.n	8009be0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b72:	2200      	movs	r2, #0
 8009b74:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	3314      	adds	r3, #20
 8009b7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b80:	e853 3f00 	ldrex	r3, [r3]
 8009b84:	623b      	str	r3, [r7, #32]
   return(result);
 8009b86:	6a3b      	ldr	r3, [r7, #32]
 8009b88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8009b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	3314      	adds	r3, #20
 8009b94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b96:	633a      	str	r2, [r7, #48]	; 0x30
 8009b98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b9e:	e841 2300 	strex	r3, r2, [r1]
 8009ba2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d1e5      	bne.n	8009b76 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	330c      	adds	r3, #12
 8009bb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	e853 3f00 	ldrex	r3, [r3]
 8009bb8:	60fb      	str	r3, [r7, #12]
   return(result);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bc0:	637b      	str	r3, [r7, #52]	; 0x34
 8009bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	330c      	adds	r3, #12
 8009bc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009bca:	61fa      	str	r2, [r7, #28]
 8009bcc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bce:	69b9      	ldr	r1, [r7, #24]
 8009bd0:	69fa      	ldr	r2, [r7, #28]
 8009bd2:	e841 2300 	strex	r3, r2, [r1]
 8009bd6:	617b      	str	r3, [r7, #20]
   return(result);
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d1e5      	bne.n	8009baa <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009bde:	e002      	b.n	8009be6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009be0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009be2:	f7f9 fbab 	bl	800333c <HAL_UART_TxCpltCallback>
}
 8009be6:	bf00      	nop
 8009be8:	3740      	adds	r7, #64	; 0x40
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b084      	sub	sp, #16
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bfa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009bfc:	68f8      	ldr	r0, [r7, #12]
 8009bfe:	f7ff ff75 	bl	8009aec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c02:	bf00      	nop
 8009c04:	3710      	adds	r7, #16
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b09c      	sub	sp, #112	; 0x70
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c16:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d172      	bne.n	8009d0c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c28:	2200      	movs	r2, #0
 8009c2a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	330c      	adds	r3, #12
 8009c32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c36:	e853 3f00 	ldrex	r3, [r3]
 8009c3a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c42:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	330c      	adds	r3, #12
 8009c4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009c4c:	65ba      	str	r2, [r7, #88]	; 0x58
 8009c4e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009c52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009c54:	e841 2300 	strex	r3, r2, [r1]
 8009c58:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009c5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d1e5      	bne.n	8009c2c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	3314      	adds	r3, #20
 8009c66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c6a:	e853 3f00 	ldrex	r3, [r3]
 8009c6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c72:	f023 0301 	bic.w	r3, r3, #1
 8009c76:	667b      	str	r3, [r7, #100]	; 0x64
 8009c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	3314      	adds	r3, #20
 8009c7e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009c80:	647a      	str	r2, [r7, #68]	; 0x44
 8009c82:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009c86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c88:	e841 2300 	strex	r3, r2, [r1]
 8009c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d1e5      	bne.n	8009c60 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	3314      	adds	r3, #20
 8009c9a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9e:	e853 3f00 	ldrex	r3, [r3]
 8009ca2:	623b      	str	r3, [r7, #32]
   return(result);
 8009ca4:	6a3b      	ldr	r3, [r7, #32]
 8009ca6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009caa:	663b      	str	r3, [r7, #96]	; 0x60
 8009cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	3314      	adds	r3, #20
 8009cb2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009cb4:	633a      	str	r2, [r7, #48]	; 0x30
 8009cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009cba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cbc:	e841 2300 	strex	r3, r2, [r1]
 8009cc0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d1e5      	bne.n	8009c94 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cca:	2220      	movs	r2, #32
 8009ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d119      	bne.n	8009d0c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	330c      	adds	r3, #12
 8009cde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	e853 3f00 	ldrex	r3, [r3]
 8009ce6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f023 0310 	bic.w	r3, r3, #16
 8009cee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	330c      	adds	r3, #12
 8009cf6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009cf8:	61fa      	str	r2, [r7, #28]
 8009cfa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cfc:	69b9      	ldr	r1, [r7, #24]
 8009cfe:	69fa      	ldr	r2, [r7, #28]
 8009d00:	e841 2300 	strex	r3, r2, [r1]
 8009d04:	617b      	str	r3, [r7, #20]
   return(result);
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d1e5      	bne.n	8009cd8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d106      	bne.n	8009d22 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d16:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009d18:	4619      	mov	r1, r3
 8009d1a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009d1c:	f7ff ff0e 	bl	8009b3c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009d20:	e002      	b.n	8009d28 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009d22:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009d24:	f7ff feec 	bl	8009b00 <HAL_UART_RxCpltCallback>
}
 8009d28:	bf00      	nop
 8009d2a:	3770      	adds	r7, #112	; 0x70
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d3c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d108      	bne.n	8009d58 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009d4a:	085b      	lsrs	r3, r3, #1
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	4619      	mov	r1, r3
 8009d50:	68f8      	ldr	r0, [r7, #12]
 8009d52:	f7ff fef3 	bl	8009b3c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009d56:	e002      	b.n	8009d5e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009d58:	68f8      	ldr	r0, [r7, #12]
 8009d5a:	f7ff fedb 	bl	8009b14 <HAL_UART_RxHalfCpltCallback>
}
 8009d5e:	bf00      	nop
 8009d60:	3710      	adds	r7, #16
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}

08009d66 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009d66:	b580      	push	{r7, lr}
 8009d68:	b084      	sub	sp, #16
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d76:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	695b      	ldr	r3, [r3, #20]
 8009d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d82:	2b80      	cmp	r3, #128	; 0x80
 8009d84:	bf0c      	ite	eq
 8009d86:	2301      	moveq	r3, #1
 8009d88:	2300      	movne	r3, #0
 8009d8a:	b2db      	uxtb	r3, r3
 8009d8c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	2b21      	cmp	r3, #33	; 0x21
 8009d98:	d108      	bne.n	8009dac <UART_DMAError+0x46>
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d005      	beq.n	8009dac <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	2200      	movs	r2, #0
 8009da4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009da6:	68b8      	ldr	r0, [r7, #8]
 8009da8:	f000 f8c2 	bl	8009f30 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	695b      	ldr	r3, [r3, #20]
 8009db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009db6:	2b40      	cmp	r3, #64	; 0x40
 8009db8:	bf0c      	ite	eq
 8009dba:	2301      	moveq	r3, #1
 8009dbc:	2300      	movne	r3, #0
 8009dbe:	b2db      	uxtb	r3, r3
 8009dc0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009dc8:	b2db      	uxtb	r3, r3
 8009dca:	2b22      	cmp	r3, #34	; 0x22
 8009dcc:	d108      	bne.n	8009de0 <UART_DMAError+0x7a>
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d005      	beq.n	8009de0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009dda:	68b8      	ldr	r0, [r7, #8]
 8009ddc:	f000 f8d0 	bl	8009f80 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009de4:	f043 0210 	orr.w	r2, r3, #16
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009dec:	68b8      	ldr	r0, [r7, #8]
 8009dee:	f7ff fe9b 	bl	8009b28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009df2:	bf00      	nop
 8009df4:	3710      	adds	r7, #16
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
	...

08009dfc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b098      	sub	sp, #96	; 0x60
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	4613      	mov	r3, r2
 8009e08:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009e0a:	68ba      	ldr	r2, [r7, #8]
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	88fa      	ldrh	r2, [r7, #6]
 8009e14:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2222      	movs	r2, #34	; 0x22
 8009e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e28:	4a3e      	ldr	r2, [pc, #248]	; (8009f24 <UART_Start_Receive_DMA+0x128>)
 8009e2a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e30:	4a3d      	ldr	r2, [pc, #244]	; (8009f28 <UART_Start_Receive_DMA+0x12c>)
 8009e32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e38:	4a3c      	ldr	r2, [pc, #240]	; (8009f2c <UART_Start_Receive_DMA+0x130>)
 8009e3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e40:	2200      	movs	r2, #0
 8009e42:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009e44:	f107 0308 	add.w	r3, r7, #8
 8009e48:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	3304      	adds	r3, #4
 8009e54:	4619      	mov	r1, r3
 8009e56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	88fb      	ldrh	r3, [r7, #6]
 8009e5c:	f7fa fa00 	bl	8004260 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009e60:	2300      	movs	r3, #0
 8009e62:	613b      	str	r3, [r7, #16]
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	613b      	str	r3, [r7, #16]
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	613b      	str	r3, [r7, #16]
 8009e74:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	330c      	adds	r3, #12
 8009e84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e88:	e853 3f00 	ldrex	r3, [r3]
 8009e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e94:	65bb      	str	r3, [r7, #88]	; 0x58
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	330c      	adds	r3, #12
 8009e9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009e9e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009ea0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009ea4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009ea6:	e841 2300 	strex	r3, r2, [r1]
 8009eaa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d1e5      	bne.n	8009e7e <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	3314      	adds	r3, #20
 8009eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ebc:	e853 3f00 	ldrex	r3, [r3]
 8009ec0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec4:	f043 0301 	orr.w	r3, r3, #1
 8009ec8:	657b      	str	r3, [r7, #84]	; 0x54
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	3314      	adds	r3, #20
 8009ed0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009ed2:	63ba      	str	r2, [r7, #56]	; 0x38
 8009ed4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009ed8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009eda:	e841 2300 	strex	r3, r2, [r1]
 8009ede:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d1e5      	bne.n	8009eb2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	3314      	adds	r3, #20
 8009eec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eee:	69bb      	ldr	r3, [r7, #24]
 8009ef0:	e853 3f00 	ldrex	r3, [r3]
 8009ef4:	617b      	str	r3, [r7, #20]
   return(result);
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009efc:	653b      	str	r3, [r7, #80]	; 0x50
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	3314      	adds	r3, #20
 8009f04:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009f06:	627a      	str	r2, [r7, #36]	; 0x24
 8009f08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f0a:	6a39      	ldr	r1, [r7, #32]
 8009f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f0e:	e841 2300 	strex	r3, r2, [r1]
 8009f12:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f14:	69fb      	ldr	r3, [r7, #28]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d1e5      	bne.n	8009ee6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8009f1a:	2300      	movs	r3, #0
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3760      	adds	r7, #96	; 0x60
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}
 8009f24:	08009c0b 	.word	0x08009c0b
 8009f28:	08009d31 	.word	0x08009d31
 8009f2c:	08009d67 	.word	0x08009d67

08009f30 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b089      	sub	sp, #36	; 0x24
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	330c      	adds	r3, #12
 8009f3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	e853 3f00 	ldrex	r3, [r3]
 8009f46:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009f4e:	61fb      	str	r3, [r7, #28]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	330c      	adds	r3, #12
 8009f56:	69fa      	ldr	r2, [r7, #28]
 8009f58:	61ba      	str	r2, [r7, #24]
 8009f5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f5c:	6979      	ldr	r1, [r7, #20]
 8009f5e:	69ba      	ldr	r2, [r7, #24]
 8009f60:	e841 2300 	strex	r3, r2, [r1]
 8009f64:	613b      	str	r3, [r7, #16]
   return(result);
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d1e5      	bne.n	8009f38 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2220      	movs	r2, #32
 8009f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009f74:	bf00      	nop
 8009f76:	3724      	adds	r7, #36	; 0x24
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b095      	sub	sp, #84	; 0x54
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	330c      	adds	r3, #12
 8009f8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f92:	e853 3f00 	ldrex	r3, [r3]
 8009f96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	330c      	adds	r3, #12
 8009fa6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009fa8:	643a      	str	r2, [r7, #64]	; 0x40
 8009faa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009fae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009fb0:	e841 2300 	strex	r3, r2, [r1]
 8009fb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d1e5      	bne.n	8009f88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	3314      	adds	r3, #20
 8009fc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc4:	6a3b      	ldr	r3, [r7, #32]
 8009fc6:	e853 3f00 	ldrex	r3, [r3]
 8009fca:	61fb      	str	r3, [r7, #28]
   return(result);
 8009fcc:	69fb      	ldr	r3, [r7, #28]
 8009fce:	f023 0301 	bic.w	r3, r3, #1
 8009fd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	3314      	adds	r3, #20
 8009fda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009fdc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009fde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009fe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fe4:	e841 2300 	strex	r3, r2, [r1]
 8009fe8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d1e5      	bne.n	8009fbc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d119      	bne.n	800a02c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	330c      	adds	r3, #12
 8009ffe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	e853 3f00 	ldrex	r3, [r3]
 800a006:	60bb      	str	r3, [r7, #8]
   return(result);
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	f023 0310 	bic.w	r3, r3, #16
 800a00e:	647b      	str	r3, [r7, #68]	; 0x44
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	330c      	adds	r3, #12
 800a016:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a018:	61ba      	str	r2, [r7, #24]
 800a01a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a01c:	6979      	ldr	r1, [r7, #20]
 800a01e:	69ba      	ldr	r2, [r7, #24]
 800a020:	e841 2300 	strex	r3, r2, [r1]
 800a024:	613b      	str	r3, [r7, #16]
   return(result);
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d1e5      	bne.n	8009ff8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2220      	movs	r2, #32
 800a030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a03a:	bf00      	nop
 800a03c:	3754      	adds	r7, #84	; 0x54
 800a03e:	46bd      	mov	sp, r7
 800a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a044:	4770      	bx	lr

0800a046 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a046:	b580      	push	{r7, lr}
 800a048:	b084      	sub	sp, #16
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a052:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2200      	movs	r2, #0
 800a058:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2200      	movs	r2, #0
 800a05e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a060:	68f8      	ldr	r0, [r7, #12]
 800a062:	f7ff fd61 	bl	8009b28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a066:	bf00      	nop
 800a068:	3710      	adds	r7, #16
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}

0800a06e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a06e:	b480      	push	{r7}
 800a070:	b085      	sub	sp, #20
 800a072:	af00      	add	r7, sp, #0
 800a074:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a07c:	b2db      	uxtb	r3, r3
 800a07e:	2b21      	cmp	r3, #33	; 0x21
 800a080:	d13e      	bne.n	800a100 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	689b      	ldr	r3, [r3, #8]
 800a086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a08a:	d114      	bne.n	800a0b6 <UART_Transmit_IT+0x48>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	691b      	ldr	r3, [r3, #16]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d110      	bne.n	800a0b6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6a1b      	ldr	r3, [r3, #32]
 800a098:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	881b      	ldrh	r3, [r3, #0]
 800a09e:	461a      	mov	r2, r3
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a0a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6a1b      	ldr	r3, [r3, #32]
 800a0ae:	1c9a      	adds	r2, r3, #2
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	621a      	str	r2, [r3, #32]
 800a0b4:	e008      	b.n	800a0c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6a1b      	ldr	r3, [r3, #32]
 800a0ba:	1c59      	adds	r1, r3, #1
 800a0bc:	687a      	ldr	r2, [r7, #4]
 800a0be:	6211      	str	r1, [r2, #32]
 800a0c0:	781a      	ldrb	r2, [r3, #0]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	3b01      	subs	r3, #1
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d10f      	bne.n	800a0fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	68da      	ldr	r2, [r3, #12]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a0ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	68da      	ldr	r2, [r3, #12]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a0fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	e000      	b.n	800a102 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a100:	2302      	movs	r3, #2
  }
}
 800a102:	4618      	mov	r0, r3
 800a104:	3714      	adds	r7, #20
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr

0800a10e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a10e:	b580      	push	{r7, lr}
 800a110:	b082      	sub	sp, #8
 800a112:	af00      	add	r7, sp, #0
 800a114:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	68da      	ldr	r2, [r3, #12]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a124:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2220      	movs	r2, #32
 800a12a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f7f9 f904 	bl	800333c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	3708      	adds	r7, #8
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}

0800a13e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a13e:	b580      	push	{r7, lr}
 800a140:	b08c      	sub	sp, #48	; 0x30
 800a142:	af00      	add	r7, sp, #0
 800a144:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a14c:	b2db      	uxtb	r3, r3
 800a14e:	2b22      	cmp	r3, #34	; 0x22
 800a150:	f040 80ab 	bne.w	800a2aa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	689b      	ldr	r3, [r3, #8]
 800a158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a15c:	d117      	bne.n	800a18e <UART_Receive_IT+0x50>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	691b      	ldr	r3, [r3, #16]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d113      	bne.n	800a18e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a166:	2300      	movs	r3, #0
 800a168:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a16e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	b29b      	uxth	r3, r3
 800a178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a17c:	b29a      	uxth	r2, r3
 800a17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a180:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a186:	1c9a      	adds	r2, r3, #2
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	629a      	str	r2, [r3, #40]	; 0x28
 800a18c:	e026      	b.n	800a1dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a192:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a194:	2300      	movs	r3, #0
 800a196:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	689b      	ldr	r3, [r3, #8]
 800a19c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1a0:	d007      	beq.n	800a1b2 <UART_Receive_IT+0x74>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d10a      	bne.n	800a1c0 <UART_Receive_IT+0x82>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	691b      	ldr	r3, [r3, #16]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d106      	bne.n	800a1c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	b2da      	uxtb	r2, r3
 800a1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1bc:	701a      	strb	r2, [r3, #0]
 800a1be:	e008      	b.n	800a1d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	b2db      	uxtb	r3, r3
 800a1c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1cc:	b2da      	uxtb	r2, r3
 800a1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1d6:	1c5a      	adds	r2, r3, #1
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	3b01      	subs	r3, #1
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d15a      	bne.n	800a2a6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	68da      	ldr	r2, [r3, #12]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f022 0220 	bic.w	r2, r2, #32
 800a1fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	68da      	ldr	r2, [r3, #12]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a20e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	695a      	ldr	r2, [r3, #20]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f022 0201 	bic.w	r2, r2, #1
 800a21e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2220      	movs	r2, #32
 800a224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d135      	bne.n	800a29c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2200      	movs	r2, #0
 800a234:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	330c      	adds	r3, #12
 800a23c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	e853 3f00 	ldrex	r3, [r3]
 800a244:	613b      	str	r3, [r7, #16]
   return(result);
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	f023 0310 	bic.w	r3, r3, #16
 800a24c:	627b      	str	r3, [r7, #36]	; 0x24
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	330c      	adds	r3, #12
 800a254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a256:	623a      	str	r2, [r7, #32]
 800a258:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a25a:	69f9      	ldr	r1, [r7, #28]
 800a25c:	6a3a      	ldr	r2, [r7, #32]
 800a25e:	e841 2300 	strex	r3, r2, [r1]
 800a262:	61bb      	str	r3, [r7, #24]
   return(result);
 800a264:	69bb      	ldr	r3, [r7, #24]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d1e5      	bne.n	800a236 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f003 0310 	and.w	r3, r3, #16
 800a274:	2b10      	cmp	r3, #16
 800a276:	d10a      	bne.n	800a28e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a278:	2300      	movs	r3, #0
 800a27a:	60fb      	str	r3, [r7, #12]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	60fb      	str	r3, [r7, #12]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	60fb      	str	r3, [r7, #12]
 800a28c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a292:	4619      	mov	r1, r3
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f7ff fc51 	bl	8009b3c <HAL_UARTEx_RxEventCallback>
 800a29a:	e002      	b.n	800a2a2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f7ff fc2f 	bl	8009b00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	e002      	b.n	800a2ac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	e000      	b.n	800a2ac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a2aa:	2302      	movs	r3, #2
  }
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3730      	adds	r7, #48	; 0x30
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b8:	b09f      	sub	sp, #124	; 0x7c
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a2be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	691b      	ldr	r3, [r3, #16]
 800a2c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a2c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2ca:	68d9      	ldr	r1, [r3, #12]
 800a2cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2ce:	681a      	ldr	r2, [r3, #0]
 800a2d0:	ea40 0301 	orr.w	r3, r0, r1
 800a2d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a2d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2d8:	689a      	ldr	r2, [r3, #8]
 800a2da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2dc:	691b      	ldr	r3, [r3, #16]
 800a2de:	431a      	orrs	r2, r3
 800a2e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2e2:	695b      	ldr	r3, [r3, #20]
 800a2e4:	431a      	orrs	r2, r3
 800a2e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2e8:	69db      	ldr	r3, [r3, #28]
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a2ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	68db      	ldr	r3, [r3, #12]
 800a2f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a2f8:	f021 010c 	bic.w	r1, r1, #12
 800a2fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2fe:	681a      	ldr	r2, [r3, #0]
 800a300:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a302:	430b      	orrs	r3, r1
 800a304:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	695b      	ldr	r3, [r3, #20]
 800a30c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a312:	6999      	ldr	r1, [r3, #24]
 800a314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a316:	681a      	ldr	r2, [r3, #0]
 800a318:	ea40 0301 	orr.w	r3, r0, r1
 800a31c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a31e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	4bc5      	ldr	r3, [pc, #788]	; (800a638 <UART_SetConfig+0x384>)
 800a324:	429a      	cmp	r2, r3
 800a326:	d004      	beq.n	800a332 <UART_SetConfig+0x7e>
 800a328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a32a:	681a      	ldr	r2, [r3, #0]
 800a32c:	4bc3      	ldr	r3, [pc, #780]	; (800a63c <UART_SetConfig+0x388>)
 800a32e:	429a      	cmp	r2, r3
 800a330:	d103      	bne.n	800a33a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a332:	f7fe f947 	bl	80085c4 <HAL_RCC_GetPCLK2Freq>
 800a336:	6778      	str	r0, [r7, #116]	; 0x74
 800a338:	e002      	b.n	800a340 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a33a:	f7fe f92f 	bl	800859c <HAL_RCC_GetPCLK1Freq>
 800a33e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a342:	69db      	ldr	r3, [r3, #28]
 800a344:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a348:	f040 80b6 	bne.w	800a4b8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a34c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a34e:	461c      	mov	r4, r3
 800a350:	f04f 0500 	mov.w	r5, #0
 800a354:	4622      	mov	r2, r4
 800a356:	462b      	mov	r3, r5
 800a358:	1891      	adds	r1, r2, r2
 800a35a:	6439      	str	r1, [r7, #64]	; 0x40
 800a35c:	415b      	adcs	r3, r3
 800a35e:	647b      	str	r3, [r7, #68]	; 0x44
 800a360:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a364:	1912      	adds	r2, r2, r4
 800a366:	eb45 0303 	adc.w	r3, r5, r3
 800a36a:	f04f 0000 	mov.w	r0, #0
 800a36e:	f04f 0100 	mov.w	r1, #0
 800a372:	00d9      	lsls	r1, r3, #3
 800a374:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a378:	00d0      	lsls	r0, r2, #3
 800a37a:	4602      	mov	r2, r0
 800a37c:	460b      	mov	r3, r1
 800a37e:	1911      	adds	r1, r2, r4
 800a380:	6639      	str	r1, [r7, #96]	; 0x60
 800a382:	416b      	adcs	r3, r5
 800a384:	667b      	str	r3, [r7, #100]	; 0x64
 800a386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	461a      	mov	r2, r3
 800a38c:	f04f 0300 	mov.w	r3, #0
 800a390:	1891      	adds	r1, r2, r2
 800a392:	63b9      	str	r1, [r7, #56]	; 0x38
 800a394:	415b      	adcs	r3, r3
 800a396:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a398:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a39c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a3a0:	f7f5 ff12 	bl	80001c8 <__aeabi_uldivmod>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	460b      	mov	r3, r1
 800a3a8:	4ba5      	ldr	r3, [pc, #660]	; (800a640 <UART_SetConfig+0x38c>)
 800a3aa:	fba3 2302 	umull	r2, r3, r3, r2
 800a3ae:	095b      	lsrs	r3, r3, #5
 800a3b0:	011e      	lsls	r6, r3, #4
 800a3b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a3b4:	461c      	mov	r4, r3
 800a3b6:	f04f 0500 	mov.w	r5, #0
 800a3ba:	4622      	mov	r2, r4
 800a3bc:	462b      	mov	r3, r5
 800a3be:	1891      	adds	r1, r2, r2
 800a3c0:	6339      	str	r1, [r7, #48]	; 0x30
 800a3c2:	415b      	adcs	r3, r3
 800a3c4:	637b      	str	r3, [r7, #52]	; 0x34
 800a3c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a3ca:	1912      	adds	r2, r2, r4
 800a3cc:	eb45 0303 	adc.w	r3, r5, r3
 800a3d0:	f04f 0000 	mov.w	r0, #0
 800a3d4:	f04f 0100 	mov.w	r1, #0
 800a3d8:	00d9      	lsls	r1, r3, #3
 800a3da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a3de:	00d0      	lsls	r0, r2, #3
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	1911      	adds	r1, r2, r4
 800a3e6:	65b9      	str	r1, [r7, #88]	; 0x58
 800a3e8:	416b      	adcs	r3, r5
 800a3ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a3ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	461a      	mov	r2, r3
 800a3f2:	f04f 0300 	mov.w	r3, #0
 800a3f6:	1891      	adds	r1, r2, r2
 800a3f8:	62b9      	str	r1, [r7, #40]	; 0x28
 800a3fa:	415b      	adcs	r3, r3
 800a3fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a3fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a402:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a406:	f7f5 fedf 	bl	80001c8 <__aeabi_uldivmod>
 800a40a:	4602      	mov	r2, r0
 800a40c:	460b      	mov	r3, r1
 800a40e:	4b8c      	ldr	r3, [pc, #560]	; (800a640 <UART_SetConfig+0x38c>)
 800a410:	fba3 1302 	umull	r1, r3, r3, r2
 800a414:	095b      	lsrs	r3, r3, #5
 800a416:	2164      	movs	r1, #100	; 0x64
 800a418:	fb01 f303 	mul.w	r3, r1, r3
 800a41c:	1ad3      	subs	r3, r2, r3
 800a41e:	00db      	lsls	r3, r3, #3
 800a420:	3332      	adds	r3, #50	; 0x32
 800a422:	4a87      	ldr	r2, [pc, #540]	; (800a640 <UART_SetConfig+0x38c>)
 800a424:	fba2 2303 	umull	r2, r3, r2, r3
 800a428:	095b      	lsrs	r3, r3, #5
 800a42a:	005b      	lsls	r3, r3, #1
 800a42c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a430:	441e      	add	r6, r3
 800a432:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a434:	4618      	mov	r0, r3
 800a436:	f04f 0100 	mov.w	r1, #0
 800a43a:	4602      	mov	r2, r0
 800a43c:	460b      	mov	r3, r1
 800a43e:	1894      	adds	r4, r2, r2
 800a440:	623c      	str	r4, [r7, #32]
 800a442:	415b      	adcs	r3, r3
 800a444:	627b      	str	r3, [r7, #36]	; 0x24
 800a446:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a44a:	1812      	adds	r2, r2, r0
 800a44c:	eb41 0303 	adc.w	r3, r1, r3
 800a450:	f04f 0400 	mov.w	r4, #0
 800a454:	f04f 0500 	mov.w	r5, #0
 800a458:	00dd      	lsls	r5, r3, #3
 800a45a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a45e:	00d4      	lsls	r4, r2, #3
 800a460:	4622      	mov	r2, r4
 800a462:	462b      	mov	r3, r5
 800a464:	1814      	adds	r4, r2, r0
 800a466:	653c      	str	r4, [r7, #80]	; 0x50
 800a468:	414b      	adcs	r3, r1
 800a46a:	657b      	str	r3, [r7, #84]	; 0x54
 800a46c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	461a      	mov	r2, r3
 800a472:	f04f 0300 	mov.w	r3, #0
 800a476:	1891      	adds	r1, r2, r2
 800a478:	61b9      	str	r1, [r7, #24]
 800a47a:	415b      	adcs	r3, r3
 800a47c:	61fb      	str	r3, [r7, #28]
 800a47e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a482:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a486:	f7f5 fe9f 	bl	80001c8 <__aeabi_uldivmod>
 800a48a:	4602      	mov	r2, r0
 800a48c:	460b      	mov	r3, r1
 800a48e:	4b6c      	ldr	r3, [pc, #432]	; (800a640 <UART_SetConfig+0x38c>)
 800a490:	fba3 1302 	umull	r1, r3, r3, r2
 800a494:	095b      	lsrs	r3, r3, #5
 800a496:	2164      	movs	r1, #100	; 0x64
 800a498:	fb01 f303 	mul.w	r3, r1, r3
 800a49c:	1ad3      	subs	r3, r2, r3
 800a49e:	00db      	lsls	r3, r3, #3
 800a4a0:	3332      	adds	r3, #50	; 0x32
 800a4a2:	4a67      	ldr	r2, [pc, #412]	; (800a640 <UART_SetConfig+0x38c>)
 800a4a4:	fba2 2303 	umull	r2, r3, r2, r3
 800a4a8:	095b      	lsrs	r3, r3, #5
 800a4aa:	f003 0207 	and.w	r2, r3, #7
 800a4ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4432      	add	r2, r6
 800a4b4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a4b6:	e0b9      	b.n	800a62c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a4b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4ba:	461c      	mov	r4, r3
 800a4bc:	f04f 0500 	mov.w	r5, #0
 800a4c0:	4622      	mov	r2, r4
 800a4c2:	462b      	mov	r3, r5
 800a4c4:	1891      	adds	r1, r2, r2
 800a4c6:	6139      	str	r1, [r7, #16]
 800a4c8:	415b      	adcs	r3, r3
 800a4ca:	617b      	str	r3, [r7, #20]
 800a4cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a4d0:	1912      	adds	r2, r2, r4
 800a4d2:	eb45 0303 	adc.w	r3, r5, r3
 800a4d6:	f04f 0000 	mov.w	r0, #0
 800a4da:	f04f 0100 	mov.w	r1, #0
 800a4de:	00d9      	lsls	r1, r3, #3
 800a4e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a4e4:	00d0      	lsls	r0, r2, #3
 800a4e6:	4602      	mov	r2, r0
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	eb12 0804 	adds.w	r8, r2, r4
 800a4ee:	eb43 0905 	adc.w	r9, r3, r5
 800a4f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f04f 0100 	mov.w	r1, #0
 800a4fc:	f04f 0200 	mov.w	r2, #0
 800a500:	f04f 0300 	mov.w	r3, #0
 800a504:	008b      	lsls	r3, r1, #2
 800a506:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a50a:	0082      	lsls	r2, r0, #2
 800a50c:	4640      	mov	r0, r8
 800a50e:	4649      	mov	r1, r9
 800a510:	f7f5 fe5a 	bl	80001c8 <__aeabi_uldivmod>
 800a514:	4602      	mov	r2, r0
 800a516:	460b      	mov	r3, r1
 800a518:	4b49      	ldr	r3, [pc, #292]	; (800a640 <UART_SetConfig+0x38c>)
 800a51a:	fba3 2302 	umull	r2, r3, r3, r2
 800a51e:	095b      	lsrs	r3, r3, #5
 800a520:	011e      	lsls	r6, r3, #4
 800a522:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a524:	4618      	mov	r0, r3
 800a526:	f04f 0100 	mov.w	r1, #0
 800a52a:	4602      	mov	r2, r0
 800a52c:	460b      	mov	r3, r1
 800a52e:	1894      	adds	r4, r2, r2
 800a530:	60bc      	str	r4, [r7, #8]
 800a532:	415b      	adcs	r3, r3
 800a534:	60fb      	str	r3, [r7, #12]
 800a536:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a53a:	1812      	adds	r2, r2, r0
 800a53c:	eb41 0303 	adc.w	r3, r1, r3
 800a540:	f04f 0400 	mov.w	r4, #0
 800a544:	f04f 0500 	mov.w	r5, #0
 800a548:	00dd      	lsls	r5, r3, #3
 800a54a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a54e:	00d4      	lsls	r4, r2, #3
 800a550:	4622      	mov	r2, r4
 800a552:	462b      	mov	r3, r5
 800a554:	1814      	adds	r4, r2, r0
 800a556:	64bc      	str	r4, [r7, #72]	; 0x48
 800a558:	414b      	adcs	r3, r1
 800a55a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a55c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	4618      	mov	r0, r3
 800a562:	f04f 0100 	mov.w	r1, #0
 800a566:	f04f 0200 	mov.w	r2, #0
 800a56a:	f04f 0300 	mov.w	r3, #0
 800a56e:	008b      	lsls	r3, r1, #2
 800a570:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a574:	0082      	lsls	r2, r0, #2
 800a576:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a57a:	f7f5 fe25 	bl	80001c8 <__aeabi_uldivmod>
 800a57e:	4602      	mov	r2, r0
 800a580:	460b      	mov	r3, r1
 800a582:	4b2f      	ldr	r3, [pc, #188]	; (800a640 <UART_SetConfig+0x38c>)
 800a584:	fba3 1302 	umull	r1, r3, r3, r2
 800a588:	095b      	lsrs	r3, r3, #5
 800a58a:	2164      	movs	r1, #100	; 0x64
 800a58c:	fb01 f303 	mul.w	r3, r1, r3
 800a590:	1ad3      	subs	r3, r2, r3
 800a592:	011b      	lsls	r3, r3, #4
 800a594:	3332      	adds	r3, #50	; 0x32
 800a596:	4a2a      	ldr	r2, [pc, #168]	; (800a640 <UART_SetConfig+0x38c>)
 800a598:	fba2 2303 	umull	r2, r3, r2, r3
 800a59c:	095b      	lsrs	r3, r3, #5
 800a59e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a5a2:	441e      	add	r6, r3
 800a5a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f04f 0100 	mov.w	r1, #0
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	1894      	adds	r4, r2, r2
 800a5b2:	603c      	str	r4, [r7, #0]
 800a5b4:	415b      	adcs	r3, r3
 800a5b6:	607b      	str	r3, [r7, #4]
 800a5b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5bc:	1812      	adds	r2, r2, r0
 800a5be:	eb41 0303 	adc.w	r3, r1, r3
 800a5c2:	f04f 0400 	mov.w	r4, #0
 800a5c6:	f04f 0500 	mov.w	r5, #0
 800a5ca:	00dd      	lsls	r5, r3, #3
 800a5cc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a5d0:	00d4      	lsls	r4, r2, #3
 800a5d2:	4622      	mov	r2, r4
 800a5d4:	462b      	mov	r3, r5
 800a5d6:	eb12 0a00 	adds.w	sl, r2, r0
 800a5da:	eb43 0b01 	adc.w	fp, r3, r1
 800a5de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f04f 0100 	mov.w	r1, #0
 800a5e8:	f04f 0200 	mov.w	r2, #0
 800a5ec:	f04f 0300 	mov.w	r3, #0
 800a5f0:	008b      	lsls	r3, r1, #2
 800a5f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a5f6:	0082      	lsls	r2, r0, #2
 800a5f8:	4650      	mov	r0, sl
 800a5fa:	4659      	mov	r1, fp
 800a5fc:	f7f5 fde4 	bl	80001c8 <__aeabi_uldivmod>
 800a600:	4602      	mov	r2, r0
 800a602:	460b      	mov	r3, r1
 800a604:	4b0e      	ldr	r3, [pc, #56]	; (800a640 <UART_SetConfig+0x38c>)
 800a606:	fba3 1302 	umull	r1, r3, r3, r2
 800a60a:	095b      	lsrs	r3, r3, #5
 800a60c:	2164      	movs	r1, #100	; 0x64
 800a60e:	fb01 f303 	mul.w	r3, r1, r3
 800a612:	1ad3      	subs	r3, r2, r3
 800a614:	011b      	lsls	r3, r3, #4
 800a616:	3332      	adds	r3, #50	; 0x32
 800a618:	4a09      	ldr	r2, [pc, #36]	; (800a640 <UART_SetConfig+0x38c>)
 800a61a:	fba2 2303 	umull	r2, r3, r2, r3
 800a61e:	095b      	lsrs	r3, r3, #5
 800a620:	f003 020f 	and.w	r2, r3, #15
 800a624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4432      	add	r2, r6
 800a62a:	609a      	str	r2, [r3, #8]
}
 800a62c:	bf00      	nop
 800a62e:	377c      	adds	r7, #124	; 0x7c
 800a630:	46bd      	mov	sp, r7
 800a632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a636:	bf00      	nop
 800a638:	40011000 	.word	0x40011000
 800a63c:	40011400 	.word	0x40011400
 800a640:	51eb851f 	.word	0x51eb851f

0800a644 <__errno>:
 800a644:	4b01      	ldr	r3, [pc, #4]	; (800a64c <__errno+0x8>)
 800a646:	6818      	ldr	r0, [r3, #0]
 800a648:	4770      	bx	lr
 800a64a:	bf00      	nop
 800a64c:	20000114 	.word	0x20000114

0800a650 <__libc_init_array>:
 800a650:	b570      	push	{r4, r5, r6, lr}
 800a652:	4d0d      	ldr	r5, [pc, #52]	; (800a688 <__libc_init_array+0x38>)
 800a654:	4c0d      	ldr	r4, [pc, #52]	; (800a68c <__libc_init_array+0x3c>)
 800a656:	1b64      	subs	r4, r4, r5
 800a658:	10a4      	asrs	r4, r4, #2
 800a65a:	2600      	movs	r6, #0
 800a65c:	42a6      	cmp	r6, r4
 800a65e:	d109      	bne.n	800a674 <__libc_init_array+0x24>
 800a660:	4d0b      	ldr	r5, [pc, #44]	; (800a690 <__libc_init_array+0x40>)
 800a662:	4c0c      	ldr	r4, [pc, #48]	; (800a694 <__libc_init_array+0x44>)
 800a664:	f000 fee2 	bl	800b42c <_init>
 800a668:	1b64      	subs	r4, r4, r5
 800a66a:	10a4      	asrs	r4, r4, #2
 800a66c:	2600      	movs	r6, #0
 800a66e:	42a6      	cmp	r6, r4
 800a670:	d105      	bne.n	800a67e <__libc_init_array+0x2e>
 800a672:	bd70      	pop	{r4, r5, r6, pc}
 800a674:	f855 3b04 	ldr.w	r3, [r5], #4
 800a678:	4798      	blx	r3
 800a67a:	3601      	adds	r6, #1
 800a67c:	e7ee      	b.n	800a65c <__libc_init_array+0xc>
 800a67e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a682:	4798      	blx	r3
 800a684:	3601      	adds	r6, #1
 800a686:	e7f2      	b.n	800a66e <__libc_init_array+0x1e>
 800a688:	0800b94c 	.word	0x0800b94c
 800a68c:	0800b94c 	.word	0x0800b94c
 800a690:	0800b94c 	.word	0x0800b94c
 800a694:	0800b950 	.word	0x0800b950

0800a698 <memcpy>:
 800a698:	440a      	add	r2, r1
 800a69a:	4291      	cmp	r1, r2
 800a69c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a6a0:	d100      	bne.n	800a6a4 <memcpy+0xc>
 800a6a2:	4770      	bx	lr
 800a6a4:	b510      	push	{r4, lr}
 800a6a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6ae:	4291      	cmp	r1, r2
 800a6b0:	d1f9      	bne.n	800a6a6 <memcpy+0xe>
 800a6b2:	bd10      	pop	{r4, pc}

0800a6b4 <memset>:
 800a6b4:	4402      	add	r2, r0
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d100      	bne.n	800a6be <memset+0xa>
 800a6bc:	4770      	bx	lr
 800a6be:	f803 1b01 	strb.w	r1, [r3], #1
 800a6c2:	e7f9      	b.n	800a6b8 <memset+0x4>

0800a6c4 <sinf>:
 800a6c4:	ee10 3a10 	vmov	r3, s0
 800a6c8:	b507      	push	{r0, r1, r2, lr}
 800a6ca:	4a1d      	ldr	r2, [pc, #116]	; (800a740 <sinf+0x7c>)
 800a6cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	dc05      	bgt.n	800a6e0 <sinf+0x1c>
 800a6d4:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800a744 <sinf+0x80>
 800a6d8:	2000      	movs	r0, #0
 800a6da:	f000 fd9d 	bl	800b218 <__kernel_sinf>
 800a6de:	e004      	b.n	800a6ea <sinf+0x26>
 800a6e0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a6e4:	db04      	blt.n	800a6f0 <sinf+0x2c>
 800a6e6:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a6ea:	b003      	add	sp, #12
 800a6ec:	f85d fb04 	ldr.w	pc, [sp], #4
 800a6f0:	4668      	mov	r0, sp
 800a6f2:	f000 f967 	bl	800a9c4 <__ieee754_rem_pio2f>
 800a6f6:	f000 0003 	and.w	r0, r0, #3
 800a6fa:	2801      	cmp	r0, #1
 800a6fc:	d008      	beq.n	800a710 <sinf+0x4c>
 800a6fe:	2802      	cmp	r0, #2
 800a700:	d00d      	beq.n	800a71e <sinf+0x5a>
 800a702:	b9b0      	cbnz	r0, 800a732 <sinf+0x6e>
 800a704:	eddd 0a01 	vldr	s1, [sp, #4]
 800a708:	ed9d 0a00 	vldr	s0, [sp]
 800a70c:	2001      	movs	r0, #1
 800a70e:	e7e4      	b.n	800a6da <sinf+0x16>
 800a710:	eddd 0a01 	vldr	s1, [sp, #4]
 800a714:	ed9d 0a00 	vldr	s0, [sp]
 800a718:	f000 fa94 	bl	800ac44 <__kernel_cosf>
 800a71c:	e7e5      	b.n	800a6ea <sinf+0x26>
 800a71e:	eddd 0a01 	vldr	s1, [sp, #4]
 800a722:	ed9d 0a00 	vldr	s0, [sp]
 800a726:	2001      	movs	r0, #1
 800a728:	f000 fd76 	bl	800b218 <__kernel_sinf>
 800a72c:	eeb1 0a40 	vneg.f32	s0, s0
 800a730:	e7db      	b.n	800a6ea <sinf+0x26>
 800a732:	eddd 0a01 	vldr	s1, [sp, #4]
 800a736:	ed9d 0a00 	vldr	s0, [sp]
 800a73a:	f000 fa83 	bl	800ac44 <__kernel_cosf>
 800a73e:	e7f5      	b.n	800a72c <sinf+0x68>
 800a740:	3f490fd8 	.word	0x3f490fd8
 800a744:	00000000 	.word	0x00000000

0800a748 <asinf>:
 800a748:	b508      	push	{r3, lr}
 800a74a:	ed2d 8b02 	vpush	{d8}
 800a74e:	eeb0 8a40 	vmov.f32	s16, s0
 800a752:	f000 f851 	bl	800a7f8 <__ieee754_asinf>
 800a756:	4b13      	ldr	r3, [pc, #76]	; (800a7a4 <asinf+0x5c>)
 800a758:	f993 3000 	ldrsb.w	r3, [r3]
 800a75c:	3301      	adds	r3, #1
 800a75e:	eef0 8a40 	vmov.f32	s17, s0
 800a762:	d01a      	beq.n	800a79a <asinf+0x52>
 800a764:	eeb4 8a48 	vcmp.f32	s16, s16
 800a768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a76c:	d615      	bvs.n	800a79a <asinf+0x52>
 800a76e:	eeb0 0a48 	vmov.f32	s0, s16
 800a772:	f000 fd99 	bl	800b2a8 <fabsf>
 800a776:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a77a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800a77e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a782:	dd0a      	ble.n	800a79a <asinf+0x52>
 800a784:	f7ff ff5e 	bl	800a644 <__errno>
 800a788:	ecbd 8b02 	vpop	{d8}
 800a78c:	2321      	movs	r3, #33	; 0x21
 800a78e:	6003      	str	r3, [r0, #0]
 800a790:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a794:	4804      	ldr	r0, [pc, #16]	; (800a7a8 <asinf+0x60>)
 800a796:	f000 bdd1 	b.w	800b33c <nanf>
 800a79a:	eeb0 0a68 	vmov.f32	s0, s17
 800a79e:	ecbd 8b02 	vpop	{d8}
 800a7a2:	bd08      	pop	{r3, pc}
 800a7a4:	20000178 	.word	0x20000178
 800a7a8:	0800b570 	.word	0x0800b570

0800a7ac <sqrtf>:
 800a7ac:	b508      	push	{r3, lr}
 800a7ae:	ed2d 8b02 	vpush	{d8}
 800a7b2:	eeb0 8a40 	vmov.f32	s16, s0
 800a7b6:	f000 fa41 	bl	800ac3c <__ieee754_sqrtf>
 800a7ba:	4b0d      	ldr	r3, [pc, #52]	; (800a7f0 <sqrtf+0x44>)
 800a7bc:	f993 3000 	ldrsb.w	r3, [r3]
 800a7c0:	3301      	adds	r3, #1
 800a7c2:	d011      	beq.n	800a7e8 <sqrtf+0x3c>
 800a7c4:	eeb4 8a48 	vcmp.f32	s16, s16
 800a7c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7cc:	d60c      	bvs.n	800a7e8 <sqrtf+0x3c>
 800a7ce:	eddf 8a09 	vldr	s17, [pc, #36]	; 800a7f4 <sqrtf+0x48>
 800a7d2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a7d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7da:	d505      	bpl.n	800a7e8 <sqrtf+0x3c>
 800a7dc:	f7ff ff32 	bl	800a644 <__errno>
 800a7e0:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a7e4:	2321      	movs	r3, #33	; 0x21
 800a7e6:	6003      	str	r3, [r0, #0]
 800a7e8:	ecbd 8b02 	vpop	{d8}
 800a7ec:	bd08      	pop	{r3, pc}
 800a7ee:	bf00      	nop
 800a7f0:	20000178 	.word	0x20000178
 800a7f4:	00000000 	.word	0x00000000

0800a7f8 <__ieee754_asinf>:
 800a7f8:	b538      	push	{r3, r4, r5, lr}
 800a7fa:	ee10 5a10 	vmov	r5, s0
 800a7fe:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800a802:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800a806:	ed2d 8b04 	vpush	{d8-d9}
 800a80a:	d10c      	bne.n	800a826 <__ieee754_asinf+0x2e>
 800a80c:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800a984 <__ieee754_asinf+0x18c>
 800a810:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800a988 <__ieee754_asinf+0x190>
 800a814:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a818:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a81c:	eeb0 0a67 	vmov.f32	s0, s15
 800a820:	ecbd 8b04 	vpop	{d8-d9}
 800a824:	bd38      	pop	{r3, r4, r5, pc}
 800a826:	dd04      	ble.n	800a832 <__ieee754_asinf+0x3a>
 800a828:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a82c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800a830:	e7f6      	b.n	800a820 <__ieee754_asinf+0x28>
 800a832:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800a836:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800a83a:	da0b      	bge.n	800a854 <__ieee754_asinf+0x5c>
 800a83c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800a840:	da52      	bge.n	800a8e8 <__ieee754_asinf+0xf0>
 800a842:	eddf 7a52 	vldr	s15, [pc, #328]	; 800a98c <__ieee754_asinf+0x194>
 800a846:	ee70 7a27 	vadd.f32	s15, s0, s15
 800a84a:	eef4 7ae8 	vcmpe.f32	s15, s17
 800a84e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a852:	dce5      	bgt.n	800a820 <__ieee754_asinf+0x28>
 800a854:	f000 fd28 	bl	800b2a8 <fabsf>
 800a858:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800a85c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800a860:	ee20 8a08 	vmul.f32	s16, s0, s16
 800a864:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800a990 <__ieee754_asinf+0x198>
 800a868:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800a994 <__ieee754_asinf+0x19c>
 800a86c:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800a998 <__ieee754_asinf+0x1a0>
 800a870:	eea8 7a27 	vfma.f32	s14, s16, s15
 800a874:	eddf 7a49 	vldr	s15, [pc, #292]	; 800a99c <__ieee754_asinf+0x1a4>
 800a878:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a87c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800a9a0 <__ieee754_asinf+0x1a8>
 800a880:	eea7 7a88 	vfma.f32	s14, s15, s16
 800a884:	eddf 7a47 	vldr	s15, [pc, #284]	; 800a9a4 <__ieee754_asinf+0x1ac>
 800a888:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a88c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800a9a8 <__ieee754_asinf+0x1b0>
 800a890:	eea7 9a88 	vfma.f32	s18, s15, s16
 800a894:	eddf 7a45 	vldr	s15, [pc, #276]	; 800a9ac <__ieee754_asinf+0x1b4>
 800a898:	eee8 7a07 	vfma.f32	s15, s16, s14
 800a89c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800a9b0 <__ieee754_asinf+0x1b8>
 800a8a0:	eea7 7a88 	vfma.f32	s14, s15, s16
 800a8a4:	eddf 7a43 	vldr	s15, [pc, #268]	; 800a9b4 <__ieee754_asinf+0x1bc>
 800a8a8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a8ac:	eeb0 0a48 	vmov.f32	s0, s16
 800a8b0:	eee7 8a88 	vfma.f32	s17, s15, s16
 800a8b4:	f000 f9c2 	bl	800ac3c <__ieee754_sqrtf>
 800a8b8:	4b3f      	ldr	r3, [pc, #252]	; (800a9b8 <__ieee754_asinf+0x1c0>)
 800a8ba:	ee29 9a08 	vmul.f32	s18, s18, s16
 800a8be:	429c      	cmp	r4, r3
 800a8c0:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800a8c4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a8c8:	dd3d      	ble.n	800a946 <__ieee754_asinf+0x14e>
 800a8ca:	eea0 0a06 	vfma.f32	s0, s0, s12
 800a8ce:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800a9bc <__ieee754_asinf+0x1c4>
 800a8d2:	eee0 7a26 	vfma.f32	s15, s0, s13
 800a8d6:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800a988 <__ieee754_asinf+0x190>
 800a8da:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a8de:	2d00      	cmp	r5, #0
 800a8e0:	bfd8      	it	le
 800a8e2:	eeb1 0a40 	vnegle.f32	s0, s0
 800a8e6:	e79b      	b.n	800a820 <__ieee754_asinf+0x28>
 800a8e8:	ee60 7a00 	vmul.f32	s15, s0, s0
 800a8ec:	eddf 6a28 	vldr	s13, [pc, #160]	; 800a990 <__ieee754_asinf+0x198>
 800a8f0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800a994 <__ieee754_asinf+0x19c>
 800a8f4:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800a9a8 <__ieee754_asinf+0x1b0>
 800a8f8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800a8fc:	eddf 6a27 	vldr	s13, [pc, #156]	; 800a99c <__ieee754_asinf+0x1a4>
 800a900:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a904:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800a9a0 <__ieee754_asinf+0x1a8>
 800a908:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a90c:	eddf 6a25 	vldr	s13, [pc, #148]	; 800a9a4 <__ieee754_asinf+0x1ac>
 800a910:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a914:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800a998 <__ieee754_asinf+0x1a0>
 800a918:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a91c:	eddf 6a23 	vldr	s13, [pc, #140]	; 800a9ac <__ieee754_asinf+0x1b4>
 800a920:	eee7 6a86 	vfma.f32	s13, s15, s12
 800a924:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800a9b0 <__ieee754_asinf+0x1b8>
 800a928:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800a92c:	eddf 6a21 	vldr	s13, [pc, #132]	; 800a9b4 <__ieee754_asinf+0x1bc>
 800a930:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a934:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a938:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800a93c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800a940:	eea0 0a27 	vfma.f32	s0, s0, s15
 800a944:	e76c      	b.n	800a820 <__ieee754_asinf+0x28>
 800a946:	ee10 3a10 	vmov	r3, s0
 800a94a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a94e:	f023 030f 	bic.w	r3, r3, #15
 800a952:	ee07 3a10 	vmov	s14, r3
 800a956:	eea7 8a47 	vfms.f32	s16, s14, s14
 800a95a:	ee70 7a07 	vadd.f32	s15, s0, s14
 800a95e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a962:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800a966:	eddf 7a07 	vldr	s15, [pc, #28]	; 800a984 <__ieee754_asinf+0x18c>
 800a96a:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800a96e:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800a972:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800a9c0 <__ieee754_asinf+0x1c8>
 800a976:	eeb0 6a40 	vmov.f32	s12, s0
 800a97a:	eea7 6a66 	vfms.f32	s12, s14, s13
 800a97e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a982:	e7aa      	b.n	800a8da <__ieee754_asinf+0xe2>
 800a984:	b33bbd2e 	.word	0xb33bbd2e
 800a988:	3fc90fdb 	.word	0x3fc90fdb
 800a98c:	7149f2ca 	.word	0x7149f2ca
 800a990:	3811ef08 	.word	0x3811ef08
 800a994:	3a4f7f04 	.word	0x3a4f7f04
 800a998:	3e2aaaab 	.word	0x3e2aaaab
 800a99c:	bd241146 	.word	0xbd241146
 800a9a0:	3e4e0aa8 	.word	0x3e4e0aa8
 800a9a4:	bea6b090 	.word	0xbea6b090
 800a9a8:	3d9dc62e 	.word	0x3d9dc62e
 800a9ac:	bf303361 	.word	0xbf303361
 800a9b0:	4001572d 	.word	0x4001572d
 800a9b4:	c019d139 	.word	0xc019d139
 800a9b8:	3f799999 	.word	0x3f799999
 800a9bc:	333bbd2e 	.word	0x333bbd2e
 800a9c0:	3f490fdb 	.word	0x3f490fdb

0800a9c4 <__ieee754_rem_pio2f>:
 800a9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9c6:	ee10 6a10 	vmov	r6, s0
 800a9ca:	4b8e      	ldr	r3, [pc, #568]	; (800ac04 <__ieee754_rem_pio2f+0x240>)
 800a9cc:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800a9d0:	429d      	cmp	r5, r3
 800a9d2:	b087      	sub	sp, #28
 800a9d4:	eef0 7a40 	vmov.f32	s15, s0
 800a9d8:	4604      	mov	r4, r0
 800a9da:	dc05      	bgt.n	800a9e8 <__ieee754_rem_pio2f+0x24>
 800a9dc:	2300      	movs	r3, #0
 800a9de:	ed80 0a00 	vstr	s0, [r0]
 800a9e2:	6043      	str	r3, [r0, #4]
 800a9e4:	2000      	movs	r0, #0
 800a9e6:	e01a      	b.n	800aa1e <__ieee754_rem_pio2f+0x5a>
 800a9e8:	4b87      	ldr	r3, [pc, #540]	; (800ac08 <__ieee754_rem_pio2f+0x244>)
 800a9ea:	429d      	cmp	r5, r3
 800a9ec:	dc46      	bgt.n	800aa7c <__ieee754_rem_pio2f+0xb8>
 800a9ee:	2e00      	cmp	r6, #0
 800a9f0:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800ac0c <__ieee754_rem_pio2f+0x248>
 800a9f4:	4b86      	ldr	r3, [pc, #536]	; (800ac10 <__ieee754_rem_pio2f+0x24c>)
 800a9f6:	f025 050f 	bic.w	r5, r5, #15
 800a9fa:	dd1f      	ble.n	800aa3c <__ieee754_rem_pio2f+0x78>
 800a9fc:	429d      	cmp	r5, r3
 800a9fe:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800aa02:	d00e      	beq.n	800aa22 <__ieee754_rem_pio2f+0x5e>
 800aa04:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800ac14 <__ieee754_rem_pio2f+0x250>
 800aa08:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800aa0c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800aa10:	ed80 0a00 	vstr	s0, [r0]
 800aa14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aa18:	2001      	movs	r0, #1
 800aa1a:	edc4 7a01 	vstr	s15, [r4, #4]
 800aa1e:	b007      	add	sp, #28
 800aa20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa22:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800ac18 <__ieee754_rem_pio2f+0x254>
 800aa26:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800ac1c <__ieee754_rem_pio2f+0x258>
 800aa2a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800aa2e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800aa32:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800aa36:	edc0 6a00 	vstr	s13, [r0]
 800aa3a:	e7eb      	b.n	800aa14 <__ieee754_rem_pio2f+0x50>
 800aa3c:	429d      	cmp	r5, r3
 800aa3e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800aa42:	d00e      	beq.n	800aa62 <__ieee754_rem_pio2f+0x9e>
 800aa44:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800ac14 <__ieee754_rem_pio2f+0x250>
 800aa48:	ee37 0a87 	vadd.f32	s0, s15, s14
 800aa4c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800aa50:	ed80 0a00 	vstr	s0, [r0]
 800aa54:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa58:	f04f 30ff 	mov.w	r0, #4294967295
 800aa5c:	edc4 7a01 	vstr	s15, [r4, #4]
 800aa60:	e7dd      	b.n	800aa1e <__ieee754_rem_pio2f+0x5a>
 800aa62:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800ac18 <__ieee754_rem_pio2f+0x254>
 800aa66:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800ac1c <__ieee754_rem_pio2f+0x258>
 800aa6a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800aa6e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800aa72:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800aa76:	edc0 6a00 	vstr	s13, [r0]
 800aa7a:	e7eb      	b.n	800aa54 <__ieee754_rem_pio2f+0x90>
 800aa7c:	4b68      	ldr	r3, [pc, #416]	; (800ac20 <__ieee754_rem_pio2f+0x25c>)
 800aa7e:	429d      	cmp	r5, r3
 800aa80:	dc72      	bgt.n	800ab68 <__ieee754_rem_pio2f+0x1a4>
 800aa82:	f000 fc11 	bl	800b2a8 <fabsf>
 800aa86:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800ac24 <__ieee754_rem_pio2f+0x260>
 800aa8a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800aa8e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800aa92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aa96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aa9a:	ee17 0a90 	vmov	r0, s15
 800aa9e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800ac0c <__ieee754_rem_pio2f+0x248>
 800aaa2:	eea7 0a67 	vfms.f32	s0, s14, s15
 800aaa6:	281f      	cmp	r0, #31
 800aaa8:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800ac14 <__ieee754_rem_pio2f+0x250>
 800aaac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aab0:	eeb1 6a47 	vneg.f32	s12, s14
 800aab4:	ee70 6a67 	vsub.f32	s13, s0, s15
 800aab8:	ee16 2a90 	vmov	r2, s13
 800aabc:	dc1c      	bgt.n	800aaf8 <__ieee754_rem_pio2f+0x134>
 800aabe:	495a      	ldr	r1, [pc, #360]	; (800ac28 <__ieee754_rem_pio2f+0x264>)
 800aac0:	1e47      	subs	r7, r0, #1
 800aac2:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800aac6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800aaca:	428b      	cmp	r3, r1
 800aacc:	d014      	beq.n	800aaf8 <__ieee754_rem_pio2f+0x134>
 800aace:	6022      	str	r2, [r4, #0]
 800aad0:	ed94 7a00 	vldr	s14, [r4]
 800aad4:	ee30 0a47 	vsub.f32	s0, s0, s14
 800aad8:	2e00      	cmp	r6, #0
 800aada:	ee30 0a67 	vsub.f32	s0, s0, s15
 800aade:	ed84 0a01 	vstr	s0, [r4, #4]
 800aae2:	da9c      	bge.n	800aa1e <__ieee754_rem_pio2f+0x5a>
 800aae4:	eeb1 7a47 	vneg.f32	s14, s14
 800aae8:	eeb1 0a40 	vneg.f32	s0, s0
 800aaec:	ed84 7a00 	vstr	s14, [r4]
 800aaf0:	ed84 0a01 	vstr	s0, [r4, #4]
 800aaf4:	4240      	negs	r0, r0
 800aaf6:	e792      	b.n	800aa1e <__ieee754_rem_pio2f+0x5a>
 800aaf8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800aafc:	15eb      	asrs	r3, r5, #23
 800aafe:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800ab02:	2d08      	cmp	r5, #8
 800ab04:	dde3      	ble.n	800aace <__ieee754_rem_pio2f+0x10a>
 800ab06:	eddf 7a44 	vldr	s15, [pc, #272]	; 800ac18 <__ieee754_rem_pio2f+0x254>
 800ab0a:	eef0 6a40 	vmov.f32	s13, s0
 800ab0e:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ab12:	ee30 0a66 	vsub.f32	s0, s0, s13
 800ab16:	eea6 0a27 	vfma.f32	s0, s12, s15
 800ab1a:	eddf 7a40 	vldr	s15, [pc, #256]	; 800ac1c <__ieee754_rem_pio2f+0x258>
 800ab1e:	ee97 0a27 	vfnms.f32	s0, s14, s15
 800ab22:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800ab26:	eef0 7a40 	vmov.f32	s15, s0
 800ab2a:	ee15 2a90 	vmov	r2, s11
 800ab2e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800ab32:	1a5b      	subs	r3, r3, r1
 800ab34:	2b19      	cmp	r3, #25
 800ab36:	dc04      	bgt.n	800ab42 <__ieee754_rem_pio2f+0x17e>
 800ab38:	edc4 5a00 	vstr	s11, [r4]
 800ab3c:	eeb0 0a66 	vmov.f32	s0, s13
 800ab40:	e7c6      	b.n	800aad0 <__ieee754_rem_pio2f+0x10c>
 800ab42:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800ac2c <__ieee754_rem_pio2f+0x268>
 800ab46:	eeb0 0a66 	vmov.f32	s0, s13
 800ab4a:	eea6 0a25 	vfma.f32	s0, s12, s11
 800ab4e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800ab52:	eddf 6a37 	vldr	s13, [pc, #220]	; 800ac30 <__ieee754_rem_pio2f+0x26c>
 800ab56:	eee6 7a25 	vfma.f32	s15, s12, s11
 800ab5a:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800ab5e:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ab62:	ed84 7a00 	vstr	s14, [r4]
 800ab66:	e7b3      	b.n	800aad0 <__ieee754_rem_pio2f+0x10c>
 800ab68:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800ab6c:	db06      	blt.n	800ab7c <__ieee754_rem_pio2f+0x1b8>
 800ab6e:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ab72:	edc0 7a01 	vstr	s15, [r0, #4]
 800ab76:	edc0 7a00 	vstr	s15, [r0]
 800ab7a:	e733      	b.n	800a9e4 <__ieee754_rem_pio2f+0x20>
 800ab7c:	15ea      	asrs	r2, r5, #23
 800ab7e:	3a86      	subs	r2, #134	; 0x86
 800ab80:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800ab84:	ee07 3a90 	vmov	s15, r3
 800ab88:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ab8c:	eddf 6a29 	vldr	s13, [pc, #164]	; 800ac34 <__ieee754_rem_pio2f+0x270>
 800ab90:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ab94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ab98:	ed8d 7a03 	vstr	s14, [sp, #12]
 800ab9c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800aba0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800aba4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800aba8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800abac:	ed8d 7a04 	vstr	s14, [sp, #16]
 800abb0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800abb4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800abb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abbc:	edcd 7a05 	vstr	s15, [sp, #20]
 800abc0:	d11e      	bne.n	800ac00 <__ieee754_rem_pio2f+0x23c>
 800abc2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800abc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abca:	bf14      	ite	ne
 800abcc:	2302      	movne	r3, #2
 800abce:	2301      	moveq	r3, #1
 800abd0:	4919      	ldr	r1, [pc, #100]	; (800ac38 <__ieee754_rem_pio2f+0x274>)
 800abd2:	9101      	str	r1, [sp, #4]
 800abd4:	2102      	movs	r1, #2
 800abd6:	9100      	str	r1, [sp, #0]
 800abd8:	a803      	add	r0, sp, #12
 800abda:	4621      	mov	r1, r4
 800abdc:	f000 f892 	bl	800ad04 <__kernel_rem_pio2f>
 800abe0:	2e00      	cmp	r6, #0
 800abe2:	f6bf af1c 	bge.w	800aa1e <__ieee754_rem_pio2f+0x5a>
 800abe6:	edd4 7a00 	vldr	s15, [r4]
 800abea:	eef1 7a67 	vneg.f32	s15, s15
 800abee:	edc4 7a00 	vstr	s15, [r4]
 800abf2:	edd4 7a01 	vldr	s15, [r4, #4]
 800abf6:	eef1 7a67 	vneg.f32	s15, s15
 800abfa:	edc4 7a01 	vstr	s15, [r4, #4]
 800abfe:	e779      	b.n	800aaf4 <__ieee754_rem_pio2f+0x130>
 800ac00:	2303      	movs	r3, #3
 800ac02:	e7e5      	b.n	800abd0 <__ieee754_rem_pio2f+0x20c>
 800ac04:	3f490fd8 	.word	0x3f490fd8
 800ac08:	4016cbe3 	.word	0x4016cbe3
 800ac0c:	3fc90f80 	.word	0x3fc90f80
 800ac10:	3fc90fd0 	.word	0x3fc90fd0
 800ac14:	37354443 	.word	0x37354443
 800ac18:	37354400 	.word	0x37354400
 800ac1c:	2e85a308 	.word	0x2e85a308
 800ac20:	43490f80 	.word	0x43490f80
 800ac24:	3f22f984 	.word	0x3f22f984
 800ac28:	0800b574 	.word	0x0800b574
 800ac2c:	2e85a300 	.word	0x2e85a300
 800ac30:	248d3132 	.word	0x248d3132
 800ac34:	43800000 	.word	0x43800000
 800ac38:	0800b5f4 	.word	0x0800b5f4

0800ac3c <__ieee754_sqrtf>:
 800ac3c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ac40:	4770      	bx	lr
	...

0800ac44 <__kernel_cosf>:
 800ac44:	ee10 3a10 	vmov	r3, s0
 800ac48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac4c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800ac50:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800ac54:	da05      	bge.n	800ac62 <__kernel_cosf+0x1e>
 800ac56:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ac5a:	ee17 2a90 	vmov	r2, s15
 800ac5e:	2a00      	cmp	r2, #0
 800ac60:	d03d      	beq.n	800acde <__kernel_cosf+0x9a>
 800ac62:	ee60 5a00 	vmul.f32	s11, s0, s0
 800ac66:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800ace4 <__kernel_cosf+0xa0>
 800ac6a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800ace8 <__kernel_cosf+0xa4>
 800ac6e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800acec <__kernel_cosf+0xa8>
 800ac72:	4a1f      	ldr	r2, [pc, #124]	; (800acf0 <__kernel_cosf+0xac>)
 800ac74:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800acf4 <__kernel_cosf+0xb0>
 800ac7e:	eee7 7a25 	vfma.f32	s15, s14, s11
 800ac82:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800acf8 <__kernel_cosf+0xb4>
 800ac86:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800ac8a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800acfc <__kernel_cosf+0xb8>
 800ac8e:	eee7 7a25 	vfma.f32	s15, s14, s11
 800ac92:	eeb0 7a66 	vmov.f32	s14, s13
 800ac96:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800ac9a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800ac9e:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800aca2:	ee67 6a25 	vmul.f32	s13, s14, s11
 800aca6:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800acaa:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800acae:	dc04      	bgt.n	800acba <__kernel_cosf+0x76>
 800acb0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800acb4:	ee36 0a47 	vsub.f32	s0, s12, s14
 800acb8:	4770      	bx	lr
 800acba:	4a11      	ldr	r2, [pc, #68]	; (800ad00 <__kernel_cosf+0xbc>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	bfda      	itte	le
 800acc0:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800acc4:	ee06 3a90 	vmovle	s13, r3
 800acc8:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800accc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800acd0:	ee36 0a66 	vsub.f32	s0, s12, s13
 800acd4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800acd8:	ee30 0a67 	vsub.f32	s0, s0, s15
 800acdc:	4770      	bx	lr
 800acde:	eeb0 0a46 	vmov.f32	s0, s12
 800ace2:	4770      	bx	lr
 800ace4:	ad47d74e 	.word	0xad47d74e
 800ace8:	310f74f6 	.word	0x310f74f6
 800acec:	3d2aaaab 	.word	0x3d2aaaab
 800acf0:	3e999999 	.word	0x3e999999
 800acf4:	b493f27c 	.word	0xb493f27c
 800acf8:	37d00d01 	.word	0x37d00d01
 800acfc:	bab60b61 	.word	0xbab60b61
 800ad00:	3f480000 	.word	0x3f480000

0800ad04 <__kernel_rem_pio2f>:
 800ad04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad08:	ed2d 8b04 	vpush	{d8-d9}
 800ad0c:	b0d7      	sub	sp, #348	; 0x15c
 800ad0e:	4616      	mov	r6, r2
 800ad10:	4698      	mov	r8, r3
 800ad12:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800ad14:	4bbb      	ldr	r3, [pc, #748]	; (800b004 <__kernel_rem_pio2f+0x300>)
 800ad16:	9001      	str	r0, [sp, #4]
 800ad18:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 800ad1c:	1d33      	adds	r3, r6, #4
 800ad1e:	460d      	mov	r5, r1
 800ad20:	f108 39ff 	add.w	r9, r8, #4294967295
 800ad24:	db29      	blt.n	800ad7a <__kernel_rem_pio2f+0x76>
 800ad26:	1ef1      	subs	r1, r6, #3
 800ad28:	bf48      	it	mi
 800ad2a:	1d31      	addmi	r1, r6, #4
 800ad2c:	10c9      	asrs	r1, r1, #3
 800ad2e:	1c4c      	adds	r4, r1, #1
 800ad30:	00e3      	lsls	r3, r4, #3
 800ad32:	9302      	str	r3, [sp, #8]
 800ad34:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800ad36:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800b014 <__kernel_rem_pio2f+0x310>
 800ad3a:	eba1 0009 	sub.w	r0, r1, r9
 800ad3e:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 800ad42:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 800ad46:	eb07 0c09 	add.w	ip, r7, r9
 800ad4a:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 800ad4e:	2300      	movs	r3, #0
 800ad50:	4563      	cmp	r3, ip
 800ad52:	dd14      	ble.n	800ad7e <__kernel_rem_pio2f+0x7a>
 800ad54:	ab1a      	add	r3, sp, #104	; 0x68
 800ad56:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800ad5a:	46cc      	mov	ip, r9
 800ad5c:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 800ad60:	f1c8 0b01 	rsb	fp, r8, #1
 800ad64:	eb0b 020c 	add.w	r2, fp, ip
 800ad68:	4297      	cmp	r7, r2
 800ad6a:	db27      	blt.n	800adbc <__kernel_rem_pio2f+0xb8>
 800ad6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 800ad70:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800b014 <__kernel_rem_pio2f+0x310>
 800ad74:	4618      	mov	r0, r3
 800ad76:	2200      	movs	r2, #0
 800ad78:	e016      	b.n	800ada8 <__kernel_rem_pio2f+0xa4>
 800ad7a:	2100      	movs	r1, #0
 800ad7c:	e7d7      	b.n	800ad2e <__kernel_rem_pio2f+0x2a>
 800ad7e:	42d8      	cmn	r0, r3
 800ad80:	bf5d      	ittte	pl
 800ad82:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 800ad86:	ee07 2a90 	vmovpl	s15, r2
 800ad8a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800ad8e:	eef0 7a47 	vmovmi.f32	s15, s14
 800ad92:	ecea 7a01 	vstmia	sl!, {s15}
 800ad96:	3301      	adds	r3, #1
 800ad98:	e7da      	b.n	800ad50 <__kernel_rem_pio2f+0x4c>
 800ad9a:	ecfe 6a01 	vldmia	lr!, {s13}
 800ad9e:	ed90 7a00 	vldr	s14, [r0]
 800ada2:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ada6:	3201      	adds	r2, #1
 800ada8:	454a      	cmp	r2, r9
 800adaa:	f1a0 0004 	sub.w	r0, r0, #4
 800adae:	ddf4      	ble.n	800ad9a <__kernel_rem_pio2f+0x96>
 800adb0:	ecea 7a01 	vstmia	sl!, {s15}
 800adb4:	3304      	adds	r3, #4
 800adb6:	f10c 0c01 	add.w	ip, ip, #1
 800adba:	e7d3      	b.n	800ad64 <__kernel_rem_pio2f+0x60>
 800adbc:	ab06      	add	r3, sp, #24
 800adbe:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800adc2:	9304      	str	r3, [sp, #16]
 800adc4:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800adc6:	eddf 8a92 	vldr	s17, [pc, #584]	; 800b010 <__kernel_rem_pio2f+0x30c>
 800adca:	ed9f 9a90 	vldr	s18, [pc, #576]	; 800b00c <__kernel_rem_pio2f+0x308>
 800adce:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800add2:	9303      	str	r3, [sp, #12]
 800add4:	46ba      	mov	sl, r7
 800add6:	ab56      	add	r3, sp, #344	; 0x158
 800add8:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800addc:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800ade0:	ab06      	add	r3, sp, #24
 800ade2:	4618      	mov	r0, r3
 800ade4:	4652      	mov	r2, sl
 800ade6:	2a00      	cmp	r2, #0
 800ade8:	dc51      	bgt.n	800ae8e <__kernel_rem_pio2f+0x18a>
 800adea:	4620      	mov	r0, r4
 800adec:	9305      	str	r3, [sp, #20]
 800adee:	f000 faab 	bl	800b348 <scalbnf>
 800adf2:	eeb0 8a40 	vmov.f32	s16, s0
 800adf6:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800adfa:	ee28 0a00 	vmul.f32	s0, s16, s0
 800adfe:	f000 fa5b 	bl	800b2b8 <floorf>
 800ae02:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800ae06:	eea0 8a67 	vfms.f32	s16, s0, s15
 800ae0a:	2c00      	cmp	r4, #0
 800ae0c:	9b05      	ldr	r3, [sp, #20]
 800ae0e:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800ae12:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800ae16:	edcd 7a00 	vstr	s15, [sp]
 800ae1a:	ee38 8a40 	vsub.f32	s16, s16, s0
 800ae1e:	dd4b      	ble.n	800aeb8 <__kernel_rem_pio2f+0x1b4>
 800ae20:	f10a 3cff 	add.w	ip, sl, #4294967295
 800ae24:	aa06      	add	r2, sp, #24
 800ae26:	f1c4 0e08 	rsb	lr, r4, #8
 800ae2a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800ae2e:	ee17 1a90 	vmov	r1, s15
 800ae32:	fa42 f00e 	asr.w	r0, r2, lr
 800ae36:	4401      	add	r1, r0
 800ae38:	9100      	str	r1, [sp, #0]
 800ae3a:	fa00 f00e 	lsl.w	r0, r0, lr
 800ae3e:	a906      	add	r1, sp, #24
 800ae40:	1a12      	subs	r2, r2, r0
 800ae42:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800ae46:	f1c4 0007 	rsb	r0, r4, #7
 800ae4a:	fa42 fb00 	asr.w	fp, r2, r0
 800ae4e:	f1bb 0f00 	cmp.w	fp, #0
 800ae52:	dd43      	ble.n	800aedc <__kernel_rem_pio2f+0x1d8>
 800ae54:	9a00      	ldr	r2, [sp, #0]
 800ae56:	f04f 0e00 	mov.w	lr, #0
 800ae5a:	3201      	adds	r2, #1
 800ae5c:	9200      	str	r2, [sp, #0]
 800ae5e:	4670      	mov	r0, lr
 800ae60:	45f2      	cmp	sl, lr
 800ae62:	dc6c      	bgt.n	800af3e <__kernel_rem_pio2f+0x23a>
 800ae64:	2c00      	cmp	r4, #0
 800ae66:	dd04      	ble.n	800ae72 <__kernel_rem_pio2f+0x16e>
 800ae68:	2c01      	cmp	r4, #1
 800ae6a:	d079      	beq.n	800af60 <__kernel_rem_pio2f+0x25c>
 800ae6c:	2c02      	cmp	r4, #2
 800ae6e:	f000 8082 	beq.w	800af76 <__kernel_rem_pio2f+0x272>
 800ae72:	f1bb 0f02 	cmp.w	fp, #2
 800ae76:	d131      	bne.n	800aedc <__kernel_rem_pio2f+0x1d8>
 800ae78:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ae7c:	ee30 8a48 	vsub.f32	s16, s0, s16
 800ae80:	b360      	cbz	r0, 800aedc <__kernel_rem_pio2f+0x1d8>
 800ae82:	4620      	mov	r0, r4
 800ae84:	f000 fa60 	bl	800b348 <scalbnf>
 800ae88:	ee38 8a40 	vsub.f32	s16, s16, s0
 800ae8c:	e026      	b.n	800aedc <__kernel_rem_pio2f+0x1d8>
 800ae8e:	ee60 7a28 	vmul.f32	s15, s0, s17
 800ae92:	3a01      	subs	r2, #1
 800ae94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ae98:	a942      	add	r1, sp, #264	; 0x108
 800ae9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae9e:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800aea2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800aea6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800aeaa:	eca0 0a01 	vstmia	r0!, {s0}
 800aeae:	ed9c 0a00 	vldr	s0, [ip]
 800aeb2:	ee37 0a80 	vadd.f32	s0, s15, s0
 800aeb6:	e796      	b.n	800ade6 <__kernel_rem_pio2f+0xe2>
 800aeb8:	d107      	bne.n	800aeca <__kernel_rem_pio2f+0x1c6>
 800aeba:	f10a 32ff 	add.w	r2, sl, #4294967295
 800aebe:	a906      	add	r1, sp, #24
 800aec0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800aec4:	ea4f 2b22 	mov.w	fp, r2, asr #8
 800aec8:	e7c1      	b.n	800ae4e <__kernel_rem_pio2f+0x14a>
 800aeca:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800aece:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800aed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aed6:	da2f      	bge.n	800af38 <__kernel_rem_pio2f+0x234>
 800aed8:	f04f 0b00 	mov.w	fp, #0
 800aedc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800aee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aee4:	f040 8098 	bne.w	800b018 <__kernel_rem_pio2f+0x314>
 800aee8:	f10a 33ff 	add.w	r3, sl, #4294967295
 800aeec:	469c      	mov	ip, r3
 800aeee:	2200      	movs	r2, #0
 800aef0:	45bc      	cmp	ip, r7
 800aef2:	da48      	bge.n	800af86 <__kernel_rem_pio2f+0x282>
 800aef4:	2a00      	cmp	r2, #0
 800aef6:	d05f      	beq.n	800afb8 <__kernel_rem_pio2f+0x2b4>
 800aef8:	aa06      	add	r2, sp, #24
 800aefa:	3c08      	subs	r4, #8
 800aefc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800af00:	2900      	cmp	r1, #0
 800af02:	d07d      	beq.n	800b000 <__kernel_rem_pio2f+0x2fc>
 800af04:	4620      	mov	r0, r4
 800af06:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800af0a:	9301      	str	r3, [sp, #4]
 800af0c:	f000 fa1c 	bl	800b348 <scalbnf>
 800af10:	9b01      	ldr	r3, [sp, #4]
 800af12:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800b010 <__kernel_rem_pio2f+0x30c>
 800af16:	4619      	mov	r1, r3
 800af18:	2900      	cmp	r1, #0
 800af1a:	f280 80af 	bge.w	800b07c <__kernel_rem_pio2f+0x378>
 800af1e:	4618      	mov	r0, r3
 800af20:	2400      	movs	r4, #0
 800af22:	2800      	cmp	r0, #0
 800af24:	f2c0 80d0 	blt.w	800b0c8 <__kernel_rem_pio2f+0x3c4>
 800af28:	a942      	add	r1, sp, #264	; 0x108
 800af2a:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 800af2e:	4a36      	ldr	r2, [pc, #216]	; (800b008 <__kernel_rem_pio2f+0x304>)
 800af30:	eddf 7a38 	vldr	s15, [pc, #224]	; 800b014 <__kernel_rem_pio2f+0x310>
 800af34:	2100      	movs	r1, #0
 800af36:	e0bb      	b.n	800b0b0 <__kernel_rem_pio2f+0x3ac>
 800af38:	f04f 0b02 	mov.w	fp, #2
 800af3c:	e78a      	b.n	800ae54 <__kernel_rem_pio2f+0x150>
 800af3e:	681a      	ldr	r2, [r3, #0]
 800af40:	b948      	cbnz	r0, 800af56 <__kernel_rem_pio2f+0x252>
 800af42:	b11a      	cbz	r2, 800af4c <__kernel_rem_pio2f+0x248>
 800af44:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 800af48:	601a      	str	r2, [r3, #0]
 800af4a:	2201      	movs	r2, #1
 800af4c:	f10e 0e01 	add.w	lr, lr, #1
 800af50:	3304      	adds	r3, #4
 800af52:	4610      	mov	r0, r2
 800af54:	e784      	b.n	800ae60 <__kernel_rem_pio2f+0x15c>
 800af56:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800af5a:	601a      	str	r2, [r3, #0]
 800af5c:	4602      	mov	r2, r0
 800af5e:	e7f5      	b.n	800af4c <__kernel_rem_pio2f+0x248>
 800af60:	f10a 3cff 	add.w	ip, sl, #4294967295
 800af64:	ab06      	add	r3, sp, #24
 800af66:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800af6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af6e:	aa06      	add	r2, sp, #24
 800af70:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 800af74:	e77d      	b.n	800ae72 <__kernel_rem_pio2f+0x16e>
 800af76:	f10a 3cff 	add.w	ip, sl, #4294967295
 800af7a:	ab06      	add	r3, sp, #24
 800af7c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800af80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af84:	e7f3      	b.n	800af6e <__kernel_rem_pio2f+0x26a>
 800af86:	a906      	add	r1, sp, #24
 800af88:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 800af8c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800af90:	4302      	orrs	r2, r0
 800af92:	e7ad      	b.n	800aef0 <__kernel_rem_pio2f+0x1ec>
 800af94:	3001      	adds	r0, #1
 800af96:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800af9a:	2a00      	cmp	r2, #0
 800af9c:	d0fa      	beq.n	800af94 <__kernel_rem_pio2f+0x290>
 800af9e:	a91a      	add	r1, sp, #104	; 0x68
 800afa0:	eb0a 0208 	add.w	r2, sl, r8
 800afa4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800afa8:	f10a 0301 	add.w	r3, sl, #1
 800afac:	eb0a 0100 	add.w	r1, sl, r0
 800afb0:	4299      	cmp	r1, r3
 800afb2:	da04      	bge.n	800afbe <__kernel_rem_pio2f+0x2ba>
 800afb4:	468a      	mov	sl, r1
 800afb6:	e70e      	b.n	800add6 <__kernel_rem_pio2f+0xd2>
 800afb8:	9b04      	ldr	r3, [sp, #16]
 800afba:	2001      	movs	r0, #1
 800afbc:	e7eb      	b.n	800af96 <__kernel_rem_pio2f+0x292>
 800afbe:	9803      	ldr	r0, [sp, #12]
 800afc0:	f8dd c004 	ldr.w	ip, [sp, #4]
 800afc4:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800afc8:	9000      	str	r0, [sp, #0]
 800afca:	ee07 0a90 	vmov	s15, r0
 800afce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800afd2:	2000      	movs	r0, #0
 800afd4:	ece2 7a01 	vstmia	r2!, {s15}
 800afd8:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800b014 <__kernel_rem_pio2f+0x310>
 800afdc:	4696      	mov	lr, r2
 800afde:	4548      	cmp	r0, r9
 800afe0:	dd06      	ble.n	800aff0 <__kernel_rem_pio2f+0x2ec>
 800afe2:	a842      	add	r0, sp, #264	; 0x108
 800afe4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800afe8:	edc0 7a00 	vstr	s15, [r0]
 800afec:	3301      	adds	r3, #1
 800afee:	e7df      	b.n	800afb0 <__kernel_rem_pio2f+0x2ac>
 800aff0:	ecfc 6a01 	vldmia	ip!, {s13}
 800aff4:	ed3e 7a01 	vldmdb	lr!, {s14}
 800aff8:	3001      	adds	r0, #1
 800affa:	eee6 7a87 	vfma.f32	s15, s13, s14
 800affe:	e7ee      	b.n	800afde <__kernel_rem_pio2f+0x2da>
 800b000:	3b01      	subs	r3, #1
 800b002:	e779      	b.n	800aef8 <__kernel_rem_pio2f+0x1f4>
 800b004:	0800b938 	.word	0x0800b938
 800b008:	0800b90c 	.word	0x0800b90c
 800b00c:	43800000 	.word	0x43800000
 800b010:	3b800000 	.word	0x3b800000
 800b014:	00000000 	.word	0x00000000
 800b018:	9b02      	ldr	r3, [sp, #8]
 800b01a:	eeb0 0a48 	vmov.f32	s0, s16
 800b01e:	1b98      	subs	r0, r3, r6
 800b020:	f000 f992 	bl	800b348 <scalbnf>
 800b024:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800b00c <__kernel_rem_pio2f+0x308>
 800b028:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800b02c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b030:	db1b      	blt.n	800b06a <__kernel_rem_pio2f+0x366>
 800b032:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800b010 <__kernel_rem_pio2f+0x30c>
 800b036:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b03a:	aa06      	add	r2, sp, #24
 800b03c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b040:	a906      	add	r1, sp, #24
 800b042:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b046:	3408      	adds	r4, #8
 800b048:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800b04c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b050:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b054:	ee10 3a10 	vmov	r3, s0
 800b058:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800b05c:	ee17 2a90 	vmov	r2, s15
 800b060:	f10a 0301 	add.w	r3, sl, #1
 800b064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b068:	e74c      	b.n	800af04 <__kernel_rem_pio2f+0x200>
 800b06a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b06e:	aa06      	add	r2, sp, #24
 800b070:	ee10 3a10 	vmov	r3, s0
 800b074:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800b078:	4653      	mov	r3, sl
 800b07a:	e743      	b.n	800af04 <__kernel_rem_pio2f+0x200>
 800b07c:	aa42      	add	r2, sp, #264	; 0x108
 800b07e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800b082:	aa06      	add	r2, sp, #24
 800b084:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800b088:	9201      	str	r2, [sp, #4]
 800b08a:	ee07 2a90 	vmov	s15, r2
 800b08e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b092:	3901      	subs	r1, #1
 800b094:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b098:	ee20 0a07 	vmul.f32	s0, s0, s14
 800b09c:	edc0 7a00 	vstr	s15, [r0]
 800b0a0:	e73a      	b.n	800af18 <__kernel_rem_pio2f+0x214>
 800b0a2:	ecf2 6a01 	vldmia	r2!, {s13}
 800b0a6:	ecb6 7a01 	vldmia	r6!, {s14}
 800b0aa:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b0ae:	3101      	adds	r1, #1
 800b0b0:	42b9      	cmp	r1, r7
 800b0b2:	dc01      	bgt.n	800b0b8 <__kernel_rem_pio2f+0x3b4>
 800b0b4:	428c      	cmp	r4, r1
 800b0b6:	daf4      	bge.n	800b0a2 <__kernel_rem_pio2f+0x39e>
 800b0b8:	aa56      	add	r2, sp, #344	; 0x158
 800b0ba:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800b0be:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800b0c2:	3801      	subs	r0, #1
 800b0c4:	3401      	adds	r4, #1
 800b0c6:	e72c      	b.n	800af22 <__kernel_rem_pio2f+0x21e>
 800b0c8:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800b0ca:	2a02      	cmp	r2, #2
 800b0cc:	dc0a      	bgt.n	800b0e4 <__kernel_rem_pio2f+0x3e0>
 800b0ce:	2a00      	cmp	r2, #0
 800b0d0:	dc61      	bgt.n	800b196 <__kernel_rem_pio2f+0x492>
 800b0d2:	d03c      	beq.n	800b14e <__kernel_rem_pio2f+0x44a>
 800b0d4:	9b00      	ldr	r3, [sp, #0]
 800b0d6:	f003 0007 	and.w	r0, r3, #7
 800b0da:	b057      	add	sp, #348	; 0x15c
 800b0dc:	ecbd 8b04 	vpop	{d8-d9}
 800b0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0e4:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800b0e6:	2a03      	cmp	r2, #3
 800b0e8:	d1f4      	bne.n	800b0d4 <__kernel_rem_pio2f+0x3d0>
 800b0ea:	aa2e      	add	r2, sp, #184	; 0xb8
 800b0ec:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800b0f0:	4608      	mov	r0, r1
 800b0f2:	461c      	mov	r4, r3
 800b0f4:	2c00      	cmp	r4, #0
 800b0f6:	f1a0 0004 	sub.w	r0, r0, #4
 800b0fa:	dc59      	bgt.n	800b1b0 <__kernel_rem_pio2f+0x4ac>
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	2801      	cmp	r0, #1
 800b100:	f1a1 0104 	sub.w	r1, r1, #4
 800b104:	dc64      	bgt.n	800b1d0 <__kernel_rem_pio2f+0x4cc>
 800b106:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 800b014 <__kernel_rem_pio2f+0x310>
 800b10a:	2b01      	cmp	r3, #1
 800b10c:	dc70      	bgt.n	800b1f0 <__kernel_rem_pio2f+0x4ec>
 800b10e:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800b112:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800b116:	f1bb 0f00 	cmp.w	fp, #0
 800b11a:	d172      	bne.n	800b202 <__kernel_rem_pio2f+0x4fe>
 800b11c:	edc5 6a00 	vstr	s13, [r5]
 800b120:	ed85 7a01 	vstr	s14, [r5, #4]
 800b124:	edc5 7a02 	vstr	s15, [r5, #8]
 800b128:	e7d4      	b.n	800b0d4 <__kernel_rem_pio2f+0x3d0>
 800b12a:	aa2e      	add	r2, sp, #184	; 0xb8
 800b12c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800b130:	ed91 7a00 	vldr	s14, [r1]
 800b134:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b138:	3b01      	subs	r3, #1
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	daf5      	bge.n	800b12a <__kernel_rem_pio2f+0x426>
 800b13e:	f1bb 0f00 	cmp.w	fp, #0
 800b142:	d001      	beq.n	800b148 <__kernel_rem_pio2f+0x444>
 800b144:	eef1 7a67 	vneg.f32	s15, s15
 800b148:	edc5 7a00 	vstr	s15, [r5]
 800b14c:	e7c2      	b.n	800b0d4 <__kernel_rem_pio2f+0x3d0>
 800b14e:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800b014 <__kernel_rem_pio2f+0x310>
 800b152:	e7f2      	b.n	800b13a <__kernel_rem_pio2f+0x436>
 800b154:	aa2e      	add	r2, sp, #184	; 0xb8
 800b156:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800b15a:	edd0 7a00 	vldr	s15, [r0]
 800b15e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b162:	3901      	subs	r1, #1
 800b164:	2900      	cmp	r1, #0
 800b166:	daf5      	bge.n	800b154 <__kernel_rem_pio2f+0x450>
 800b168:	f1bb 0f00 	cmp.w	fp, #0
 800b16c:	d017      	beq.n	800b19e <__kernel_rem_pio2f+0x49a>
 800b16e:	eef1 7a47 	vneg.f32	s15, s14
 800b172:	edc5 7a00 	vstr	s15, [r5]
 800b176:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800b17a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b17e:	a82f      	add	r0, sp, #188	; 0xbc
 800b180:	2101      	movs	r1, #1
 800b182:	428b      	cmp	r3, r1
 800b184:	da0e      	bge.n	800b1a4 <__kernel_rem_pio2f+0x4a0>
 800b186:	f1bb 0f00 	cmp.w	fp, #0
 800b18a:	d001      	beq.n	800b190 <__kernel_rem_pio2f+0x48c>
 800b18c:	eef1 7a67 	vneg.f32	s15, s15
 800b190:	edc5 7a01 	vstr	s15, [r5, #4]
 800b194:	e79e      	b.n	800b0d4 <__kernel_rem_pio2f+0x3d0>
 800b196:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 800b014 <__kernel_rem_pio2f+0x310>
 800b19a:	4619      	mov	r1, r3
 800b19c:	e7e2      	b.n	800b164 <__kernel_rem_pio2f+0x460>
 800b19e:	eef0 7a47 	vmov.f32	s15, s14
 800b1a2:	e7e6      	b.n	800b172 <__kernel_rem_pio2f+0x46e>
 800b1a4:	ecb0 7a01 	vldmia	r0!, {s14}
 800b1a8:	3101      	adds	r1, #1
 800b1aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b1ae:	e7e8      	b.n	800b182 <__kernel_rem_pio2f+0x47e>
 800b1b0:	edd0 7a00 	vldr	s15, [r0]
 800b1b4:	edd0 6a01 	vldr	s13, [r0, #4]
 800b1b8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b1bc:	3c01      	subs	r4, #1
 800b1be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b1c2:	ed80 7a00 	vstr	s14, [r0]
 800b1c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1ca:	edc0 7a01 	vstr	s15, [r0, #4]
 800b1ce:	e791      	b.n	800b0f4 <__kernel_rem_pio2f+0x3f0>
 800b1d0:	edd1 7a00 	vldr	s15, [r1]
 800b1d4:	edd1 6a01 	vldr	s13, [r1, #4]
 800b1d8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b1dc:	3801      	subs	r0, #1
 800b1de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b1e2:	ed81 7a00 	vstr	s14, [r1]
 800b1e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1ea:	edc1 7a01 	vstr	s15, [r1, #4]
 800b1ee:	e786      	b.n	800b0fe <__kernel_rem_pio2f+0x3fa>
 800b1f0:	aa2e      	add	r2, sp, #184	; 0xb8
 800b1f2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800b1f6:	ed91 7a00 	vldr	s14, [r1]
 800b1fa:	3b01      	subs	r3, #1
 800b1fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b200:	e783      	b.n	800b10a <__kernel_rem_pio2f+0x406>
 800b202:	eef1 6a66 	vneg.f32	s13, s13
 800b206:	eeb1 7a47 	vneg.f32	s14, s14
 800b20a:	edc5 6a00 	vstr	s13, [r5]
 800b20e:	ed85 7a01 	vstr	s14, [r5, #4]
 800b212:	eef1 7a67 	vneg.f32	s15, s15
 800b216:	e785      	b.n	800b124 <__kernel_rem_pio2f+0x420>

0800b218 <__kernel_sinf>:
 800b218:	ee10 3a10 	vmov	r3, s0
 800b21c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b220:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800b224:	da04      	bge.n	800b230 <__kernel_sinf+0x18>
 800b226:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b22a:	ee17 3a90 	vmov	r3, s15
 800b22e:	b35b      	cbz	r3, 800b288 <__kernel_sinf+0x70>
 800b230:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b234:	eddf 7a15 	vldr	s15, [pc, #84]	; 800b28c <__kernel_sinf+0x74>
 800b238:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800b290 <__kernel_sinf+0x78>
 800b23c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b240:	eddf 7a14 	vldr	s15, [pc, #80]	; 800b294 <__kernel_sinf+0x7c>
 800b244:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b248:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800b298 <__kernel_sinf+0x80>
 800b24c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b250:	eddf 7a12 	vldr	s15, [pc, #72]	; 800b29c <__kernel_sinf+0x84>
 800b254:	ee60 6a07 	vmul.f32	s13, s0, s14
 800b258:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b25c:	b930      	cbnz	r0, 800b26c <__kernel_sinf+0x54>
 800b25e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800b2a0 <__kernel_sinf+0x88>
 800b262:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b266:	eea6 0a26 	vfma.f32	s0, s12, s13
 800b26a:	4770      	bx	lr
 800b26c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b270:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800b274:	eee0 7a86 	vfma.f32	s15, s1, s12
 800b278:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800b27c:	eddf 7a09 	vldr	s15, [pc, #36]	; 800b2a4 <__kernel_sinf+0x8c>
 800b280:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800b284:	ee30 0a60 	vsub.f32	s0, s0, s1
 800b288:	4770      	bx	lr
 800b28a:	bf00      	nop
 800b28c:	2f2ec9d3 	.word	0x2f2ec9d3
 800b290:	b2d72f34 	.word	0xb2d72f34
 800b294:	3638ef1b 	.word	0x3638ef1b
 800b298:	b9500d01 	.word	0xb9500d01
 800b29c:	3c088889 	.word	0x3c088889
 800b2a0:	be2aaaab 	.word	0xbe2aaaab
 800b2a4:	3e2aaaab 	.word	0x3e2aaaab

0800b2a8 <fabsf>:
 800b2a8:	ee10 3a10 	vmov	r3, s0
 800b2ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b2b0:	ee00 3a10 	vmov	s0, r3
 800b2b4:	4770      	bx	lr
	...

0800b2b8 <floorf>:
 800b2b8:	ee10 3a10 	vmov	r3, s0
 800b2bc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b2c0:	3a7f      	subs	r2, #127	; 0x7f
 800b2c2:	2a16      	cmp	r2, #22
 800b2c4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b2c8:	dc2a      	bgt.n	800b320 <floorf+0x68>
 800b2ca:	2a00      	cmp	r2, #0
 800b2cc:	da11      	bge.n	800b2f2 <floorf+0x3a>
 800b2ce:	eddf 7a18 	vldr	s15, [pc, #96]	; 800b330 <floorf+0x78>
 800b2d2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b2d6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b2da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2de:	dd05      	ble.n	800b2ec <floorf+0x34>
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	da23      	bge.n	800b32c <floorf+0x74>
 800b2e4:	4a13      	ldr	r2, [pc, #76]	; (800b334 <floorf+0x7c>)
 800b2e6:	2900      	cmp	r1, #0
 800b2e8:	bf18      	it	ne
 800b2ea:	4613      	movne	r3, r2
 800b2ec:	ee00 3a10 	vmov	s0, r3
 800b2f0:	4770      	bx	lr
 800b2f2:	4911      	ldr	r1, [pc, #68]	; (800b338 <floorf+0x80>)
 800b2f4:	4111      	asrs	r1, r2
 800b2f6:	420b      	tst	r3, r1
 800b2f8:	d0fa      	beq.n	800b2f0 <floorf+0x38>
 800b2fa:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800b330 <floorf+0x78>
 800b2fe:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b302:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b30a:	ddef      	ble.n	800b2ec <floorf+0x34>
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	bfbe      	ittt	lt
 800b310:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800b314:	fa40 f202 	asrlt.w	r2, r0, r2
 800b318:	189b      	addlt	r3, r3, r2
 800b31a:	ea23 0301 	bic.w	r3, r3, r1
 800b31e:	e7e5      	b.n	800b2ec <floorf+0x34>
 800b320:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b324:	d3e4      	bcc.n	800b2f0 <floorf+0x38>
 800b326:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b32a:	4770      	bx	lr
 800b32c:	2300      	movs	r3, #0
 800b32e:	e7dd      	b.n	800b2ec <floorf+0x34>
 800b330:	7149f2ca 	.word	0x7149f2ca
 800b334:	bf800000 	.word	0xbf800000
 800b338:	007fffff 	.word	0x007fffff

0800b33c <nanf>:
 800b33c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b344 <nanf+0x8>
 800b340:	4770      	bx	lr
 800b342:	bf00      	nop
 800b344:	7fc00000 	.word	0x7fc00000

0800b348 <scalbnf>:
 800b348:	ee10 3a10 	vmov	r3, s0
 800b34c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800b350:	d025      	beq.n	800b39e <scalbnf+0x56>
 800b352:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b356:	d302      	bcc.n	800b35e <scalbnf+0x16>
 800b358:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b35c:	4770      	bx	lr
 800b35e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800b362:	d122      	bne.n	800b3aa <scalbnf+0x62>
 800b364:	4b2a      	ldr	r3, [pc, #168]	; (800b410 <scalbnf+0xc8>)
 800b366:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800b414 <scalbnf+0xcc>
 800b36a:	4298      	cmp	r0, r3
 800b36c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b370:	db16      	blt.n	800b3a0 <scalbnf+0x58>
 800b372:	ee10 3a10 	vmov	r3, s0
 800b376:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b37a:	3a19      	subs	r2, #25
 800b37c:	4402      	add	r2, r0
 800b37e:	2afe      	cmp	r2, #254	; 0xfe
 800b380:	dd15      	ble.n	800b3ae <scalbnf+0x66>
 800b382:	ee10 3a10 	vmov	r3, s0
 800b386:	eddf 7a24 	vldr	s15, [pc, #144]	; 800b418 <scalbnf+0xd0>
 800b38a:	eddf 6a24 	vldr	s13, [pc, #144]	; 800b41c <scalbnf+0xd4>
 800b38e:	2b00      	cmp	r3, #0
 800b390:	eeb0 7a67 	vmov.f32	s14, s15
 800b394:	bfb8      	it	lt
 800b396:	eef0 7a66 	vmovlt.f32	s15, s13
 800b39a:	ee27 0a27 	vmul.f32	s0, s14, s15
 800b39e:	4770      	bx	lr
 800b3a0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b420 <scalbnf+0xd8>
 800b3a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b3a8:	4770      	bx	lr
 800b3aa:	0dd2      	lsrs	r2, r2, #23
 800b3ac:	e7e6      	b.n	800b37c <scalbnf+0x34>
 800b3ae:	2a00      	cmp	r2, #0
 800b3b0:	dd06      	ble.n	800b3c0 <scalbnf+0x78>
 800b3b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b3b6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b3ba:	ee00 3a10 	vmov	s0, r3
 800b3be:	4770      	bx	lr
 800b3c0:	f112 0f16 	cmn.w	r2, #22
 800b3c4:	da1a      	bge.n	800b3fc <scalbnf+0xb4>
 800b3c6:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b3ca:	4298      	cmp	r0, r3
 800b3cc:	ee10 3a10 	vmov	r3, s0
 800b3d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b3d4:	dd0a      	ble.n	800b3ec <scalbnf+0xa4>
 800b3d6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800b418 <scalbnf+0xd0>
 800b3da:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800b41c <scalbnf+0xd4>
 800b3de:	eef0 7a40 	vmov.f32	s15, s0
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	bf18      	it	ne
 800b3e6:	eeb0 0a47 	vmovne.f32	s0, s14
 800b3ea:	e7db      	b.n	800b3a4 <scalbnf+0x5c>
 800b3ec:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800b420 <scalbnf+0xd8>
 800b3f0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800b424 <scalbnf+0xdc>
 800b3f4:	eef0 7a40 	vmov.f32	s15, s0
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	e7f3      	b.n	800b3e4 <scalbnf+0x9c>
 800b3fc:	3219      	adds	r2, #25
 800b3fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b402:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b406:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b428 <scalbnf+0xe0>
 800b40a:	ee07 3a10 	vmov	s14, r3
 800b40e:	e7c4      	b.n	800b39a <scalbnf+0x52>
 800b410:	ffff3cb0 	.word	0xffff3cb0
 800b414:	4c000000 	.word	0x4c000000
 800b418:	7149f2ca 	.word	0x7149f2ca
 800b41c:	f149f2ca 	.word	0xf149f2ca
 800b420:	0da24260 	.word	0x0da24260
 800b424:	8da24260 	.word	0x8da24260
 800b428:	33000000 	.word	0x33000000

0800b42c <_init>:
 800b42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b42e:	bf00      	nop
 800b430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b432:	bc08      	pop	{r3}
 800b434:	469e      	mov	lr, r3
 800b436:	4770      	bx	lr

0800b438 <_fini>:
 800b438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b43a:	bf00      	nop
 800b43c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b43e:	bc08      	pop	{r3}
 800b440:	469e      	mov	lr, r3
 800b442:	4770      	bx	lr
