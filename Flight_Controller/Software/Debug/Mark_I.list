
Mark_I.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000871c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  080088a4  080088a4  000188a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a24  08008a24  00020178  2**0
                  CONTENTS
  4 .ARM          00000008  08008a24  08008a24  00018a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a2c  08008a2c  00020178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a2c  08008a2c  00018a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a30  08008a30  00018a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000178  20000000  08008a34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020178  2**0
                  CONTENTS
 10 .bss          00002354  20000178  20000178  00020178  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200024cc  200024cc  00020178  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002380f  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004732  00000000  00000000  000439b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001368  00000000  00000000  000480f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011c0  00000000  00000000  00049458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024434  00000000  00000000  0004a618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f058  00000000  00000000  0006ea4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c513d  00000000  00000000  0008daa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00152be1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d48  00000000  00000000  00152c34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000178 	.word	0x20000178
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800888c 	.word	0x0800888c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000017c 	.word	0x2000017c
 80001c4:	0800888c 	.word	0x0800888c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <COMPLEMENTARY_FILTER_Init>:

/* Static function prototype */
static void angle_180(float * x);

void COMPLEMENTARY_FILTER_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	filter.gyro = MPU_Get_Gyro_Ptr();
 80004c4:	f001 fd52 	bl	8001f6c <MPU_Get_Gyro_Ptr>
 80004c8:	4603      	mov	r3, r0
 80004ca:	4a09      	ldr	r2, [pc, #36]	; (80004f0 <COMPLEMENTARY_FILTER_Init+0x30>)
 80004cc:	6013      	str	r3, [r2, #0]
	filter.gyro_raw = NULL;
 80004ce:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <COMPLEMENTARY_FILTER_Init+0x30>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	605a      	str	r2, [r3, #4]
	filter.acc = MPU_Get_Acc_Ptr();
 80004d4:	f001 fd5e 	bl	8001f94 <MPU_Get_Acc_Ptr>
 80004d8:	4603      	mov	r3, r0
 80004da:	4a05      	ldr	r2, [pc, #20]	; (80004f0 <COMPLEMENTARY_FILTER_Init+0x30>)
 80004dc:	6093      	str	r3, [r2, #8]
	filter.alpha_gyro = ALPHA;
 80004de:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <COMPLEMENTARY_FILTER_Init+0x30>)
 80004e0:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <COMPLEMENTARY_FILTER_Init+0x34>)
 80004e2:	62da      	str	r2, [r3, #44]	; 0x2c
	filter.alpha_acc = 1.0f - ALPHA;
 80004e4:	4b02      	ldr	r3, [pc, #8]	; (80004f0 <COMPLEMENTARY_FILTER_Init+0x30>)
 80004e6:	4a04      	ldr	r2, [pc, #16]	; (80004f8 <COMPLEMENTARY_FILTER_Init+0x38>)
 80004e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	20000000 	.word	0x20000000
 80004f4:	3f7f7cee 	.word	0x3f7f7cee
 80004f8:	3b031200 	.word	0x3b031200

080004fc <COMPLEMENTARY_FILTER_Get_Angles>:
	}

}

float * COMPLEMENTARY_FILTER_Get_Angles(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
	return filter.angle;
 8000500:	4b02      	ldr	r3, [pc, #8]	; (800050c <COMPLEMENTARY_FILTER_Get_Angles+0x10>)
}
 8000502:	4618      	mov	r0, r3
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr
 800050c:	2000000c 	.word	0x2000000c

08000510 <CONTROLLER_Init>:
		.angle_kp = 			{4.0f, 		4.0f, 		0},
		.angle_speed_kp = 		{0.8f, 		0.8f, 		1.2f},
};

void CONTROLLER_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	controller.angle = COMPLEMENTARY_FILTER_Get_Angles();
 8000514:	f7ff fff2 	bl	80004fc <COMPLEMENTARY_FILTER_Get_Angles>
 8000518:	4603      	mov	r3, r0
 800051a:	4a09      	ldr	r2, [pc, #36]	; (8000540 <CONTROLLER_Init+0x30>)
 800051c:	6013      	str	r3, [r2, #0]
	controller.angle_speed = MPU_Get_Gyro_Ptr();
 800051e:	f001 fd25 	bl	8001f6c <MPU_Get_Gyro_Ptr>
 8000522:	4603      	mov	r3, r0
 8000524:	4a06      	ldr	r2, [pc, #24]	; (8000540 <CONTROLLER_Init+0x30>)
 8000526:	6293      	str	r3, [r2, #40]	; 0x28
	controller.output = MOTOR_MIXER_Get_Angle_Input_Ptr();
 8000528:	f000 ffe8 	bl	80014fc <MOTOR_MIXER_Get_Angle_Input_Ptr>
 800052c:	4603      	mov	r3, r0
 800052e:	4a04      	ldr	r2, [pc, #16]	; (8000540 <CONTROLLER_Init+0x30>)
 8000530:	6513      	str	r3, [r2, #80]	; 0x50

	controller.state = controller_state_eDISABLED;
 8000532:	4b03      	ldr	r3, [pc, #12]	; (8000540 <CONTROLLER_Init+0x30>)
 8000534:	2200      	movs	r2, #0
 8000536:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	20000038 	.word	0x20000038

08000544 <CONTROLLER_Set_State>:
		controller.output[axe_eYAW] = 0;
	}
}

void CONTROLLER_Set_State(controller_state_e new_state)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
	controller.new_state = new_state;
 800054e:	4a05      	ldr	r2, [pc, #20]	; (8000564 <CONTROLLER_Set_State+0x20>)
 8000550:	79fb      	ldrb	r3, [r7, #7]
 8000552:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
}
 8000556:	bf00      	nop
 8000558:	370c      	adds	r7, #12
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20000038 	.word	0x20000038

08000568 <CONTROLLER_Get_Angle_Target>:

float * CONTROLLER_Get_Angle_Target(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
	return controller.target_angle;
 800056c:	4b02      	ldr	r3, [pc, #8]	; (8000578 <CONTROLLER_Get_Angle_Target+0x10>)
}
 800056e:	4618      	mov	r0, r3
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	2000003c 	.word	0x2000003c

0800057c <CONTROLLER_Get_Angle_Speed_Target>:

float * CONTROLLER_Get_Angle_Speed_Target(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
	return controller.target_angle_speed;
 8000580:	4b02      	ldr	r3, [pc, #8]	; (800058c <CONTROLLER_Get_Angle_Speed_Target+0x10>)
}
 8000582:	4618      	mov	r0, r3
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr
 800058c:	20000064 	.word	0x20000064

08000590 <DATA_LOGGER_Init>:
/*
 * @brief Declare every data
 * @param mark1_ pointer to a system_t structure
 */
void DATA_LOGGER_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af00      	add	r7, sp, #0
	/* Retrieve structure from modules */
	float * gyro = MPU_Get_Gyro_Ptr();
 8000596:	f001 fce9 	bl	8001f6c <MPU_Get_Gyro_Ptr>
 800059a:	6178      	str	r0, [r7, #20]
	float * gyro_raw = MPU_Get_Gyro_Raw_Ptr();
 800059c:	f001 fcf0 	bl	8001f80 <MPU_Get_Gyro_Raw_Ptr>
 80005a0:	6138      	str	r0, [r7, #16]
	float * acc = MPU_Get_Acc_Ptr();
 80005a2:	f001 fcf7 	bl	8001f94 <MPU_Get_Acc_Ptr>
 80005a6:	60f8      	str	r0, [r7, #12]
	float * acc_raw = MPU_Get_Acc_Raw_Ptr();
 80005a8:	f001 fcfe 	bl	8001fa8 <MPU_Get_Acc_Raw_Ptr>
 80005ac:	60b8      	str	r0, [r7, #8]
	float * angle = COMPLEMENTARY_FILTER_Get_Angles();
 80005ae:	f7ff ffa5 	bl	80004fc <COMPLEMENTARY_FILTER_Get_Angles>
 80005b2:	6078      	str	r0, [r7, #4]

	/* -------------- Outputs ----------------- */
	DEFINE_DATA(data_id_eANGLE_ROLL,			(void*)&angle[axe_eROLL],			data_format_e16B_FLOAT_2D,		"Angle Roll",		use_format_eAS_OUTPUT);
 80005b4:	4bba      	ldr	r3, [pc, #744]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 80005b6:	2203      	movs	r2, #3
 80005b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80005bc:	4ab8      	ldr	r2, [pc, #736]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	6413      	str	r3, [r2, #64]	; 0x40
 80005c2:	4bb7      	ldr	r3, [pc, #732]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 80005c4:	222a      	movs	r2, #42	; 0x2a
 80005c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80005ca:	4bb5      	ldr	r3, [pc, #724]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 80005cc:	4ab5      	ldr	r2, [pc, #724]	; (80008a4 <DATA_LOGGER_Init+0x314>)
 80005ce:	649a      	str	r2, [r3, #72]	; 0x48
 80005d0:	4bb3      	ldr	r3, [pc, #716]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 80005d2:	220a      	movs	r2, #10
 80005d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 80005d8:	4bb1      	ldr	r3, [pc, #708]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 80005da:	2201      	movs	r2, #1
 80005dc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	DEFINE_DATA(data_id_eANGLE_PITCH,			(void*)&angle[axe_ePITCH],			data_format_e16B_FLOAT_2D,		"Angle Pitch",		use_format_eAS_OUTPUT);
 80005e0:	4baf      	ldr	r3, [pc, #700]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 80005e2:	2204      	movs	r2, #4
 80005e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	3304      	adds	r3, #4
 80005ec:	4aac      	ldr	r2, [pc, #688]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 80005ee:	6553      	str	r3, [r2, #84]	; 0x54
 80005f0:	4bab      	ldr	r3, [pc, #684]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 80005f2:	222a      	movs	r2, #42	; 0x2a
 80005f4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 80005f8:	4ba9      	ldr	r3, [pc, #676]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 80005fa:	4aab      	ldr	r2, [pc, #684]	; (80008a8 <DATA_LOGGER_Init+0x318>)
 80005fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80005fe:	4ba8      	ldr	r3, [pc, #672]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 8000600:	220b      	movs	r2, #11
 8000602:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8000606:	4ba6      	ldr	r3, [pc, #664]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 8000608:	2201      	movs	r2, #1
 800060a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	DEFINE_DATA(data_id_eANGLE_YAW,				(void*)&angle[axe_eYAW],			data_format_e16B_FLOAT_2D,		"Angle Yaw",		use_format_eAS_OUTPUT);
 800060e:	4ba4      	ldr	r3, [pc, #656]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 8000610:	2205      	movs	r2, #5
 8000612:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	3308      	adds	r3, #8
 800061a:	4aa1      	ldr	r2, [pc, #644]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 800061c:	6693      	str	r3, [r2, #104]	; 0x68
 800061e:	4ba0      	ldr	r3, [pc, #640]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 8000620:	222a      	movs	r2, #42	; 0x2a
 8000622:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
 8000626:	4b9e      	ldr	r3, [pc, #632]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 8000628:	4aa0      	ldr	r2, [pc, #640]	; (80008ac <DATA_LOGGER_Init+0x31c>)
 800062a:	671a      	str	r2, [r3, #112]	; 0x70
 800062c:	4b9c      	ldr	r3, [pc, #624]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 800062e:	2209      	movs	r2, #9
 8000630:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8000634:	4b9a      	ldr	r3, [pc, #616]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 8000636:	2201      	movs	r2, #1
 8000638:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75

	DEFINE_DATA(data_id_eGYRO_ROLL,				(void*)&gyro[axe_eROLL],			data_format_e16B_FLOAT_2D,		"Gyro Roll",		use_format_eAS_OUTPUT);
 800063c:	4b98      	ldr	r3, [pc, #608]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 800063e:	2206      	movs	r2, #6
 8000640:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8000644:	4a96      	ldr	r2, [pc, #600]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	67d3      	str	r3, [r2, #124]	; 0x7c
 800064a:	4b95      	ldr	r3, [pc, #596]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 800064c:	222a      	movs	r2, #42	; 0x2a
 800064e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 8000652:	4b93      	ldr	r3, [pc, #588]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 8000654:	4a96      	ldr	r2, [pc, #600]	; (80008b0 <DATA_LOGGER_Init+0x320>)
 8000656:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800065a:	4b91      	ldr	r3, [pc, #580]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 800065c:	2209      	movs	r2, #9
 800065e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8000662:	4b8f      	ldr	r3, [pc, #572]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 8000664:	2201      	movs	r2, #1
 8000666:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
	DEFINE_DATA(data_id_eGYRO_PITCH,			(void*)&gyro[axe_ePITCH],			data_format_e16B_FLOAT_2D,		"Gyro Pitch",		use_format_eAS_OUTPUT);
 800066a:	4b8d      	ldr	r3, [pc, #564]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 800066c:	2207      	movs	r2, #7
 800066e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	3304      	adds	r3, #4
 8000676:	4a8a      	ldr	r2, [pc, #552]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 8000678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800067c:	4b88      	ldr	r3, [pc, #544]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 800067e:	222a      	movs	r2, #42	; 0x2a
 8000680:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8000684:	4b86      	ldr	r3, [pc, #536]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 8000686:	4a8b      	ldr	r2, [pc, #556]	; (80008b4 <DATA_LOGGER_Init+0x324>)
 8000688:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800068c:	4b84      	ldr	r3, [pc, #528]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 800068e:	220a      	movs	r2, #10
 8000690:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8000694:	4b82      	ldr	r3, [pc, #520]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 8000696:	2201      	movs	r2, #1
 8000698:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	DEFINE_DATA(data_id_eGYRO_YAW,				(void*)&gyro[axe_eYAW],				data_format_e16B_FLOAT_2D,		"Gyro Yaw",			use_format_eAS_OUTPUT);
 800069c:	4b80      	ldr	r3, [pc, #512]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 800069e:	2208      	movs	r2, #8
 80006a0:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	3308      	adds	r3, #8
 80006a8:	4a7d      	ldr	r2, [pc, #500]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 80006aa:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80006ae:	4b7c      	ldr	r3, [pc, #496]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 80006b0:	222a      	movs	r2, #42	; 0x2a
 80006b2:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 80006b6:	4b7a      	ldr	r3, [pc, #488]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 80006b8:	4a7f      	ldr	r2, [pc, #508]	; (80008b8 <DATA_LOGGER_Init+0x328>)
 80006ba:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 80006be:	4b78      	ldr	r3, [pc, #480]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 80006c0:	2208      	movs	r2, #8
 80006c2:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 80006c6:	4b76      	ldr	r3, [pc, #472]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	DEFINE_DATA(data_id_eGYRO_RAW_ROLL,			(void*)&gyro_raw[axe_eROLL],		data_format_e16B_FLOAT_2D,		"Gyro Roll Raw",	use_format_eAS_OUTPUT);
 80006ce:	4b74      	ldr	r3, [pc, #464]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 80006d0:	2209      	movs	r2, #9
 80006d2:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
 80006d6:	4a72      	ldr	r2, [pc, #456]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 80006d8:	693b      	ldr	r3, [r7, #16]
 80006da:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
 80006de:	4b70      	ldr	r3, [pc, #448]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 80006e0:	222a      	movs	r2, #42	; 0x2a
 80006e2:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
 80006e6:	4b6e      	ldr	r3, [pc, #440]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 80006e8:	4a74      	ldr	r2, [pc, #464]	; (80008bc <DATA_LOGGER_Init+0x32c>)
 80006ea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 80006ee:	4b6c      	ldr	r3, [pc, #432]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 80006f0:	220d      	movs	r2, #13
 80006f2:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
 80006f6:	4b6a      	ldr	r3, [pc, #424]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
	DEFINE_DATA(data_id_eGYRO_RAW_PITCH,		(void*)&gyro_raw[axe_ePITCH],		data_format_e16B_FLOAT_2D,		"Gyro Pitch Raw",	use_format_eAS_OUTPUT);
 80006fe:	4b68      	ldr	r3, [pc, #416]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 8000700:	220a      	movs	r2, #10
 8000702:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
 8000706:	693b      	ldr	r3, [r7, #16]
 8000708:	3304      	adds	r3, #4
 800070a:	4a65      	ldr	r2, [pc, #404]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 800070c:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
 8000710:	4b63      	ldr	r3, [pc, #396]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 8000712:	222a      	movs	r2, #42	; 0x2a
 8000714:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
 8000718:	4b61      	ldr	r3, [pc, #388]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 800071a:	4a69      	ldr	r2, [pc, #420]	; (80008c0 <DATA_LOGGER_Init+0x330>)
 800071c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8000720:	4b5f      	ldr	r3, [pc, #380]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 8000722:	220e      	movs	r2, #14
 8000724:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
 8000728:	4b5d      	ldr	r3, [pc, #372]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 800072a:	2201      	movs	r2, #1
 800072c:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	DEFINE_DATA(data_id_eGYRO_RAW_YAW,			(void*)&gyro_raw[axe_eYAW],			data_format_e16B_FLOAT_2D,		"Gyro Yaw Raw",		use_format_eAS_OUTPUT);
 8000730:	4b5b      	ldr	r3, [pc, #364]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 8000732:	220b      	movs	r2, #11
 8000734:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
 8000738:	693b      	ldr	r3, [r7, #16]
 800073a:	3308      	adds	r3, #8
 800073c:	4a58      	ldr	r2, [pc, #352]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 800073e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000742:	4b57      	ldr	r3, [pc, #348]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 8000744:	222a      	movs	r2, #42	; 0x2a
 8000746:	f883 20e5 	strb.w	r2, [r3, #229]	; 0xe5
 800074a:	4b55      	ldr	r3, [pc, #340]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 800074c:	4a5d      	ldr	r2, [pc, #372]	; (80008c4 <DATA_LOGGER_Init+0x334>)
 800074e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8000752:	4b53      	ldr	r3, [pc, #332]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 8000754:	220c      	movs	r2, #12
 8000756:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800075a:	4b51      	ldr	r3, [pc, #324]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 800075c:	2201      	movs	r2, #1
 800075e:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed

	DEFINE_DATA(data_id_eACC_ROLL,				(void*)&acc[axe_eROLL],				data_format_e16B_FLOAT_2D,		"Acc Roll",			use_format_eAS_OUTPUT);
 8000762:	4b4f      	ldr	r3, [pc, #316]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 8000764:	220c      	movs	r2, #12
 8000766:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
 800076a:	4a4d      	ldr	r2, [pc, #308]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000772:	4b4b      	ldr	r3, [pc, #300]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 8000774:	222a      	movs	r2, #42	; 0x2a
 8000776:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
 800077a:	4b49      	ldr	r3, [pc, #292]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 800077c:	4a52      	ldr	r2, [pc, #328]	; (80008c8 <DATA_LOGGER_Init+0x338>)
 800077e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 8000782:	4b47      	ldr	r3, [pc, #284]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 8000784:	2208      	movs	r2, #8
 8000786:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 800078a:	4b45      	ldr	r3, [pc, #276]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 800078c:	2201      	movs	r2, #1
 800078e:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
	DEFINE_DATA(data_id_eACC_PITCH,				(void*)&acc[axe_ePITCH],			data_format_e16B_FLOAT_2D,		"Acc Pitch",		use_format_eAS_OUTPUT);
 8000792:	4b43      	ldr	r3, [pc, #268]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 8000794:	220d      	movs	r2, #13
 8000796:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	3304      	adds	r3, #4
 800079e:	4a40      	ldr	r2, [pc, #256]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 80007a0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
 80007a4:	4b3e      	ldr	r3, [pc, #248]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 80007a6:	222a      	movs	r2, #42	; 0x2a
 80007a8:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
 80007ac:	4b3c      	ldr	r3, [pc, #240]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 80007ae:	4a47      	ldr	r2, [pc, #284]	; (80008cc <DATA_LOGGER_Init+0x33c>)
 80007b0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 80007b4:	4b3a      	ldr	r3, [pc, #232]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 80007b6:	2209      	movs	r2, #9
 80007b8:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 80007bc:	4b38      	ldr	r3, [pc, #224]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 80007be:	2201      	movs	r2, #1
 80007c0:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
	DEFINE_DATA(data_id_eACC_YAW,				(void*)&acc[axe_eYAW],				data_format_e16B_FLOAT_2D,		"Acc Yaw",			use_format_eAS_OUTPUT);
 80007c4:	4b36      	ldr	r3, [pc, #216]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 80007c6:	220e      	movs	r2, #14
 80007c8:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	3308      	adds	r3, #8
 80007d0:	4a33      	ldr	r2, [pc, #204]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 80007d2:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
 80007d6:	4b32      	ldr	r3, [pc, #200]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 80007d8:	222a      	movs	r2, #42	; 0x2a
 80007da:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
 80007de:	4b30      	ldr	r3, [pc, #192]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 80007e0:	4a3b      	ldr	r2, [pc, #236]	; (80008d0 <DATA_LOGGER_Init+0x340>)
 80007e2:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 80007e6:	4b2e      	ldr	r3, [pc, #184]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 80007e8:	2207      	movs	r2, #7
 80007ea:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 80007ee:	4b2c      	ldr	r3, [pc, #176]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
	DEFINE_DATA(data_id_eACC_RAW_ROLL,			(void*)&acc_raw[axe_eROLL],			data_format_e16B_FLOAT_2D,		"Acc Roll Raw",		use_format_eAS_OUTPUT);
 80007f6:	4b2a      	ldr	r3, [pc, #168]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 80007f8:	220f      	movs	r2, #15
 80007fa:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
 80007fe:	4a28      	ldr	r2, [pc, #160]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
 8000806:	4b26      	ldr	r3, [pc, #152]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 8000808:	222a      	movs	r2, #42	; 0x2a
 800080a:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
 800080e:	4b24      	ldr	r3, [pc, #144]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 8000810:	4a30      	ldr	r2, [pc, #192]	; (80008d4 <DATA_LOGGER_Init+0x344>)
 8000812:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8000816:	4b22      	ldr	r3, [pc, #136]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 8000818:	220c      	movs	r2, #12
 800081a:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
 800081e:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 8000820:	2201      	movs	r2, #1
 8000822:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	DEFINE_DATA(data_id_eACC_RAW_PITCH,			(void*)&acc_raw[axe_ePITCH],		data_format_e16B_FLOAT_2D,		"Acc Pitch Raw",	use_format_eAS_OUTPUT);
 8000826:	4b1e      	ldr	r3, [pc, #120]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 8000828:	2210      	movs	r2, #16
 800082a:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	3304      	adds	r3, #4
 8000832:	4a1b      	ldr	r2, [pc, #108]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 8000834:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 8000838:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 800083a:	222a      	movs	r2, #42	; 0x2a
 800083c:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
 8000840:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 8000842:	4a25      	ldr	r2, [pc, #148]	; (80008d8 <DATA_LOGGER_Init+0x348>)
 8000844:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 8000848:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 800084a:	220d      	movs	r2, #13
 800084c:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
 8000850:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 8000852:	2201      	movs	r2, #1
 8000854:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	DEFINE_DATA(data_id_eACC_RAW_YAW,			(void*)&acc_raw[axe_eYAW],			data_format_e16B_FLOAT_2D,		"Acc Yaw Raw",		use_format_eAS_OUTPUT);
 8000858:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 800085a:	2211      	movs	r2, #17
 800085c:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	3308      	adds	r3, #8
 8000864:	4a0e      	ldr	r2, [pc, #56]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 8000866:	f8c2 3158 	str.w	r3, [r2, #344]	; 0x158
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 800086c:	222a      	movs	r2, #42	; 0x2a
 800086e:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 8000874:	4a19      	ldr	r2, [pc, #100]	; (80008dc <DATA_LOGGER_Init+0x34c>)
 8000876:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 800087c:	220b      	movs	r2, #11
 800087e:	f883 2164 	strb.w	r2, [r3, #356]	; 0x164
 8000882:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 8000884:	2201      	movs	r2, #1
 8000886:	f883 2165 	strb.w	r2, [r3, #357]	; 0x165

	/* -------------- Inputs ----------------- */
	DEFINE_DATA(data_id_eCONFIG_REQUEST,		NULL,	data_format_e0B_BUTTON,		"Send Configuration",	use_format_eAS_INPUT);
 800088a:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 800088c:	2200      	movs	r2, #0
 800088e:	721a      	strb	r2, [r3, #8]
 8000890:	4b03      	ldr	r3, [pc, #12]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 8000892:	2200      	movs	r2, #0
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	4b02      	ldr	r3, [pc, #8]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 8000898:	2200      	movs	r2, #0
 800089a:	725a      	strb	r2, [r3, #9]
 800089c:	4b00      	ldr	r3, [pc, #0]	; (80008a0 <DATA_LOGGER_Init+0x310>)
 800089e:	e01f      	b.n	80008e0 <DATA_LOGGER_Init+0x350>
 80008a0:	20000194 	.word	0x20000194
 80008a4:	080088a4 	.word	0x080088a4
 80008a8:	080088b0 	.word	0x080088b0
 80008ac:	080088bc 	.word	0x080088bc
 80008b0:	080088c8 	.word	0x080088c8
 80008b4:	080088d4 	.word	0x080088d4
 80008b8:	080088e0 	.word	0x080088e0
 80008bc:	080088ec 	.word	0x080088ec
 80008c0:	080088fc 	.word	0x080088fc
 80008c4:	0800890c 	.word	0x0800890c
 80008c8:	0800891c 	.word	0x0800891c
 80008cc:	08008928 	.word	0x08008928
 80008d0:	08008934 	.word	0x08008934
 80008d4:	0800893c 	.word	0x0800893c
 80008d8:	0800894c 	.word	0x0800894c
 80008dc:	0800895c 	.word	0x0800895c
 80008e0:	4a1a      	ldr	r2, [pc, #104]	; (800094c <DATA_LOGGER_Init+0x3bc>)
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <DATA_LOGGER_Init+0x3c0>)
 80008e6:	2212      	movs	r2, #18
 80008e8:	741a      	strb	r2, [r3, #16]
 80008ea:	4b19      	ldr	r3, [pc, #100]	; (8000950 <DATA_LOGGER_Init+0x3c0>)
 80008ec:	2202      	movs	r2, #2
 80008ee:	745a      	strb	r2, [r3, #17]
	DEFINE_DATA(data_id_eSTART_TRANSFER,		NULL,	data_format_e0B_BUTTON,		"Start Transfer",		use_format_eAS_INPUT);
 80008f0:	4b17      	ldr	r3, [pc, #92]	; (8000950 <DATA_LOGGER_Init+0x3c0>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	771a      	strb	r2, [r3, #28]
 80008f6:	4b16      	ldr	r3, [pc, #88]	; (8000950 <DATA_LOGGER_Init+0x3c0>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
 80008fc:	4b14      	ldr	r3, [pc, #80]	; (8000950 <DATA_LOGGER_Init+0x3c0>)
 80008fe:	2200      	movs	r2, #0
 8000900:	775a      	strb	r2, [r3, #29]
 8000902:	4b13      	ldr	r3, [pc, #76]	; (8000950 <DATA_LOGGER_Init+0x3c0>)
 8000904:	4a13      	ldr	r2, [pc, #76]	; (8000954 <DATA_LOGGER_Init+0x3c4>)
 8000906:	621a      	str	r2, [r3, #32]
 8000908:	4b11      	ldr	r3, [pc, #68]	; (8000950 <DATA_LOGGER_Init+0x3c0>)
 800090a:	220e      	movs	r2, #14
 800090c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <DATA_LOGGER_Init+0x3c0>)
 8000912:	2202      	movs	r2, #2
 8000914:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	DEFINE_DATA(data_id_eSTOP_TRANSFER,			NULL,	data_format_e0B_BUTTON,		"Stop Transfer",		use_format_eAS_INPUT);
 8000918:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <DATA_LOGGER_Init+0x3c0>)
 800091a:	2202      	movs	r2, #2
 800091c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8000920:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <DATA_LOGGER_Init+0x3c0>)
 8000922:	2200      	movs	r2, #0
 8000924:	62da      	str	r2, [r3, #44]	; 0x2c
 8000926:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <DATA_LOGGER_Init+0x3c0>)
 8000928:	2200      	movs	r2, #0
 800092a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <DATA_LOGGER_Init+0x3c0>)
 8000930:	4a09      	ldr	r2, [pc, #36]	; (8000958 <DATA_LOGGER_Init+0x3c8>)
 8000932:	635a      	str	r2, [r3, #52]	; 0x34
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <DATA_LOGGER_Init+0x3c0>)
 8000936:	220d      	movs	r2, #13
 8000938:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800093c:	4b04      	ldr	r3, [pc, #16]	; (8000950 <DATA_LOGGER_Init+0x3c0>)
 800093e:	2202      	movs	r2, #2
 8000940:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8000944:	bf00      	nop
 8000946:	3718      	adds	r7, #24
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	08008968 	.word	0x08008968
 8000950:	20000194 	.word	0x20000194
 8000954:	0800897c 	.word	0x0800897c
 8000958:	0800898c 	.word	0x0800898c

0800095c <DATA_LOGGER_Start>:
/*
 * @brief Request to start logging data
 */
void DATA_LOGGER_Start()
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
	start_flag = TRUE;
 8000960:	4b03      	ldr	r3, [pc, #12]	; (8000970 <DATA_LOGGER_Start+0x14>)
 8000962:	2201      	movs	r2, #1
 8000964:	701a      	strb	r2, [r3, #0]
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	200002fc 	.word	0x200002fc

08000974 <DATA_LOGGER_Stop>:
/*
 * @brief Request to stop logging data
 */
void DATA_LOGGER_Stop()
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
	stop_flag = TRUE;
 8000978:	4b03      	ldr	r3, [pc, #12]	; (8000988 <DATA_LOGGER_Stop+0x14>)
 800097a:	2201      	movs	r2, #1
 800097c:	701a      	strb	r2, [r3, #0]
}
 800097e:	bf00      	nop
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	200002fe 	.word	0x200002fe

0800098c <DATA_LOGGER_Main>:

/*
 * @brief Call the state machine and the uart parser
 */
void DATA_LOGGER_Main(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
	state_machine();
 8000990:	f000 fab0 	bl	8000ef4 <state_machine>
	parse_uart();
 8000994:	f000 fbc0 	bl	8001118 <parse_uart>
}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}

0800099c <DATA_LOGGER_Reception>:
/*
 * @brief Parse input data
 * @param input_buffer Buffer to use to parse the data
 */
void DATA_LOGGER_Reception(uint8_t * input_buffer)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	uint8_t id = input_buffer[0];
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp_uint_16 = 0 ;
 80009aa:	2300      	movs	r3, #0
 80009ac:	81bb      	strh	r3, [r7, #12]
	int16_t tmp_int_16 = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	817b      	strh	r3, [r7, #10]
	switch(data_list[id].format)
 80009b2:	7bfa      	ldrb	r2, [r7, #15]
 80009b4:	4954      	ldr	r1, [pc, #336]	; (8000b08 <DATA_LOGGER_Reception+0x16c>)
 80009b6:	4613      	mov	r3, r2
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	4413      	add	r3, r2
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	440b      	add	r3, r1
 80009c0:	3309      	adds	r3, #9
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b2d      	cmp	r3, #45	; 0x2d
 80009c6:	f200 809a 	bhi.w	8000afe <DATA_LOGGER_Reception+0x162>
 80009ca:	a201      	add	r2, pc, #4	; (adr r2, 80009d0 <DATA_LOGGER_Reception+0x34>)
 80009cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d0:	08000a89 	.word	0x08000a89
 80009d4:	08000aff 	.word	0x08000aff
 80009d8:	08000aff 	.word	0x08000aff
 80009dc:	08000aff 	.word	0x08000aff
 80009e0:	08000aff 	.word	0x08000aff
 80009e4:	08000aff 	.word	0x08000aff
 80009e8:	08000aff 	.word	0x08000aff
 80009ec:	08000aff 	.word	0x08000aff
 80009f0:	08000aff 	.word	0x08000aff
 80009f4:	08000aff 	.word	0x08000aff
 80009f8:	08000aff 	.word	0x08000aff
 80009fc:	08000aff 	.word	0x08000aff
 8000a00:	08000aff 	.word	0x08000aff
 8000a04:	08000aff 	.word	0x08000aff
 8000a08:	08000aff 	.word	0x08000aff
 8000a0c:	08000aff 	.word	0x08000aff
 8000a10:	08000aff 	.word	0x08000aff
 8000a14:	08000aff 	.word	0x08000aff
 8000a18:	08000aff 	.word	0x08000aff
 8000a1c:	08000aff 	.word	0x08000aff
 8000a20:	08000aff 	.word	0x08000aff
 8000a24:	08000ab5 	.word	0x08000ab5
 8000a28:	08000aff 	.word	0x08000aff
 8000a2c:	08000aff 	.word	0x08000aff
 8000a30:	08000aff 	.word	0x08000aff
 8000a34:	08000aff 	.word	0x08000aff
 8000a38:	08000aff 	.word	0x08000aff
 8000a3c:	08000aff 	.word	0x08000aff
 8000a40:	08000aff 	.word	0x08000aff
 8000a44:	08000aff 	.word	0x08000aff
 8000a48:	08000aff 	.word	0x08000aff
 8000a4c:	08000aff 	.word	0x08000aff
 8000a50:	08000aff 	.word	0x08000aff
 8000a54:	08000aff 	.word	0x08000aff
 8000a58:	08000aff 	.word	0x08000aff
 8000a5c:	08000aff 	.word	0x08000aff
 8000a60:	08000aff 	.word	0x08000aff
 8000a64:	08000aff 	.word	0x08000aff
 8000a68:	08000aff 	.word	0x08000aff
 8000a6c:	08000aff 	.word	0x08000aff
 8000a70:	08000aff 	.word	0x08000aff
 8000a74:	08000aff 	.word	0x08000aff
 8000a78:	08000aff 	.word	0x08000aff
 8000a7c:	08000aff 	.word	0x08000aff
 8000a80:	08000ae1 	.word	0x08000ae1
 8000a84:	08000ac3 	.word	0x08000ac3
	{
		case data_format_e0B_BUTTON:
			/* Link an action to each id */
			switch(id)
 8000a88:	7bfb      	ldrb	r3, [r7, #15]
 8000a8a:	2b02      	cmp	r3, #2
 8000a8c:	d00d      	beq.n	8000aaa <DATA_LOGGER_Reception+0x10e>
 8000a8e:	2b02      	cmp	r3, #2
 8000a90:	dc0e      	bgt.n	8000ab0 <DATA_LOGGER_Reception+0x114>
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d002      	beq.n	8000a9c <DATA_LOGGER_Reception+0x100>
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d004      	beq.n	8000aa4 <DATA_LOGGER_Reception+0x108>
			{
				default:
					break;
 8000a9a:	e009      	b.n	8000ab0 <DATA_LOGGER_Reception+0x114>
				case data_id_eCONFIG_REQUEST:
					send_config_flag = TRUE;
 8000a9c:	4b1b      	ldr	r3, [pc, #108]	; (8000b0c <DATA_LOGGER_Reception+0x170>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	701a      	strb	r2, [r3, #0]
					break;
 8000aa2:	e006      	b.n	8000ab2 <DATA_LOGGER_Reception+0x116>
				case data_id_eSTART_TRANSFER:
					DATA_LOGGER_Start();
 8000aa4:	f7ff ff5a 	bl	800095c <DATA_LOGGER_Start>
					break;
 8000aa8:	e003      	b.n	8000ab2 <DATA_LOGGER_Reception+0x116>
				case data_id_eSTOP_TRANSFER:
					DATA_LOGGER_Stop();
 8000aaa:	f7ff ff63 	bl	8000974 <DATA_LOGGER_Stop>
					break;
 8000aae:	e000      	b.n	8000ab2 <DATA_LOGGER_Reception+0x116>
					break;
 8000ab0:	bf00      	nop
			}
			break;
 8000ab2:	e025      	b.n	8000b00 <DATA_LOGGER_Reception+0x164>
		case data_format_e8B_FLOAT_0D:
			break;
		case data_format_e8B_FLOAT_1D:
			break;
		case data_format_e8B_PWM:
			tmp_uint_16 = 4*input_buffer[1];
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	81bb      	strh	r3, [r7, #12]
			break;
 8000ac0:	e01e      	b.n	8000b00 <DATA_LOGGER_Reception+0x164>
		case data_format_e16B_INT16:
			tmp_int_16 = (int16_t)input_buffer[1] << 8;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	021b      	lsls	r3, r3, #8
 8000aca:	817b      	strh	r3, [r7, #10]
			tmp_int_16 += (int16_t)input_buffer[2];
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	3302      	adds	r3, #2
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	897b      	ldrh	r3, [r7, #10]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	817b      	strh	r3, [r7, #10]
			switch(id)
			{
				default:
					break;
 8000adc:	bf00      	nop
			}

			break;
 8000ade:	e00f      	b.n	8000b00 <DATA_LOGGER_Reception+0x164>
		case data_format_e16B_UINT16:
			tmp_uint_16 = (uint16_t)input_buffer[1] << 8;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	021b      	lsls	r3, r3, #8
 8000aea:	81bb      	strh	r3, [r7, #12]
			tmp_uint_16 += (uint16_t)input_buffer[2];
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3302      	adds	r3, #2
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	89bb      	ldrh	r3, [r7, #12]
 8000af6:	4413      	add	r3, r2
 8000af8:	81bb      	strh	r3, [r7, #12]
			switch(id)
			{
				default:
					break;
 8000afa:	bf00      	nop
			}

		case data_format_e16B_FLOAT_1D:
			break;
 8000afc:	e000      	b.n	8000b00 <DATA_LOGGER_Reception+0x164>
		default:
			break;
 8000afe:	bf00      	nop

	}
}
 8000b00:	bf00      	nop
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000194 	.word	0x20000194
 8000b0c:	200002fd 	.word	0x200002fd

08000b10 <DATA_LOGGER_Get_Data_Value>:
 * @param id Id of the data
 * @param buffer Buffer array
 * @return Number of bytes written
 */
uint8_t DATA_LOGGER_Get_Data_Value(data_id_e id, uint8_t * buffer)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b087      	sub	sp, #28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	73fb      	strb	r3, [r7, #15]

	/* Local temporary variables */
	int16_t tmp_16 = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	82fb      	strh	r3, [r7, #22]
	float tmp_float = 0;
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]

	/* First byte is reserved for the id */
	buffer[0] = id ;
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	7bfa      	ldrb	r2, [r7, #15]
 8000b2a:	701a      	strb	r2, [r3, #0]
	switch(data_list[id].format)
 8000b2c:	7bfa      	ldrb	r2, [r7, #15]
 8000b2e:	498f      	ldr	r1, [pc, #572]	; (8000d6c <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000b30:	4613      	mov	r3, r2
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	4413      	add	r3, r2
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	440b      	add	r3, r1
 8000b3a:	3309      	adds	r3, #9
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	3b14      	subs	r3, #20
 8000b40:	2b19      	cmp	r3, #25
 8000b42:	f200 80fb 	bhi.w	8000d3c <DATA_LOGGER_Get_Data_Value+0x22c>
 8000b46:	a201      	add	r2, pc, #4	; (adr r2, 8000b4c <DATA_LOGGER_Get_Data_Value+0x3c>)
 8000b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b4c:	08000bb5 	.word	0x08000bb5
 8000b50:	08000d3d 	.word	0x08000d3d
 8000b54:	08000d3d 	.word	0x08000d3d
 8000b58:	08000bd1 	.word	0x08000bd1
 8000b5c:	08000d3d 	.word	0x08000d3d
 8000b60:	08000d3d 	.word	0x08000d3d
 8000b64:	08000d3d 	.word	0x08000d3d
 8000b68:	08000d3d 	.word	0x08000d3d
 8000b6c:	08000d3d 	.word	0x08000d3d
 8000b70:	08000d3d 	.word	0x08000d3d
 8000b74:	08000d3d 	.word	0x08000d3d
 8000b78:	08000d3d 	.word	0x08000d3d
 8000b7c:	08000d3d 	.word	0x08000d3d
 8000b80:	08000d3d 	.word	0x08000d3d
 8000b84:	08000d3d 	.word	0x08000d3d
 8000b88:	08000d3d 	.word	0x08000d3d
 8000b8c:	08000d3d 	.word	0x08000d3d
 8000b90:	08000d3d 	.word	0x08000d3d
 8000b94:	08000d3d 	.word	0x08000d3d
 8000b98:	08000d3d 	.word	0x08000d3d
 8000b9c:	08000d3d 	.word	0x08000d3d
 8000ba0:	08000c01 	.word	0x08000c01
 8000ba4:	08000c49 	.word	0x08000c49
 8000ba8:	08000c91 	.word	0x08000c91
 8000bac:	08000cd9 	.word	0x08000cd9
 8000bb0:	08000d0b 	.word	0x08000d0b
	{
		case data_format_e8B:
			buffer[1] = *(uint8_t*)data_list[id].data ;
 8000bb4:	7bfa      	ldrb	r2, [r7, #15]
 8000bb6:	496d      	ldr	r1, [pc, #436]	; (8000d6c <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000bb8:	4613      	mov	r3, r2
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	4413      	add	r3, r2
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	440b      	add	r3, r1
 8000bc2:	3304      	adds	r3, #4
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	7812      	ldrb	r2, [r2, #0]
 8000bcc:	701a      	strb	r2, [r3, #0]
			break;
 8000bce:	e0b6      	b.n	8000d3e <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e8B_PWM:
			break;
		case data_format_e8B_FLOAT_0D:
			tmp_float = *(float*)data_list[id].data ;
 8000bd0:	7bfa      	ldrb	r2, [r7, #15]
 8000bd2:	4966      	ldr	r1, [pc, #408]	; (8000d6c <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	4413      	add	r3, r2
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	440b      	add	r3, r1
 8000bde:	3304      	adds	r3, #4
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	613b      	str	r3, [r7, #16]
			buffer[1] = (int8_t)tmp_float;
 8000be6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bee:	edc7 7a01 	vstr	s15, [r7, #4]
 8000bf2:	793b      	ldrb	r3, [r7, #4]
 8000bf4:	b25a      	sxtb	r2, r3
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	b2d2      	uxtb	r2, r2
 8000bfc:	701a      	strb	r2, [r3, #0]
			break;
 8000bfe:	e09e      	b.n	8000d3e <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e8B_FLOAT_1D:
			break;
		case data_format_e16B:
			break;
		case data_format_e16B_FLOAT_1D:
			tmp_float = *(float*)data_list[id].data;
 8000c00:	7bfa      	ldrb	r2, [r7, #15]
 8000c02:	495a      	ldr	r1, [pc, #360]	; (8000d6c <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000c04:	4613      	mov	r3, r2
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	4413      	add	r3, r2
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	440b      	add	r3, r1
 8000c0e:	3304      	adds	r3, #4
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 10;
 8000c16:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c1a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000c1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c26:	ee17 3a90 	vmov	r3, s15
 8000c2a:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8000c2c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c30:	121b      	asrs	r3, r3, #8
 8000c32:	b21a      	sxth	r2, r3
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	3301      	adds	r3, #1
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	3302      	adds	r3, #2
 8000c40:	8afa      	ldrh	r2, [r7, #22]
 8000c42:	b2d2      	uxtb	r2, r2
 8000c44:	701a      	strb	r2, [r3, #0]
			break;
 8000c46:	e07a      	b.n	8000d3e <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e16B_FLOAT_2D:
			tmp_float = *(float*)data_list[id].data;
 8000c48:	7bfa      	ldrb	r2, [r7, #15]
 8000c4a:	4948      	ldr	r1, [pc, #288]	; (8000d6c <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	4413      	add	r3, r2
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	440b      	add	r3, r1
 8000c56:	3304      	adds	r3, #4
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 100;
 8000c5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c62:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8000d70 <DATA_LOGGER_Get_Data_Value+0x260>
 8000c66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c6e:	ee17 3a90 	vmov	r3, s15
 8000c72:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8000c74:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c78:	121b      	asrs	r3, r3, #8
 8000c7a:	b21a      	sxth	r2, r3
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	b2d2      	uxtb	r2, r2
 8000c82:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	3302      	adds	r3, #2
 8000c88:	8afa      	ldrh	r2, [r7, #22]
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	701a      	strb	r2, [r3, #0]
			break;
 8000c8e:	e056      	b.n	8000d3e <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e16B_FLOAT_3D:
			tmp_float = *(float*)data_list[id].data;
 8000c90:	7bfa      	ldrb	r2, [r7, #15]
 8000c92:	4936      	ldr	r1, [pc, #216]	; (8000d6c <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000c94:	4613      	mov	r3, r2
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	4413      	add	r3, r2
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	440b      	add	r3, r1
 8000c9e:	3304      	adds	r3, #4
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 1000;
 8000ca6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000caa:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8000d74 <DATA_LOGGER_Get_Data_Value+0x264>
 8000cae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cb6:	ee17 3a90 	vmov	r3, s15
 8000cba:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8000cbc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000cc0:	121b      	asrs	r3, r3, #8
 8000cc2:	b21a      	sxth	r2, r3
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	b2d2      	uxtb	r2, r2
 8000cca:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	3302      	adds	r3, #2
 8000cd0:	8afa      	ldrh	r2, [r7, #22]
 8000cd2:	b2d2      	uxtb	r2, r2
 8000cd4:	701a      	strb	r2, [r3, #0]
			break;
 8000cd6:	e032      	b.n	8000d3e <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e16B_UINT16:
			tmp_16 = *(uint16_t*)data_list[id].data ;
 8000cd8:	7bfa      	ldrb	r2, [r7, #15]
 8000cda:	4924      	ldr	r1, [pc, #144]	; (8000d6c <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000cdc:	4613      	mov	r3, r2
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	4413      	add	r3, r2
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	440b      	add	r3, r1
 8000ce6:	3304      	adds	r3, #4
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8000cee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000cf2:	121b      	asrs	r3, r3, #8
 8000cf4:	b21a      	sxth	r2, r3
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	b2d2      	uxtb	r2, r2
 8000cfc:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	3302      	adds	r3, #2
 8000d02:	8afa      	ldrh	r2, [r7, #22]
 8000d04:	b2d2      	uxtb	r2, r2
 8000d06:	701a      	strb	r2, [r3, #0]
			break;
 8000d08:	e019      	b.n	8000d3e <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e16B_INT16:
			tmp_16 = *(int16_t*)data_list[id].data ;
 8000d0a:	7bfa      	ldrb	r2, [r7, #15]
 8000d0c:	4917      	ldr	r1, [pc, #92]	; (8000d6c <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000d0e:	4613      	mov	r3, r2
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	4413      	add	r3, r2
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	440b      	add	r3, r1
 8000d18:	3304      	adds	r3, #4
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8000d20:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000d24:	121b      	asrs	r3, r3, #8
 8000d26:	b21a      	sxth	r2, r3
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	b2d2      	uxtb	r2, r2
 8000d2e:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	3302      	adds	r3, #2
 8000d34:	8afa      	ldrh	r2, [r7, #22]
 8000d36:	b2d2      	uxtb	r2, r2
 8000d38:	701a      	strb	r2, [r3, #0]
			break;
 8000d3a:	e000      	b.n	8000d3e <DATA_LOGGER_Get_Data_Value+0x22e>
		default:
			break;
 8000d3c:	bf00      	nop
	}
	/* Length of the data array */
	return (data_list[id].format / 20) + 1;
 8000d3e:	7bfa      	ldrb	r2, [r7, #15]
 8000d40:	490a      	ldr	r1, [pc, #40]	; (8000d6c <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000d42:	4613      	mov	r3, r2
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	4413      	add	r3, r2
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	440b      	add	r3, r1
 8000d4c:	3309      	adds	r3, #9
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4a09      	ldr	r2, [pc, #36]	; (8000d78 <DATA_LOGGER_Get_Data_Value+0x268>)
 8000d52:	fba2 2303 	umull	r2, r3, r2, r3
 8000d56:	091b      	lsrs	r3, r3, #4
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	b2db      	uxtb	r3, r3
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	371c      	adds	r7, #28
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20000194 	.word	0x20000194
 8000d70:	42c80000 	.word	0x42c80000
 8000d74:	447a0000 	.word	0x447a0000
 8000d78:	cccccccd 	.word	0xcccccccd

08000d7c <DATA_LOGGER_Get_Data_Config>:
 * @param id Id of the data
 * @param buffer Buffer array to write the configuration into
 * @return Number of bytes we wrote in the buffer
 */
uint8_t DATA_LOGGER_Get_Data_Config(data_id_e id, uint8_t * buffer)
{
 8000d7c:	b590      	push	{r4, r7, lr}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	71fb      	strb	r3, [r7, #7]
	/* We send a configuration so it must start with 0xFF */
	buffer[0] = 0xFF;
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	22ff      	movs	r2, #255	; 0xff
 8000d8c:	701a      	strb	r2, [r3, #0]
	/* Then we put the length of the name */
	buffer[1] = data_list[id].len_name;
 8000d8e:	79fa      	ldrb	r2, [r7, #7]
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	1c59      	adds	r1, r3, #1
 8000d94:	4828      	ldr	r0, [pc, #160]	; (8000e38 <DATA_LOGGER_Get_Data_Config+0xbc>)
 8000d96:	4613      	mov	r3, r2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	4413      	add	r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	4403      	add	r3, r0
 8000da0:	3310      	adds	r3, #16
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	700b      	strb	r3, [r1, #0]
	/* Then we write the data format */
	buffer[2] = data_list[id].format;
 8000da6:	79fa      	ldrb	r2, [r7, #7]
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	1c99      	adds	r1, r3, #2
 8000dac:	4822      	ldr	r0, [pc, #136]	; (8000e38 <DATA_LOGGER_Get_Data_Config+0xbc>)
 8000dae:	4613      	mov	r3, r2
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	4413      	add	r3, r2
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	4403      	add	r3, r0
 8000db8:	3309      	adds	r3, #9
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	700b      	strb	r3, [r1, #0]
	/* Then the id of the data */
	buffer[3] = id;
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	3303      	adds	r3, #3
 8000dc2:	79fa      	ldrb	r2, [r7, #7]
 8000dc4:	701a      	strb	r2, [r3, #0]
	/* When the data is used as output, we add 128 to the id */
	if(data_list[id].use_format == use_format_eAS_INPUT)
 8000dc6:	79fa      	ldrb	r2, [r7, #7]
 8000dc8:	491b      	ldr	r1, [pc, #108]	; (8000e38 <DATA_LOGGER_Get_Data_Config+0xbc>)
 8000dca:	4613      	mov	r3, r2
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	4413      	add	r3, r2
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	3311      	adds	r3, #17
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d107      	bne.n	8000dec <DATA_LOGGER_Get_Data_Config+0x70>
	{
		buffer[3] += 128 ;
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	3303      	adds	r3, #3
 8000de0:	781a      	ldrb	r2, [r3, #0]
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	3303      	adds	r3, #3
 8000de6:	3a80      	subs	r2, #128	; 0x80
 8000de8:	b2d2      	uxtb	r2, r2
 8000dea:	701a      	strb	r2, [r3, #0]
	}
	/* Finally we write the name */
	memcpy(&buffer[4], data_list[id].name, data_list[id].len_name);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	1d18      	adds	r0, r3, #4
 8000df0:	79fa      	ldrb	r2, [r7, #7]
 8000df2:	4911      	ldr	r1, [pc, #68]	; (8000e38 <DATA_LOGGER_Get_Data_Config+0xbc>)
 8000df4:	4613      	mov	r3, r2
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	4413      	add	r3, r2
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	330c      	adds	r3, #12
 8000e00:	6819      	ldr	r1, [r3, #0]
 8000e02:	79fa      	ldrb	r2, [r7, #7]
 8000e04:	4c0c      	ldr	r4, [pc, #48]	; (8000e38 <DATA_LOGGER_Get_Data_Config+0xbc>)
 8000e06:	4613      	mov	r3, r2
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	4413      	add	r3, r2
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	4423      	add	r3, r4
 8000e10:	3310      	adds	r3, #16
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	f007 fcf9 	bl	800880c <memcpy>

	return 4 + data_list[id].len_name ;
 8000e1a:	79fa      	ldrb	r2, [r7, #7]
 8000e1c:	4906      	ldr	r1, [pc, #24]	; (8000e38 <DATA_LOGGER_Get_Data_Config+0xbc>)
 8000e1e:	4613      	mov	r3, r2
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	4413      	add	r3, r2
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	440b      	add	r3, r1
 8000e28:	3310      	adds	r3, #16
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	b2db      	uxtb	r3, r3
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd90      	pop	{r4, r7, pc}
 8000e38:	20000194 	.word	0x20000194

08000e3c <DATA_LOGGER_Get_Data>:
 * @brief Get data
 * @param id Id of the data
 * @return pointer to the data structure with the corresponding ID
 */
data_t * DATA_LOGGER_Get_Data(data_id_e id)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
	return &data_list[id];
 8000e46:	79fa      	ldrb	r2, [r7, #7]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	4413      	add	r3, r2
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	4a03      	ldr	r2, [pc, #12]	; (8000e60 <DATA_LOGGER_Get_Data+0x24>)
 8000e52:	4413      	add	r3, r2
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	20000194 	.word	0x20000194

08000e64 <push_data_to_uart>:
 * @brief Add the start byte and checksum to a message
 * @param buffer Data array to send
 * @param len Number of bytes to send
 */
void push_data_to_uart(uint8_t * buffer, uint8_t len)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b098      	sub	sp, #96	; 0x60
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	70fb      	strb	r3, [r7, #3]
	uint8_t buffer_new[80];
	uint32_t checksum = 0 ;
 8000e70:	2300      	movs	r3, #0
 8000e72:	65fb      	str	r3, [r7, #92]	; 0x5c
	buffer_new[0] = '$';
 8000e74:	2324      	movs	r3, #36	; 0x24
 8000e76:	723b      	strb	r3, [r7, #8]
	for(uint8_t b = 0; b < len; b++)
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8000e7e:	e01d      	b.n	8000ebc <push_data_to_uart+0x58>
	{
		buffer_new[1 + b] = buffer[b];
 8000e80:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	441a      	add	r2, r3
 8000e88:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	7812      	ldrb	r2, [r2, #0]
 8000e90:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000e94:	440b      	add	r3, r1
 8000e96:	f803 2c58 	strb.w	r2, [r3, #-88]
		checksum += (uint32_t)buffer_new[1 + b];
 8000e9a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000ea4:	4413      	add	r3, r2
 8000ea6:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000eae:	4413      	add	r3, r2
 8000eb0:	65fb      	str	r3, [r7, #92]	; 0x5c
	for(uint8_t b = 0; b < len; b++)
 8000eb2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8000ebc:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8000ec0:	78fb      	ldrb	r3, [r7, #3]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d3dc      	bcc.n	8000e80 <push_data_to_uart+0x1c>
	}
	buffer_new[1 + len] = (uint8_t)(checksum % 256) ;
 8000ec6:	78fb      	ldrb	r3, [r7, #3]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000ed2:	440b      	add	r3, r1
 8000ed4:	f803 2c58 	strb.w	r2, [r3, #-88]
	UART_Transmit(UART_TELEMETRY, buffer_new, len+2);
 8000ed8:	78fb      	ldrb	r3, [r7, #3]
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	3302      	adds	r3, #2
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	f107 0308 	add.w	r3, r7, #8
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f000 fe06 	bl	8001af8 <UART_Transmit>
}
 8000eec:	bf00      	nop
 8000eee:	3760      	adds	r7, #96	; 0x60
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <state_machine>:

/*
 * @brief data logger state machine
 */
static void state_machine(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
	/* Time management for periodic transmissions */
	static uint32_t next_time_state_machine = 0;
	static uint32_t current_period = PERIODE_PING;
	uint32_t time_ms = HAL_GetTick();
 8000efa:	f002 fad5 	bl	80034a8 <HAL_GetTick>
 8000efe:	60b8      	str	r0, [r7, #8]
	if(time_ms < next_time_state_machine)
 8000f00:	4b78      	ldr	r3, [pc, #480]	; (80010e4 <state_machine+0x1f0>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	68ba      	ldr	r2, [r7, #8]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	f0c0 80e6 	bcc.w	80010d8 <state_machine+0x1e4>
	{
		return;
	}
	next_time_state_machine = time_ms + current_period;
 8000f0c:	4b76      	ldr	r3, [pc, #472]	; (80010e8 <state_machine+0x1f4>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	4413      	add	r3, r2
 8000f14:	4a73      	ldr	r2, [pc, #460]	; (80010e4 <state_machine+0x1f0>)
 8000f16:	6013      	str	r3, [r2, #0]

	/* State machine variables */
	static data_logger_state_e state = data_logger_state_eIDLE;
	static data_logger_state_e previous_state = data_logger_state_eTRANSMIT_CONFIG ;
	bool_e entrance = previous_state != state ;
 8000f18:	4b74      	ldr	r3, [pc, #464]	; (80010ec <state_machine+0x1f8>)
 8000f1a:	781a      	ldrb	r2, [r3, #0]
 8000f1c:	4b74      	ldr	r3, [pc, #464]	; (80010f0 <state_machine+0x1fc>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	bf14      	ite	ne
 8000f24:	2301      	movne	r3, #1
 8000f26:	2300      	moveq	r3, #0
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	71fb      	strb	r3, [r7, #7]
	previous_state = state ;
 8000f2c:	4b70      	ldr	r3, [pc, #448]	; (80010f0 <state_machine+0x1fc>)
 8000f2e:	781a      	ldrb	r2, [r3, #0]
 8000f30:	4b6e      	ldr	r3, [pc, #440]	; (80010ec <state_machine+0x1f8>)
 8000f32:	701a      	strb	r2, [r3, #0]
	switch(state)
 8000f34:	4b6e      	ldr	r3, [pc, #440]	; (80010f0 <state_machine+0x1fc>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	f000 8091 	beq.w	8001060 <state_machine+0x16c>
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	f300 80cd 	bgt.w	80010de <state_machine+0x1ea>
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d002      	beq.n	8000f4e <state_machine+0x5a>
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d043      	beq.n	8000fd4 <state_machine+0xe0>
 8000f4c:	e0c7      	b.n	80010de <state_machine+0x1ea>
	{
		case data_logger_state_eIDLE :
			if(entrance)
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d003      	beq.n	8000f5c <state_machine+0x68>
			{
				/* When we are in the idle mode, we just ping the device at PERIODE_PING µs interval */
				current_period = PERIODE_PING;
 8000f54:	4b64      	ldr	r3, [pc, #400]	; (80010e8 <state_machine+0x1f4>)
 8000f56:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f5a:	601a      	str	r2, [r3, #0]
			}

			tmp_len = DATA_LOGGER_Get_Data_Config(data_id_eCONFIG_REQUEST, tmp);
 8000f5c:	4965      	ldr	r1, [pc, #404]	; (80010f4 <state_machine+0x200>)
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f7ff ff0c 	bl	8000d7c <DATA_LOGGER_Get_Data_Config>
 8000f64:	4603      	mov	r3, r0
 8000f66:	461a      	mov	r2, r3
 8000f68:	4b63      	ldr	r3, [pc, #396]	; (80010f8 <state_machine+0x204>)
 8000f6a:	701a      	strb	r2, [r3, #0]
			push_data_to_uart(tmp, tmp_len);
 8000f6c:	4b62      	ldr	r3, [pc, #392]	; (80010f8 <state_machine+0x204>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4619      	mov	r1, r3
 8000f72:	4860      	ldr	r0, [pc, #384]	; (80010f4 <state_machine+0x200>)
 8000f74:	f7ff ff76 	bl	8000e64 <push_data_to_uart>

			/* If we receive a configuration request, we change the state */
			if(send_config_flag)
 8000f78:	4b60      	ldr	r3, [pc, #384]	; (80010fc <state_machine+0x208>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d01a      	beq.n	8000fb6 <state_machine+0xc2>
			{
				/* Reset flags */
				start_flag = FALSE;
 8000f80:	4b5f      	ldr	r3, [pc, #380]	; (8001100 <state_machine+0x20c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	701a      	strb	r2, [r3, #0]
				stop_flag = FALSE;
 8000f86:	4b5f      	ldr	r3, [pc, #380]	; (8001104 <state_machine+0x210>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
				send_config_flag = FALSE;
 8000f8c:	4b5b      	ldr	r3, [pc, #364]	; (80010fc <state_machine+0x208>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]
				/* Change the state */
				/* We send the configuration only if we did not send it before */
				if(config_not_sent)
 8000f92:	4b5d      	ldr	r3, [pc, #372]	; (8001108 <state_machine+0x214>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d009      	beq.n	8000fae <state_machine+0xba>
				{
					id_init_counter = 0;
 8000f9a:	4b5c      	ldr	r3, [pc, #368]	; (800110c <state_machine+0x218>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
					is_any_data_used = FALSE;
 8000fa0:	4b5b      	ldr	r3, [pc, #364]	; (8001110 <state_machine+0x21c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	701a      	strb	r2, [r3, #0]
					state = data_logger_state_eTRANSMIT_CONFIG;
 8000fa6:	4b52      	ldr	r3, [pc, #328]	; (80010f0 <state_machine+0x1fc>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	701a      	strb	r2, [r3, #0]
			{
				start_flag = FALSE;
				stop_flag = FALSE;
				state = data_logger_state_eLOG;
			}
			break;
 8000fac:	e096      	b.n	80010dc <state_machine+0x1e8>
					state = data_logger_state_eLOG;
 8000fae:	4b50      	ldr	r3, [pc, #320]	; (80010f0 <state_machine+0x1fc>)
 8000fb0:	2202      	movs	r2, #2
 8000fb2:	701a      	strb	r2, [r3, #0]
			break;
 8000fb4:	e092      	b.n	80010dc <state_machine+0x1e8>
			else if(start_flag)
 8000fb6:	4b52      	ldr	r3, [pc, #328]	; (8001100 <state_machine+0x20c>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	f000 808e 	beq.w	80010dc <state_machine+0x1e8>
				start_flag = FALSE;
 8000fc0:	4b4f      	ldr	r3, [pc, #316]	; (8001100 <state_machine+0x20c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
				stop_flag = FALSE;
 8000fc6:	4b4f      	ldr	r3, [pc, #316]	; (8001104 <state_machine+0x210>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
				state = data_logger_state_eLOG;
 8000fcc:	4b48      	ldr	r3, [pc, #288]	; (80010f0 <state_machine+0x1fc>)
 8000fce:	2202      	movs	r2, #2
 8000fd0:	701a      	strb	r2, [r3, #0]
			break;
 8000fd2:	e083      	b.n	80010dc <state_machine+0x1e8>

		case data_logger_state_eTRANSMIT_CONFIG :
			/* Change the data logger task period to send configuration slowly */
			if(entrance)
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d009      	beq.n	8000fee <state_machine+0xfa>
			{
				current_period = PERIODE_CONFIG_SEND;
 8000fda:	4b43      	ldr	r3, [pc, #268]	; (80010e8 <state_machine+0x1f4>)
 8000fdc:	220a      	movs	r2, #10
 8000fde:	601a      	str	r2, [r3, #0]
			}
			while(data_list[id_init_counter].use_format == use_format_eNOT_USED && id_init_counter < data_id_eCOUNT)
 8000fe0:	e005      	b.n	8000fee <state_machine+0xfa>
			{
				id_init_counter ++ ;
 8000fe2:	4b4a      	ldr	r3, [pc, #296]	; (800110c <state_machine+0x218>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4b48      	ldr	r3, [pc, #288]	; (800110c <state_machine+0x218>)
 8000fec:	701a      	strb	r2, [r3, #0]
			while(data_list[id_init_counter].use_format == use_format_eNOT_USED && id_init_counter < data_id_eCOUNT)
 8000fee:	4b47      	ldr	r3, [pc, #284]	; (800110c <state_machine+0x218>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4a47      	ldr	r2, [pc, #284]	; (8001114 <state_machine+0x220>)
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	4413      	add	r3, r2
 8001000:	3311      	adds	r3, #17
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d103      	bne.n	8001010 <state_machine+0x11c>
 8001008:	4b40      	ldr	r3, [pc, #256]	; (800110c <state_machine+0x218>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b11      	cmp	r3, #17
 800100e:	d9e8      	bls.n	8000fe2 <state_machine+0xee>
			}
			if(id_init_counter < data_id_eCOUNT)
 8001010:	4b3e      	ldr	r3, [pc, #248]	; (800110c <state_machine+0x218>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b11      	cmp	r3, #17
 8001016:	d817      	bhi.n	8001048 <state_machine+0x154>
			{
				is_any_data_used = TRUE;
 8001018:	4b3d      	ldr	r3, [pc, #244]	; (8001110 <state_machine+0x21c>)
 800101a:	2201      	movs	r2, #1
 800101c:	701a      	strb	r2, [r3, #0]
				/* Get data configuration */
				tmp_len = DATA_LOGGER_Get_Data_Config(id_init_counter++, tmp);
 800101e:	4b3b      	ldr	r3, [pc, #236]	; (800110c <state_machine+0x218>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	1c5a      	adds	r2, r3, #1
 8001024:	b2d1      	uxtb	r1, r2
 8001026:	4a39      	ldr	r2, [pc, #228]	; (800110c <state_machine+0x218>)
 8001028:	7011      	strb	r1, [r2, #0]
 800102a:	4932      	ldr	r1, [pc, #200]	; (80010f4 <state_machine+0x200>)
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fea5 	bl	8000d7c <DATA_LOGGER_Get_Data_Config>
 8001032:	4603      	mov	r3, r0
 8001034:	461a      	mov	r2, r3
 8001036:	4b30      	ldr	r3, [pc, #192]	; (80010f8 <state_machine+0x204>)
 8001038:	701a      	strb	r2, [r3, #0]
				/* Send the configuration */
				push_data_to_uart(tmp, tmp_len);
 800103a:	4b2f      	ldr	r3, [pc, #188]	; (80010f8 <state_machine+0x204>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	4619      	mov	r1, r3
 8001040:	482c      	ldr	r0, [pc, #176]	; (80010f4 <state_machine+0x200>)
 8001042:	f7ff ff0f 	bl	8000e64 <push_data_to_uart>
				else
				{
					state = data_logger_state_eIDLE ;
				}
			}
			break;
 8001046:	e04a      	b.n	80010de <state_machine+0x1ea>
				if(is_any_data_used)
 8001048:	4b31      	ldr	r3, [pc, #196]	; (8001110 <state_machine+0x21c>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d003      	beq.n	8001058 <state_machine+0x164>
					state = data_logger_state_eLOG ;
 8001050:	4b27      	ldr	r3, [pc, #156]	; (80010f0 <state_machine+0x1fc>)
 8001052:	2202      	movs	r2, #2
 8001054:	701a      	strb	r2, [r3, #0]
			break;
 8001056:	e042      	b.n	80010de <state_machine+0x1ea>
					state = data_logger_state_eIDLE ;
 8001058:	4b25      	ldr	r3, [pc, #148]	; (80010f0 <state_machine+0x1fc>)
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]
			break;
 800105e:	e03e      	b.n	80010de <state_machine+0x1ea>

		case data_logger_state_eLOG:
			if(entrance)
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d002      	beq.n	800106c <state_machine+0x178>
			{
				current_period = PERIODE_SEND;
 8001066:	4b20      	ldr	r3, [pc, #128]	; (80010e8 <state_machine+0x1f4>)
 8001068:	2201      	movs	r2, #1
 800106a:	601a      	str	r2, [r3, #0]
			}
			if(stop_flag)
 800106c:	4b25      	ldr	r3, [pc, #148]	; (8001104 <state_machine+0x210>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d002      	beq.n	800107a <state_machine+0x186>
			{
				state = data_logger_state_eIDLE;
 8001074:	4b1e      	ldr	r3, [pc, #120]	; (80010f0 <state_machine+0x1fc>)
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]
			}
			for(uint8_t d = 0; d < data_id_eCOUNT; d++)
 800107a:	2300      	movs	r3, #0
 800107c:	73fb      	strb	r3, [r7, #15]
 800107e:	e027      	b.n	80010d0 <state_machine+0x1dc>
			{
				if(data_list[d].use_format == use_format_eAS_OUTPUT && (data_list[d].data != NULL))
 8001080:	7bfa      	ldrb	r2, [r7, #15]
 8001082:	4924      	ldr	r1, [pc, #144]	; (8001114 <state_machine+0x220>)
 8001084:	4613      	mov	r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	4413      	add	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	440b      	add	r3, r1
 800108e:	3311      	adds	r3, #17
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d119      	bne.n	80010ca <state_machine+0x1d6>
 8001096:	7bfa      	ldrb	r2, [r7, #15]
 8001098:	491e      	ldr	r1, [pc, #120]	; (8001114 <state_machine+0x220>)
 800109a:	4613      	mov	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4413      	add	r3, r2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	440b      	add	r3, r1
 80010a4:	3304      	adds	r3, #4
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00e      	beq.n	80010ca <state_machine+0x1d6>
				{
					tmp_len = DATA_LOGGER_Get_Data_Value(d, tmp);
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
 80010ae:	4911      	ldr	r1, [pc, #68]	; (80010f4 <state_machine+0x200>)
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fd2d 	bl	8000b10 <DATA_LOGGER_Get_Data_Value>
 80010b6:	4603      	mov	r3, r0
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <state_machine+0x204>)
 80010bc:	701a      	strb	r2, [r3, #0]
					push_data_to_uart(tmp, tmp_len);
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <state_machine+0x204>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	4619      	mov	r1, r3
 80010c4:	480b      	ldr	r0, [pc, #44]	; (80010f4 <state_machine+0x200>)
 80010c6:	f7ff fecd 	bl	8000e64 <push_data_to_uart>
			for(uint8_t d = 0; d < data_id_eCOUNT; d++)
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
 80010cc:	3301      	adds	r3, #1
 80010ce:	73fb      	strb	r3, [r7, #15]
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	2b11      	cmp	r3, #17
 80010d4:	d9d4      	bls.n	8001080 <state_machine+0x18c>
				}
			}
			break;
 80010d6:	e002      	b.n	80010de <state_machine+0x1ea>
		return;
 80010d8:	bf00      	nop
 80010da:	e000      	b.n	80010de <state_machine+0x1ea>
			break;
 80010dc:	bf00      	nop
	}
}
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000338 	.word	0x20000338
 80010e8:	20000094 	.word	0x20000094
 80010ec:	20000098 	.word	0x20000098
 80010f0:	2000033c 	.word	0x2000033c
 80010f4:	20000300 	.word	0x20000300
 80010f8:	20000332 	.word	0x20000332
 80010fc:	200002fd 	.word	0x200002fd
 8001100:	200002fc 	.word	0x200002fc
 8001104:	200002fe 	.word	0x200002fe
 8001108:	20000090 	.word	0x20000090
 800110c:	20000333 	.word	0x20000333
 8001110:	20000334 	.word	0x20000334
 8001114:	20000194 	.word	0x20000194

08001118 <parse_uart>:

/*
 * @brief Parse incoming bytes
 */
static void parse_uart(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
	static uint8_t trame[20] = { 0 };
	static uint8_t nb_byte_to_buffer = 0;
	static uint8_t buffer_counter = 0;
	static uint16_t checksum = 0;
	/* Check for available data */
	if(UART_Availables(UART_TELEMETRY))
 800111e:	2000      	movs	r0, #0
 8001120:	f000 fc40 	bl	80019a4 <UART_Availables>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d06c      	beq.n	8001204 <parse_uart+0xec>
	{
		uint8_t c;
		UART_Get(UART_TELEMETRY, &c);
 800112a:	1dfb      	adds	r3, r7, #7
 800112c:	4619      	mov	r1, r3
 800112e:	2000      	movs	r0, #0
 8001130:	f000 fc46 	bl	80019c0 <UART_Get>
		switch(state)
 8001134:	4b35      	ldr	r3, [pc, #212]	; (800120c <parse_uart+0xf4>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b03      	cmp	r3, #3
 800113a:	d863      	bhi.n	8001204 <parse_uart+0xec>
 800113c:	a201      	add	r2, pc, #4	; (adr r2, 8001144 <parse_uart+0x2c>)
 800113e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001142:	bf00      	nop
 8001144:	08001155 	.word	0x08001155
 8001148:	08001163 	.word	0x08001163
 800114c:	080011a9 	.word	0x080011a9
 8001150:	080011e1 	.word	0x080011e1
		{
			case parser_state_eSTART_BYTE:
				if(c == '$')
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	2b24      	cmp	r3, #36	; 0x24
 8001158:	d14f      	bne.n	80011fa <parse_uart+0xe2>
				{
					state = parser_state_eID;
 800115a:	4b2c      	ldr	r3, [pc, #176]	; (800120c <parse_uart+0xf4>)
 800115c:	2201      	movs	r2, #1
 800115e:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001160:	e04b      	b.n	80011fa <parse_uart+0xe2>

			case parser_state_eID:
				if(c < data_id_eCOUNT)
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	2b11      	cmp	r3, #17
 8001166:	d84a      	bhi.n	80011fe <parse_uart+0xe6>
				{
					/* Store the id for later use */
					trame[0] = c;
 8001168:	79fa      	ldrb	r2, [r7, #7]
 800116a:	4b29      	ldr	r3, [pc, #164]	; (8001210 <parse_uart+0xf8>)
 800116c:	701a      	strb	r2, [r3, #0]
					/* Reset the checksum */
					checksum = c;
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	b29a      	uxth	r2, r3
 8001172:	4b28      	ldr	r3, [pc, #160]	; (8001214 <parse_uart+0xfc>)
 8001174:	801a      	strh	r2, [r3, #0]
					/* Get the data length according to the data format */
					nb_byte_to_buffer = (DATA_LOGGER_Get_Data(c)->format / 20);
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff fe5f 	bl	8000e3c <DATA_LOGGER_Get_Data>
 800117e:	4603      	mov	r3, r0
 8001180:	7a5b      	ldrb	r3, [r3, #9]
 8001182:	4a25      	ldr	r2, [pc, #148]	; (8001218 <parse_uart+0x100>)
 8001184:	fba2 2303 	umull	r2, r3, r2, r3
 8001188:	091b      	lsrs	r3, r3, #4
 800118a:	b2da      	uxtb	r2, r3
 800118c:	4b23      	ldr	r3, [pc, #140]	; (800121c <parse_uart+0x104>)
 800118e:	701a      	strb	r2, [r3, #0]
					if(nb_byte_to_buffer)
 8001190:	4b22      	ldr	r3, [pc, #136]	; (800121c <parse_uart+0x104>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <parse_uart+0x88>
					{
						state = parser_state_eDATA;
 8001198:	4b1c      	ldr	r3, [pc, #112]	; (800120c <parse_uart+0xf4>)
 800119a:	2202      	movs	r2, #2
 800119c:	701a      	strb	r2, [r3, #0]
					else
					{
						state = parser_state_eCHECKSUM;
					}
				}
				break;
 800119e:	e02e      	b.n	80011fe <parse_uart+0xe6>
						state = parser_state_eCHECKSUM;
 80011a0:	4b1a      	ldr	r3, [pc, #104]	; (800120c <parse_uart+0xf4>)
 80011a2:	2203      	movs	r2, #3
 80011a4:	701a      	strb	r2, [r3, #0]
				break;
 80011a6:	e02a      	b.n	80011fe <parse_uart+0xe6>
			case parser_state_eDATA:
				trame[1+buffer_counter++] = c;
 80011a8:	4b1d      	ldr	r3, [pc, #116]	; (8001220 <parse_uart+0x108>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	1c5a      	adds	r2, r3, #1
 80011ae:	b2d1      	uxtb	r1, r2
 80011b0:	4a1b      	ldr	r2, [pc, #108]	; (8001220 <parse_uart+0x108>)
 80011b2:	7011      	strb	r1, [r2, #0]
 80011b4:	3301      	adds	r3, #1
 80011b6:	79f9      	ldrb	r1, [r7, #7]
 80011b8:	4a15      	ldr	r2, [pc, #84]	; (8001210 <parse_uart+0xf8>)
 80011ba:	54d1      	strb	r1, [r2, r3]
				checksum += c;
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	b29a      	uxth	r2, r3
 80011c0:	4b14      	ldr	r3, [pc, #80]	; (8001214 <parse_uart+0xfc>)
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	4413      	add	r3, r2
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <parse_uart+0xfc>)
 80011ca:	801a      	strh	r2, [r3, #0]
				if(buffer_counter == nb_byte_to_buffer)
 80011cc:	4b14      	ldr	r3, [pc, #80]	; (8001220 <parse_uart+0x108>)
 80011ce:	781a      	ldrb	r2, [r3, #0]
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <parse_uart+0x104>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d114      	bne.n	8001202 <parse_uart+0xea>
				{
					state = parser_state_eCHECKSUM;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <parse_uart+0xf4>)
 80011da:	2203      	movs	r2, #3
 80011dc:	701a      	strb	r2, [r3, #0]
				}
				break;
 80011de:	e010      	b.n	8001202 <parse_uart+0xea>
			case parser_state_eCHECKSUM:
				if(checksum == c)
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <parse_uart+0xfc>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d102      	bne.n	80011f2 <parse_uart+0xda>
				{
					DATA_LOGGER_Reception(trame);
 80011ec:	4808      	ldr	r0, [pc, #32]	; (8001210 <parse_uart+0xf8>)
 80011ee:	f7ff fbd5 	bl	800099c <DATA_LOGGER_Reception>
				}
				state = parser_state_eSTART_BYTE;
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <parse_uart+0xf4>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	701a      	strb	r2, [r3, #0]
				break;
 80011f8:	e004      	b.n	8001204 <parse_uart+0xec>
				break;
 80011fa:	bf00      	nop
 80011fc:	e002      	b.n	8001204 <parse_uart+0xec>
				break;
 80011fe:	bf00      	nop
 8001200:	e000      	b.n	8001204 <parse_uart+0xec>
				break;
 8001202:	bf00      	nop


		}
	}

}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	2000033d 	.word	0x2000033d
 8001210:	20000340 	.word	0x20000340
 8001214:	20000354 	.word	0x20000354
 8001218:	cccccccd 	.word	0xcccccccd
 800121c:	20000356 	.word	0x20000356
 8001220:	20000357 	.word	0x20000357

08001224 <HIGH_LEVEL_Init>:
#define RADIO_TO_ANGLE_RATE_YAW	((float)0.7f)

static high_level_t high_level = { 0 };

void HIGH_LEVEL_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
	high_level.radio = RADIO_Get_Channel();
 8001228:	f000 fe96 	bl	8001f58 <RADIO_Get_Channel>
 800122c:	4603      	mov	r3, r0
 800122e:	4a0c      	ldr	r2, [pc, #48]	; (8001260 <HIGH_LEVEL_Init+0x3c>)
 8001230:	6053      	str	r3, [r2, #4]
	high_level.target_angle = CONTROLLER_Get_Angle_Target();
 8001232:	f7ff f999 	bl	8000568 <CONTROLLER_Get_Angle_Target>
 8001236:	4603      	mov	r3, r0
 8001238:	4a09      	ldr	r2, [pc, #36]	; (8001260 <HIGH_LEVEL_Init+0x3c>)
 800123a:	60d3      	str	r3, [r2, #12]
	high_level.target_angle_speed = CONTROLLER_Get_Angle_Speed_Target();
 800123c:	f7ff f99e 	bl	800057c <CONTROLLER_Get_Angle_Speed_Target>
 8001240:	4603      	mov	r3, r0
 8001242:	4a07      	ldr	r2, [pc, #28]	; (8001260 <HIGH_LEVEL_Init+0x3c>)
 8001244:	6113      	str	r3, [r2, #16]
	high_level.power = MOTOR_MIXER_Get_Power_Input_Ptr();
 8001246:	f000 f963 	bl	8001510 <MOTOR_MIXER_Get_Power_Input_Ptr>
 800124a:	4603      	mov	r3, r0
 800124c:	4a04      	ldr	r2, [pc, #16]	; (8001260 <HIGH_LEVEL_Init+0x3c>)
 800124e:	6093      	str	r3, [r2, #8]
	high_level.state = high_level_eGROUND;
 8001250:	4b03      	ldr	r3, [pc, #12]	; (8001260 <HIGH_LEVEL_Init+0x3c>)
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
	high_level.previous_state = high_level_eON;
 8001256:	4b02      	ldr	r3, [pc, #8]	; (8001260 <HIGH_LEVEL_Init+0x3c>)
 8001258:	2201      	movs	r2, #1
 800125a:	705a      	strb	r2, [r3, #1]
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000358 	.word	0x20000358

08001264 <HIGH_LEVEL_Process_Main>:

void HIGH_LEVEL_Process_Main(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
	/* entrance is used to know if we changed of state */
	bool_e entrance = high_level.state != high_level.previous_state;
 800126a:	4b50      	ldr	r3, [pc, #320]	; (80013ac <HIGH_LEVEL_Process_Main+0x148>)
 800126c:	781a      	ldrb	r2, [r3, #0]
 800126e:	4b4f      	ldr	r3, [pc, #316]	; (80013ac <HIGH_LEVEL_Process_Main+0x148>)
 8001270:	785b      	ldrb	r3, [r3, #1]
 8001272:	429a      	cmp	r2, r3
 8001274:	bf14      	ite	ne
 8001276:	2301      	movne	r3, #1
 8001278:	2300      	moveq	r3, #0
 800127a:	b2db      	uxtb	r3, r3
 800127c:	717b      	strb	r3, [r7, #5]
	high_level.previous_state = high_level.state;
 800127e:	4b4b      	ldr	r3, [pc, #300]	; (80013ac <HIGH_LEVEL_Process_Main+0x148>)
 8001280:	781a      	ldrb	r2, [r3, #0]
 8001282:	4b4a      	ldr	r3, [pc, #296]	; (80013ac <HIGH_LEVEL_Process_Main+0x148>)
 8001284:	705a      	strb	r2, [r3, #1]
	/* state machine */
	bool_e is_fly_allowed = 1; //MPU_Is_Ok();						/* We need the gyro to fly */
 8001286:	2301      	movs	r3, #1
 8001288:	713b      	strb	r3, [r7, #4]
	is_fly_allowed &= high_level.radio[4] > 1500;				/* And the "Arm" switch */
 800128a:	4b48      	ldr	r3, [pc, #288]	; (80013ac <HIGH_LEVEL_Process_Main+0x148>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	3308      	adds	r3, #8
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001296:	4293      	cmp	r3, r2
 8001298:	bf8c      	ite	hi
 800129a:	2301      	movhi	r3, #1
 800129c:	2300      	movls	r3, #0
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	b25a      	sxtb	r2, r3
 80012a2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80012a6:	4013      	ands	r3, r2
 80012a8:	b25b      	sxtb	r3, r3
 80012aa:	713b      	strb	r3, [r7, #4]
	is_fly_allowed &= (RADIO_Get_State() == radio_state_eOK);	/* We also need a working radio so it doesn't fly away */
 80012ac:	f000 fe48 	bl	8001f40 <RADIO_Get_State>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	bf0c      	ite	eq
 80012b6:	2301      	moveq	r3, #1
 80012b8:	2300      	movne	r3, #0
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	b25a      	sxtb	r2, r3
 80012be:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80012c2:	4013      	ands	r3, r2
 80012c4:	b25b      	sxtb	r3, r3
 80012c6:	713b      	strb	r3, [r7, #4]
	switch(high_level.state)
 80012c8:	4b38      	ldr	r3, [pc, #224]	; (80013ac <HIGH_LEVEL_Process_Main+0x148>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d002      	beq.n	80012d6 <HIGH_LEVEL_Process_Main+0x72>
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d021      	beq.n	8001318 <HIGH_LEVEL_Process_Main+0xb4>
			{
				high_level.state = high_level_eGROUND;
			}
			break;}
	}
}
 80012d4:	e066      	b.n	80013a4 <HIGH_LEVEL_Process_Main+0x140>
			if(entrance)
 80012d6:	797b      	ldrb	r3, [r7, #5]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d006      	beq.n	80012ea <HIGH_LEVEL_Process_Main+0x86>
				CONTROLLER_Set_State(controller_state_eDISABLED);
 80012dc:	2000      	movs	r0, #0
 80012de:	f7ff f931 	bl	8000544 <CONTROLLER_Set_State>
				MOTOR_Set(0);
 80012e2:	ed9f 0a33 	vldr	s0, [pc, #204]	; 80013b0 <HIGH_LEVEL_Process_Main+0x14c>
 80012e6:	f000 f965 	bl	80015b4 <MOTOR_Set>
			if(is_fly_allowed && high_level.radio[2] < 1050)
 80012ea:	793b      	ldrb	r3, [r7, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d056      	beq.n	800139e <HIGH_LEVEL_Process_Main+0x13a>
 80012f0:	4b2e      	ldr	r3, [pc, #184]	; (80013ac <HIGH_LEVEL_Process_Main+0x148>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	3304      	adds	r3, #4
 80012f6:	881b      	ldrh	r3, [r3, #0]
 80012f8:	f240 4219 	movw	r2, #1049	; 0x419
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d84e      	bhi.n	800139e <HIGH_LEVEL_Process_Main+0x13a>
				if(high_level.radio[5] < 1300)
 8001300:	4b2a      	ldr	r3, [pc, #168]	; (80013ac <HIGH_LEVEL_Process_Main+0x148>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	330a      	adds	r3, #10
 8001306:	881b      	ldrh	r3, [r3, #0]
 8001308:	f240 5213 	movw	r2, #1299	; 0x513
 800130c:	4293      	cmp	r3, r2
 800130e:	d846      	bhi.n	800139e <HIGH_LEVEL_Process_Main+0x13a>
					high_level.state = high_level_eON;
 8001310:	4b26      	ldr	r3, [pc, #152]	; (80013ac <HIGH_LEVEL_Process_Main+0x148>)
 8001312:	2201      	movs	r2, #1
 8001314:	701a      	strb	r2, [r3, #0]
			break;
 8001316:	e042      	b.n	800139e <HIGH_LEVEL_Process_Main+0x13a>
			uint16_t offset = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	80fb      	strh	r3, [r7, #6]
			if(high_level.radio[6] > 1500)
 800131c:	4b23      	ldr	r3, [pc, #140]	; (80013ac <HIGH_LEVEL_Process_Main+0x148>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	330c      	adds	r3, #12
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001328:	4293      	cmp	r3, r2
 800132a:	d901      	bls.n	8001330 <HIGH_LEVEL_Process_Main+0xcc>
				offset = 150;
 800132c:	2396      	movs	r3, #150	; 0x96
 800132e:	80fb      	strh	r3, [r7, #6]
			if(high_level.radio[6] < 1300)
 8001330:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <HIGH_LEVEL_Process_Main+0x148>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	330c      	adds	r3, #12
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	f240 5213 	movw	r2, #1299	; 0x513
 800133c:	4293      	cmp	r3, r2
 800133e:	d80a      	bhi.n	8001356 <HIGH_LEVEL_Process_Main+0xf2>
				MOTOR_Set(50 + offset);
 8001340:	88fb      	ldrh	r3, [r7, #6]
 8001342:	3332      	adds	r3, #50	; 0x32
 8001344:	ee07 3a90 	vmov	s15, r3
 8001348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800134c:	eeb0 0a67 	vmov.f32	s0, s15
 8001350:	f000 f930 	bl	80015b4 <MOTOR_Set>
 8001354:	e01c      	b.n	8001390 <HIGH_LEVEL_Process_Main+0x12c>
			else if(high_level.radio[6] < 1300)
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <HIGH_LEVEL_Process_Main+0x148>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	330c      	adds	r3, #12
 800135c:	881b      	ldrh	r3, [r3, #0]
 800135e:	f240 5213 	movw	r2, #1299	; 0x513
 8001362:	4293      	cmp	r3, r2
 8001364:	d80a      	bhi.n	800137c <HIGH_LEVEL_Process_Main+0x118>
				MOTOR_Set(100 + offset);
 8001366:	88fb      	ldrh	r3, [r7, #6]
 8001368:	3364      	adds	r3, #100	; 0x64
 800136a:	ee07 3a90 	vmov	s15, r3
 800136e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001372:	eeb0 0a67 	vmov.f32	s0, s15
 8001376:	f000 f91d 	bl	80015b4 <MOTOR_Set>
 800137a:	e009      	b.n	8001390 <HIGH_LEVEL_Process_Main+0x12c>
				MOTOR_Set(150 + offset);
 800137c:	88fb      	ldrh	r3, [r7, #6]
 800137e:	3396      	adds	r3, #150	; 0x96
 8001380:	ee07 3a90 	vmov	s15, r3
 8001384:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001388:	eeb0 0a67 	vmov.f32	s0, s15
 800138c:	f000 f912 	bl	80015b4 <MOTOR_Set>
			if(!is_fly_allowed)
 8001390:	793b      	ldrb	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d105      	bne.n	80013a2 <HIGH_LEVEL_Process_Main+0x13e>
				high_level.state = high_level_eGROUND;
 8001396:	4b05      	ldr	r3, [pc, #20]	; (80013ac <HIGH_LEVEL_Process_Main+0x148>)
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
			break;}
 800139c:	e001      	b.n	80013a2 <HIGH_LEVEL_Process_Main+0x13e>
			break;
 800139e:	bf00      	nop
 80013a0:	e000      	b.n	80013a4 <HIGH_LEVEL_Process_Main+0x140>
			break;}
 80013a2:	bf00      	nop
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000358 	.word	0x20000358
 80013b0:	00000000 	.word	0x00000000

080013b4 <Led_main_ms>:

/*
 * @brief called by main_ms, turn the led on or off to follow the sequence
 */
void Led_main_ms(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
	for (uint8_t led = 0; led < led_eCOUNT; led++)
 80013ba:	2300      	movs	r3, #0
 80013bc:	71fb      	strb	r3, [r7, #7]
 80013be:	e043      	b.n	8001448 <Led_main_ms+0x94>
	{
		if (current_sequence[led] != led_sequence_eSEQUENCE_DISABLED)
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	4a25      	ldr	r2, [pc, #148]	; (8001458 <Led_main_ms+0xa4>)
 80013c4:	5cd3      	ldrb	r3, [r2, r3]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d03b      	beq.n	8001442 <Led_main_ms+0x8e>
		{
			counter[led]++;
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	4a23      	ldr	r2, [pc, #140]	; (800145c <Led_main_ms+0xa8>)
 80013ce:	5cd2      	ldrb	r2, [r2, r3]
 80013d0:	3201      	adds	r2, #1
 80013d2:	b2d1      	uxtb	r1, r2
 80013d4:	4a21      	ldr	r2, [pc, #132]	; (800145c <Led_main_ms+0xa8>)
 80013d6:	54d1      	strb	r1, [r2, r3]
			if (counter[led] == LED_PERIOD)
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	4a20      	ldr	r2, [pc, #128]	; (800145c <Led_main_ms+0xa8>)
 80013dc:	5cd3      	ldrb	r3, [r2, r3]
 80013de:	2bc8      	cmp	r3, #200	; 0xc8
 80013e0:	d12f      	bne.n	8001442 <Led_main_ms+0x8e>
			{
				uint8_t current_bit = 1	<< ((SEQUENCE_LENGTH - 1) - sequence_index[led]);
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	4a1e      	ldr	r2, [pc, #120]	; (8001460 <Led_main_ms+0xac>)
 80013e6:	5cd3      	ldrb	r3, [r2, r3]
 80013e8:	f1c3 0307 	rsb	r3, r3, #7
 80013ec:	2201      	movs	r2, #1
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	71bb      	strb	r3, [r7, #6]
				if (current_sequence[led] & current_bit)
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	4a18      	ldr	r2, [pc, #96]	; (8001458 <Led_main_ms+0xa4>)
 80013f8:	5cd2      	ldrb	r2, [r2, r3]
 80013fa:	79bb      	ldrb	r3, [r7, #6]
 80013fc:	4013      	ands	r3, r2
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b00      	cmp	r3, #0
 8001402:	d005      	beq.n	8001410 <Led_main_ms+0x5c>
				{
					Led_Set(led, LED_HIGH);
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	2101      	movs	r1, #1
 8001408:	4618      	mov	r0, r3
 800140a:	f000 f82b 	bl	8001464 <Led_Set>
 800140e:	e004      	b.n	800141a <Led_main_ms+0x66>
				}
				else
				{
					Led_Set(led, LED_LOW);
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	2100      	movs	r1, #0
 8001414:	4618      	mov	r0, r3
 8001416:	f000 f825 	bl	8001464 <Led_Set>
				}
				sequence_index[led]++;
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	4a10      	ldr	r2, [pc, #64]	; (8001460 <Led_main_ms+0xac>)
 800141e:	5cd2      	ldrb	r2, [r2, r3]
 8001420:	3201      	adds	r2, #1
 8001422:	b2d1      	uxtb	r1, r2
 8001424:	4a0e      	ldr	r2, [pc, #56]	; (8001460 <Led_main_ms+0xac>)
 8001426:	54d1      	strb	r1, [r2, r3]
				counter[led] = 0;
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	4a0c      	ldr	r2, [pc, #48]	; (800145c <Led_main_ms+0xa8>)
 800142c:	2100      	movs	r1, #0
 800142e:	54d1      	strb	r1, [r2, r3]
				if (sequence_index[led] == 8)
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	4a0b      	ldr	r2, [pc, #44]	; (8001460 <Led_main_ms+0xac>)
 8001434:	5cd3      	ldrb	r3, [r2, r3]
 8001436:	2b08      	cmp	r3, #8
 8001438:	d103      	bne.n	8001442 <Led_main_ms+0x8e>
				{
					sequence_index[led] = 0;
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	4a08      	ldr	r2, [pc, #32]	; (8001460 <Led_main_ms+0xac>)
 800143e:	2100      	movs	r1, #0
 8001440:	54d1      	strb	r1, [r2, r3]
	for (uint8_t led = 0; led < led_eCOUNT; led++)
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	3301      	adds	r3, #1
 8001446:	71fb      	strb	r3, [r7, #7]
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d9b8      	bls.n	80013c0 <Led_main_ms+0xc>
				}
			}
		}
	}
}
 800144e:	bf00      	nop
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	2000036c 	.word	0x2000036c
 800145c:	20000374 	.word	0x20000374
 8001460:	20000370 	.word	0x20000370

08001464 <Led_Set>:
/*
 * @brief Set the state of the led
 * @param state State of the led to set
 */
void Led_Set(led_t led, LED_state_e state)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	460a      	mov	r2, r1
 800146e:	71fb      	strb	r3, [r7, #7]
 8001470:	4613      	mov	r3, r2
 8001472:	71bb      	strb	r3, [r7, #6]
	switch (led)
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d002      	beq.n	8001480 <Led_Set+0x1c>
 800147a:	2b01      	cmp	r3, #1
 800147c:	d008      	beq.n	8001490 <Led_Set+0x2c>
			break;
		case led_eSTATE2:
			GPIO_Write_Pin(LED_STATE2_GPIO_Port, LED_STATE2_Pin, (GPIO_state_e) state);
			break;
		default:
			break;
 800147e:	e00f      	b.n	80014a0 <Led_Set+0x3c>
			GPIO_Write_Pin(LED_STATE_GPIO_Port, LED_STATE_Pin, (GPIO_state_e) state);
 8001480:	79bb      	ldrb	r3, [r7, #6]
 8001482:	461a      	mov	r2, r3
 8001484:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001488:	4807      	ldr	r0, [pc, #28]	; (80014a8 <Led_Set+0x44>)
 800148a:	f000 f8f9 	bl	8001680 <GPIO_Write_Pin>
			break;
 800148e:	e007      	b.n	80014a0 <Led_Set+0x3c>
			GPIO_Write_Pin(LED_STATE2_GPIO_Port, LED_STATE2_Pin, (GPIO_state_e) state);
 8001490:	79bb      	ldrb	r3, [r7, #6]
 8001492:	461a      	mov	r2, r3
 8001494:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001498:	4803      	ldr	r0, [pc, #12]	; (80014a8 <Led_Set+0x44>)
 800149a:	f000 f8f1 	bl	8001680 <GPIO_Write_Pin>
			break;
 800149e:	bf00      	nop
	}
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40020800 	.word	0x40020800

080014ac <Led_Set_Sequence>:
/*
 * @brief Set the current led sequence
 * @param sequence The new sequence
 */
void Led_Set_Sequence(led_t led, led_sequence_e sequence)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	460a      	mov	r2, r1
 80014b6:	71fb      	strb	r3, [r7, #7]
 80014b8:	4613      	mov	r3, r2
 80014ba:	71bb      	strb	r3, [r7, #6]
	if(current_sequence[led] == sequence)
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	4a0c      	ldr	r2, [pc, #48]	; (80014f0 <Led_Set_Sequence+0x44>)
 80014c0:	5cd3      	ldrb	r3, [r2, r3]
 80014c2:	79ba      	ldrb	r2, [r7, #6]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d00c      	beq.n	80014e2 <Led_Set_Sequence+0x36>
	{
		return;
	}
	/* Change the current led sequence */
	current_sequence[led] = sequence;
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	4909      	ldr	r1, [pc, #36]	; (80014f0 <Led_Set_Sequence+0x44>)
 80014cc:	79ba      	ldrb	r2, [r7, #6]
 80014ce:	54ca      	strb	r2, [r1, r3]
	/* Reset counters to start from the beginning of the sequence */
	counter[led] = 0;
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	4a08      	ldr	r2, [pc, #32]	; (80014f4 <Led_Set_Sequence+0x48>)
 80014d4:	2100      	movs	r1, #0
 80014d6:	54d1      	strb	r1, [r2, r3]
	sequence_index[led] = 0;
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	4a07      	ldr	r2, [pc, #28]	; (80014f8 <Led_Set_Sequence+0x4c>)
 80014dc:	2100      	movs	r1, #0
 80014de:	54d1      	strb	r1, [r2, r3]
 80014e0:	e000      	b.n	80014e4 <Led_Set_Sequence+0x38>
		return;
 80014e2:	bf00      	nop
}
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	2000036c 	.word	0x2000036c
 80014f4:	20000374 	.word	0x20000374
 80014f8:	20000370 	.word	0x20000370

080014fc <MOTOR_MIXER_Get_Angle_Input_Ptr>:
	motor_mixer.output[motor_eBACK_LEFT] = 		motor_mixer.input_power ; //+ motor_mixer.input_angle[axe_eROLL] + motor_mixer.input_angle[axe_ePITCH] + motor_mixer.input_angle[axe_eYAW];

//	MOTOR_Set(motor_mixer.output);
}
float * MOTOR_MIXER_Get_Angle_Input_Ptr(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
	return motor_mixer.input_angle;
 8001500:	4b02      	ldr	r3, [pc, #8]	; (800150c <MOTOR_MIXER_Get_Angle_Input_Ptr+0x10>)
}
 8001502:	4618      	mov	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	20000378 	.word	0x20000378

08001510 <MOTOR_MIXER_Get_Power_Input_Ptr>:
float * MOTOR_MIXER_Get_Power_Input_Ptr(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
	return &motor_mixer.input_power;
 8001514:	4b02      	ldr	r3, [pc, #8]	; (8001520 <MOTOR_MIXER_Get_Power_Input_Ptr+0x10>)
}
 8001516:	4618      	mov	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	20000384 	.word	0x20000384

08001524 <MOTOR_Init>:
static bool_e flag_stop = FALSE;



void MOTOR_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
	 TIMER_Start_All_Channels(TIMER_MOTOR);
 8001528:	2000      	movs	r0, #0
 800152a:	f000 f8bb 	bl	80016a4 <TIMER_Start_All_Channels>
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <MOTOR_Process>:

void MOTOR_Process(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
	if(flag_stop)
 8001538:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <MOTOR_Process+0x70>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d009      	beq.n	8001554 <MOTOR_Process+0x20>
	{
		/* Clear flag */
		flag_stop = FALSE;
 8001540:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <MOTOR_Process+0x70>)
 8001542:	2200      	movs	r2, #0
 8001544:	701a      	strb	r2, [r3, #0]
		/* Stop pwm on every channel */
		TIMER_Stop_All_Channels(TIMER_MOTOR);
 8001546:	2000      	movs	r0, #0
 8001548:	f000 f8d8 	bl	80016fc <TIMER_Stop_All_Channels>
		motor.is_enabled = FALSE;
 800154c:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <MOTOR_Process+0x74>)
 800154e:	2200      	movs	r2, #0
 8001550:	701a      	strb	r2, [r3, #0]
 8001552:	e01c      	b.n	800158e <MOTOR_Process+0x5a>
	}
	else if(flag_start)
 8001554:	4b15      	ldr	r3, [pc, #84]	; (80015ac <MOTOR_Process+0x78>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d018      	beq.n	800158e <MOTOR_Process+0x5a>
	{
		/* Clear flag */
		flag_start = FALSE;
 800155c:	4b13      	ldr	r3, [pc, #76]	; (80015ac <MOTOR_Process+0x78>)
 800155e:	2200      	movs	r2, #0
 8001560:	701a      	strb	r2, [r3, #0]
		/* Reset target to 0 */
		motor.output[0] = 1000;
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <MOTOR_Process+0x74>)
 8001564:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001568:	805a      	strh	r2, [r3, #2]
		motor.output[1] = 1000;
 800156a:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <MOTOR_Process+0x74>)
 800156c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001570:	809a      	strh	r2, [r3, #4]
		motor.output[2] = 1000;
 8001572:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <MOTOR_Process+0x74>)
 8001574:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001578:	80da      	strh	r2, [r3, #6]
		motor.output[3] = 1000;
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <MOTOR_Process+0x74>)
 800157c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001580:	811a      	strh	r2, [r3, #8]
		/* Start the pwm */
		TIMER_Start_All_Channels(TIMER_MOTOR);
 8001582:	2000      	movs	r0, #0
 8001584:	f000 f88e 	bl	80016a4 <TIMER_Start_All_Channels>
		motor.is_enabled = TRUE;
 8001588:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <MOTOR_Process+0x74>)
 800158a:	2201      	movs	r2, #1
 800158c:	701a      	strb	r2, [r3, #0]
	}
	if(motor.is_enabled)
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <MOTOR_Process+0x74>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <MOTOR_Process+0x6a>
	{
		TIMER_Set_All_CCR(TIMER_MOTOR, motor.output);
 8001596:	4906      	ldr	r1, [pc, #24]	; (80015b0 <MOTOR_Process+0x7c>)
 8001598:	2000      	movs	r0, #0
 800159a:	f000 f8db 	bl	8001754 <TIMER_Set_All_CCR>
	}
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	200003a2 	.word	0x200003a2
 80015a8:	20000398 	.word	0x20000398
 80015ac:	20000099 	.word	0x20000099
 80015b0:	2000039a 	.word	0x2000039a

080015b4 <MOTOR_Set>:
/*
 * @brief update motor target values
 * @param array of new float values
 */
void MOTOR_Set(float target)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	ed87 0a01 	vstr	s0, [r7, #4]
	target = (uint16_t)MAX(target, 0);
 80015be:	edd7 7a01 	vldr	s15, [r7, #4]
 80015c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ca:	dd0b      	ble.n	80015e4 <MOTOR_Set+0x30>
 80015cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80015d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015d4:	ee17 3a90 	vmov	r3, s15
 80015d8:	b29b      	uxth	r3, r3
 80015da:	ee07 3a90 	vmov	s15, r3
 80015de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015e2:	e001      	b.n	80015e8 <MOTOR_Set+0x34>
 80015e4:	eddf 7a21 	vldr	s15, [pc, #132]	; 800166c <MOTOR_Set+0xb8>
 80015e8:	edc7 7a01 	vstr	s15, [r7, #4]

	target = (uint16_t)MIN(target, MOTOR_SIGNAL_MAX);
 80015ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80015f0:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001670 <MOTOR_Set+0xbc>
 80015f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015fc:	dd02      	ble.n	8001604 <MOTOR_Set+0x50>
 80015fe:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8001670 <MOTOR_Set+0xbc>
 8001602:	e00a      	b.n	800161a <MOTOR_Set+0x66>
 8001604:	edd7 7a01 	vldr	s15, [r7, #4]
 8001608:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800160c:	ee17 3a90 	vmov	r3, s15
 8001610:	b29b      	uxth	r3, r3
 8001612:	ee07 3a90 	vmov	s15, r3
 8001616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800161a:	edc7 7a01 	vstr	s15, [r7, #4]

	target = sqrtf(1000*target);
 800161e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001622:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001674 <MOTOR_Set+0xc0>
 8001626:	ee67 7a87 	vmul.f32	s15, s15, s14
 800162a:	eeb0 0a67 	vmov.f32	s0, s15
 800162e:	f007 f903 	bl	8008838 <sqrtf>
 8001632:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t target_int = target + 999;
 8001636:	edd7 7a01 	vldr	s15, [r7, #4]
 800163a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001678 <MOTOR_Set+0xc4>
 800163e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001642:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001646:	ee17 3a90 	vmov	r3, s15
 800164a:	81fb      	strh	r3, [r7, #14]

	motor.output[0] = target_int;
 800164c:	4a0b      	ldr	r2, [pc, #44]	; (800167c <MOTOR_Set+0xc8>)
 800164e:	89fb      	ldrh	r3, [r7, #14]
 8001650:	8053      	strh	r3, [r2, #2]
	motor.output[1] = target_int;
 8001652:	4a0a      	ldr	r2, [pc, #40]	; (800167c <MOTOR_Set+0xc8>)
 8001654:	89fb      	ldrh	r3, [r7, #14]
 8001656:	8093      	strh	r3, [r2, #4]
	motor.output[2] = target_int;
 8001658:	4a08      	ldr	r2, [pc, #32]	; (800167c <MOTOR_Set+0xc8>)
 800165a:	89fb      	ldrh	r3, [r7, #14]
 800165c:	80d3      	strh	r3, [r2, #6]
	motor.output[3] = target_int;
 800165e:	4a07      	ldr	r2, [pc, #28]	; (800167c <MOTOR_Set+0xc8>)
 8001660:	89fb      	ldrh	r3, [r7, #14]
 8001662:	8113      	strh	r3, [r2, #8]
}
 8001664:	bf00      	nop
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	00000000 	.word	0x00000000
 8001670:	442f0000 	.word	0x442f0000
 8001674:	447a0000 	.word	0x447a0000
 8001678:	4479c000 	.word	0x4479c000
 800167c:	20000398 	.word	0x20000398

08001680 <GPIO_Write_Pin>:
 * @param GPIOx pointer to an hal gpio handler structure
 * @param GPIO_Pin Number of the pin
 * @param state State to write to the pin
 */
void GPIO_Write_Pin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_state_e state)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	807b      	strh	r3, [r7, #2]
 800168c:	4613      	mov	r3, r2
 800168e:	707b      	strb	r3, [r7, #1]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, state);
 8001690:	787a      	ldrb	r2, [r7, #1]
 8001692:	887b      	ldrh	r3, [r7, #2]
 8001694:	4619      	mov	r1, r3
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f002 fdf4 	bl	8004284 <HAL_GPIO_WritePin>
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <TIMER_Start_All_Channels>:
/*
 * @brief Start all channels of a timer
 * @param timer_id id of the timer
 */
void TIMER_Start_All_Channels(timer_e timer_id)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	71fb      	strb	r3, [r7, #7]
	HAL_TIM_PWM_Start(timer[timer_id].htim, TIM_CHANNEL_1);
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	4a11      	ldr	r2, [pc, #68]	; (80016f8 <TIMER_Start_All_Channels+0x54>)
 80016b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b6:	2100      	movs	r1, #0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f005 f8f9 	bl	80068b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer[timer_id].htim, TIM_CHANNEL_2);
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	4a0d      	ldr	r2, [pc, #52]	; (80016f8 <TIMER_Start_All_Channels+0x54>)
 80016c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c6:	2104      	movs	r1, #4
 80016c8:	4618      	mov	r0, r3
 80016ca:	f005 f8f1 	bl	80068b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer[timer_id].htim, TIM_CHANNEL_3);
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	4a09      	ldr	r2, [pc, #36]	; (80016f8 <TIMER_Start_All_Channels+0x54>)
 80016d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d6:	2108      	movs	r1, #8
 80016d8:	4618      	mov	r0, r3
 80016da:	f005 f8e9 	bl	80068b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer[timer_id].htim, TIM_CHANNEL_4);
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	4a05      	ldr	r2, [pc, #20]	; (80016f8 <TIMER_Start_All_Channels+0x54>)
 80016e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e6:	210c      	movs	r1, #12
 80016e8:	4618      	mov	r0, r3
 80016ea:	f005 f8e1 	bl	80068b0 <HAL_TIM_PWM_Start>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	2000009c 	.word	0x2000009c

080016fc <TIMER_Stop_All_Channels>:
/*
 * @brief Stop all channels of a timer
 * @param timer_id id of the timer
 */
void TIMER_Stop_All_Channels(timer_e timer_id)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	71fb      	strb	r3, [r7, #7]
	HAL_TIM_PWM_Stop(timer[timer_id].htim, TIM_CHANNEL_1);
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	4a11      	ldr	r2, [pc, #68]	; (8001750 <TIMER_Stop_All_Channels+0x54>)
 800170a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800170e:	2100      	movs	r1, #0
 8001710:	4618      	mov	r0, r3
 8001712:	f005 f995 	bl	8006a40 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(timer[timer_id].htim, TIM_CHANNEL_2);
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	4a0d      	ldr	r2, [pc, #52]	; (8001750 <TIMER_Stop_All_Channels+0x54>)
 800171a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800171e:	2104      	movs	r1, #4
 8001720:	4618      	mov	r0, r3
 8001722:	f005 f98d 	bl	8006a40 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(timer[timer_id].htim, TIM_CHANNEL_3);
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	4a09      	ldr	r2, [pc, #36]	; (8001750 <TIMER_Stop_All_Channels+0x54>)
 800172a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172e:	2108      	movs	r1, #8
 8001730:	4618      	mov	r0, r3
 8001732:	f005 f985 	bl	8006a40 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(timer[timer_id].htim, TIM_CHANNEL_4);
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	4a05      	ldr	r2, [pc, #20]	; (8001750 <TIMER_Stop_All_Channels+0x54>)
 800173a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173e:	210c      	movs	r1, #12
 8001740:	4618      	mov	r0, r3
 8001742:	f005 f97d 	bl	8006a40 <HAL_TIM_PWM_Stop>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	2000009c 	.word	0x2000009c

08001754 <TIMER_Set_All_CCR>:
 * @brief Set new capture compare values
 * @param tiemr_id The timer to use
 * @param values The new values
 */
void TIMER_Set_All_CCR(timer_e timer_id, uint16_t * values)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	6039      	str	r1, [r7, #0]
 800175e:	71fb      	strb	r3, [r7, #7]
	timer[timer_id].htim->Instance->CCR1 = values[0];
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	8819      	ldrh	r1, [r3, #0]
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	4a15      	ldr	r2, [pc, #84]	; (80017bc <TIMER_Set_All_CCR+0x68>)
 8001768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	460a      	mov	r2, r1
 8001770:	635a      	str	r2, [r3, #52]	; 0x34
	timer[timer_id].htim->Instance->CCR2 = values[1];
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	3302      	adds	r3, #2
 8001776:	8819      	ldrh	r1, [r3, #0]
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	4a10      	ldr	r2, [pc, #64]	; (80017bc <TIMER_Set_All_CCR+0x68>)
 800177c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	460a      	mov	r2, r1
 8001784:	639a      	str	r2, [r3, #56]	; 0x38
	timer[timer_id].htim->Instance->CCR3 = values[2];
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	3304      	adds	r3, #4
 800178a:	8819      	ldrh	r1, [r3, #0]
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	4a0b      	ldr	r2, [pc, #44]	; (80017bc <TIMER_Set_All_CCR+0x68>)
 8001790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	460a      	mov	r2, r1
 8001798:	63da      	str	r2, [r3, #60]	; 0x3c
	timer[timer_id].htim->Instance->CCR4 = values[3];
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	3306      	adds	r3, #6
 800179e:	8819      	ldrh	r1, [r3, #0]
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	4a06      	ldr	r2, [pc, #24]	; (80017bc <TIMER_Set_All_CCR+0x68>)
 80017a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	460a      	mov	r2, r1
 80017ac:	641a      	str	r2, [r3, #64]	; 0x40
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	2000009c 	.word	0x2000009c

080017c0 <UART_Idle_Line_Callback>:
/* -------------------------- Public callback functions -------------------------- */
/*
 * @brief Update the read index when the idle flag is raised
 */
void UART_Idle_Line_Callback(uart_e id)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
	if(__HAL_UART_GET_FLAG(uart[id].huart, UART_FLAG_IDLE))
 80017ca:	79fa      	ldrb	r2, [r7, #7]
 80017cc:	4922      	ldr	r1, [pc, #136]	; (8001858 <UART_Idle_Line_Callback+0x98>)
 80017ce:	4613      	mov	r3, r2
 80017d0:	01db      	lsls	r3, r3, #7
 80017d2:	4413      	add	r3, r2
 80017d4:	011b      	lsls	r3, r3, #4
 80017d6:	440b      	add	r3, r1
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0310 	and.w	r3, r3, #16
 80017e2:	2b10      	cmp	r3, #16
 80017e4:	d132      	bne.n	800184c <UART_Idle_Line_Callback+0x8c>
	{
		uart[id].index_write_rx = LEN_BUFFER - uart[id].huart->hdmarx->Instance->NDTR ;
 80017e6:	79fa      	ldrb	r2, [r7, #7]
 80017e8:	491b      	ldr	r1, [pc, #108]	; (8001858 <UART_Idle_Line_Callback+0x98>)
 80017ea:	4613      	mov	r3, r2
 80017ec:	01db      	lsls	r3, r3, #7
 80017ee:	4413      	add	r3, r2
 80017f0:	011b      	lsls	r3, r3, #4
 80017f2:	440b      	add	r3, r1
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	79fa      	ldrb	r2, [r7, #7]
 8001800:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001804:	b298      	uxth	r0, r3
 8001806:	4914      	ldr	r1, [pc, #80]	; (8001858 <UART_Idle_Line_Callback+0x98>)
 8001808:	4613      	mov	r3, r2
 800180a:	01db      	lsls	r3, r3, #7
 800180c:	4413      	add	r3, r2
 800180e:	011b      	lsls	r3, r3, #4
 8001810:	440b      	add	r3, r1
 8001812:	f603 030a 	addw	r3, r3, #2058	; 0x80a
 8001816:	4602      	mov	r2, r0
 8001818:	801a      	strh	r2, [r3, #0]
	  __HAL_UART_CLEAR_IDLEFLAG(uart[id].huart);
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	79fa      	ldrb	r2, [r7, #7]
 8001820:	490d      	ldr	r1, [pc, #52]	; (8001858 <UART_Idle_Line_Callback+0x98>)
 8001822:	4613      	mov	r3, r2
 8001824:	01db      	lsls	r3, r3, #7
 8001826:	4413      	add	r3, r2
 8001828:	011b      	lsls	r3, r3, #4
 800182a:	440b      	add	r3, r1
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	79fa      	ldrb	r2, [r7, #7]
 8001836:	4908      	ldr	r1, [pc, #32]	; (8001858 <UART_Idle_Line_Callback+0x98>)
 8001838:	4613      	mov	r3, r2
 800183a:	01db      	lsls	r3, r3, #7
 800183c:	4413      	add	r3, r2
 800183e:	011b      	lsls	r3, r3, #4
 8001840:	440b      	add	r3, r1
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	68fb      	ldr	r3, [r7, #12]
	}
}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	200003a4 	.word	0x200003a4

0800185c <UART_Transfer_Complete_Callback>:

/*
 * @brief Re start the dma transfer if there is data to send or reset the transmission state to idle
 */
void UART_Transfer_Complete_Callback(uart_e id)
{
 800185c:	b590      	push	{r4, r7, lr}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
	if(uart[id].index_write_tx != uart[id].index_read_tx)
 8001866:	79fa      	ldrb	r2, [r7, #7]
 8001868:	494d      	ldr	r1, [pc, #308]	; (80019a0 <UART_Transfer_Complete_Callback+0x144>)
 800186a:	4613      	mov	r3, r2
 800186c:	01db      	lsls	r3, r3, #7
 800186e:	4413      	add	r3, r2
 8001870:	011b      	lsls	r3, r3, #4
 8001872:	440b      	add	r3, r1
 8001874:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001878:	8819      	ldrh	r1, [r3, #0]
 800187a:	79fa      	ldrb	r2, [r7, #7]
 800187c:	4848      	ldr	r0, [pc, #288]	; (80019a0 <UART_Transfer_Complete_Callback+0x144>)
 800187e:	4613      	mov	r3, r2
 8001880:	01db      	lsls	r3, r3, #7
 8001882:	4413      	add	r3, r2
 8001884:	011b      	lsls	r3, r3, #4
 8001886:	4403      	add	r3, r0
 8001888:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800188c:	881b      	ldrh	r3, [r3, #0]
 800188e:	4299      	cmp	r1, r3
 8001890:	d077      	beq.n	8001982 <UART_Transfer_Complete_Callback+0x126>
	{
		uint16_t nb_bytes_to_read = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	81fb      	strh	r3, [r7, #14]
		if(uart[id].index_write_tx > uart[id].index_read_tx)
 8001896:	79fa      	ldrb	r2, [r7, #7]
 8001898:	4941      	ldr	r1, [pc, #260]	; (80019a0 <UART_Transfer_Complete_Callback+0x144>)
 800189a:	4613      	mov	r3, r2
 800189c:	01db      	lsls	r3, r3, #7
 800189e:	4413      	add	r3, r2
 80018a0:	011b      	lsls	r3, r3, #4
 80018a2:	440b      	add	r3, r1
 80018a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80018a8:	8819      	ldrh	r1, [r3, #0]
 80018aa:	79fa      	ldrb	r2, [r7, #7]
 80018ac:	483c      	ldr	r0, [pc, #240]	; (80019a0 <UART_Transfer_Complete_Callback+0x144>)
 80018ae:	4613      	mov	r3, r2
 80018b0:	01db      	lsls	r3, r3, #7
 80018b2:	4413      	add	r3, r2
 80018b4:	011b      	lsls	r3, r3, #4
 80018b6:	4403      	add	r3, r0
 80018b8:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80018bc:	881b      	ldrh	r3, [r3, #0]
 80018be:	4299      	cmp	r1, r3
 80018c0:	d916      	bls.n	80018f0 <UART_Transfer_Complete_Callback+0x94>
		{
			nb_bytes_to_read = uart[id].index_write_tx - uart[id].index_read_tx;
 80018c2:	79fa      	ldrb	r2, [r7, #7]
 80018c4:	4936      	ldr	r1, [pc, #216]	; (80019a0 <UART_Transfer_Complete_Callback+0x144>)
 80018c6:	4613      	mov	r3, r2
 80018c8:	01db      	lsls	r3, r3, #7
 80018ca:	4413      	add	r3, r2
 80018cc:	011b      	lsls	r3, r3, #4
 80018ce:	440b      	add	r3, r1
 80018d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80018d4:	8819      	ldrh	r1, [r3, #0]
 80018d6:	79fa      	ldrb	r2, [r7, #7]
 80018d8:	4831      	ldr	r0, [pc, #196]	; (80019a0 <UART_Transfer_Complete_Callback+0x144>)
 80018da:	4613      	mov	r3, r2
 80018dc:	01db      	lsls	r3, r3, #7
 80018de:	4413      	add	r3, r2
 80018e0:	011b      	lsls	r3, r3, #4
 80018e2:	4403      	add	r3, r0
 80018e4:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80018e8:	881b      	ldrh	r3, [r3, #0]
 80018ea:	1acb      	subs	r3, r1, r3
 80018ec:	81fb      	strh	r3, [r7, #14]
 80018ee:	e00c      	b.n	800190a <UART_Transfer_Complete_Callback+0xae>
		}
		else
		{
			nb_bytes_to_read = LEN_BUFFER - uart[id].index_read_tx;
 80018f0:	79fa      	ldrb	r2, [r7, #7]
 80018f2:	492b      	ldr	r1, [pc, #172]	; (80019a0 <UART_Transfer_Complete_Callback+0x144>)
 80018f4:	4613      	mov	r3, r2
 80018f6:	01db      	lsls	r3, r3, #7
 80018f8:	4413      	add	r3, r2
 80018fa:	011b      	lsls	r3, r3, #4
 80018fc:	440b      	add	r3, r1
 80018fe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8001902:	881b      	ldrh	r3, [r3, #0]
 8001904:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001908:	81fb      	strh	r3, [r7, #14]
		}
		HAL_UART_Transmit_DMA(uart[id].huart, &uart[id].buffer_tx[uart[id].index_read_tx], nb_bytes_to_read);
 800190a:	79fa      	ldrb	r2, [r7, #7]
 800190c:	4924      	ldr	r1, [pc, #144]	; (80019a0 <UART_Transfer_Complete_Callback+0x144>)
 800190e:	4613      	mov	r3, r2
 8001910:	01db      	lsls	r3, r3, #7
 8001912:	4413      	add	r3, r2
 8001914:	011b      	lsls	r3, r3, #4
 8001916:	440b      	add	r3, r1
 8001918:	6818      	ldr	r0, [r3, #0]
 800191a:	79fa      	ldrb	r2, [r7, #7]
 800191c:	79f9      	ldrb	r1, [r7, #7]
 800191e:	4c20      	ldr	r4, [pc, #128]	; (80019a0 <UART_Transfer_Complete_Callback+0x144>)
 8001920:	460b      	mov	r3, r1
 8001922:	01db      	lsls	r3, r3, #7
 8001924:	440b      	add	r3, r1
 8001926:	011b      	lsls	r3, r3, #4
 8001928:	4423      	add	r3, r4
 800192a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	4619      	mov	r1, r3
 8001932:	4613      	mov	r3, r2
 8001934:	01db      	lsls	r3, r3, #7
 8001936:	4413      	add	r3, r2
 8001938:	011b      	lsls	r3, r3, #4
 800193a:	440b      	add	r3, r1
 800193c:	4a18      	ldr	r2, [pc, #96]	; (80019a0 <UART_Transfer_Complete_Callback+0x144>)
 800193e:	4413      	add	r3, r2
 8001940:	3306      	adds	r3, #6
 8001942:	89fa      	ldrh	r2, [r7, #14]
 8001944:	4619      	mov	r1, r3
 8001946:	f005 fe4f 	bl	80075e8 <HAL_UART_Transmit_DMA>
		uart[id].index_read_tx = (uart[id].index_read_tx + nb_bytes_to_read) % LEN_BUFFER;
 800194a:	79fa      	ldrb	r2, [r7, #7]
 800194c:	4914      	ldr	r1, [pc, #80]	; (80019a0 <UART_Transfer_Complete_Callback+0x144>)
 800194e:	4613      	mov	r3, r2
 8001950:	01db      	lsls	r3, r3, #7
 8001952:	4413      	add	r3, r2
 8001954:	011b      	lsls	r3, r3, #4
 8001956:	440b      	add	r3, r1
 8001958:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800195c:	881a      	ldrh	r2, [r3, #0]
 800195e:	89fb      	ldrh	r3, [r7, #14]
 8001960:	4413      	add	r3, r2
 8001962:	b29b      	uxth	r3, r3
 8001964:	79fa      	ldrb	r2, [r7, #7]
 8001966:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800196a:	b298      	uxth	r0, r3
 800196c:	490c      	ldr	r1, [pc, #48]	; (80019a0 <UART_Transfer_Complete_Callback+0x144>)
 800196e:	4613      	mov	r3, r2
 8001970:	01db      	lsls	r3, r3, #7
 8001972:	4413      	add	r3, r2
 8001974:	011b      	lsls	r3, r3, #4
 8001976:	440b      	add	r3, r1
 8001978:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800197c:	4602      	mov	r2, r0
 800197e:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		uart[id].transmission_state = transmission_state_eIDLE;
	}
}
 8001980:	e009      	b.n	8001996 <UART_Transfer_Complete_Callback+0x13a>
		uart[id].transmission_state = transmission_state_eIDLE;
 8001982:	79fa      	ldrb	r2, [r7, #7]
 8001984:	4906      	ldr	r1, [pc, #24]	; (80019a0 <UART_Transfer_Complete_Callback+0x144>)
 8001986:	4613      	mov	r3, r2
 8001988:	01db      	lsls	r3, r3, #7
 800198a:	4413      	add	r3, r2
 800198c:	011b      	lsls	r3, r3, #4
 800198e:	440b      	add	r3, r1
 8001990:	3305      	adds	r3, #5
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
}
 8001996:	bf00      	nop
 8001998:	3714      	adds	r7, #20
 800199a:	46bd      	mov	sp, r7
 800199c:	bd90      	pop	{r4, r7, pc}
 800199e:	bf00      	nop
 80019a0:	200003a4 	.word	0x200003a4

080019a4 <UART_Availables>:
 * @brief Number of byte available in the RX buffer
 * @param id Id of the uart we are interested in
 * @return Number of bytes
 */
uint16_t UART_Availables(uart_e id)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	71fb      	strb	r3, [r7, #7]
	return get_nb_bytes_available(id);
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f000 f955 	bl	8001c60 <get_nb_bytes_available>
 80019b6:	4603      	mov	r3, r0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <UART_Get>:
 * 		  Does nothing if there are no characters available
 * @param id Id of the uart
 * @param c Buffer to write the character into
 */
void UART_Get(uart_e id, uint8_t * c)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	6039      	str	r1, [r7, #0]
 80019ca:	71fb      	strb	r3, [r7, #7]
	if(get_nb_bytes_available(id))
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 f946 	bl	8001c60 <get_nb_bytes_available>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d035      	beq.n	8001a46 <UART_Get+0x86>
	{
		*c = uart[id].buffer_rx[uart[id].index_read_rx];
 80019da:	79fa      	ldrb	r2, [r7, #7]
 80019dc:	79f9      	ldrb	r1, [r7, #7]
 80019de:	481c      	ldr	r0, [pc, #112]	; (8001a50 <UART_Get+0x90>)
 80019e0:	460b      	mov	r3, r1
 80019e2:	01db      	lsls	r3, r3, #7
 80019e4:	440b      	add	r3, r1
 80019e6:	011b      	lsls	r3, r3, #4
 80019e8:	4403      	add	r3, r0
 80019ea:	f603 030c 	addw	r3, r3, #2060	; 0x80c
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	4917      	ldr	r1, [pc, #92]	; (8001a50 <UART_Get+0x90>)
 80019f4:	4613      	mov	r3, r2
 80019f6:	01db      	lsls	r3, r3, #7
 80019f8:	4413      	add	r3, r2
 80019fa:	011b      	lsls	r3, r3, #4
 80019fc:	440b      	add	r3, r1
 80019fe:	4403      	add	r3, r0
 8001a00:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8001a04:	781a      	ldrb	r2, [r3, #0]
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	701a      	strb	r2, [r3, #0]
		uart[id].index_read_rx = (uart[id].index_read_rx + 1) % LEN_BUFFER;
 8001a0a:	79fa      	ldrb	r2, [r7, #7]
 8001a0c:	4910      	ldr	r1, [pc, #64]	; (8001a50 <UART_Get+0x90>)
 8001a0e:	4613      	mov	r3, r2
 8001a10:	01db      	lsls	r3, r3, #7
 8001a12:	4413      	add	r3, r2
 8001a14:	011b      	lsls	r3, r3, #4
 8001a16:	440b      	add	r3, r1
 8001a18:	f603 030c 	addw	r3, r3, #2060	; 0x80c
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	425a      	negs	r2, r3
 8001a22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a26:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001a2a:	bf58      	it	pl
 8001a2c:	4253      	negpl	r3, r2
 8001a2e:	79fa      	ldrb	r2, [r7, #7]
 8001a30:	b298      	uxth	r0, r3
 8001a32:	4907      	ldr	r1, [pc, #28]	; (8001a50 <UART_Get+0x90>)
 8001a34:	4613      	mov	r3, r2
 8001a36:	01db      	lsls	r3, r3, #7
 8001a38:	4413      	add	r3, r2
 8001a3a:	011b      	lsls	r3, r3, #4
 8001a3c:	440b      	add	r3, r1
 8001a3e:	f603 030c 	addw	r3, r3, #2060	; 0x80c
 8001a42:	4602      	mov	r2, r0
 8001a44:	801a      	strh	r2, [r3, #0]
	}
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	200003a4 	.word	0x200003a4

08001a54 <UART_Init>:

/*
 * @brief Initialize every uarts and start dma reception
 */
void UART_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
	/* Link  huarts to the right uarts structures */
	uart[uart_e1].huart = &huart1;
 8001a5a:	4b23      	ldr	r3, [pc, #140]	; (8001ae8 <UART_Init+0x94>)
 8001a5c:	4a23      	ldr	r2, [pc, #140]	; (8001aec <UART_Init+0x98>)
 8001a5e:	601a      	str	r2, [r3, #0]
	uart[uart_e3].huart = &huart3;
 8001a60:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <UART_Init+0x94>)
 8001a62:	4a23      	ldr	r2, [pc, #140]	; (8001af0 <UART_Init+0x9c>)
 8001a64:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
	uart[uart_e4].huart = &huart4;
 8001a68:	4b1f      	ldr	r3, [pc, #124]	; (8001ae8 <UART_Init+0x94>)
 8001a6a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8001a6e:	4a21      	ldr	r2, [pc, #132]	; (8001af4 <UART_Init+0xa0>)
 8001a70:	601a      	str	r2, [r3, #0]

	/* Initialization */
	for(uint8_t u = 0; u < uart_eCOUNT; u ++)
 8001a72:	2300      	movs	r3, #0
 8001a74:	71fb      	strb	r3, [r7, #7]
 8001a76:	e02f      	b.n	8001ad8 <UART_Init+0x84>
	{
		__HAL_UART_ENABLE_IT(uart[u].huart, UART_IT_IDLE);
 8001a78:	79fa      	ldrb	r2, [r7, #7]
 8001a7a:	491b      	ldr	r1, [pc, #108]	; (8001ae8 <UART_Init+0x94>)
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	01db      	lsls	r3, r3, #7
 8001a80:	4413      	add	r3, r2
 8001a82:	011b      	lsls	r3, r3, #4
 8001a84:	440b      	add	r3, r1
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68d9      	ldr	r1, [r3, #12]
 8001a8c:	79fa      	ldrb	r2, [r7, #7]
 8001a8e:	4816      	ldr	r0, [pc, #88]	; (8001ae8 <UART_Init+0x94>)
 8001a90:	4613      	mov	r3, r2
 8001a92:	01db      	lsls	r3, r3, #7
 8001a94:	4413      	add	r3, r2
 8001a96:	011b      	lsls	r3, r3, #4
 8001a98:	4403      	add	r3, r0
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f041 0210 	orr.w	r2, r1, #16
 8001aa2:	60da      	str	r2, [r3, #12]
		HAL_UART_Receive_DMA(uart[u].huart, uart[u].buffer_rx, LEN_BUFFER);
 8001aa4:	79fa      	ldrb	r2, [r7, #7]
 8001aa6:	4910      	ldr	r1, [pc, #64]	; (8001ae8 <UART_Init+0x94>)
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	01db      	lsls	r3, r3, #7
 8001aac:	4413      	add	r3, r2
 8001aae:	011b      	lsls	r3, r3, #4
 8001ab0:	440b      	add	r3, r1
 8001ab2:	6818      	ldr	r0, [r3, #0]
 8001ab4:	79fa      	ldrb	r2, [r7, #7]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	01db      	lsls	r3, r3, #7
 8001aba:	4413      	add	r3, r2
 8001abc:	011b      	lsls	r3, r3, #4
 8001abe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8001ac2:	4a09      	ldr	r2, [pc, #36]	; (8001ae8 <UART_Init+0x94>)
 8001ac4:	4413      	add	r3, r2
 8001ac6:	3302      	adds	r3, #2
 8001ac8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001acc:	4619      	mov	r1, r3
 8001ace:	f005 fe09 	bl	80076e4 <HAL_UART_Receive_DMA>
	for(uint8_t u = 0; u < uart_eCOUNT; u ++)
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	71fb      	strb	r3, [r7, #7]
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d9cc      	bls.n	8001a78 <UART_Init+0x24>
	}
}
 8001ade:	bf00      	nop
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	200003a4 	.word	0x200003a4
 8001aec:	200023e0 	.word	0x200023e0
 8001af0:	2000227c 	.word	0x2000227c
 8001af4:	20002424 	.word	0x20002424

08001af8 <UART_Transmit>:
 * @param id Id of the uart to use
 * @param data Array with the data
 * @param len Length of the data array
 */
void UART_Transmit(uart_e id, uint8_t * data, uint16_t len)
{
 8001af8:	b590      	push	{r4, r7, lr}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	6039      	str	r1, [r7, #0]
 8001b02:	71fb      	strb	r3, [r7, #7]
 8001b04:	4613      	mov	r3, r2
 8001b06:	80bb      	strh	r3, [r7, #4]
	for(uint16_t c = 0; c < len; c ++)
 8001b08:	2300      	movs	r3, #0
 8001b0a:	81fb      	strh	r3, [r7, #14]
 8001b0c:	e020      	b.n	8001b50 <UART_Transmit+0x58>
	{
		uart[id].buffer_tx[(uart[id].index_write_tx + c) % LEN_BUFFER] = data[c];
 8001b0e:	89fb      	ldrh	r3, [r7, #14]
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	18d0      	adds	r0, r2, r3
 8001b14:	79fa      	ldrb	r2, [r7, #7]
 8001b16:	79f9      	ldrb	r1, [r7, #7]
 8001b18:	4c50      	ldr	r4, [pc, #320]	; (8001c5c <UART_Transmit+0x164>)
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	01db      	lsls	r3, r3, #7
 8001b1e:	440b      	add	r3, r1
 8001b20:	011b      	lsls	r3, r3, #4
 8001b22:	4423      	add	r3, r4
 8001b24:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001b28:	8819      	ldrh	r1, [r3, #0]
 8001b2a:	89fb      	ldrh	r3, [r7, #14]
 8001b2c:	440b      	add	r3, r1
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	f3c3 0109 	ubfx	r1, r3, #0, #10
 8001b34:	7804      	ldrb	r4, [r0, #0]
 8001b36:	4849      	ldr	r0, [pc, #292]	; (8001c5c <UART_Transmit+0x164>)
 8001b38:	4613      	mov	r3, r2
 8001b3a:	01db      	lsls	r3, r3, #7
 8001b3c:	4413      	add	r3, r2
 8001b3e:	011b      	lsls	r3, r3, #4
 8001b40:	4403      	add	r3, r0
 8001b42:	440b      	add	r3, r1
 8001b44:	3306      	adds	r3, #6
 8001b46:	4622      	mov	r2, r4
 8001b48:	701a      	strb	r2, [r3, #0]
	for(uint16_t c = 0; c < len; c ++)
 8001b4a:	89fb      	ldrh	r3, [r7, #14]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	81fb      	strh	r3, [r7, #14]
 8001b50:	89fa      	ldrh	r2, [r7, #14]
 8001b52:	88bb      	ldrh	r3, [r7, #4]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d3da      	bcc.n	8001b0e <UART_Transmit+0x16>
	}
	uart[id].index_write_tx = (uart[id].index_write_tx + len) % LEN_BUFFER;
 8001b58:	79fa      	ldrb	r2, [r7, #7]
 8001b5a:	4940      	ldr	r1, [pc, #256]	; (8001c5c <UART_Transmit+0x164>)
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	01db      	lsls	r3, r3, #7
 8001b60:	4413      	add	r3, r2
 8001b62:	011b      	lsls	r3, r3, #4
 8001b64:	440b      	add	r3, r1
 8001b66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001b6a:	881a      	ldrh	r2, [r3, #0]
 8001b6c:	88bb      	ldrh	r3, [r7, #4]
 8001b6e:	4413      	add	r3, r2
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	79fa      	ldrb	r2, [r7, #7]
 8001b74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b78:	b298      	uxth	r0, r3
 8001b7a:	4938      	ldr	r1, [pc, #224]	; (8001c5c <UART_Transmit+0x164>)
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	01db      	lsls	r3, r3, #7
 8001b80:	4413      	add	r3, r2
 8001b82:	011b      	lsls	r3, r3, #4
 8001b84:	440b      	add	r3, r1
 8001b86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	801a      	strh	r2, [r3, #0]
	if(uart[id].transmission_state == transmission_state_eIDLE)
 8001b8e:	79fa      	ldrb	r2, [r7, #7]
 8001b90:	4932      	ldr	r1, [pc, #200]	; (8001c5c <UART_Transmit+0x164>)
 8001b92:	4613      	mov	r3, r2
 8001b94:	01db      	lsls	r3, r3, #7
 8001b96:	4413      	add	r3, r2
 8001b98:	011b      	lsls	r3, r3, #4
 8001b9a:	440b      	add	r3, r1
 8001b9c:	3305      	adds	r3, #5
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d157      	bne.n	8001c54 <UART_Transmit+0x15c>
	{
		uart[id].transmission_state = transmission_state_eIN_PROGRESS;
 8001ba4:	79fa      	ldrb	r2, [r7, #7]
 8001ba6:	492d      	ldr	r1, [pc, #180]	; (8001c5c <UART_Transmit+0x164>)
 8001ba8:	4613      	mov	r3, r2
 8001baa:	01db      	lsls	r3, r3, #7
 8001bac:	4413      	add	r3, r2
 8001bae:	011b      	lsls	r3, r3, #4
 8001bb0:	440b      	add	r3, r1
 8001bb2:	3305      	adds	r3, #5
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	701a      	strb	r2, [r3, #0]
		uint16_t nb_bytes_before_end_of_buffer = LEN_BUFFER - uart[id].index_read_tx;
 8001bb8:	79fa      	ldrb	r2, [r7, #7]
 8001bba:	4928      	ldr	r1, [pc, #160]	; (8001c5c <UART_Transmit+0x164>)
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	01db      	lsls	r3, r3, #7
 8001bc0:	4413      	add	r3, r2
 8001bc2:	011b      	lsls	r3, r3, #4
 8001bc4:	440b      	add	r3, r1
 8001bc6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001bd0:	81bb      	strh	r3, [r7, #12]
		len = MIN(len, nb_bytes_before_end_of_buffer);
 8001bd2:	88ba      	ldrh	r2, [r7, #4]
 8001bd4:	89bb      	ldrh	r3, [r7, #12]
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	bf28      	it	cs
 8001bda:	4613      	movcs	r3, r2
 8001bdc:	80bb      	strh	r3, [r7, #4]
		HAL_UART_Transmit_DMA(uart[id].huart, &uart[id].buffer_tx[uart[id].index_read_tx], len);
 8001bde:	79fa      	ldrb	r2, [r7, #7]
 8001be0:	491e      	ldr	r1, [pc, #120]	; (8001c5c <UART_Transmit+0x164>)
 8001be2:	4613      	mov	r3, r2
 8001be4:	01db      	lsls	r3, r3, #7
 8001be6:	4413      	add	r3, r2
 8001be8:	011b      	lsls	r3, r3, #4
 8001bea:	440b      	add	r3, r1
 8001bec:	6818      	ldr	r0, [r3, #0]
 8001bee:	79fa      	ldrb	r2, [r7, #7]
 8001bf0:	79f9      	ldrb	r1, [r7, #7]
 8001bf2:	4c1a      	ldr	r4, [pc, #104]	; (8001c5c <UART_Transmit+0x164>)
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	01db      	lsls	r3, r3, #7
 8001bf8:	440b      	add	r3, r1
 8001bfa:	011b      	lsls	r3, r3, #4
 8001bfc:	4423      	add	r3, r4
 8001bfe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	4619      	mov	r1, r3
 8001c06:	4613      	mov	r3, r2
 8001c08:	01db      	lsls	r3, r3, #7
 8001c0a:	4413      	add	r3, r2
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	440b      	add	r3, r1
 8001c10:	4a12      	ldr	r2, [pc, #72]	; (8001c5c <UART_Transmit+0x164>)
 8001c12:	4413      	add	r3, r2
 8001c14:	3306      	adds	r3, #6
 8001c16:	88ba      	ldrh	r2, [r7, #4]
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f005 fce5 	bl	80075e8 <HAL_UART_Transmit_DMA>
		uart[id].index_read_tx = (uart[id].index_read_tx + len) % LEN_BUFFER;
 8001c1e:	79fa      	ldrb	r2, [r7, #7]
 8001c20:	490e      	ldr	r1, [pc, #56]	; (8001c5c <UART_Transmit+0x164>)
 8001c22:	4613      	mov	r3, r2
 8001c24:	01db      	lsls	r3, r3, #7
 8001c26:	4413      	add	r3, r2
 8001c28:	011b      	lsls	r3, r3, #4
 8001c2a:	440b      	add	r3, r1
 8001c2c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8001c30:	881a      	ldrh	r2, [r3, #0]
 8001c32:	88bb      	ldrh	r3, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	79fa      	ldrb	r2, [r7, #7]
 8001c3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c3e:	b298      	uxth	r0, r3
 8001c40:	4906      	ldr	r1, [pc, #24]	; (8001c5c <UART_Transmit+0x164>)
 8001c42:	4613      	mov	r3, r2
 8001c44:	01db      	lsls	r3, r3, #7
 8001c46:	4413      	add	r3, r2
 8001c48:	011b      	lsls	r3, r3, #4
 8001c4a:	440b      	add	r3, r1
 8001c4c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8001c50:	4602      	mov	r2, r0
 8001c52:	801a      	strh	r2, [r3, #0]
	}
}
 8001c54:	bf00      	nop
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd90      	pop	{r4, r7, pc}
 8001c5c:	200003a4 	.word	0x200003a4

08001c60 <get_nb_bytes_available>:
 * @brief Compute the numbers of byte available in the buffer
 * @param id Id of the uart
 * @return nb of bytes available
 */
uint16_t get_nb_bytes_available(uart_e id)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	71fb      	strb	r3, [r7, #7]
	uint16_t nb = 0 ;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	81fb      	strh	r3, [r7, #14]
	if(uart[id].index_write_rx > uart[id].index_read_rx)
 8001c6e:	79fa      	ldrb	r2, [r7, #7]
 8001c70:	4932      	ldr	r1, [pc, #200]	; (8001d3c <get_nb_bytes_available+0xdc>)
 8001c72:	4613      	mov	r3, r2
 8001c74:	01db      	lsls	r3, r3, #7
 8001c76:	4413      	add	r3, r2
 8001c78:	011b      	lsls	r3, r3, #4
 8001c7a:	440b      	add	r3, r1
 8001c7c:	f603 030a 	addw	r3, r3, #2058	; 0x80a
 8001c80:	881b      	ldrh	r3, [r3, #0]
 8001c82:	b299      	uxth	r1, r3
 8001c84:	79fa      	ldrb	r2, [r7, #7]
 8001c86:	482d      	ldr	r0, [pc, #180]	; (8001d3c <get_nb_bytes_available+0xdc>)
 8001c88:	4613      	mov	r3, r2
 8001c8a:	01db      	lsls	r3, r3, #7
 8001c8c:	4413      	add	r3, r2
 8001c8e:	011b      	lsls	r3, r3, #4
 8001c90:	4403      	add	r3, r0
 8001c92:	f603 030c 	addw	r3, r3, #2060	; 0x80c
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	4299      	cmp	r1, r3
 8001c9a:	d917      	bls.n	8001ccc <get_nb_bytes_available+0x6c>
	{
		nb = uart[id].index_write_rx - uart[id].index_read_rx ;
 8001c9c:	79fa      	ldrb	r2, [r7, #7]
 8001c9e:	4927      	ldr	r1, [pc, #156]	; (8001d3c <get_nb_bytes_available+0xdc>)
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	01db      	lsls	r3, r3, #7
 8001ca4:	4413      	add	r3, r2
 8001ca6:	011b      	lsls	r3, r3, #4
 8001ca8:	440b      	add	r3, r1
 8001caa:	f603 030a 	addw	r3, r3, #2058	; 0x80a
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	b299      	uxth	r1, r3
 8001cb2:	79fa      	ldrb	r2, [r7, #7]
 8001cb4:	4821      	ldr	r0, [pc, #132]	; (8001d3c <get_nb_bytes_available+0xdc>)
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	01db      	lsls	r3, r3, #7
 8001cba:	4413      	add	r3, r2
 8001cbc:	011b      	lsls	r3, r3, #4
 8001cbe:	4403      	add	r3, r0
 8001cc0:	f603 030c 	addw	r3, r3, #2060	; 0x80c
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	1acb      	subs	r3, r1, r3
 8001cc8:	81fb      	strh	r3, [r7, #14]
 8001cca:	e030      	b.n	8001d2e <get_nb_bytes_available+0xce>
	}
	else if(uart[id].index_write_rx < uart[id].index_read_rx)
 8001ccc:	79fa      	ldrb	r2, [r7, #7]
 8001cce:	491b      	ldr	r1, [pc, #108]	; (8001d3c <get_nb_bytes_available+0xdc>)
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	01db      	lsls	r3, r3, #7
 8001cd4:	4413      	add	r3, r2
 8001cd6:	011b      	lsls	r3, r3, #4
 8001cd8:	440b      	add	r3, r1
 8001cda:	f603 030a 	addw	r3, r3, #2058	; 0x80a
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	b299      	uxth	r1, r3
 8001ce2:	79fa      	ldrb	r2, [r7, #7]
 8001ce4:	4815      	ldr	r0, [pc, #84]	; (8001d3c <get_nb_bytes_available+0xdc>)
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	01db      	lsls	r3, r3, #7
 8001cea:	4413      	add	r3, r2
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	4403      	add	r3, r0
 8001cf0:	f603 030c 	addw	r3, r3, #2060	; 0x80c
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	4299      	cmp	r1, r3
 8001cf8:	d219      	bcs.n	8001d2e <get_nb_bytes_available+0xce>
	{
		nb = LEN_BUFFER - uart[id].index_read_rx + uart[id].index_write_rx ;
 8001cfa:	79fa      	ldrb	r2, [r7, #7]
 8001cfc:	490f      	ldr	r1, [pc, #60]	; (8001d3c <get_nb_bytes_available+0xdc>)
 8001cfe:	4613      	mov	r3, r2
 8001d00:	01db      	lsls	r3, r3, #7
 8001d02:	4413      	add	r3, r2
 8001d04:	011b      	lsls	r3, r3, #4
 8001d06:	440b      	add	r3, r1
 8001d08:	f603 030a 	addw	r3, r3, #2058	; 0x80a
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	b299      	uxth	r1, r3
 8001d10:	79fa      	ldrb	r2, [r7, #7]
 8001d12:	480a      	ldr	r0, [pc, #40]	; (8001d3c <get_nb_bytes_available+0xdc>)
 8001d14:	4613      	mov	r3, r2
 8001d16:	01db      	lsls	r3, r3, #7
 8001d18:	4413      	add	r3, r2
 8001d1a:	011b      	lsls	r3, r3, #4
 8001d1c:	4403      	add	r3, r0
 8001d1e:	f603 030c 	addw	r3, r3, #2060	; 0x80c
 8001d22:	881b      	ldrh	r3, [r3, #0]
 8001d24:	1acb      	subs	r3, r1, r3
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d2c:	81fb      	strh	r3, [r7, #14]
	}
	return nb;
 8001d2e:	89fb      	ldrh	r3, [r7, #14]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3714      	adds	r7, #20
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	200003a4 	.word	0x200003a4

08001d40 <IBUS_Init>:
#define NB_BYTE_MAX_PER_PROCESS		50

static ibus_t ibus = { 0 };

void IBUS_Init(uint16_t * channels)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
	ibus.channels = channels;
 8001d48:	4a04      	ldr	r2, [pc, #16]	; (8001d5c <IBUS_Init+0x1c>)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6013      	str	r3, [r2, #0]
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	20001bd4 	.word	0x20001bd4

08001d60 <IBUS_Process>:
/*
 * @brief Check for new data on the uart and update channels array
 * @return True when a new have been successfully read
 */
bool_e IBUS_Process(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
	uint16_t nb_to_read = UART_Availables(UART_IBUS);
 8001d66:	2001      	movs	r0, #1
 8001d68:	f7ff fe1c 	bl	80019a4 <UART_Availables>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	81fb      	strh	r3, [r7, #14]
	if(!nb_to_read)
 8001d70:	89fb      	ldrh	r3, [r7, #14]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <IBUS_Process+0x1a>
	{
		return FALSE;
 8001d76:	2300      	movs	r3, #0
 8001d78:	e092      	b.n	8001ea0 <IBUS_Process+0x140>
	}
	nb_to_read = MIN(nb_to_read, NB_BYTE_MAX_PER_PROCESS);
 8001d7a:	89fb      	ldrh	r3, [r7, #14]
 8001d7c:	2b32      	cmp	r3, #50	; 0x32
 8001d7e:	bf28      	it	cs
 8001d80:	2332      	movcs	r3, #50	; 0x32
 8001d82:	81fb      	strh	r3, [r7, #14]
	bool_e to_return = FALSE;
 8001d84:	2300      	movs	r3, #0
 8001d86:	737b      	strb	r3, [r7, #13]
	uint8_t c = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	70fb      	strb	r3, [r7, #3]
	while(nb_to_read)
 8001d8c:	e083      	b.n	8001e96 <IBUS_Process+0x136>
	{
		UART_Get(UART_IBUS, &c);
 8001d8e:	1cfb      	adds	r3, r7, #3
 8001d90:	4619      	mov	r1, r3
 8001d92:	2001      	movs	r0, #1
 8001d94:	f7ff fe14 	bl	80019c0 <UART_Get>
		switch(ibus.state)
 8001d98:	4b43      	ldr	r3, [pc, #268]	; (8001ea8 <IBUS_Process+0x148>)
 8001d9a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d027      	beq.n	8001df2 <IBUS_Process+0x92>
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	dc74      	bgt.n	8001e90 <IBUS_Process+0x130>
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d002      	beq.n	8001db0 <IBUS_Process+0x50>
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d00b      	beq.n	8001dc6 <IBUS_Process+0x66>
 8001dae:	e06f      	b.n	8001e90 <IBUS_Process+0x130>
		{
			case STATE_IBUS_LENGTH :
				if(c == 0x20)
 8001db0:	78fb      	ldrb	r3, [r7, #3]
 8001db2:	2b20      	cmp	r3, #32
 8001db4:	d167      	bne.n	8001e86 <IBUS_Process+0x126>
				{
					ibus.state = STATE_IBUS_COMMAND ;
 8001db6:	4b3c      	ldr	r3, [pc, #240]	; (8001ea8 <IBUS_Process+0x148>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
					ibus.buffer[0] = c ;
 8001dbe:	78fa      	ldrb	r2, [r7, #3]
 8001dc0:	4b39      	ldr	r3, [pc, #228]	; (8001ea8 <IBUS_Process+0x148>)
 8001dc2:	711a      	strb	r2, [r3, #4]
				}
				break;
 8001dc4:	e05f      	b.n	8001e86 <IBUS_Process+0x126>
			case STATE_IBUS_COMMAND :
				if(c == 0x40)
 8001dc6:	78fb      	ldrb	r3, [r7, #3]
 8001dc8:	2b40      	cmp	r3, #64	; 0x40
 8001dca:	d10a      	bne.n	8001de2 <IBUS_Process+0x82>
				{
					ibus.state = STATE_IBUS_CHANNELS ;
 8001dcc:	4b36      	ldr	r3, [pc, #216]	; (8001ea8 <IBUS_Process+0x148>)
 8001dce:	2202      	movs	r2, #2
 8001dd0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
					ibus.buffer[1] = c ;
 8001dd4:	78fa      	ldrb	r2, [r7, #3]
 8001dd6:	4b34      	ldr	r3, [pc, #208]	; (8001ea8 <IBUS_Process+0x148>)
 8001dd8:	715a      	strb	r2, [r3, #5]
					ibus.compteur = 2 ;
 8001dda:	4b33      	ldr	r3, [pc, #204]	; (8001ea8 <IBUS_Process+0x148>)
 8001ddc:	2202      	movs	r2, #2
 8001dde:	849a      	strh	r2, [r3, #36]	; 0x24
				}
				else if(c != 0x20)
				{
					ibus.state = STATE_IBUS_LENGTH ;
				}
				break ;
 8001de0:	e053      	b.n	8001e8a <IBUS_Process+0x12a>
				else if(c != 0x20)
 8001de2:	78fb      	ldrb	r3, [r7, #3]
 8001de4:	2b20      	cmp	r3, #32
 8001de6:	d050      	beq.n	8001e8a <IBUS_Process+0x12a>
					ibus.state = STATE_IBUS_LENGTH ;
 8001de8:	4b2f      	ldr	r3, [pc, #188]	; (8001ea8 <IBUS_Process+0x148>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				break ;
 8001df0:	e04b      	b.n	8001e8a <IBUS_Process+0x12a>

			case STATE_IBUS_CHANNELS :
				ibus.buffer[ibus.compteur++] = c ;
 8001df2:	4b2d      	ldr	r3, [pc, #180]	; (8001ea8 <IBUS_Process+0x148>)
 8001df4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001df6:	1c5a      	adds	r2, r3, #1
 8001df8:	b291      	uxth	r1, r2
 8001dfa:	4a2b      	ldr	r2, [pc, #172]	; (8001ea8 <IBUS_Process+0x148>)
 8001dfc:	8491      	strh	r1, [r2, #36]	; 0x24
 8001dfe:	4619      	mov	r1, r3
 8001e00:	78fa      	ldrb	r2, [r7, #3]
 8001e02:	4b29      	ldr	r3, [pc, #164]	; (8001ea8 <IBUS_Process+0x148>)
 8001e04:	440b      	add	r3, r1
 8001e06:	711a      	strb	r2, [r3, #4]
				if(ibus.compteur == 32)
 8001e08:	4b27      	ldr	r3, [pc, #156]	; (8001ea8 <IBUS_Process+0x148>)
 8001e0a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001e0c:	2b20      	cmp	r3, #32
 8001e0e:	d13e      	bne.n	8001e8e <IBUS_Process+0x12e>
				{
					uint32_t cs = (uint32_t)(ibus.buffer[30] | (ibus.buffer[31] << 8)) ;
 8001e10:	4b25      	ldr	r3, [pc, #148]	; (8001ea8 <IBUS_Process+0x148>)
 8001e12:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001e16:	461a      	mov	r2, r3
 8001e18:	4b23      	ldr	r3, [pc, #140]	; (8001ea8 <IBUS_Process+0x148>)
 8001e1a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001e1e:	021b      	lsls	r3, r3, #8
 8001e20:	4313      	orrs	r3, r2
 8001e22:	607b      	str	r3, [r7, #4]
					if(0xFFFF - check_sum_f(ibus.buffer)== cs)
 8001e24:	4821      	ldr	r0, [pc, #132]	; (8001eac <IBUS_Process+0x14c>)
 8001e26:	f000 f843 	bl	8001eb0 <check_sum_f>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001e30:	33ff      	adds	r3, #255	; 0xff
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d121      	bne.n	8001e7c <IBUS_Process+0x11c>
					{
						for(uint32_t radio = 0; radio < 28; radio +=2)
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60bb      	str	r3, [r7, #8]
 8001e3c:	e019      	b.n	8001e72 <IBUS_Process+0x112>
						{
							ibus.channels[radio / 2] = (int32_t)(ibus.buffer[radio+2] | (ibus.buffer[radio + 3] << 8));
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	3302      	adds	r3, #2
 8001e42:	4a19      	ldr	r2, [pc, #100]	; (8001ea8 <IBUS_Process+0x148>)
 8001e44:	4413      	add	r3, r2
 8001e46:	791b      	ldrb	r3, [r3, #4]
 8001e48:	b21a      	sxth	r2, r3
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	3303      	adds	r3, #3
 8001e4e:	4916      	ldr	r1, [pc, #88]	; (8001ea8 <IBUS_Process+0x148>)
 8001e50:	440b      	add	r3, r1
 8001e52:	791b      	ldrb	r3, [r3, #4]
 8001e54:	021b      	lsls	r3, r3, #8
 8001e56:	b21b      	sxth	r3, r3
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	b219      	sxth	r1, r3
 8001e5c:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <IBUS_Process+0x148>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	f023 0301 	bic.w	r3, r3, #1
 8001e66:	4413      	add	r3, r2
 8001e68:	b28a      	uxth	r2, r1
 8001e6a:	801a      	strh	r2, [r3, #0]
						for(uint32_t radio = 0; radio < 28; radio +=2)
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	3302      	adds	r3, #2
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	2b1b      	cmp	r3, #27
 8001e76:	d9e2      	bls.n	8001e3e <IBUS_Process+0xde>
						}
						to_return = TRUE;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	737b      	strb	r3, [r7, #13]
					}
					ibus.state = STATE_IBUS_LENGTH ;
 8001e7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <IBUS_Process+0x148>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				}
				break;
 8001e84:	e003      	b.n	8001e8e <IBUS_Process+0x12e>
				break;
 8001e86:	bf00      	nop
 8001e88:	e002      	b.n	8001e90 <IBUS_Process+0x130>
				break ;
 8001e8a:	bf00      	nop
 8001e8c:	e000      	b.n	8001e90 <IBUS_Process+0x130>
				break;
 8001e8e:	bf00      	nop
		}
		nb_to_read --;
 8001e90:	89fb      	ldrh	r3, [r7, #14]
 8001e92:	3b01      	subs	r3, #1
 8001e94:	81fb      	strh	r3, [r7, #14]
	while(nb_to_read)
 8001e96:	89fb      	ldrh	r3, [r7, #14]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f47f af78 	bne.w	8001d8e <IBUS_Process+0x2e>
	}

	return to_return;
 8001e9e:	7b7b      	ldrb	r3, [r7, #13]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20001bd4 	.word	0x20001bd4
 8001eac:	20001bd8 	.word	0x20001bd8

08001eb0 <check_sum_f>:

uint32_t check_sum_f(uint8_t * buffer)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
	uint32_t sum = 0 ;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60fb      	str	r3, [r7, #12]
	for(uint8_t b=0; b <30; b++)
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	72fb      	strb	r3, [r7, #11]
 8001ec0:	e00a      	b.n	8001ed8 <check_sum_f+0x28>
		sum += (uint32_t)buffer[b];
 8001ec2:	7afb      	ldrb	r3, [r7, #11]
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4413      	add	r3, r2
 8001ed0:	60fb      	str	r3, [r7, #12]
	for(uint8_t b=0; b <30; b++)
 8001ed2:	7afb      	ldrb	r3, [r7, #11]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	72fb      	strb	r3, [r7, #11]
 8001ed8:	7afb      	ldrb	r3, [r7, #11]
 8001eda:	2b1d      	cmp	r3, #29
 8001edc:	d9f1      	bls.n	8001ec2 <check_sum_f+0x12>
	return sum ;
 8001ede:	68fb      	ldr	r3, [r7, #12]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <RADIO_Process_Init>:
#define TIMEOUT_RADIO_MS	50

static radio_t radio = { 0 };

void RADIO_Process_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
#if USE_IBUS
	IBUS_Init(radio.channels);
 8001ef0:	4802      	ldr	r0, [pc, #8]	; (8001efc <RADIO_Process_Init+0x10>)
 8001ef2:	f7ff ff25 	bl	8001d40 <IBUS_Init>
#endif
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20001c00 	.word	0x20001c00

08001f00 <RADIO_Process_Main>:

void RADIO_Process_Main(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0

#if USE_IBUS
	if(IBUS_Process())
 8001f04:	f7ff ff2c 	bl	8001d60 <IBUS_Process>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d009      	beq.n	8001f22 <RADIO_Process_Main+0x22>
	{
		radio.next_update = HAL_GetTick() + TIMEOUT_RADIO_MS;
 8001f0e:	f001 facb 	bl	80034a8 <HAL_GetTick>
 8001f12:	4603      	mov	r3, r0
 8001f14:	3332      	adds	r3, #50	; 0x32
 8001f16:	4a09      	ldr	r2, [pc, #36]	; (8001f3c <RADIO_Process_Main+0x3c>)
 8001f18:	6213      	str	r3, [r2, #32]
		radio.state = radio_state_eOK;
 8001f1a:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <RADIO_Process_Main+0x3c>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	771a      	strb	r2, [r3, #28]
	else if(HAL_GetTick() > radio.next_update)
	{
		radio.state = radio_state_eTIMEOUT;
	}
#endif
}
 8001f20:	e009      	b.n	8001f36 <RADIO_Process_Main+0x36>
	else if(HAL_GetTick() > radio.next_update)
 8001f22:	f001 fac1 	bl	80034a8 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <RADIO_Process_Main+0x3c>)
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d902      	bls.n	8001f36 <RADIO_Process_Main+0x36>
		radio.state = radio_state_eTIMEOUT;
 8001f30:	4b02      	ldr	r3, [pc, #8]	; (8001f3c <RADIO_Process_Main+0x3c>)
 8001f32:	2201      	movs	r2, #1
 8001f34:	771a      	strb	r2, [r3, #28]
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20001c00 	.word	0x20001c00

08001f40 <RADIO_Get_State>:

radio_state_e RADIO_Get_State(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
	return radio.state;
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <RADIO_Get_State+0x14>)
 8001f46:	7f1b      	ldrb	r3, [r3, #28]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	20001c00 	.word	0x20001c00

08001f58 <RADIO_Get_Channel>:

uint16_t * RADIO_Get_Channel(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
	return radio.channels;
 8001f5c:	4b02      	ldr	r3, [pc, #8]	; (8001f68 <RADIO_Get_Channel+0x10>)
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	20001c00 	.word	0x20001c00

08001f6c <MPU_Get_Gyro_Ptr>:
			mpu.acc_conversion = (float)1 / MPU6050_ACCE_SENS_16 ;
			break;
	}
}
float * MPU_Get_Gyro_Ptr(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
	return mpu.gyro;
 8001f70:	4b02      	ldr	r3, [pc, #8]	; (8001f7c <MPU_Get_Gyro_Ptr+0x10>)
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	200000b8 	.word	0x200000b8

08001f80 <MPU_Get_Gyro_Raw_Ptr>:

float * MPU_Get_Gyro_Raw_Ptr(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
	return mpu.gyro_raw;
 8001f84:	4b02      	ldr	r3, [pc, #8]	; (8001f90 <MPU_Get_Gyro_Raw_Ptr+0x10>)
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	200000c4 	.word	0x200000c4

08001f94 <MPU_Get_Acc_Ptr>:

float * MPU_Get_Acc_Ptr(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
	return mpu.acc;
 8001f98:	4b02      	ldr	r3, [pc, #8]	; (8001fa4 <MPU_Get_Acc_Ptr+0x10>)
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	200000e8 	.word	0x200000e8

08001fa8 <MPU_Get_Acc_Raw_Ptr>:

float * MPU_Get_Acc_Raw_Ptr(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
	return mpu.acc_raw;
 8001fac:	4b02      	ldr	r3, [pc, #8]	; (8001fb8 <MPU_Get_Acc_Raw_Ptr+0x10>)
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	200000f4 	.word	0x200000f4

08001fbc <MPU_Convert_Acc_Data>:

/*
 * @brief Convert acc bytes to measurement
 */
void MPU_Convert_Acc_Data(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
	mpu.acc_raw[0] = ((int16_t)(mpu.acc_data[1] | (mpu.acc_data[0] << 8)) * mpu.acc_conversion) - 0.12f;
 8001fc0:	4b49      	ldr	r3, [pc, #292]	; (80020e8 <MPU_Convert_Acc_Data+0x12c>)
 8001fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	b21a      	sxth	r2, r3
 8001fca:	4b47      	ldr	r3, [pc, #284]	; (80020e8 <MPU_Convert_Acc_Data+0x12c>)
 8001fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	021b      	lsls	r3, r3, #8
 8001fd2:	b21b      	sxth	r3, r3
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	b21b      	sxth	r3, r3
 8001fd8:	ee07 3a90 	vmov	s15, r3
 8001fdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fe0:	4b41      	ldr	r3, [pc, #260]	; (80020e8 <MPU_Convert_Acc_Data+0x12c>)
 8001fe2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fea:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80020ec <MPU_Convert_Acc_Data+0x130>
 8001fee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ff2:	4b3d      	ldr	r3, [pc, #244]	; (80020e8 <MPU_Convert_Acc_Data+0x12c>)
 8001ff4:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	mpu.acc_raw[1] = ((int16_t)(mpu.acc_data[3] | (mpu.acc_data[2] << 8)) * mpu.acc_conversion) - 0.54f;
 8001ff8:	4b3b      	ldr	r3, [pc, #236]	; (80020e8 <MPU_Convert_Acc_Data+0x12c>)
 8001ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ffc:	3303      	adds	r3, #3
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	b21a      	sxth	r2, r3
 8002002:	4b39      	ldr	r3, [pc, #228]	; (80020e8 <MPU_Convert_Acc_Data+0x12c>)
 8002004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002006:	3302      	adds	r3, #2
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	021b      	lsls	r3, r3, #8
 800200c:	b21b      	sxth	r3, r3
 800200e:	4313      	orrs	r3, r2
 8002010:	b21b      	sxth	r3, r3
 8002012:	ee07 3a90 	vmov	s15, r3
 8002016:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800201a:	4b33      	ldr	r3, [pc, #204]	; (80020e8 <MPU_Convert_Acc_Data+0x12c>)
 800201c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002020:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002024:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80020f0 <MPU_Convert_Acc_Data+0x134>
 8002028:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800202c:	4b2e      	ldr	r3, [pc, #184]	; (80020e8 <MPU_Convert_Acc_Data+0x12c>)
 800202e:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	mpu.acc_raw[2] = ((int16_t)(mpu.acc_data[5] | (mpu.acc_data[4] << 8)) * mpu.acc_conversion) - 0.66f;
 8002032:	4b2d      	ldr	r3, [pc, #180]	; (80020e8 <MPU_Convert_Acc_Data+0x12c>)
 8002034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002036:	3305      	adds	r3, #5
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	b21a      	sxth	r2, r3
 800203c:	4b2a      	ldr	r3, [pc, #168]	; (80020e8 <MPU_Convert_Acc_Data+0x12c>)
 800203e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002040:	3304      	adds	r3, #4
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	021b      	lsls	r3, r3, #8
 8002046:	b21b      	sxth	r3, r3
 8002048:	4313      	orrs	r3, r2
 800204a:	b21b      	sxth	r3, r3
 800204c:	ee07 3a90 	vmov	s15, r3
 8002050:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002054:	4b24      	ldr	r3, [pc, #144]	; (80020e8 <MPU_Convert_Acc_Data+0x12c>)
 8002056:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800205a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800205e:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80020f4 <MPU_Convert_Acc_Data+0x138>
 8002062:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002066:	4b20      	ldr	r3, [pc, #128]	; (80020e8 <MPU_Convert_Acc_Data+0x12c>)
 8002068:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	/* Filtering */
	mpu.acc[0] = (mpu.acc[0] * COEF_ACC_FILTERING) + (mpu.acc_raw[0] * (float)(1-COEF_ACC_FILTERING));
 800206c:	4b1e      	ldr	r3, [pc, #120]	; (80020e8 <MPU_Convert_Acc_Data+0x12c>)
 800206e:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002072:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80020f8 <MPU_Convert_Acc_Data+0x13c>
 8002076:	ee27 7a87 	vmul.f32	s14, s15, s14
 800207a:	4b1b      	ldr	r3, [pc, #108]	; (80020e8 <MPU_Convert_Acc_Data+0x12c>)
 800207c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002080:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80020fc <MPU_Convert_Acc_Data+0x140>
 8002084:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002088:	ee77 7a27 	vadd.f32	s15, s14, s15
 800208c:	4b16      	ldr	r3, [pc, #88]	; (80020e8 <MPU_Convert_Acc_Data+0x12c>)
 800208e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	mpu.acc[1] = (mpu.acc[1] * COEF_ACC_FILTERING) + (mpu.acc_raw[1] * (float)(1-COEF_ACC_FILTERING));
 8002092:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <MPU_Convert_Acc_Data+0x12c>)
 8002094:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002098:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80020f8 <MPU_Convert_Acc_Data+0x13c>
 800209c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020a0:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <MPU_Convert_Acc_Data+0x12c>)
 80020a2:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80020a6:	eddf 6a15 	vldr	s13, [pc, #84]	; 80020fc <MPU_Convert_Acc_Data+0x140>
 80020aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80020ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020b2:	4b0d      	ldr	r3, [pc, #52]	; (80020e8 <MPU_Convert_Acc_Data+0x12c>)
 80020b4:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	mpu.acc[2] = (mpu.acc[2] * COEF_ACC_FILTERING) + (mpu.acc_raw[2] * (float)(1-COEF_ACC_FILTERING));
 80020b8:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <MPU_Convert_Acc_Data+0x12c>)
 80020ba:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80020be:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80020f8 <MPU_Convert_Acc_Data+0x13c>
 80020c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020c6:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <MPU_Convert_Acc_Data+0x12c>)
 80020c8:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80020cc:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80020fc <MPU_Convert_Acc_Data+0x140>
 80020d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80020d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020d8:	4b03      	ldr	r3, [pc, #12]	; (80020e8 <MPU_Convert_Acc_Data+0x12c>)
 80020da:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
}
 80020de:	bf00      	nop
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	200000a0 	.word	0x200000a0
 80020ec:	3df5c28f 	.word	0x3df5c28f
 80020f0:	3f0a3d71 	.word	0x3f0a3d71
 80020f4:	3f28f5c3 	.word	0x3f28f5c3
 80020f8:	3f666666 	.word	0x3f666666
 80020fc:	3dccccd0 	.word	0x3dccccd0

08002100 <MPU_Convert_Gyro_Data>:

/*
 * @brief Convert gyro bytes to measurement
 */
void MPU_Convert_Gyro_Data(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
	/* Data convertion */
	mpu.gyro_raw[0] = (int16_t)(mpu.gyro_data[1] | (mpu.gyro_data[0] << 8)) * mpu.gyro_conversion;
 8002104:	4b43      	ldr	r3, [pc, #268]	; (8002214 <MPU_Convert_Gyro_Data+0x114>)
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	3301      	adds	r3, #1
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	b21a      	sxth	r2, r3
 800210e:	4b41      	ldr	r3, [pc, #260]	; (8002214 <MPU_Convert_Gyro_Data+0x114>)
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	021b      	lsls	r3, r3, #8
 8002116:	b21b      	sxth	r3, r3
 8002118:	4313      	orrs	r3, r2
 800211a:	b21b      	sxth	r3, r3
 800211c:	ee07 3a90 	vmov	s15, r3
 8002120:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002124:	4b3b      	ldr	r3, [pc, #236]	; (8002214 <MPU_Convert_Gyro_Data+0x114>)
 8002126:	edd3 7a05 	vldr	s15, [r3, #20]
 800212a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800212e:	4b39      	ldr	r3, [pc, #228]	; (8002214 <MPU_Convert_Gyro_Data+0x114>)
 8002130:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	mpu.gyro_raw[1] = (int16_t)(mpu.gyro_data[3] | (mpu.gyro_data[2] << 8)) * mpu.gyro_conversion;
 8002134:	4b37      	ldr	r3, [pc, #220]	; (8002214 <MPU_Convert_Gyro_Data+0x114>)
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	3303      	adds	r3, #3
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	b21a      	sxth	r2, r3
 800213e:	4b35      	ldr	r3, [pc, #212]	; (8002214 <MPU_Convert_Gyro_Data+0x114>)
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	3302      	adds	r3, #2
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	021b      	lsls	r3, r3, #8
 8002148:	b21b      	sxth	r3, r3
 800214a:	4313      	orrs	r3, r2
 800214c:	b21b      	sxth	r3, r3
 800214e:	ee07 3a90 	vmov	s15, r3
 8002152:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002156:	4b2f      	ldr	r3, [pc, #188]	; (8002214 <MPU_Convert_Gyro_Data+0x114>)
 8002158:	edd3 7a05 	vldr	s15, [r3, #20]
 800215c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002160:	4b2c      	ldr	r3, [pc, #176]	; (8002214 <MPU_Convert_Gyro_Data+0x114>)
 8002162:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	mpu.gyro_raw[2] = (int16_t)(mpu.gyro_data[5] | (mpu.gyro_data[4] << 8)) * mpu.gyro_conversion;
 8002166:	4b2b      	ldr	r3, [pc, #172]	; (8002214 <MPU_Convert_Gyro_Data+0x114>)
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	3305      	adds	r3, #5
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	b21a      	sxth	r2, r3
 8002170:	4b28      	ldr	r3, [pc, #160]	; (8002214 <MPU_Convert_Gyro_Data+0x114>)
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	3304      	adds	r3, #4
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	021b      	lsls	r3, r3, #8
 800217a:	b21b      	sxth	r3, r3
 800217c:	4313      	orrs	r3, r2
 800217e:	b21b      	sxth	r3, r3
 8002180:	ee07 3a90 	vmov	s15, r3
 8002184:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002188:	4b22      	ldr	r3, [pc, #136]	; (8002214 <MPU_Convert_Gyro_Data+0x114>)
 800218a:	edd3 7a05 	vldr	s15, [r3, #20]
 800218e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002192:	4b20      	ldr	r3, [pc, #128]	; (8002214 <MPU_Convert_Gyro_Data+0x114>)
 8002194:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	/* Filtering */
	mpu.gyro[0] = (mpu.gyro[0] * COEF_GYRO_FILTERING) + (mpu.gyro_raw[0] * (float)(1-COEF_GYRO_FILTERING));
 8002198:	4b1e      	ldr	r3, [pc, #120]	; (8002214 <MPU_Convert_Gyro_Data+0x114>)
 800219a:	edd3 7a06 	vldr	s15, [r3, #24]
 800219e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002218 <MPU_Convert_Gyro_Data+0x118>
 80021a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021a6:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <MPU_Convert_Gyro_Data+0x114>)
 80021a8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80021ac:	eddf 6a1b 	vldr	s13, [pc, #108]	; 800221c <MPU_Convert_Gyro_Data+0x11c>
 80021b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80021b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021b8:	4b16      	ldr	r3, [pc, #88]	; (8002214 <MPU_Convert_Gyro_Data+0x114>)
 80021ba:	edc3 7a06 	vstr	s15, [r3, #24]
	mpu.gyro[1] = (mpu.gyro[1] * COEF_GYRO_FILTERING) + (mpu.gyro_raw[1] * (float)(1-COEF_GYRO_FILTERING));
 80021be:	4b15      	ldr	r3, [pc, #84]	; (8002214 <MPU_Convert_Gyro_Data+0x114>)
 80021c0:	edd3 7a07 	vldr	s15, [r3, #28]
 80021c4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002218 <MPU_Convert_Gyro_Data+0x118>
 80021c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021cc:	4b11      	ldr	r3, [pc, #68]	; (8002214 <MPU_Convert_Gyro_Data+0x114>)
 80021ce:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80021d2:	eddf 6a12 	vldr	s13, [pc, #72]	; 800221c <MPU_Convert_Gyro_Data+0x11c>
 80021d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80021da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021de:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <MPU_Convert_Gyro_Data+0x114>)
 80021e0:	edc3 7a07 	vstr	s15, [r3, #28]
	mpu.gyro[2] = (mpu.gyro[2] * COEF_GYRO_FILTERING) + (mpu.gyro_raw[2] * (float)(1-COEF_GYRO_FILTERING));
 80021e4:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <MPU_Convert_Gyro_Data+0x114>)
 80021e6:	edd3 7a08 	vldr	s15, [r3, #32]
 80021ea:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002218 <MPU_Convert_Gyro_Data+0x118>
 80021ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021f2:	4b08      	ldr	r3, [pc, #32]	; (8002214 <MPU_Convert_Gyro_Data+0x114>)
 80021f4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80021f8:	eddf 6a08 	vldr	s13, [pc, #32]	; 800221c <MPU_Convert_Gyro_Data+0x11c>
 80021fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002200:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002204:	4b03      	ldr	r3, [pc, #12]	; (8002214 <MPU_Convert_Gyro_Data+0x114>)
 8002206:	edc3 7a08 	vstr	s15, [r3, #32]
}
 800220a:	bf00      	nop
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	200000a0 	.word	0x200000a0
 8002218:	3f666666 	.word	0x3f666666
 800221c:	3dccccd0 	.word	0x3dccccd0

08002220 <MPU_Rx_Complete_Callback>:

/*
 * @brief Called back on half rx cplt it
 */
bool_e MPU_Rx_Complete_Callback(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
	if(mpu.dma_state)
 8002224:	4b12      	ldr	r3, [pc, #72]	; (8002270 <MPU_Rx_Complete_Callback+0x50>)
 8002226:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800222a:	2b00      	cmp	r3, #0
 800222c:	d01d      	beq.n	800226a <MPU_Rx_Complete_Callback+0x4a>
	{
		switch(mpu.dma_state)
 800222e:	4b10      	ldr	r3, [pc, #64]	; (8002270 <MPU_Rx_Complete_Callback+0x50>)
 8002230:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8002234:	2b03      	cmp	r3, #3
 8002236:	d00c      	beq.n	8002252 <MPU_Rx_Complete_Callback+0x32>
 8002238:	2b03      	cmp	r3, #3
 800223a:	dc0f      	bgt.n	800225c <MPU_Rx_Complete_Callback+0x3c>
 800223c:	2b01      	cmp	r3, #1
 800223e:	d002      	beq.n	8002246 <MPU_Rx_Complete_Callback+0x26>
 8002240:	2b02      	cmp	r3, #2
 8002242:	d003      	beq.n	800224c <MPU_Rx_Complete_Callback+0x2c>
			case dma_state_eIN_PORGRESS_ALL:
				MPU_Convert_Acc_Data();
				MPU_Convert_Gyro_Data();
				break;
			default:
				break;
 8002244:	e00a      	b.n	800225c <MPU_Rx_Complete_Callback+0x3c>
				MPU_Convert_Gyro_Data();
 8002246:	f7ff ff5b 	bl	8002100 <MPU_Convert_Gyro_Data>
				break;
 800224a:	e008      	b.n	800225e <MPU_Rx_Complete_Callback+0x3e>
				MPU_Convert_Acc_Data();
 800224c:	f7ff feb6 	bl	8001fbc <MPU_Convert_Acc_Data>
				break;
 8002250:	e005      	b.n	800225e <MPU_Rx_Complete_Callback+0x3e>
				MPU_Convert_Acc_Data();
 8002252:	f7ff feb3 	bl	8001fbc <MPU_Convert_Acc_Data>
				MPU_Convert_Gyro_Data();
 8002256:	f7ff ff53 	bl	8002100 <MPU_Convert_Gyro_Data>
				break;
 800225a:	e000      	b.n	800225e <MPU_Rx_Complete_Callback+0x3e>
				break;
 800225c:	bf00      	nop
		}
		mpu.dma_state = dma_state_eIDLE;
 800225e:	4b04      	ldr	r3, [pc, #16]	; (8002270 <MPU_Rx_Complete_Callback+0x50>)
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		return TRUE;
 8002266:	2301      	movs	r3, #1
 8002268:	e000      	b.n	800226c <MPU_Rx_Complete_Callback+0x4c>
	}
	return FALSE;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	bd80      	pop	{r7, pc}
 8002270:	200000a0 	.word	0x200000a0

08002274 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	607b      	str	r3, [r7, #4]
 800227e:	4b2f      	ldr	r3, [pc, #188]	; (800233c <MX_DMA_Init+0xc8>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	4a2e      	ldr	r2, [pc, #184]	; (800233c <MX_DMA_Init+0xc8>)
 8002284:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002288:	6313      	str	r3, [r2, #48]	; 0x30
 800228a:	4b2c      	ldr	r3, [pc, #176]	; (800233c <MX_DMA_Init+0xc8>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002292:	607b      	str	r3, [r7, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	603b      	str	r3, [r7, #0]
 800229a:	4b28      	ldr	r3, [pc, #160]	; (800233c <MX_DMA_Init+0xc8>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	4a27      	ldr	r2, [pc, #156]	; (800233c <MX_DMA_Init+0xc8>)
 80022a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022a4:	6313      	str	r3, [r2, #48]	; 0x30
 80022a6:	4b25      	ldr	r3, [pc, #148]	; (800233c <MX_DMA_Init+0xc8>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ae:	603b      	str	r3, [r7, #0]
 80022b0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80022b2:	2200      	movs	r2, #0
 80022b4:	2100      	movs	r1, #0
 80022b6:	200b      	movs	r0, #11
 80022b8:	f001 fa01 	bl	80036be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80022bc:	200b      	movs	r0, #11
 80022be:	f001 fa1a 	bl	80036f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80022c2:	2200      	movs	r2, #0
 80022c4:	2100      	movs	r1, #0
 80022c6:	200c      	movs	r0, #12
 80022c8:	f001 f9f9 	bl	80036be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80022cc:	200c      	movs	r0, #12
 80022ce:	f001 fa12 	bl	80036f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80022d2:	2200      	movs	r2, #0
 80022d4:	2100      	movs	r1, #0
 80022d6:	200d      	movs	r0, #13
 80022d8:	f001 f9f1 	bl	80036be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80022dc:	200d      	movs	r0, #13
 80022de:	f001 fa0a 	bl	80036f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80022e2:	2200      	movs	r2, #0
 80022e4:	2100      	movs	r1, #0
 80022e6:	200e      	movs	r0, #14
 80022e8:	f001 f9e9 	bl	80036be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80022ec:	200e      	movs	r0, #14
 80022ee:	f001 fa02 	bl	80036f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80022f2:	2200      	movs	r2, #0
 80022f4:	2100      	movs	r1, #0
 80022f6:	200f      	movs	r0, #15
 80022f8:	f001 f9e1 	bl	80036be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80022fc:	200f      	movs	r0, #15
 80022fe:	f001 f9fa 	bl	80036f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002302:	2200      	movs	r2, #0
 8002304:	2100      	movs	r1, #0
 8002306:	2011      	movs	r0, #17
 8002308:	f001 f9d9 	bl	80036be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800230c:	2011      	movs	r0, #17
 800230e:	f001 f9f2 	bl	80036f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002312:	2200      	movs	r2, #0
 8002314:	2100      	movs	r1, #0
 8002316:	203a      	movs	r0, #58	; 0x3a
 8002318:	f001 f9d1 	bl	80036be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800231c:	203a      	movs	r0, #58	; 0x3a
 800231e:	f001 f9ea 	bl	80036f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002322:	2200      	movs	r2, #0
 8002324:	2100      	movs	r1, #0
 8002326:	2046      	movs	r0, #70	; 0x46
 8002328:	f001 f9c9 	bl	80036be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800232c:	2046      	movs	r0, #70	; 0x46
 800232e:	f001 f9e2 	bl	80036f6 <HAL_NVIC_EnableIRQ>

}
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40023800 	.word	0x40023800

08002340 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b088      	sub	sp, #32
 8002344:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002346:	f107 030c 	add.w	r3, r7, #12
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	605a      	str	r2, [r3, #4]
 8002350:	609a      	str	r2, [r3, #8]
 8002352:	60da      	str	r2, [r3, #12]
 8002354:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	4b20      	ldr	r3, [pc, #128]	; (80023dc <MX_GPIO_Init+0x9c>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	4a1f      	ldr	r2, [pc, #124]	; (80023dc <MX_GPIO_Init+0x9c>)
 8002360:	f043 0304 	orr.w	r3, r3, #4
 8002364:	6313      	str	r3, [r2, #48]	; 0x30
 8002366:	4b1d      	ldr	r3, [pc, #116]	; (80023dc <MX_GPIO_Init+0x9c>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	f003 0304 	and.w	r3, r3, #4
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	607b      	str	r3, [r7, #4]
 8002376:	4b19      	ldr	r3, [pc, #100]	; (80023dc <MX_GPIO_Init+0x9c>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	4a18      	ldr	r2, [pc, #96]	; (80023dc <MX_GPIO_Init+0x9c>)
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	6313      	str	r3, [r2, #48]	; 0x30
 8002382:	4b16      	ldr	r3, [pc, #88]	; (80023dc <MX_GPIO_Init+0x9c>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	607b      	str	r3, [r7, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	603b      	str	r3, [r7, #0]
 8002392:	4b12      	ldr	r3, [pc, #72]	; (80023dc <MX_GPIO_Init+0x9c>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	4a11      	ldr	r2, [pc, #68]	; (80023dc <MX_GPIO_Init+0x9c>)
 8002398:	f043 0302 	orr.w	r3, r3, #2
 800239c:	6313      	str	r3, [r2, #48]	; 0x30
 800239e:	4b0f      	ldr	r3, [pc, #60]	; (80023dc <MX_GPIO_Init+0x9c>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	603b      	str	r3, [r7, #0]
 80023a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_STATE_Pin|LED_STATE2_Pin|MPU_POWER_Pin, GPIO_PIN_RESET);
 80023aa:	2200      	movs	r2, #0
 80023ac:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80023b0:	480b      	ldr	r0, [pc, #44]	; (80023e0 <MX_GPIO_Init+0xa0>)
 80023b2:	f001 ff67 	bl	8004284 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_STATE_Pin|LED_STATE2_Pin|MPU_POWER_Pin;
 80023b6:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80023ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023bc:	2301      	movs	r3, #1
 80023be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c4:	2300      	movs	r3, #0
 80023c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023c8:	f107 030c 	add.w	r3, r7, #12
 80023cc:	4619      	mov	r1, r3
 80023ce:	4804      	ldr	r0, [pc, #16]	; (80023e0 <MX_GPIO_Init+0xa0>)
 80023d0:	f001 fdbc 	bl	8003f4c <HAL_GPIO_Init>

}
 80023d4:	bf00      	nop
 80023d6:	3720      	adds	r7, #32
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40023800 	.word	0x40023800
 80023e0:	40020800 	.word	0x40020800

080023e4 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023e8:	4b12      	ldr	r3, [pc, #72]	; (8002434 <MX_I2C1_Init+0x50>)
 80023ea:	4a13      	ldr	r2, [pc, #76]	; (8002438 <MX_I2C1_Init+0x54>)
 80023ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80023ee:	4b11      	ldr	r3, [pc, #68]	; (8002434 <MX_I2C1_Init+0x50>)
 80023f0:	4a12      	ldr	r2, [pc, #72]	; (800243c <MX_I2C1_Init+0x58>)
 80023f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023f4:	4b0f      	ldr	r3, [pc, #60]	; (8002434 <MX_I2C1_Init+0x50>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80023fa:	4b0e      	ldr	r3, [pc, #56]	; (8002434 <MX_I2C1_Init+0x50>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002400:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <MX_I2C1_Init+0x50>)
 8002402:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002406:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002408:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <MX_I2C1_Init+0x50>)
 800240a:	2200      	movs	r2, #0
 800240c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800240e:	4b09      	ldr	r3, [pc, #36]	; (8002434 <MX_I2C1_Init+0x50>)
 8002410:	2200      	movs	r2, #0
 8002412:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002414:	4b07      	ldr	r3, [pc, #28]	; (8002434 <MX_I2C1_Init+0x50>)
 8002416:	2200      	movs	r2, #0
 8002418:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800241a:	4b06      	ldr	r3, [pc, #24]	; (8002434 <MX_I2C1_Init+0x50>)
 800241c:	2200      	movs	r2, #0
 800241e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002420:	4804      	ldr	r0, [pc, #16]	; (8002434 <MX_I2C1_Init+0x50>)
 8002422:	f001 ff49 	bl	80042b8 <HAL_I2C_Init>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800242c:	f000 f9c2 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002430:	bf00      	nop
 8002432:	bd80      	pop	{r7, pc}
 8002434:	200020c0 	.word	0x200020c0
 8002438:	40005400 	.word	0x40005400
 800243c:	00061a80 	.word	0x00061a80

08002440 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08a      	sub	sp, #40	; 0x28
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002448:	f107 0314 	add.w	r3, r7, #20
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]
 8002456:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a50      	ldr	r2, [pc, #320]	; (80025a0 <HAL_I2C_MspInit+0x160>)
 800245e:	4293      	cmp	r3, r2
 8002460:	f040 8099 	bne.w	8002596 <HAL_I2C_MspInit+0x156>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002464:	2300      	movs	r3, #0
 8002466:	613b      	str	r3, [r7, #16]
 8002468:	4b4e      	ldr	r3, [pc, #312]	; (80025a4 <HAL_I2C_MspInit+0x164>)
 800246a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246c:	4a4d      	ldr	r2, [pc, #308]	; (80025a4 <HAL_I2C_MspInit+0x164>)
 800246e:	f043 0302 	orr.w	r3, r3, #2
 8002472:	6313      	str	r3, [r2, #48]	; 0x30
 8002474:	4b4b      	ldr	r3, [pc, #300]	; (80025a4 <HAL_I2C_MspInit+0x164>)
 8002476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002480:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002486:	2312      	movs	r3, #18
 8002488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800248e:	2303      	movs	r3, #3
 8002490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002492:	2304      	movs	r3, #4
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002496:	f107 0314 	add.w	r3, r7, #20
 800249a:	4619      	mov	r1, r3
 800249c:	4842      	ldr	r0, [pc, #264]	; (80025a8 <HAL_I2C_MspInit+0x168>)
 800249e:	f001 fd55 	bl	8003f4c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	4b3f      	ldr	r3, [pc, #252]	; (80025a4 <HAL_I2C_MspInit+0x164>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	4a3e      	ldr	r2, [pc, #248]	; (80025a4 <HAL_I2C_MspInit+0x164>)
 80024ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024b0:	6413      	str	r3, [r2, #64]	; 0x40
 80024b2:	4b3c      	ldr	r3, [pc, #240]	; (80025a4 <HAL_I2C_MspInit+0x164>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80024be:	4b3b      	ldr	r3, [pc, #236]	; (80025ac <HAL_I2C_MspInit+0x16c>)
 80024c0:	4a3b      	ldr	r2, [pc, #236]	; (80025b0 <HAL_I2C_MspInit+0x170>)
 80024c2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80024c4:	4b39      	ldr	r3, [pc, #228]	; (80025ac <HAL_I2C_MspInit+0x16c>)
 80024c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024ca:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024cc:	4b37      	ldr	r3, [pc, #220]	; (80025ac <HAL_I2C_MspInit+0x16c>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024d2:	4b36      	ldr	r3, [pc, #216]	; (80025ac <HAL_I2C_MspInit+0x16c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024d8:	4b34      	ldr	r3, [pc, #208]	; (80025ac <HAL_I2C_MspInit+0x16c>)
 80024da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024de:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024e0:	4b32      	ldr	r3, [pc, #200]	; (80025ac <HAL_I2C_MspInit+0x16c>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024e6:	4b31      	ldr	r3, [pc, #196]	; (80025ac <HAL_I2C_MspInit+0x16c>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80024ec:	4b2f      	ldr	r3, [pc, #188]	; (80025ac <HAL_I2C_MspInit+0x16c>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024f2:	4b2e      	ldr	r3, [pc, #184]	; (80025ac <HAL_I2C_MspInit+0x16c>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024f8:	4b2c      	ldr	r3, [pc, #176]	; (80025ac <HAL_I2C_MspInit+0x16c>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80024fe:	482b      	ldr	r0, [pc, #172]	; (80025ac <HAL_I2C_MspInit+0x16c>)
 8002500:	f001 f914 	bl	800372c <HAL_DMA_Init>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 800250a:	f000 f953 	bl	80027b4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a26      	ldr	r2, [pc, #152]	; (80025ac <HAL_I2C_MspInit+0x16c>)
 8002512:	639a      	str	r2, [r3, #56]	; 0x38
 8002514:	4a25      	ldr	r2, [pc, #148]	; (80025ac <HAL_I2C_MspInit+0x16c>)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800251a:	4b26      	ldr	r3, [pc, #152]	; (80025b4 <HAL_I2C_MspInit+0x174>)
 800251c:	4a26      	ldr	r2, [pc, #152]	; (80025b8 <HAL_I2C_MspInit+0x178>)
 800251e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8002520:	4b24      	ldr	r3, [pc, #144]	; (80025b4 <HAL_I2C_MspInit+0x174>)
 8002522:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002526:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002528:	4b22      	ldr	r3, [pc, #136]	; (80025b4 <HAL_I2C_MspInit+0x174>)
 800252a:	2240      	movs	r2, #64	; 0x40
 800252c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800252e:	4b21      	ldr	r3, [pc, #132]	; (80025b4 <HAL_I2C_MspInit+0x174>)
 8002530:	2200      	movs	r2, #0
 8002532:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002534:	4b1f      	ldr	r3, [pc, #124]	; (80025b4 <HAL_I2C_MspInit+0x174>)
 8002536:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800253a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800253c:	4b1d      	ldr	r3, [pc, #116]	; (80025b4 <HAL_I2C_MspInit+0x174>)
 800253e:	2200      	movs	r2, #0
 8002540:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002542:	4b1c      	ldr	r3, [pc, #112]	; (80025b4 <HAL_I2C_MspInit+0x174>)
 8002544:	2200      	movs	r2, #0
 8002546:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002548:	4b1a      	ldr	r3, [pc, #104]	; (80025b4 <HAL_I2C_MspInit+0x174>)
 800254a:	2200      	movs	r2, #0
 800254c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800254e:	4b19      	ldr	r3, [pc, #100]	; (80025b4 <HAL_I2C_MspInit+0x174>)
 8002550:	2200      	movs	r2, #0
 8002552:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002554:	4b17      	ldr	r3, [pc, #92]	; (80025b4 <HAL_I2C_MspInit+0x174>)
 8002556:	2200      	movs	r2, #0
 8002558:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800255a:	4816      	ldr	r0, [pc, #88]	; (80025b4 <HAL_I2C_MspInit+0x174>)
 800255c:	f001 f8e6 	bl	800372c <HAL_DMA_Init>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8002566:	f000 f925 	bl	80027b4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a11      	ldr	r2, [pc, #68]	; (80025b4 <HAL_I2C_MspInit+0x174>)
 800256e:	635a      	str	r2, [r3, #52]	; 0x34
 8002570:	4a10      	ldr	r2, [pc, #64]	; (80025b4 <HAL_I2C_MspInit+0x174>)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002576:	2200      	movs	r2, #0
 8002578:	2100      	movs	r1, #0
 800257a:	201f      	movs	r0, #31
 800257c:	f001 f89f 	bl	80036be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002580:	201f      	movs	r0, #31
 8002582:	f001 f8b8 	bl	80036f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002586:	2200      	movs	r2, #0
 8002588:	2100      	movs	r1, #0
 800258a:	2020      	movs	r0, #32
 800258c:	f001 f897 	bl	80036be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002590:	2020      	movs	r0, #32
 8002592:	f001 f8b0 	bl	80036f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002596:	bf00      	nop
 8002598:	3728      	adds	r7, #40	; 0x28
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40005400 	.word	0x40005400
 80025a4:	40023800 	.word	0x40023800
 80025a8:	40020400 	.word	0x40020400
 80025ac:	20002114 	.word	0x20002114
 80025b0:	40026010 	.word	0x40026010
 80025b4:	20002060 	.word	0x20002060
 80025b8:	400260a0 	.word	0x400260a0

080025bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025c2:	f000 ff0b 	bl	80033dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025c6:	f000 f88b 	bl	80026e0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025ca:	f7ff feb9 	bl	8002340 <MX_GPIO_Init>
  MX_DMA_Init();
 80025ce:	f7ff fe51 	bl	8002274 <MX_DMA_Init>
  MX_UART4_Init();
 80025d2:	f000 fb2d 	bl	8002c30 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80025d6:	f000 fb55 	bl	8002c84 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80025da:	f000 fa15 	bl	8002a08 <MX_TIM3_Init>
  MX_I2C1_Init();
 80025de:	f7ff ff01 	bl	80023e4 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80025e2:	f000 fb79 	bl	8002cd8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Wait for everyone to start */
  HAL_Delay(15);
 80025e6:	200f      	movs	r0, #15
 80025e8:	f000 ff6a 	bl	80034c0 <HAL_Delay>
  /* Peripherals initialization */
  UART_Init();
 80025ec:	f7ff fa32 	bl	8001a54 <UART_Init>
  /* Task definition 	Name						Init process					Main process						1ms it process						Gyro data callback process */
//  TASK_MANAGER_Add_Task("Gyro", 					MPU_Init, 						NULL, 								MPU_Read_All_Dma,  					NULL);
  TASK_MANAGER_Add_Task("Complementary Filter", 	COMPLEMENTARY_FILTER_Init, 		NULL, 								NULL,								NULL);
 80025f0:	2300      	movs	r3, #0
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	2300      	movs	r3, #0
 80025f6:	2200      	movs	r2, #0
 80025f8:	4924      	ldr	r1, [pc, #144]	; (800268c <main+0xd0>)
 80025fa:	4825      	ldr	r0, [pc, #148]	; (8002690 <main+0xd4>)
 80025fc:	f000 fe8c 	bl	8003318 <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("Controller", 				CONTROLLER_Init, 				NULL, 								NULL, 								NULL);
 8002600:	2300      	movs	r3, #0
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	2300      	movs	r3, #0
 8002606:	2200      	movs	r2, #0
 8002608:	4922      	ldr	r1, [pc, #136]	; (8002694 <main+0xd8>)
 800260a:	4823      	ldr	r0, [pc, #140]	; (8002698 <main+0xdc>)
 800260c:	f000 fe84 	bl	8003318 <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("Motor Mixer", 				NULL, 							NULL, 								NULL, 								NULL);
 8002610:	2300      	movs	r3, #0
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	2300      	movs	r3, #0
 8002616:	2200      	movs	r2, #0
 8002618:	2100      	movs	r1, #0
 800261a:	4820      	ldr	r0, [pc, #128]	; (800269c <main+0xe0>)
 800261c:	f000 fe7c 	bl	8003318 <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("High Level", 				HIGH_LEVEL_Init, 				NULL, 								HIGH_LEVEL_Process_Main, 			NULL);
 8002620:	2300      	movs	r3, #0
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	4b1e      	ldr	r3, [pc, #120]	; (80026a0 <main+0xe4>)
 8002626:	2200      	movs	r2, #0
 8002628:	491e      	ldr	r1, [pc, #120]	; (80026a4 <main+0xe8>)
 800262a:	481f      	ldr	r0, [pc, #124]	; (80026a8 <main+0xec>)
 800262c:	f000 fe74 	bl	8003318 <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("Motors",					MOTOR_Init, 					NULL, 								MOTOR_Process, 						NULL);
 8002630:	2300      	movs	r3, #0
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <main+0xf0>)
 8002636:	2200      	movs	r2, #0
 8002638:	491d      	ldr	r1, [pc, #116]	; (80026b0 <main+0xf4>)
 800263a:	481e      	ldr	r0, [pc, #120]	; (80026b4 <main+0xf8>)
 800263c:	f000 fe6c 	bl	8003318 <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("Radio", 					RADIO_Process_Init, 			RADIO_Process_Main, 				NULL, 								NULL);
 8002640:	2300      	movs	r3, #0
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	2300      	movs	r3, #0
 8002646:	4a1c      	ldr	r2, [pc, #112]	; (80026b8 <main+0xfc>)
 8002648:	491c      	ldr	r1, [pc, #112]	; (80026bc <main+0x100>)
 800264a:	481d      	ldr	r0, [pc, #116]	; (80026c0 <main+0x104>)
 800264c:	f000 fe64 	bl	8003318 <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("Data Logger", 				DATA_LOGGER_Init, 				DATA_LOGGER_Main, 					NULL, 								NULL);
 8002650:	2300      	movs	r3, #0
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	2300      	movs	r3, #0
 8002656:	4a1b      	ldr	r2, [pc, #108]	; (80026c4 <main+0x108>)
 8002658:	491b      	ldr	r1, [pc, #108]	; (80026c8 <main+0x10c>)
 800265a:	481c      	ldr	r0, [pc, #112]	; (80026cc <main+0x110>)
 800265c:	f000 fe5c 	bl	8003318 <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("Led", 						NULL, 							NULL, 								Led_main_ms, NULL);
 8002660:	2300      	movs	r3, #0
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	4b1a      	ldr	r3, [pc, #104]	; (80026d0 <main+0x114>)
 8002666:	2200      	movs	r2, #0
 8002668:	2100      	movs	r1, #0
 800266a:	481a      	ldr	r0, [pc, #104]	; (80026d4 <main+0x118>)
 800266c:	f000 fe54 	bl	8003318 <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("Supervisor", 				NULL, 							NULL, 								SUPERVISOR_Process_Ms, NULL);
 8002670:	2300      	movs	r3, #0
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	4b18      	ldr	r3, [pc, #96]	; (80026d8 <main+0x11c>)
 8002676:	2200      	movs	r2, #0
 8002678:	2100      	movs	r1, #0
 800267a:	4818      	ldr	r0, [pc, #96]	; (80026dc <main+0x120>)
 800267c:	f000 fe4c 	bl	8003318 <TASK_MANAGER_Add_Task>

  /* System initialization */
  TASK_MANAGER_Init();
 8002680:	f000 fd90 	bl	80031a4 <TASK_MANAGER_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  TASK_MANAGER_Main();
 8002684:	f000 fdbe 	bl	8003204 <TASK_MANAGER_Main>
 8002688:	e7fc      	b.n	8002684 <main+0xc8>
 800268a:	bf00      	nop
 800268c:	080004c1 	.word	0x080004c1
 8002690:	0800899c 	.word	0x0800899c
 8002694:	08000511 	.word	0x08000511
 8002698:	080089b4 	.word	0x080089b4
 800269c:	080089c0 	.word	0x080089c0
 80026a0:	08001265 	.word	0x08001265
 80026a4:	08001225 	.word	0x08001225
 80026a8:	080089cc 	.word	0x080089cc
 80026ac:	08001535 	.word	0x08001535
 80026b0:	08001525 	.word	0x08001525
 80026b4:	080089d8 	.word	0x080089d8
 80026b8:	08001f01 	.word	0x08001f01
 80026bc:	08001eed 	.word	0x08001eed
 80026c0:	080089e0 	.word	0x080089e0
 80026c4:	0800098d 	.word	0x0800098d
 80026c8:	08000591 	.word	0x08000591
 80026cc:	080089e8 	.word	0x080089e8
 80026d0:	080013b5 	.word	0x080013b5
 80026d4:	080089f4 	.word	0x080089f4
 80026d8:	0800317f 	.word	0x0800317f
 80026dc:	080089f8 	.word	0x080089f8

080026e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b094      	sub	sp, #80	; 0x50
 80026e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026e6:	f107 0320 	add.w	r3, r7, #32
 80026ea:	2230      	movs	r2, #48	; 0x30
 80026ec:	2100      	movs	r1, #0
 80026ee:	4618      	mov	r0, r3
 80026f0:	f006 f89a 	bl	8008828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026f4:	f107 030c 	add.w	r3, r7, #12
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	605a      	str	r2, [r3, #4]
 80026fe:	609a      	str	r2, [r3, #8]
 8002700:	60da      	str	r2, [r3, #12]
 8002702:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002704:	2300      	movs	r3, #0
 8002706:	60bb      	str	r3, [r7, #8]
 8002708:	4b28      	ldr	r3, [pc, #160]	; (80027ac <SystemClock_Config+0xcc>)
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	4a27      	ldr	r2, [pc, #156]	; (80027ac <SystemClock_Config+0xcc>)
 800270e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002712:	6413      	str	r3, [r2, #64]	; 0x40
 8002714:	4b25      	ldr	r3, [pc, #148]	; (80027ac <SystemClock_Config+0xcc>)
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002720:	2300      	movs	r3, #0
 8002722:	607b      	str	r3, [r7, #4]
 8002724:	4b22      	ldr	r3, [pc, #136]	; (80027b0 <SystemClock_Config+0xd0>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a21      	ldr	r2, [pc, #132]	; (80027b0 <SystemClock_Config+0xd0>)
 800272a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	4b1f      	ldr	r3, [pc, #124]	; (80027b0 <SystemClock_Config+0xd0>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002738:	607b      	str	r3, [r7, #4]
 800273a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800273c:	2302      	movs	r3, #2
 800273e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002740:	2301      	movs	r3, #1
 8002742:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002744:	2310      	movs	r3, #16
 8002746:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002748:	2302      	movs	r3, #2
 800274a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800274c:	2300      	movs	r3, #0
 800274e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002750:	2308      	movs	r3, #8
 8002752:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002754:	23a8      	movs	r3, #168	; 0xa8
 8002756:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002758:	2302      	movs	r3, #2
 800275a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800275c:	2304      	movs	r3, #4
 800275e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002760:	f107 0320 	add.w	r3, r7, #32
 8002764:	4618      	mov	r0, r3
 8002766:	f003 fbb3 	bl	8005ed0 <HAL_RCC_OscConfig>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002770:	f000 f820 	bl	80027b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002774:	230f      	movs	r3, #15
 8002776:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002778:	2302      	movs	r3, #2
 800277a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800277c:	2300      	movs	r3, #0
 800277e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002780:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002784:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800278a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800278c:	f107 030c 	add.w	r3, r7, #12
 8002790:	2105      	movs	r1, #5
 8002792:	4618      	mov	r0, r3
 8002794:	f003 fe14 	bl	80063c0 <HAL_RCC_ClockConfig>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800279e:	f000 f809 	bl	80027b4 <Error_Handler>
  }
}
 80027a2:	bf00      	nop
 80027a4:	3750      	adds	r7, #80	; 0x50
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40023800 	.word	0x40023800
 80027b0:	40007000 	.word	0x40007000

080027b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027b8:	b672      	cpsid	i
}
 80027ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027bc:	e7fe      	b.n	80027bc <Error_Handler+0x8>
	...

080027c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	607b      	str	r3, [r7, #4]
 80027ca:	4b10      	ldr	r3, [pc, #64]	; (800280c <HAL_MspInit+0x4c>)
 80027cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ce:	4a0f      	ldr	r2, [pc, #60]	; (800280c <HAL_MspInit+0x4c>)
 80027d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027d4:	6453      	str	r3, [r2, #68]	; 0x44
 80027d6:	4b0d      	ldr	r3, [pc, #52]	; (800280c <HAL_MspInit+0x4c>)
 80027d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027de:	607b      	str	r3, [r7, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	603b      	str	r3, [r7, #0]
 80027e6:	4b09      	ldr	r3, [pc, #36]	; (800280c <HAL_MspInit+0x4c>)
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	4a08      	ldr	r2, [pc, #32]	; (800280c <HAL_MspInit+0x4c>)
 80027ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f0:	6413      	str	r3, [r2, #64]	; 0x40
 80027f2:	4b06      	ldr	r3, [pc, #24]	; (800280c <HAL_MspInit+0x4c>)
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fa:	603b      	str	r3, [r7, #0]
 80027fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	40023800 	.word	0x40023800

08002810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002814:	e7fe      	b.n	8002814 <NMI_Handler+0x4>

08002816 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002816:	b480      	push	{r7}
 8002818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800281a:	e7fe      	b.n	800281a <HardFault_Handler+0x4>

0800281c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002820:	e7fe      	b.n	8002820 <MemManage_Handler+0x4>

08002822 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002822:	b480      	push	{r7}
 8002824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002826:	e7fe      	b.n	8002826 <BusFault_Handler+0x4>

08002828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800282c:	e7fe      	b.n	800282c <UsageFault_Handler+0x4>

0800282e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800282e:	b480      	push	{r7}
 8002830:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002832:	bf00      	nop
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002840:	bf00      	nop
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800284a:	b480      	push	{r7}
 800284c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800284e:	bf00      	nop
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800285c:	f000 fe10 	bl	8003480 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  TASK_MANAGER_It_ms();
 8002860:	f000 fcfc 	bl	800325c <TASK_MANAGER_It_ms>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002864:	bf00      	nop
 8002866:	bd80      	pop	{r7, pc}

08002868 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800286c:	4802      	ldr	r0, [pc, #8]	; (8002878 <DMA1_Stream0_IRQHandler+0x10>)
 800286e:	f001 f8f5 	bl	8003a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	20002114 	.word	0x20002114

0800287c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002880:	4802      	ldr	r0, [pc, #8]	; (800288c <DMA1_Stream1_IRQHandler+0x10>)
 8002882:	f001 f8eb 	bl	8003a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002886:	bf00      	nop
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	2000221c 	.word	0x2000221c

08002890 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002894:	4802      	ldr	r0, [pc, #8]	; (80028a0 <DMA1_Stream2_IRQHandler+0x10>)
 8002896:	f001 f8e1 	bl	8003a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800289a:	bf00      	nop
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	200021bc 	.word	0x200021bc

080028a4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80028a8:	4802      	ldr	r0, [pc, #8]	; (80028b4 <DMA1_Stream3_IRQHandler+0x10>)
 80028aa:	f001 f8d7 	bl	8003a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80028ae:	bf00      	nop
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	200022c0 	.word	0x200022c0

080028b8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80028bc:	4802      	ldr	r0, [pc, #8]	; (80028c8 <DMA1_Stream4_IRQHandler+0x10>)
 80028be:	f001 f8cd 	bl	8003a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80028c2:	bf00      	nop
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	20002468 	.word	0x20002468

080028cc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80028d0:	4802      	ldr	r0, [pc, #8]	; (80028dc <DMA1_Stream6_IRQHandler+0x10>)
 80028d2:	f001 f8c3 	bl	8003a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80028d6:	bf00      	nop
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	20002060 	.word	0x20002060

080028e0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80028e4:	4802      	ldr	r0, [pc, #8]	; (80028f0 <I2C1_EV_IRQHandler+0x10>)
 80028e6:	f001 fe2b 	bl	8004540 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80028ea:	bf00      	nop
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	200020c0 	.word	0x200020c0

080028f4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80028f8:	4802      	ldr	r0, [pc, #8]	; (8002904 <I2C1_ER_IRQHandler+0x10>)
 80028fa:	f001 ff92 	bl	8004822 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	200020c0 	.word	0x200020c0

08002908 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800290c:	4803      	ldr	r0, [pc, #12]	; (800291c <USART1_IRQHandler+0x14>)
 800290e:	f004 ff19 	bl	8007744 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  UART_Idle_Line_Callback(uart_e1);
 8002912:	2000      	movs	r0, #0
 8002914:	f7fe ff54 	bl	80017c0 <UART_Idle_Line_Callback>
  /* USER CODE END USART1_IRQn 1 */
}
 8002918:	bf00      	nop
 800291a:	bd80      	pop	{r7, pc}
 800291c:	200023e0 	.word	0x200023e0

08002920 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002924:	4803      	ldr	r0, [pc, #12]	; (8002934 <USART3_IRQHandler+0x14>)
 8002926:	f004 ff0d 	bl	8007744 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  UART_Idle_Line_Callback(uart_e3);
 800292a:	2001      	movs	r0, #1
 800292c:	f7fe ff48 	bl	80017c0 <UART_Idle_Line_Callback>
  /* USER CODE END USART3_IRQn 1 */
}
 8002930:	bf00      	nop
 8002932:	bd80      	pop	{r7, pc}
 8002934:	2000227c 	.word	0x2000227c

08002938 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800293c:	4803      	ldr	r0, [pc, #12]	; (800294c <UART4_IRQHandler+0x14>)
 800293e:	f004 ff01 	bl	8007744 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  UART_Idle_Line_Callback(uart_e4);
 8002942:	2002      	movs	r0, #2
 8002944:	f7fe ff3c 	bl	80017c0 <UART_Idle_Line_Callback>
  /* USER CODE END UART4_IRQn 1 */
}
 8002948:	bf00      	nop
 800294a:	bd80      	pop	{r7, pc}
 800294c:	20002424 	.word	0x20002424

08002950 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002954:	4802      	ldr	r0, [pc, #8]	; (8002960 <DMA2_Stream2_IRQHandler+0x10>)
 8002956:	f001 f881 	bl	8003a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	20002380 	.word	0x20002380

08002964 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002968:	4802      	ldr	r0, [pc, #8]	; (8002974 <DMA2_Stream7_IRQHandler+0x10>)
 800296a:	f001 f877 	bl	8003a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800296e:	bf00      	nop
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20002320 	.word	0x20002320

08002978 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
	if(huart == &huart4)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a0d      	ldr	r2, [pc, #52]	; (80029b8 <HAL_UART_TxCpltCallback+0x40>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d103      	bne.n	8002990 <HAL_UART_TxCpltCallback+0x18>
	{
		UART_Transfer_Complete_Callback(uart_e4);
 8002988:	2002      	movs	r0, #2
 800298a:	f7fe ff67 	bl	800185c <UART_Transfer_Complete_Callback>
	}
	else if(huart == &huart3)
	{
		UART_Transfer_Complete_Callback(uart_e3);
	}
}
 800298e:	e00e      	b.n	80029ae <HAL_UART_TxCpltCallback+0x36>
	else if(huart == &huart1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a0a      	ldr	r2, [pc, #40]	; (80029bc <HAL_UART_TxCpltCallback+0x44>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d103      	bne.n	80029a0 <HAL_UART_TxCpltCallback+0x28>
		UART_Transfer_Complete_Callback(uart_e1);
 8002998:	2000      	movs	r0, #0
 800299a:	f7fe ff5f 	bl	800185c <UART_Transfer_Complete_Callback>
}
 800299e:	e006      	b.n	80029ae <HAL_UART_TxCpltCallback+0x36>
	else if(huart == &huart3)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a07      	ldr	r2, [pc, #28]	; (80029c0 <HAL_UART_TxCpltCallback+0x48>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d102      	bne.n	80029ae <HAL_UART_TxCpltCallback+0x36>
		UART_Transfer_Complete_Callback(uart_e3);
 80029a8:	2001      	movs	r0, #1
 80029aa:	f7fe ff57 	bl	800185c <UART_Transfer_Complete_Callback>
}
 80029ae:	bf00      	nop
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	20002424 	.word	0x20002424
 80029bc:	200023e0 	.word	0x200023e0
 80029c0:	2000227c 	.word	0x2000227c

080029c4 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
	if(MPU_Rx_Complete_Callback())
 80029cc:	f7ff fc28 	bl	8002220 <MPU_Rx_Complete_Callback>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_I2C_MemRxCpltCallback+0x16>
	{
	  TASK_MANAGER_Gyro_Data_Ready();
 80029d6:	f000 fc73 	bl	80032c0 <TASK_MANAGER_Gyro_Data_Ready>
	}
}
 80029da:	bf00      	nop
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
	...

080029e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029e8:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <SystemInit+0x20>)
 80029ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ee:	4a05      	ldr	r2, [pc, #20]	; (8002a04 <SystemInit+0x20>)
 80029f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029f8:	bf00      	nop
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08e      	sub	sp, #56	; 0x38
 8002a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	605a      	str	r2, [r3, #4]
 8002a18:	609a      	str	r2, [r3, #8]
 8002a1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a1c:	f107 0320 	add.w	r3, r7, #32
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a26:	1d3b      	adds	r3, r7, #4
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	605a      	str	r2, [r3, #4]
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	60da      	str	r2, [r3, #12]
 8002a32:	611a      	str	r2, [r3, #16]
 8002a34:	615a      	str	r2, [r3, #20]
 8002a36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a38:	4b3d      	ldr	r3, [pc, #244]	; (8002b30 <MX_TIM3_Init+0x128>)
 8002a3a:	4a3e      	ldr	r2, [pc, #248]	; (8002b34 <MX_TIM3_Init+0x12c>)
 8002a3c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8002a3e:	4b3c      	ldr	r3, [pc, #240]	; (8002b30 <MX_TIM3_Init+0x128>)
 8002a40:	2253      	movs	r2, #83	; 0x53
 8002a42:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a44:	4b3a      	ldr	r3, [pc, #232]	; (8002b30 <MX_TIM3_Init+0x128>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3999;
 8002a4a:	4b39      	ldr	r3, [pc, #228]	; (8002b30 <MX_TIM3_Init+0x128>)
 8002a4c:	f640 729f 	movw	r2, #3999	; 0xf9f
 8002a50:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a52:	4b37      	ldr	r3, [pc, #220]	; (8002b30 <MX_TIM3_Init+0x128>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a58:	4b35      	ldr	r3, [pc, #212]	; (8002b30 <MX_TIM3_Init+0x128>)
 8002a5a:	2280      	movs	r2, #128	; 0x80
 8002a5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a5e:	4834      	ldr	r0, [pc, #208]	; (8002b30 <MX_TIM3_Init+0x128>)
 8002a60:	f003 fe7e 	bl	8006760 <HAL_TIM_Base_Init>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002a6a:	f7ff fea3 	bl	80027b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a72:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a78:	4619      	mov	r1, r3
 8002a7a:	482d      	ldr	r0, [pc, #180]	; (8002b30 <MX_TIM3_Init+0x128>)
 8002a7c:	f004 f912 	bl	8006ca4 <HAL_TIM_ConfigClockSource>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002a86:	f7ff fe95 	bl	80027b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002a8a:	4829      	ldr	r0, [pc, #164]	; (8002b30 <MX_TIM3_Init+0x128>)
 8002a8c:	f003 feb7 	bl	80067fe <HAL_TIM_PWM_Init>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002a96:	f7ff fe8d 	bl	80027b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002aa2:	f107 0320 	add.w	r3, r7, #32
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4821      	ldr	r0, [pc, #132]	; (8002b30 <MX_TIM3_Init+0x128>)
 8002aaa:	f004 fcd3 	bl	8007454 <HAL_TIMEx_MasterConfigSynchronization>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002ab4:	f7ff fe7e 	bl	80027b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ab8:	2360      	movs	r3, #96	; 0x60
 8002aba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 999;
 8002abc:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002ac0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002aca:	1d3b      	adds	r3, r7, #4
 8002acc:	2200      	movs	r2, #0
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4817      	ldr	r0, [pc, #92]	; (8002b30 <MX_TIM3_Init+0x128>)
 8002ad2:	f004 f825 	bl	8006b20 <HAL_TIM_PWM_ConfigChannel>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002adc:	f7ff fe6a 	bl	80027b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ae0:	1d3b      	adds	r3, r7, #4
 8002ae2:	2204      	movs	r2, #4
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4812      	ldr	r0, [pc, #72]	; (8002b30 <MX_TIM3_Init+0x128>)
 8002ae8:	f004 f81a 	bl	8006b20 <HAL_TIM_PWM_ConfigChannel>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002af2:	f7ff fe5f 	bl	80027b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002af6:	1d3b      	adds	r3, r7, #4
 8002af8:	2208      	movs	r2, #8
 8002afa:	4619      	mov	r1, r3
 8002afc:	480c      	ldr	r0, [pc, #48]	; (8002b30 <MX_TIM3_Init+0x128>)
 8002afe:	f004 f80f 	bl	8006b20 <HAL_TIM_PWM_ConfigChannel>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8002b08:	f7ff fe54 	bl	80027b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002b0c:	1d3b      	adds	r3, r7, #4
 8002b0e:	220c      	movs	r2, #12
 8002b10:	4619      	mov	r1, r3
 8002b12:	4807      	ldr	r0, [pc, #28]	; (8002b30 <MX_TIM3_Init+0x128>)
 8002b14:	f004 f804 	bl	8006b20 <HAL_TIM_PWM_ConfigChannel>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8002b1e:	f7ff fe49 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002b22:	4803      	ldr	r0, [pc, #12]	; (8002b30 <MX_TIM3_Init+0x128>)
 8002b24:	f000 f82a 	bl	8002b7c <HAL_TIM_MspPostInit>

}
 8002b28:	bf00      	nop
 8002b2a:	3738      	adds	r7, #56	; 0x38
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	20002174 	.word	0x20002174
 8002b34:	40000400 	.word	0x40000400

08002b38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a0b      	ldr	r2, [pc, #44]	; (8002b74 <HAL_TIM_Base_MspInit+0x3c>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d10d      	bne.n	8002b66 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	4b0a      	ldr	r3, [pc, #40]	; (8002b78 <HAL_TIM_Base_MspInit+0x40>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	4a09      	ldr	r2, [pc, #36]	; (8002b78 <HAL_TIM_Base_MspInit+0x40>)
 8002b54:	f043 0302 	orr.w	r3, r3, #2
 8002b58:	6413      	str	r3, [r2, #64]	; 0x40
 8002b5a:	4b07      	ldr	r3, [pc, #28]	; (8002b78 <HAL_TIM_Base_MspInit+0x40>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002b66:	bf00      	nop
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40000400 	.word	0x40000400
 8002b78:	40023800 	.word	0x40023800

08002b7c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08a      	sub	sp, #40	; 0x28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b84:	f107 0314 	add.w	r3, r7, #20
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	605a      	str	r2, [r3, #4]
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	60da      	str	r2, [r3, #12]
 8002b92:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a21      	ldr	r2, [pc, #132]	; (8002c20 <HAL_TIM_MspPostInit+0xa4>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d13b      	bne.n	8002c16 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	613b      	str	r3, [r7, #16]
 8002ba2:	4b20      	ldr	r3, [pc, #128]	; (8002c24 <HAL_TIM_MspPostInit+0xa8>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	4a1f      	ldr	r2, [pc, #124]	; (8002c24 <HAL_TIM_MspPostInit+0xa8>)
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	6313      	str	r3, [r2, #48]	; 0x30
 8002bae:	4b1d      	ldr	r3, [pc, #116]	; (8002c24 <HAL_TIM_MspPostInit+0xa8>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	613b      	str	r3, [r7, #16]
 8002bb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	4b19      	ldr	r3, [pc, #100]	; (8002c24 <HAL_TIM_MspPostInit+0xa8>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	4a18      	ldr	r2, [pc, #96]	; (8002c24 <HAL_TIM_MspPostInit+0xa8>)
 8002bc4:	f043 0302 	orr.w	r3, r3, #2
 8002bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bca:	4b16      	ldr	r3, [pc, #88]	; (8002c24 <HAL_TIM_MspPostInit+0xa8>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002bd6:	23c0      	movs	r3, #192	; 0xc0
 8002bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be2:	2300      	movs	r3, #0
 8002be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002be6:	2302      	movs	r3, #2
 8002be8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bea:	f107 0314 	add.w	r3, r7, #20
 8002bee:	4619      	mov	r1, r3
 8002bf0:	480d      	ldr	r0, [pc, #52]	; (8002c28 <HAL_TIM_MspPostInit+0xac>)
 8002bf2:	f001 f9ab 	bl	8003f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c02:	2300      	movs	r3, #0
 8002c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c06:	2302      	movs	r3, #2
 8002c08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c0a:	f107 0314 	add.w	r3, r7, #20
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4806      	ldr	r0, [pc, #24]	; (8002c2c <HAL_TIM_MspPostInit+0xb0>)
 8002c12:	f001 f99b 	bl	8003f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002c16:	bf00      	nop
 8002c18:	3728      	adds	r7, #40	; 0x28
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40000400 	.word	0x40000400
 8002c24:	40023800 	.word	0x40023800
 8002c28:	40020000 	.word	0x40020000
 8002c2c:	40020400 	.word	0x40020400

08002c30 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002c34:	4b11      	ldr	r3, [pc, #68]	; (8002c7c <MX_UART4_Init+0x4c>)
 8002c36:	4a12      	ldr	r2, [pc, #72]	; (8002c80 <MX_UART4_Init+0x50>)
 8002c38:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002c3a:	4b10      	ldr	r3, [pc, #64]	; (8002c7c <MX_UART4_Init+0x4c>)
 8002c3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c40:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002c42:	4b0e      	ldr	r3, [pc, #56]	; (8002c7c <MX_UART4_Init+0x4c>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002c48:	4b0c      	ldr	r3, [pc, #48]	; (8002c7c <MX_UART4_Init+0x4c>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002c4e:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <MX_UART4_Init+0x4c>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002c54:	4b09      	ldr	r3, [pc, #36]	; (8002c7c <MX_UART4_Init+0x4c>)
 8002c56:	220c      	movs	r2, #12
 8002c58:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c5a:	4b08      	ldr	r3, [pc, #32]	; (8002c7c <MX_UART4_Init+0x4c>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c60:	4b06      	ldr	r3, [pc, #24]	; (8002c7c <MX_UART4_Init+0x4c>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002c66:	4805      	ldr	r0, [pc, #20]	; (8002c7c <MX_UART4_Init+0x4c>)
 8002c68:	f004 fc70 	bl	800754c <HAL_UART_Init>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002c72:	f7ff fd9f 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20002424 	.word	0x20002424
 8002c80:	40004c00 	.word	0x40004c00

08002c84 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c88:	4b11      	ldr	r3, [pc, #68]	; (8002cd0 <MX_USART1_UART_Init+0x4c>)
 8002c8a:	4a12      	ldr	r2, [pc, #72]	; (8002cd4 <MX_USART1_UART_Init+0x50>)
 8002c8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8002c8e:	4b10      	ldr	r3, [pc, #64]	; (8002cd0 <MX_USART1_UART_Init+0x4c>)
 8002c90:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8002c94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c96:	4b0e      	ldr	r3, [pc, #56]	; (8002cd0 <MX_USART1_UART_Init+0x4c>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c9c:	4b0c      	ldr	r3, [pc, #48]	; (8002cd0 <MX_USART1_UART_Init+0x4c>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ca2:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <MX_USART1_UART_Init+0x4c>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ca8:	4b09      	ldr	r3, [pc, #36]	; (8002cd0 <MX_USART1_UART_Init+0x4c>)
 8002caa:	220c      	movs	r2, #12
 8002cac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cae:	4b08      	ldr	r3, [pc, #32]	; (8002cd0 <MX_USART1_UART_Init+0x4c>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cb4:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <MX_USART1_UART_Init+0x4c>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002cba:	4805      	ldr	r0, [pc, #20]	; (8002cd0 <MX_USART1_UART_Init+0x4c>)
 8002cbc:	f004 fc46 	bl	800754c <HAL_UART_Init>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002cc6:	f7ff fd75 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002cca:	bf00      	nop
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	200023e0 	.word	0x200023e0
 8002cd4:	40011000 	.word	0x40011000

08002cd8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002cdc:	4b11      	ldr	r3, [pc, #68]	; (8002d24 <MX_USART3_UART_Init+0x4c>)
 8002cde:	4a12      	ldr	r2, [pc, #72]	; (8002d28 <MX_USART3_UART_Init+0x50>)
 8002ce0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002ce2:	4b10      	ldr	r3, [pc, #64]	; (8002d24 <MX_USART3_UART_Init+0x4c>)
 8002ce4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ce8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002cea:	4b0e      	ldr	r3, [pc, #56]	; (8002d24 <MX_USART3_UART_Init+0x4c>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002cf0:	4b0c      	ldr	r3, [pc, #48]	; (8002d24 <MX_USART3_UART_Init+0x4c>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002cf6:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <MX_USART3_UART_Init+0x4c>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002cfc:	4b09      	ldr	r3, [pc, #36]	; (8002d24 <MX_USART3_UART_Init+0x4c>)
 8002cfe:	220c      	movs	r2, #12
 8002d00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d02:	4b08      	ldr	r3, [pc, #32]	; (8002d24 <MX_USART3_UART_Init+0x4c>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d08:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <MX_USART3_UART_Init+0x4c>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002d0e:	4805      	ldr	r0, [pc, #20]	; (8002d24 <MX_USART3_UART_Init+0x4c>)
 8002d10:	f004 fc1c 	bl	800754c <HAL_UART_Init>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002d1a:	f7ff fd4b 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002d1e:	bf00      	nop
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	2000227c 	.word	0x2000227c
 8002d28:	40004800 	.word	0x40004800

08002d2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08e      	sub	sp, #56	; 0x38
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	605a      	str	r2, [r3, #4]
 8002d3e:	609a      	str	r2, [r3, #8]
 8002d40:	60da      	str	r2, [r3, #12]
 8002d42:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a96      	ldr	r2, [pc, #600]	; (8002fa4 <HAL_UART_MspInit+0x278>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	f040 8092 	bne.w	8002e74 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002d50:	2300      	movs	r3, #0
 8002d52:	623b      	str	r3, [r7, #32]
 8002d54:	4b94      	ldr	r3, [pc, #592]	; (8002fa8 <HAL_UART_MspInit+0x27c>)
 8002d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d58:	4a93      	ldr	r2, [pc, #588]	; (8002fa8 <HAL_UART_MspInit+0x27c>)
 8002d5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002d5e:	6413      	str	r3, [r2, #64]	; 0x40
 8002d60:	4b91      	ldr	r3, [pc, #580]	; (8002fa8 <HAL_UART_MspInit+0x27c>)
 8002d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d68:	623b      	str	r3, [r7, #32]
 8002d6a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	61fb      	str	r3, [r7, #28]
 8002d70:	4b8d      	ldr	r3, [pc, #564]	; (8002fa8 <HAL_UART_MspInit+0x27c>)
 8002d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d74:	4a8c      	ldr	r2, [pc, #560]	; (8002fa8 <HAL_UART_MspInit+0x27c>)
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7c:	4b8a      	ldr	r3, [pc, #552]	; (8002fa8 <HAL_UART_MspInit+0x27c>)
 8002d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	61fb      	str	r3, [r7, #28]
 8002d86:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d90:	2300      	movs	r3, #0
 8002d92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d94:	2303      	movs	r3, #3
 8002d96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002d98:	2308      	movs	r3, #8
 8002d9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002da0:	4619      	mov	r1, r3
 8002da2:	4882      	ldr	r0, [pc, #520]	; (8002fac <HAL_UART_MspInit+0x280>)
 8002da4:	f001 f8d2 	bl	8003f4c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8002da8:	4b81      	ldr	r3, [pc, #516]	; (8002fb0 <HAL_UART_MspInit+0x284>)
 8002daa:	4a82      	ldr	r2, [pc, #520]	; (8002fb4 <HAL_UART_MspInit+0x288>)
 8002dac:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8002dae:	4b80      	ldr	r3, [pc, #512]	; (8002fb0 <HAL_UART_MspInit+0x284>)
 8002db0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002db4:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002db6:	4b7e      	ldr	r3, [pc, #504]	; (8002fb0 <HAL_UART_MspInit+0x284>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dbc:	4b7c      	ldr	r3, [pc, #496]	; (8002fb0 <HAL_UART_MspInit+0x284>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002dc2:	4b7b      	ldr	r3, [pc, #492]	; (8002fb0 <HAL_UART_MspInit+0x284>)
 8002dc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dc8:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dca:	4b79      	ldr	r3, [pc, #484]	; (8002fb0 <HAL_UART_MspInit+0x284>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dd0:	4b77      	ldr	r3, [pc, #476]	; (8002fb0 <HAL_UART_MspInit+0x284>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8002dd6:	4b76      	ldr	r3, [pc, #472]	; (8002fb0 <HAL_UART_MspInit+0x284>)
 8002dd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ddc:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002dde:	4b74      	ldr	r3, [pc, #464]	; (8002fb0 <HAL_UART_MspInit+0x284>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002de4:	4b72      	ldr	r3, [pc, #456]	; (8002fb0 <HAL_UART_MspInit+0x284>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002dea:	4871      	ldr	r0, [pc, #452]	; (8002fb0 <HAL_UART_MspInit+0x284>)
 8002dec:	f000 fc9e 	bl	800372c <HAL_DMA_Init>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002df6:	f7ff fcdd 	bl	80027b4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a6c      	ldr	r2, [pc, #432]	; (8002fb0 <HAL_UART_MspInit+0x284>)
 8002dfe:	639a      	str	r2, [r3, #56]	; 0x38
 8002e00:	4a6b      	ldr	r2, [pc, #428]	; (8002fb0 <HAL_UART_MspInit+0x284>)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8002e06:	4b6c      	ldr	r3, [pc, #432]	; (8002fb8 <HAL_UART_MspInit+0x28c>)
 8002e08:	4a6c      	ldr	r2, [pc, #432]	; (8002fbc <HAL_UART_MspInit+0x290>)
 8002e0a:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8002e0c:	4b6a      	ldr	r3, [pc, #424]	; (8002fb8 <HAL_UART_MspInit+0x28c>)
 8002e0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e12:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e14:	4b68      	ldr	r3, [pc, #416]	; (8002fb8 <HAL_UART_MspInit+0x28c>)
 8002e16:	2240      	movs	r2, #64	; 0x40
 8002e18:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e1a:	4b67      	ldr	r3, [pc, #412]	; (8002fb8 <HAL_UART_MspInit+0x28c>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e20:	4b65      	ldr	r3, [pc, #404]	; (8002fb8 <HAL_UART_MspInit+0x28c>)
 8002e22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e26:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e28:	4b63      	ldr	r3, [pc, #396]	; (8002fb8 <HAL_UART_MspInit+0x28c>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e2e:	4b62      	ldr	r3, [pc, #392]	; (8002fb8 <HAL_UART_MspInit+0x28c>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8002e34:	4b60      	ldr	r3, [pc, #384]	; (8002fb8 <HAL_UART_MspInit+0x28c>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e3a:	4b5f      	ldr	r3, [pc, #380]	; (8002fb8 <HAL_UART_MspInit+0x28c>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e40:	4b5d      	ldr	r3, [pc, #372]	; (8002fb8 <HAL_UART_MspInit+0x28c>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8002e46:	485c      	ldr	r0, [pc, #368]	; (8002fb8 <HAL_UART_MspInit+0x28c>)
 8002e48:	f000 fc70 	bl	800372c <HAL_DMA_Init>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002e52:	f7ff fcaf 	bl	80027b4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a57      	ldr	r2, [pc, #348]	; (8002fb8 <HAL_UART_MspInit+0x28c>)
 8002e5a:	635a      	str	r2, [r3, #52]	; 0x34
 8002e5c:	4a56      	ldr	r2, [pc, #344]	; (8002fb8 <HAL_UART_MspInit+0x28c>)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002e62:	2200      	movs	r2, #0
 8002e64:	2100      	movs	r1, #0
 8002e66:	2034      	movs	r0, #52	; 0x34
 8002e68:	f000 fc29 	bl	80036be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002e6c:	2034      	movs	r0, #52	; 0x34
 8002e6e:	f000 fc42 	bl	80036f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002e72:	e149      	b.n	8003108 <HAL_UART_MspInit+0x3dc>
  else if(uartHandle->Instance==USART1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a51      	ldr	r2, [pc, #324]	; (8002fc0 <HAL_UART_MspInit+0x294>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	f040 80ac 	bne.w	8002fd8 <HAL_UART_MspInit+0x2ac>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e80:	2300      	movs	r3, #0
 8002e82:	61bb      	str	r3, [r7, #24]
 8002e84:	4b48      	ldr	r3, [pc, #288]	; (8002fa8 <HAL_UART_MspInit+0x27c>)
 8002e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e88:	4a47      	ldr	r2, [pc, #284]	; (8002fa8 <HAL_UART_MspInit+0x27c>)
 8002e8a:	f043 0310 	orr.w	r3, r3, #16
 8002e8e:	6453      	str	r3, [r2, #68]	; 0x44
 8002e90:	4b45      	ldr	r3, [pc, #276]	; (8002fa8 <HAL_UART_MspInit+0x27c>)
 8002e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e94:	f003 0310 	and.w	r3, r3, #16
 8002e98:	61bb      	str	r3, [r7, #24]
 8002e9a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	4b41      	ldr	r3, [pc, #260]	; (8002fa8 <HAL_UART_MspInit+0x27c>)
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea4:	4a40      	ldr	r2, [pc, #256]	; (8002fa8 <HAL_UART_MspInit+0x27c>)
 8002ea6:	f043 0302 	orr.w	r3, r3, #2
 8002eaa:	6313      	str	r3, [r2, #48]	; 0x30
 8002eac:	4b3e      	ldr	r3, [pc, #248]	; (8002fa8 <HAL_UART_MspInit+0x27c>)
 8002eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	617b      	str	r3, [r7, #20]
 8002eb6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002eb8:	23c0      	movs	r3, #192	; 0xc0
 8002eba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ec8:	2307      	movs	r3, #7
 8002eca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	483c      	ldr	r0, [pc, #240]	; (8002fc4 <HAL_UART_MspInit+0x298>)
 8002ed4:	f001 f83a 	bl	8003f4c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002ed8:	4b3b      	ldr	r3, [pc, #236]	; (8002fc8 <HAL_UART_MspInit+0x29c>)
 8002eda:	4a3c      	ldr	r2, [pc, #240]	; (8002fcc <HAL_UART_MspInit+0x2a0>)
 8002edc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002ede:	4b3a      	ldr	r3, [pc, #232]	; (8002fc8 <HAL_UART_MspInit+0x29c>)
 8002ee0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ee4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ee6:	4b38      	ldr	r3, [pc, #224]	; (8002fc8 <HAL_UART_MspInit+0x29c>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eec:	4b36      	ldr	r3, [pc, #216]	; (8002fc8 <HAL_UART_MspInit+0x29c>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ef2:	4b35      	ldr	r3, [pc, #212]	; (8002fc8 <HAL_UART_MspInit+0x29c>)
 8002ef4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ef8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002efa:	4b33      	ldr	r3, [pc, #204]	; (8002fc8 <HAL_UART_MspInit+0x29c>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f00:	4b31      	ldr	r3, [pc, #196]	; (8002fc8 <HAL_UART_MspInit+0x29c>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002f06:	4b30      	ldr	r3, [pc, #192]	; (8002fc8 <HAL_UART_MspInit+0x29c>)
 8002f08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f0c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f0e:	4b2e      	ldr	r3, [pc, #184]	; (8002fc8 <HAL_UART_MspInit+0x29c>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f14:	4b2c      	ldr	r3, [pc, #176]	; (8002fc8 <HAL_UART_MspInit+0x29c>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002f1a:	482b      	ldr	r0, [pc, #172]	; (8002fc8 <HAL_UART_MspInit+0x29c>)
 8002f1c:	f000 fc06 	bl	800372c <HAL_DMA_Init>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <HAL_UART_MspInit+0x1fe>
      Error_Handler();
 8002f26:	f7ff fc45 	bl	80027b4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a26      	ldr	r2, [pc, #152]	; (8002fc8 <HAL_UART_MspInit+0x29c>)
 8002f2e:	639a      	str	r2, [r3, #56]	; 0x38
 8002f30:	4a25      	ldr	r2, [pc, #148]	; (8002fc8 <HAL_UART_MspInit+0x29c>)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002f36:	4b26      	ldr	r3, [pc, #152]	; (8002fd0 <HAL_UART_MspInit+0x2a4>)
 8002f38:	4a26      	ldr	r2, [pc, #152]	; (8002fd4 <HAL_UART_MspInit+0x2a8>)
 8002f3a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002f3c:	4b24      	ldr	r3, [pc, #144]	; (8002fd0 <HAL_UART_MspInit+0x2a4>)
 8002f3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f42:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f44:	4b22      	ldr	r3, [pc, #136]	; (8002fd0 <HAL_UART_MspInit+0x2a4>)
 8002f46:	2240      	movs	r2, #64	; 0x40
 8002f48:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f4a:	4b21      	ldr	r3, [pc, #132]	; (8002fd0 <HAL_UART_MspInit+0x2a4>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f50:	4b1f      	ldr	r3, [pc, #124]	; (8002fd0 <HAL_UART_MspInit+0x2a4>)
 8002f52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f56:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f58:	4b1d      	ldr	r3, [pc, #116]	; (8002fd0 <HAL_UART_MspInit+0x2a4>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f5e:	4b1c      	ldr	r3, [pc, #112]	; (8002fd0 <HAL_UART_MspInit+0x2a4>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002f64:	4b1a      	ldr	r3, [pc, #104]	; (8002fd0 <HAL_UART_MspInit+0x2a4>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f6a:	4b19      	ldr	r3, [pc, #100]	; (8002fd0 <HAL_UART_MspInit+0x2a4>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f70:	4b17      	ldr	r3, [pc, #92]	; (8002fd0 <HAL_UART_MspInit+0x2a4>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002f76:	4816      	ldr	r0, [pc, #88]	; (8002fd0 <HAL_UART_MspInit+0x2a4>)
 8002f78:	f000 fbd8 	bl	800372c <HAL_DMA_Init>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <HAL_UART_MspInit+0x25a>
      Error_Handler();
 8002f82:	f7ff fc17 	bl	80027b4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a11      	ldr	r2, [pc, #68]	; (8002fd0 <HAL_UART_MspInit+0x2a4>)
 8002f8a:	635a      	str	r2, [r3, #52]	; 0x34
 8002f8c:	4a10      	ldr	r2, [pc, #64]	; (8002fd0 <HAL_UART_MspInit+0x2a4>)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002f92:	2200      	movs	r2, #0
 8002f94:	2100      	movs	r1, #0
 8002f96:	2025      	movs	r0, #37	; 0x25
 8002f98:	f000 fb91 	bl	80036be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f9c:	2025      	movs	r0, #37	; 0x25
 8002f9e:	f000 fbaa 	bl	80036f6 <HAL_NVIC_EnableIRQ>
}
 8002fa2:	e0b1      	b.n	8003108 <HAL_UART_MspInit+0x3dc>
 8002fa4:	40004c00 	.word	0x40004c00
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	40020000 	.word	0x40020000
 8002fb0:	200021bc 	.word	0x200021bc
 8002fb4:	40026040 	.word	0x40026040
 8002fb8:	20002468 	.word	0x20002468
 8002fbc:	40026070 	.word	0x40026070
 8002fc0:	40011000 	.word	0x40011000
 8002fc4:	40020400 	.word	0x40020400
 8002fc8:	20002380 	.word	0x20002380
 8002fcc:	40026440 	.word	0x40026440
 8002fd0:	20002320 	.word	0x20002320
 8002fd4:	400264b8 	.word	0x400264b8
  else if(uartHandle->Instance==USART3)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a4c      	ldr	r2, [pc, #304]	; (8003110 <HAL_UART_MspInit+0x3e4>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	f040 8092 	bne.w	8003108 <HAL_UART_MspInit+0x3dc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	613b      	str	r3, [r7, #16]
 8002fe8:	4b4a      	ldr	r3, [pc, #296]	; (8003114 <HAL_UART_MspInit+0x3e8>)
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	4a49      	ldr	r2, [pc, #292]	; (8003114 <HAL_UART_MspInit+0x3e8>)
 8002fee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ff2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff4:	4b47      	ldr	r3, [pc, #284]	; (8003114 <HAL_UART_MspInit+0x3e8>)
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003000:	2300      	movs	r3, #0
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	4b43      	ldr	r3, [pc, #268]	; (8003114 <HAL_UART_MspInit+0x3e8>)
 8003006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003008:	4a42      	ldr	r2, [pc, #264]	; (8003114 <HAL_UART_MspInit+0x3e8>)
 800300a:	f043 0302 	orr.w	r3, r3, #2
 800300e:	6313      	str	r3, [r2, #48]	; 0x30
 8003010:	4b40      	ldr	r3, [pc, #256]	; (8003114 <HAL_UART_MspInit+0x3e8>)
 8003012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800301c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003022:	2302      	movs	r3, #2
 8003024:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003026:	2300      	movs	r3, #0
 8003028:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800302a:	2303      	movs	r3, #3
 800302c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800302e:	2307      	movs	r3, #7
 8003030:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003036:	4619      	mov	r1, r3
 8003038:	4837      	ldr	r0, [pc, #220]	; (8003118 <HAL_UART_MspInit+0x3ec>)
 800303a:	f000 ff87 	bl	8003f4c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800303e:	4b37      	ldr	r3, [pc, #220]	; (800311c <HAL_UART_MspInit+0x3f0>)
 8003040:	4a37      	ldr	r2, [pc, #220]	; (8003120 <HAL_UART_MspInit+0x3f4>)
 8003042:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003044:	4b35      	ldr	r3, [pc, #212]	; (800311c <HAL_UART_MspInit+0x3f0>)
 8003046:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800304a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800304c:	4b33      	ldr	r3, [pc, #204]	; (800311c <HAL_UART_MspInit+0x3f0>)
 800304e:	2200      	movs	r2, #0
 8003050:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003052:	4b32      	ldr	r3, [pc, #200]	; (800311c <HAL_UART_MspInit+0x3f0>)
 8003054:	2200      	movs	r2, #0
 8003056:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003058:	4b30      	ldr	r3, [pc, #192]	; (800311c <HAL_UART_MspInit+0x3f0>)
 800305a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800305e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003060:	4b2e      	ldr	r3, [pc, #184]	; (800311c <HAL_UART_MspInit+0x3f0>)
 8003062:	2200      	movs	r2, #0
 8003064:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003066:	4b2d      	ldr	r3, [pc, #180]	; (800311c <HAL_UART_MspInit+0x3f0>)
 8003068:	2200      	movs	r2, #0
 800306a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800306c:	4b2b      	ldr	r3, [pc, #172]	; (800311c <HAL_UART_MspInit+0x3f0>)
 800306e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003072:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003074:	4b29      	ldr	r3, [pc, #164]	; (800311c <HAL_UART_MspInit+0x3f0>)
 8003076:	2200      	movs	r2, #0
 8003078:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800307a:	4b28      	ldr	r3, [pc, #160]	; (800311c <HAL_UART_MspInit+0x3f0>)
 800307c:	2200      	movs	r2, #0
 800307e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003080:	4826      	ldr	r0, [pc, #152]	; (800311c <HAL_UART_MspInit+0x3f0>)
 8003082:	f000 fb53 	bl	800372c <HAL_DMA_Init>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <HAL_UART_MspInit+0x364>
      Error_Handler();
 800308c:	f7ff fb92 	bl	80027b4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a22      	ldr	r2, [pc, #136]	; (800311c <HAL_UART_MspInit+0x3f0>)
 8003094:	639a      	str	r2, [r3, #56]	; 0x38
 8003096:	4a21      	ldr	r2, [pc, #132]	; (800311c <HAL_UART_MspInit+0x3f0>)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800309c:	4b21      	ldr	r3, [pc, #132]	; (8003124 <HAL_UART_MspInit+0x3f8>)
 800309e:	4a22      	ldr	r2, [pc, #136]	; (8003128 <HAL_UART_MspInit+0x3fc>)
 80030a0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80030a2:	4b20      	ldr	r3, [pc, #128]	; (8003124 <HAL_UART_MspInit+0x3f8>)
 80030a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030a8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030aa:	4b1e      	ldr	r3, [pc, #120]	; (8003124 <HAL_UART_MspInit+0x3f8>)
 80030ac:	2240      	movs	r2, #64	; 0x40
 80030ae:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030b0:	4b1c      	ldr	r3, [pc, #112]	; (8003124 <HAL_UART_MspInit+0x3f8>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030b6:	4b1b      	ldr	r3, [pc, #108]	; (8003124 <HAL_UART_MspInit+0x3f8>)
 80030b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030bc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030be:	4b19      	ldr	r3, [pc, #100]	; (8003124 <HAL_UART_MspInit+0x3f8>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030c4:	4b17      	ldr	r3, [pc, #92]	; (8003124 <HAL_UART_MspInit+0x3f8>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80030ca:	4b16      	ldr	r3, [pc, #88]	; (8003124 <HAL_UART_MspInit+0x3f8>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80030d0:	4b14      	ldr	r3, [pc, #80]	; (8003124 <HAL_UART_MspInit+0x3f8>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030d6:	4b13      	ldr	r3, [pc, #76]	; (8003124 <HAL_UART_MspInit+0x3f8>)
 80030d8:	2200      	movs	r2, #0
 80030da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80030dc:	4811      	ldr	r0, [pc, #68]	; (8003124 <HAL_UART_MspInit+0x3f8>)
 80030de:	f000 fb25 	bl	800372c <HAL_DMA_Init>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <HAL_UART_MspInit+0x3c0>
      Error_Handler();
 80030e8:	f7ff fb64 	bl	80027b4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a0d      	ldr	r2, [pc, #52]	; (8003124 <HAL_UART_MspInit+0x3f8>)
 80030f0:	635a      	str	r2, [r3, #52]	; 0x34
 80030f2:	4a0c      	ldr	r2, [pc, #48]	; (8003124 <HAL_UART_MspInit+0x3f8>)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80030f8:	2200      	movs	r2, #0
 80030fa:	2100      	movs	r1, #0
 80030fc:	2027      	movs	r0, #39	; 0x27
 80030fe:	f000 fade 	bl	80036be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003102:	2027      	movs	r0, #39	; 0x27
 8003104:	f000 faf7 	bl	80036f6 <HAL_NVIC_EnableIRQ>
}
 8003108:	bf00      	nop
 800310a:	3738      	adds	r7, #56	; 0x38
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40004800 	.word	0x40004800
 8003114:	40023800 	.word	0x40023800
 8003118:	40020400 	.word	0x40020400
 800311c:	2000221c 	.word	0x2000221c
 8003120:	40026028 	.word	0x40026028
 8003124:	200022c0 	.word	0x200022c0
 8003128:	40026058 	.word	0x40026058

0800312c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800312c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003164 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003130:	480d      	ldr	r0, [pc, #52]	; (8003168 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003132:	490e      	ldr	r1, [pc, #56]	; (800316c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003134:	4a0e      	ldr	r2, [pc, #56]	; (8003170 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003138:	e002      	b.n	8003140 <LoopCopyDataInit>

0800313a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800313a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800313c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800313e:	3304      	adds	r3, #4

08003140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003144:	d3f9      	bcc.n	800313a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003146:	4a0b      	ldr	r2, [pc, #44]	; (8003174 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003148:	4c0b      	ldr	r4, [pc, #44]	; (8003178 <LoopFillZerobss+0x26>)
  movs r3, #0
 800314a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800314c:	e001      	b.n	8003152 <LoopFillZerobss>

0800314e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800314e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003150:	3204      	adds	r2, #4

08003152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003154:	d3fb      	bcc.n	800314e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003156:	f7ff fc45 	bl	80029e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800315a:	f005 fb33 	bl	80087c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800315e:	f7ff fa2d 	bl	80025bc <main>
  bx  lr    
 8003162:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003164:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800316c:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 8003170:	08008a34 	.word	0x08008a34
  ldr r2, =_sbss
 8003174:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 8003178:	200024cc 	.word	0x200024cc

0800317c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800317c:	e7fe      	b.n	800317c <ADC_IRQHandler>

0800317e <SUPERVISOR_Process_Ms>:
#include "../Sensors/Mpu.h"
#include "../Led/Led.h"
#include "../Radio/Radio.h"

void SUPERVISOR_Process_Ms(void)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	af00      	add	r7, sp, #0
//	if(!MPU_Is_Ok())
//	{
//		Led_Set_Sequence(led_eSTATE, led_sequence_eGYRO_OFF);
//	}
//	else
		if(RADIO_Get_State() == radio_state_eTIMEOUT)
 8003182:	f7fe fedd 	bl	8001f40 <RADIO_Get_State>
 8003186:	4603      	mov	r3, r0
 8003188:	2b01      	cmp	r3, #1
 800318a:	d104      	bne.n	8003196 <SUPERVISOR_Process_Ms+0x18>
	{
		Led_Set_Sequence(led_eSTATE, led_sequence_eRADIO_TIMEOUT);
 800318c:	21a8      	movs	r1, #168	; 0xa8
 800318e:	2000      	movs	r0, #0
 8003190:	f7fe f98c 	bl	80014ac <Led_Set_Sequence>
	}
	else
	{
		Led_Set_Sequence(led_eSTATE, led_sequence_eOK);
	}
}
 8003194:	e003      	b.n	800319e <SUPERVISOR_Process_Ms+0x20>
		Led_Set_Sequence(led_eSTATE, led_sequence_eOK);
 8003196:	2180      	movs	r1, #128	; 0x80
 8003198:	2000      	movs	r0, #0
 800319a:	f7fe f987 	bl	80014ac <Led_Set_Sequence>
}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <TASK_MANAGER_Init>:
static task_t task[MAX_NUMBER_OF_TASK] = { 0 };
static bool_e is_initialized = FALSE;
static uint8_t task_count = 0;

void TASK_MANAGER_Init(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
	for(uint8_t t = 0; t < task_count; t++)
 80031aa:	2300      	movs	r3, #0
 80031ac:	71fb      	strb	r3, [r7, #7]
 80031ae:	e017      	b.n	80031e0 <TASK_MANAGER_Init+0x3c>
	{
		if(task[t].init.call)
 80031b0:	79fa      	ldrb	r2, [r7, #7]
 80031b2:	4911      	ldr	r1, [pc, #68]	; (80031f8 <TASK_MANAGER_Init+0x54>)
 80031b4:	4613      	mov	r3, r2
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	4413      	add	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	440b      	add	r3, r1
 80031be:	3308      	adds	r3, #8
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d009      	beq.n	80031da <TASK_MANAGER_Init+0x36>
		{
			task[t].init.call();
 80031c6:	79fa      	ldrb	r2, [r7, #7]
 80031c8:	490b      	ldr	r1, [pc, #44]	; (80031f8 <TASK_MANAGER_Init+0x54>)
 80031ca:	4613      	mov	r3, r2
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	4413      	add	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	440b      	add	r3, r1
 80031d4:	3308      	adds	r3, #8
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4798      	blx	r3
	for(uint8_t t = 0; t < task_count; t++)
 80031da:	79fb      	ldrb	r3, [r7, #7]
 80031dc:	3301      	adds	r3, #1
 80031de:	71fb      	strb	r3, [r7, #7]
 80031e0:	4b06      	ldr	r3, [pc, #24]	; (80031fc <TASK_MANAGER_Init+0x58>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	79fa      	ldrb	r2, [r7, #7]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d3e2      	bcc.n	80031b0 <TASK_MANAGER_Init+0xc>
		}
	}
	is_initialized = TRUE;
 80031ea:	4b05      	ldr	r3, [pc, #20]	; (8003200 <TASK_MANAGER_Init+0x5c>)
 80031ec:	2201      	movs	r2, #1
 80031ee:	701a      	strb	r2, [r3, #0]
}
 80031f0:	bf00      	nop
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	20001c24 	.word	0x20001c24
 80031fc:	2000205d 	.word	0x2000205d
 8003200:	2000205c 	.word	0x2000205c

08003204 <TASK_MANAGER_Main>:


void TASK_MANAGER_Main(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
	for(uint8_t t = 0; t < task_count; t++)
 800320a:	2300      	movs	r3, #0
 800320c:	71fb      	strb	r3, [r7, #7]
 800320e:	e017      	b.n	8003240 <TASK_MANAGER_Main+0x3c>
	{
		if(task[t].main.call)
 8003210:	79fa      	ldrb	r2, [r7, #7]
 8003212:	4910      	ldr	r1, [pc, #64]	; (8003254 <TASK_MANAGER_Main+0x50>)
 8003214:	4613      	mov	r3, r2
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	4413      	add	r3, r2
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	440b      	add	r3, r1
 800321e:	3318      	adds	r3, #24
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d009      	beq.n	800323a <TASK_MANAGER_Main+0x36>
		{
			task[t].main.call();
 8003226:	79fa      	ldrb	r2, [r7, #7]
 8003228:	490a      	ldr	r1, [pc, #40]	; (8003254 <TASK_MANAGER_Main+0x50>)
 800322a:	4613      	mov	r3, r2
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	4413      	add	r3, r2
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	440b      	add	r3, r1
 8003234:	3318      	adds	r3, #24
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4798      	blx	r3
	for(uint8_t t = 0; t < task_count; t++)
 800323a:	79fb      	ldrb	r3, [r7, #7]
 800323c:	3301      	adds	r3, #1
 800323e:	71fb      	strb	r3, [r7, #7]
 8003240:	4b05      	ldr	r3, [pc, #20]	; (8003258 <TASK_MANAGER_Main+0x54>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	79fa      	ldrb	r2, [r7, #7]
 8003246:	429a      	cmp	r2, r3
 8003248:	d3e2      	bcc.n	8003210 <TASK_MANAGER_Main+0xc>
		}
	}
}
 800324a:	bf00      	nop
 800324c:	bf00      	nop
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	20001c24 	.word	0x20001c24
 8003258:	2000205d 	.word	0x2000205d

0800325c <TASK_MANAGER_It_ms>:

void TASK_MANAGER_It_ms(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
	if(!is_initialized)
 8003262:	4b14      	ldr	r3, [pc, #80]	; (80032b4 <TASK_MANAGER_It_ms+0x58>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d020      	beq.n	80032ac <TASK_MANAGER_It_ms+0x50>
	{
		return;
	}
	for(uint8_t t = 0; t < task_count; t++)
 800326a:	2300      	movs	r3, #0
 800326c:	71fb      	strb	r3, [r7, #7]
 800326e:	e017      	b.n	80032a0 <TASK_MANAGER_It_ms+0x44>
	{
		if(task[t].it.call)
 8003270:	79fa      	ldrb	r2, [r7, #7]
 8003272:	4911      	ldr	r1, [pc, #68]	; (80032b8 <TASK_MANAGER_It_ms+0x5c>)
 8003274:	4613      	mov	r3, r2
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	4413      	add	r3, r2
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	440b      	add	r3, r1
 800327e:	3328      	adds	r3, #40	; 0x28
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d009      	beq.n	800329a <TASK_MANAGER_It_ms+0x3e>
		{
			task[t].it.call();
 8003286:	79fa      	ldrb	r2, [r7, #7]
 8003288:	490b      	ldr	r1, [pc, #44]	; (80032b8 <TASK_MANAGER_It_ms+0x5c>)
 800328a:	4613      	mov	r3, r2
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	4413      	add	r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	440b      	add	r3, r1
 8003294:	3328      	adds	r3, #40	; 0x28
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4798      	blx	r3
	for(uint8_t t = 0; t < task_count; t++)
 800329a:	79fb      	ldrb	r3, [r7, #7]
 800329c:	3301      	adds	r3, #1
 800329e:	71fb      	strb	r3, [r7, #7]
 80032a0:	4b06      	ldr	r3, [pc, #24]	; (80032bc <TASK_MANAGER_It_ms+0x60>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	79fa      	ldrb	r2, [r7, #7]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d3e2      	bcc.n	8003270 <TASK_MANAGER_It_ms+0x14>
 80032aa:	e000      	b.n	80032ae <TASK_MANAGER_It_ms+0x52>
		return;
 80032ac:	bf00      	nop
		}
	}
}
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	2000205c 	.word	0x2000205c
 80032b8:	20001c24 	.word	0x20001c24
 80032bc:	2000205d 	.word	0x2000205d

080032c0 <TASK_MANAGER_Gyro_Data_Ready>:

void TASK_MANAGER_Gyro_Data_Ready(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
	for(uint8_t t = 0; t < task_count; t++)
 80032c6:	2300      	movs	r3, #0
 80032c8:	71fb      	strb	r3, [r7, #7]
 80032ca:	e017      	b.n	80032fc <TASK_MANAGER_Gyro_Data_Ready+0x3c>
	{
		if(task[t].gyro_data_ready.call)
 80032cc:	79fa      	ldrb	r2, [r7, #7]
 80032ce:	4910      	ldr	r1, [pc, #64]	; (8003310 <TASK_MANAGER_Gyro_Data_Ready+0x50>)
 80032d0:	4613      	mov	r3, r2
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	4413      	add	r3, r2
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	440b      	add	r3, r1
 80032da:	3338      	adds	r3, #56	; 0x38
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d009      	beq.n	80032f6 <TASK_MANAGER_Gyro_Data_Ready+0x36>
		{
			task[t].gyro_data_ready.call();
 80032e2:	79fa      	ldrb	r2, [r7, #7]
 80032e4:	490a      	ldr	r1, [pc, #40]	; (8003310 <TASK_MANAGER_Gyro_Data_Ready+0x50>)
 80032e6:	4613      	mov	r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	4413      	add	r3, r2
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	440b      	add	r3, r1
 80032f0:	3338      	adds	r3, #56	; 0x38
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4798      	blx	r3
	for(uint8_t t = 0; t < task_count; t++)
 80032f6:	79fb      	ldrb	r3, [r7, #7]
 80032f8:	3301      	adds	r3, #1
 80032fa:	71fb      	strb	r3, [r7, #7]
 80032fc:	4b05      	ldr	r3, [pc, #20]	; (8003314 <TASK_MANAGER_Gyro_Data_Ready+0x54>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	79fa      	ldrb	r2, [r7, #7]
 8003302:	429a      	cmp	r2, r3
 8003304:	d3e2      	bcc.n	80032cc <TASK_MANAGER_Gyro_Data_Ready+0xc>
		}
	}
}
 8003306:	bf00      	nop
 8003308:	bf00      	nop
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	20001c24 	.word	0x20001c24
 8003314:	2000205d 	.word	0x2000205d

08003318 <TASK_MANAGER_Add_Task>:

void TASK_MANAGER_Add_Task(char * name, void(*init)(void), void(*main)(void), void(*it)(void), void(*gyro)(void))
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
 8003324:	603b      	str	r3, [r7, #0]
	if(task_count == MAX_NUMBER_OF_TASK)
 8003326:	4b2b      	ldr	r3, [pc, #172]	; (80033d4 <TASK_MANAGER_Add_Task+0xbc>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	2b0f      	cmp	r3, #15
 800332c:	d04b      	beq.n	80033c6 <TASK_MANAGER_Add_Task+0xae>
	{
		return;
	}
	task[task_count].name = name;
 800332e:	4b29      	ldr	r3, [pc, #164]	; (80033d4 <TASK_MANAGER_Add_Task+0xbc>)
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	4619      	mov	r1, r3
 8003334:	4a28      	ldr	r2, [pc, #160]	; (80033d8 <TASK_MANAGER_Add_Task+0xc0>)
 8003336:	460b      	mov	r3, r1
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	440b      	add	r3, r1
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	4413      	add	r3, r2
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	601a      	str	r2, [r3, #0]
	task[task_count].name_len = sizeof(name) - 1;
 8003344:	4b23      	ldr	r3, [pc, #140]	; (80033d4 <TASK_MANAGER_Add_Task+0xbc>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	4619      	mov	r1, r3
 800334a:	4a23      	ldr	r2, [pc, #140]	; (80033d8 <TASK_MANAGER_Add_Task+0xc0>)
 800334c:	460b      	mov	r3, r1
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	440b      	add	r3, r1
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	4413      	add	r3, r2
 8003356:	3304      	adds	r3, #4
 8003358:	2203      	movs	r2, #3
 800335a:	701a      	strb	r2, [r3, #0]
	task[task_count].init.call = init;
 800335c:	4b1d      	ldr	r3, [pc, #116]	; (80033d4 <TASK_MANAGER_Add_Task+0xbc>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	4619      	mov	r1, r3
 8003362:	4a1d      	ldr	r2, [pc, #116]	; (80033d8 <TASK_MANAGER_Add_Task+0xc0>)
 8003364:	460b      	mov	r3, r1
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	440b      	add	r3, r1
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	4413      	add	r3, r2
 800336e:	3308      	adds	r3, #8
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	601a      	str	r2, [r3, #0]
	task[task_count].main.call = main;
 8003374:	4b17      	ldr	r3, [pc, #92]	; (80033d4 <TASK_MANAGER_Add_Task+0xbc>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	4619      	mov	r1, r3
 800337a:	4a17      	ldr	r2, [pc, #92]	; (80033d8 <TASK_MANAGER_Add_Task+0xc0>)
 800337c:	460b      	mov	r3, r1
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	440b      	add	r3, r1
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	4413      	add	r3, r2
 8003386:	3318      	adds	r3, #24
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	601a      	str	r2, [r3, #0]
	task[task_count].it.call = it;
 800338c:	4b11      	ldr	r3, [pc, #68]	; (80033d4 <TASK_MANAGER_Add_Task+0xbc>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	4619      	mov	r1, r3
 8003392:	4a11      	ldr	r2, [pc, #68]	; (80033d8 <TASK_MANAGER_Add_Task+0xc0>)
 8003394:	460b      	mov	r3, r1
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	440b      	add	r3, r1
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	4413      	add	r3, r2
 800339e:	3328      	adds	r3, #40	; 0x28
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	601a      	str	r2, [r3, #0]
	task[task_count++].gyro_data_ready.call = gyro;
 80033a4:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <TASK_MANAGER_Add_Task+0xbc>)
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	1c5a      	adds	r2, r3, #1
 80033aa:	b2d1      	uxtb	r1, r2
 80033ac:	4a09      	ldr	r2, [pc, #36]	; (80033d4 <TASK_MANAGER_Add_Task+0xbc>)
 80033ae:	7011      	strb	r1, [r2, #0]
 80033b0:	4619      	mov	r1, r3
 80033b2:	4a09      	ldr	r2, [pc, #36]	; (80033d8 <TASK_MANAGER_Add_Task+0xc0>)
 80033b4:	460b      	mov	r3, r1
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	440b      	add	r3, r1
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	4413      	add	r3, r2
 80033be:	3338      	adds	r3, #56	; 0x38
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	e000      	b.n	80033c8 <TASK_MANAGER_Add_Task+0xb0>
		return;
 80033c6:	bf00      	nop
}
 80033c8:	3714      	adds	r7, #20
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	2000205d 	.word	0x2000205d
 80033d8:	20001c24 	.word	0x20001c24

080033dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033e0:	4b0e      	ldr	r3, [pc, #56]	; (800341c <HAL_Init+0x40>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a0d      	ldr	r2, [pc, #52]	; (800341c <HAL_Init+0x40>)
 80033e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033ec:	4b0b      	ldr	r3, [pc, #44]	; (800341c <HAL_Init+0x40>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a0a      	ldr	r2, [pc, #40]	; (800341c <HAL_Init+0x40>)
 80033f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033f8:	4b08      	ldr	r3, [pc, #32]	; (800341c <HAL_Init+0x40>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a07      	ldr	r2, [pc, #28]	; (800341c <HAL_Init+0x40>)
 80033fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003402:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003404:	2003      	movs	r0, #3
 8003406:	f000 f94f 	bl	80036a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800340a:	200f      	movs	r0, #15
 800340c:	f000 f808 	bl	8003420 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003410:	f7ff f9d6 	bl	80027c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	40023c00 	.word	0x40023c00

08003420 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003428:	4b12      	ldr	r3, [pc, #72]	; (8003474 <HAL_InitTick+0x54>)
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	4b12      	ldr	r3, [pc, #72]	; (8003478 <HAL_InitTick+0x58>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	4619      	mov	r1, r3
 8003432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003436:	fbb3 f3f1 	udiv	r3, r3, r1
 800343a:	fbb2 f3f3 	udiv	r3, r2, r3
 800343e:	4618      	mov	r0, r3
 8003440:	f000 f967 	bl	8003712 <HAL_SYSTICK_Config>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e00e      	b.n	800346c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b0f      	cmp	r3, #15
 8003452:	d80a      	bhi.n	800346a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003454:	2200      	movs	r2, #0
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	f04f 30ff 	mov.w	r0, #4294967295
 800345c:	f000 f92f 	bl	80036be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003460:	4a06      	ldr	r2, [pc, #24]	; (800347c <HAL_InitTick+0x5c>)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003466:	2300      	movs	r3, #0
 8003468:	e000      	b.n	800346c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
}
 800346c:	4618      	mov	r0, r3
 800346e:	3708      	adds	r7, #8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	20000104 	.word	0x20000104
 8003478:	2000010c 	.word	0x2000010c
 800347c:	20000108 	.word	0x20000108

08003480 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003484:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <HAL_IncTick+0x20>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	461a      	mov	r2, r3
 800348a:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <HAL_IncTick+0x24>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4413      	add	r3, r2
 8003490:	4a04      	ldr	r2, [pc, #16]	; (80034a4 <HAL_IncTick+0x24>)
 8003492:	6013      	str	r3, [r2, #0]
}
 8003494:	bf00      	nop
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	2000010c 	.word	0x2000010c
 80034a4:	200024c8 	.word	0x200024c8

080034a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  return uwTick;
 80034ac:	4b03      	ldr	r3, [pc, #12]	; (80034bc <HAL_GetTick+0x14>)
 80034ae:	681b      	ldr	r3, [r3, #0]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	200024c8 	.word	0x200024c8

080034c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034c8:	f7ff ffee 	bl	80034a8 <HAL_GetTick>
 80034cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d8:	d005      	beq.n	80034e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034da:	4b0a      	ldr	r3, [pc, #40]	; (8003504 <HAL_Delay+0x44>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	461a      	mov	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4413      	add	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80034e6:	bf00      	nop
 80034e8:	f7ff ffde 	bl	80034a8 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d8f7      	bhi.n	80034e8 <HAL_Delay+0x28>
  {
  }
}
 80034f8:	bf00      	nop
 80034fa:	bf00      	nop
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	2000010c 	.word	0x2000010c

08003508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003518:	4b0c      	ldr	r3, [pc, #48]	; (800354c <__NVIC_SetPriorityGrouping+0x44>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003524:	4013      	ands	r3, r2
 8003526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003530:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003538:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800353a:	4a04      	ldr	r2, [pc, #16]	; (800354c <__NVIC_SetPriorityGrouping+0x44>)
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	60d3      	str	r3, [r2, #12]
}
 8003540:	bf00      	nop
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	e000ed00 	.word	0xe000ed00

08003550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003554:	4b04      	ldr	r3, [pc, #16]	; (8003568 <__NVIC_GetPriorityGrouping+0x18>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	0a1b      	lsrs	r3, r3, #8
 800355a:	f003 0307 	and.w	r3, r3, #7
}
 800355e:	4618      	mov	r0, r3
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	e000ed00 	.word	0xe000ed00

0800356c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	4603      	mov	r3, r0
 8003574:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357a:	2b00      	cmp	r3, #0
 800357c:	db0b      	blt.n	8003596 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800357e:	79fb      	ldrb	r3, [r7, #7]
 8003580:	f003 021f 	and.w	r2, r3, #31
 8003584:	4907      	ldr	r1, [pc, #28]	; (80035a4 <__NVIC_EnableIRQ+0x38>)
 8003586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358a:	095b      	lsrs	r3, r3, #5
 800358c:	2001      	movs	r0, #1
 800358e:	fa00 f202 	lsl.w	r2, r0, r2
 8003592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	e000e100 	.word	0xe000e100

080035a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4603      	mov	r3, r0
 80035b0:	6039      	str	r1, [r7, #0]
 80035b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	db0a      	blt.n	80035d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	490c      	ldr	r1, [pc, #48]	; (80035f4 <__NVIC_SetPriority+0x4c>)
 80035c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c6:	0112      	lsls	r2, r2, #4
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	440b      	add	r3, r1
 80035cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035d0:	e00a      	b.n	80035e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	4908      	ldr	r1, [pc, #32]	; (80035f8 <__NVIC_SetPriority+0x50>)
 80035d8:	79fb      	ldrb	r3, [r7, #7]
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	3b04      	subs	r3, #4
 80035e0:	0112      	lsls	r2, r2, #4
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	440b      	add	r3, r1
 80035e6:	761a      	strb	r2, [r3, #24]
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	e000e100 	.word	0xe000e100
 80035f8:	e000ed00 	.word	0xe000ed00

080035fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b089      	sub	sp, #36	; 0x24
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f1c3 0307 	rsb	r3, r3, #7
 8003616:	2b04      	cmp	r3, #4
 8003618:	bf28      	it	cs
 800361a:	2304      	movcs	r3, #4
 800361c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	3304      	adds	r3, #4
 8003622:	2b06      	cmp	r3, #6
 8003624:	d902      	bls.n	800362c <NVIC_EncodePriority+0x30>
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	3b03      	subs	r3, #3
 800362a:	e000      	b.n	800362e <NVIC_EncodePriority+0x32>
 800362c:	2300      	movs	r3, #0
 800362e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003630:	f04f 32ff 	mov.w	r2, #4294967295
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	fa02 f303 	lsl.w	r3, r2, r3
 800363a:	43da      	mvns	r2, r3
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	401a      	ands	r2, r3
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003644:	f04f 31ff 	mov.w	r1, #4294967295
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	fa01 f303 	lsl.w	r3, r1, r3
 800364e:	43d9      	mvns	r1, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003654:	4313      	orrs	r3, r2
         );
}
 8003656:	4618      	mov	r0, r3
 8003658:	3724      	adds	r7, #36	; 0x24
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
	...

08003664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3b01      	subs	r3, #1
 8003670:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003674:	d301      	bcc.n	800367a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003676:	2301      	movs	r3, #1
 8003678:	e00f      	b.n	800369a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800367a:	4a0a      	ldr	r2, [pc, #40]	; (80036a4 <SysTick_Config+0x40>)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3b01      	subs	r3, #1
 8003680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003682:	210f      	movs	r1, #15
 8003684:	f04f 30ff 	mov.w	r0, #4294967295
 8003688:	f7ff ff8e 	bl	80035a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800368c:	4b05      	ldr	r3, [pc, #20]	; (80036a4 <SysTick_Config+0x40>)
 800368e:	2200      	movs	r2, #0
 8003690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003692:	4b04      	ldr	r3, [pc, #16]	; (80036a4 <SysTick_Config+0x40>)
 8003694:	2207      	movs	r2, #7
 8003696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	e000e010 	.word	0xe000e010

080036a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7ff ff29 	bl	8003508 <__NVIC_SetPriorityGrouping>
}
 80036b6:	bf00      	nop
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036be:	b580      	push	{r7, lr}
 80036c0:	b086      	sub	sp, #24
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	4603      	mov	r3, r0
 80036c6:	60b9      	str	r1, [r7, #8]
 80036c8:	607a      	str	r2, [r7, #4]
 80036ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036d0:	f7ff ff3e 	bl	8003550 <__NVIC_GetPriorityGrouping>
 80036d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	68b9      	ldr	r1, [r7, #8]
 80036da:	6978      	ldr	r0, [r7, #20]
 80036dc:	f7ff ff8e 	bl	80035fc <NVIC_EncodePriority>
 80036e0:	4602      	mov	r2, r0
 80036e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036e6:	4611      	mov	r1, r2
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff ff5d 	bl	80035a8 <__NVIC_SetPriority>
}
 80036ee:	bf00      	nop
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b082      	sub	sp, #8
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	4603      	mov	r3, r0
 80036fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003704:	4618      	mov	r0, r3
 8003706:	f7ff ff31 	bl	800356c <__NVIC_EnableIRQ>
}
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b082      	sub	sp, #8
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7ff ffa2 	bl	8003664 <SysTick_Config>
 8003720:	4603      	mov	r3, r0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003734:	2300      	movs	r3, #0
 8003736:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003738:	f7ff feb6 	bl	80034a8 <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e099      	b.n	800387c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0201 	bic.w	r2, r2, #1
 8003766:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003768:	e00f      	b.n	800378a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800376a:	f7ff fe9d 	bl	80034a8 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b05      	cmp	r3, #5
 8003776:	d908      	bls.n	800378a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2220      	movs	r2, #32
 800377c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2203      	movs	r2, #3
 8003782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e078      	b.n	800387c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1e8      	bne.n	800376a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	4b38      	ldr	r3, [pc, #224]	; (8003884 <HAL_DMA_Init+0x158>)
 80037a4:	4013      	ands	r3, r2
 80037a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	4313      	orrs	r3, r2
 80037da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	2b04      	cmp	r3, #4
 80037e2:	d107      	bne.n	80037f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ec:	4313      	orrs	r3, r2
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f023 0307 	bic.w	r3, r3, #7
 800380a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	4313      	orrs	r3, r2
 8003814:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	2b04      	cmp	r3, #4
 800381c:	d117      	bne.n	800384e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	4313      	orrs	r3, r2
 8003826:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00e      	beq.n	800384e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 fb0f 	bl	8003e54 <DMA_CheckFifoParam>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d008      	beq.n	800384e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2240      	movs	r2, #64	; 0x40
 8003840:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800384a:	2301      	movs	r3, #1
 800384c:	e016      	b.n	800387c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 fac6 	bl	8003de8 <DMA_CalcBaseAndBitshift>
 800385c:	4603      	mov	r3, r0
 800385e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003864:	223f      	movs	r2, #63	; 0x3f
 8003866:	409a      	lsls	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3718      	adds	r7, #24
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	f010803f 	.word	0xf010803f

08003888 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
 8003894:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003896:	2300      	movs	r3, #0
 8003898:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d101      	bne.n	80038ae <HAL_DMA_Start_IT+0x26>
 80038aa:	2302      	movs	r3, #2
 80038ac:	e040      	b.n	8003930 <HAL_DMA_Start_IT+0xa8>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d12f      	bne.n	8003922 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2202      	movs	r2, #2
 80038c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	68b9      	ldr	r1, [r7, #8]
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 fa58 	bl	8003d8c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e0:	223f      	movs	r2, #63	; 0x3f
 80038e2:	409a      	lsls	r2, r3
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0216 	orr.w	r2, r2, #22
 80038f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d007      	beq.n	8003910 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f042 0208 	orr.w	r2, r2, #8
 800390e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f042 0201 	orr.w	r2, r2, #1
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	e005      	b.n	800392e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800392a:	2302      	movs	r3, #2
 800392c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800392e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003930:	4618      	mov	r0, r3
 8003932:	3718      	adds	r7, #24
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003944:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003946:	f7ff fdaf 	bl	80034a8 <HAL_GetTick>
 800394a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d008      	beq.n	800396a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2280      	movs	r2, #128	; 0x80
 800395c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e052      	b.n	8003a10 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 0216 	bic.w	r2, r2, #22
 8003978:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	695a      	ldr	r2, [r3, #20]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003988:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	2b00      	cmp	r3, #0
 8003990:	d103      	bne.n	800399a <HAL_DMA_Abort+0x62>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003996:	2b00      	cmp	r3, #0
 8003998:	d007      	beq.n	80039aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0208 	bic.w	r2, r2, #8
 80039a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 0201 	bic.w	r2, r2, #1
 80039b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039ba:	e013      	b.n	80039e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039bc:	f7ff fd74 	bl	80034a8 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b05      	cmp	r3, #5
 80039c8:	d90c      	bls.n	80039e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2220      	movs	r2, #32
 80039ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2203      	movs	r2, #3
 80039d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e015      	b.n	8003a10 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1e4      	bne.n	80039bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f6:	223f      	movs	r2, #63	; 0x3f
 80039f8:	409a      	lsls	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d004      	beq.n	8003a36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2280      	movs	r2, #128	; 0x80
 8003a30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e00c      	b.n	8003a50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2205      	movs	r2, #5
 8003a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0201 	bic.w	r2, r2, #1
 8003a4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a64:	2300      	movs	r3, #0
 8003a66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a68:	4b92      	ldr	r3, [pc, #584]	; (8003cb4 <HAL_DMA_IRQHandler+0x258>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a92      	ldr	r2, [pc, #584]	; (8003cb8 <HAL_DMA_IRQHandler+0x25c>)
 8003a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a72:	0a9b      	lsrs	r3, r3, #10
 8003a74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a86:	2208      	movs	r2, #8
 8003a88:	409a      	lsls	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d01a      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d013      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 0204 	bic.w	r2, r2, #4
 8003aae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab4:	2208      	movs	r2, #8
 8003ab6:	409a      	lsls	r2, r3
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac0:	f043 0201 	orr.w	r2, r3, #1
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003acc:	2201      	movs	r2, #1
 8003ace:	409a      	lsls	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d012      	beq.n	8003afe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00b      	beq.n	8003afe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aea:	2201      	movs	r2, #1
 8003aec:	409a      	lsls	r2, r3
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af6:	f043 0202 	orr.w	r2, r3, #2
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b02:	2204      	movs	r2, #4
 8003b04:	409a      	lsls	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d012      	beq.n	8003b34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00b      	beq.n	8003b34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b20:	2204      	movs	r2, #4
 8003b22:	409a      	lsls	r2, r3
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2c:	f043 0204 	orr.w	r2, r3, #4
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b38:	2210      	movs	r2, #16
 8003b3a:	409a      	lsls	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d043      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d03c      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b56:	2210      	movs	r2, #16
 8003b58:	409a      	lsls	r2, r3
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d018      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d108      	bne.n	8003b8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d024      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	4798      	blx	r3
 8003b8a:	e01f      	b.n	8003bcc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d01b      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	4798      	blx	r3
 8003b9c:	e016      	b.n	8003bcc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d107      	bne.n	8003bbc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0208 	bic.w	r2, r2, #8
 8003bba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd0:	2220      	movs	r2, #32
 8003bd2:	409a      	lsls	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 808e 	beq.w	8003cfa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0310 	and.w	r3, r3, #16
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 8086 	beq.w	8003cfa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	409a      	lsls	r2, r3
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b05      	cmp	r3, #5
 8003c04:	d136      	bne.n	8003c74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 0216 	bic.w	r2, r2, #22
 8003c14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	695a      	ldr	r2, [r3, #20]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d103      	bne.n	8003c36 <HAL_DMA_IRQHandler+0x1da>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d007      	beq.n	8003c46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 0208 	bic.w	r2, r2, #8
 8003c44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c4a:	223f      	movs	r2, #63	; 0x3f
 8003c4c:	409a      	lsls	r2, r3
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d07d      	beq.n	8003d66 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	4798      	blx	r3
        }
        return;
 8003c72:	e078      	b.n	8003d66 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d01c      	beq.n	8003cbc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d108      	bne.n	8003ca2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d030      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	4798      	blx	r3
 8003ca0:	e02b      	b.n	8003cfa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d027      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	4798      	blx	r3
 8003cb2:	e022      	b.n	8003cfa <HAL_DMA_IRQHandler+0x29e>
 8003cb4:	20000104 	.word	0x20000104
 8003cb8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10f      	bne.n	8003cea <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0210 	bic.w	r2, r2, #16
 8003cd8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d032      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d022      	beq.n	8003d54 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2205      	movs	r2, #5
 8003d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0201 	bic.w	r2, r2, #1
 8003d24:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	60bb      	str	r3, [r7, #8]
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d307      	bcc.n	8003d42 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1f2      	bne.n	8003d26 <HAL_DMA_IRQHandler+0x2ca>
 8003d40:	e000      	b.n	8003d44 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003d42:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d005      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	4798      	blx	r3
 8003d64:	e000      	b.n	8003d68 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003d66:	bf00      	nop
    }
  }
}
 8003d68:	3718      	adds	r7, #24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop

08003d70 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d7e:	b2db      	uxtb	r3, r3
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
 8003d98:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003da8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	2b40      	cmp	r3, #64	; 0x40
 8003db8:	d108      	bne.n	8003dcc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68ba      	ldr	r2, [r7, #8]
 8003dc8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003dca:	e007      	b.n	8003ddc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	60da      	str	r2, [r3, #12]
}
 8003ddc:	bf00      	nop
 8003dde:	3714      	adds	r7, #20
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	3b10      	subs	r3, #16
 8003df8:	4a14      	ldr	r2, [pc, #80]	; (8003e4c <DMA_CalcBaseAndBitshift+0x64>)
 8003dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfe:	091b      	lsrs	r3, r3, #4
 8003e00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e02:	4a13      	ldr	r2, [pc, #76]	; (8003e50 <DMA_CalcBaseAndBitshift+0x68>)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4413      	add	r3, r2
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2b03      	cmp	r3, #3
 8003e14:	d909      	bls.n	8003e2a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e1e:	f023 0303 	bic.w	r3, r3, #3
 8003e22:	1d1a      	adds	r2, r3, #4
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	659a      	str	r2, [r3, #88]	; 0x58
 8003e28:	e007      	b.n	8003e3a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e32:	f023 0303 	bic.w	r3, r3, #3
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	aaaaaaab 	.word	0xaaaaaaab
 8003e50:	08008a1c 	.word	0x08008a1c

08003e54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d11f      	bne.n	8003eae <DMA_CheckFifoParam+0x5a>
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2b03      	cmp	r3, #3
 8003e72:	d856      	bhi.n	8003f22 <DMA_CheckFifoParam+0xce>
 8003e74:	a201      	add	r2, pc, #4	; (adr r2, 8003e7c <DMA_CheckFifoParam+0x28>)
 8003e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7a:	bf00      	nop
 8003e7c:	08003e8d 	.word	0x08003e8d
 8003e80:	08003e9f 	.word	0x08003e9f
 8003e84:	08003e8d 	.word	0x08003e8d
 8003e88:	08003f23 	.word	0x08003f23
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d046      	beq.n	8003f26 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e9c:	e043      	b.n	8003f26 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ea6:	d140      	bne.n	8003f2a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eac:	e03d      	b.n	8003f2a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eb6:	d121      	bne.n	8003efc <DMA_CheckFifoParam+0xa8>
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2b03      	cmp	r3, #3
 8003ebc:	d837      	bhi.n	8003f2e <DMA_CheckFifoParam+0xda>
 8003ebe:	a201      	add	r2, pc, #4	; (adr r2, 8003ec4 <DMA_CheckFifoParam+0x70>)
 8003ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec4:	08003ed5 	.word	0x08003ed5
 8003ec8:	08003edb 	.word	0x08003edb
 8003ecc:	08003ed5 	.word	0x08003ed5
 8003ed0:	08003eed 	.word	0x08003eed
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ed8:	e030      	b.n	8003f3c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ede:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d025      	beq.n	8003f32 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eea:	e022      	b.n	8003f32 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ef4:	d11f      	bne.n	8003f36 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003efa:	e01c      	b.n	8003f36 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d903      	bls.n	8003f0a <DMA_CheckFifoParam+0xb6>
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	2b03      	cmp	r3, #3
 8003f06:	d003      	beq.n	8003f10 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f08:	e018      	b.n	8003f3c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	73fb      	strb	r3, [r7, #15]
      break;
 8003f0e:	e015      	b.n	8003f3c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00e      	beq.n	8003f3a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f20:	e00b      	b.n	8003f3a <DMA_CheckFifoParam+0xe6>
      break;
 8003f22:	bf00      	nop
 8003f24:	e00a      	b.n	8003f3c <DMA_CheckFifoParam+0xe8>
      break;
 8003f26:	bf00      	nop
 8003f28:	e008      	b.n	8003f3c <DMA_CheckFifoParam+0xe8>
      break;
 8003f2a:	bf00      	nop
 8003f2c:	e006      	b.n	8003f3c <DMA_CheckFifoParam+0xe8>
      break;
 8003f2e:	bf00      	nop
 8003f30:	e004      	b.n	8003f3c <DMA_CheckFifoParam+0xe8>
      break;
 8003f32:	bf00      	nop
 8003f34:	e002      	b.n	8003f3c <DMA_CheckFifoParam+0xe8>
      break;   
 8003f36:	bf00      	nop
 8003f38:	e000      	b.n	8003f3c <DMA_CheckFifoParam+0xe8>
      break;
 8003f3a:	bf00      	nop
    }
  } 
  
  return status; 
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3714      	adds	r7, #20
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop

08003f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b089      	sub	sp, #36	; 0x24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f56:	2300      	movs	r3, #0
 8003f58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f62:	2300      	movs	r3, #0
 8003f64:	61fb      	str	r3, [r7, #28]
 8003f66:	e16b      	b.n	8004240 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f68:	2201      	movs	r2, #1
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	f040 815a 	bne.w	800423a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f003 0303 	and.w	r3, r3, #3
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d005      	beq.n	8003f9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d130      	bne.n	8004000 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	2203      	movs	r2, #3
 8003faa:	fa02 f303 	lsl.w	r3, r2, r3
 8003fae:	43db      	mvns	r3, r3
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68da      	ldr	r2, [r3, #12]
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	091b      	lsrs	r3, r3, #4
 8003fea:	f003 0201 	and.w	r2, r3, #1
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f003 0303 	and.w	r3, r3, #3
 8004008:	2b03      	cmp	r3, #3
 800400a:	d017      	beq.n	800403c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	2203      	movs	r2, #3
 8004018:	fa02 f303 	lsl.w	r3, r2, r3
 800401c:	43db      	mvns	r3, r3
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	4013      	ands	r3, r2
 8004022:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	fa02 f303 	lsl.w	r3, r2, r3
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	4313      	orrs	r3, r2
 8004034:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f003 0303 	and.w	r3, r3, #3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d123      	bne.n	8004090 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	08da      	lsrs	r2, r3, #3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3208      	adds	r2, #8
 8004050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004054:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	f003 0307 	and.w	r3, r3, #7
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	220f      	movs	r2, #15
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	43db      	mvns	r3, r3
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	4013      	ands	r3, r2
 800406a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	691a      	ldr	r2, [r3, #16]
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	f003 0307 	and.w	r3, r3, #7
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	4313      	orrs	r3, r2
 8004080:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	08da      	lsrs	r2, r3, #3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	3208      	adds	r2, #8
 800408a:	69b9      	ldr	r1, [r7, #24]
 800408c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	2203      	movs	r2, #3
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	43db      	mvns	r3, r3
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	4013      	ands	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f003 0203 	and.w	r2, r3, #3
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	fa02 f303 	lsl.w	r3, r2, r3
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 80b4 	beq.w	800423a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040d2:	2300      	movs	r3, #0
 80040d4:	60fb      	str	r3, [r7, #12]
 80040d6:	4b60      	ldr	r3, [pc, #384]	; (8004258 <HAL_GPIO_Init+0x30c>)
 80040d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040da:	4a5f      	ldr	r2, [pc, #380]	; (8004258 <HAL_GPIO_Init+0x30c>)
 80040dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040e0:	6453      	str	r3, [r2, #68]	; 0x44
 80040e2:	4b5d      	ldr	r3, [pc, #372]	; (8004258 <HAL_GPIO_Init+0x30c>)
 80040e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ea:	60fb      	str	r3, [r7, #12]
 80040ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040ee:	4a5b      	ldr	r2, [pc, #364]	; (800425c <HAL_GPIO_Init+0x310>)
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	089b      	lsrs	r3, r3, #2
 80040f4:	3302      	adds	r3, #2
 80040f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	f003 0303 	and.w	r3, r3, #3
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	220f      	movs	r2, #15
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	43db      	mvns	r3, r3
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	4013      	ands	r3, r2
 8004110:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a52      	ldr	r2, [pc, #328]	; (8004260 <HAL_GPIO_Init+0x314>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d02b      	beq.n	8004172 <HAL_GPIO_Init+0x226>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a51      	ldr	r2, [pc, #324]	; (8004264 <HAL_GPIO_Init+0x318>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d025      	beq.n	800416e <HAL_GPIO_Init+0x222>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a50      	ldr	r2, [pc, #320]	; (8004268 <HAL_GPIO_Init+0x31c>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d01f      	beq.n	800416a <HAL_GPIO_Init+0x21e>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a4f      	ldr	r2, [pc, #316]	; (800426c <HAL_GPIO_Init+0x320>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d019      	beq.n	8004166 <HAL_GPIO_Init+0x21a>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a4e      	ldr	r2, [pc, #312]	; (8004270 <HAL_GPIO_Init+0x324>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d013      	beq.n	8004162 <HAL_GPIO_Init+0x216>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a4d      	ldr	r2, [pc, #308]	; (8004274 <HAL_GPIO_Init+0x328>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d00d      	beq.n	800415e <HAL_GPIO_Init+0x212>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a4c      	ldr	r2, [pc, #304]	; (8004278 <HAL_GPIO_Init+0x32c>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d007      	beq.n	800415a <HAL_GPIO_Init+0x20e>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a4b      	ldr	r2, [pc, #300]	; (800427c <HAL_GPIO_Init+0x330>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d101      	bne.n	8004156 <HAL_GPIO_Init+0x20a>
 8004152:	2307      	movs	r3, #7
 8004154:	e00e      	b.n	8004174 <HAL_GPIO_Init+0x228>
 8004156:	2308      	movs	r3, #8
 8004158:	e00c      	b.n	8004174 <HAL_GPIO_Init+0x228>
 800415a:	2306      	movs	r3, #6
 800415c:	e00a      	b.n	8004174 <HAL_GPIO_Init+0x228>
 800415e:	2305      	movs	r3, #5
 8004160:	e008      	b.n	8004174 <HAL_GPIO_Init+0x228>
 8004162:	2304      	movs	r3, #4
 8004164:	e006      	b.n	8004174 <HAL_GPIO_Init+0x228>
 8004166:	2303      	movs	r3, #3
 8004168:	e004      	b.n	8004174 <HAL_GPIO_Init+0x228>
 800416a:	2302      	movs	r3, #2
 800416c:	e002      	b.n	8004174 <HAL_GPIO_Init+0x228>
 800416e:	2301      	movs	r3, #1
 8004170:	e000      	b.n	8004174 <HAL_GPIO_Init+0x228>
 8004172:	2300      	movs	r3, #0
 8004174:	69fa      	ldr	r2, [r7, #28]
 8004176:	f002 0203 	and.w	r2, r2, #3
 800417a:	0092      	lsls	r2, r2, #2
 800417c:	4093      	lsls	r3, r2
 800417e:	69ba      	ldr	r2, [r7, #24]
 8004180:	4313      	orrs	r3, r2
 8004182:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004184:	4935      	ldr	r1, [pc, #212]	; (800425c <HAL_GPIO_Init+0x310>)
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	089b      	lsrs	r3, r3, #2
 800418a:	3302      	adds	r3, #2
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004192:	4b3b      	ldr	r3, [pc, #236]	; (8004280 <HAL_GPIO_Init+0x334>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	43db      	mvns	r3, r3
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	4013      	ands	r3, r2
 80041a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041b6:	4a32      	ldr	r2, [pc, #200]	; (8004280 <HAL_GPIO_Init+0x334>)
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80041bc:	4b30      	ldr	r3, [pc, #192]	; (8004280 <HAL_GPIO_Init+0x334>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	43db      	mvns	r3, r3
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	4013      	ands	r3, r2
 80041ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d003      	beq.n	80041e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	4313      	orrs	r3, r2
 80041de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041e0:	4a27      	ldr	r2, [pc, #156]	; (8004280 <HAL_GPIO_Init+0x334>)
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041e6:	4b26      	ldr	r3, [pc, #152]	; (8004280 <HAL_GPIO_Init+0x334>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	43db      	mvns	r3, r3
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	4013      	ands	r3, r2
 80041f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	4313      	orrs	r3, r2
 8004208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800420a:	4a1d      	ldr	r2, [pc, #116]	; (8004280 <HAL_GPIO_Init+0x334>)
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004210:	4b1b      	ldr	r3, [pc, #108]	; (8004280 <HAL_GPIO_Init+0x334>)
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	43db      	mvns	r3, r3
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	4013      	ands	r3, r2
 800421e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d003      	beq.n	8004234 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	4313      	orrs	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004234:	4a12      	ldr	r2, [pc, #72]	; (8004280 <HAL_GPIO_Init+0x334>)
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	3301      	adds	r3, #1
 800423e:	61fb      	str	r3, [r7, #28]
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	2b0f      	cmp	r3, #15
 8004244:	f67f ae90 	bls.w	8003f68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004248:	bf00      	nop
 800424a:	bf00      	nop
 800424c:	3724      	adds	r7, #36	; 0x24
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	40023800 	.word	0x40023800
 800425c:	40013800 	.word	0x40013800
 8004260:	40020000 	.word	0x40020000
 8004264:	40020400 	.word	0x40020400
 8004268:	40020800 	.word	0x40020800
 800426c:	40020c00 	.word	0x40020c00
 8004270:	40021000 	.word	0x40021000
 8004274:	40021400 	.word	0x40021400
 8004278:	40021800 	.word	0x40021800
 800427c:	40021c00 	.word	0x40021c00
 8004280:	40013c00 	.word	0x40013c00

08004284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	460b      	mov	r3, r1
 800428e:	807b      	strh	r3, [r7, #2]
 8004290:	4613      	mov	r3, r2
 8004292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004294:	787b      	ldrb	r3, [r7, #1]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800429a:	887a      	ldrh	r2, [r7, #2]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042a0:	e003      	b.n	80042aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042a2:	887b      	ldrh	r3, [r7, #2]
 80042a4:	041a      	lsls	r2, r3, #16
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	619a      	str	r2, [r3, #24]
}
 80042aa:	bf00      	nop
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
	...

080042b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e12b      	b.n	8004522 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d106      	bne.n	80042e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7fe f8ae 	bl	8002440 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2224      	movs	r2, #36	; 0x24
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 0201 	bic.w	r2, r2, #1
 80042fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800430a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800431a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800431c:	f002 f9f8 	bl	8006710 <HAL_RCC_GetPCLK1Freq>
 8004320:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	4a81      	ldr	r2, [pc, #516]	; (800452c <HAL_I2C_Init+0x274>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d807      	bhi.n	800433c <HAL_I2C_Init+0x84>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4a80      	ldr	r2, [pc, #512]	; (8004530 <HAL_I2C_Init+0x278>)
 8004330:	4293      	cmp	r3, r2
 8004332:	bf94      	ite	ls
 8004334:	2301      	movls	r3, #1
 8004336:	2300      	movhi	r3, #0
 8004338:	b2db      	uxtb	r3, r3
 800433a:	e006      	b.n	800434a <HAL_I2C_Init+0x92>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4a7d      	ldr	r2, [pc, #500]	; (8004534 <HAL_I2C_Init+0x27c>)
 8004340:	4293      	cmp	r3, r2
 8004342:	bf94      	ite	ls
 8004344:	2301      	movls	r3, #1
 8004346:	2300      	movhi	r3, #0
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e0e7      	b.n	8004522 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	4a78      	ldr	r2, [pc, #480]	; (8004538 <HAL_I2C_Init+0x280>)
 8004356:	fba2 2303 	umull	r2, r3, r2, r3
 800435a:	0c9b      	lsrs	r3, r3, #18
 800435c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	430a      	orrs	r2, r1
 8004370:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	4a6a      	ldr	r2, [pc, #424]	; (800452c <HAL_I2C_Init+0x274>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d802      	bhi.n	800438c <HAL_I2C_Init+0xd4>
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	3301      	adds	r3, #1
 800438a:	e009      	b.n	80043a0 <HAL_I2C_Init+0xe8>
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004392:	fb02 f303 	mul.w	r3, r2, r3
 8004396:	4a69      	ldr	r2, [pc, #420]	; (800453c <HAL_I2C_Init+0x284>)
 8004398:	fba2 2303 	umull	r2, r3, r2, r3
 800439c:	099b      	lsrs	r3, r3, #6
 800439e:	3301      	adds	r3, #1
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	6812      	ldr	r2, [r2, #0]
 80043a4:	430b      	orrs	r3, r1
 80043a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80043b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	495c      	ldr	r1, [pc, #368]	; (800452c <HAL_I2C_Init+0x274>)
 80043bc:	428b      	cmp	r3, r1
 80043be:	d819      	bhi.n	80043f4 <HAL_I2C_Init+0x13c>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	1e59      	subs	r1, r3, #1
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80043ce:	1c59      	adds	r1, r3, #1
 80043d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80043d4:	400b      	ands	r3, r1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00a      	beq.n	80043f0 <HAL_I2C_Init+0x138>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	1e59      	subs	r1, r3, #1
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80043e8:	3301      	adds	r3, #1
 80043ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ee:	e051      	b.n	8004494 <HAL_I2C_Init+0x1dc>
 80043f0:	2304      	movs	r3, #4
 80043f2:	e04f      	b.n	8004494 <HAL_I2C_Init+0x1dc>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d111      	bne.n	8004420 <HAL_I2C_Init+0x168>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	1e58      	subs	r0, r3, #1
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6859      	ldr	r1, [r3, #4]
 8004404:	460b      	mov	r3, r1
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	440b      	add	r3, r1
 800440a:	fbb0 f3f3 	udiv	r3, r0, r3
 800440e:	3301      	adds	r3, #1
 8004410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004414:	2b00      	cmp	r3, #0
 8004416:	bf0c      	ite	eq
 8004418:	2301      	moveq	r3, #1
 800441a:	2300      	movne	r3, #0
 800441c:	b2db      	uxtb	r3, r3
 800441e:	e012      	b.n	8004446 <HAL_I2C_Init+0x18e>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	1e58      	subs	r0, r3, #1
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6859      	ldr	r1, [r3, #4]
 8004428:	460b      	mov	r3, r1
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	0099      	lsls	r1, r3, #2
 8004430:	440b      	add	r3, r1
 8004432:	fbb0 f3f3 	udiv	r3, r0, r3
 8004436:	3301      	adds	r3, #1
 8004438:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800443c:	2b00      	cmp	r3, #0
 800443e:	bf0c      	ite	eq
 8004440:	2301      	moveq	r3, #1
 8004442:	2300      	movne	r3, #0
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <HAL_I2C_Init+0x196>
 800444a:	2301      	movs	r3, #1
 800444c:	e022      	b.n	8004494 <HAL_I2C_Init+0x1dc>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10e      	bne.n	8004474 <HAL_I2C_Init+0x1bc>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	1e58      	subs	r0, r3, #1
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6859      	ldr	r1, [r3, #4]
 800445e:	460b      	mov	r3, r1
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	440b      	add	r3, r1
 8004464:	fbb0 f3f3 	udiv	r3, r0, r3
 8004468:	3301      	adds	r3, #1
 800446a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800446e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004472:	e00f      	b.n	8004494 <HAL_I2C_Init+0x1dc>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	1e58      	subs	r0, r3, #1
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6859      	ldr	r1, [r3, #4]
 800447c:	460b      	mov	r3, r1
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	440b      	add	r3, r1
 8004482:	0099      	lsls	r1, r3, #2
 8004484:	440b      	add	r3, r1
 8004486:	fbb0 f3f3 	udiv	r3, r0, r3
 800448a:	3301      	adds	r3, #1
 800448c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004490:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	6809      	ldr	r1, [r1, #0]
 8004498:	4313      	orrs	r3, r2
 800449a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	69da      	ldr	r2, [r3, #28]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	431a      	orrs	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80044c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6911      	ldr	r1, [r2, #16]
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	68d2      	ldr	r2, [r2, #12]
 80044ce:	4311      	orrs	r1, r2
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	6812      	ldr	r2, [r2, #0]
 80044d4:	430b      	orrs	r3, r1
 80044d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	695a      	ldr	r2, [r3, #20]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	431a      	orrs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0201 	orr.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2220      	movs	r2, #32
 800450e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	000186a0 	.word	0x000186a0
 8004530:	001e847f 	.word	0x001e847f
 8004534:	003d08ff 	.word	0x003d08ff
 8004538:	431bde83 	.word	0x431bde83
 800453c:	10624dd3 	.word	0x10624dd3

08004540 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b088      	sub	sp, #32
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004548:	2300      	movs	r3, #0
 800454a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004558:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004560:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004568:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800456a:	7bfb      	ldrb	r3, [r7, #15]
 800456c:	2b10      	cmp	r3, #16
 800456e:	d003      	beq.n	8004578 <HAL_I2C_EV_IRQHandler+0x38>
 8004570:	7bfb      	ldrb	r3, [r7, #15]
 8004572:	2b40      	cmp	r3, #64	; 0x40
 8004574:	f040 80c1 	bne.w	80046fa <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10d      	bne.n	80045ae <HAL_I2C_EV_IRQHandler+0x6e>
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004598:	d003      	beq.n	80045a2 <HAL_I2C_EV_IRQHandler+0x62>
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80045a0:	d101      	bne.n	80045a6 <HAL_I2C_EV_IRQHandler+0x66>
 80045a2:	2301      	movs	r3, #1
 80045a4:	e000      	b.n	80045a8 <HAL_I2C_EV_IRQHandler+0x68>
 80045a6:	2300      	movs	r3, #0
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	f000 8132 	beq.w	8004812 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00c      	beq.n	80045d2 <HAL_I2C_EV_IRQHandler+0x92>
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	0a5b      	lsrs	r3, r3, #9
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d006      	beq.n	80045d2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f001 fc67 	bl	8005e98 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 fd6f 	bl	80050ae <I2C_Master_SB>
 80045d0:	e092      	b.n	80046f8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	08db      	lsrs	r3, r3, #3
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d009      	beq.n	80045f2 <HAL_I2C_EV_IRQHandler+0xb2>
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	0a5b      	lsrs	r3, r3, #9
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 fde5 	bl	80051ba <I2C_Master_ADD10>
 80045f0:	e082      	b.n	80046f8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	085b      	lsrs	r3, r3, #1
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d009      	beq.n	8004612 <HAL_I2C_EV_IRQHandler+0xd2>
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	0a5b      	lsrs	r3, r3, #9
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 fdff 	bl	800520e <I2C_Master_ADDR>
 8004610:	e072      	b.n	80046f8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	089b      	lsrs	r3, r3, #2
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	d03b      	beq.n	8004696 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004628:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800462c:	f000 80f3 	beq.w	8004816 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	09db      	lsrs	r3, r3, #7
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00f      	beq.n	800465c <HAL_I2C_EV_IRQHandler+0x11c>
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	0a9b      	lsrs	r3, r3, #10
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	d009      	beq.n	800465c <HAL_I2C_EV_IRQHandler+0x11c>
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	089b      	lsrs	r3, r3, #2
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b00      	cmp	r3, #0
 8004652:	d103      	bne.n	800465c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f9e9 	bl	8004a2c <I2C_MasterTransmit_TXE>
 800465a:	e04d      	b.n	80046f8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	089b      	lsrs	r3, r3, #2
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 80d6 	beq.w	8004816 <HAL_I2C_EV_IRQHandler+0x2d6>
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	0a5b      	lsrs	r3, r3, #9
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	f000 80cf 	beq.w	8004816 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004678:	7bbb      	ldrb	r3, [r7, #14]
 800467a:	2b21      	cmp	r3, #33	; 0x21
 800467c:	d103      	bne.n	8004686 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 fa70 	bl	8004b64 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004684:	e0c7      	b.n	8004816 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004686:	7bfb      	ldrb	r3, [r7, #15]
 8004688:	2b40      	cmp	r3, #64	; 0x40
 800468a:	f040 80c4 	bne.w	8004816 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 fade 	bl	8004c50 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004694:	e0bf      	b.n	8004816 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046a4:	f000 80b7 	beq.w	8004816 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	099b      	lsrs	r3, r3, #6
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00f      	beq.n	80046d4 <HAL_I2C_EV_IRQHandler+0x194>
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	0a9b      	lsrs	r3, r3, #10
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d009      	beq.n	80046d4 <HAL_I2C_EV_IRQHandler+0x194>
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	089b      	lsrs	r3, r3, #2
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d103      	bne.n	80046d4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 fb53 	bl	8004d78 <I2C_MasterReceive_RXNE>
 80046d2:	e011      	b.n	80046f8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	089b      	lsrs	r3, r3, #2
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 809a 	beq.w	8004816 <HAL_I2C_EV_IRQHandler+0x2d6>
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	0a5b      	lsrs	r3, r3, #9
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 8093 	beq.w	8004816 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 fbf2 	bl	8004eda <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046f6:	e08e      	b.n	8004816 <HAL_I2C_EV_IRQHandler+0x2d6>
 80046f8:	e08d      	b.n	8004816 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d004      	beq.n	800470c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	61fb      	str	r3, [r7, #28]
 800470a:	e007      	b.n	800471c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	085b      	lsrs	r3, r3, #1
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	2b00      	cmp	r3, #0
 8004726:	d012      	beq.n	800474e <HAL_I2C_EV_IRQHandler+0x20e>
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	0a5b      	lsrs	r3, r3, #9
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00c      	beq.n	800474e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004744:	69b9      	ldr	r1, [r7, #24]
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 ffb0 	bl	80056ac <I2C_Slave_ADDR>
 800474c:	e066      	b.n	800481c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	091b      	lsrs	r3, r3, #4
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d009      	beq.n	800476e <HAL_I2C_EV_IRQHandler+0x22e>
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	0a5b      	lsrs	r3, r3, #9
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 ffea 	bl	8005740 <I2C_Slave_STOPF>
 800476c:	e056      	b.n	800481c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800476e:	7bbb      	ldrb	r3, [r7, #14]
 8004770:	2b21      	cmp	r3, #33	; 0x21
 8004772:	d002      	beq.n	800477a <HAL_I2C_EV_IRQHandler+0x23a>
 8004774:	7bbb      	ldrb	r3, [r7, #14]
 8004776:	2b29      	cmp	r3, #41	; 0x29
 8004778:	d125      	bne.n	80047c6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	09db      	lsrs	r3, r3, #7
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00f      	beq.n	80047a6 <HAL_I2C_EV_IRQHandler+0x266>
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	0a9b      	lsrs	r3, r3, #10
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d009      	beq.n	80047a6 <HAL_I2C_EV_IRQHandler+0x266>
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	089b      	lsrs	r3, r3, #2
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d103      	bne.n	80047a6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 fec6 	bl	8005530 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047a4:	e039      	b.n	800481a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	089b      	lsrs	r3, r3, #2
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d033      	beq.n	800481a <HAL_I2C_EV_IRQHandler+0x2da>
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	0a5b      	lsrs	r3, r3, #9
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d02d      	beq.n	800481a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 fef3 	bl	80055aa <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047c4:	e029      	b.n	800481a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	099b      	lsrs	r3, r3, #6
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00f      	beq.n	80047f2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	0a9b      	lsrs	r3, r3, #10
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d009      	beq.n	80047f2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	089b      	lsrs	r3, r3, #2
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d103      	bne.n	80047f2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 fefe 	bl	80055ec <I2C_SlaveReceive_RXNE>
 80047f0:	e014      	b.n	800481c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	089b      	lsrs	r3, r3, #2
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00e      	beq.n	800481c <HAL_I2C_EV_IRQHandler+0x2dc>
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	0a5b      	lsrs	r3, r3, #9
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d008      	beq.n	800481c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 ff2c 	bl	8005668 <I2C_SlaveReceive_BTF>
 8004810:	e004      	b.n	800481c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004812:	bf00      	nop
 8004814:	e002      	b.n	800481c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004816:	bf00      	nop
 8004818:	e000      	b.n	800481c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800481a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800481c:	3720      	adds	r7, #32
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b08a      	sub	sp, #40	; 0x28
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800483a:	2300      	movs	r3, #0
 800483c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004844:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004846:	6a3b      	ldr	r3, [r7, #32]
 8004848:	0a1b      	lsrs	r3, r3, #8
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00e      	beq.n	8004870 <HAL_I2C_ER_IRQHandler+0x4e>
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	0a1b      	lsrs	r3, r3, #8
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d008      	beq.n	8004870 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004860:	f043 0301 	orr.w	r3, r3, #1
 8004864:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800486e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004870:	6a3b      	ldr	r3, [r7, #32]
 8004872:	0a5b      	lsrs	r3, r3, #9
 8004874:	f003 0301 	and.w	r3, r3, #1
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00e      	beq.n	800489a <HAL_I2C_ER_IRQHandler+0x78>
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	0a1b      	lsrs	r3, r3, #8
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b00      	cmp	r3, #0
 8004886:	d008      	beq.n	800489a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	f043 0302 	orr.w	r3, r3, #2
 800488e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004898:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800489a:	6a3b      	ldr	r3, [r7, #32]
 800489c:	0a9b      	lsrs	r3, r3, #10
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d03f      	beq.n	8004926 <HAL_I2C_ER_IRQHandler+0x104>
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	0a1b      	lsrs	r3, r3, #8
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d039      	beq.n	8004926 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80048b2:	7efb      	ldrb	r3, [r7, #27]
 80048b4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ca:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80048cc:	7ebb      	ldrb	r3, [r7, #26]
 80048ce:	2b20      	cmp	r3, #32
 80048d0:	d112      	bne.n	80048f8 <HAL_I2C_ER_IRQHandler+0xd6>
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10f      	bne.n	80048f8 <HAL_I2C_ER_IRQHandler+0xd6>
 80048d8:	7cfb      	ldrb	r3, [r7, #19]
 80048da:	2b21      	cmp	r3, #33	; 0x21
 80048dc:	d008      	beq.n	80048f0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80048de:	7cfb      	ldrb	r3, [r7, #19]
 80048e0:	2b29      	cmp	r3, #41	; 0x29
 80048e2:	d005      	beq.n	80048f0 <HAL_I2C_ER_IRQHandler+0xce>
 80048e4:	7cfb      	ldrb	r3, [r7, #19]
 80048e6:	2b28      	cmp	r3, #40	; 0x28
 80048e8:	d106      	bne.n	80048f8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2b21      	cmp	r3, #33	; 0x21
 80048ee:	d103      	bne.n	80048f8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f001 f855 	bl	80059a0 <I2C_Slave_AF>
 80048f6:	e016      	b.n	8004926 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004900:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	f043 0304 	orr.w	r3, r3, #4
 8004908:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800490a:	7efb      	ldrb	r3, [r7, #27]
 800490c:	2b10      	cmp	r3, #16
 800490e:	d002      	beq.n	8004916 <HAL_I2C_ER_IRQHandler+0xf4>
 8004910:	7efb      	ldrb	r3, [r7, #27]
 8004912:	2b40      	cmp	r3, #64	; 0x40
 8004914:	d107      	bne.n	8004926 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004924:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004926:	6a3b      	ldr	r3, [r7, #32]
 8004928:	0adb      	lsrs	r3, r3, #11
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00e      	beq.n	8004950 <HAL_I2C_ER_IRQHandler+0x12e>
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	0a1b      	lsrs	r3, r3, #8
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b00      	cmp	r3, #0
 800493c:	d008      	beq.n	8004950 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	f043 0308 	orr.w	r3, r3, #8
 8004944:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800494e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004952:	2b00      	cmp	r3, #0
 8004954:	d008      	beq.n	8004968 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	431a      	orrs	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f001 f88c 	bl	8005a80 <I2C_ITError>
  }
}
 8004968:	bf00      	nop
 800496a:	3728      	adds	r7, #40	; 0x28
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	460b      	mov	r3, r1
 80049ca:	70fb      	strb	r3, [r7, #3]
 80049cc:	4613      	mov	r3, r2
 80049ce:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a3a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a42:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a48:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d150      	bne.n	8004af4 <I2C_MasterTransmit_TXE+0xc8>
 8004a52:	7bfb      	ldrb	r3, [r7, #15]
 8004a54:	2b21      	cmp	r3, #33	; 0x21
 8004a56:	d14d      	bne.n	8004af4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2b08      	cmp	r3, #8
 8004a5c:	d01d      	beq.n	8004a9a <I2C_MasterTransmit_TXE+0x6e>
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	2b20      	cmp	r3, #32
 8004a62:	d01a      	beq.n	8004a9a <I2C_MasterTransmit_TXE+0x6e>
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a6a:	d016      	beq.n	8004a9a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a7a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2211      	movs	r2, #17
 8004a80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2220      	movs	r2, #32
 8004a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7ff ff6c 	bl	8004970 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a98:	e060      	b.n	8004b5c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004aa8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ab8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b40      	cmp	r3, #64	; 0x40
 8004ad2:	d107      	bne.n	8004ae4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f7ff ff87 	bl	80049f0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004ae2:	e03b      	b.n	8004b5c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f7ff ff3f 	bl	8004970 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004af2:	e033      	b.n	8004b5c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004af4:	7bfb      	ldrb	r3, [r7, #15]
 8004af6:	2b21      	cmp	r3, #33	; 0x21
 8004af8:	d005      	beq.n	8004b06 <I2C_MasterTransmit_TXE+0xda>
 8004afa:	7bbb      	ldrb	r3, [r7, #14]
 8004afc:	2b40      	cmp	r3, #64	; 0x40
 8004afe:	d12d      	bne.n	8004b5c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004b00:	7bfb      	ldrb	r3, [r7, #15]
 8004b02:	2b22      	cmp	r3, #34	; 0x22
 8004b04:	d12a      	bne.n	8004b5c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d108      	bne.n	8004b22 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	685a      	ldr	r2, [r3, #4]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b1e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004b20:	e01c      	b.n	8004b5c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b40      	cmp	r3, #64	; 0x40
 8004b2c:	d103      	bne.n	8004b36 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f88e 	bl	8004c50 <I2C_MemoryTransmit_TXE_BTF>
}
 8004b34:	e012      	b.n	8004b5c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3a:	781a      	ldrb	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b46:	1c5a      	adds	r2, r3, #1
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	3b01      	subs	r3, #1
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004b5a:	e7ff      	b.n	8004b5c <I2C_MasterTransmit_TXE+0x130>
 8004b5c:	bf00      	nop
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b70:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b21      	cmp	r3, #33	; 0x21
 8004b7c:	d164      	bne.n	8004c48 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d012      	beq.n	8004bae <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8c:	781a      	ldrb	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b98:	1c5a      	adds	r2, r3, #1
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004bac:	e04c      	b.n	8004c48 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d01d      	beq.n	8004bf0 <I2C_MasterTransmit_BTF+0x8c>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2b20      	cmp	r3, #32
 8004bb8:	d01a      	beq.n	8004bf0 <I2C_MasterTransmit_BTF+0x8c>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004bc0:	d016      	beq.n	8004bf0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bd0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2211      	movs	r2, #17
 8004bd6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2220      	movs	r2, #32
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f7ff fec1 	bl	8004970 <HAL_I2C_MasterTxCpltCallback>
}
 8004bee:	e02b      	b.n	8004c48 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bfe:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c0e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b40      	cmp	r3, #64	; 0x40
 8004c28:	d107      	bne.n	8004c3a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7ff fedc 	bl	80049f0 <HAL_I2C_MemTxCpltCallback>
}
 8004c38:	e006      	b.n	8004c48 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7ff fe94 	bl	8004970 <HAL_I2C_MasterTxCpltCallback>
}
 8004c48:	bf00      	nop
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c5e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d11d      	bne.n	8004ca4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d10b      	bne.n	8004c88 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c74:	b2da      	uxtb	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c80:	1c9a      	adds	r2, r3, #2
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004c86:	e073      	b.n	8004d70 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	121b      	asrs	r3, r3, #8
 8004c90:	b2da      	uxtb	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c9c:	1c5a      	adds	r2, r3, #1
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004ca2:	e065      	b.n	8004d70 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d10b      	bne.n	8004cc4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cbc:	1c5a      	adds	r2, r3, #1
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004cc2:	e055      	b.n	8004d70 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d151      	bne.n	8004d70 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
 8004cce:	2b22      	cmp	r3, #34	; 0x22
 8004cd0:	d10d      	bne.n	8004cee <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ce0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce6:	1c5a      	adds	r2, r3, #1
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004cec:	e040      	b.n	8004d70 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d015      	beq.n	8004d24 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004cf8:	7bfb      	ldrb	r3, [r7, #15]
 8004cfa:	2b21      	cmp	r3, #33	; 0x21
 8004cfc:	d112      	bne.n	8004d24 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	781a      	ldrb	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	1c5a      	adds	r2, r3, #1
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004d22:	e025      	b.n	8004d70 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d120      	bne.n	8004d70 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004d2e:	7bfb      	ldrb	r3, [r7, #15]
 8004d30:	2b21      	cmp	r3, #33	; 0x21
 8004d32:	d11d      	bne.n	8004d70 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d42:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d52:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f7ff fe40 	bl	80049f0 <HAL_I2C_MemTxCpltCallback>
}
 8004d70:	bf00      	nop
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b22      	cmp	r3, #34	; 0x22
 8004d8a:	f040 80a2 	bne.w	8004ed2 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2b03      	cmp	r3, #3
 8004d9a:	d921      	bls.n	8004de0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	691a      	ldr	r2, [r3, #16]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	b2d2      	uxtb	r2, r2
 8004da8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	1c5a      	adds	r2, r3, #1
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	2b03      	cmp	r3, #3
 8004dca:	f040 8082 	bne.w	8004ed2 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ddc:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004dde:	e078      	b.n	8004ed2 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d074      	beq.n	8004ed2 <I2C_MasterReceive_RXNE+0x15a>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d002      	beq.n	8004df4 <I2C_MasterReceive_RXNE+0x7c>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d16e      	bne.n	8004ed2 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f001 f81d 	bl	8005e34 <I2C_WaitOnSTOPRequestThroughIT>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d142      	bne.n	8004e86 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e0e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e1e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	691a      	ldr	r2, [r3, #16]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	b2d2      	uxtb	r2, r2
 8004e2c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	1c5a      	adds	r2, r3, #1
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b40      	cmp	r3, #64	; 0x40
 8004e58:	d10a      	bne.n	8004e70 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7fd fdab 	bl	80029c4 <HAL_I2C_MemRxCpltCallback>
}
 8004e6e:	e030      	b.n	8004ed2 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2212      	movs	r2, #18
 8004e7c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7ff fd80 	bl	8004984 <HAL_I2C_MasterRxCpltCallback>
}
 8004e84:	e025      	b.n	8004ed2 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e94:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	691a      	ldr	r2, [r3, #16]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea0:	b2d2      	uxtb	r2, r2
 8004ea2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea8:	1c5a      	adds	r2, r3, #1
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f7ff fd99 	bl	8004a04 <HAL_I2C_ErrorCallback>
}
 8004ed2:	bf00      	nop
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b084      	sub	sp, #16
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	2b04      	cmp	r3, #4
 8004ef0:	d11b      	bne.n	8004f2a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f00:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	691a      	ldr	r2, [r3, #16]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	b2d2      	uxtb	r2, r2
 8004f0e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	1c5a      	adds	r2, r3, #1
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	3b01      	subs	r3, #1
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004f28:	e0bd      	b.n	80050a6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	2b03      	cmp	r3, #3
 8004f32:	d129      	bne.n	8004f88 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f42:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2b04      	cmp	r3, #4
 8004f48:	d00a      	beq.n	8004f60 <I2C_MasterReceive_BTF+0x86>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d007      	beq.n	8004f60 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f5e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	691a      	ldr	r2, [r3, #16]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	b2d2      	uxtb	r2, r2
 8004f6c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f72:	1c5a      	adds	r2, r3, #1
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004f86:	e08e      	b.n	80050a6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d176      	bne.n	8005080 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d002      	beq.n	8004f9e <I2C_MasterReceive_BTF+0xc4>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2b10      	cmp	r3, #16
 8004f9c:	d108      	bne.n	8004fb0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	e019      	b.n	8004fe4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2b04      	cmp	r3, #4
 8004fb4:	d002      	beq.n	8004fbc <I2C_MasterReceive_BTF+0xe2>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d108      	bne.n	8004fce <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004fca:	601a      	str	r2, [r3, #0]
 8004fcc:	e00a      	b.n	8004fe4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2b10      	cmp	r3, #16
 8004fd2:	d007      	beq.n	8004fe4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fe2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	691a      	ldr	r2, [r3, #16]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fee:	b2d2      	uxtb	r2, r2
 8004ff0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	1c5a      	adds	r2, r3, #1
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005000:	b29b      	uxth	r3, r3
 8005002:	3b01      	subs	r3, #1
 8005004:	b29a      	uxth	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	691a      	ldr	r2, [r3, #16]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005014:	b2d2      	uxtb	r2, r2
 8005016:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501c:	1c5a      	adds	r2, r3, #1
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005026:	b29b      	uxth	r3, r3
 8005028:	3b01      	subs	r3, #1
 800502a:	b29a      	uxth	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800503e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2220      	movs	r2, #32
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b40      	cmp	r3, #64	; 0x40
 8005052:	d10a      	bne.n	800506a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7fd fcae 	bl	80029c4 <HAL_I2C_MemRxCpltCallback>
}
 8005068:	e01d      	b.n	80050a6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2212      	movs	r2, #18
 8005076:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f7ff fc83 	bl	8004984 <HAL_I2C_MasterRxCpltCallback>
}
 800507e:	e012      	b.n	80050a6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	691a      	ldr	r2, [r3, #16]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005092:	1c5a      	adds	r2, r3, #1
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509c:	b29b      	uxth	r3, r3
 800509e:	3b01      	subs	r3, #1
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80050a6:	bf00      	nop
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80050ae:	b480      	push	{r7}
 80050b0:	b083      	sub	sp, #12
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b40      	cmp	r3, #64	; 0x40
 80050c0:	d117      	bne.n	80050f2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d109      	bne.n	80050de <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	461a      	mov	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050da:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80050dc:	e067      	b.n	80051ae <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	f043 0301 	orr.w	r3, r3, #1
 80050e8:	b2da      	uxtb	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	611a      	str	r2, [r3, #16]
}
 80050f0:	e05d      	b.n	80051ae <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050fa:	d133      	bne.n	8005164 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b21      	cmp	r3, #33	; 0x21
 8005106:	d109      	bne.n	800511c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800510c:	b2db      	uxtb	r3, r3
 800510e:	461a      	mov	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005118:	611a      	str	r2, [r3, #16]
 800511a:	e008      	b.n	800512e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005120:	b2db      	uxtb	r3, r3
 8005122:	f043 0301 	orr.w	r3, r3, #1
 8005126:	b2da      	uxtb	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005132:	2b00      	cmp	r3, #0
 8005134:	d004      	beq.n	8005140 <I2C_Master_SB+0x92>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800513a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800513c:	2b00      	cmp	r3, #0
 800513e:	d108      	bne.n	8005152 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005144:	2b00      	cmp	r3, #0
 8005146:	d032      	beq.n	80051ae <I2C_Master_SB+0x100>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514e:	2b00      	cmp	r3, #0
 8005150:	d02d      	beq.n	80051ae <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005160:	605a      	str	r2, [r3, #4]
}
 8005162:	e024      	b.n	80051ae <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10e      	bne.n	800518a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005170:	b29b      	uxth	r3, r3
 8005172:	11db      	asrs	r3, r3, #7
 8005174:	b2db      	uxtb	r3, r3
 8005176:	f003 0306 	and.w	r3, r3, #6
 800517a:	b2db      	uxtb	r3, r3
 800517c:	f063 030f 	orn	r3, r3, #15
 8005180:	b2da      	uxtb	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	611a      	str	r2, [r3, #16]
}
 8005188:	e011      	b.n	80051ae <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800518e:	2b01      	cmp	r3, #1
 8005190:	d10d      	bne.n	80051ae <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005196:	b29b      	uxth	r3, r3
 8005198:	11db      	asrs	r3, r3, #7
 800519a:	b2db      	uxtb	r3, r3
 800519c:	f003 0306 	and.w	r3, r3, #6
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	f063 030e 	orn	r3, r3, #14
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	611a      	str	r2, [r3, #16]
}
 80051ae:	bf00      	nop
 80051b0:	370c      	adds	r7, #12
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b083      	sub	sp, #12
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d004      	beq.n	80051e0 <I2C_Master_ADD10+0x26>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d108      	bne.n	80051f2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00c      	beq.n	8005202 <I2C_Master_ADD10+0x48>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d007      	beq.n	8005202 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005200:	605a      	str	r2, [r3, #4]
  }
}
 8005202:	bf00      	nop
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800520e:	b480      	push	{r7}
 8005210:	b091      	sub	sp, #68	; 0x44
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800521c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005224:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b22      	cmp	r3, #34	; 0x22
 8005236:	f040 8169 	bne.w	800550c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800523e:	2b00      	cmp	r3, #0
 8005240:	d10f      	bne.n	8005262 <I2C_Master_ADDR+0x54>
 8005242:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005246:	2b40      	cmp	r3, #64	; 0x40
 8005248:	d10b      	bne.n	8005262 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800524a:	2300      	movs	r3, #0
 800524c:	633b      	str	r3, [r7, #48]	; 0x30
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	633b      	str	r3, [r7, #48]	; 0x30
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	633b      	str	r3, [r7, #48]	; 0x30
 800525e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005260:	e160      	b.n	8005524 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005266:	2b00      	cmp	r3, #0
 8005268:	d11d      	bne.n	80052a6 <I2C_Master_ADDR+0x98>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005272:	d118      	bne.n	80052a6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005274:	2300      	movs	r3, #0
 8005276:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005288:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005298:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800529e:	1c5a      	adds	r2, r3, #1
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	651a      	str	r2, [r3, #80]	; 0x50
 80052a4:	e13e      	b.n	8005524 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d113      	bne.n	80052d8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052b0:	2300      	movs	r3, #0
 80052b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80052c4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052d4:	601a      	str	r2, [r3, #0]
 80052d6:	e115      	b.n	8005504 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052dc:	b29b      	uxth	r3, r3
 80052de:	2b01      	cmp	r3, #1
 80052e0:	f040 808a 	bne.w	80053f8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80052e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80052ea:	d137      	bne.n	800535c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052fa:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800530a:	d113      	bne.n	8005334 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800531a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800531c:	2300      	movs	r3, #0
 800531e:	627b      	str	r3, [r7, #36]	; 0x24
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	627b      	str	r3, [r7, #36]	; 0x24
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	627b      	str	r3, [r7, #36]	; 0x24
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	e0e7      	b.n	8005504 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005334:	2300      	movs	r3, #0
 8005336:	623b      	str	r3, [r7, #32]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	623b      	str	r3, [r7, #32]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	623b      	str	r3, [r7, #32]
 8005348:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005358:	601a      	str	r2, [r3, #0]
 800535a:	e0d3      	b.n	8005504 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800535c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800535e:	2b08      	cmp	r3, #8
 8005360:	d02e      	beq.n	80053c0 <I2C_Master_ADDR+0x1b2>
 8005362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005364:	2b20      	cmp	r3, #32
 8005366:	d02b      	beq.n	80053c0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800536a:	2b12      	cmp	r3, #18
 800536c:	d102      	bne.n	8005374 <I2C_Master_ADDR+0x166>
 800536e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005370:	2b01      	cmp	r3, #1
 8005372:	d125      	bne.n	80053c0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005376:	2b04      	cmp	r3, #4
 8005378:	d00e      	beq.n	8005398 <I2C_Master_ADDR+0x18a>
 800537a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537c:	2b02      	cmp	r3, #2
 800537e:	d00b      	beq.n	8005398 <I2C_Master_ADDR+0x18a>
 8005380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005382:	2b10      	cmp	r3, #16
 8005384:	d008      	beq.n	8005398 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005394:	601a      	str	r2, [r3, #0]
 8005396:	e007      	b.n	80053a8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053a6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053a8:	2300      	movs	r3, #0
 80053aa:	61fb      	str	r3, [r7, #28]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	61fb      	str	r3, [r7, #28]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	61fb      	str	r3, [r7, #28]
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	e0a1      	b.n	8005504 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053ce:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053d0:	2300      	movs	r3, #0
 80053d2:	61bb      	str	r3, [r7, #24]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	61bb      	str	r3, [r7, #24]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	61bb      	str	r3, [r7, #24]
 80053e4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053f4:	601a      	str	r2, [r3, #0]
 80053f6:	e085      	b.n	8005504 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d14d      	bne.n	800549e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005404:	2b04      	cmp	r3, #4
 8005406:	d016      	beq.n	8005436 <I2C_Master_ADDR+0x228>
 8005408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540a:	2b02      	cmp	r3, #2
 800540c:	d013      	beq.n	8005436 <I2C_Master_ADDR+0x228>
 800540e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005410:	2b10      	cmp	r3, #16
 8005412:	d010      	beq.n	8005436 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005422:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005432:	601a      	str	r2, [r3, #0]
 8005434:	e007      	b.n	8005446 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005444:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005450:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005454:	d117      	bne.n	8005486 <I2C_Master_ADDR+0x278>
 8005456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005458:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800545c:	d00b      	beq.n	8005476 <I2C_Master_ADDR+0x268>
 800545e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005460:	2b01      	cmp	r3, #1
 8005462:	d008      	beq.n	8005476 <I2C_Master_ADDR+0x268>
 8005464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005466:	2b08      	cmp	r3, #8
 8005468:	d005      	beq.n	8005476 <I2C_Master_ADDR+0x268>
 800546a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546c:	2b10      	cmp	r3, #16
 800546e:	d002      	beq.n	8005476 <I2C_Master_ADDR+0x268>
 8005470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005472:	2b20      	cmp	r3, #32
 8005474:	d107      	bne.n	8005486 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	685a      	ldr	r2, [r3, #4]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005484:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005486:	2300      	movs	r3, #0
 8005488:	617b      	str	r3, [r7, #20]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	617b      	str	r3, [r7, #20]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	617b      	str	r3, [r7, #20]
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	e032      	b.n	8005504 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054ac:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054bc:	d117      	bne.n	80054ee <I2C_Master_ADDR+0x2e0>
 80054be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054c4:	d00b      	beq.n	80054de <I2C_Master_ADDR+0x2d0>
 80054c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d008      	beq.n	80054de <I2C_Master_ADDR+0x2d0>
 80054cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ce:	2b08      	cmp	r3, #8
 80054d0:	d005      	beq.n	80054de <I2C_Master_ADDR+0x2d0>
 80054d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d4:	2b10      	cmp	r3, #16
 80054d6:	d002      	beq.n	80054de <I2C_Master_ADDR+0x2d0>
 80054d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054da:	2b20      	cmp	r3, #32
 80054dc:	d107      	bne.n	80054ee <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80054ec:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054ee:	2300      	movs	r3, #0
 80054f0:	613b      	str	r3, [r7, #16]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	613b      	str	r3, [r7, #16]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	613b      	str	r3, [r7, #16]
 8005502:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800550a:	e00b      	b.n	8005524 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800550c:	2300      	movs	r3, #0
 800550e:	60fb      	str	r3, [r7, #12]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	60fb      	str	r3, [r7, #12]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	60fb      	str	r3, [r7, #12]
 8005520:	68fb      	ldr	r3, [r7, #12]
}
 8005522:	e7ff      	b.n	8005524 <I2C_Master_ADDR+0x316>
 8005524:	bf00      	nop
 8005526:	3744      	adds	r7, #68	; 0x44
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800553e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005544:	b29b      	uxth	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d02b      	beq.n	80055a2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554e:	781a      	ldrb	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555a:	1c5a      	adds	r2, r3, #1
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005564:	b29b      	uxth	r3, r3
 8005566:	3b01      	subs	r3, #1
 8005568:	b29a      	uxth	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005572:	b29b      	uxth	r3, r3
 8005574:	2b00      	cmp	r3, #0
 8005576:	d114      	bne.n	80055a2 <I2C_SlaveTransmit_TXE+0x72>
 8005578:	7bfb      	ldrb	r3, [r7, #15]
 800557a:	2b29      	cmp	r3, #41	; 0x29
 800557c:	d111      	bne.n	80055a2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	685a      	ldr	r2, [r3, #4]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800558c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2221      	movs	r2, #33	; 0x21
 8005592:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2228      	movs	r2, #40	; 0x28
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f7ff f9fb 	bl	8004998 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80055a2:	bf00      	nop
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b083      	sub	sp, #12
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d011      	beq.n	80055e0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c0:	781a      	ldrb	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055cc:	1c5a      	adds	r2, r3, #1
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	3b01      	subs	r3, #1
 80055da:	b29a      	uxth	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055fa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005600:	b29b      	uxth	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d02c      	beq.n	8005660 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	691a      	ldr	r2, [r3, #16]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005610:	b2d2      	uxtb	r2, r2
 8005612:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005618:	1c5a      	adds	r2, r3, #1
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005622:	b29b      	uxth	r3, r3
 8005624:	3b01      	subs	r3, #1
 8005626:	b29a      	uxth	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005630:	b29b      	uxth	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d114      	bne.n	8005660 <I2C_SlaveReceive_RXNE+0x74>
 8005636:	7bfb      	ldrb	r3, [r7, #15]
 8005638:	2b2a      	cmp	r3, #42	; 0x2a
 800563a:	d111      	bne.n	8005660 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	685a      	ldr	r2, [r3, #4]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800564a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2222      	movs	r2, #34	; 0x22
 8005650:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2228      	movs	r2, #40	; 0x28
 8005656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f7ff f9a6 	bl	80049ac <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005660:	bf00      	nop
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005674:	b29b      	uxth	r3, r3
 8005676:	2b00      	cmp	r3, #0
 8005678:	d012      	beq.n	80056a0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	691a      	ldr	r2, [r3, #16]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005684:	b2d2      	uxtb	r2, r2
 8005686:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568c:	1c5a      	adds	r2, r3, #1
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005696:	b29b      	uxth	r3, r3
 8005698:	3b01      	subs	r3, #1
 800569a:	b29a      	uxth	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80056b6:	2300      	movs	r3, #0
 80056b8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80056c6:	2b28      	cmp	r3, #40	; 0x28
 80056c8:	d127      	bne.n	800571a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056d8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	089b      	lsrs	r3, r3, #2
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80056e6:	2301      	movs	r3, #1
 80056e8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	09db      	lsrs	r3, r3, #7
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d103      	bne.n	80056fe <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	81bb      	strh	r3, [r7, #12]
 80056fc:	e002      	b.n	8005704 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800570c:	89ba      	ldrh	r2, [r7, #12]
 800570e:	7bfb      	ldrb	r3, [r7, #15]
 8005710:	4619      	mov	r1, r3
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7ff f954 	bl	80049c0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005718:	e00e      	b.n	8005738 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800571a:	2300      	movs	r3, #0
 800571c:	60bb      	str	r3, [r7, #8]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	695b      	ldr	r3, [r3, #20]
 8005724:	60bb      	str	r3, [r7, #8]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	60bb      	str	r3, [r7, #8]
 800572e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005738:	bf00      	nop
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800574e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800575e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005760:	2300      	movs	r3, #0
 8005762:	60bb      	str	r3, [r7, #8]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	60bb      	str	r3, [r7, #8]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f042 0201 	orr.w	r2, r2, #1
 800577a:	601a      	str	r2, [r3, #0]
 800577c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800578c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005798:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800579c:	d172      	bne.n	8005884 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800579e:	7bfb      	ldrb	r3, [r7, #15]
 80057a0:	2b22      	cmp	r3, #34	; 0x22
 80057a2:	d002      	beq.n	80057aa <I2C_Slave_STOPF+0x6a>
 80057a4:	7bfb      	ldrb	r3, [r7, #15]
 80057a6:	2b2a      	cmp	r3, #42	; 0x2a
 80057a8:	d135      	bne.n	8005816 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057bc:	b29b      	uxth	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d005      	beq.n	80057ce <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c6:	f043 0204 	orr.w	r2, r3, #4
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057dc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7fe fac4 	bl	8003d70 <HAL_DMA_GetState>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d049      	beq.n	8005882 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f2:	4a69      	ldr	r2, [pc, #420]	; (8005998 <I2C_Slave_STOPF+0x258>)
 80057f4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fe f90c 	bl	8003a18 <HAL_DMA_Abort_IT>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d03d      	beq.n	8005882 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005810:	4610      	mov	r0, r2
 8005812:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005814:	e035      	b.n	8005882 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	b29a      	uxth	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005828:	b29b      	uxth	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d005      	beq.n	800583a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005832:	f043 0204 	orr.w	r2, r3, #4
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005848:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800584e:	4618      	mov	r0, r3
 8005850:	f7fe fa8e 	bl	8003d70 <HAL_DMA_GetState>
 8005854:	4603      	mov	r3, r0
 8005856:	2b01      	cmp	r3, #1
 8005858:	d014      	beq.n	8005884 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800585e:	4a4e      	ldr	r2, [pc, #312]	; (8005998 <I2C_Slave_STOPF+0x258>)
 8005860:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005866:	4618      	mov	r0, r3
 8005868:	f7fe f8d6 	bl	8003a18 <HAL_DMA_Abort_IT>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d008      	beq.n	8005884 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800587c:	4610      	mov	r0, r2
 800587e:	4798      	blx	r3
 8005880:	e000      	b.n	8005884 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005882:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005888:	b29b      	uxth	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d03e      	beq.n	800590c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	f003 0304 	and.w	r3, r3, #4
 8005898:	2b04      	cmp	r3, #4
 800589a:	d112      	bne.n	80058c2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	691a      	ldr	r2, [r3, #16]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a6:	b2d2      	uxtb	r2, r2
 80058a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ae:	1c5a      	adds	r2, r3, #1
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	3b01      	subs	r3, #1
 80058bc:	b29a      	uxth	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058cc:	2b40      	cmp	r3, #64	; 0x40
 80058ce:	d112      	bne.n	80058f6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	691a      	ldr	r2, [r3, #16]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	b2d2      	uxtb	r2, r2
 80058dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e2:	1c5a      	adds	r2, r3, #1
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	3b01      	subs	r3, #1
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d005      	beq.n	800590c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005904:	f043 0204 	orr.w	r2, r3, #4
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005910:	2b00      	cmp	r3, #0
 8005912:	d003      	beq.n	800591c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 f8b3 	bl	8005a80 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800591a:	e039      	b.n	8005990 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800591c:	7bfb      	ldrb	r3, [r7, #15]
 800591e:	2b2a      	cmp	r3, #42	; 0x2a
 8005920:	d109      	bne.n	8005936 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2228      	movs	r2, #40	; 0x28
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f7ff f83b 	bl	80049ac <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b28      	cmp	r3, #40	; 0x28
 8005940:	d111      	bne.n	8005966 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a15      	ldr	r2, [pc, #84]	; (800599c <I2C_Slave_STOPF+0x25c>)
 8005946:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2220      	movs	r2, #32
 8005952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7ff f83c 	bl	80049dc <HAL_I2C_ListenCpltCallback>
}
 8005964:	e014      	b.n	8005990 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596a:	2b22      	cmp	r3, #34	; 0x22
 800596c:	d002      	beq.n	8005974 <I2C_Slave_STOPF+0x234>
 800596e:	7bfb      	ldrb	r3, [r7, #15]
 8005970:	2b22      	cmp	r3, #34	; 0x22
 8005972:	d10d      	bne.n	8005990 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2220      	movs	r2, #32
 800597e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7ff f80e 	bl	80049ac <HAL_I2C_SlaveRxCpltCallback>
}
 8005990:	bf00      	nop
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	08005ce5 	.word	0x08005ce5
 800599c:	ffff0000 	.word	0xffff0000

080059a0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ae:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	2b08      	cmp	r3, #8
 80059ba:	d002      	beq.n	80059c2 <I2C_Slave_AF+0x22>
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	2b20      	cmp	r3, #32
 80059c0:	d129      	bne.n	8005a16 <I2C_Slave_AF+0x76>
 80059c2:	7bfb      	ldrb	r3, [r7, #15]
 80059c4:	2b28      	cmp	r3, #40	; 0x28
 80059c6:	d126      	bne.n	8005a16 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a2c      	ldr	r2, [pc, #176]	; (8005a7c <I2C_Slave_AF+0xdc>)
 80059cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80059dc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059e6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059f6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2220      	movs	r2, #32
 8005a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7fe ffe4 	bl	80049dc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005a14:	e02e      	b.n	8005a74 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005a16:	7bfb      	ldrb	r3, [r7, #15]
 8005a18:	2b21      	cmp	r3, #33	; 0x21
 8005a1a:	d126      	bne.n	8005a6a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a17      	ldr	r2, [pc, #92]	; (8005a7c <I2C_Slave_AF+0xdc>)
 8005a20:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2221      	movs	r2, #33	; 0x21
 8005a26:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685a      	ldr	r2, [r3, #4]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a46:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a50:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a60:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7fe ff98 	bl	8004998 <HAL_I2C_SlaveTxCpltCallback>
}
 8005a68:	e004      	b.n	8005a74 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a72:	615a      	str	r2, [r3, #20]
}
 8005a74:	bf00      	nop
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	ffff0000 	.word	0xffff0000

08005a80 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a8e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a96:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005a98:	7bbb      	ldrb	r3, [r7, #14]
 8005a9a:	2b10      	cmp	r3, #16
 8005a9c:	d002      	beq.n	8005aa4 <I2C_ITError+0x24>
 8005a9e:	7bbb      	ldrb	r3, [r7, #14]
 8005aa0:	2b40      	cmp	r3, #64	; 0x40
 8005aa2:	d10a      	bne.n	8005aba <I2C_ITError+0x3a>
 8005aa4:	7bfb      	ldrb	r3, [r7, #15]
 8005aa6:	2b22      	cmp	r3, #34	; 0x22
 8005aa8:	d107      	bne.n	8005aba <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ab8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005aba:	7bfb      	ldrb	r3, [r7, #15]
 8005abc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005ac0:	2b28      	cmp	r3, #40	; 0x28
 8005ac2:	d107      	bne.n	8005ad4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2228      	movs	r2, #40	; 0x28
 8005ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005ad2:	e015      	b.n	8005b00 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ade:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ae2:	d00a      	beq.n	8005afa <I2C_ITError+0x7a>
 8005ae4:	7bfb      	ldrb	r3, [r7, #15]
 8005ae6:	2b60      	cmp	r3, #96	; 0x60
 8005ae8:	d007      	beq.n	8005afa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2220      	movs	r2, #32
 8005aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b0e:	d162      	bne.n	8005bd6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b1e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d020      	beq.n	8005b70 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b32:	4a6a      	ldr	r2, [pc, #424]	; (8005cdc <I2C_ITError+0x25c>)
 8005b34:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7fd ff6c 	bl	8003a18 <HAL_DMA_Abort_IT>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f000 8089 	beq.w	8005c5a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f022 0201 	bic.w	r2, r2, #1
 8005b56:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b6a:	4610      	mov	r0, r2
 8005b6c:	4798      	blx	r3
 8005b6e:	e074      	b.n	8005c5a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b74:	4a59      	ldr	r2, [pc, #356]	; (8005cdc <I2C_ITError+0x25c>)
 8005b76:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7fd ff4b 	bl	8003a18 <HAL_DMA_Abort_IT>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d068      	beq.n	8005c5a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b92:	2b40      	cmp	r3, #64	; 0x40
 8005b94:	d10b      	bne.n	8005bae <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	691a      	ldr	r2, [r3, #16]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba0:	b2d2      	uxtb	r2, r2
 8005ba2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba8:	1c5a      	adds	r2, r3, #1
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f022 0201 	bic.w	r2, r2, #1
 8005bbc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2220      	movs	r2, #32
 8005bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005bd0:	4610      	mov	r0, r2
 8005bd2:	4798      	blx	r3
 8005bd4:	e041      	b.n	8005c5a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b60      	cmp	r3, #96	; 0x60
 8005be0:	d125      	bne.n	8005c2e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2220      	movs	r2, #32
 8005be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bfa:	2b40      	cmp	r3, #64	; 0x40
 8005bfc:	d10b      	bne.n	8005c16 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	691a      	ldr	r2, [r3, #16]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c08:	b2d2      	uxtb	r2, r2
 8005c0a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c10:	1c5a      	adds	r2, r3, #1
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 0201 	bic.w	r2, r2, #1
 8005c24:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f7fe fef6 	bl	8004a18 <HAL_I2C_AbortCpltCallback>
 8005c2c:	e015      	b.n	8005c5a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	695b      	ldr	r3, [r3, #20]
 8005c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c38:	2b40      	cmp	r3, #64	; 0x40
 8005c3a:	d10b      	bne.n	8005c54 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	691a      	ldr	r2, [r3, #16]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c46:	b2d2      	uxtb	r2, r2
 8005c48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4e:	1c5a      	adds	r2, r3, #1
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f7fe fed5 	bl	8004a04 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d10e      	bne.n	8005c88 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d109      	bne.n	8005c88 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d104      	bne.n	8005c88 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d007      	beq.n	8005c98 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c96:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c9e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca4:	f003 0304 	and.w	r3, r3, #4
 8005ca8:	2b04      	cmp	r3, #4
 8005caa:	d113      	bne.n	8005cd4 <I2C_ITError+0x254>
 8005cac:	7bfb      	ldrb	r3, [r7, #15]
 8005cae:	2b28      	cmp	r3, #40	; 0x28
 8005cb0:	d110      	bne.n	8005cd4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a0a      	ldr	r2, [pc, #40]	; (8005ce0 <I2C_ITError+0x260>)
 8005cb6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2220      	movs	r2, #32
 8005cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7fe fe84 	bl	80049dc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005cd4:	bf00      	nop
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	08005ce5 	.word	0x08005ce5
 8005ce0:	ffff0000 	.word	0xffff0000

08005ce4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b086      	sub	sp, #24
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cec:	2300      	movs	r3, #0
 8005cee:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cfc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005cfe:	4b4b      	ldr	r3, [pc, #300]	; (8005e2c <I2C_DMAAbort+0x148>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	08db      	lsrs	r3, r3, #3
 8005d04:	4a4a      	ldr	r2, [pc, #296]	; (8005e30 <I2C_DMAAbort+0x14c>)
 8005d06:	fba2 2303 	umull	r2, r3, r2, r3
 8005d0a:	0a1a      	lsrs	r2, r3, #8
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	4413      	add	r3, r2
 8005d12:	00da      	lsls	r2, r3, #3
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d106      	bne.n	8005d2c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d22:	f043 0220 	orr.w	r2, r3, #32
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005d2a:	e00a      	b.n	8005d42 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d40:	d0ea      	beq.n	8005d18 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d003      	beq.n	8005d52 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d4e:	2200      	movs	r2, #0
 8005d50:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d003      	beq.n	8005d62 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5e:	2200      	movs	r2, #0
 8005d60:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d70:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	2200      	movs	r2, #0
 8005d76:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d003      	beq.n	8005d88 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d84:	2200      	movs	r2, #0
 8005d86:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d003      	beq.n	8005d98 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d94:	2200      	movs	r2, #0
 8005d96:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f022 0201 	bic.w	r2, r2, #1
 8005da6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b60      	cmp	r3, #96	; 0x60
 8005db2:	d10e      	bne.n	8005dd2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	2220      	movs	r2, #32
 8005db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005dca:	6978      	ldr	r0, [r7, #20]
 8005dcc:	f7fe fe24 	bl	8004a18 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005dd0:	e027      	b.n	8005e22 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005dd2:	7cfb      	ldrb	r3, [r7, #19]
 8005dd4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005dd8:	2b28      	cmp	r3, #40	; 0x28
 8005dda:	d117      	bne.n	8005e0c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f042 0201 	orr.w	r2, r2, #1
 8005dea:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005dfa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	2228      	movs	r2, #40	; 0x28
 8005e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005e0a:	e007      	b.n	8005e1c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	2220      	movs	r2, #32
 8005e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005e1c:	6978      	ldr	r0, [r7, #20]
 8005e1e:	f7fe fdf1 	bl	8004a04 <HAL_I2C_ErrorCallback>
}
 8005e22:	bf00      	nop
 8005e24:	3718      	adds	r7, #24
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	20000104 	.word	0x20000104
 8005e30:	14f8b589 	.word	0x14f8b589

08005e34 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005e40:	4b13      	ldr	r3, [pc, #76]	; (8005e90 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	08db      	lsrs	r3, r3, #3
 8005e46:	4a13      	ldr	r2, [pc, #76]	; (8005e94 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005e48:	fba2 2303 	umull	r2, r3, r2, r3
 8005e4c:	0a1a      	lsrs	r2, r3, #8
 8005e4e:	4613      	mov	r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4413      	add	r3, r2
 8005e54:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d107      	bne.n	8005e72 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e66:	f043 0220 	orr.w	r2, r3, #32
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e008      	b.n	8005e84 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e80:	d0e9      	beq.n	8005e56 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3714      	adds	r7, #20
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr
 8005e90:	20000104 	.word	0x20000104
 8005e94:	14f8b589 	.word	0x14f8b589

08005e98 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005ea8:	d103      	bne.n	8005eb2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005eb0:	e007      	b.n	8005ec2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005eba:	d102      	bne.n	8005ec2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2208      	movs	r2, #8
 8005ec0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005ec2:	bf00      	nop
 8005ec4:	370c      	adds	r7, #12
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
	...

08005ed0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e264      	b.n	80063ac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d075      	beq.n	8005fda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005eee:	4ba3      	ldr	r3, [pc, #652]	; (800617c <HAL_RCC_OscConfig+0x2ac>)
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f003 030c 	and.w	r3, r3, #12
 8005ef6:	2b04      	cmp	r3, #4
 8005ef8:	d00c      	beq.n	8005f14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005efa:	4ba0      	ldr	r3, [pc, #640]	; (800617c <HAL_RCC_OscConfig+0x2ac>)
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f02:	2b08      	cmp	r3, #8
 8005f04:	d112      	bne.n	8005f2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f06:	4b9d      	ldr	r3, [pc, #628]	; (800617c <HAL_RCC_OscConfig+0x2ac>)
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f12:	d10b      	bne.n	8005f2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f14:	4b99      	ldr	r3, [pc, #612]	; (800617c <HAL_RCC_OscConfig+0x2ac>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d05b      	beq.n	8005fd8 <HAL_RCC_OscConfig+0x108>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d157      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e23f      	b.n	80063ac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f34:	d106      	bne.n	8005f44 <HAL_RCC_OscConfig+0x74>
 8005f36:	4b91      	ldr	r3, [pc, #580]	; (800617c <HAL_RCC_OscConfig+0x2ac>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a90      	ldr	r2, [pc, #576]	; (800617c <HAL_RCC_OscConfig+0x2ac>)
 8005f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f40:	6013      	str	r3, [r2, #0]
 8005f42:	e01d      	b.n	8005f80 <HAL_RCC_OscConfig+0xb0>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f4c:	d10c      	bne.n	8005f68 <HAL_RCC_OscConfig+0x98>
 8005f4e:	4b8b      	ldr	r3, [pc, #556]	; (800617c <HAL_RCC_OscConfig+0x2ac>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a8a      	ldr	r2, [pc, #552]	; (800617c <HAL_RCC_OscConfig+0x2ac>)
 8005f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f58:	6013      	str	r3, [r2, #0]
 8005f5a:	4b88      	ldr	r3, [pc, #544]	; (800617c <HAL_RCC_OscConfig+0x2ac>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a87      	ldr	r2, [pc, #540]	; (800617c <HAL_RCC_OscConfig+0x2ac>)
 8005f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f64:	6013      	str	r3, [r2, #0]
 8005f66:	e00b      	b.n	8005f80 <HAL_RCC_OscConfig+0xb0>
 8005f68:	4b84      	ldr	r3, [pc, #528]	; (800617c <HAL_RCC_OscConfig+0x2ac>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a83      	ldr	r2, [pc, #524]	; (800617c <HAL_RCC_OscConfig+0x2ac>)
 8005f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f72:	6013      	str	r3, [r2, #0]
 8005f74:	4b81      	ldr	r3, [pc, #516]	; (800617c <HAL_RCC_OscConfig+0x2ac>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a80      	ldr	r2, [pc, #512]	; (800617c <HAL_RCC_OscConfig+0x2ac>)
 8005f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d013      	beq.n	8005fb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f88:	f7fd fa8e 	bl	80034a8 <HAL_GetTick>
 8005f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f8e:	e008      	b.n	8005fa2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f90:	f7fd fa8a 	bl	80034a8 <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	2b64      	cmp	r3, #100	; 0x64
 8005f9c:	d901      	bls.n	8005fa2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e204      	b.n	80063ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fa2:	4b76      	ldr	r3, [pc, #472]	; (800617c <HAL_RCC_OscConfig+0x2ac>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d0f0      	beq.n	8005f90 <HAL_RCC_OscConfig+0xc0>
 8005fae:	e014      	b.n	8005fda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fb0:	f7fd fa7a 	bl	80034a8 <HAL_GetTick>
 8005fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fb6:	e008      	b.n	8005fca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fb8:	f7fd fa76 	bl	80034a8 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	2b64      	cmp	r3, #100	; 0x64
 8005fc4:	d901      	bls.n	8005fca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e1f0      	b.n	80063ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fca:	4b6c      	ldr	r3, [pc, #432]	; (800617c <HAL_RCC_OscConfig+0x2ac>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1f0      	bne.n	8005fb8 <HAL_RCC_OscConfig+0xe8>
 8005fd6:	e000      	b.n	8005fda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d063      	beq.n	80060ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005fe6:	4b65      	ldr	r3, [pc, #404]	; (800617c <HAL_RCC_OscConfig+0x2ac>)
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f003 030c 	and.w	r3, r3, #12
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00b      	beq.n	800600a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ff2:	4b62      	ldr	r3, [pc, #392]	; (800617c <HAL_RCC_OscConfig+0x2ac>)
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ffa:	2b08      	cmp	r3, #8
 8005ffc:	d11c      	bne.n	8006038 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ffe:	4b5f      	ldr	r3, [pc, #380]	; (800617c <HAL_RCC_OscConfig+0x2ac>)
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d116      	bne.n	8006038 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800600a:	4b5c      	ldr	r3, [pc, #368]	; (800617c <HAL_RCC_OscConfig+0x2ac>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0302 	and.w	r3, r3, #2
 8006012:	2b00      	cmp	r3, #0
 8006014:	d005      	beq.n	8006022 <HAL_RCC_OscConfig+0x152>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	2b01      	cmp	r3, #1
 800601c:	d001      	beq.n	8006022 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e1c4      	b.n	80063ac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006022:	4b56      	ldr	r3, [pc, #344]	; (800617c <HAL_RCC_OscConfig+0x2ac>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	00db      	lsls	r3, r3, #3
 8006030:	4952      	ldr	r1, [pc, #328]	; (800617c <HAL_RCC_OscConfig+0x2ac>)
 8006032:	4313      	orrs	r3, r2
 8006034:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006036:	e03a      	b.n	80060ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d020      	beq.n	8006082 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006040:	4b4f      	ldr	r3, [pc, #316]	; (8006180 <HAL_RCC_OscConfig+0x2b0>)
 8006042:	2201      	movs	r2, #1
 8006044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006046:	f7fd fa2f 	bl	80034a8 <HAL_GetTick>
 800604a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800604c:	e008      	b.n	8006060 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800604e:	f7fd fa2b 	bl	80034a8 <HAL_GetTick>
 8006052:	4602      	mov	r2, r0
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	2b02      	cmp	r3, #2
 800605a:	d901      	bls.n	8006060 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e1a5      	b.n	80063ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006060:	4b46      	ldr	r3, [pc, #280]	; (800617c <HAL_RCC_OscConfig+0x2ac>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 0302 	and.w	r3, r3, #2
 8006068:	2b00      	cmp	r3, #0
 800606a:	d0f0      	beq.n	800604e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800606c:	4b43      	ldr	r3, [pc, #268]	; (800617c <HAL_RCC_OscConfig+0x2ac>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	00db      	lsls	r3, r3, #3
 800607a:	4940      	ldr	r1, [pc, #256]	; (800617c <HAL_RCC_OscConfig+0x2ac>)
 800607c:	4313      	orrs	r3, r2
 800607e:	600b      	str	r3, [r1, #0]
 8006080:	e015      	b.n	80060ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006082:	4b3f      	ldr	r3, [pc, #252]	; (8006180 <HAL_RCC_OscConfig+0x2b0>)
 8006084:	2200      	movs	r2, #0
 8006086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006088:	f7fd fa0e 	bl	80034a8 <HAL_GetTick>
 800608c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800608e:	e008      	b.n	80060a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006090:	f7fd fa0a 	bl	80034a8 <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	2b02      	cmp	r3, #2
 800609c:	d901      	bls.n	80060a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e184      	b.n	80063ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060a2:	4b36      	ldr	r3, [pc, #216]	; (800617c <HAL_RCC_OscConfig+0x2ac>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1f0      	bne.n	8006090 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0308 	and.w	r3, r3, #8
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d030      	beq.n	800611c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d016      	beq.n	80060f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060c2:	4b30      	ldr	r3, [pc, #192]	; (8006184 <HAL_RCC_OscConfig+0x2b4>)
 80060c4:	2201      	movs	r2, #1
 80060c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060c8:	f7fd f9ee 	bl	80034a8 <HAL_GetTick>
 80060cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060ce:	e008      	b.n	80060e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060d0:	f7fd f9ea 	bl	80034a8 <HAL_GetTick>
 80060d4:	4602      	mov	r2, r0
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d901      	bls.n	80060e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e164      	b.n	80063ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060e2:	4b26      	ldr	r3, [pc, #152]	; (800617c <HAL_RCC_OscConfig+0x2ac>)
 80060e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060e6:	f003 0302 	and.w	r3, r3, #2
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d0f0      	beq.n	80060d0 <HAL_RCC_OscConfig+0x200>
 80060ee:	e015      	b.n	800611c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060f0:	4b24      	ldr	r3, [pc, #144]	; (8006184 <HAL_RCC_OscConfig+0x2b4>)
 80060f2:	2200      	movs	r2, #0
 80060f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060f6:	f7fd f9d7 	bl	80034a8 <HAL_GetTick>
 80060fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060fc:	e008      	b.n	8006110 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060fe:	f7fd f9d3 	bl	80034a8 <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	2b02      	cmp	r3, #2
 800610a:	d901      	bls.n	8006110 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e14d      	b.n	80063ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006110:	4b1a      	ldr	r3, [pc, #104]	; (800617c <HAL_RCC_OscConfig+0x2ac>)
 8006112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006114:	f003 0302 	and.w	r3, r3, #2
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1f0      	bne.n	80060fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0304 	and.w	r3, r3, #4
 8006124:	2b00      	cmp	r3, #0
 8006126:	f000 80a0 	beq.w	800626a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800612a:	2300      	movs	r3, #0
 800612c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800612e:	4b13      	ldr	r3, [pc, #76]	; (800617c <HAL_RCC_OscConfig+0x2ac>)
 8006130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10f      	bne.n	800615a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800613a:	2300      	movs	r3, #0
 800613c:	60bb      	str	r3, [r7, #8]
 800613e:	4b0f      	ldr	r3, [pc, #60]	; (800617c <HAL_RCC_OscConfig+0x2ac>)
 8006140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006142:	4a0e      	ldr	r2, [pc, #56]	; (800617c <HAL_RCC_OscConfig+0x2ac>)
 8006144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006148:	6413      	str	r3, [r2, #64]	; 0x40
 800614a:	4b0c      	ldr	r3, [pc, #48]	; (800617c <HAL_RCC_OscConfig+0x2ac>)
 800614c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006152:	60bb      	str	r3, [r7, #8]
 8006154:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006156:	2301      	movs	r3, #1
 8006158:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800615a:	4b0b      	ldr	r3, [pc, #44]	; (8006188 <HAL_RCC_OscConfig+0x2b8>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006162:	2b00      	cmp	r3, #0
 8006164:	d121      	bne.n	80061aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006166:	4b08      	ldr	r3, [pc, #32]	; (8006188 <HAL_RCC_OscConfig+0x2b8>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a07      	ldr	r2, [pc, #28]	; (8006188 <HAL_RCC_OscConfig+0x2b8>)
 800616c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006170:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006172:	f7fd f999 	bl	80034a8 <HAL_GetTick>
 8006176:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006178:	e011      	b.n	800619e <HAL_RCC_OscConfig+0x2ce>
 800617a:	bf00      	nop
 800617c:	40023800 	.word	0x40023800
 8006180:	42470000 	.word	0x42470000
 8006184:	42470e80 	.word	0x42470e80
 8006188:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800618c:	f7fd f98c 	bl	80034a8 <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	2b02      	cmp	r3, #2
 8006198:	d901      	bls.n	800619e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e106      	b.n	80063ac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800619e:	4b85      	ldr	r3, [pc, #532]	; (80063b4 <HAL_RCC_OscConfig+0x4e4>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d0f0      	beq.n	800618c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d106      	bne.n	80061c0 <HAL_RCC_OscConfig+0x2f0>
 80061b2:	4b81      	ldr	r3, [pc, #516]	; (80063b8 <HAL_RCC_OscConfig+0x4e8>)
 80061b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b6:	4a80      	ldr	r2, [pc, #512]	; (80063b8 <HAL_RCC_OscConfig+0x4e8>)
 80061b8:	f043 0301 	orr.w	r3, r3, #1
 80061bc:	6713      	str	r3, [r2, #112]	; 0x70
 80061be:	e01c      	b.n	80061fa <HAL_RCC_OscConfig+0x32a>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	2b05      	cmp	r3, #5
 80061c6:	d10c      	bne.n	80061e2 <HAL_RCC_OscConfig+0x312>
 80061c8:	4b7b      	ldr	r3, [pc, #492]	; (80063b8 <HAL_RCC_OscConfig+0x4e8>)
 80061ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061cc:	4a7a      	ldr	r2, [pc, #488]	; (80063b8 <HAL_RCC_OscConfig+0x4e8>)
 80061ce:	f043 0304 	orr.w	r3, r3, #4
 80061d2:	6713      	str	r3, [r2, #112]	; 0x70
 80061d4:	4b78      	ldr	r3, [pc, #480]	; (80063b8 <HAL_RCC_OscConfig+0x4e8>)
 80061d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061d8:	4a77      	ldr	r2, [pc, #476]	; (80063b8 <HAL_RCC_OscConfig+0x4e8>)
 80061da:	f043 0301 	orr.w	r3, r3, #1
 80061de:	6713      	str	r3, [r2, #112]	; 0x70
 80061e0:	e00b      	b.n	80061fa <HAL_RCC_OscConfig+0x32a>
 80061e2:	4b75      	ldr	r3, [pc, #468]	; (80063b8 <HAL_RCC_OscConfig+0x4e8>)
 80061e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e6:	4a74      	ldr	r2, [pc, #464]	; (80063b8 <HAL_RCC_OscConfig+0x4e8>)
 80061e8:	f023 0301 	bic.w	r3, r3, #1
 80061ec:	6713      	str	r3, [r2, #112]	; 0x70
 80061ee:	4b72      	ldr	r3, [pc, #456]	; (80063b8 <HAL_RCC_OscConfig+0x4e8>)
 80061f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f2:	4a71      	ldr	r2, [pc, #452]	; (80063b8 <HAL_RCC_OscConfig+0x4e8>)
 80061f4:	f023 0304 	bic.w	r3, r3, #4
 80061f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d015      	beq.n	800622e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006202:	f7fd f951 	bl	80034a8 <HAL_GetTick>
 8006206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006208:	e00a      	b.n	8006220 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800620a:	f7fd f94d 	bl	80034a8 <HAL_GetTick>
 800620e:	4602      	mov	r2, r0
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	f241 3288 	movw	r2, #5000	; 0x1388
 8006218:	4293      	cmp	r3, r2
 800621a:	d901      	bls.n	8006220 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e0c5      	b.n	80063ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006220:	4b65      	ldr	r3, [pc, #404]	; (80063b8 <HAL_RCC_OscConfig+0x4e8>)
 8006222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006224:	f003 0302 	and.w	r3, r3, #2
 8006228:	2b00      	cmp	r3, #0
 800622a:	d0ee      	beq.n	800620a <HAL_RCC_OscConfig+0x33a>
 800622c:	e014      	b.n	8006258 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800622e:	f7fd f93b 	bl	80034a8 <HAL_GetTick>
 8006232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006234:	e00a      	b.n	800624c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006236:	f7fd f937 	bl	80034a8 <HAL_GetTick>
 800623a:	4602      	mov	r2, r0
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	f241 3288 	movw	r2, #5000	; 0x1388
 8006244:	4293      	cmp	r3, r2
 8006246:	d901      	bls.n	800624c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e0af      	b.n	80063ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800624c:	4b5a      	ldr	r3, [pc, #360]	; (80063b8 <HAL_RCC_OscConfig+0x4e8>)
 800624e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006250:	f003 0302 	and.w	r3, r3, #2
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1ee      	bne.n	8006236 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006258:	7dfb      	ldrb	r3, [r7, #23]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d105      	bne.n	800626a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800625e:	4b56      	ldr	r3, [pc, #344]	; (80063b8 <HAL_RCC_OscConfig+0x4e8>)
 8006260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006262:	4a55      	ldr	r2, [pc, #340]	; (80063b8 <HAL_RCC_OscConfig+0x4e8>)
 8006264:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006268:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	699b      	ldr	r3, [r3, #24]
 800626e:	2b00      	cmp	r3, #0
 8006270:	f000 809b 	beq.w	80063aa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006274:	4b50      	ldr	r3, [pc, #320]	; (80063b8 <HAL_RCC_OscConfig+0x4e8>)
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f003 030c 	and.w	r3, r3, #12
 800627c:	2b08      	cmp	r3, #8
 800627e:	d05c      	beq.n	800633a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	2b02      	cmp	r3, #2
 8006286:	d141      	bne.n	800630c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006288:	4b4c      	ldr	r3, [pc, #304]	; (80063bc <HAL_RCC_OscConfig+0x4ec>)
 800628a:	2200      	movs	r2, #0
 800628c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800628e:	f7fd f90b 	bl	80034a8 <HAL_GetTick>
 8006292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006294:	e008      	b.n	80062a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006296:	f7fd f907 	bl	80034a8 <HAL_GetTick>
 800629a:	4602      	mov	r2, r0
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d901      	bls.n	80062a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80062a4:	2303      	movs	r3, #3
 80062a6:	e081      	b.n	80063ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062a8:	4b43      	ldr	r3, [pc, #268]	; (80063b8 <HAL_RCC_OscConfig+0x4e8>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d1f0      	bne.n	8006296 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	69da      	ldr	r2, [r3, #28]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6a1b      	ldr	r3, [r3, #32]
 80062bc:	431a      	orrs	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c2:	019b      	lsls	r3, r3, #6
 80062c4:	431a      	orrs	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ca:	085b      	lsrs	r3, r3, #1
 80062cc:	3b01      	subs	r3, #1
 80062ce:	041b      	lsls	r3, r3, #16
 80062d0:	431a      	orrs	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d6:	061b      	lsls	r3, r3, #24
 80062d8:	4937      	ldr	r1, [pc, #220]	; (80063b8 <HAL_RCC_OscConfig+0x4e8>)
 80062da:	4313      	orrs	r3, r2
 80062dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062de:	4b37      	ldr	r3, [pc, #220]	; (80063bc <HAL_RCC_OscConfig+0x4ec>)
 80062e0:	2201      	movs	r2, #1
 80062e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062e4:	f7fd f8e0 	bl	80034a8 <HAL_GetTick>
 80062e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062ea:	e008      	b.n	80062fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062ec:	f7fd f8dc 	bl	80034a8 <HAL_GetTick>
 80062f0:	4602      	mov	r2, r0
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d901      	bls.n	80062fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e056      	b.n	80063ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062fe:	4b2e      	ldr	r3, [pc, #184]	; (80063b8 <HAL_RCC_OscConfig+0x4e8>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d0f0      	beq.n	80062ec <HAL_RCC_OscConfig+0x41c>
 800630a:	e04e      	b.n	80063aa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800630c:	4b2b      	ldr	r3, [pc, #172]	; (80063bc <HAL_RCC_OscConfig+0x4ec>)
 800630e:	2200      	movs	r2, #0
 8006310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006312:	f7fd f8c9 	bl	80034a8 <HAL_GetTick>
 8006316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006318:	e008      	b.n	800632c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800631a:	f7fd f8c5 	bl	80034a8 <HAL_GetTick>
 800631e:	4602      	mov	r2, r0
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	2b02      	cmp	r3, #2
 8006326:	d901      	bls.n	800632c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e03f      	b.n	80063ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800632c:	4b22      	ldr	r3, [pc, #136]	; (80063b8 <HAL_RCC_OscConfig+0x4e8>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1f0      	bne.n	800631a <HAL_RCC_OscConfig+0x44a>
 8006338:	e037      	b.n	80063aa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d101      	bne.n	8006346 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e032      	b.n	80063ac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006346:	4b1c      	ldr	r3, [pc, #112]	; (80063b8 <HAL_RCC_OscConfig+0x4e8>)
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d028      	beq.n	80063a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800635e:	429a      	cmp	r2, r3
 8006360:	d121      	bne.n	80063a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800636c:	429a      	cmp	r2, r3
 800636e:	d11a      	bne.n	80063a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006376:	4013      	ands	r3, r2
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800637c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800637e:	4293      	cmp	r3, r2
 8006380:	d111      	bne.n	80063a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638c:	085b      	lsrs	r3, r3, #1
 800638e:	3b01      	subs	r3, #1
 8006390:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006392:	429a      	cmp	r2, r3
 8006394:	d107      	bne.n	80063a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d001      	beq.n	80063aa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e000      	b.n	80063ac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3718      	adds	r7, #24
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	40007000 	.word	0x40007000
 80063b8:	40023800 	.word	0x40023800
 80063bc:	42470060 	.word	0x42470060

080063c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d101      	bne.n	80063d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e0cc      	b.n	800656e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80063d4:	4b68      	ldr	r3, [pc, #416]	; (8006578 <HAL_RCC_ClockConfig+0x1b8>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0307 	and.w	r3, r3, #7
 80063dc:	683a      	ldr	r2, [r7, #0]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d90c      	bls.n	80063fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063e2:	4b65      	ldr	r3, [pc, #404]	; (8006578 <HAL_RCC_ClockConfig+0x1b8>)
 80063e4:	683a      	ldr	r2, [r7, #0]
 80063e6:	b2d2      	uxtb	r2, r2
 80063e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063ea:	4b63      	ldr	r3, [pc, #396]	; (8006578 <HAL_RCC_ClockConfig+0x1b8>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 0307 	and.w	r3, r3, #7
 80063f2:	683a      	ldr	r2, [r7, #0]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d001      	beq.n	80063fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e0b8      	b.n	800656e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0302 	and.w	r3, r3, #2
 8006404:	2b00      	cmp	r3, #0
 8006406:	d020      	beq.n	800644a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 0304 	and.w	r3, r3, #4
 8006410:	2b00      	cmp	r3, #0
 8006412:	d005      	beq.n	8006420 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006414:	4b59      	ldr	r3, [pc, #356]	; (800657c <HAL_RCC_ClockConfig+0x1bc>)
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	4a58      	ldr	r2, [pc, #352]	; (800657c <HAL_RCC_ClockConfig+0x1bc>)
 800641a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800641e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 0308 	and.w	r3, r3, #8
 8006428:	2b00      	cmp	r3, #0
 800642a:	d005      	beq.n	8006438 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800642c:	4b53      	ldr	r3, [pc, #332]	; (800657c <HAL_RCC_ClockConfig+0x1bc>)
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	4a52      	ldr	r2, [pc, #328]	; (800657c <HAL_RCC_ClockConfig+0x1bc>)
 8006432:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006436:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006438:	4b50      	ldr	r3, [pc, #320]	; (800657c <HAL_RCC_ClockConfig+0x1bc>)
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	494d      	ldr	r1, [pc, #308]	; (800657c <HAL_RCC_ClockConfig+0x1bc>)
 8006446:	4313      	orrs	r3, r2
 8006448:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	2b00      	cmp	r3, #0
 8006454:	d044      	beq.n	80064e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	2b01      	cmp	r3, #1
 800645c:	d107      	bne.n	800646e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800645e:	4b47      	ldr	r3, [pc, #284]	; (800657c <HAL_RCC_ClockConfig+0x1bc>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d119      	bne.n	800649e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e07f      	b.n	800656e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	2b02      	cmp	r3, #2
 8006474:	d003      	beq.n	800647e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800647a:	2b03      	cmp	r3, #3
 800647c:	d107      	bne.n	800648e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800647e:	4b3f      	ldr	r3, [pc, #252]	; (800657c <HAL_RCC_ClockConfig+0x1bc>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d109      	bne.n	800649e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e06f      	b.n	800656e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800648e:	4b3b      	ldr	r3, [pc, #236]	; (800657c <HAL_RCC_ClockConfig+0x1bc>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0302 	and.w	r3, r3, #2
 8006496:	2b00      	cmp	r3, #0
 8006498:	d101      	bne.n	800649e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e067      	b.n	800656e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800649e:	4b37      	ldr	r3, [pc, #220]	; (800657c <HAL_RCC_ClockConfig+0x1bc>)
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	f023 0203 	bic.w	r2, r3, #3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	4934      	ldr	r1, [pc, #208]	; (800657c <HAL_RCC_ClockConfig+0x1bc>)
 80064ac:	4313      	orrs	r3, r2
 80064ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064b0:	f7fc fffa 	bl	80034a8 <HAL_GetTick>
 80064b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064b6:	e00a      	b.n	80064ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064b8:	f7fc fff6 	bl	80034a8 <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d901      	bls.n	80064ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e04f      	b.n	800656e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064ce:	4b2b      	ldr	r3, [pc, #172]	; (800657c <HAL_RCC_ClockConfig+0x1bc>)
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f003 020c 	and.w	r2, r3, #12
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	429a      	cmp	r2, r3
 80064de:	d1eb      	bne.n	80064b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80064e0:	4b25      	ldr	r3, [pc, #148]	; (8006578 <HAL_RCC_ClockConfig+0x1b8>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0307 	and.w	r3, r3, #7
 80064e8:	683a      	ldr	r2, [r7, #0]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d20c      	bcs.n	8006508 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064ee:	4b22      	ldr	r3, [pc, #136]	; (8006578 <HAL_RCC_ClockConfig+0x1b8>)
 80064f0:	683a      	ldr	r2, [r7, #0]
 80064f2:	b2d2      	uxtb	r2, r2
 80064f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064f6:	4b20      	ldr	r3, [pc, #128]	; (8006578 <HAL_RCC_ClockConfig+0x1b8>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0307 	and.w	r3, r3, #7
 80064fe:	683a      	ldr	r2, [r7, #0]
 8006500:	429a      	cmp	r2, r3
 8006502:	d001      	beq.n	8006508 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e032      	b.n	800656e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0304 	and.w	r3, r3, #4
 8006510:	2b00      	cmp	r3, #0
 8006512:	d008      	beq.n	8006526 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006514:	4b19      	ldr	r3, [pc, #100]	; (800657c <HAL_RCC_ClockConfig+0x1bc>)
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	4916      	ldr	r1, [pc, #88]	; (800657c <HAL_RCC_ClockConfig+0x1bc>)
 8006522:	4313      	orrs	r3, r2
 8006524:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0308 	and.w	r3, r3, #8
 800652e:	2b00      	cmp	r3, #0
 8006530:	d009      	beq.n	8006546 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006532:	4b12      	ldr	r3, [pc, #72]	; (800657c <HAL_RCC_ClockConfig+0x1bc>)
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	00db      	lsls	r3, r3, #3
 8006540:	490e      	ldr	r1, [pc, #56]	; (800657c <HAL_RCC_ClockConfig+0x1bc>)
 8006542:	4313      	orrs	r3, r2
 8006544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006546:	f000 f821 	bl	800658c <HAL_RCC_GetSysClockFreq>
 800654a:	4602      	mov	r2, r0
 800654c:	4b0b      	ldr	r3, [pc, #44]	; (800657c <HAL_RCC_ClockConfig+0x1bc>)
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	091b      	lsrs	r3, r3, #4
 8006552:	f003 030f 	and.w	r3, r3, #15
 8006556:	490a      	ldr	r1, [pc, #40]	; (8006580 <HAL_RCC_ClockConfig+0x1c0>)
 8006558:	5ccb      	ldrb	r3, [r1, r3]
 800655a:	fa22 f303 	lsr.w	r3, r2, r3
 800655e:	4a09      	ldr	r2, [pc, #36]	; (8006584 <HAL_RCC_ClockConfig+0x1c4>)
 8006560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006562:	4b09      	ldr	r3, [pc, #36]	; (8006588 <HAL_RCC_ClockConfig+0x1c8>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4618      	mov	r0, r3
 8006568:	f7fc ff5a 	bl	8003420 <HAL_InitTick>

  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	40023c00 	.word	0x40023c00
 800657c:	40023800 	.word	0x40023800
 8006580:	08008a04 	.word	0x08008a04
 8006584:	20000104 	.word	0x20000104
 8006588:	20000108 	.word	0x20000108

0800658c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800658c:	b5b0      	push	{r4, r5, r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006592:	2100      	movs	r1, #0
 8006594:	6079      	str	r1, [r7, #4]
 8006596:	2100      	movs	r1, #0
 8006598:	60f9      	str	r1, [r7, #12]
 800659a:	2100      	movs	r1, #0
 800659c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800659e:	2100      	movs	r1, #0
 80065a0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065a2:	4952      	ldr	r1, [pc, #328]	; (80066ec <HAL_RCC_GetSysClockFreq+0x160>)
 80065a4:	6889      	ldr	r1, [r1, #8]
 80065a6:	f001 010c 	and.w	r1, r1, #12
 80065aa:	2908      	cmp	r1, #8
 80065ac:	d00d      	beq.n	80065ca <HAL_RCC_GetSysClockFreq+0x3e>
 80065ae:	2908      	cmp	r1, #8
 80065b0:	f200 8094 	bhi.w	80066dc <HAL_RCC_GetSysClockFreq+0x150>
 80065b4:	2900      	cmp	r1, #0
 80065b6:	d002      	beq.n	80065be <HAL_RCC_GetSysClockFreq+0x32>
 80065b8:	2904      	cmp	r1, #4
 80065ba:	d003      	beq.n	80065c4 <HAL_RCC_GetSysClockFreq+0x38>
 80065bc:	e08e      	b.n	80066dc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80065be:	4b4c      	ldr	r3, [pc, #304]	; (80066f0 <HAL_RCC_GetSysClockFreq+0x164>)
 80065c0:	60bb      	str	r3, [r7, #8]
       break;
 80065c2:	e08e      	b.n	80066e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80065c4:	4b4b      	ldr	r3, [pc, #300]	; (80066f4 <HAL_RCC_GetSysClockFreq+0x168>)
 80065c6:	60bb      	str	r3, [r7, #8]
      break;
 80065c8:	e08b      	b.n	80066e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80065ca:	4948      	ldr	r1, [pc, #288]	; (80066ec <HAL_RCC_GetSysClockFreq+0x160>)
 80065cc:	6849      	ldr	r1, [r1, #4]
 80065ce:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80065d2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80065d4:	4945      	ldr	r1, [pc, #276]	; (80066ec <HAL_RCC_GetSysClockFreq+0x160>)
 80065d6:	6849      	ldr	r1, [r1, #4]
 80065d8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80065dc:	2900      	cmp	r1, #0
 80065de:	d024      	beq.n	800662a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065e0:	4942      	ldr	r1, [pc, #264]	; (80066ec <HAL_RCC_GetSysClockFreq+0x160>)
 80065e2:	6849      	ldr	r1, [r1, #4]
 80065e4:	0989      	lsrs	r1, r1, #6
 80065e6:	4608      	mov	r0, r1
 80065e8:	f04f 0100 	mov.w	r1, #0
 80065ec:	f240 14ff 	movw	r4, #511	; 0x1ff
 80065f0:	f04f 0500 	mov.w	r5, #0
 80065f4:	ea00 0204 	and.w	r2, r0, r4
 80065f8:	ea01 0305 	and.w	r3, r1, r5
 80065fc:	493d      	ldr	r1, [pc, #244]	; (80066f4 <HAL_RCC_GetSysClockFreq+0x168>)
 80065fe:	fb01 f003 	mul.w	r0, r1, r3
 8006602:	2100      	movs	r1, #0
 8006604:	fb01 f102 	mul.w	r1, r1, r2
 8006608:	1844      	adds	r4, r0, r1
 800660a:	493a      	ldr	r1, [pc, #232]	; (80066f4 <HAL_RCC_GetSysClockFreq+0x168>)
 800660c:	fba2 0101 	umull	r0, r1, r2, r1
 8006610:	1863      	adds	r3, r4, r1
 8006612:	4619      	mov	r1, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	461a      	mov	r2, r3
 8006618:	f04f 0300 	mov.w	r3, #0
 800661c:	f7f9 fdd4 	bl	80001c8 <__aeabi_uldivmod>
 8006620:	4602      	mov	r2, r0
 8006622:	460b      	mov	r3, r1
 8006624:	4613      	mov	r3, r2
 8006626:	60fb      	str	r3, [r7, #12]
 8006628:	e04a      	b.n	80066c0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800662a:	4b30      	ldr	r3, [pc, #192]	; (80066ec <HAL_RCC_GetSysClockFreq+0x160>)
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	099b      	lsrs	r3, r3, #6
 8006630:	461a      	mov	r2, r3
 8006632:	f04f 0300 	mov.w	r3, #0
 8006636:	f240 10ff 	movw	r0, #511	; 0x1ff
 800663a:	f04f 0100 	mov.w	r1, #0
 800663e:	ea02 0400 	and.w	r4, r2, r0
 8006642:	ea03 0501 	and.w	r5, r3, r1
 8006646:	4620      	mov	r0, r4
 8006648:	4629      	mov	r1, r5
 800664a:	f04f 0200 	mov.w	r2, #0
 800664e:	f04f 0300 	mov.w	r3, #0
 8006652:	014b      	lsls	r3, r1, #5
 8006654:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006658:	0142      	lsls	r2, r0, #5
 800665a:	4610      	mov	r0, r2
 800665c:	4619      	mov	r1, r3
 800665e:	1b00      	subs	r0, r0, r4
 8006660:	eb61 0105 	sbc.w	r1, r1, r5
 8006664:	f04f 0200 	mov.w	r2, #0
 8006668:	f04f 0300 	mov.w	r3, #0
 800666c:	018b      	lsls	r3, r1, #6
 800666e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006672:	0182      	lsls	r2, r0, #6
 8006674:	1a12      	subs	r2, r2, r0
 8006676:	eb63 0301 	sbc.w	r3, r3, r1
 800667a:	f04f 0000 	mov.w	r0, #0
 800667e:	f04f 0100 	mov.w	r1, #0
 8006682:	00d9      	lsls	r1, r3, #3
 8006684:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006688:	00d0      	lsls	r0, r2, #3
 800668a:	4602      	mov	r2, r0
 800668c:	460b      	mov	r3, r1
 800668e:	1912      	adds	r2, r2, r4
 8006690:	eb45 0303 	adc.w	r3, r5, r3
 8006694:	f04f 0000 	mov.w	r0, #0
 8006698:	f04f 0100 	mov.w	r1, #0
 800669c:	0299      	lsls	r1, r3, #10
 800669e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80066a2:	0290      	lsls	r0, r2, #10
 80066a4:	4602      	mov	r2, r0
 80066a6:	460b      	mov	r3, r1
 80066a8:	4610      	mov	r0, r2
 80066aa:	4619      	mov	r1, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	461a      	mov	r2, r3
 80066b0:	f04f 0300 	mov.w	r3, #0
 80066b4:	f7f9 fd88 	bl	80001c8 <__aeabi_uldivmod>
 80066b8:	4602      	mov	r2, r0
 80066ba:	460b      	mov	r3, r1
 80066bc:	4613      	mov	r3, r2
 80066be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80066c0:	4b0a      	ldr	r3, [pc, #40]	; (80066ec <HAL_RCC_GetSysClockFreq+0x160>)
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	0c1b      	lsrs	r3, r3, #16
 80066c6:	f003 0303 	and.w	r3, r3, #3
 80066ca:	3301      	adds	r3, #1
 80066cc:	005b      	lsls	r3, r3, #1
 80066ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d8:	60bb      	str	r3, [r7, #8]
      break;
 80066da:	e002      	b.n	80066e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80066dc:	4b04      	ldr	r3, [pc, #16]	; (80066f0 <HAL_RCC_GetSysClockFreq+0x164>)
 80066de:	60bb      	str	r3, [r7, #8]
      break;
 80066e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80066e2:	68bb      	ldr	r3, [r7, #8]
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3710      	adds	r7, #16
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bdb0      	pop	{r4, r5, r7, pc}
 80066ec:	40023800 	.word	0x40023800
 80066f0:	00f42400 	.word	0x00f42400
 80066f4:	017d7840 	.word	0x017d7840

080066f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066f8:	b480      	push	{r7}
 80066fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066fc:	4b03      	ldr	r3, [pc, #12]	; (800670c <HAL_RCC_GetHCLKFreq+0x14>)
 80066fe:	681b      	ldr	r3, [r3, #0]
}
 8006700:	4618      	mov	r0, r3
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	20000104 	.word	0x20000104

08006710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006714:	f7ff fff0 	bl	80066f8 <HAL_RCC_GetHCLKFreq>
 8006718:	4602      	mov	r2, r0
 800671a:	4b05      	ldr	r3, [pc, #20]	; (8006730 <HAL_RCC_GetPCLK1Freq+0x20>)
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	0a9b      	lsrs	r3, r3, #10
 8006720:	f003 0307 	and.w	r3, r3, #7
 8006724:	4903      	ldr	r1, [pc, #12]	; (8006734 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006726:	5ccb      	ldrb	r3, [r1, r3]
 8006728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800672c:	4618      	mov	r0, r3
 800672e:	bd80      	pop	{r7, pc}
 8006730:	40023800 	.word	0x40023800
 8006734:	08008a14 	.word	0x08008a14

08006738 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800673c:	f7ff ffdc 	bl	80066f8 <HAL_RCC_GetHCLKFreq>
 8006740:	4602      	mov	r2, r0
 8006742:	4b05      	ldr	r3, [pc, #20]	; (8006758 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	0b5b      	lsrs	r3, r3, #13
 8006748:	f003 0307 	and.w	r3, r3, #7
 800674c:	4903      	ldr	r1, [pc, #12]	; (800675c <HAL_RCC_GetPCLK2Freq+0x24>)
 800674e:	5ccb      	ldrb	r3, [r1, r3]
 8006750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006754:	4618      	mov	r0, r3
 8006756:	bd80      	pop	{r7, pc}
 8006758:	40023800 	.word	0x40023800
 800675c:	08008a14 	.word	0x08008a14

08006760 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d101      	bne.n	8006772 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e041      	b.n	80067f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006778:	b2db      	uxtb	r3, r3
 800677a:	2b00      	cmp	r3, #0
 800677c:	d106      	bne.n	800678c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f7fc f9d6 	bl	8002b38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2202      	movs	r2, #2
 8006790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	3304      	adds	r3, #4
 800679c:	4619      	mov	r1, r3
 800679e:	4610      	mov	r0, r2
 80067a0:	f000 fb48 	bl	8006e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3708      	adds	r7, #8
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b082      	sub	sp, #8
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d101      	bne.n	8006810 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e041      	b.n	8006894 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006816:	b2db      	uxtb	r3, r3
 8006818:	2b00      	cmp	r3, #0
 800681a:	d106      	bne.n	800682a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 f839 	bl	800689c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2202      	movs	r2, #2
 800682e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	3304      	adds	r3, #4
 800683a:	4619      	mov	r1, r3
 800683c:	4610      	mov	r0, r2
 800683e:	f000 faf9 	bl	8006e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2201      	movs	r2, #1
 8006846:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2201      	movs	r2, #1
 800685e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2201      	movs	r2, #1
 8006876:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	3708      	adds	r7, #8
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80068a4:	bf00      	nop
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d109      	bne.n	80068d4 <HAL_TIM_PWM_Start+0x24>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	bf14      	ite	ne
 80068cc:	2301      	movne	r3, #1
 80068ce:	2300      	moveq	r3, #0
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	e022      	b.n	800691a <HAL_TIM_PWM_Start+0x6a>
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	2b04      	cmp	r3, #4
 80068d8:	d109      	bne.n	80068ee <HAL_TIM_PWM_Start+0x3e>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	bf14      	ite	ne
 80068e6:	2301      	movne	r3, #1
 80068e8:	2300      	moveq	r3, #0
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	e015      	b.n	800691a <HAL_TIM_PWM_Start+0x6a>
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	2b08      	cmp	r3, #8
 80068f2:	d109      	bne.n	8006908 <HAL_TIM_PWM_Start+0x58>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	bf14      	ite	ne
 8006900:	2301      	movne	r3, #1
 8006902:	2300      	moveq	r3, #0
 8006904:	b2db      	uxtb	r3, r3
 8006906:	e008      	b.n	800691a <HAL_TIM_PWM_Start+0x6a>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b01      	cmp	r3, #1
 8006912:	bf14      	ite	ne
 8006914:	2301      	movne	r3, #1
 8006916:	2300      	moveq	r3, #0
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e07c      	b.n	8006a1c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d104      	bne.n	8006932 <HAL_TIM_PWM_Start+0x82>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2202      	movs	r2, #2
 800692c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006930:	e013      	b.n	800695a <HAL_TIM_PWM_Start+0xaa>
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	2b04      	cmp	r3, #4
 8006936:	d104      	bne.n	8006942 <HAL_TIM_PWM_Start+0x92>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2202      	movs	r2, #2
 800693c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006940:	e00b      	b.n	800695a <HAL_TIM_PWM_Start+0xaa>
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	2b08      	cmp	r3, #8
 8006946:	d104      	bne.n	8006952 <HAL_TIM_PWM_Start+0xa2>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2202      	movs	r2, #2
 800694c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006950:	e003      	b.n	800695a <HAL_TIM_PWM_Start+0xaa>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2202      	movs	r2, #2
 8006956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2201      	movs	r2, #1
 8006960:	6839      	ldr	r1, [r7, #0]
 8006962:	4618      	mov	r0, r3
 8006964:	f000 fd50 	bl	8007408 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a2d      	ldr	r2, [pc, #180]	; (8006a24 <HAL_TIM_PWM_Start+0x174>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d004      	beq.n	800697c <HAL_TIM_PWM_Start+0xcc>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a2c      	ldr	r2, [pc, #176]	; (8006a28 <HAL_TIM_PWM_Start+0x178>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d101      	bne.n	8006980 <HAL_TIM_PWM_Start+0xd0>
 800697c:	2301      	movs	r3, #1
 800697e:	e000      	b.n	8006982 <HAL_TIM_PWM_Start+0xd2>
 8006980:	2300      	movs	r3, #0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d007      	beq.n	8006996 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006994:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a22      	ldr	r2, [pc, #136]	; (8006a24 <HAL_TIM_PWM_Start+0x174>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d022      	beq.n	80069e6 <HAL_TIM_PWM_Start+0x136>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069a8:	d01d      	beq.n	80069e6 <HAL_TIM_PWM_Start+0x136>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a1f      	ldr	r2, [pc, #124]	; (8006a2c <HAL_TIM_PWM_Start+0x17c>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d018      	beq.n	80069e6 <HAL_TIM_PWM_Start+0x136>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a1d      	ldr	r2, [pc, #116]	; (8006a30 <HAL_TIM_PWM_Start+0x180>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d013      	beq.n	80069e6 <HAL_TIM_PWM_Start+0x136>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a1c      	ldr	r2, [pc, #112]	; (8006a34 <HAL_TIM_PWM_Start+0x184>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d00e      	beq.n	80069e6 <HAL_TIM_PWM_Start+0x136>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a16      	ldr	r2, [pc, #88]	; (8006a28 <HAL_TIM_PWM_Start+0x178>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d009      	beq.n	80069e6 <HAL_TIM_PWM_Start+0x136>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a18      	ldr	r2, [pc, #96]	; (8006a38 <HAL_TIM_PWM_Start+0x188>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d004      	beq.n	80069e6 <HAL_TIM_PWM_Start+0x136>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a16      	ldr	r2, [pc, #88]	; (8006a3c <HAL_TIM_PWM_Start+0x18c>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d111      	bne.n	8006a0a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f003 0307 	and.w	r3, r3, #7
 80069f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2b06      	cmp	r3, #6
 80069f6:	d010      	beq.n	8006a1a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f042 0201 	orr.w	r2, r2, #1
 8006a06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a08:	e007      	b.n	8006a1a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f042 0201 	orr.w	r2, r2, #1
 8006a18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3710      	adds	r7, #16
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	40010000 	.word	0x40010000
 8006a28:	40010400 	.word	0x40010400
 8006a2c:	40000400 	.word	0x40000400
 8006a30:	40000800 	.word	0x40000800
 8006a34:	40000c00 	.word	0x40000c00
 8006a38:	40014000 	.word	0x40014000
 8006a3c:	40001800 	.word	0x40001800

08006a40 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	6839      	ldr	r1, [r7, #0]
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 fcd8 	bl	8007408 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a2e      	ldr	r2, [pc, #184]	; (8006b18 <HAL_TIM_PWM_Stop+0xd8>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d004      	beq.n	8006a6c <HAL_TIM_PWM_Stop+0x2c>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a2d      	ldr	r2, [pc, #180]	; (8006b1c <HAL_TIM_PWM_Stop+0xdc>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d101      	bne.n	8006a70 <HAL_TIM_PWM_Stop+0x30>
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e000      	b.n	8006a72 <HAL_TIM_PWM_Stop+0x32>
 8006a70:	2300      	movs	r3, #0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d017      	beq.n	8006aa6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	6a1a      	ldr	r2, [r3, #32]
 8006a7c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006a80:	4013      	ands	r3, r2
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10f      	bne.n	8006aa6 <HAL_TIM_PWM_Stop+0x66>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	6a1a      	ldr	r2, [r3, #32]
 8006a8c:	f240 4344 	movw	r3, #1092	; 0x444
 8006a90:	4013      	ands	r3, r2
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d107      	bne.n	8006aa6 <HAL_TIM_PWM_Stop+0x66>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006aa4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	6a1a      	ldr	r2, [r3, #32]
 8006aac:	f241 1311 	movw	r3, #4369	; 0x1111
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10f      	bne.n	8006ad6 <HAL_TIM_PWM_Stop+0x96>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	6a1a      	ldr	r2, [r3, #32]
 8006abc:	f240 4344 	movw	r3, #1092	; 0x444
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d107      	bne.n	8006ad6 <HAL_TIM_PWM_Stop+0x96>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f022 0201 	bic.w	r2, r2, #1
 8006ad4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d104      	bne.n	8006ae6 <HAL_TIM_PWM_Stop+0xa6>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ae4:	e013      	b.n	8006b0e <HAL_TIM_PWM_Stop+0xce>
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	2b04      	cmp	r3, #4
 8006aea:	d104      	bne.n	8006af6 <HAL_TIM_PWM_Stop+0xb6>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006af4:	e00b      	b.n	8006b0e <HAL_TIM_PWM_Stop+0xce>
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	2b08      	cmp	r3, #8
 8006afa:	d104      	bne.n	8006b06 <HAL_TIM_PWM_Stop+0xc6>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b04:	e003      	b.n	8006b0e <HAL_TIM_PWM_Stop+0xce>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3708      	adds	r7, #8
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	40010000 	.word	0x40010000
 8006b1c:	40010400 	.word	0x40010400

08006b20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b086      	sub	sp, #24
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d101      	bne.n	8006b3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b3a:	2302      	movs	r3, #2
 8006b3c:	e0ae      	b.n	8006c9c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2b0c      	cmp	r3, #12
 8006b4a:	f200 809f 	bhi.w	8006c8c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006b4e:	a201      	add	r2, pc, #4	; (adr r2, 8006b54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b54:	08006b89 	.word	0x08006b89
 8006b58:	08006c8d 	.word	0x08006c8d
 8006b5c:	08006c8d 	.word	0x08006c8d
 8006b60:	08006c8d 	.word	0x08006c8d
 8006b64:	08006bc9 	.word	0x08006bc9
 8006b68:	08006c8d 	.word	0x08006c8d
 8006b6c:	08006c8d 	.word	0x08006c8d
 8006b70:	08006c8d 	.word	0x08006c8d
 8006b74:	08006c0b 	.word	0x08006c0b
 8006b78:	08006c8d 	.word	0x08006c8d
 8006b7c:	08006c8d 	.word	0x08006c8d
 8006b80:	08006c8d 	.word	0x08006c8d
 8006b84:	08006c4b 	.word	0x08006c4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68b9      	ldr	r1, [r7, #8]
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f000 f9f0 	bl	8006f74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	699a      	ldr	r2, [r3, #24]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f042 0208 	orr.w	r2, r2, #8
 8006ba2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	699a      	ldr	r2, [r3, #24]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f022 0204 	bic.w	r2, r2, #4
 8006bb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6999      	ldr	r1, [r3, #24]
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	691a      	ldr	r2, [r3, #16]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	619a      	str	r2, [r3, #24]
      break;
 8006bc6:	e064      	b.n	8006c92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68b9      	ldr	r1, [r7, #8]
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f000 fa40 	bl	8007054 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	699a      	ldr	r2, [r3, #24]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006be2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	699a      	ldr	r2, [r3, #24]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	6999      	ldr	r1, [r3, #24]
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	021a      	lsls	r2, r3, #8
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	430a      	orrs	r2, r1
 8006c06:	619a      	str	r2, [r3, #24]
      break;
 8006c08:	e043      	b.n	8006c92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68b9      	ldr	r1, [r7, #8]
 8006c10:	4618      	mov	r0, r3
 8006c12:	f000 fa95 	bl	8007140 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	69da      	ldr	r2, [r3, #28]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f042 0208 	orr.w	r2, r2, #8
 8006c24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	69da      	ldr	r2, [r3, #28]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f022 0204 	bic.w	r2, r2, #4
 8006c34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	69d9      	ldr	r1, [r3, #28]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	691a      	ldr	r2, [r3, #16]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	430a      	orrs	r2, r1
 8006c46:	61da      	str	r2, [r3, #28]
      break;
 8006c48:	e023      	b.n	8006c92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68b9      	ldr	r1, [r7, #8]
 8006c50:	4618      	mov	r0, r3
 8006c52:	f000 fae9 	bl	8007228 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	69da      	ldr	r2, [r3, #28]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	69da      	ldr	r2, [r3, #28]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	69d9      	ldr	r1, [r3, #28]
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	021a      	lsls	r2, r3, #8
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	430a      	orrs	r2, r1
 8006c88:	61da      	str	r2, [r3, #28]
      break;
 8006c8a:	e002      	b.n	8006c92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	75fb      	strb	r3, [r7, #23]
      break;
 8006c90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3718      	adds	r7, #24
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d101      	bne.n	8006cc0 <HAL_TIM_ConfigClockSource+0x1c>
 8006cbc:	2302      	movs	r3, #2
 8006cbe:	e0b4      	b.n	8006e2a <HAL_TIM_ConfigClockSource+0x186>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2202      	movs	r2, #2
 8006ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006cde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ce6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68ba      	ldr	r2, [r7, #8]
 8006cee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cf8:	d03e      	beq.n	8006d78 <HAL_TIM_ConfigClockSource+0xd4>
 8006cfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cfe:	f200 8087 	bhi.w	8006e10 <HAL_TIM_ConfigClockSource+0x16c>
 8006d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d06:	f000 8086 	beq.w	8006e16 <HAL_TIM_ConfigClockSource+0x172>
 8006d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d0e:	d87f      	bhi.n	8006e10 <HAL_TIM_ConfigClockSource+0x16c>
 8006d10:	2b70      	cmp	r3, #112	; 0x70
 8006d12:	d01a      	beq.n	8006d4a <HAL_TIM_ConfigClockSource+0xa6>
 8006d14:	2b70      	cmp	r3, #112	; 0x70
 8006d16:	d87b      	bhi.n	8006e10 <HAL_TIM_ConfigClockSource+0x16c>
 8006d18:	2b60      	cmp	r3, #96	; 0x60
 8006d1a:	d050      	beq.n	8006dbe <HAL_TIM_ConfigClockSource+0x11a>
 8006d1c:	2b60      	cmp	r3, #96	; 0x60
 8006d1e:	d877      	bhi.n	8006e10 <HAL_TIM_ConfigClockSource+0x16c>
 8006d20:	2b50      	cmp	r3, #80	; 0x50
 8006d22:	d03c      	beq.n	8006d9e <HAL_TIM_ConfigClockSource+0xfa>
 8006d24:	2b50      	cmp	r3, #80	; 0x50
 8006d26:	d873      	bhi.n	8006e10 <HAL_TIM_ConfigClockSource+0x16c>
 8006d28:	2b40      	cmp	r3, #64	; 0x40
 8006d2a:	d058      	beq.n	8006dde <HAL_TIM_ConfigClockSource+0x13a>
 8006d2c:	2b40      	cmp	r3, #64	; 0x40
 8006d2e:	d86f      	bhi.n	8006e10 <HAL_TIM_ConfigClockSource+0x16c>
 8006d30:	2b30      	cmp	r3, #48	; 0x30
 8006d32:	d064      	beq.n	8006dfe <HAL_TIM_ConfigClockSource+0x15a>
 8006d34:	2b30      	cmp	r3, #48	; 0x30
 8006d36:	d86b      	bhi.n	8006e10 <HAL_TIM_ConfigClockSource+0x16c>
 8006d38:	2b20      	cmp	r3, #32
 8006d3a:	d060      	beq.n	8006dfe <HAL_TIM_ConfigClockSource+0x15a>
 8006d3c:	2b20      	cmp	r3, #32
 8006d3e:	d867      	bhi.n	8006e10 <HAL_TIM_ConfigClockSource+0x16c>
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d05c      	beq.n	8006dfe <HAL_TIM_ConfigClockSource+0x15a>
 8006d44:	2b10      	cmp	r3, #16
 8006d46:	d05a      	beq.n	8006dfe <HAL_TIM_ConfigClockSource+0x15a>
 8006d48:	e062      	b.n	8006e10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6818      	ldr	r0, [r3, #0]
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	6899      	ldr	r1, [r3, #8]
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	685a      	ldr	r2, [r3, #4]
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	f000 fb35 	bl	80073c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	609a      	str	r2, [r3, #8]
      break;
 8006d76:	e04f      	b.n	8006e18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6818      	ldr	r0, [r3, #0]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	6899      	ldr	r1, [r3, #8]
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	685a      	ldr	r2, [r3, #4]
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	f000 fb1e 	bl	80073c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	689a      	ldr	r2, [r3, #8]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d9a:	609a      	str	r2, [r3, #8]
      break;
 8006d9c:	e03c      	b.n	8006e18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6818      	ldr	r0, [r3, #0]
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	6859      	ldr	r1, [r3, #4]
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	461a      	mov	r2, r3
 8006dac:	f000 fa92 	bl	80072d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2150      	movs	r1, #80	; 0x50
 8006db6:	4618      	mov	r0, r3
 8006db8:	f000 faeb 	bl	8007392 <TIM_ITRx_SetConfig>
      break;
 8006dbc:	e02c      	b.n	8006e18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6818      	ldr	r0, [r3, #0]
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	6859      	ldr	r1, [r3, #4]
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	461a      	mov	r2, r3
 8006dcc:	f000 fab1 	bl	8007332 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2160      	movs	r1, #96	; 0x60
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f000 fadb 	bl	8007392 <TIM_ITRx_SetConfig>
      break;
 8006ddc:	e01c      	b.n	8006e18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6818      	ldr	r0, [r3, #0]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	6859      	ldr	r1, [r3, #4]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	461a      	mov	r2, r3
 8006dec:	f000 fa72 	bl	80072d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2140      	movs	r1, #64	; 0x40
 8006df6:	4618      	mov	r0, r3
 8006df8:	f000 facb 	bl	8007392 <TIM_ITRx_SetConfig>
      break;
 8006dfc:	e00c      	b.n	8006e18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4619      	mov	r1, r3
 8006e08:	4610      	mov	r0, r2
 8006e0a:	f000 fac2 	bl	8007392 <TIM_ITRx_SetConfig>
      break;
 8006e0e:	e003      	b.n	8006e18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	73fb      	strb	r3, [r7, #15]
      break;
 8006e14:	e000      	b.n	8006e18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006e16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
	...

08006e34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a40      	ldr	r2, [pc, #256]	; (8006f48 <TIM_Base_SetConfig+0x114>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d013      	beq.n	8006e74 <TIM_Base_SetConfig+0x40>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e52:	d00f      	beq.n	8006e74 <TIM_Base_SetConfig+0x40>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a3d      	ldr	r2, [pc, #244]	; (8006f4c <TIM_Base_SetConfig+0x118>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d00b      	beq.n	8006e74 <TIM_Base_SetConfig+0x40>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a3c      	ldr	r2, [pc, #240]	; (8006f50 <TIM_Base_SetConfig+0x11c>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d007      	beq.n	8006e74 <TIM_Base_SetConfig+0x40>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a3b      	ldr	r2, [pc, #236]	; (8006f54 <TIM_Base_SetConfig+0x120>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d003      	beq.n	8006e74 <TIM_Base_SetConfig+0x40>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a3a      	ldr	r2, [pc, #232]	; (8006f58 <TIM_Base_SetConfig+0x124>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d108      	bne.n	8006e86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a2f      	ldr	r2, [pc, #188]	; (8006f48 <TIM_Base_SetConfig+0x114>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d02b      	beq.n	8006ee6 <TIM_Base_SetConfig+0xb2>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e94:	d027      	beq.n	8006ee6 <TIM_Base_SetConfig+0xb2>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a2c      	ldr	r2, [pc, #176]	; (8006f4c <TIM_Base_SetConfig+0x118>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d023      	beq.n	8006ee6 <TIM_Base_SetConfig+0xb2>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a2b      	ldr	r2, [pc, #172]	; (8006f50 <TIM_Base_SetConfig+0x11c>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d01f      	beq.n	8006ee6 <TIM_Base_SetConfig+0xb2>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a2a      	ldr	r2, [pc, #168]	; (8006f54 <TIM_Base_SetConfig+0x120>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d01b      	beq.n	8006ee6 <TIM_Base_SetConfig+0xb2>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a29      	ldr	r2, [pc, #164]	; (8006f58 <TIM_Base_SetConfig+0x124>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d017      	beq.n	8006ee6 <TIM_Base_SetConfig+0xb2>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a28      	ldr	r2, [pc, #160]	; (8006f5c <TIM_Base_SetConfig+0x128>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d013      	beq.n	8006ee6 <TIM_Base_SetConfig+0xb2>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a27      	ldr	r2, [pc, #156]	; (8006f60 <TIM_Base_SetConfig+0x12c>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d00f      	beq.n	8006ee6 <TIM_Base_SetConfig+0xb2>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a26      	ldr	r2, [pc, #152]	; (8006f64 <TIM_Base_SetConfig+0x130>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d00b      	beq.n	8006ee6 <TIM_Base_SetConfig+0xb2>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a25      	ldr	r2, [pc, #148]	; (8006f68 <TIM_Base_SetConfig+0x134>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d007      	beq.n	8006ee6 <TIM_Base_SetConfig+0xb2>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a24      	ldr	r2, [pc, #144]	; (8006f6c <TIM_Base_SetConfig+0x138>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d003      	beq.n	8006ee6 <TIM_Base_SetConfig+0xb2>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a23      	ldr	r2, [pc, #140]	; (8006f70 <TIM_Base_SetConfig+0x13c>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d108      	bne.n	8006ef8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	689a      	ldr	r2, [r3, #8]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a0a      	ldr	r2, [pc, #40]	; (8006f48 <TIM_Base_SetConfig+0x114>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d003      	beq.n	8006f2c <TIM_Base_SetConfig+0xf8>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a0c      	ldr	r2, [pc, #48]	; (8006f58 <TIM_Base_SetConfig+0x124>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d103      	bne.n	8006f34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	691a      	ldr	r2, [r3, #16]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	615a      	str	r2, [r3, #20]
}
 8006f3a:	bf00      	nop
 8006f3c:	3714      	adds	r7, #20
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop
 8006f48:	40010000 	.word	0x40010000
 8006f4c:	40000400 	.word	0x40000400
 8006f50:	40000800 	.word	0x40000800
 8006f54:	40000c00 	.word	0x40000c00
 8006f58:	40010400 	.word	0x40010400
 8006f5c:	40014000 	.word	0x40014000
 8006f60:	40014400 	.word	0x40014400
 8006f64:	40014800 	.word	0x40014800
 8006f68:	40001800 	.word	0x40001800
 8006f6c:	40001c00 	.word	0x40001c00
 8006f70:	40002000 	.word	0x40002000

08006f74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b087      	sub	sp, #28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	f023 0201 	bic.w	r2, r3, #1
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f023 0303 	bic.w	r3, r3, #3
 8006faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f023 0302 	bic.w	r3, r3, #2
 8006fbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a20      	ldr	r2, [pc, #128]	; (800704c <TIM_OC1_SetConfig+0xd8>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d003      	beq.n	8006fd8 <TIM_OC1_SetConfig+0x64>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a1f      	ldr	r2, [pc, #124]	; (8007050 <TIM_OC1_SetConfig+0xdc>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d10c      	bne.n	8006ff2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	f023 0308 	bic.w	r3, r3, #8
 8006fde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	f023 0304 	bic.w	r3, r3, #4
 8006ff0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a15      	ldr	r2, [pc, #84]	; (800704c <TIM_OC1_SetConfig+0xd8>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d003      	beq.n	8007002 <TIM_OC1_SetConfig+0x8e>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a14      	ldr	r2, [pc, #80]	; (8007050 <TIM_OC1_SetConfig+0xdc>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d111      	bne.n	8007026 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	695b      	ldr	r3, [r3, #20]
 8007016:	693a      	ldr	r2, [r7, #16]
 8007018:	4313      	orrs	r3, r2
 800701a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	699b      	ldr	r3, [r3, #24]
 8007020:	693a      	ldr	r2, [r7, #16]
 8007022:	4313      	orrs	r3, r2
 8007024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	685a      	ldr	r2, [r3, #4]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	697a      	ldr	r2, [r7, #20]
 800703e:	621a      	str	r2, [r3, #32]
}
 8007040:	bf00      	nop
 8007042:	371c      	adds	r7, #28
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr
 800704c:	40010000 	.word	0x40010000
 8007050:	40010400 	.word	0x40010400

08007054 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007054:	b480      	push	{r7}
 8007056:	b087      	sub	sp, #28
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a1b      	ldr	r3, [r3, #32]
 8007062:	f023 0210 	bic.w	r2, r3, #16
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a1b      	ldr	r3, [r3, #32]
 800706e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	699b      	ldr	r3, [r3, #24]
 800707a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800708a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	021b      	lsls	r3, r3, #8
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	4313      	orrs	r3, r2
 8007096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	f023 0320 	bic.w	r3, r3, #32
 800709e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	011b      	lsls	r3, r3, #4
 80070a6:	697a      	ldr	r2, [r7, #20]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a22      	ldr	r2, [pc, #136]	; (8007138 <TIM_OC2_SetConfig+0xe4>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d003      	beq.n	80070bc <TIM_OC2_SetConfig+0x68>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a21      	ldr	r2, [pc, #132]	; (800713c <TIM_OC2_SetConfig+0xe8>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d10d      	bne.n	80070d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	011b      	lsls	r3, r3, #4
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a17      	ldr	r2, [pc, #92]	; (8007138 <TIM_OC2_SetConfig+0xe4>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d003      	beq.n	80070e8 <TIM_OC2_SetConfig+0x94>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4a16      	ldr	r2, [pc, #88]	; (800713c <TIM_OC2_SetConfig+0xe8>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d113      	bne.n	8007110 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	695b      	ldr	r3, [r3, #20]
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	4313      	orrs	r3, r2
 8007102:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	699b      	ldr	r3, [r3, #24]
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	693a      	ldr	r2, [r7, #16]
 800710c:	4313      	orrs	r3, r2
 800710e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	693a      	ldr	r2, [r7, #16]
 8007114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	685a      	ldr	r2, [r3, #4]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	697a      	ldr	r2, [r7, #20]
 8007128:	621a      	str	r2, [r3, #32]
}
 800712a:	bf00      	nop
 800712c:	371c      	adds	r7, #28
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	40010000 	.word	0x40010000
 800713c:	40010400 	.word	0x40010400

08007140 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007140:	b480      	push	{r7}
 8007142:	b087      	sub	sp, #28
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a1b      	ldr	r3, [r3, #32]
 800714e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	69db      	ldr	r3, [r3, #28]
 8007166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800716e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f023 0303 	bic.w	r3, r3, #3
 8007176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	4313      	orrs	r3, r2
 8007180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007188:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	021b      	lsls	r3, r3, #8
 8007190:	697a      	ldr	r2, [r7, #20]
 8007192:	4313      	orrs	r3, r2
 8007194:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a21      	ldr	r2, [pc, #132]	; (8007220 <TIM_OC3_SetConfig+0xe0>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d003      	beq.n	80071a6 <TIM_OC3_SetConfig+0x66>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a20      	ldr	r2, [pc, #128]	; (8007224 <TIM_OC3_SetConfig+0xe4>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d10d      	bne.n	80071c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	021b      	lsls	r3, r3, #8
 80071b4:	697a      	ldr	r2, [r7, #20]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a16      	ldr	r2, [pc, #88]	; (8007220 <TIM_OC3_SetConfig+0xe0>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d003      	beq.n	80071d2 <TIM_OC3_SetConfig+0x92>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a15      	ldr	r2, [pc, #84]	; (8007224 <TIM_OC3_SetConfig+0xe4>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d113      	bne.n	80071fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	695b      	ldr	r3, [r3, #20]
 80071e6:	011b      	lsls	r3, r3, #4
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	011b      	lsls	r3, r3, #4
 80071f4:	693a      	ldr	r2, [r7, #16]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	693a      	ldr	r2, [r7, #16]
 80071fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	685a      	ldr	r2, [r3, #4]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	697a      	ldr	r2, [r7, #20]
 8007212:	621a      	str	r2, [r3, #32]
}
 8007214:	bf00      	nop
 8007216:	371c      	adds	r7, #28
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr
 8007220:	40010000 	.word	0x40010000
 8007224:	40010400 	.word	0x40010400

08007228 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007228:	b480      	push	{r7}
 800722a:	b087      	sub	sp, #28
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a1b      	ldr	r3, [r3, #32]
 8007236:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a1b      	ldr	r3, [r3, #32]
 8007242:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	69db      	ldr	r3, [r3, #28]
 800724e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800725e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	021b      	lsls	r3, r3, #8
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	4313      	orrs	r3, r2
 800726a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007272:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	031b      	lsls	r3, r3, #12
 800727a:	693a      	ldr	r2, [r7, #16]
 800727c:	4313      	orrs	r3, r2
 800727e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a12      	ldr	r2, [pc, #72]	; (80072cc <TIM_OC4_SetConfig+0xa4>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d003      	beq.n	8007290 <TIM_OC4_SetConfig+0x68>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4a11      	ldr	r2, [pc, #68]	; (80072d0 <TIM_OC4_SetConfig+0xa8>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d109      	bne.n	80072a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007296:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	695b      	ldr	r3, [r3, #20]
 800729c:	019b      	lsls	r3, r3, #6
 800729e:	697a      	ldr	r2, [r7, #20]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	697a      	ldr	r2, [r7, #20]
 80072a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	685a      	ldr	r2, [r3, #4]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	693a      	ldr	r2, [r7, #16]
 80072bc:	621a      	str	r2, [r3, #32]
}
 80072be:	bf00      	nop
 80072c0:	371c      	adds	r7, #28
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	40010000 	.word	0x40010000
 80072d0:	40010400 	.word	0x40010400

080072d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b087      	sub	sp, #28
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6a1b      	ldr	r3, [r3, #32]
 80072e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6a1b      	ldr	r3, [r3, #32]
 80072ea:	f023 0201 	bic.w	r2, r3, #1
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	699b      	ldr	r3, [r3, #24]
 80072f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	011b      	lsls	r3, r3, #4
 8007304:	693a      	ldr	r2, [r7, #16]
 8007306:	4313      	orrs	r3, r2
 8007308:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	f023 030a 	bic.w	r3, r3, #10
 8007310:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007312:	697a      	ldr	r2, [r7, #20]
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	4313      	orrs	r3, r2
 8007318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	693a      	ldr	r2, [r7, #16]
 800731e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	621a      	str	r2, [r3, #32]
}
 8007326:	bf00      	nop
 8007328:	371c      	adds	r7, #28
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr

08007332 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007332:	b480      	push	{r7}
 8007334:	b087      	sub	sp, #28
 8007336:	af00      	add	r7, sp, #0
 8007338:	60f8      	str	r0, [r7, #12]
 800733a:	60b9      	str	r1, [r7, #8]
 800733c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	f023 0210 	bic.w	r2, r3, #16
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6a1b      	ldr	r3, [r3, #32]
 8007354:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800735c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	031b      	lsls	r3, r3, #12
 8007362:	697a      	ldr	r2, [r7, #20]
 8007364:	4313      	orrs	r3, r2
 8007366:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800736e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	011b      	lsls	r3, r3, #4
 8007374:	693a      	ldr	r2, [r7, #16]
 8007376:	4313      	orrs	r3, r2
 8007378:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	697a      	ldr	r2, [r7, #20]
 800737e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	693a      	ldr	r2, [r7, #16]
 8007384:	621a      	str	r2, [r3, #32]
}
 8007386:	bf00      	nop
 8007388:	371c      	adds	r7, #28
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007392:	b480      	push	{r7}
 8007394:	b085      	sub	sp, #20
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
 800739a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073aa:	683a      	ldr	r2, [r7, #0]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	f043 0307 	orr.w	r3, r3, #7
 80073b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	609a      	str	r2, [r3, #8]
}
 80073bc:	bf00      	nop
 80073be:	3714      	adds	r7, #20
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b087      	sub	sp, #28
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]
 80073d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	021a      	lsls	r2, r3, #8
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	431a      	orrs	r2, r3
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	697a      	ldr	r2, [r7, #20]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	697a      	ldr	r2, [r7, #20]
 80073fa:	609a      	str	r2, [r3, #8]
}
 80073fc:	bf00      	nop
 80073fe:	371c      	adds	r7, #28
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007408:	b480      	push	{r7}
 800740a:	b087      	sub	sp, #28
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	f003 031f 	and.w	r3, r3, #31
 800741a:	2201      	movs	r2, #1
 800741c:	fa02 f303 	lsl.w	r3, r2, r3
 8007420:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6a1a      	ldr	r2, [r3, #32]
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	43db      	mvns	r3, r3
 800742a:	401a      	ands	r2, r3
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6a1a      	ldr	r2, [r3, #32]
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	f003 031f 	and.w	r3, r3, #31
 800743a:	6879      	ldr	r1, [r7, #4]
 800743c:	fa01 f303 	lsl.w	r3, r1, r3
 8007440:	431a      	orrs	r2, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	621a      	str	r2, [r3, #32]
}
 8007446:	bf00      	nop
 8007448:	371c      	adds	r7, #28
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
	...

08007454 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007464:	2b01      	cmp	r3, #1
 8007466:	d101      	bne.n	800746c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007468:	2302      	movs	r3, #2
 800746a:	e05a      	b.n	8007522 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2202      	movs	r2, #2
 8007478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007492:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	4313      	orrs	r3, r2
 800749c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a21      	ldr	r2, [pc, #132]	; (8007530 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d022      	beq.n	80074f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074b8:	d01d      	beq.n	80074f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a1d      	ldr	r2, [pc, #116]	; (8007534 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d018      	beq.n	80074f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a1b      	ldr	r2, [pc, #108]	; (8007538 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d013      	beq.n	80074f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a1a      	ldr	r2, [pc, #104]	; (800753c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d00e      	beq.n	80074f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a18      	ldr	r2, [pc, #96]	; (8007540 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d009      	beq.n	80074f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a17      	ldr	r2, [pc, #92]	; (8007544 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d004      	beq.n	80074f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a15      	ldr	r2, [pc, #84]	; (8007548 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d10c      	bne.n	8007510 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	68ba      	ldr	r2, [r7, #8]
 8007504:	4313      	orrs	r3, r2
 8007506:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68ba      	ldr	r2, [r7, #8]
 800750e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	3714      	adds	r7, #20
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	40010000 	.word	0x40010000
 8007534:	40000400 	.word	0x40000400
 8007538:	40000800 	.word	0x40000800
 800753c:	40000c00 	.word	0x40000c00
 8007540:	40010400 	.word	0x40010400
 8007544:	40014000 	.word	0x40014000
 8007548:	40001800 	.word	0x40001800

0800754c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d101      	bne.n	800755e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e03f      	b.n	80075de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007564:	b2db      	uxtb	r3, r3
 8007566:	2b00      	cmp	r3, #0
 8007568:	d106      	bne.n	8007578 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f7fb fbda 	bl	8002d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2224      	movs	r2, #36	; 0x24
 800757c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	68da      	ldr	r2, [r3, #12]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800758e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 ff49 	bl	8008428 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	691a      	ldr	r2, [r3, #16]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	695a      	ldr	r2, [r3, #20]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	68da      	ldr	r2, [r3, #12]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80075c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2220      	movs	r2, #32
 80075d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2220      	movs	r2, #32
 80075d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3708      	adds	r7, #8
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
	...

080075e8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b08c      	sub	sp, #48	; 0x30
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	4613      	mov	r3, r2
 80075f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	2b20      	cmp	r3, #32
 8007600:	d165      	bne.n	80076ce <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d002      	beq.n	800760e <HAL_UART_Transmit_DMA+0x26>
 8007608:	88fb      	ldrh	r3, [r7, #6]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d101      	bne.n	8007612 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	e05e      	b.n	80076d0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007618:	2b01      	cmp	r3, #1
 800761a:	d101      	bne.n	8007620 <HAL_UART_Transmit_DMA+0x38>
 800761c:	2302      	movs	r3, #2
 800761e:	e057      	b.n	80076d0 <HAL_UART_Transmit_DMA+0xe8>
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	88fa      	ldrh	r2, [r7, #6]
 8007632:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	88fa      	ldrh	r2, [r7, #6]
 8007638:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2221      	movs	r2, #33	; 0x21
 8007644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800764c:	4a22      	ldr	r2, [pc, #136]	; (80076d8 <HAL_UART_Transmit_DMA+0xf0>)
 800764e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007654:	4a21      	ldr	r2, [pc, #132]	; (80076dc <HAL_UART_Transmit_DMA+0xf4>)
 8007656:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800765c:	4a20      	ldr	r2, [pc, #128]	; (80076e0 <HAL_UART_Transmit_DMA+0xf8>)
 800765e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007664:	2200      	movs	r2, #0
 8007666:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8007668:	f107 0308 	add.w	r3, r7, #8
 800766c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007674:	6819      	ldr	r1, [r3, #0]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	3304      	adds	r3, #4
 800767c:	461a      	mov	r2, r3
 800767e:	88fb      	ldrh	r3, [r7, #6]
 8007680:	f7fc f902 	bl	8003888 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800768c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	3314      	adds	r3, #20
 800769c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	e853 3f00 	ldrex	r3, [r3]
 80076a4:	617b      	str	r3, [r7, #20]
   return(result);
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	3314      	adds	r3, #20
 80076b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076b6:	627a      	str	r2, [r7, #36]	; 0x24
 80076b8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ba:	6a39      	ldr	r1, [r7, #32]
 80076bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076be:	e841 2300 	strex	r3, r2, [r1]
 80076c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d1e5      	bne.n	8007696 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80076ca:	2300      	movs	r3, #0
 80076cc:	e000      	b.n	80076d0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80076ce:	2302      	movs	r3, #2
  }
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3730      	adds	r7, #48	; 0x30
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	08007cc9 	.word	0x08007cc9
 80076dc:	08007d63 	.word	0x08007d63
 80076e0:	08007edb 	.word	0x08007edb

080076e4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	4613      	mov	r3, r2
 80076f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	2b20      	cmp	r3, #32
 80076fc:	d11d      	bne.n	800773a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d002      	beq.n	800770a <HAL_UART_Receive_DMA+0x26>
 8007704:	88fb      	ldrh	r3, [r7, #6]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d101      	bne.n	800770e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	e016      	b.n	800773c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007714:	2b01      	cmp	r3, #1
 8007716:	d101      	bne.n	800771c <HAL_UART_Receive_DMA+0x38>
 8007718:	2302      	movs	r3, #2
 800771a:	e00f      	b.n	800773c <HAL_UART_Receive_DMA+0x58>
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2200      	movs	r2, #0
 8007728:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800772a:	88fb      	ldrh	r3, [r7, #6]
 800772c:	461a      	mov	r2, r3
 800772e:	68b9      	ldr	r1, [r7, #8]
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f000 fc1d 	bl	8007f70 <UART_Start_Receive_DMA>
 8007736:	4603      	mov	r3, r0
 8007738:	e000      	b.n	800773c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800773a:	2302      	movs	r3, #2
  }
}
 800773c:	4618      	mov	r0, r3
 800773e:	3710      	adds	r7, #16
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b0ba      	sub	sp, #232	; 0xe8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800776a:	2300      	movs	r3, #0
 800776c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007770:	2300      	movs	r3, #0
 8007772:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800777a:	f003 030f 	and.w	r3, r3, #15
 800777e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007782:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007786:	2b00      	cmp	r3, #0
 8007788:	d10f      	bne.n	80077aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800778a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800778e:	f003 0320 	and.w	r3, r3, #32
 8007792:	2b00      	cmp	r3, #0
 8007794:	d009      	beq.n	80077aa <HAL_UART_IRQHandler+0x66>
 8007796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800779a:	f003 0320 	and.w	r3, r3, #32
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d003      	beq.n	80077aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fd85 	bl	80082b2 <UART_Receive_IT>
      return;
 80077a8:	e256      	b.n	8007c58 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80077aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	f000 80de 	beq.w	8007970 <HAL_UART_IRQHandler+0x22c>
 80077b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077b8:	f003 0301 	and.w	r3, r3, #1
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d106      	bne.n	80077ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80077c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f000 80d1 	beq.w	8007970 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80077ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077d2:	f003 0301 	and.w	r3, r3, #1
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d00b      	beq.n	80077f2 <HAL_UART_IRQHandler+0xae>
 80077da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d005      	beq.n	80077f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ea:	f043 0201 	orr.w	r2, r3, #1
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077f6:	f003 0304 	and.w	r3, r3, #4
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00b      	beq.n	8007816 <HAL_UART_IRQHandler+0xd2>
 80077fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007802:	f003 0301 	and.w	r3, r3, #1
 8007806:	2b00      	cmp	r3, #0
 8007808:	d005      	beq.n	8007816 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780e:	f043 0202 	orr.w	r2, r3, #2
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800781a:	f003 0302 	and.w	r3, r3, #2
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00b      	beq.n	800783a <HAL_UART_IRQHandler+0xf6>
 8007822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007826:	f003 0301 	and.w	r3, r3, #1
 800782a:	2b00      	cmp	r3, #0
 800782c:	d005      	beq.n	800783a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007832:	f043 0204 	orr.w	r2, r3, #4
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800783a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800783e:	f003 0308 	and.w	r3, r3, #8
 8007842:	2b00      	cmp	r3, #0
 8007844:	d011      	beq.n	800786a <HAL_UART_IRQHandler+0x126>
 8007846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800784a:	f003 0320 	and.w	r3, r3, #32
 800784e:	2b00      	cmp	r3, #0
 8007850:	d105      	bne.n	800785e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007856:	f003 0301 	and.w	r3, r3, #1
 800785a:	2b00      	cmp	r3, #0
 800785c:	d005      	beq.n	800786a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007862:	f043 0208 	orr.w	r2, r3, #8
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800786e:	2b00      	cmp	r3, #0
 8007870:	f000 81ed 	beq.w	8007c4e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007878:	f003 0320 	and.w	r3, r3, #32
 800787c:	2b00      	cmp	r3, #0
 800787e:	d008      	beq.n	8007892 <HAL_UART_IRQHandler+0x14e>
 8007880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007884:	f003 0320 	and.w	r3, r3, #32
 8007888:	2b00      	cmp	r3, #0
 800788a:	d002      	beq.n	8007892 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 fd10 	bl	80082b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	695b      	ldr	r3, [r3, #20]
 8007898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800789c:	2b40      	cmp	r3, #64	; 0x40
 800789e:	bf0c      	ite	eq
 80078a0:	2301      	moveq	r3, #1
 80078a2:	2300      	movne	r3, #0
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ae:	f003 0308 	and.w	r3, r3, #8
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d103      	bne.n	80078be <HAL_UART_IRQHandler+0x17a>
 80078b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d04f      	beq.n	800795e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 fc18 	bl	80080f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ce:	2b40      	cmp	r3, #64	; 0x40
 80078d0:	d141      	bne.n	8007956 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	3314      	adds	r3, #20
 80078d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078e0:	e853 3f00 	ldrex	r3, [r3]
 80078e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80078e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80078ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	3314      	adds	r3, #20
 80078fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80078fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007902:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007906:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800790a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800790e:	e841 2300 	strex	r3, r2, [r1]
 8007912:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007916:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1d9      	bne.n	80078d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007922:	2b00      	cmp	r3, #0
 8007924:	d013      	beq.n	800794e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792a:	4a7d      	ldr	r2, [pc, #500]	; (8007b20 <HAL_UART_IRQHandler+0x3dc>)
 800792c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007932:	4618      	mov	r0, r3
 8007934:	f7fc f870 	bl	8003a18 <HAL_DMA_Abort_IT>
 8007938:	4603      	mov	r3, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d016      	beq.n	800796c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007948:	4610      	mov	r0, r2
 800794a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800794c:	e00e      	b.n	800796c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 f9a4 	bl	8007c9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007954:	e00a      	b.n	800796c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 f9a0 	bl	8007c9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800795c:	e006      	b.n	800796c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 f99c 	bl	8007c9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800796a:	e170      	b.n	8007c4e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800796c:	bf00      	nop
    return;
 800796e:	e16e      	b.n	8007c4e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007974:	2b01      	cmp	r3, #1
 8007976:	f040 814a 	bne.w	8007c0e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800797a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800797e:	f003 0310 	and.w	r3, r3, #16
 8007982:	2b00      	cmp	r3, #0
 8007984:	f000 8143 	beq.w	8007c0e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800798c:	f003 0310 	and.w	r3, r3, #16
 8007990:	2b00      	cmp	r3, #0
 8007992:	f000 813c 	beq.w	8007c0e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007996:	2300      	movs	r3, #0
 8007998:	60bb      	str	r3, [r7, #8]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	60bb      	str	r3, [r7, #8]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	60bb      	str	r3, [r7, #8]
 80079aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	695b      	ldr	r3, [r3, #20]
 80079b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b6:	2b40      	cmp	r3, #64	; 0x40
 80079b8:	f040 80b4 	bne.w	8007b24 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80079c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f000 8140 	beq.w	8007c52 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80079d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079da:	429a      	cmp	r2, r3
 80079dc:	f080 8139 	bcs.w	8007c52 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ec:	69db      	ldr	r3, [r3, #28]
 80079ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079f2:	f000 8088 	beq.w	8007b06 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	330c      	adds	r3, #12
 80079fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a04:	e853 3f00 	ldrex	r3, [r3]
 8007a08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007a0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	330c      	adds	r3, #12
 8007a1e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007a22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007a26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007a2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007a32:	e841 2300 	strex	r3, r2, [r1]
 8007a36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007a3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d1d9      	bne.n	80079f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	3314      	adds	r3, #20
 8007a48:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a4c:	e853 3f00 	ldrex	r3, [r3]
 8007a50:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007a52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a54:	f023 0301 	bic.w	r3, r3, #1
 8007a58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	3314      	adds	r3, #20
 8007a62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007a66:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007a6a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a6c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a72:	e841 2300 	strex	r3, r2, [r1]
 8007a76:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007a78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d1e1      	bne.n	8007a42 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	3314      	adds	r3, #20
 8007a84:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a88:	e853 3f00 	ldrex	r3, [r3]
 8007a8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007a8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	3314      	adds	r3, #20
 8007a9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007aa2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007aa4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007aa8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007aaa:	e841 2300 	strex	r3, r2, [r1]
 8007aae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007ab0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d1e3      	bne.n	8007a7e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2220      	movs	r2, #32
 8007aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	330c      	adds	r3, #12
 8007aca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ace:	e853 3f00 	ldrex	r3, [r3]
 8007ad2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ad6:	f023 0310 	bic.w	r3, r3, #16
 8007ada:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	330c      	adds	r3, #12
 8007ae4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007ae8:	65ba      	str	r2, [r7, #88]	; 0x58
 8007aea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007aee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007af0:	e841 2300 	strex	r3, r2, [r1]
 8007af4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d1e3      	bne.n	8007ac4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7fb ff19 	bl	8003938 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	1ad3      	subs	r3, r2, r3
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	4619      	mov	r1, r3
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 f8ca 	bl	8007cb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b1c:	e099      	b.n	8007c52 <HAL_UART_IRQHandler+0x50e>
 8007b1e:	bf00      	nop
 8007b20:	080081bb 	.word	0x080081bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	f000 808b 	beq.w	8007c56 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007b40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f000 8086 	beq.w	8007c56 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	330c      	adds	r3, #12
 8007b50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b54:	e853 3f00 	ldrex	r3, [r3]
 8007b58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	330c      	adds	r3, #12
 8007b6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007b6e:	647a      	str	r2, [r7, #68]	; 0x44
 8007b70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b76:	e841 2300 	strex	r3, r2, [r1]
 8007b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d1e3      	bne.n	8007b4a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	3314      	adds	r3, #20
 8007b88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8c:	e853 3f00 	ldrex	r3, [r3]
 8007b90:	623b      	str	r3, [r7, #32]
   return(result);
 8007b92:	6a3b      	ldr	r3, [r7, #32]
 8007b94:	f023 0301 	bic.w	r3, r3, #1
 8007b98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	3314      	adds	r3, #20
 8007ba2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007ba6:	633a      	str	r2, [r7, #48]	; 0x30
 8007ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007baa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bae:	e841 2300 	strex	r3, r2, [r1]
 8007bb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d1e3      	bne.n	8007b82 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2220      	movs	r2, #32
 8007bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	330c      	adds	r3, #12
 8007bce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	e853 3f00 	ldrex	r3, [r3]
 8007bd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f023 0310 	bic.w	r3, r3, #16
 8007bde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	330c      	adds	r3, #12
 8007be8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007bec:	61fa      	str	r2, [r7, #28]
 8007bee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf0:	69b9      	ldr	r1, [r7, #24]
 8007bf2:	69fa      	ldr	r2, [r7, #28]
 8007bf4:	e841 2300 	strex	r3, r2, [r1]
 8007bf8:	617b      	str	r3, [r7, #20]
   return(result);
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d1e3      	bne.n	8007bc8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c04:	4619      	mov	r1, r3
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 f852 	bl	8007cb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007c0c:	e023      	b.n	8007c56 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d009      	beq.n	8007c2e <HAL_UART_IRQHandler+0x4ea>
 8007c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d003      	beq.n	8007c2e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 fadb 	bl	80081e2 <UART_Transmit_IT>
    return;
 8007c2c:	e014      	b.n	8007c58 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00e      	beq.n	8007c58 <HAL_UART_IRQHandler+0x514>
 8007c3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d008      	beq.n	8007c58 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 fb1b 	bl	8008282 <UART_EndTransmit_IT>
    return;
 8007c4c:	e004      	b.n	8007c58 <HAL_UART_IRQHandler+0x514>
    return;
 8007c4e:	bf00      	nop
 8007c50:	e002      	b.n	8007c58 <HAL_UART_IRQHandler+0x514>
      return;
 8007c52:	bf00      	nop
 8007c54:	e000      	b.n	8007c58 <HAL_UART_IRQHandler+0x514>
      return;
 8007c56:	bf00      	nop
  }
}
 8007c58:	37e8      	adds	r7, #232	; 0xe8
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop

08007c60 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007c68:	bf00      	nop
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007c7c:	bf00      	nop
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007c90:	bf00      	nop
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007ca4:	bf00      	nop
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	460b      	mov	r3, r1
 8007cba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007cbc:	bf00      	nop
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b090      	sub	sp, #64	; 0x40
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d137      	bne.n	8007d54 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	3314      	adds	r3, #20
 8007cf0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf4:	e853 3f00 	ldrex	r3, [r3]
 8007cf8:	623b      	str	r3, [r7, #32]
   return(result);
 8007cfa:	6a3b      	ldr	r3, [r7, #32]
 8007cfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d00:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	3314      	adds	r3, #20
 8007d08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d0a:	633a      	str	r2, [r7, #48]	; 0x30
 8007d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d12:	e841 2300 	strex	r3, r2, [r1]
 8007d16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d1e5      	bne.n	8007cea <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	330c      	adds	r3, #12
 8007d24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	e853 3f00 	ldrex	r3, [r3]
 8007d2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d34:	637b      	str	r3, [r7, #52]	; 0x34
 8007d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	330c      	adds	r3, #12
 8007d3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d3e:	61fa      	str	r2, [r7, #28]
 8007d40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d42:	69b9      	ldr	r1, [r7, #24]
 8007d44:	69fa      	ldr	r2, [r7, #28]
 8007d46:	e841 2300 	strex	r3, r2, [r1]
 8007d4a:	617b      	str	r3, [r7, #20]
   return(result);
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d1e5      	bne.n	8007d1e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d52:	e002      	b.n	8007d5a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007d54:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007d56:	f7fa fe0f 	bl	8002978 <HAL_UART_TxCpltCallback>
}
 8007d5a:	bf00      	nop
 8007d5c:	3740      	adds	r7, #64	; 0x40
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b084      	sub	sp, #16
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d6e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	f7ff ff75 	bl	8007c60 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d76:	bf00      	nop
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b09c      	sub	sp, #112	; 0x70
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d8a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d172      	bne.n	8007e80 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	330c      	adds	r3, #12
 8007da6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007daa:	e853 3f00 	ldrex	r3, [r3]
 8007dae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007db2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007db6:	66bb      	str	r3, [r7, #104]	; 0x68
 8007db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	330c      	adds	r3, #12
 8007dbe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007dc0:	65ba      	str	r2, [r7, #88]	; 0x58
 8007dc2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007dc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007dc8:	e841 2300 	strex	r3, r2, [r1]
 8007dcc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d1e5      	bne.n	8007da0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	3314      	adds	r3, #20
 8007dda:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dde:	e853 3f00 	ldrex	r3, [r3]
 8007de2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007de6:	f023 0301 	bic.w	r3, r3, #1
 8007dea:	667b      	str	r3, [r7, #100]	; 0x64
 8007dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	3314      	adds	r3, #20
 8007df2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007df4:	647a      	str	r2, [r7, #68]	; 0x44
 8007df6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007dfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dfc:	e841 2300 	strex	r3, r2, [r1]
 8007e00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d1e5      	bne.n	8007dd4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	3314      	adds	r3, #20
 8007e0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e12:	e853 3f00 	ldrex	r3, [r3]
 8007e16:	623b      	str	r3, [r7, #32]
   return(result);
 8007e18:	6a3b      	ldr	r3, [r7, #32]
 8007e1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e1e:	663b      	str	r3, [r7, #96]	; 0x60
 8007e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	3314      	adds	r3, #20
 8007e26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007e28:	633a      	str	r2, [r7, #48]	; 0x30
 8007e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e30:	e841 2300 	strex	r3, r2, [r1]
 8007e34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1e5      	bne.n	8007e08 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e3e:	2220      	movs	r2, #32
 8007e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d119      	bne.n	8007e80 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	330c      	adds	r3, #12
 8007e52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	e853 3f00 	ldrex	r3, [r3]
 8007e5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f023 0310 	bic.w	r3, r3, #16
 8007e62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	330c      	adds	r3, #12
 8007e6a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007e6c:	61fa      	str	r2, [r7, #28]
 8007e6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e70:	69b9      	ldr	r1, [r7, #24]
 8007e72:	69fa      	ldr	r2, [r7, #28]
 8007e74:	e841 2300 	strex	r3, r2, [r1]
 8007e78:	617b      	str	r3, [r7, #20]
   return(result);
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d1e5      	bne.n	8007e4c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d106      	bne.n	8007e96 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e8a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007e90:	f7ff ff0e 	bl	8007cb0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007e94:	e002      	b.n	8007e9c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007e96:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007e98:	f7ff feec 	bl	8007c74 <HAL_UART_RxCpltCallback>
}
 8007e9c:	bf00      	nop
 8007e9e:	3770      	adds	r7, #112	; 0x70
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d108      	bne.n	8007ecc <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ebe:	085b      	lsrs	r3, r3, #1
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f7ff fef3 	bl	8007cb0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007eca:	e002      	b.n	8007ed2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f7ff fedb 	bl	8007c88 <HAL_UART_RxHalfCpltCallback>
}
 8007ed2:	bf00      	nop
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b084      	sub	sp, #16
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eea:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	695b      	ldr	r3, [r3, #20]
 8007ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ef6:	2b80      	cmp	r3, #128	; 0x80
 8007ef8:	bf0c      	ite	eq
 8007efa:	2301      	moveq	r3, #1
 8007efc:	2300      	movne	r3, #0
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	2b21      	cmp	r3, #33	; 0x21
 8007f0c:	d108      	bne.n	8007f20 <UART_DMAError+0x46>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d005      	beq.n	8007f20 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	2200      	movs	r2, #0
 8007f18:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007f1a:	68b8      	ldr	r0, [r7, #8]
 8007f1c:	f000 f8c2 	bl	80080a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	695b      	ldr	r3, [r3, #20]
 8007f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f2a:	2b40      	cmp	r3, #64	; 0x40
 8007f2c:	bf0c      	ite	eq
 8007f2e:	2301      	moveq	r3, #1
 8007f30:	2300      	movne	r3, #0
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	2b22      	cmp	r3, #34	; 0x22
 8007f40:	d108      	bne.n	8007f54 <UART_DMAError+0x7a>
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d005      	beq.n	8007f54 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007f4e:	68b8      	ldr	r0, [r7, #8]
 8007f50:	f000 f8d0 	bl	80080f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f58:	f043 0210 	orr.w	r2, r3, #16
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f60:	68b8      	ldr	r0, [r7, #8]
 8007f62:	f7ff fe9b 	bl	8007c9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f66:	bf00      	nop
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
	...

08007f70 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b098      	sub	sp, #96	; 0x60
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007f7e:	68ba      	ldr	r2, [r7, #8]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	88fa      	ldrh	r2, [r7, #6]
 8007f88:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2222      	movs	r2, #34	; 0x22
 8007f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f9c:	4a3e      	ldr	r2, [pc, #248]	; (8008098 <UART_Start_Receive_DMA+0x128>)
 8007f9e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa4:	4a3d      	ldr	r2, [pc, #244]	; (800809c <UART_Start_Receive_DMA+0x12c>)
 8007fa6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fac:	4a3c      	ldr	r2, [pc, #240]	; (80080a0 <UART_Start_Receive_DMA+0x130>)
 8007fae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007fb8:	f107 0308 	add.w	r3, r7, #8
 8007fbc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	3304      	adds	r3, #4
 8007fc8:	4619      	mov	r1, r3
 8007fca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	88fb      	ldrh	r3, [r7, #6]
 8007fd0:	f7fb fc5a 	bl	8003888 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	613b      	str	r3, [r7, #16]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	613b      	str	r3, [r7, #16]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	613b      	str	r3, [r7, #16]
 8007fe8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	330c      	adds	r3, #12
 8007ff8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ffc:	e853 3f00 	ldrex	r3, [r3]
 8008000:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008008:	65bb      	str	r3, [r7, #88]	; 0x58
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	330c      	adds	r3, #12
 8008010:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008012:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008014:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008016:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008018:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800801a:	e841 2300 	strex	r3, r2, [r1]
 800801e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008022:	2b00      	cmp	r3, #0
 8008024:	d1e5      	bne.n	8007ff2 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	3314      	adds	r3, #20
 800802c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800802e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008030:	e853 3f00 	ldrex	r3, [r3]
 8008034:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008038:	f043 0301 	orr.w	r3, r3, #1
 800803c:	657b      	str	r3, [r7, #84]	; 0x54
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	3314      	adds	r3, #20
 8008044:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008046:	63ba      	str	r2, [r7, #56]	; 0x38
 8008048:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800804c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800804e:	e841 2300 	strex	r3, r2, [r1]
 8008052:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1e5      	bne.n	8008026 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	3314      	adds	r3, #20
 8008060:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	e853 3f00 	ldrex	r3, [r3]
 8008068:	617b      	str	r3, [r7, #20]
   return(result);
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008070:	653b      	str	r3, [r7, #80]	; 0x50
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	3314      	adds	r3, #20
 8008078:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800807a:	627a      	str	r2, [r7, #36]	; 0x24
 800807c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807e:	6a39      	ldr	r1, [r7, #32]
 8008080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008082:	e841 2300 	strex	r3, r2, [r1]
 8008086:	61fb      	str	r3, [r7, #28]
   return(result);
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d1e5      	bne.n	800805a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800808e:	2300      	movs	r3, #0
}
 8008090:	4618      	mov	r0, r3
 8008092:	3760      	adds	r7, #96	; 0x60
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}
 8008098:	08007d7f 	.word	0x08007d7f
 800809c:	08007ea5 	.word	0x08007ea5
 80080a0:	08007edb 	.word	0x08007edb

080080a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b089      	sub	sp, #36	; 0x24
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	330c      	adds	r3, #12
 80080b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	e853 3f00 	ldrex	r3, [r3]
 80080ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80080c2:	61fb      	str	r3, [r7, #28]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	330c      	adds	r3, #12
 80080ca:	69fa      	ldr	r2, [r7, #28]
 80080cc:	61ba      	str	r2, [r7, #24]
 80080ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d0:	6979      	ldr	r1, [r7, #20]
 80080d2:	69ba      	ldr	r2, [r7, #24]
 80080d4:	e841 2300 	strex	r3, r2, [r1]
 80080d8:	613b      	str	r3, [r7, #16]
   return(result);
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d1e5      	bne.n	80080ac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2220      	movs	r2, #32
 80080e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80080e8:	bf00      	nop
 80080ea:	3724      	adds	r7, #36	; 0x24
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b095      	sub	sp, #84	; 0x54
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	330c      	adds	r3, #12
 8008102:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008106:	e853 3f00 	ldrex	r3, [r3]
 800810a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800810c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008112:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	330c      	adds	r3, #12
 800811a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800811c:	643a      	str	r2, [r7, #64]	; 0x40
 800811e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008120:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008122:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008124:	e841 2300 	strex	r3, r2, [r1]
 8008128:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800812a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800812c:	2b00      	cmp	r3, #0
 800812e:	d1e5      	bne.n	80080fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	3314      	adds	r3, #20
 8008136:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008138:	6a3b      	ldr	r3, [r7, #32]
 800813a:	e853 3f00 	ldrex	r3, [r3]
 800813e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	f023 0301 	bic.w	r3, r3, #1
 8008146:	64bb      	str	r3, [r7, #72]	; 0x48
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	3314      	adds	r3, #20
 800814e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008150:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008152:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008154:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008156:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008158:	e841 2300 	strex	r3, r2, [r1]
 800815c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800815e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008160:	2b00      	cmp	r3, #0
 8008162:	d1e5      	bne.n	8008130 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008168:	2b01      	cmp	r3, #1
 800816a:	d119      	bne.n	80081a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	330c      	adds	r3, #12
 8008172:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	e853 3f00 	ldrex	r3, [r3]
 800817a:	60bb      	str	r3, [r7, #8]
   return(result);
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	f023 0310 	bic.w	r3, r3, #16
 8008182:	647b      	str	r3, [r7, #68]	; 0x44
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	330c      	adds	r3, #12
 800818a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800818c:	61ba      	str	r2, [r7, #24]
 800818e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008190:	6979      	ldr	r1, [r7, #20]
 8008192:	69ba      	ldr	r2, [r7, #24]
 8008194:	e841 2300 	strex	r3, r2, [r1]
 8008198:	613b      	str	r3, [r7, #16]
   return(result);
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d1e5      	bne.n	800816c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2220      	movs	r2, #32
 80081a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80081ae:	bf00      	nop
 80081b0:	3754      	adds	r7, #84	; 0x54
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr

080081ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b084      	sub	sp, #16
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2200      	movs	r2, #0
 80081cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2200      	movs	r2, #0
 80081d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80081d4:	68f8      	ldr	r0, [r7, #12]
 80081d6:	f7ff fd61 	bl	8007c9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081da:	bf00      	nop
 80081dc:	3710      	adds	r7, #16
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80081e2:	b480      	push	{r7}
 80081e4:	b085      	sub	sp, #20
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	2b21      	cmp	r3, #33	; 0x21
 80081f4:	d13e      	bne.n	8008274 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	689b      	ldr	r3, [r3, #8]
 80081fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081fe:	d114      	bne.n	800822a <UART_Transmit_IT+0x48>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	691b      	ldr	r3, [r3, #16]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d110      	bne.n	800822a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6a1b      	ldr	r3, [r3, #32]
 800820c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	881b      	ldrh	r3, [r3, #0]
 8008212:	461a      	mov	r2, r3
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800821c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a1b      	ldr	r3, [r3, #32]
 8008222:	1c9a      	adds	r2, r3, #2
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	621a      	str	r2, [r3, #32]
 8008228:	e008      	b.n	800823c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a1b      	ldr	r3, [r3, #32]
 800822e:	1c59      	adds	r1, r3, #1
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	6211      	str	r1, [r2, #32]
 8008234:	781a      	ldrb	r2, [r3, #0]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008240:	b29b      	uxth	r3, r3
 8008242:	3b01      	subs	r3, #1
 8008244:	b29b      	uxth	r3, r3
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	4619      	mov	r1, r3
 800824a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800824c:	2b00      	cmp	r3, #0
 800824e:	d10f      	bne.n	8008270 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	68da      	ldr	r2, [r3, #12]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800825e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	68da      	ldr	r2, [r3, #12]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800826e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008270:	2300      	movs	r3, #0
 8008272:	e000      	b.n	8008276 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008274:	2302      	movs	r3, #2
  }
}
 8008276:	4618      	mov	r0, r3
 8008278:	3714      	adds	r7, #20
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr

08008282 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b082      	sub	sp, #8
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68da      	ldr	r2, [r3, #12]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008298:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2220      	movs	r2, #32
 800829e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f7fa fb68 	bl	8002978 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3708      	adds	r7, #8
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b08c      	sub	sp, #48	; 0x30
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	2b22      	cmp	r3, #34	; 0x22
 80082c4:	f040 80ab 	bne.w	800841e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082d0:	d117      	bne.n	8008302 <UART_Receive_IT+0x50>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d113      	bne.n	8008302 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80082da:	2300      	movs	r3, #0
 80082dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082f0:	b29a      	uxth	r2, r3
 80082f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082fa:	1c9a      	adds	r2, r3, #2
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	629a      	str	r2, [r3, #40]	; 0x28
 8008300:	e026      	b.n	8008350 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008306:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008308:	2300      	movs	r3, #0
 800830a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008314:	d007      	beq.n	8008326 <UART_Receive_IT+0x74>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d10a      	bne.n	8008334 <UART_Receive_IT+0x82>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	691b      	ldr	r3, [r3, #16]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d106      	bne.n	8008334 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	b2da      	uxtb	r2, r3
 800832e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008330:	701a      	strb	r2, [r3, #0]
 8008332:	e008      	b.n	8008346 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	b2db      	uxtb	r3, r3
 800833c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008340:	b2da      	uxtb	r2, r3
 8008342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008344:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800834a:	1c5a      	adds	r2, r3, #1
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008354:	b29b      	uxth	r3, r3
 8008356:	3b01      	subs	r3, #1
 8008358:	b29b      	uxth	r3, r3
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	4619      	mov	r1, r3
 800835e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008360:	2b00      	cmp	r3, #0
 8008362:	d15a      	bne.n	800841a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	68da      	ldr	r2, [r3, #12]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f022 0220 	bic.w	r2, r2, #32
 8008372:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	68da      	ldr	r2, [r3, #12]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008382:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	695a      	ldr	r2, [r3, #20]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f022 0201 	bic.w	r2, r2, #1
 8008392:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2220      	movs	r2, #32
 8008398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d135      	bne.n	8008410 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	330c      	adds	r3, #12
 80083b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	e853 3f00 	ldrex	r3, [r3]
 80083b8:	613b      	str	r3, [r7, #16]
   return(result);
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	f023 0310 	bic.w	r3, r3, #16
 80083c0:	627b      	str	r3, [r7, #36]	; 0x24
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	330c      	adds	r3, #12
 80083c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083ca:	623a      	str	r2, [r7, #32]
 80083cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ce:	69f9      	ldr	r1, [r7, #28]
 80083d0:	6a3a      	ldr	r2, [r7, #32]
 80083d2:	e841 2300 	strex	r3, r2, [r1]
 80083d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80083d8:	69bb      	ldr	r3, [r7, #24]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d1e5      	bne.n	80083aa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 0310 	and.w	r3, r3, #16
 80083e8:	2b10      	cmp	r3, #16
 80083ea:	d10a      	bne.n	8008402 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80083ec:	2300      	movs	r3, #0
 80083ee:	60fb      	str	r3, [r7, #12]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	60fb      	str	r3, [r7, #12]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	60fb      	str	r3, [r7, #12]
 8008400:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008406:	4619      	mov	r1, r3
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f7ff fc51 	bl	8007cb0 <HAL_UARTEx_RxEventCallback>
 800840e:	e002      	b.n	8008416 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f7ff fc2f 	bl	8007c74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008416:	2300      	movs	r3, #0
 8008418:	e002      	b.n	8008420 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800841a:	2300      	movs	r3, #0
 800841c:	e000      	b.n	8008420 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800841e:	2302      	movs	r3, #2
  }
}
 8008420:	4618      	mov	r0, r3
 8008422:	3730      	adds	r7, #48	; 0x30
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800842c:	b09f      	sub	sp, #124	; 0x7c
 800842e:	af00      	add	r7, sp, #0
 8008430:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	691b      	ldr	r3, [r3, #16]
 8008438:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800843c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800843e:	68d9      	ldr	r1, [r3, #12]
 8008440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	ea40 0301 	orr.w	r3, r0, r1
 8008448:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800844a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800844c:	689a      	ldr	r2, [r3, #8]
 800844e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008450:	691b      	ldr	r3, [r3, #16]
 8008452:	431a      	orrs	r2, r3
 8008454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008456:	695b      	ldr	r3, [r3, #20]
 8008458:	431a      	orrs	r2, r3
 800845a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800845c:	69db      	ldr	r3, [r3, #28]
 800845e:	4313      	orrs	r3, r2
 8008460:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800846c:	f021 010c 	bic.w	r1, r1, #12
 8008470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008476:	430b      	orrs	r3, r1
 8008478:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800847a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	695b      	ldr	r3, [r3, #20]
 8008480:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008486:	6999      	ldr	r1, [r3, #24]
 8008488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	ea40 0301 	orr.w	r3, r0, r1
 8008490:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	4bc5      	ldr	r3, [pc, #788]	; (80087ac <UART_SetConfig+0x384>)
 8008498:	429a      	cmp	r2, r3
 800849a:	d004      	beq.n	80084a6 <UART_SetConfig+0x7e>
 800849c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	4bc3      	ldr	r3, [pc, #780]	; (80087b0 <UART_SetConfig+0x388>)
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d103      	bne.n	80084ae <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80084a6:	f7fe f947 	bl	8006738 <HAL_RCC_GetPCLK2Freq>
 80084aa:	6778      	str	r0, [r7, #116]	; 0x74
 80084ac:	e002      	b.n	80084b4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80084ae:	f7fe f92f 	bl	8006710 <HAL_RCC_GetPCLK1Freq>
 80084b2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084b6:	69db      	ldr	r3, [r3, #28]
 80084b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084bc:	f040 80b6 	bne.w	800862c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80084c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084c2:	461c      	mov	r4, r3
 80084c4:	f04f 0500 	mov.w	r5, #0
 80084c8:	4622      	mov	r2, r4
 80084ca:	462b      	mov	r3, r5
 80084cc:	1891      	adds	r1, r2, r2
 80084ce:	6439      	str	r1, [r7, #64]	; 0x40
 80084d0:	415b      	adcs	r3, r3
 80084d2:	647b      	str	r3, [r7, #68]	; 0x44
 80084d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80084d8:	1912      	adds	r2, r2, r4
 80084da:	eb45 0303 	adc.w	r3, r5, r3
 80084de:	f04f 0000 	mov.w	r0, #0
 80084e2:	f04f 0100 	mov.w	r1, #0
 80084e6:	00d9      	lsls	r1, r3, #3
 80084e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80084ec:	00d0      	lsls	r0, r2, #3
 80084ee:	4602      	mov	r2, r0
 80084f0:	460b      	mov	r3, r1
 80084f2:	1911      	adds	r1, r2, r4
 80084f4:	6639      	str	r1, [r7, #96]	; 0x60
 80084f6:	416b      	adcs	r3, r5
 80084f8:	667b      	str	r3, [r7, #100]	; 0x64
 80084fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	461a      	mov	r2, r3
 8008500:	f04f 0300 	mov.w	r3, #0
 8008504:	1891      	adds	r1, r2, r2
 8008506:	63b9      	str	r1, [r7, #56]	; 0x38
 8008508:	415b      	adcs	r3, r3
 800850a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800850c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008510:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008514:	f7f7 fe58 	bl	80001c8 <__aeabi_uldivmod>
 8008518:	4602      	mov	r2, r0
 800851a:	460b      	mov	r3, r1
 800851c:	4ba5      	ldr	r3, [pc, #660]	; (80087b4 <UART_SetConfig+0x38c>)
 800851e:	fba3 2302 	umull	r2, r3, r3, r2
 8008522:	095b      	lsrs	r3, r3, #5
 8008524:	011e      	lsls	r6, r3, #4
 8008526:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008528:	461c      	mov	r4, r3
 800852a:	f04f 0500 	mov.w	r5, #0
 800852e:	4622      	mov	r2, r4
 8008530:	462b      	mov	r3, r5
 8008532:	1891      	adds	r1, r2, r2
 8008534:	6339      	str	r1, [r7, #48]	; 0x30
 8008536:	415b      	adcs	r3, r3
 8008538:	637b      	str	r3, [r7, #52]	; 0x34
 800853a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800853e:	1912      	adds	r2, r2, r4
 8008540:	eb45 0303 	adc.w	r3, r5, r3
 8008544:	f04f 0000 	mov.w	r0, #0
 8008548:	f04f 0100 	mov.w	r1, #0
 800854c:	00d9      	lsls	r1, r3, #3
 800854e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008552:	00d0      	lsls	r0, r2, #3
 8008554:	4602      	mov	r2, r0
 8008556:	460b      	mov	r3, r1
 8008558:	1911      	adds	r1, r2, r4
 800855a:	65b9      	str	r1, [r7, #88]	; 0x58
 800855c:	416b      	adcs	r3, r5
 800855e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	461a      	mov	r2, r3
 8008566:	f04f 0300 	mov.w	r3, #0
 800856a:	1891      	adds	r1, r2, r2
 800856c:	62b9      	str	r1, [r7, #40]	; 0x28
 800856e:	415b      	adcs	r3, r3
 8008570:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008572:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008576:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800857a:	f7f7 fe25 	bl	80001c8 <__aeabi_uldivmod>
 800857e:	4602      	mov	r2, r0
 8008580:	460b      	mov	r3, r1
 8008582:	4b8c      	ldr	r3, [pc, #560]	; (80087b4 <UART_SetConfig+0x38c>)
 8008584:	fba3 1302 	umull	r1, r3, r3, r2
 8008588:	095b      	lsrs	r3, r3, #5
 800858a:	2164      	movs	r1, #100	; 0x64
 800858c:	fb01 f303 	mul.w	r3, r1, r3
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	00db      	lsls	r3, r3, #3
 8008594:	3332      	adds	r3, #50	; 0x32
 8008596:	4a87      	ldr	r2, [pc, #540]	; (80087b4 <UART_SetConfig+0x38c>)
 8008598:	fba2 2303 	umull	r2, r3, r2, r3
 800859c:	095b      	lsrs	r3, r3, #5
 800859e:	005b      	lsls	r3, r3, #1
 80085a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80085a4:	441e      	add	r6, r3
 80085a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085a8:	4618      	mov	r0, r3
 80085aa:	f04f 0100 	mov.w	r1, #0
 80085ae:	4602      	mov	r2, r0
 80085b0:	460b      	mov	r3, r1
 80085b2:	1894      	adds	r4, r2, r2
 80085b4:	623c      	str	r4, [r7, #32]
 80085b6:	415b      	adcs	r3, r3
 80085b8:	627b      	str	r3, [r7, #36]	; 0x24
 80085ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80085be:	1812      	adds	r2, r2, r0
 80085c0:	eb41 0303 	adc.w	r3, r1, r3
 80085c4:	f04f 0400 	mov.w	r4, #0
 80085c8:	f04f 0500 	mov.w	r5, #0
 80085cc:	00dd      	lsls	r5, r3, #3
 80085ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80085d2:	00d4      	lsls	r4, r2, #3
 80085d4:	4622      	mov	r2, r4
 80085d6:	462b      	mov	r3, r5
 80085d8:	1814      	adds	r4, r2, r0
 80085da:	653c      	str	r4, [r7, #80]	; 0x50
 80085dc:	414b      	adcs	r3, r1
 80085de:	657b      	str	r3, [r7, #84]	; 0x54
 80085e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	461a      	mov	r2, r3
 80085e6:	f04f 0300 	mov.w	r3, #0
 80085ea:	1891      	adds	r1, r2, r2
 80085ec:	61b9      	str	r1, [r7, #24]
 80085ee:	415b      	adcs	r3, r3
 80085f0:	61fb      	str	r3, [r7, #28]
 80085f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80085f6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80085fa:	f7f7 fde5 	bl	80001c8 <__aeabi_uldivmod>
 80085fe:	4602      	mov	r2, r0
 8008600:	460b      	mov	r3, r1
 8008602:	4b6c      	ldr	r3, [pc, #432]	; (80087b4 <UART_SetConfig+0x38c>)
 8008604:	fba3 1302 	umull	r1, r3, r3, r2
 8008608:	095b      	lsrs	r3, r3, #5
 800860a:	2164      	movs	r1, #100	; 0x64
 800860c:	fb01 f303 	mul.w	r3, r1, r3
 8008610:	1ad3      	subs	r3, r2, r3
 8008612:	00db      	lsls	r3, r3, #3
 8008614:	3332      	adds	r3, #50	; 0x32
 8008616:	4a67      	ldr	r2, [pc, #412]	; (80087b4 <UART_SetConfig+0x38c>)
 8008618:	fba2 2303 	umull	r2, r3, r2, r3
 800861c:	095b      	lsrs	r3, r3, #5
 800861e:	f003 0207 	and.w	r2, r3, #7
 8008622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4432      	add	r2, r6
 8008628:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800862a:	e0b9      	b.n	80087a0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800862c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800862e:	461c      	mov	r4, r3
 8008630:	f04f 0500 	mov.w	r5, #0
 8008634:	4622      	mov	r2, r4
 8008636:	462b      	mov	r3, r5
 8008638:	1891      	adds	r1, r2, r2
 800863a:	6139      	str	r1, [r7, #16]
 800863c:	415b      	adcs	r3, r3
 800863e:	617b      	str	r3, [r7, #20]
 8008640:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008644:	1912      	adds	r2, r2, r4
 8008646:	eb45 0303 	adc.w	r3, r5, r3
 800864a:	f04f 0000 	mov.w	r0, #0
 800864e:	f04f 0100 	mov.w	r1, #0
 8008652:	00d9      	lsls	r1, r3, #3
 8008654:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008658:	00d0      	lsls	r0, r2, #3
 800865a:	4602      	mov	r2, r0
 800865c:	460b      	mov	r3, r1
 800865e:	eb12 0804 	adds.w	r8, r2, r4
 8008662:	eb43 0905 	adc.w	r9, r3, r5
 8008666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	4618      	mov	r0, r3
 800866c:	f04f 0100 	mov.w	r1, #0
 8008670:	f04f 0200 	mov.w	r2, #0
 8008674:	f04f 0300 	mov.w	r3, #0
 8008678:	008b      	lsls	r3, r1, #2
 800867a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800867e:	0082      	lsls	r2, r0, #2
 8008680:	4640      	mov	r0, r8
 8008682:	4649      	mov	r1, r9
 8008684:	f7f7 fda0 	bl	80001c8 <__aeabi_uldivmod>
 8008688:	4602      	mov	r2, r0
 800868a:	460b      	mov	r3, r1
 800868c:	4b49      	ldr	r3, [pc, #292]	; (80087b4 <UART_SetConfig+0x38c>)
 800868e:	fba3 2302 	umull	r2, r3, r3, r2
 8008692:	095b      	lsrs	r3, r3, #5
 8008694:	011e      	lsls	r6, r3, #4
 8008696:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008698:	4618      	mov	r0, r3
 800869a:	f04f 0100 	mov.w	r1, #0
 800869e:	4602      	mov	r2, r0
 80086a0:	460b      	mov	r3, r1
 80086a2:	1894      	adds	r4, r2, r2
 80086a4:	60bc      	str	r4, [r7, #8]
 80086a6:	415b      	adcs	r3, r3
 80086a8:	60fb      	str	r3, [r7, #12]
 80086aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80086ae:	1812      	adds	r2, r2, r0
 80086b0:	eb41 0303 	adc.w	r3, r1, r3
 80086b4:	f04f 0400 	mov.w	r4, #0
 80086b8:	f04f 0500 	mov.w	r5, #0
 80086bc:	00dd      	lsls	r5, r3, #3
 80086be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80086c2:	00d4      	lsls	r4, r2, #3
 80086c4:	4622      	mov	r2, r4
 80086c6:	462b      	mov	r3, r5
 80086c8:	1814      	adds	r4, r2, r0
 80086ca:	64bc      	str	r4, [r7, #72]	; 0x48
 80086cc:	414b      	adcs	r3, r1
 80086ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	4618      	mov	r0, r3
 80086d6:	f04f 0100 	mov.w	r1, #0
 80086da:	f04f 0200 	mov.w	r2, #0
 80086de:	f04f 0300 	mov.w	r3, #0
 80086e2:	008b      	lsls	r3, r1, #2
 80086e4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80086e8:	0082      	lsls	r2, r0, #2
 80086ea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80086ee:	f7f7 fd6b 	bl	80001c8 <__aeabi_uldivmod>
 80086f2:	4602      	mov	r2, r0
 80086f4:	460b      	mov	r3, r1
 80086f6:	4b2f      	ldr	r3, [pc, #188]	; (80087b4 <UART_SetConfig+0x38c>)
 80086f8:	fba3 1302 	umull	r1, r3, r3, r2
 80086fc:	095b      	lsrs	r3, r3, #5
 80086fe:	2164      	movs	r1, #100	; 0x64
 8008700:	fb01 f303 	mul.w	r3, r1, r3
 8008704:	1ad3      	subs	r3, r2, r3
 8008706:	011b      	lsls	r3, r3, #4
 8008708:	3332      	adds	r3, #50	; 0x32
 800870a:	4a2a      	ldr	r2, [pc, #168]	; (80087b4 <UART_SetConfig+0x38c>)
 800870c:	fba2 2303 	umull	r2, r3, r2, r3
 8008710:	095b      	lsrs	r3, r3, #5
 8008712:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008716:	441e      	add	r6, r3
 8008718:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800871a:	4618      	mov	r0, r3
 800871c:	f04f 0100 	mov.w	r1, #0
 8008720:	4602      	mov	r2, r0
 8008722:	460b      	mov	r3, r1
 8008724:	1894      	adds	r4, r2, r2
 8008726:	603c      	str	r4, [r7, #0]
 8008728:	415b      	adcs	r3, r3
 800872a:	607b      	str	r3, [r7, #4]
 800872c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008730:	1812      	adds	r2, r2, r0
 8008732:	eb41 0303 	adc.w	r3, r1, r3
 8008736:	f04f 0400 	mov.w	r4, #0
 800873a:	f04f 0500 	mov.w	r5, #0
 800873e:	00dd      	lsls	r5, r3, #3
 8008740:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008744:	00d4      	lsls	r4, r2, #3
 8008746:	4622      	mov	r2, r4
 8008748:	462b      	mov	r3, r5
 800874a:	eb12 0a00 	adds.w	sl, r2, r0
 800874e:	eb43 0b01 	adc.w	fp, r3, r1
 8008752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	4618      	mov	r0, r3
 8008758:	f04f 0100 	mov.w	r1, #0
 800875c:	f04f 0200 	mov.w	r2, #0
 8008760:	f04f 0300 	mov.w	r3, #0
 8008764:	008b      	lsls	r3, r1, #2
 8008766:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800876a:	0082      	lsls	r2, r0, #2
 800876c:	4650      	mov	r0, sl
 800876e:	4659      	mov	r1, fp
 8008770:	f7f7 fd2a 	bl	80001c8 <__aeabi_uldivmod>
 8008774:	4602      	mov	r2, r0
 8008776:	460b      	mov	r3, r1
 8008778:	4b0e      	ldr	r3, [pc, #56]	; (80087b4 <UART_SetConfig+0x38c>)
 800877a:	fba3 1302 	umull	r1, r3, r3, r2
 800877e:	095b      	lsrs	r3, r3, #5
 8008780:	2164      	movs	r1, #100	; 0x64
 8008782:	fb01 f303 	mul.w	r3, r1, r3
 8008786:	1ad3      	subs	r3, r2, r3
 8008788:	011b      	lsls	r3, r3, #4
 800878a:	3332      	adds	r3, #50	; 0x32
 800878c:	4a09      	ldr	r2, [pc, #36]	; (80087b4 <UART_SetConfig+0x38c>)
 800878e:	fba2 2303 	umull	r2, r3, r2, r3
 8008792:	095b      	lsrs	r3, r3, #5
 8008794:	f003 020f 	and.w	r2, r3, #15
 8008798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4432      	add	r2, r6
 800879e:	609a      	str	r2, [r3, #8]
}
 80087a0:	bf00      	nop
 80087a2:	377c      	adds	r7, #124	; 0x7c
 80087a4:	46bd      	mov	sp, r7
 80087a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087aa:	bf00      	nop
 80087ac:	40011000 	.word	0x40011000
 80087b0:	40011400 	.word	0x40011400
 80087b4:	51eb851f 	.word	0x51eb851f

080087b8 <__errno>:
 80087b8:	4b01      	ldr	r3, [pc, #4]	; (80087c0 <__errno+0x8>)
 80087ba:	6818      	ldr	r0, [r3, #0]
 80087bc:	4770      	bx	lr
 80087be:	bf00      	nop
 80087c0:	20000110 	.word	0x20000110

080087c4 <__libc_init_array>:
 80087c4:	b570      	push	{r4, r5, r6, lr}
 80087c6:	4d0d      	ldr	r5, [pc, #52]	; (80087fc <__libc_init_array+0x38>)
 80087c8:	4c0d      	ldr	r4, [pc, #52]	; (8008800 <__libc_init_array+0x3c>)
 80087ca:	1b64      	subs	r4, r4, r5
 80087cc:	10a4      	asrs	r4, r4, #2
 80087ce:	2600      	movs	r6, #0
 80087d0:	42a6      	cmp	r6, r4
 80087d2:	d109      	bne.n	80087e8 <__libc_init_array+0x24>
 80087d4:	4d0b      	ldr	r5, [pc, #44]	; (8008804 <__libc_init_array+0x40>)
 80087d6:	4c0c      	ldr	r4, [pc, #48]	; (8008808 <__libc_init_array+0x44>)
 80087d8:	f000 f858 	bl	800888c <_init>
 80087dc:	1b64      	subs	r4, r4, r5
 80087de:	10a4      	asrs	r4, r4, #2
 80087e0:	2600      	movs	r6, #0
 80087e2:	42a6      	cmp	r6, r4
 80087e4:	d105      	bne.n	80087f2 <__libc_init_array+0x2e>
 80087e6:	bd70      	pop	{r4, r5, r6, pc}
 80087e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80087ec:	4798      	blx	r3
 80087ee:	3601      	adds	r6, #1
 80087f0:	e7ee      	b.n	80087d0 <__libc_init_array+0xc>
 80087f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80087f6:	4798      	blx	r3
 80087f8:	3601      	adds	r6, #1
 80087fa:	e7f2      	b.n	80087e2 <__libc_init_array+0x1e>
 80087fc:	08008a2c 	.word	0x08008a2c
 8008800:	08008a2c 	.word	0x08008a2c
 8008804:	08008a2c 	.word	0x08008a2c
 8008808:	08008a30 	.word	0x08008a30

0800880c <memcpy>:
 800880c:	440a      	add	r2, r1
 800880e:	4291      	cmp	r1, r2
 8008810:	f100 33ff 	add.w	r3, r0, #4294967295
 8008814:	d100      	bne.n	8008818 <memcpy+0xc>
 8008816:	4770      	bx	lr
 8008818:	b510      	push	{r4, lr}
 800881a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800881e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008822:	4291      	cmp	r1, r2
 8008824:	d1f9      	bne.n	800881a <memcpy+0xe>
 8008826:	bd10      	pop	{r4, pc}

08008828 <memset>:
 8008828:	4402      	add	r2, r0
 800882a:	4603      	mov	r3, r0
 800882c:	4293      	cmp	r3, r2
 800882e:	d100      	bne.n	8008832 <memset+0xa>
 8008830:	4770      	bx	lr
 8008832:	f803 1b01 	strb.w	r1, [r3], #1
 8008836:	e7f9      	b.n	800882c <memset+0x4>

08008838 <sqrtf>:
 8008838:	b508      	push	{r3, lr}
 800883a:	ed2d 8b02 	vpush	{d8}
 800883e:	eeb0 8a40 	vmov.f32	s16, s0
 8008842:	f000 f81f 	bl	8008884 <__ieee754_sqrtf>
 8008846:	4b0d      	ldr	r3, [pc, #52]	; (800887c <sqrtf+0x44>)
 8008848:	f993 3000 	ldrsb.w	r3, [r3]
 800884c:	3301      	adds	r3, #1
 800884e:	d011      	beq.n	8008874 <sqrtf+0x3c>
 8008850:	eeb4 8a48 	vcmp.f32	s16, s16
 8008854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008858:	d60c      	bvs.n	8008874 <sqrtf+0x3c>
 800885a:	eddf 8a09 	vldr	s17, [pc, #36]	; 8008880 <sqrtf+0x48>
 800885e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008866:	d505      	bpl.n	8008874 <sqrtf+0x3c>
 8008868:	f7ff ffa6 	bl	80087b8 <__errno>
 800886c:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8008870:	2321      	movs	r3, #33	; 0x21
 8008872:	6003      	str	r3, [r0, #0]
 8008874:	ecbd 8b02 	vpop	{d8}
 8008878:	bd08      	pop	{r3, pc}
 800887a:	bf00      	nop
 800887c:	20000174 	.word	0x20000174
 8008880:	00000000 	.word	0x00000000

08008884 <__ieee754_sqrtf>:
 8008884:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008888:	4770      	bx	lr
	...

0800888c <_init>:
 800888c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800888e:	bf00      	nop
 8008890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008892:	bc08      	pop	{r3}
 8008894:	469e      	mov	lr, r3
 8008896:	4770      	bx	lr

08008898 <_fini>:
 8008898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800889a:	bf00      	nop
 800889c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800889e:	bc08      	pop	{r3}
 80088a0:	469e      	mov	lr, r3
 80088a2:	4770      	bx	lr
