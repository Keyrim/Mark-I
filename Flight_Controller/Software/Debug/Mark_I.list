
Mark_I.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000828c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08008414  08008414  00018414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008848  08008848  00020434  2**0
                  CONTENTS
  4 .ARM          00000008  08008848  08008848  00018848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008850  08008850  00020434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008850  08008850  00018850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008854  08008854  00018854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000434  20000000  08008858  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020434  2**0
                  CONTENTS
 10 .bss          00000d50  20000434  20000434  00020434  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001184  20001184  00020434  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bfda  00000000  00000000  00020464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d21  00000000  00000000  0003c43e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c8  00000000  00000000  00040160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001148  00000000  00000000  00041428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022d55  00000000  00000000  00042570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b57a  00000000  00000000  000652c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4f9f  00000000  00000000  0008083f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001457de  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ef8  00000000  00000000  00145834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000434 	.word	0x20000434
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080083fc 	.word	0x080083fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000438 	.word	0x20000438
 80001c4:	080083fc 	.word	0x080083fc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <COMPLEMENTARY_FILTER_Init>:

/* Static function prototype */
static void angle_180(float * x);

void COMPLEMENTARY_FILTER_Init(float * gyro, float * acc)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	6039      	str	r1, [r7, #0]
	filter.gyro = gyro;
 80004ca:	4a0a      	ldr	r2, [pc, #40]	; (80004f4 <COMPLEMENTARY_FILTER_Init+0x34>)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	6013      	str	r3, [r2, #0]
	filter.gyro_raw = NULL;
 80004d0:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <COMPLEMENTARY_FILTER_Init+0x34>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	605a      	str	r2, [r3, #4]
	filter.acc = acc;
 80004d6:	4a07      	ldr	r2, [pc, #28]	; (80004f4 <COMPLEMENTARY_FILTER_Init+0x34>)
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	6093      	str	r3, [r2, #8]
	filter.alpha_gyro = ALPHA;
 80004dc:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <COMPLEMENTARY_FILTER_Init+0x34>)
 80004de:	4a06      	ldr	r2, [pc, #24]	; (80004f8 <COMPLEMENTARY_FILTER_Init+0x38>)
 80004e0:	62da      	str	r2, [r3, #44]	; 0x2c
	filter.alpha_acc = 1.0f - ALPHA;
 80004e2:	4b04      	ldr	r3, [pc, #16]	; (80004f4 <COMPLEMENTARY_FILTER_Init+0x34>)
 80004e4:	4a05      	ldr	r2, [pc, #20]	; (80004fc <COMPLEMENTARY_FILTER_Init+0x3c>)
 80004e6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80004e8:	bf00      	nop
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr
 80004f4:	20000000 	.word	0x20000000
 80004f8:	3f7ae148 	.word	0x3f7ae148
 80004fc:	3ca3d700 	.word	0x3ca3d700

08000500 <COMPLEMENTARY_FILTER_Process>:

void COMPLEMENTARY_FILTER_Process(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af00      	add	r7, sp, #0
	/* Total acceleration */
	float acc_total = filter.acc[0] * filter.acc[0];
 8000506:	4baf      	ldr	r3, [pc, #700]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000508:	689b      	ldr	r3, [r3, #8]
 800050a:	ed93 7a00 	vldr	s14, [r3]
 800050e:	4bad      	ldr	r3, [pc, #692]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000510:	689b      	ldr	r3, [r3, #8]
 8000512:	edd3 7a00 	vldr	s15, [r3]
 8000516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800051a:	edc7 7a05 	vstr	s15, [r7, #20]
	acc_total += filter.acc[1] * filter.acc[1];
 800051e:	4ba9      	ldr	r3, [pc, #676]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000520:	689b      	ldr	r3, [r3, #8]
 8000522:	3304      	adds	r3, #4
 8000524:	ed93 7a00 	vldr	s14, [r3]
 8000528:	4ba6      	ldr	r3, [pc, #664]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800052a:	689b      	ldr	r3, [r3, #8]
 800052c:	3304      	adds	r3, #4
 800052e:	edd3 7a00 	vldr	s15, [r3]
 8000532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000536:	ed97 7a05 	vldr	s14, [r7, #20]
 800053a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800053e:	edc7 7a05 	vstr	s15, [r7, #20]
	acc_total += filter.acc[2] * filter.acc[2];
 8000542:	4ba0      	ldr	r3, [pc, #640]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000544:	689b      	ldr	r3, [r3, #8]
 8000546:	3308      	adds	r3, #8
 8000548:	ed93 7a00 	vldr	s14, [r3]
 800054c:	4b9d      	ldr	r3, [pc, #628]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800054e:	689b      	ldr	r3, [r3, #8]
 8000550:	3308      	adds	r3, #8
 8000552:	edd3 7a00 	vldr	s15, [r3]
 8000556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800055a:	ed97 7a05 	vldr	s14, [r7, #20]
 800055e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000562:	edc7 7a05 	vstr	s15, [r7, #20]
	acc_total = sqrtf(acc_total);
 8000566:	ed97 0a05 	vldr	s0, [r7, #20]
 800056a:	f007 f907 	bl	800777c <sqrtf>
 800056e:	ed87 0a05 	vstr	s0, [r7, #20]

	/* Guess the angles according to the accelerometer and some trigonometry */
	if(acc_total)
 8000572:	edd7 7a05 	vldr	s15, [r7, #20]
 8000576:	eef5 7a40 	vcmp.f32	s15, #0.0
 800057a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800057e:	d06c      	beq.n	800065a <COMPLEMENTARY_FILTER_Process+0x15a>
	{
		float inv_acc_total = 1.0f / acc_total;
 8000580:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000584:	ed97 7a05 	vldr	s14, [r7, #20]
 8000588:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800058c:	edc7 7a04 	vstr	s15, [r7, #16]
		if(absolute(filter.acc[axe_eROLL]) < acc_total)
 8000590:	4b8c      	ldr	r3, [pc, #560]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000592:	689b      	ldr	r3, [r3, #8]
 8000594:	edd3 7a00 	vldr	s15, [r3]
 8000598:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800059c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005a0:	db04      	blt.n	80005ac <COMPLEMENTARY_FILTER_Process+0xac>
 80005a2:	4b88      	ldr	r3, [pc, #544]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80005a4:	689b      	ldr	r3, [r3, #8]
 80005a6:	edd3 7a00 	vldr	s15, [r3]
 80005aa:	e005      	b.n	80005b8 <COMPLEMENTARY_FILTER_Process+0xb8>
 80005ac:	4b85      	ldr	r3, [pc, #532]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80005ae:	689b      	ldr	r3, [r3, #8]
 80005b0:	edd3 7a00 	vldr	s15, [r3]
 80005b4:	eef1 7a67 	vneg.f32	s15, s15
 80005b8:	ed97 7a05 	vldr	s14, [r7, #20]
 80005bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005c4:	d516      	bpl.n	80005f4 <COMPLEMENTARY_FILTER_Process+0xf4>
		{
			filter.angle_acc[axe_ePITCH] = 	-asinf(filter.acc[axe_eROLL] * inv_acc_total) * RAD_TO_DEG;
 80005c6:	4b7f      	ldr	r3, [pc, #508]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	ed93 7a00 	vldr	s14, [r3]
 80005ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80005d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005d6:	eeb0 0a67 	vmov.f32	s0, s15
 80005da:	f007 f89d 	bl	8007718 <asinf>
 80005de:	eef0 7a40 	vmov.f32	s15, s0
 80005e2:	eef1 7a67 	vneg.f32	s15, s15
 80005e6:	ed9f 7a78 	vldr	s14, [pc, #480]	; 80007c8 <COMPLEMENTARY_FILTER_Process+0x2c8>
 80005ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005ee:	4b75      	ldr	r3, [pc, #468]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80005f0:	edc3 7a07 	vstr	s15, [r3, #28]
		}
		if(absolute(filter.acc[axe_ePITCH]) < acc_total)
 80005f4:	4b73      	ldr	r3, [pc, #460]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	3304      	adds	r3, #4
 80005fa:	edd3 7a00 	vldr	s15, [r3]
 80005fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000606:	db04      	blt.n	8000612 <COMPLEMENTARY_FILTER_Process+0x112>
 8000608:	4b6e      	ldr	r3, [pc, #440]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800060a:	689b      	ldr	r3, [r3, #8]
 800060c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000610:	e006      	b.n	8000620 <COMPLEMENTARY_FILTER_Process+0x120>
 8000612:	4b6c      	ldr	r3, [pc, #432]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	3304      	adds	r3, #4
 8000618:	edd3 7a00 	vldr	s15, [r3]
 800061c:	eef1 7a67 	vneg.f32	s15, s15
 8000620:	ed97 7a05 	vldr	s14, [r7, #20]
 8000624:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800062c:	d515      	bpl.n	800065a <COMPLEMENTARY_FILTER_Process+0x15a>
		{
			filter.angle_acc[axe_eROLL] = 	asinf(filter.acc[axe_ePITCH] * inv_acc_total) * RAD_TO_DEG;
 800062e:	4b65      	ldr	r3, [pc, #404]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000630:	689b      	ldr	r3, [r3, #8]
 8000632:	3304      	adds	r3, #4
 8000634:	ed93 7a00 	vldr	s14, [r3]
 8000638:	edd7 7a04 	vldr	s15, [r7, #16]
 800063c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000640:	eeb0 0a67 	vmov.f32	s0, s15
 8000644:	f007 f868 	bl	8007718 <asinf>
 8000648:	eef0 7a40 	vmov.f32	s15, s0
 800064c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80007c8 <COMPLEMENTARY_FILTER_Process+0x2c8>
 8000650:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000654:	4b5b      	ldr	r3, [pc, #364]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000656:	edc3 7a06 	vstr	s15, [r3, #24]
		}
	}

	if(!filter.used_once)
 800065a:	4b5a      	ldr	r3, [pc, #360]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800065c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000660:	2b00      	cmp	r3, #0
 8000662:	d110      	bne.n	8000686 <COMPLEMENTARY_FILTER_Process+0x186>
	{
		filter.used_once = TRUE;
 8000664:	4b57      	ldr	r3, [pc, #348]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000666:	2201      	movs	r2, #1
 8000668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		filter.angle[axe_eROLL] = filter.angle_acc[axe_eROLL];
 800066c:	4b55      	ldr	r3, [pc, #340]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a54      	ldr	r2, [pc, #336]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000672:	60d3      	str	r3, [r2, #12]
		filter.angle[axe_ePITCH] = filter.angle_acc[axe_ePITCH];
 8000674:	4b53      	ldr	r3, [pc, #332]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000676:	69db      	ldr	r3, [r3, #28]
 8000678:	4a52      	ldr	r2, [pc, #328]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800067a:	6113      	str	r3, [r2, #16]
		filter.angle[axe_eYAW] = 0;
 800067c:	4b51      	ldr	r3, [pc, #324]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800067e:	f04f 0200 	mov.w	r2, #0
 8000682:	615a      	str	r2, [r3, #20]
		/* Finally, the complementary filter */
		filter.angle[axe_eROLL] = filter.alpha_gyro * filter.angle[axe_eROLL] + filter.alpha_acc * filter.angle_acc[axe_eROLL];
		filter.angle[axe_ePITCH] = filter.alpha_gyro * filter.angle[axe_ePITCH] + filter.alpha_acc * filter.angle_acc[axe_ePITCH];
	}

}
 8000684:	e09a      	b.n	80007bc <COMPLEMENTARY_FILTER_Process+0x2bc>
		float dx = filter.gyro[axe_eROLL] * filter.period;
 8000686:	4b4f      	ldr	r3, [pc, #316]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	ed93 7a00 	vldr	s14, [r3]
 800068e:	4b4d      	ldr	r3, [pc, #308]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000690:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000694:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000698:	edc7 7a03 	vstr	s15, [r7, #12]
		float dy = filter.gyro[axe_ePITCH] * filter.period;
 800069c:	4b49      	ldr	r3, [pc, #292]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	3304      	adds	r3, #4
 80006a2:	ed93 7a00 	vldr	s14, [r3]
 80006a6:	4b47      	ldr	r3, [pc, #284]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006a8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80006ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006b0:	edc7 7a02 	vstr	s15, [r7, #8]
		float dz = filter.gyro[axe_eYAW] * filter.period;
 80006b4:	4b43      	ldr	r3, [pc, #268]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	3308      	adds	r3, #8
 80006ba:	ed93 7a00 	vldr	s14, [r3]
 80006be:	4b41      	ldr	r3, [pc, #260]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006c0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80006c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006c8:	edc7 7a01 	vstr	s15, [r7, #4]
		filter.angle[axe_eROLL] += dx;
 80006cc:	4b3d      	ldr	r3, [pc, #244]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006ce:	ed93 7a03 	vldr	s14, [r3, #12]
 80006d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80006d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006da:	4b3a      	ldr	r3, [pc, #232]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006dc:	edc3 7a03 	vstr	s15, [r3, #12]
		filter.angle[axe_ePITCH] += dy;
 80006e0:	4b38      	ldr	r3, [pc, #224]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006e2:	ed93 7a04 	vldr	s14, [r3, #16]
 80006e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80006ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006ee:	4b35      	ldr	r3, [pc, #212]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006f0:	edc3 7a04 	vstr	s15, [r3, #16]
		filter.angle[axe_eYAW] += dz;
 80006f4:	4b33      	ldr	r3, [pc, #204]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006f6:	ed93 7a05 	vldr	s14, [r3, #20]
 80006fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80006fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000702:	4b30      	ldr	r3, [pc, #192]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000704:	edc3 7a05 	vstr	s15, [r3, #20]
		float sin_dz = sinf(DEG_TO_RAD * dz);
 8000708:	edd7 7a01 	vldr	s15, [r7, #4]
 800070c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80007cc <COMPLEMENTARY_FILTER_Process+0x2cc>
 8000710:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000714:	eeb0 0a67 	vmov.f32	s0, s15
 8000718:	f006 ffbc 	bl	8007694 <sinf>
 800071c:	ed87 0a00 	vstr	s0, [r7]
		filter.angle[axe_eROLL] += sin_dz * filter.angle[axe_ePITCH];
 8000720:	4b28      	ldr	r3, [pc, #160]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000722:	ed93 7a03 	vldr	s14, [r3, #12]
 8000726:	4b27      	ldr	r3, [pc, #156]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000728:	edd3 6a04 	vldr	s13, [r3, #16]
 800072c:	edd7 7a00 	vldr	s15, [r7]
 8000730:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000734:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000738:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800073a:	edc3 7a03 	vstr	s15, [r3, #12]
		filter.angle[axe_ePITCH] -= sin_dz * filter.angle[axe_eROLL];
 800073e:	4b21      	ldr	r3, [pc, #132]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000740:	ed93 7a04 	vldr	s14, [r3, #16]
 8000744:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000746:	edd3 6a03 	vldr	s13, [r3, #12]
 800074a:	edd7 7a00 	vldr	s15, [r7]
 800074e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000752:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000756:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000758:	edc3 7a04 	vstr	s15, [r3, #16]
		angle_180(&filter.angle[axe_eROLL]);
 800075c:	481c      	ldr	r0, [pc, #112]	; (80007d0 <COMPLEMENTARY_FILTER_Process+0x2d0>)
 800075e:	f000 f83b 	bl	80007d8 <angle_180>
		angle_180(&filter.angle[axe_ePITCH]);
 8000762:	481c      	ldr	r0, [pc, #112]	; (80007d4 <COMPLEMENTARY_FILTER_Process+0x2d4>)
 8000764:	f000 f838 	bl	80007d8 <angle_180>
		filter.angle[axe_eROLL] = filter.alpha_gyro * filter.angle[axe_eROLL] + filter.alpha_acc * filter.angle_acc[axe_eROLL];
 8000768:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800076a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000770:	edd3 7a03 	vldr	s15, [r3, #12]
 8000774:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800077a:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000780:	edd3 7a06 	vldr	s15, [r3, #24]
 8000784:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000788:	ee77 7a27 	vadd.f32	s15, s14, s15
 800078c:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800078e:	edc3 7a03 	vstr	s15, [r3, #12]
		filter.angle[axe_ePITCH] = filter.alpha_gyro * filter.angle[axe_ePITCH] + filter.alpha_acc * filter.angle_acc[axe_ePITCH];
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000794:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000798:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800079a:	edd3 7a04 	vldr	s15, [r3, #16]
 800079e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80007a4:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80007aa:	edd3 7a07 	vldr	s15, [r3, #28]
 80007ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007b6:	4b03      	ldr	r3, [pc, #12]	; (80007c4 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80007b8:	edc3 7a04 	vstr	s15, [r3, #16]
}
 80007bc:	bf00      	nop
 80007be:	3718      	adds	r7, #24
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000000 	.word	0x20000000
 80007c8:	42652ee1 	.word	0x42652ee1
 80007cc:	3c8efa34 	.word	0x3c8efa34
 80007d0:	2000000c 	.word	0x2000000c
 80007d4:	20000010 	.word	0x20000010

080007d8 <angle_180>:


static void angle_180(float * x)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	if(*x > 180)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	edd3 7a00 	vldr	s15, [r3]
 80007e6:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000840 <angle_180+0x68>
 80007ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007f2:	dd0a      	ble.n	800080a <angle_180+0x32>
	{
		*x -= 360;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	edd3 7a00 	vldr	s15, [r3]
 80007fa:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000844 <angle_180+0x6c>
 80007fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	edc3 7a00 	vstr	s15, [r3]
	}
	else if( *x < -180)
	{
		*x += 360 ;
	}
}
 8000808:	e014      	b.n	8000834 <angle_180+0x5c>
	else if( *x < -180)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	edd3 7a00 	vldr	s15, [r3]
 8000810:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000848 <angle_180+0x70>
 8000814:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800081c:	d400      	bmi.n	8000820 <angle_180+0x48>
}
 800081e:	e009      	b.n	8000834 <angle_180+0x5c>
		*x += 360 ;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	edd3 7a00 	vldr	s15, [r3]
 8000826:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000844 <angle_180+0x6c>
 800082a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	edc3 7a00 	vstr	s15, [r3]
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	43340000 	.word	0x43340000
 8000844:	43b40000 	.word	0x43b40000
 8000848:	c3340000 	.word	0xc3340000

0800084c <DATA_LOGGER_Init>:
/*
 * @brief Declare every data
 * @param mark1_ pointer to a system_t structure
 */
void DATA_LOGGER_Init(system_t * mark1_)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	mark1 = mark1_;
 8000854:	4a2e      	ldr	r2, [pc, #184]	; (8000910 <DATA_LOGGER_Init+0xc4>)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6013      	str	r3, [r2, #0]
	/* -------------- Outputs ----------------- */
	DEFINE_DATA(data_id_eMCU_LOAD,
 800085a:	4b2e      	ldr	r3, [pc, #184]	; (8000914 <DATA_LOGGER_Init+0xc8>)
 800085c:	2203      	movs	r2, #3
 800085e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000862:	4b2b      	ldr	r3, [pc, #172]	; (8000910 <DATA_LOGGER_Init+0xc4>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	461a      	mov	r2, r3
 8000868:	4b2a      	ldr	r3, [pc, #168]	; (8000914 <DATA_LOGGER_Init+0xc8>)
 800086a:	641a      	str	r2, [r3, #64]	; 0x40
 800086c:	4b29      	ldr	r3, [pc, #164]	; (8000914 <DATA_LOGGER_Init+0xc8>)
 800086e:	222a      	movs	r2, #42	; 0x2a
 8000870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000874:	4b27      	ldr	r3, [pc, #156]	; (8000914 <DATA_LOGGER_Init+0xc8>)
 8000876:	4a28      	ldr	r2, [pc, #160]	; (8000918 <DATA_LOGGER_Init+0xcc>)
 8000878:	649a      	str	r2, [r3, #72]	; 0x48
 800087a:	4b26      	ldr	r3, [pc, #152]	; (8000914 <DATA_LOGGER_Init+0xc8>)
 800087c:	2208      	movs	r2, #8
 800087e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8000882:	4b24      	ldr	r3, [pc, #144]	; (8000914 <DATA_LOGGER_Init+0xc8>)
 8000884:	2201      	movs	r2, #1
 8000886:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				(void*)&mark1->software.cpu_load,
				data_format_e16B_FLOAT_2D,
				"Mcu Load",
				use_format_eAS_OUTPUT);
	/* -------------- Inputs ----------------- */
	DEFINE_DATA(data_id_eCONFIG_REQUEST,
 800088a:	4b22      	ldr	r3, [pc, #136]	; (8000914 <DATA_LOGGER_Init+0xc8>)
 800088c:	2200      	movs	r2, #0
 800088e:	721a      	strb	r2, [r3, #8]
 8000890:	4b20      	ldr	r3, [pc, #128]	; (8000914 <DATA_LOGGER_Init+0xc8>)
 8000892:	2200      	movs	r2, #0
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <DATA_LOGGER_Init+0xc8>)
 8000898:	2200      	movs	r2, #0
 800089a:	725a      	strb	r2, [r3, #9]
 800089c:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <DATA_LOGGER_Init+0xc8>)
 800089e:	4a1f      	ldr	r2, [pc, #124]	; (800091c <DATA_LOGGER_Init+0xd0>)
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <DATA_LOGGER_Init+0xc8>)
 80008a4:	2212      	movs	r2, #18
 80008a6:	741a      	strb	r2, [r3, #16]
 80008a8:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <DATA_LOGGER_Init+0xc8>)
 80008aa:	2202      	movs	r2, #2
 80008ac:	745a      	strb	r2, [r3, #17]
				NULL,
				data_format_e0B_BUTTON,
				"Send Configuration",
				use_format_eAS_INPUT);
	DEFINE_DATA(data_id_eSTART_TRANSFER,
 80008ae:	4b19      	ldr	r3, [pc, #100]	; (8000914 <DATA_LOGGER_Init+0xc8>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	771a      	strb	r2, [r3, #28]
 80008b4:	4b17      	ldr	r3, [pc, #92]	; (8000914 <DATA_LOGGER_Init+0xc8>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]
 80008ba:	4b16      	ldr	r3, [pc, #88]	; (8000914 <DATA_LOGGER_Init+0xc8>)
 80008bc:	2200      	movs	r2, #0
 80008be:	775a      	strb	r2, [r3, #29]
 80008c0:	4b14      	ldr	r3, [pc, #80]	; (8000914 <DATA_LOGGER_Init+0xc8>)
 80008c2:	4a17      	ldr	r2, [pc, #92]	; (8000920 <DATA_LOGGER_Init+0xd4>)
 80008c4:	621a      	str	r2, [r3, #32]
 80008c6:	4b13      	ldr	r3, [pc, #76]	; (8000914 <DATA_LOGGER_Init+0xc8>)
 80008c8:	220e      	movs	r2, #14
 80008ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <DATA_LOGGER_Init+0xc8>)
 80008d0:	2202      	movs	r2, #2
 80008d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				NULL,
				data_format_e0B_BUTTON,
				"Start Transfer",
				use_format_eAS_INPUT);
	DEFINE_DATA(data_id_eSTOP_TRANSFER,
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <DATA_LOGGER_Init+0xc8>)
 80008d8:	2202      	movs	r2, #2
 80008da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80008de:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <DATA_LOGGER_Init+0xc8>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80008e4:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <DATA_LOGGER_Init+0xc8>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80008ec:	4b09      	ldr	r3, [pc, #36]	; (8000914 <DATA_LOGGER_Init+0xc8>)
 80008ee:	4a0d      	ldr	r2, [pc, #52]	; (8000924 <DATA_LOGGER_Init+0xd8>)
 80008f0:	635a      	str	r2, [r3, #52]	; 0x34
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <DATA_LOGGER_Init+0xc8>)
 80008f4:	220d      	movs	r2, #13
 80008f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <DATA_LOGGER_Init+0xc8>)
 80008fc:	2202      	movs	r2, #2
 80008fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
				NULL,
				data_format_e0B_BUTTON,
				"Stop Transfer",
				use_format_eAS_INPUT);
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	20000450 	.word	0x20000450
 8000914:	20000454 	.word	0x20000454
 8000918:	08008414 	.word	0x08008414
 800091c:	08008420 	.word	0x08008420
 8000920:	08008434 	.word	0x08008434
 8000924:	08008444 	.word	0x08008444

08000928 <DATA_LOGGER_Start>:
/*
 * @brief Request to start logging data
 */
void DATA_LOGGER_Start()
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
	start_flag = TRUE;
 800092c:	4b03      	ldr	r3, [pc, #12]	; (800093c <DATA_LOGGER_Start+0x14>)
 800092e:	2201      	movs	r2, #1
 8000930:	701a      	strb	r2, [r3, #0]
}
 8000932:	bf00      	nop
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	200004a4 	.word	0x200004a4

08000940 <DATA_LOGGER_Stop>:
/*
 * @brief Request to stop logging data
 */
void DATA_LOGGER_Stop()
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
	stop_flag = TRUE;
 8000944:	4b03      	ldr	r3, [pc, #12]	; (8000954 <DATA_LOGGER_Stop+0x14>)
 8000946:	2201      	movs	r2, #1
 8000948:	701a      	strb	r2, [r3, #0]
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	200004a6 	.word	0x200004a6

08000958 <DATA_LOGGER_Main>:

/*
 * @brief Call the state machine and the uart parser
 */
void DATA_LOGGER_Main(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	state_machine();
 800095c:	f000 fab0 	bl	8000ec0 <state_machine>
	parse_uart();
 8000960:	f000 fbb4 	bl	80010cc <parse_uart>
}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}

08000968 <DATA_LOGGER_Reception>:
/*
 * @brief Parse input data
 * @param input_buffer Buffer to use to parse the data
 */
void DATA_LOGGER_Reception(uint8_t * input_buffer)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	uint8_t id = input_buffer[0];
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp_uint_16 = 0 ;
 8000976:	2300      	movs	r3, #0
 8000978:	81bb      	strh	r3, [r7, #12]
	int16_t tmp_int_16 = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	817b      	strh	r3, [r7, #10]
	switch(data_list[id].format)
 800097e:	7bfa      	ldrb	r2, [r7, #15]
 8000980:	4954      	ldr	r1, [pc, #336]	; (8000ad4 <DATA_LOGGER_Reception+0x16c>)
 8000982:	4613      	mov	r3, r2
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	4413      	add	r3, r2
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	440b      	add	r3, r1
 800098c:	3309      	adds	r3, #9
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b2d      	cmp	r3, #45	; 0x2d
 8000992:	f200 809a 	bhi.w	8000aca <DATA_LOGGER_Reception+0x162>
 8000996:	a201      	add	r2, pc, #4	; (adr r2, 800099c <DATA_LOGGER_Reception+0x34>)
 8000998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800099c:	08000a55 	.word	0x08000a55
 80009a0:	08000acb 	.word	0x08000acb
 80009a4:	08000acb 	.word	0x08000acb
 80009a8:	08000acb 	.word	0x08000acb
 80009ac:	08000acb 	.word	0x08000acb
 80009b0:	08000acb 	.word	0x08000acb
 80009b4:	08000acb 	.word	0x08000acb
 80009b8:	08000acb 	.word	0x08000acb
 80009bc:	08000acb 	.word	0x08000acb
 80009c0:	08000acb 	.word	0x08000acb
 80009c4:	08000acb 	.word	0x08000acb
 80009c8:	08000acb 	.word	0x08000acb
 80009cc:	08000acb 	.word	0x08000acb
 80009d0:	08000acb 	.word	0x08000acb
 80009d4:	08000acb 	.word	0x08000acb
 80009d8:	08000acb 	.word	0x08000acb
 80009dc:	08000acb 	.word	0x08000acb
 80009e0:	08000acb 	.word	0x08000acb
 80009e4:	08000acb 	.word	0x08000acb
 80009e8:	08000acb 	.word	0x08000acb
 80009ec:	08000acb 	.word	0x08000acb
 80009f0:	08000a81 	.word	0x08000a81
 80009f4:	08000acb 	.word	0x08000acb
 80009f8:	08000acb 	.word	0x08000acb
 80009fc:	08000acb 	.word	0x08000acb
 8000a00:	08000acb 	.word	0x08000acb
 8000a04:	08000acb 	.word	0x08000acb
 8000a08:	08000acb 	.word	0x08000acb
 8000a0c:	08000acb 	.word	0x08000acb
 8000a10:	08000acb 	.word	0x08000acb
 8000a14:	08000acb 	.word	0x08000acb
 8000a18:	08000acb 	.word	0x08000acb
 8000a1c:	08000acb 	.word	0x08000acb
 8000a20:	08000acb 	.word	0x08000acb
 8000a24:	08000acb 	.word	0x08000acb
 8000a28:	08000acb 	.word	0x08000acb
 8000a2c:	08000acb 	.word	0x08000acb
 8000a30:	08000acb 	.word	0x08000acb
 8000a34:	08000acb 	.word	0x08000acb
 8000a38:	08000acb 	.word	0x08000acb
 8000a3c:	08000acb 	.word	0x08000acb
 8000a40:	08000acb 	.word	0x08000acb
 8000a44:	08000acb 	.word	0x08000acb
 8000a48:	08000acb 	.word	0x08000acb
 8000a4c:	08000aad 	.word	0x08000aad
 8000a50:	08000a8f 	.word	0x08000a8f
	{
		case data_format_e0B_BUTTON:
			/* Link an action to each id */
			switch(id)
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	d00d      	beq.n	8000a76 <DATA_LOGGER_Reception+0x10e>
 8000a5a:	2b02      	cmp	r3, #2
 8000a5c:	dc0e      	bgt.n	8000a7c <DATA_LOGGER_Reception+0x114>
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d002      	beq.n	8000a68 <DATA_LOGGER_Reception+0x100>
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d004      	beq.n	8000a70 <DATA_LOGGER_Reception+0x108>
			{
				default:
					break;
 8000a66:	e009      	b.n	8000a7c <DATA_LOGGER_Reception+0x114>
				case data_id_eCONFIG_REQUEST:
					send_config_flag = TRUE;
 8000a68:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <DATA_LOGGER_Reception+0x170>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	701a      	strb	r2, [r3, #0]
					break;
 8000a6e:	e006      	b.n	8000a7e <DATA_LOGGER_Reception+0x116>
				case data_id_eSTART_TRANSFER:
					DATA_LOGGER_Start();
 8000a70:	f7ff ff5a 	bl	8000928 <DATA_LOGGER_Start>
					break;
 8000a74:	e003      	b.n	8000a7e <DATA_LOGGER_Reception+0x116>
				case data_id_eSTOP_TRANSFER:
					DATA_LOGGER_Stop();
 8000a76:	f7ff ff63 	bl	8000940 <DATA_LOGGER_Stop>
					break;
 8000a7a:	e000      	b.n	8000a7e <DATA_LOGGER_Reception+0x116>
					break;
 8000a7c:	bf00      	nop
			}
			break;
 8000a7e:	e025      	b.n	8000acc <DATA_LOGGER_Reception+0x164>
		case data_format_e8B_FLOAT_0D:
			break;
		case data_format_e8B_FLOAT_1D:
			break;
		case data_format_e8B_PWM:
			tmp_uint_16 = 4*input_buffer[1];
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3301      	adds	r3, #1
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	81bb      	strh	r3, [r7, #12]
			break;
 8000a8c:	e01e      	b.n	8000acc <DATA_LOGGER_Reception+0x164>
		case data_format_e16B_INT16:
			tmp_int_16 = (int16_t)input_buffer[1] << 8;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	3301      	adds	r3, #1
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	021b      	lsls	r3, r3, #8
 8000a96:	817b      	strh	r3, [r7, #10]
			tmp_int_16 += (int16_t)input_buffer[2];
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3302      	adds	r3, #2
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	b29a      	uxth	r2, r3
 8000aa0:	897b      	ldrh	r3, [r7, #10]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	817b      	strh	r3, [r7, #10]
			switch(id)
			{
				default:
					break;
 8000aa8:	bf00      	nop
			}

			break;
 8000aaa:	e00f      	b.n	8000acc <DATA_LOGGER_Reception+0x164>
		case data_format_e16B_UINT16:
			tmp_uint_16 = (uint16_t)input_buffer[1] << 8;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	021b      	lsls	r3, r3, #8
 8000ab6:	81bb      	strh	r3, [r7, #12]
			tmp_uint_16 += (uint16_t)input_buffer[2];
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3302      	adds	r3, #2
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	b29a      	uxth	r2, r3
 8000ac0:	89bb      	ldrh	r3, [r7, #12]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	81bb      	strh	r3, [r7, #12]
			switch(id)
			{
				default:
					break;
 8000ac6:	bf00      	nop
			}

		case data_format_e16B_FLOAT_1D:
			break;
 8000ac8:	e000      	b.n	8000acc <DATA_LOGGER_Reception+0x164>
		default:
			break;
 8000aca:	bf00      	nop

	}
}
 8000acc:	bf00      	nop
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000454 	.word	0x20000454
 8000ad8:	200004a5 	.word	0x200004a5

08000adc <DATA_LOGGER_Get_Data_Value>:
 * @param id Id of the data
 * @param buffer Buffer array
 * @return Number of bytes written
 */
uint8_t DATA_LOGGER_Get_Data_Value(data_id_e id, uint8_t * buffer)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b087      	sub	sp, #28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	73fb      	strb	r3, [r7, #15]

	/* Local temporary variables */
	int16_t tmp_16 = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	82fb      	strh	r3, [r7, #22]
	float tmp_float = 0;
 8000aec:	f04f 0300 	mov.w	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]

	/* First byte is reserved for the id */
	buffer[0] = id ;
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	7bfa      	ldrb	r2, [r7, #15]
 8000af6:	701a      	strb	r2, [r3, #0]
	switch(data_list[id].format)
 8000af8:	7bfa      	ldrb	r2, [r7, #15]
 8000afa:	498f      	ldr	r1, [pc, #572]	; (8000d38 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000afc:	4613      	mov	r3, r2
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	4413      	add	r3, r2
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	440b      	add	r3, r1
 8000b06:	3309      	adds	r3, #9
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	3b14      	subs	r3, #20
 8000b0c:	2b19      	cmp	r3, #25
 8000b0e:	f200 80fb 	bhi.w	8000d08 <DATA_LOGGER_Get_Data_Value+0x22c>
 8000b12:	a201      	add	r2, pc, #4	; (adr r2, 8000b18 <DATA_LOGGER_Get_Data_Value+0x3c>)
 8000b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b18:	08000b81 	.word	0x08000b81
 8000b1c:	08000d09 	.word	0x08000d09
 8000b20:	08000d09 	.word	0x08000d09
 8000b24:	08000b9d 	.word	0x08000b9d
 8000b28:	08000d09 	.word	0x08000d09
 8000b2c:	08000d09 	.word	0x08000d09
 8000b30:	08000d09 	.word	0x08000d09
 8000b34:	08000d09 	.word	0x08000d09
 8000b38:	08000d09 	.word	0x08000d09
 8000b3c:	08000d09 	.word	0x08000d09
 8000b40:	08000d09 	.word	0x08000d09
 8000b44:	08000d09 	.word	0x08000d09
 8000b48:	08000d09 	.word	0x08000d09
 8000b4c:	08000d09 	.word	0x08000d09
 8000b50:	08000d09 	.word	0x08000d09
 8000b54:	08000d09 	.word	0x08000d09
 8000b58:	08000d09 	.word	0x08000d09
 8000b5c:	08000d09 	.word	0x08000d09
 8000b60:	08000d09 	.word	0x08000d09
 8000b64:	08000d09 	.word	0x08000d09
 8000b68:	08000d09 	.word	0x08000d09
 8000b6c:	08000bcd 	.word	0x08000bcd
 8000b70:	08000c15 	.word	0x08000c15
 8000b74:	08000c5d 	.word	0x08000c5d
 8000b78:	08000ca5 	.word	0x08000ca5
 8000b7c:	08000cd7 	.word	0x08000cd7
	{
		case data_format_e8B:
			buffer[1] = *(uint8_t*)data_list[id].data ;
 8000b80:	7bfa      	ldrb	r2, [r7, #15]
 8000b82:	496d      	ldr	r1, [pc, #436]	; (8000d38 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000b84:	4613      	mov	r3, r2
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	4413      	add	r3, r2
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	440b      	add	r3, r1
 8000b8e:	3304      	adds	r3, #4
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	3301      	adds	r3, #1
 8000b96:	7812      	ldrb	r2, [r2, #0]
 8000b98:	701a      	strb	r2, [r3, #0]
			break;
 8000b9a:	e0b6      	b.n	8000d0a <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e8B_PWM:
			break;
		case data_format_e8B_FLOAT_0D:
			tmp_float = *(float*)data_list[id].data ;
 8000b9c:	7bfa      	ldrb	r2, [r7, #15]
 8000b9e:	4966      	ldr	r1, [pc, #408]	; (8000d38 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	4413      	add	r3, r2
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	440b      	add	r3, r1
 8000baa:	3304      	adds	r3, #4
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	613b      	str	r3, [r7, #16]
			buffer[1] = (int8_t)tmp_float;
 8000bb2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bba:	edc7 7a01 	vstr	s15, [r7, #4]
 8000bbe:	793b      	ldrb	r3, [r7, #4]
 8000bc0:	b25a      	sxtb	r2, r3
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	b2d2      	uxtb	r2, r2
 8000bc8:	701a      	strb	r2, [r3, #0]
			break;
 8000bca:	e09e      	b.n	8000d0a <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e8B_FLOAT_1D:
			break;
		case data_format_e16B:
			break;
		case data_format_e16B_FLOAT_1D:
			tmp_float = *(float*)data_list[id].data;
 8000bcc:	7bfa      	ldrb	r2, [r7, #15]
 8000bce:	495a      	ldr	r1, [pc, #360]	; (8000d38 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	4413      	add	r3, r2
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	440b      	add	r3, r1
 8000bda:	3304      	adds	r3, #4
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 10;
 8000be2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000be6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000bea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bf2:	ee17 3a90 	vmov	r3, s15
 8000bf6:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8000bf8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000bfc:	121b      	asrs	r3, r3, #8
 8000bfe:	b21a      	sxth	r2, r3
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	3301      	adds	r3, #1
 8000c04:	b2d2      	uxtb	r2, r2
 8000c06:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	3302      	adds	r3, #2
 8000c0c:	8afa      	ldrh	r2, [r7, #22]
 8000c0e:	b2d2      	uxtb	r2, r2
 8000c10:	701a      	strb	r2, [r3, #0]
			break;
 8000c12:	e07a      	b.n	8000d0a <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e16B_FLOAT_2D:
			tmp_float = *(float*)data_list[id].data;
 8000c14:	7bfa      	ldrb	r2, [r7, #15]
 8000c16:	4948      	ldr	r1, [pc, #288]	; (8000d38 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000c18:	4613      	mov	r3, r2
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	4413      	add	r3, r2
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	440b      	add	r3, r1
 8000c22:	3304      	adds	r3, #4
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 100;
 8000c2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c2e:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8000d3c <DATA_LOGGER_Get_Data_Value+0x260>
 8000c32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c3a:	ee17 3a90 	vmov	r3, s15
 8000c3e:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8000c40:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c44:	121b      	asrs	r3, r3, #8
 8000c46:	b21a      	sxth	r2, r3
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	b2d2      	uxtb	r2, r2
 8000c4e:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	3302      	adds	r3, #2
 8000c54:	8afa      	ldrh	r2, [r7, #22]
 8000c56:	b2d2      	uxtb	r2, r2
 8000c58:	701a      	strb	r2, [r3, #0]
			break;
 8000c5a:	e056      	b.n	8000d0a <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e16B_FLOAT_3D:
			tmp_float = *(float*)data_list[id].data;
 8000c5c:	7bfa      	ldrb	r2, [r7, #15]
 8000c5e:	4936      	ldr	r1, [pc, #216]	; (8000d38 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000c60:	4613      	mov	r3, r2
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	4413      	add	r3, r2
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	440b      	add	r3, r1
 8000c6a:	3304      	adds	r3, #4
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 1000;
 8000c72:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c76:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8000d40 <DATA_LOGGER_Get_Data_Value+0x264>
 8000c7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c82:	ee17 3a90 	vmov	r3, s15
 8000c86:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8000c88:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c8c:	121b      	asrs	r3, r3, #8
 8000c8e:	b21a      	sxth	r2, r3
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	3301      	adds	r3, #1
 8000c94:	b2d2      	uxtb	r2, r2
 8000c96:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	3302      	adds	r3, #2
 8000c9c:	8afa      	ldrh	r2, [r7, #22]
 8000c9e:	b2d2      	uxtb	r2, r2
 8000ca0:	701a      	strb	r2, [r3, #0]
			break;
 8000ca2:	e032      	b.n	8000d0a <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e16B_UINT16:
			tmp_16 = *(uint16_t*)data_list[id].data ;
 8000ca4:	7bfa      	ldrb	r2, [r7, #15]
 8000ca6:	4924      	ldr	r1, [pc, #144]	; (8000d38 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000ca8:	4613      	mov	r3, r2
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	4413      	add	r3, r2
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	440b      	add	r3, r1
 8000cb2:	3304      	adds	r3, #4
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8000cba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000cbe:	121b      	asrs	r3, r3, #8
 8000cc0:	b21a      	sxth	r2, r3
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	b2d2      	uxtb	r2, r2
 8000cc8:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	3302      	adds	r3, #2
 8000cce:	8afa      	ldrh	r2, [r7, #22]
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	701a      	strb	r2, [r3, #0]
			break;
 8000cd4:	e019      	b.n	8000d0a <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e16B_INT16:
			tmp_16 = *(int16_t*)data_list[id].data ;
 8000cd6:	7bfa      	ldrb	r2, [r7, #15]
 8000cd8:	4917      	ldr	r1, [pc, #92]	; (8000d38 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000cda:	4613      	mov	r3, r2
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	4413      	add	r3, r2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	440b      	add	r3, r1
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	881b      	ldrh	r3, [r3, #0]
 8000cea:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8000cec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000cf0:	121b      	asrs	r3, r3, #8
 8000cf2:	b21a      	sxth	r2, r3
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	b2d2      	uxtb	r2, r2
 8000cfa:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	3302      	adds	r3, #2
 8000d00:	8afa      	ldrh	r2, [r7, #22]
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	701a      	strb	r2, [r3, #0]
			break;
 8000d06:	e000      	b.n	8000d0a <DATA_LOGGER_Get_Data_Value+0x22e>
		default:
			break;
 8000d08:	bf00      	nop
	}
	/* Length of the data array */
	return (data_list[id].format / 20) + 1;
 8000d0a:	7bfa      	ldrb	r2, [r7, #15]
 8000d0c:	490a      	ldr	r1, [pc, #40]	; (8000d38 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000d0e:	4613      	mov	r3, r2
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	4413      	add	r3, r2
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	440b      	add	r3, r1
 8000d18:	3309      	adds	r3, #9
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	4a09      	ldr	r2, [pc, #36]	; (8000d44 <DATA_LOGGER_Get_Data_Value+0x268>)
 8000d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d22:	091b      	lsrs	r3, r3, #4
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	3301      	adds	r3, #1
 8000d28:	b2db      	uxtb	r3, r3
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	371c      	adds	r7, #28
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000454 	.word	0x20000454
 8000d3c:	42c80000 	.word	0x42c80000
 8000d40:	447a0000 	.word	0x447a0000
 8000d44:	cccccccd 	.word	0xcccccccd

08000d48 <DATA_LOGGER_Get_Data_Config>:
 * @param id Id of the data
 * @param buffer Buffer array to write the configuration into
 * @return Number of bytes we wrote in the buffer
 */
uint8_t DATA_LOGGER_Get_Data_Config(data_id_e id, uint8_t * buffer)
{
 8000d48:	b590      	push	{r4, r7, lr}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	6039      	str	r1, [r7, #0]
 8000d52:	71fb      	strb	r3, [r7, #7]
	/* We send a configuration so it must start with 0xFF */
	buffer[0] = 0xFF;
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	22ff      	movs	r2, #255	; 0xff
 8000d58:	701a      	strb	r2, [r3, #0]
	/* Then we put the length of the name */
	buffer[1] = data_list[id].len_name;
 8000d5a:	79fa      	ldrb	r2, [r7, #7]
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	1c59      	adds	r1, r3, #1
 8000d60:	4828      	ldr	r0, [pc, #160]	; (8000e04 <DATA_LOGGER_Get_Data_Config+0xbc>)
 8000d62:	4613      	mov	r3, r2
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	4413      	add	r3, r2
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	4403      	add	r3, r0
 8000d6c:	3310      	adds	r3, #16
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	700b      	strb	r3, [r1, #0]
	/* Then we write the data format */
	buffer[2] = data_list[id].format;
 8000d72:	79fa      	ldrb	r2, [r7, #7]
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	1c99      	adds	r1, r3, #2
 8000d78:	4822      	ldr	r0, [pc, #136]	; (8000e04 <DATA_LOGGER_Get_Data_Config+0xbc>)
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	4413      	add	r3, r2
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	4403      	add	r3, r0
 8000d84:	3309      	adds	r3, #9
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	700b      	strb	r3, [r1, #0]
	/* Then the id of the data */
	buffer[3] = id;
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	3303      	adds	r3, #3
 8000d8e:	79fa      	ldrb	r2, [r7, #7]
 8000d90:	701a      	strb	r2, [r3, #0]
	/* When the data is used as output, we add 128 to the id */
	if(data_list[id].use_format == use_format_eAS_INPUT)
 8000d92:	79fa      	ldrb	r2, [r7, #7]
 8000d94:	491b      	ldr	r1, [pc, #108]	; (8000e04 <DATA_LOGGER_Get_Data_Config+0xbc>)
 8000d96:	4613      	mov	r3, r2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	4413      	add	r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	440b      	add	r3, r1
 8000da0:	3311      	adds	r3, #17
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d107      	bne.n	8000db8 <DATA_LOGGER_Get_Data_Config+0x70>
	{
		buffer[3] += 128 ;
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	3303      	adds	r3, #3
 8000dac:	781a      	ldrb	r2, [r3, #0]
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	3303      	adds	r3, #3
 8000db2:	3a80      	subs	r2, #128	; 0x80
 8000db4:	b2d2      	uxtb	r2, r2
 8000db6:	701a      	strb	r2, [r3, #0]
	}
	/* Finally we write the name */
	memcpy(&buffer[4], data_list[id].name, data_list[id].len_name);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	1d18      	adds	r0, r3, #4
 8000dbc:	79fa      	ldrb	r2, [r7, #7]
 8000dbe:	4911      	ldr	r1, [pc, #68]	; (8000e04 <DATA_LOGGER_Get_Data_Config+0xbc>)
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	4413      	add	r3, r2
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	440b      	add	r3, r1
 8000dca:	330c      	adds	r3, #12
 8000dcc:	6819      	ldr	r1, [r3, #0]
 8000dce:	79fa      	ldrb	r2, [r7, #7]
 8000dd0:	4c0c      	ldr	r4, [pc, #48]	; (8000e04 <DATA_LOGGER_Get_Data_Config+0xbc>)
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	4413      	add	r3, r2
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	4423      	add	r3, r4
 8000ddc:	3310      	adds	r3, #16
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	461a      	mov	r2, r3
 8000de2:	f006 fc27 	bl	8007634 <memcpy>

	return 4 + data_list[id].len_name ;
 8000de6:	79fa      	ldrb	r2, [r7, #7]
 8000de8:	4906      	ldr	r1, [pc, #24]	; (8000e04 <DATA_LOGGER_Get_Data_Config+0xbc>)
 8000dea:	4613      	mov	r3, r2
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	4413      	add	r3, r2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	440b      	add	r3, r1
 8000df4:	3310      	adds	r3, #16
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	3304      	adds	r3, #4
 8000dfa:	b2db      	uxtb	r3, r3
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd90      	pop	{r4, r7, pc}
 8000e04:	20000454 	.word	0x20000454

08000e08 <DATA_LOGGER_Get_Data>:
 * @brief Get data
 * @param id Id of the data
 * @return pointer to the data structure with the corresponding ID
 */
data_t * DATA_LOGGER_Get_Data(data_id_e id)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
	return &data_list[id];
 8000e12:	79fa      	ldrb	r2, [r7, #7]
 8000e14:	4613      	mov	r3, r2
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	4413      	add	r3, r2
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	4a03      	ldr	r2, [pc, #12]	; (8000e2c <DATA_LOGGER_Get_Data+0x24>)
 8000e1e:	4413      	add	r3, r2
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	20000454 	.word	0x20000454

08000e30 <push_data_to_uart>:
 * @brief Add the start byte and checksum to a message
 * @param buffer Data array to send
 * @param len Number of bytes to send
 */
void push_data_to_uart(uint8_t * buffer, uint8_t len)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b090      	sub	sp, #64	; 0x40
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	70fb      	strb	r3, [r7, #3]
	uint8_t buffer_new[50];
	uint32_t checksum = 0 ;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
	buffer_new[0] = '$';
 8000e40:	2324      	movs	r3, #36	; 0x24
 8000e42:	723b      	strb	r3, [r7, #8]
	for(uint8_t b = 0; b < len; b++)
 8000e44:	2300      	movs	r3, #0
 8000e46:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8000e4a:	e01d      	b.n	8000e88 <push_data_to_uart+0x58>
	{
		buffer_new[1 + b] = buffer[b];
 8000e4c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	441a      	add	r2, r3
 8000e54:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000e58:	3301      	adds	r3, #1
 8000e5a:	7812      	ldrb	r2, [r2, #0]
 8000e5c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000e60:	440b      	add	r3, r1
 8000e62:	f803 2c38 	strb.w	r2, [r3, #-56]
		checksum += (uint32_t)buffer_new[1 + b];
 8000e66:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000e70:	4413      	add	r3, r2
 8000e72:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8000e76:	461a      	mov	r2, r3
 8000e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e7a:	4413      	add	r3, r2
 8000e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(uint8_t b = 0; b < len; b++)
 8000e7e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000e82:	3301      	adds	r3, #1
 8000e84:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8000e88:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8000e8c:	78fb      	ldrb	r3, [r7, #3]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d3dc      	bcc.n	8000e4c <push_data_to_uart+0x1c>
	}
	buffer_new[1 + len] = (uint8_t)(checksum % 256) ;
 8000e92:	78fb      	ldrb	r3, [r7, #3]
 8000e94:	3301      	adds	r3, #1
 8000e96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000e98:	b2d2      	uxtb	r2, r2
 8000e9a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000e9e:	440b      	add	r3, r1
 8000ea0:	f803 2c38 	strb.w	r2, [r3, #-56]
	UART_Transmit(uart_eTELEMETRY, buffer_new, len+2);
 8000ea4:	78fb      	ldrb	r3, [r7, #3]
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	3302      	adds	r3, #2
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	f107 0308 	add.w	r3, r7, #8
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f000 ffd8 	bl	8001e68 <UART_Transmit>
}
 8000eb8:	bf00      	nop
 8000eba:	3740      	adds	r7, #64	; 0x40
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <state_machine>:

/*
 * @brief data logger state machine
 */
static void state_machine(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
	static data_logger_state_e state = data_logger_state_eIDLE;
	static data_logger_state_e previous_state = data_logger_state_eTRANSMIT_CONFIG ;
	bool_e entrance = previous_state != state ;
 8000ec6:	4b74      	ldr	r3, [pc, #464]	; (8001098 <state_machine+0x1d8>)
 8000ec8:	781a      	ldrb	r2, [r3, #0]
 8000eca:	4b74      	ldr	r3, [pc, #464]	; (800109c <state_machine+0x1dc>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	bf14      	ite	ne
 8000ed2:	2301      	movne	r3, #1
 8000ed4:	2300      	moveq	r3, #0
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	71bb      	strb	r3, [r7, #6]
	previous_state = state ;
 8000eda:	4b70      	ldr	r3, [pc, #448]	; (800109c <state_machine+0x1dc>)
 8000edc:	781a      	ldrb	r2, [r3, #0]
 8000ede:	4b6e      	ldr	r3, [pc, #440]	; (8001098 <state_machine+0x1d8>)
 8000ee0:	701a      	strb	r2, [r3, #0]
	switch(state)
 8000ee2:	4b6e      	ldr	r3, [pc, #440]	; (800109c <state_machine+0x1dc>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	f000 8092 	beq.w	8001010 <state_machine+0x150>
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	f300 80ce 	bgt.w	800108e <state_machine+0x1ce>
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d002      	beq.n	8000efc <state_machine+0x3c>
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d043      	beq.n	8000f82 <state_machine+0xc2>
					push_data_to_uart(tmp, tmp_len);
				}
			}
			break;
	}
}
 8000efa:	e0c8      	b.n	800108e <state_machine+0x1ce>
			if(entrance)
 8000efc:	79bb      	ldrb	r3, [r7, #6]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d003      	beq.n	8000f0a <state_machine+0x4a>
				SCHEDULER_reschedule_task(task_ids_eDATA_LOGGER, PERIODE_PING);
 8000f02:	4967      	ldr	r1, [pc, #412]	; (80010a0 <state_machine+0x1e0>)
 8000f04:	2002      	movs	r0, #2
 8000f06:	f000 fb25 	bl	8001554 <SCHEDULER_reschedule_task>
			tmp_len = DATA_LOGGER_Get_Data_Config(data_id_eCONFIG_REQUEST, tmp);
 8000f0a:	4966      	ldr	r1, [pc, #408]	; (80010a4 <state_machine+0x1e4>)
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	f7ff ff1b 	bl	8000d48 <DATA_LOGGER_Get_Data_Config>
 8000f12:	4603      	mov	r3, r0
 8000f14:	461a      	mov	r2, r3
 8000f16:	4b64      	ldr	r3, [pc, #400]	; (80010a8 <state_machine+0x1e8>)
 8000f18:	701a      	strb	r2, [r3, #0]
			push_data_to_uart(tmp, tmp_len);
 8000f1a:	4b63      	ldr	r3, [pc, #396]	; (80010a8 <state_machine+0x1e8>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4860      	ldr	r0, [pc, #384]	; (80010a4 <state_machine+0x1e4>)
 8000f22:	f7ff ff85 	bl	8000e30 <push_data_to_uart>
			if(send_config_flag)
 8000f26:	4b61      	ldr	r3, [pc, #388]	; (80010ac <state_machine+0x1ec>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d01a      	beq.n	8000f64 <state_machine+0xa4>
				start_flag = FALSE;
 8000f2e:	4b60      	ldr	r3, [pc, #384]	; (80010b0 <state_machine+0x1f0>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]
				stop_flag = FALSE;
 8000f34:	4b5f      	ldr	r3, [pc, #380]	; (80010b4 <state_machine+0x1f4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	701a      	strb	r2, [r3, #0]
				send_config_flag = FALSE;
 8000f3a:	4b5c      	ldr	r3, [pc, #368]	; (80010ac <state_machine+0x1ec>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
				if(config_not_sent)
 8000f40:	4b5d      	ldr	r3, [pc, #372]	; (80010b8 <state_machine+0x1f8>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d009      	beq.n	8000f5c <state_machine+0x9c>
					id_init_counter = 0;
 8000f48:	4b5c      	ldr	r3, [pc, #368]	; (80010bc <state_machine+0x1fc>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
					is_any_data_used = FALSE;
 8000f4e:	4b5c      	ldr	r3, [pc, #368]	; (80010c0 <state_machine+0x200>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	701a      	strb	r2, [r3, #0]
					state = data_logger_state_eTRANSMIT_CONFIG;
 8000f54:	4b51      	ldr	r3, [pc, #324]	; (800109c <state_machine+0x1dc>)
 8000f56:	2201      	movs	r2, #1
 8000f58:	701a      	strb	r2, [r3, #0]
			break;
 8000f5a:	e097      	b.n	800108c <state_machine+0x1cc>
					state = data_logger_state_eLOG;
 8000f5c:	4b4f      	ldr	r3, [pc, #316]	; (800109c <state_machine+0x1dc>)
 8000f5e:	2202      	movs	r2, #2
 8000f60:	701a      	strb	r2, [r3, #0]
			break;
 8000f62:	e093      	b.n	800108c <state_machine+0x1cc>
			else if(start_flag)
 8000f64:	4b52      	ldr	r3, [pc, #328]	; (80010b0 <state_machine+0x1f0>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	f000 808f 	beq.w	800108c <state_machine+0x1cc>
				start_flag = FALSE;
 8000f6e:	4b50      	ldr	r3, [pc, #320]	; (80010b0 <state_machine+0x1f0>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
				stop_flag = FALSE;
 8000f74:	4b4f      	ldr	r3, [pc, #316]	; (80010b4 <state_machine+0x1f4>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]
				state = data_logger_state_eLOG;
 8000f7a:	4b48      	ldr	r3, [pc, #288]	; (800109c <state_machine+0x1dc>)
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	701a      	strb	r2, [r3, #0]
			break;
 8000f80:	e084      	b.n	800108c <state_machine+0x1cc>
			if(entrance)
 8000f82:	79bb      	ldrb	r3, [r7, #6]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d00a      	beq.n	8000f9e <state_machine+0xde>
				SCHEDULER_reschedule_task(task_ids_eDATA_LOGGER, PERIODE_CONFIG_SEND);
 8000f88:	494e      	ldr	r1, [pc, #312]	; (80010c4 <state_machine+0x204>)
 8000f8a:	2002      	movs	r0, #2
 8000f8c:	f000 fae2 	bl	8001554 <SCHEDULER_reschedule_task>
			while(data_list[id_init_counter].use_format == use_format_eNOT_USED && id_init_counter < data_id_eCOUNT)
 8000f90:	e005      	b.n	8000f9e <state_machine+0xde>
				id_init_counter ++ ;
 8000f92:	4b4a      	ldr	r3, [pc, #296]	; (80010bc <state_machine+0x1fc>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	3301      	adds	r3, #1
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	4b48      	ldr	r3, [pc, #288]	; (80010bc <state_machine+0x1fc>)
 8000f9c:	701a      	strb	r2, [r3, #0]
			while(data_list[id_init_counter].use_format == use_format_eNOT_USED && id_init_counter < data_id_eCOUNT)
 8000f9e:	4b47      	ldr	r3, [pc, #284]	; (80010bc <state_machine+0x1fc>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4a48      	ldr	r2, [pc, #288]	; (80010c8 <state_machine+0x208>)
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	440b      	add	r3, r1
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	4413      	add	r3, r2
 8000fb0:	3311      	adds	r3, #17
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d103      	bne.n	8000fc0 <state_machine+0x100>
 8000fb8:	4b40      	ldr	r3, [pc, #256]	; (80010bc <state_machine+0x1fc>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b03      	cmp	r3, #3
 8000fbe:	d9e8      	bls.n	8000f92 <state_machine+0xd2>
			if(id_init_counter < data_id_eCOUNT)
 8000fc0:	4b3e      	ldr	r3, [pc, #248]	; (80010bc <state_machine+0x1fc>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b03      	cmp	r3, #3
 8000fc6:	d817      	bhi.n	8000ff8 <state_machine+0x138>
				is_any_data_used = TRUE;
 8000fc8:	4b3d      	ldr	r3, [pc, #244]	; (80010c0 <state_machine+0x200>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	701a      	strb	r2, [r3, #0]
				tmp_len = DATA_LOGGER_Get_Data_Config(id_init_counter++, tmp);
 8000fce:	4b3b      	ldr	r3, [pc, #236]	; (80010bc <state_machine+0x1fc>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	1c5a      	adds	r2, r3, #1
 8000fd4:	b2d1      	uxtb	r1, r2
 8000fd6:	4a39      	ldr	r2, [pc, #228]	; (80010bc <state_machine+0x1fc>)
 8000fd8:	7011      	strb	r1, [r2, #0]
 8000fda:	4932      	ldr	r1, [pc, #200]	; (80010a4 <state_machine+0x1e4>)
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff feb3 	bl	8000d48 <DATA_LOGGER_Get_Data_Config>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b30      	ldr	r3, [pc, #192]	; (80010a8 <state_machine+0x1e8>)
 8000fe8:	701a      	strb	r2, [r3, #0]
				push_data_to_uart(tmp, tmp_len);
 8000fea:	4b2f      	ldr	r3, [pc, #188]	; (80010a8 <state_machine+0x1e8>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	4619      	mov	r1, r3
 8000ff0:	482c      	ldr	r0, [pc, #176]	; (80010a4 <state_machine+0x1e4>)
 8000ff2:	f7ff ff1d 	bl	8000e30 <push_data_to_uart>
			break;
 8000ff6:	e04a      	b.n	800108e <state_machine+0x1ce>
				if(is_any_data_used)
 8000ff8:	4b31      	ldr	r3, [pc, #196]	; (80010c0 <state_machine+0x200>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d003      	beq.n	8001008 <state_machine+0x148>
					state = data_logger_state_eLOG ;
 8001000:	4b26      	ldr	r3, [pc, #152]	; (800109c <state_machine+0x1dc>)
 8001002:	2202      	movs	r2, #2
 8001004:	701a      	strb	r2, [r3, #0]
			break;
 8001006:	e042      	b.n	800108e <state_machine+0x1ce>
					state = data_logger_state_eIDLE ;
 8001008:	4b24      	ldr	r3, [pc, #144]	; (800109c <state_machine+0x1dc>)
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
			break;
 800100e:	e03e      	b.n	800108e <state_machine+0x1ce>
			if(entrance)
 8001010:	79bb      	ldrb	r3, [r7, #6]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d004      	beq.n	8001020 <state_machine+0x160>
				SCHEDULER_reschedule_task(task_ids_eDATA_LOGGER, PERIODE_SEND);
 8001016:	f242 7110 	movw	r1, #10000	; 0x2710
 800101a:	2002      	movs	r0, #2
 800101c:	f000 fa9a 	bl	8001554 <SCHEDULER_reschedule_task>
			if(stop_flag)
 8001020:	4b24      	ldr	r3, [pc, #144]	; (80010b4 <state_machine+0x1f4>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d002      	beq.n	800102e <state_machine+0x16e>
				state = data_logger_state_eIDLE;
 8001028:	4b1c      	ldr	r3, [pc, #112]	; (800109c <state_machine+0x1dc>)
 800102a:	2200      	movs	r2, #0
 800102c:	701a      	strb	r2, [r3, #0]
			for(uint8_t d = 0; d < data_id_eCOUNT; d++)
 800102e:	2300      	movs	r3, #0
 8001030:	71fb      	strb	r3, [r7, #7]
 8001032:	e027      	b.n	8001084 <state_machine+0x1c4>
				if(data_list[d].use_format == use_format_eAS_OUTPUT && (data_list[d].data != NULL))
 8001034:	79fa      	ldrb	r2, [r7, #7]
 8001036:	4924      	ldr	r1, [pc, #144]	; (80010c8 <state_machine+0x208>)
 8001038:	4613      	mov	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	440b      	add	r3, r1
 8001042:	3311      	adds	r3, #17
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d119      	bne.n	800107e <state_machine+0x1be>
 800104a:	79fa      	ldrb	r2, [r7, #7]
 800104c:	491e      	ldr	r1, [pc, #120]	; (80010c8 <state_machine+0x208>)
 800104e:	4613      	mov	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	440b      	add	r3, r1
 8001058:	3304      	adds	r3, #4
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00e      	beq.n	800107e <state_machine+0x1be>
					tmp_len = DATA_LOGGER_Get_Data_Value(d, tmp);
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	4910      	ldr	r1, [pc, #64]	; (80010a4 <state_machine+0x1e4>)
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff fd39 	bl	8000adc <DATA_LOGGER_Get_Data_Value>
 800106a:	4603      	mov	r3, r0
 800106c:	461a      	mov	r2, r3
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <state_machine+0x1e8>)
 8001070:	701a      	strb	r2, [r3, #0]
					push_data_to_uart(tmp, tmp_len);
 8001072:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <state_machine+0x1e8>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	4619      	mov	r1, r3
 8001078:	480a      	ldr	r0, [pc, #40]	; (80010a4 <state_machine+0x1e4>)
 800107a:	f7ff fed9 	bl	8000e30 <push_data_to_uart>
			for(uint8_t d = 0; d < data_id_eCOUNT; d++)
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	3301      	adds	r3, #1
 8001082:	71fb      	strb	r3, [r7, #7]
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	2b03      	cmp	r3, #3
 8001088:	d9d4      	bls.n	8001034 <state_machine+0x174>
			break;
 800108a:	e000      	b.n	800108e <state_machine+0x1ce>
			break;
 800108c:	bf00      	nop
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000039 	.word	0x20000039
 800109c:	200004dd 	.word	0x200004dd
 80010a0:	0007a120 	.word	0x0007a120
 80010a4:	200004a8 	.word	0x200004a8
 80010a8:	200004da 	.word	0x200004da
 80010ac:	200004a5 	.word	0x200004a5
 80010b0:	200004a4 	.word	0x200004a4
 80010b4:	200004a6 	.word	0x200004a6
 80010b8:	20000038 	.word	0x20000038
 80010bc:	200004db 	.word	0x200004db
 80010c0:	200004dc 	.word	0x200004dc
 80010c4:	000186a0 	.word	0x000186a0
 80010c8:	20000454 	.word	0x20000454

080010cc <parse_uart>:

/*
 * @brief Parse incoming bytes
 */
static void parse_uart(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
	static uint8_t trame[20] = { 0 };
	static uint8_t nb_byte_to_buffer = 0;
	static uint8_t buffer_counter = 0;
	static uint16_t checksum = 0;
	/* Check for available data */
	if(UART_Availables(uart_eTELEMETRY))
 80010d2:	2000      	movs	r0, #0
 80010d4:	f000 fe24 	bl	8001d20 <UART_Availables>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d06c      	beq.n	80011b8 <parse_uart+0xec>
	{
		uint8_t c;
		UART_Get(uart_eTELEMETRY, &c);
 80010de:	1dfb      	adds	r3, r7, #7
 80010e0:	4619      	mov	r1, r3
 80010e2:	2000      	movs	r0, #0
 80010e4:	f000 fe2a 	bl	8001d3c <UART_Get>
		switch(state)
 80010e8:	4b35      	ldr	r3, [pc, #212]	; (80011c0 <parse_uart+0xf4>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b03      	cmp	r3, #3
 80010ee:	d863      	bhi.n	80011b8 <parse_uart+0xec>
 80010f0:	a201      	add	r2, pc, #4	; (adr r2, 80010f8 <parse_uart+0x2c>)
 80010f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f6:	bf00      	nop
 80010f8:	08001109 	.word	0x08001109
 80010fc:	08001117 	.word	0x08001117
 8001100:	0800115d 	.word	0x0800115d
 8001104:	08001195 	.word	0x08001195
		{
			case parser_state_eSTART_BYTE:
				if(c == '$')
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	2b24      	cmp	r3, #36	; 0x24
 800110c:	d14f      	bne.n	80011ae <parse_uart+0xe2>
				{
					state = parser_state_eID;
 800110e:	4b2c      	ldr	r3, [pc, #176]	; (80011c0 <parse_uart+0xf4>)
 8001110:	2201      	movs	r2, #1
 8001112:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001114:	e04b      	b.n	80011ae <parse_uart+0xe2>

			case parser_state_eID:
				if(c < data_id_eCOUNT)
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	2b03      	cmp	r3, #3
 800111a:	d84a      	bhi.n	80011b2 <parse_uart+0xe6>
				{
					/* Store the id for later use */
					trame[0] = c;
 800111c:	79fa      	ldrb	r2, [r7, #7]
 800111e:	4b29      	ldr	r3, [pc, #164]	; (80011c4 <parse_uart+0xf8>)
 8001120:	701a      	strb	r2, [r3, #0]
					/* Reset the checksum */
					checksum = c;
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	b29a      	uxth	r2, r3
 8001126:	4b28      	ldr	r3, [pc, #160]	; (80011c8 <parse_uart+0xfc>)
 8001128:	801a      	strh	r2, [r3, #0]
					/* Get the data length according to the data format */
					nb_byte_to_buffer = (DATA_LOGGER_Get_Data(c)->format / 20);
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fe6b 	bl	8000e08 <DATA_LOGGER_Get_Data>
 8001132:	4603      	mov	r3, r0
 8001134:	7a5b      	ldrb	r3, [r3, #9]
 8001136:	4a25      	ldr	r2, [pc, #148]	; (80011cc <parse_uart+0x100>)
 8001138:	fba2 2303 	umull	r2, r3, r2, r3
 800113c:	091b      	lsrs	r3, r3, #4
 800113e:	b2da      	uxtb	r2, r3
 8001140:	4b23      	ldr	r3, [pc, #140]	; (80011d0 <parse_uart+0x104>)
 8001142:	701a      	strb	r2, [r3, #0]
					if(nb_byte_to_buffer)
 8001144:	4b22      	ldr	r3, [pc, #136]	; (80011d0 <parse_uart+0x104>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <parse_uart+0x88>
					{
						state = parser_state_eDATA;
 800114c:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <parse_uart+0xf4>)
 800114e:	2202      	movs	r2, #2
 8001150:	701a      	strb	r2, [r3, #0]
					else
					{
						state = parser_state_eCHECKSUM;
					}
				}
				break;
 8001152:	e02e      	b.n	80011b2 <parse_uart+0xe6>
						state = parser_state_eCHECKSUM;
 8001154:	4b1a      	ldr	r3, [pc, #104]	; (80011c0 <parse_uart+0xf4>)
 8001156:	2203      	movs	r2, #3
 8001158:	701a      	strb	r2, [r3, #0]
				break;
 800115a:	e02a      	b.n	80011b2 <parse_uart+0xe6>
			case parser_state_eDATA:
				trame[1+buffer_counter++] = c;
 800115c:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <parse_uart+0x108>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	1c5a      	adds	r2, r3, #1
 8001162:	b2d1      	uxtb	r1, r2
 8001164:	4a1b      	ldr	r2, [pc, #108]	; (80011d4 <parse_uart+0x108>)
 8001166:	7011      	strb	r1, [r2, #0]
 8001168:	3301      	adds	r3, #1
 800116a:	79f9      	ldrb	r1, [r7, #7]
 800116c:	4a15      	ldr	r2, [pc, #84]	; (80011c4 <parse_uart+0xf8>)
 800116e:	54d1      	strb	r1, [r2, r3]
				checksum += c;
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	b29a      	uxth	r2, r3
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <parse_uart+0xfc>)
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	4413      	add	r3, r2
 800117a:	b29a      	uxth	r2, r3
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <parse_uart+0xfc>)
 800117e:	801a      	strh	r2, [r3, #0]
				if(buffer_counter == nb_byte_to_buffer)
 8001180:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <parse_uart+0x108>)
 8001182:	781a      	ldrb	r2, [r3, #0]
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <parse_uart+0x104>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	429a      	cmp	r2, r3
 800118a:	d114      	bne.n	80011b6 <parse_uart+0xea>
				{
					state = parser_state_eCHECKSUM;
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <parse_uart+0xf4>)
 800118e:	2203      	movs	r2, #3
 8001190:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001192:	e010      	b.n	80011b6 <parse_uart+0xea>
			case parser_state_eCHECKSUM:
				if(checksum == c)
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	b29a      	uxth	r2, r3
 8001198:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <parse_uart+0xfc>)
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	429a      	cmp	r2, r3
 800119e:	d102      	bne.n	80011a6 <parse_uart+0xda>
				{
					DATA_LOGGER_Reception(trame);
 80011a0:	4808      	ldr	r0, [pc, #32]	; (80011c4 <parse_uart+0xf8>)
 80011a2:	f7ff fbe1 	bl	8000968 <DATA_LOGGER_Reception>
				}
				state = parser_state_eSTART_BYTE;
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <parse_uart+0xf4>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
				break;
 80011ac:	e004      	b.n	80011b8 <parse_uart+0xec>
				break;
 80011ae:	bf00      	nop
 80011b0:	e002      	b.n	80011b8 <parse_uart+0xec>
				break;
 80011b2:	bf00      	nop
 80011b4:	e000      	b.n	80011b8 <parse_uart+0xec>
				break;
 80011b6:	bf00      	nop


		}
	}

}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	200004de 	.word	0x200004de
 80011c4:	200004e0 	.word	0x200004e0
 80011c8:	200004f4 	.word	0x200004f4
 80011cc:	cccccccd 	.word	0xcccccccd
 80011d0:	200004f6 	.word	0x200004f6
 80011d4:	200004f7 	.word	0x200004f7

080011d8 <EVENT_process>:

/*
 * @brief check if any event has been triggered
 * @param test_all False to test only low level events
 */
void EVENT_process(bool_e test_all){
 80011d8:	b590      	push	{r4, r7, lr}
 80011da:	b087      	sub	sp, #28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
	if(new_flag)
 80011e2:	4b42      	ldr	r3, [pc, #264]	; (80012ec <EVENT_process+0x114>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d07a      	beq.n	80012e2 <EVENT_process+0x10a>
	{
		new_flag = FALSE;
 80011ec:	4b3f      	ldr	r3, [pc, #252]	; (80012ec <EVENT_process+0x114>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	701a      	strb	r2, [r3, #0]
		/* Number of events to test */
		uint8_t max = EVENT_LOW_LVL_COUNT ;
 80011f2:	2300      	movs	r3, #0
 80011f4:	75fb      	strb	r3, [r7, #23]
		if(test_all)
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <EVENT_process+0x28>
		{
			max = EVENT_COUNT ;
 80011fc:	2301      	movs	r3, #1
 80011fe:	75fb      	strb	r3, [r7, #23]
		}

		/* For each events */
		for(uint32_t e = 0; e < max; e ++)
 8001200:	2300      	movs	r3, #0
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	e069      	b.n	80012da <EVENT_process+0x102>
		{

			uint32_t m = 0 ;
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
			bool_e function_did_run_once = FALSE ;
 800120a:	2300      	movs	r3, #0
 800120c:	72fb      	strb	r3, [r7, #11]

			/* For each masks */
			while(m < events_main[e].nb_mask && !function_did_run_once && events_main[e].state == event_state_eENABLED)
 800120e:	e049      	b.n	80012a4 <EVENT_process+0xcc>
			{
				if(Mask_test_and(events_main[e].mask_and[m], flags))			/* Mask "and" test */
 8001210:	4837      	ldr	r0, [pc, #220]	; (80012f0 <EVENT_process+0x118>)
 8001212:	4938      	ldr	r1, [pc, #224]	; (80012f4 <EVENT_process+0x11c>)
 8001214:	68fa      	ldr	r2, [r7, #12]
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	00d2      	lsls	r2, r2, #3
 800121a:	24b4      	movs	r4, #180	; 0xb4
 800121c:	fb04 f303 	mul.w	r3, r4, r3
 8001220:	4413      	add	r3, r2
 8001222:	4419      	add	r1, r3
 8001224:	e890 000c 	ldmia.w	r0, {r2, r3}
 8001228:	c903      	ldmia	r1, {r0, r1}
 800122a:	f000 f865 	bl	80012f8 <Mask_test_and>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d034      	beq.n	800129e <EVENT_process+0xc6>
				{
					if(Mask_test_or(events_main[e].mask_or[m], flags))			/* Mask "or" test */
 8001234:	482e      	ldr	r0, [pc, #184]	; (80012f0 <EVENT_process+0x118>)
 8001236:	492f      	ldr	r1, [pc, #188]	; (80012f4 <EVENT_process+0x11c>)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	1dda      	adds	r2, r3, #7
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	00d2      	lsls	r2, r2, #3
 8001240:	24b4      	movs	r4, #180	; 0xb4
 8001242:	fb04 f303 	mul.w	r3, r4, r3
 8001246:	4413      	add	r3, r2
 8001248:	4419      	add	r1, r3
 800124a:	e890 000c 	ldmia.w	r0, {r2, r3}
 800124e:	c903      	ldmia	r1, {r0, r1}
 8001250:	f000 f885 	bl	800135e <Mask_test_or>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d021      	beq.n	800129e <EVENT_process+0xc6>
					{
						if(!Mask_test_or(events_main[e].mask_not[m], flags))	/* Mask "not" test */
 800125a:	4825      	ldr	r0, [pc, #148]	; (80012f0 <EVENT_process+0x118>)
 800125c:	4925      	ldr	r1, [pc, #148]	; (80012f4 <EVENT_process+0x11c>)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	f103 020e 	add.w	r2, r3, #14
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	00d2      	lsls	r2, r2, #3
 8001268:	24b4      	movs	r4, #180	; 0xb4
 800126a:	fb04 f303 	mul.w	r3, r4, r3
 800126e:	4413      	add	r3, r2
 8001270:	4419      	add	r1, r3
 8001272:	e890 000c 	ldmia.w	r0, {r2, r3}
 8001276:	c903      	ldmia	r1, {r0, r1}
 8001278:	f000 f871 	bl	800135e <Mask_test_or>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d10d      	bne.n	800129e <EVENT_process+0xc6>
						{
							events_main[e].function(m);
 8001282:	4a1c      	ldr	r2, [pc, #112]	; (80012f4 <EVENT_process+0x11c>)
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	21b4      	movs	r1, #180	; 0xb4
 8001288:	fb01 f303 	mul.w	r3, r1, r3
 800128c:	4413      	add	r3, r2
 800128e:	33b0      	adds	r3, #176	; 0xb0
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	4610      	mov	r0, r2
 8001298:	4798      	blx	r3
							function_did_run_once = TRUE ;
 800129a:	2301      	movs	r3, #1
 800129c:	72fb      	strb	r3, [r7, #11]
						}
					}
				}
				m++ ;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	3301      	adds	r3, #1
 80012a2:	60fb      	str	r3, [r7, #12]
			while(m < events_main[e].nb_mask && !function_did_run_once && events_main[e].state == event_state_eENABLED)
 80012a4:	4a13      	ldr	r2, [pc, #76]	; (80012f4 <EVENT_process+0x11c>)
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	21b4      	movs	r1, #180	; 0xb4
 80012aa:	fb01 f303 	mul.w	r3, r1, r3
 80012ae:	4413      	add	r3, r2
 80012b0:	33a8      	adds	r3, #168	; 0xa8
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d20c      	bcs.n	80012d4 <EVENT_process+0xfc>
 80012ba:	7afb      	ldrb	r3, [r7, #11]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d109      	bne.n	80012d4 <EVENT_process+0xfc>
 80012c0:	4a0c      	ldr	r2, [pc, #48]	; (80012f4 <EVENT_process+0x11c>)
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	21b4      	movs	r1, #180	; 0xb4
 80012c6:	fb01 f303 	mul.w	r3, r1, r3
 80012ca:	4413      	add	r3, r2
 80012cc:	33ac      	adds	r3, #172	; 0xac
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d09d      	beq.n	8001210 <EVENT_process+0x38>
		for(uint32_t e = 0; e < max; e ++)
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	3301      	adds	r3, #1
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	7dfb      	ldrb	r3, [r7, #23]
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d391      	bcc.n	8001206 <EVENT_process+0x2e>
			}
		}
	}
}
 80012e2:	bf00      	nop
 80012e4:	371c      	adds	r7, #28
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd90      	pop	{r4, r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000500 	.word	0x20000500
 80012f0:	200004f8 	.word	0x200004f8
 80012f4:	20000504 	.word	0x20000504

080012f8 <Mask_test_and>:
 * @param mask_test The test mask
 * @param mask_ref The ref mask
 * @return True ...
 */
bool_e Mask_test_and(Mask_t mask_test, Mask_t mask_ref)
{
 80012f8:	b490      	push	{r4, r7}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	f107 0408 	add.w	r4, r7, #8
 8001302:	e884 0003 	stmia.w	r4, {r0, r1}
 8001306:	4639      	mov	r1, r7
 8001308:	e881 000c 	stmia.w	r1, {r2, r3}
	for(uint32_t m = 0; m < NB_ARRAY_MASK; m++)
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	e01c      	b.n	800134c <Mask_test_and+0x54>
	{
		if((mask_test.array[m] & mask_ref.array[m]) != mask_test.array[m])
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	f107 0218 	add.w	r2, r7, #24
 800131a:	4413      	add	r3, r2
 800131c:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	f107 0118 	add.w	r1, r7, #24
 8001328:	440b      	add	r3, r1
 800132a:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800132e:	401a      	ands	r2, r3
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	f107 0118 	add.w	r1, r7, #24
 8001338:	440b      	add	r3, r1
 800133a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800133e:	429a      	cmp	r2, r3
 8001340:	d001      	beq.n	8001346 <Mask_test_and+0x4e>
		{
			return FALSE ;
 8001342:	2300      	movs	r3, #0
 8001344:	e006      	b.n	8001354 <Mask_test_and+0x5c>
	for(uint32_t m = 0; m < NB_ARRAY_MASK; m++)
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	3301      	adds	r3, #1
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d9df      	bls.n	8001312 <Mask_test_and+0x1a>
		}
	}
	return TRUE ;
 8001352:	2301      	movs	r3, #1
}
 8001354:	4618      	mov	r0, r3
 8001356:	3718      	adds	r7, #24
 8001358:	46bd      	mov	sp, r7
 800135a:	bc90      	pop	{r4, r7}
 800135c:	4770      	bx	lr

0800135e <Mask_test_or>:
 * @brief Check if one of the bit in the ref_mask is in the test_mask
 * @param mask_test The test mask
 * @param mask_ref The ref mask
 * @return True if we found one corresponding bit
 */
bool_e Mask_test_or(Mask_t mask_test, Mask_t mask_ref){
 800135e:	b490      	push	{r4, r7}
 8001360:	b086      	sub	sp, #24
 8001362:	af00      	add	r7, sp, #0
 8001364:	f107 0408 	add.w	r4, r7, #8
 8001368:	e884 0003 	stmia.w	r4, {r0, r1}
 800136c:	4639      	mov	r1, r7
 800136e:	e881 000c 	stmia.w	r1, {r2, r3}
	bool_e to_return = FALSE;
 8001372:	2300      	movs	r3, #0
 8001374:	75fb      	strb	r3, [r7, #23]
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	e015      	b.n	80013a8 <Mask_test_or+0x4a>
	{
		if(mask_test.array[m] & mask_ref.array[m])
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	f107 0218 	add.w	r2, r7, #24
 8001384:	4413      	add	r3, r2
 8001386:	f853 2c10 	ldr.w	r2, [r3, #-16]
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	f107 0118 	add.w	r1, r7, #24
 8001392:	440b      	add	r3, r1
 8001394:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8001398:	4013      	ands	r3, r2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <Mask_test_or+0x44>
		{
			to_return = TRUE;
 800139e:	2301      	movs	r3, #1
 80013a0:	75fb      	strb	r3, [r7, #23]
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	3301      	adds	r3, #1
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	dde6      	ble.n	800137c <Mask_test_or+0x1e>
		}
	}
	return to_return ;
 80013ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc90      	pop	{r4, r7}
 80013b8:	4770      	bx	lr
	...

080013bc <SCHEDULER_init>:
/*
 * @brief Must be called after TASK_init function
 * 	      Store the pointer to the scheduler and event task to buy time
 */
void SCHEDULER_init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
	task_scheduler = TASK_get_task(task_ids_eSCHEDULER);
 80013c0:	2000      	movs	r0, #0
 80013c2:	f000 fb07 	bl	80019d4 <TASK_get_task>
 80013c6:	4603      	mov	r3, r0
 80013c8:	4a04      	ldr	r2, [pc, #16]	; (80013dc <SCHEDULER_init+0x20>)
 80013ca:	6013      	str	r3, [r2, #0]
	task_event = TASK_get_task(task_ids_eEVENTS);
 80013cc:	2001      	movs	r0, #1
 80013ce:	f000 fb01 	bl	80019d4 <TASK_get_task>
 80013d2:	4603      	mov	r3, r0
 80013d4:	4a02      	ldr	r2, [pc, #8]	; (80013e0 <SCHEDULER_init+0x24>)
 80013d6:	6013      	str	r3, [r2, #0]
}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	200005e8 	.word	0x200005e8
 80013e0:	200005ec 	.word	0x200005ec

080013e4 <SCHEDULER_run>:

/*
 * @brief It calls tasks one after another according to their priorities and current modes
 */
void SCHEDULER_run(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
	uint32_t current_time_us = TIME_us();
 80013ea:	f000 fb07 	bl	80019fc <TIME_us>
 80013ee:	60f8      	str	r0, [r7, #12]
	task_t * task = get_first_task();
 80013f0:	f000 f8c2 	bl	8001578 <get_first_task>
 80013f4:	60b8      	str	r0, [r7, #8]
	bool_e task_executed = FALSE ;
 80013f6:	2300      	movs	r3, #0
 80013f8:	71fb      	strb	r3, [r7, #7]
	while(task_queu_position < task_queu_size && task != NULL)
 80013fa:	e04d      	b.n	8001498 <SCHEDULER_run+0xb4>
	{

		switch(task->mode)
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	789b      	ldrb	r3, [r3, #2]
 8001400:	2b03      	cmp	r3, #3
 8001402:	d006      	beq.n	8001412 <SCHEDULER_run+0x2e>
 8001404:	2b03      	cmp	r3, #3
 8001406:	dc32      	bgt.n	800146e <SCHEDULER_run+0x8a>
 8001408:	2b01      	cmp	r3, #1
 800140a:	d00a      	beq.n	8001422 <SCHEDULER_run+0x3e>
 800140c:	2b02      	cmp	r3, #2
 800140e:	d023      	beq.n	8001458 <SCHEDULER_run+0x74>
				task->mode = task_mode_eWAIT ;
				break;
			case task_mode_eTIMMER :
			case task_mode_eWAIT:
			default:
				break;
 8001410:	e02d      	b.n	800146e <SCHEDULER_run+0x8a>
				current_time_us = task_process(task, current_time_us);
 8001412:	68f9      	ldr	r1, [r7, #12]
 8001414:	68b8      	ldr	r0, [r7, #8]
 8001416:	f000 f8d5 	bl	80015c4 <task_process>
 800141a:	60f8      	str	r0, [r7, #12]
				task_executed = TRUE ;
 800141c:	2301      	movs	r3, #1
 800141e:	71fb      	strb	r3, [r7, #7]
				break;
 8001420:	e028      	b.n	8001474 <SCHEDULER_run+0x90>
				if(current_time_us >= task->desired_next_start_us){
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	6a1b      	ldr	r3, [r3, #32]
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	429a      	cmp	r2, r3
 800142a:	d322      	bcc.n	8001472 <SCHEDULER_run+0x8e>
					current_time_us = task_process(task, current_time_us);
 800142c:	68f9      	ldr	r1, [r7, #12]
 800142e:	68b8      	ldr	r0, [r7, #8]
 8001430:	f000 f8c8 	bl	80015c4 <task_process>
 8001434:	60f8      	str	r0, [r7, #12]
					task->desired_next_start_us = task->desired_period_us - (int32_t)task->lag_average + current_time_us ;
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	68ba      	ldr	r2, [r7, #8]
 800143c:	edd2 7a02 	vldr	s15, [r2, #8]
 8001440:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001444:	ee17 2a90 	vmov	r2, s15
 8001448:	1a9a      	subs	r2, r3, r2
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	441a      	add	r2, r3
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	621a      	str	r2, [r3, #32]
					task_executed = TRUE ;
 8001452:	2301      	movs	r3, #1
 8001454:	71fb      	strb	r3, [r7, #7]
				break;
 8001456:	e00c      	b.n	8001472 <SCHEDULER_run+0x8e>
				current_time_us = task_process(task, current_time_us);
 8001458:	68f9      	ldr	r1, [r7, #12]
 800145a:	68b8      	ldr	r0, [r7, #8]
 800145c:	f000 f8b2 	bl	80015c4 <task_process>
 8001460:	60f8      	str	r0, [r7, #12]
				task_executed = TRUE ;
 8001462:	2301      	movs	r3, #1
 8001464:	71fb      	strb	r3, [r7, #7]
				task->mode = task_mode_eWAIT ;
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	2200      	movs	r2, #0
 800146a:	709a      	strb	r2, [r3, #2]
				break;
 800146c:	e002      	b.n	8001474 <SCHEDULER_run+0x90>
				break;
 800146e:	bf00      	nop
 8001470:	e000      	b.n	8001474 <SCHEDULER_run+0x90>
				break;
 8001472:	bf00      	nop
		}
		/* Stop the while loop when once a task gets executed */
		if(task_executed && (task != task_scheduler) && (task != task_event))
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d009      	beq.n	800148e <SCHEDULER_run+0xaa>
 800147a:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <SCHEDULER_run+0xd4>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	429a      	cmp	r2, r3
 8001482:	d004      	beq.n	800148e <SCHEDULER_run+0xaa>
 8001484:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <SCHEDULER_run+0xd8>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	68ba      	ldr	r2, [r7, #8]
 800148a:	429a      	cmp	r2, r3
 800148c:	d10e      	bne.n	80014ac <SCHEDULER_run+0xc8>
		{
			break;
		}
		task_executed = FALSE ;
 800148e:	2300      	movs	r3, #0
 8001490:	71fb      	strb	r3, [r7, #7]
		task = get_next_task();
 8001492:	f000 f881 	bl	8001598 <get_next_task>
 8001496:	60b8      	str	r0, [r7, #8]
	while(task_queu_position < task_queu_size && task != NULL)
 8001498:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <SCHEDULER_run+0xdc>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <SCHEDULER_run+0xe0>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d204      	bcs.n	80014ae <SCHEDULER_run+0xca>
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1a8      	bne.n	80013fc <SCHEDULER_run+0x18>
	}
}
 80014aa:	e000      	b.n	80014ae <SCHEDULER_run+0xca>
			break;
 80014ac:	bf00      	nop
}
 80014ae:	bf00      	nop
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	200005e8 	.word	0x200005e8
 80014bc:	200005ec 	.word	0x200005ec
 80014c0:	200005cc 	.word	0x200005cc
 80014c4:	200005c8 	.word	0x200005c8

080014c8 <SCHEDULER_task>:

/*
 * @brief Check for some tasks that requires to change of mode
 */
void SCHEDULER_task(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
	for(uint8_t t = 0; t < task_to_moove_counter; t++)
 80014ce:	2300      	movs	r3, #0
 80014d0:	71fb      	strb	r3, [r7, #7]
 80014d2:	e00a      	b.n	80014ea <SCHEDULER_task+0x22>
	{
		task_to_change[t]->mode = change_mode[t] ;
 80014d4:	79fa      	ldrb	r2, [r7, #7]
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	490b      	ldr	r1, [pc, #44]	; (8001508 <SCHEDULER_task+0x40>)
 80014da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014de:	490b      	ldr	r1, [pc, #44]	; (800150c <SCHEDULER_task+0x44>)
 80014e0:	5c8a      	ldrb	r2, [r1, r2]
 80014e2:	709a      	strb	r2, [r3, #2]
	for(uint8_t t = 0; t < task_to_moove_counter; t++)
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	3301      	adds	r3, #1
 80014e8:	71fb      	strb	r3, [r7, #7]
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <SCHEDULER_task+0x48>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	79fa      	ldrb	r2, [r7, #7]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d3ef      	bcc.n	80014d4 <SCHEDULER_task+0xc>
	}
	task_to_moove_counter = 0 ;
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <SCHEDULER_task+0x48>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	701a      	strb	r2, [r3, #0]
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	200005d0 	.word	0x200005d0
 800150c:	200005e0 	.word	0x200005e0
 8001510:	200005e4 	.word	0x200005e4

08001514 <SCHEDULER_enable_task>:
 * @brief Add or remove a task to / from the queue
 * @param id The id of the task
 * @param enable Enable (Add) or disable (remove) a task
 */
void SCHEDULER_enable_task(task_ids_e id, bool_e enable)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	460a      	mov	r2, r1
 800151e:	71fb      	strb	r3, [r7, #7]
 8001520:	4613      	mov	r3, r2
 8001522:	71bb      	strb	r3, [r7, #6]
	if(enable)
 8001524:	79bb      	ldrb	r3, [r7, #6]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d008      	beq.n	800153c <SCHEDULER_enable_task+0x28>
	{
		queu_add(TASK_get_task(id));
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	4618      	mov	r0, r3
 800152e:	f000 fa51 	bl	80019d4 <TASK_get_task>
 8001532:	4603      	mov	r3, r0
 8001534:	4618      	mov	r0, r3
 8001536:	f000 f963 	bl	8001800 <queu_add>
	}
	else
	{
		queu_remove(TASK_get_task(id));
	}
}
 800153a:	e007      	b.n	800154c <SCHEDULER_enable_task+0x38>
		queu_remove(TASK_get_task(id));
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	4618      	mov	r0, r3
 8001540:	f000 fa48 	bl	80019d4 <TASK_get_task>
 8001544:	4603      	mov	r3, r0
 8001546:	4618      	mov	r0, r3
 8001548:	f000 f9b8 	bl	80018bc <queu_remove>
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <SCHEDULER_reschedule_task>:
 * @brief Change the execution period of a task
 * @param id The id of the task
 * @param new_period_us The new desired period
 */
void SCHEDULER_reschedule_task(task_ids_e id, uint32_t new_period_us)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	6039      	str	r1, [r7, #0]
 800155e:	71fb      	strb	r3, [r7, #7]
	task_t * task = TASK_get_task(id);
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	4618      	mov	r0, r3
 8001564:	f000 fa36 	bl	80019d4 <TASK_get_task>
 8001568:	60f8      	str	r0, [r7, #12]
	task->desired_period_us = new_period_us ;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	615a      	str	r2, [r3, #20]
}
 8001570:	bf00      	nop
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <get_first_task>:

/*
 * @brief get the first task of the queue
 */
static task_t * get_first_task(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
	task_queu_position = 0 ;
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <get_first_task+0x18>)
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
	return task_queu[0] ;
 8001582:	4b04      	ldr	r3, [pc, #16]	; (8001594 <get_first_task+0x1c>)
 8001584:	681b      	ldr	r3, [r3, #0]
}
 8001586:	4618      	mov	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	200005cc 	.word	0x200005cc
 8001594:	200005b8 	.word	0x200005b8

08001598 <get_next_task>:
/*
 * @brief get the next task in the queue
 * @return the next task
 */
static task_t * get_next_task(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
	return task_queu[++task_queu_position];
 800159c:	4b07      	ldr	r3, [pc, #28]	; (80015bc <get_next_task+0x24>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	3301      	adds	r3, #1
 80015a2:	4a06      	ldr	r2, [pc, #24]	; (80015bc <get_next_task+0x24>)
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	4b05      	ldr	r3, [pc, #20]	; (80015bc <get_next_task+0x24>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a05      	ldr	r2, [pc, #20]	; (80015c0 <get_next_task+0x28>)
 80015ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	200005cc 	.word	0x200005cc
 80015c0:	200005b8 	.word	0x200005b8

080015c4 <task_process>:

static uint32_t task_process(task_t * task, uint32_t current_time_us){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]

	/* If the task has no process associated, we just stop here before making a mistake .. */
	if(task->process == NULL)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <task_process+0x16>
	{
		return current_time_us ;
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	e0e4      	b.n	80017a4 <task_process+0x1e0>
	}

	/* Compute the real period using the moving average */
	task->real_period_us_average_sum -= task->real_period_us_average_array[task->average_index];
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80015e4:	6879      	ldr	r1, [r7, #4]
 80015e6:	3308      	adds	r3, #8
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	440b      	add	r3, r1
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	1ad2      	subs	r2, r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	675a      	str	r2, [r3, #116]	; 0x74
	task->real_period_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	69da      	ldr	r2, [r3, #28]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80015fe:	6839      	ldr	r1, [r7, #0]
 8001600:	1a8a      	subs	r2, r1, r2
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	3308      	adds	r3, #8
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	440b      	add	r3, r1
 800160a:	605a      	str	r2, [r3, #4]
	task->real_period_us_average_sum += task->real_period_us_average_array[task->average_index] ;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	3308      	adds	r3, #8
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	440b      	add	r3, r1
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	441a      	add	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	675a      	str	r2, [r3, #116]	; 0x74
	task->real_period_us = task->real_period_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800162a:	4a60      	ldr	r2, [pc, #384]	; (80017ac <task_process+0x1e8>)
 800162c:	fba2 2303 	umull	r2, r3, r2, r3
 8001630:	091a      	lsrs	r2, r3, #4
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	619a      	str	r2, [r3, #24]

	/* Lag compensation */
	if(task->mode == task_mode_eTIME)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	789b      	ldrb	r3, [r3, #2]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d142      	bne.n	80016c4 <task_process+0x100>
	{
		if(task->real_period_us_average_array[task->average_index] > task->desired_period_us)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	3308      	adds	r3, #8
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	429a      	cmp	r2, r3
 8001654:	d91b      	bls.n	800168e <task_process+0xca>
		{
			task->lag_average += (float)(task->real_period_us_average_array[task->average_index] - task->desired_period_us) * 0.5f ;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	ed93 7a02 	vldr	s14, [r3, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	3308      	adds	r3, #8
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	695b      	ldr	r3, [r3, #20]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	ee07 3a90 	vmov	s15, r3
 8001676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800167a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800167e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001682:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	edc3 7a02 	vstr	s15, [r3, #8]
 800168c:	e01a      	b.n	80016c4 <task_process+0x100>
		}

		else
		{
			task->lag_average -= (float)(task->desired_period_us - task->real_period_us_average_array[task->average_index]) * 0.5f ;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	ed93 7a02 	vldr	s14, [r3, #8]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	695a      	ldr	r2, [r3, #20]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	3308      	adds	r3, #8
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	440b      	add	r3, r1
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	ee07 3a90 	vmov	s15, r3
 80016ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016b2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80016b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80016ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	edc3 7a02 	vstr	s15, [r3, #8]
		}
	}
	task->last_execution_us = current_time_us ;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	61da      	str	r2, [r3, #28]
	task->process(current_time_us);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	6838      	ldr	r0, [r7, #0]
 80016d0:	4798      	blx	r3
	current_time_us = TIME_us();
 80016d2:	f000 f993 	bl	80019fc <TIME_us>
 80016d6:	6038      	str	r0, [r7, #0]
	/* Compute the "burst time" with the moving average */
	task->duration_us_average_sum -= task->duration_us_average_array[task->average_index];
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	311e      	adds	r1, #30
 80016e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80016ec:	1ad2      	subs	r2, r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	task->duration_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	69db      	ldr	r3, [r3, #28]
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	f8d2 20cc 	ldr.w	r2, [r2, #204]	; 0xcc
 80016fe:	6839      	ldr	r1, [r7, #0]
 8001700:	1ac9      	subs	r1, r1, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	321e      	adds	r2, #30
 8001706:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	task->duration_us_worst = MAX(task->duration_us_average_array[task->average_index] , task->duration_us_worst);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	691a      	ldr	r2, [r3, #16]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	311e      	adds	r1, #30
 8001718:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800171c:	429a      	cmp	r2, r3
 800171e:	bf38      	it	cc
 8001720:	461a      	movcc	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	611a      	str	r2, [r3, #16]
	task->duration_us_average_sum += task->duration_us_average_array[task->average_index];
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	311e      	adds	r1, #30
 8001736:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800173a:	441a      	add	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	task->duration_us = task->duration_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001748:	4a18      	ldr	r2, [pc, #96]	; (80017ac <task_process+0x1e8>)
 800174a:	fba2 2303 	umull	r2, r3, r2, r3
 800174e:	091a      	lsrs	r2, r3, #4
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	60da      	str	r2, [r3, #12]

	if(task->duration_us_average_array[task->average_index] > 1000)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	321e      	adds	r2, #30
 800175e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001762:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001766:	d90c      	bls.n	8001782 <task_process+0x1be>
		task->duration_us_average_array[task->average_index] ++ ;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	f103 011e 	add.w	r1, r3, #30
 8001774:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001778:	1c51      	adds	r1, r2, #1
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	331e      	adds	r3, #30
 800177e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if(++task->average_index == TASK_STAT_AVERAGE_OVER)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001788:	1c5a      	adds	r2, r3, #1
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001796:	2b14      	cmp	r3, #20
 8001798:	d103      	bne.n	80017a2 <task_process+0x1de>
		task->average_index = 0 ;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	return current_time_us ;
 80017a2:	683b      	ldr	r3, [r7, #0]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	cccccccd 	.word	0xcccccccd

080017b0 <queu_contains>:
 * @brief Check if the given task is currently in the queue
 * @param task pointer to a task
 * @return true when it does contains the task, false otherwise
 */
static bool_e queu_contains(task_t * task)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	if(task == NULL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <queu_contains+0x12>
	{
		return FALSE ;
 80017be:	2300      	movs	r3, #0
 80017c0:	e014      	b.n	80017ec <queu_contains+0x3c>
	}
	for(uint32_t t = 0; t < task_queu_size; t++)
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	e00b      	b.n	80017e0 <queu_contains+0x30>
	{
		if(task_queu[t] == task)
 80017c8:	4a0b      	ldr	r2, [pc, #44]	; (80017f8 <queu_contains+0x48>)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d101      	bne.n	80017da <queu_contains+0x2a>
			{
				return TRUE ;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e008      	b.n	80017ec <queu_contains+0x3c>
	for(uint32_t t = 0; t < task_queu_size; t++)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	3301      	adds	r3, #1
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <queu_contains+0x4c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d3ee      	bcc.n	80017c8 <queu_contains+0x18>
			}
	}

	return FALSE ;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	200005b8 	.word	0x200005b8
 80017fc:	200005c8 	.word	0x200005c8

08001800 <queu_add>:
 * @brief Add a task to the queue
 * @param task pointer to the task to add
 * @return true when added, false otherwise
 */
static bool_e queu_add(task_t * task)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]

	if(queu_contains(task) || task_queu_size >= task_ids_eCOUNT || task == NULL)
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff ffd1 	bl	80017b0 <queu_contains>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d106      	bne.n	8001822 <queu_add+0x22>
 8001814:	4b27      	ldr	r3, [pc, #156]	; (80018b4 <queu_add+0xb4>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b03      	cmp	r3, #3
 800181a:	d802      	bhi.n	8001822 <queu_add+0x22>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <queu_add+0x26>
	{
		return FALSE ;
 8001822:	2300      	movs	r3, #0
 8001824:	e041      	b.n	80018aa <queu_add+0xaa>
	}
	uint32_t t = 0 ;
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
	while(t < task_ids_eCOUNT)
 800182a:	e03a      	b.n	80018a2 <queu_add+0xa2>
	{
		if(task_queu[t] == NULL)
 800182c:	4a22      	ldr	r2, [pc, #136]	; (80018b8 <queu_add+0xb8>)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d10b      	bne.n	8001850 <queu_add+0x50>
		{
			task_queu[t] = task ;
 8001838:	491f      	ldr	r1, [pc, #124]	; (80018b8 <queu_add+0xb8>)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			task_queu_size ++ ;
 8001842:	4b1c      	ldr	r3, [pc, #112]	; (80018b4 <queu_add+0xb4>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	3301      	adds	r3, #1
 8001848:	4a1a      	ldr	r2, [pc, #104]	; (80018b4 <queu_add+0xb4>)
 800184a:	6013      	str	r3, [r2, #0]
			return TRUE;
 800184c:	2301      	movs	r3, #1
 800184e:	e02c      	b.n	80018aa <queu_add+0xaa>
		}
		else if(task->static_priority > task_queu[t]->static_priority){
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	781a      	ldrb	r2, [r3, #0]
 8001854:	4918      	ldr	r1, [pc, #96]	; (80018b8 <queu_add+0xb8>)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	d91c      	bls.n	800189c <queu_add+0x9c>
			memmove(&task_queu[t+1], &task_queu[t], sizeof(task) * (task_queu_size - t));
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	3301      	adds	r3, #1
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4a13      	ldr	r2, [pc, #76]	; (80018b8 <queu_add+0xb8>)
 800186a:	1898      	adds	r0, r3, r2
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4a11      	ldr	r2, [pc, #68]	; (80018b8 <queu_add+0xb8>)
 8001872:	1899      	adds	r1, r3, r2
 8001874:	4b0f      	ldr	r3, [pc, #60]	; (80018b4 <queu_add+0xb4>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	461a      	mov	r2, r3
 8001880:	f005 fee6 	bl	8007650 <memmove>
			task_queu[t] = task ;
 8001884:	490c      	ldr	r1, [pc, #48]	; (80018b8 <queu_add+0xb8>)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			task_queu_size ++ ;
 800188e:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <queu_add+0xb4>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	3301      	adds	r3, #1
 8001894:	4a07      	ldr	r2, [pc, #28]	; (80018b4 <queu_add+0xb4>)
 8001896:	6013      	str	r3, [r2, #0]
			return TRUE ;
 8001898:	2301      	movs	r3, #1
 800189a:	e006      	b.n	80018aa <queu_add+0xaa>
		}
		t++;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	3301      	adds	r3, #1
 80018a0:	60fb      	str	r3, [r7, #12]
	while(t < task_ids_eCOUNT)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	d9c1      	bls.n	800182c <queu_add+0x2c>
	}
	return FALSE ;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200005c8 	.word	0x200005c8
 80018b8:	200005b8 	.word	0x200005b8

080018bc <queu_remove>:
 * @brief remove a task from the queue
 * @param task pointer to the task to remove
 * @return true if the task was removed, false otherwise
 */
static bool_e queu_remove(task_t * task)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	if(!queu_contains(task) || task == NULL)
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff ff73 	bl	80017b0 <queu_contains>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d002      	beq.n	80018d6 <queu_remove+0x1a>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <queu_remove+0x1e>
	{
		return FALSE ;
 80018d6:	2300      	movs	r3, #0
 80018d8:	e02a      	b.n	8001930 <queu_remove+0x74>
	}
	for(uint32_t t = 0; t < task_queu_size; t ++)
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	e021      	b.n	8001924 <queu_remove+0x68>
	{
		if(task == task_queu[t])
 80018e0:	4a15      	ldr	r2, [pc, #84]	; (8001938 <queu_remove+0x7c>)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d117      	bne.n	800191e <queu_remove+0x62>
		{
			memmove(&task_queu[t], &task_queu[t+1], sizeof(task) * (task_queu_size - t));
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4a11      	ldr	r2, [pc, #68]	; (8001938 <queu_remove+0x7c>)
 80018f4:	1898      	adds	r0, r3, r2
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	3301      	adds	r3, #1
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4a0e      	ldr	r2, [pc, #56]	; (8001938 <queu_remove+0x7c>)
 80018fe:	1899      	adds	r1, r3, r2
 8001900:	4b0e      	ldr	r3, [pc, #56]	; (800193c <queu_remove+0x80>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	461a      	mov	r2, r3
 800190c:	f005 fea0 	bl	8007650 <memmove>
			task_queu_size -- ;
 8001910:	4b0a      	ldr	r3, [pc, #40]	; (800193c <queu_remove+0x80>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	3b01      	subs	r3, #1
 8001916:	4a09      	ldr	r2, [pc, #36]	; (800193c <queu_remove+0x80>)
 8001918:	6013      	str	r3, [r2, #0]
			return TRUE ;
 800191a:	2301      	movs	r3, #1
 800191c:	e008      	b.n	8001930 <queu_remove+0x74>
	for(uint32_t t = 0; t < task_queu_size; t ++)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	3301      	adds	r3, #1
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <queu_remove+0x80>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	429a      	cmp	r2, r3
 800192c:	d3d8      	bcc.n	80018e0 <queu_remove+0x24>
		}
	}
	return FALSE ;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	200005b8 	.word	0x200005b8
 800193c:	200005c8 	.word	0x200005c8

08001940 <TASK_Init>:
/*
 * @brief Initialization of every task
 * @param mark1_ pointer to a system_t structure
 */
void TASK_Init(system_t * mark1_)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
	mark1 = mark1_;
 8001948:	4a0b      	ldr	r2, [pc, #44]	; (8001978 <TASK_Init+0x38>)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6013      	str	r3, [r2, #0]
	SCHEDULER_enable_task(task_ids_eEVENTS, TRUE);
 800194e:	2101      	movs	r1, #1
 8001950:	2001      	movs	r0, #1
 8001952:	f7ff fddf 	bl	8001514 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(task_ids_eSCHEDULER, TRUE);
 8001956:	2101      	movs	r1, #1
 8001958:	2000      	movs	r0, #0
 800195a:	f7ff fddb 	bl	8001514 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(task_ids_eGYRO_UPDATE, TRUE);
 800195e:	2101      	movs	r1, #1
 8001960:	2003      	movs	r0, #3
 8001962:	f7ff fdd7 	bl	8001514 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(task_ids_eDATA_LOGGER, TRUE);
 8001966:	2101      	movs	r1, #1
 8001968:	2002      	movs	r0, #2
 800196a:	f7ff fdd3 	bl	8001514 <SCHEDULER_enable_task>
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	200005f0 	.word	0x200005f0

0800197c <process_scheduler>:

/*
 * @brief Call the scheduler main function
 */
static void process_scheduler(uint32_t current_time_us)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
	SCHEDULER_task();
 8001984:	f7ff fda0 	bl	80014c8 <SCHEDULER_task>
}
 8001988:	bf00      	nop
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <process_events>:

/*
 * @brief Call the scheduler main function
 */
static void process_events(uint32_t current_time_us)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
	UNUSED(current_time_us);
	EVENT_process(FALSE);
 8001998:	2000      	movs	r0, #0
 800199a:	f7ff fc1d 	bl	80011d8 <EVENT_process>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <process_data_logger>:

/*
 * @brief Call the data logger main function
 */
static void process_data_logger(uint32_t current_time_us)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
	UNUSED(current_time_us);
	DATA_LOGGER_Main();
 80019ae:	f7fe ffd3 	bl	8000958 <DATA_LOGGER_Main>
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <process_gyro_update>:

/*
 * @brief Measure new data from the gyro
 */
static void process_gyro_update(uint32_t current_time_us)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
	MPU_Read_All();
 80019c2:	f000 fc45 	bl	8002250 <MPU_Read_All>
	COMPLEMENTARY_FILTER_Process();
 80019c6:	f7fe fd9b 	bl	8000500 <COMPLEMENTARY_FILTER_Process>
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <TASK_get_task>:
 * @brief Return a pointer to a task for a given task id
 * @param id Id of the task
 * @return Pointer to the task
 */
task_t * TASK_get_task(task_ids_e id)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
	return &tasks[id];
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	22d0      	movs	r2, #208	; 0xd0
 80019e2:	fb02 f303 	mul.w	r3, r2, r3
 80019e6:	4a04      	ldr	r2, [pc, #16]	; (80019f8 <TASK_get_task+0x24>)
 80019e8:	4413      	add	r3, r2
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	2000003c 	.word	0x2000003c

080019fc <TIME_us>:

#include "time.h"


uint32_t TIME_us(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a02:	b672      	cpsid	i
}
 8001a04:	bf00      	nop

	uint32_t t_us;
	static uint32_t previous_t_us = 0;
	__disable_irq();
	t_us = HAL_GetTick() * 1000 + 1000 - SysTick->VAL / 168;
 8001a06:	f001 fb2d 	bl	8003064 <HAL_GetTick>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a12:	fb02 f203 	mul.w	r2, r2, r3
 8001a16:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <TIME_us+0x54>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	08db      	lsrs	r3, r3, #3
 8001a1c:	490d      	ldr	r1, [pc, #52]	; (8001a54 <TIME_us+0x58>)
 8001a1e:	fba1 1303 	umull	r1, r3, r1, r3
 8001a22:	085b      	lsrs	r3, r3, #1
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a28:	b662      	cpsie	i
}
 8001a2a:	bf00      	nop
	__enable_irq();

	if(previous_t_us > t_us)
 8001a2c:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <TIME_us+0x5c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d203      	bcs.n	8001a3e <TIME_us+0x42>
		t_us += 1000;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001a3c:	607b      	str	r3, [r7, #4]
	previous_t_us = t_us ;
 8001a3e:	4a06      	ldr	r2, [pc, #24]	; (8001a58 <TIME_us+0x5c>)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6013      	str	r3, [r2, #0]

	return t_us;
 8001a44:	687b      	ldr	r3, [r7, #4]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	e000e010 	.word	0xe000e010
 8001a54:	18618619 	.word	0x18618619
 8001a58:	200005f4 	.word	0x200005f4

08001a5c <I2C_Mem_Write>:

void I2C_Init(void)
{
}
void I2C_Mem_Write(i2c_e i2c_id, uint8_t device_address, uint8_t mem_address, uint8_t * data, uint8_t size)
{
 8001a5c:	b590      	push	{r4, r7, lr}
 8001a5e:	b087      	sub	sp, #28
 8001a60:	af04      	add	r7, sp, #16
 8001a62:	603b      	str	r3, [r7, #0]
 8001a64:	4603      	mov	r3, r0
 8001a66:	71fb      	strb	r3, [r7, #7]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	71bb      	strb	r3, [r7, #6]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(i2c[i2c_id].hi2c, device_address, mem_address, I2C_MEMADD_SIZE_8BIT, data, size, I2C_OPERATION_TIMEOUT);
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <I2C_Mem_Write+0x40>)
 8001a74:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001a78:	79bb      	ldrb	r3, [r7, #6]
 8001a7a:	b299      	uxth	r1, r3
 8001a7c:	797b      	ldrb	r3, [r7, #5]
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	7e3b      	ldrb	r3, [r7, #24]
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	240a      	movs	r4, #10
 8001a86:	9402      	str	r4, [sp, #8]
 8001a88:	9301      	str	r3, [sp, #4]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	2301      	movs	r3, #1
 8001a90:	f002 fb26 	bl	80040e0 <HAL_I2C_Mem_Write>
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd90      	pop	{r4, r7, pc}
 8001a9c:	2000037c 	.word	0x2000037c

08001aa0 <I2C_Mem_Read>:

void I2C_Mem_Read(i2c_e i2c_id, uint8_t device_address, uint8_t mem_address, uint8_t * data, uint8_t size)
{
 8001aa0:	b590      	push	{r4, r7, lr}
 8001aa2:	b087      	sub	sp, #28
 8001aa4:	af04      	add	r7, sp, #16
 8001aa6:	603b      	str	r3, [r7, #0]
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	71fb      	strb	r3, [r7, #7]
 8001aac:	460b      	mov	r3, r1
 8001aae:	71bb      	strb	r3, [r7, #6]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(i2c[i2c_id].hi2c, device_address, mem_address, I2C_MEMADD_SIZE_8BIT, data, size, I2C_OPERATION_TIMEOUT);
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <I2C_Mem_Read+0x40>)
 8001ab8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001abc:	79bb      	ldrb	r3, [r7, #6]
 8001abe:	b299      	uxth	r1, r3
 8001ac0:	797b      	ldrb	r3, [r7, #5]
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	7e3b      	ldrb	r3, [r7, #24]
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	240a      	movs	r4, #10
 8001aca:	9402      	str	r4, [sp, #8]
 8001acc:	9301      	str	r3, [sp, #4]
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	f002 fbfe 	bl	80042d4 <HAL_I2C_Mem_Read>
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd90      	pop	{r4, r7, pc}
 8001ae0:	2000037c 	.word	0x2000037c

08001ae4 <TIMER_Start_All_Channels>:
/*
 * @brief Start all channels of a timer
 * @param timer_id id of the timer
 */
void TIMER_Start_All_Channels(timer_e timer_id)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	71fb      	strb	r3, [r7, #7]
	HAL_TIM_PWM_Start(timer[timer_id].htim, TIM_CHANNEL_1);
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	4a11      	ldr	r2, [pc, #68]	; (8001b38 <TIMER_Start_All_Channels+0x54>)
 8001af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af6:	2100      	movs	r1, #0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f003 fe5d 	bl	80057b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer[timer_id].htim, TIM_CHANNEL_2);
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	4a0d      	ldr	r2, [pc, #52]	; (8001b38 <TIMER_Start_All_Channels+0x54>)
 8001b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b06:	2104      	movs	r1, #4
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f003 fe55 	bl	80057b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer[timer_id].htim, TIM_CHANNEL_3);
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	4a09      	ldr	r2, [pc, #36]	; (8001b38 <TIMER_Start_All_Channels+0x54>)
 8001b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b16:	2108      	movs	r1, #8
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f003 fe4d 	bl	80057b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer[timer_id].htim, TIM_CHANNEL_4);
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	4a05      	ldr	r2, [pc, #20]	; (8001b38 <TIMER_Start_All_Channels+0x54>)
 8001b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b26:	210c      	movs	r1, #12
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f003 fe45 	bl	80057b8 <HAL_TIM_PWM_Start>
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000380 	.word	0x20000380

08001b3c <UART_Idle_Line_Callback>:
/* -------------------------- Public callback functions -------------------------- */
/*
 * @brief Update the read index when the idle flag is raised
 */
void UART_Idle_Line_Callback(uart_e id)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	71fb      	strb	r3, [r7, #7]
	if(__HAL_UART_GET_FLAG(uart[id].huart, UART_FLAG_IDLE))
 8001b46:	79fa      	ldrb	r2, [r7, #7]
 8001b48:	4922      	ldr	r1, [pc, #136]	; (8001bd4 <UART_Idle_Line_Callback+0x98>)
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	019b      	lsls	r3, r3, #6
 8001b4e:	4413      	add	r3, r2
 8001b50:	011b      	lsls	r3, r3, #4
 8001b52:	440b      	add	r3, r1
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0310 	and.w	r3, r3, #16
 8001b5e:	2b10      	cmp	r3, #16
 8001b60:	d132      	bne.n	8001bc8 <UART_Idle_Line_Callback+0x8c>
	{
		uart[id].index_write_rx = LEN_BUFFER - uart[id].huart->hdmarx->Instance->NDTR ;
 8001b62:	79fa      	ldrb	r2, [r7, #7]
 8001b64:	491b      	ldr	r1, [pc, #108]	; (8001bd4 <UART_Idle_Line_Callback+0x98>)
 8001b66:	4613      	mov	r3, r2
 8001b68:	019b      	lsls	r3, r3, #6
 8001b6a:	4413      	add	r3, r2
 8001b6c:	011b      	lsls	r3, r3, #4
 8001b6e:	440b      	add	r3, r1
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	79fa      	ldrb	r2, [r7, #7]
 8001b7c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001b80:	b298      	uxth	r0, r3
 8001b82:	4914      	ldr	r1, [pc, #80]	; (8001bd4 <UART_Idle_Line_Callback+0x98>)
 8001b84:	4613      	mov	r3, r2
 8001b86:	019b      	lsls	r3, r3, #6
 8001b88:	4413      	add	r3, r2
 8001b8a:	011b      	lsls	r3, r3, #4
 8001b8c:	440b      	add	r3, r1
 8001b8e:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8001b92:	4602      	mov	r2, r0
 8001b94:	801a      	strh	r2, [r3, #0]
	  __HAL_UART_CLEAR_IDLEFLAG(uart[id].huart);
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	79fa      	ldrb	r2, [r7, #7]
 8001b9c:	490d      	ldr	r1, [pc, #52]	; (8001bd4 <UART_Idle_Line_Callback+0x98>)
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	019b      	lsls	r3, r3, #6
 8001ba2:	4413      	add	r3, r2
 8001ba4:	011b      	lsls	r3, r3, #4
 8001ba6:	440b      	add	r3, r1
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	79fa      	ldrb	r2, [r7, #7]
 8001bb2:	4908      	ldr	r1, [pc, #32]	; (8001bd4 <UART_Idle_Line_Callback+0x98>)
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	019b      	lsls	r3, r3, #6
 8001bb8:	4413      	add	r3, r2
 8001bba:	011b      	lsls	r3, r3, #4
 8001bbc:	440b      	add	r3, r1
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
	}
}
 8001bc8:	bf00      	nop
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	200005f8 	.word	0x200005f8

08001bd8 <UART_Transfer_Complete_Callback>:

/*
 * @brief Re start the dma transfer if there is data to send or reset the transmission state to idle
 */
void UART_Transfer_Complete_Callback(uart_e id)
{
 8001bd8:	b590      	push	{r4, r7, lr}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
	if(uart[id].index_write_tx != uart[id].index_read_tx)
 8001be2:	79fa      	ldrb	r2, [r7, #7]
 8001be4:	494d      	ldr	r1, [pc, #308]	; (8001d1c <UART_Transfer_Complete_Callback+0x144>)
 8001be6:	4613      	mov	r3, r2
 8001be8:	019b      	lsls	r3, r3, #6
 8001bea:	4413      	add	r3, r2
 8001bec:	011b      	lsls	r3, r3, #4
 8001bee:	440b      	add	r3, r1
 8001bf0:	f203 2306 	addw	r3, r3, #518	; 0x206
 8001bf4:	8819      	ldrh	r1, [r3, #0]
 8001bf6:	79fa      	ldrb	r2, [r7, #7]
 8001bf8:	4848      	ldr	r0, [pc, #288]	; (8001d1c <UART_Transfer_Complete_Callback+0x144>)
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	019b      	lsls	r3, r3, #6
 8001bfe:	4413      	add	r3, r2
 8001c00:	011b      	lsls	r3, r3, #4
 8001c02:	4403      	add	r3, r0
 8001c04:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	4299      	cmp	r1, r3
 8001c0c:	d077      	beq.n	8001cfe <UART_Transfer_Complete_Callback+0x126>
	{
		uint16_t nb_bytes_to_read = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	81fb      	strh	r3, [r7, #14]
		if(uart[id].index_write_tx > uart[id].index_read_rx)
 8001c12:	79fa      	ldrb	r2, [r7, #7]
 8001c14:	4941      	ldr	r1, [pc, #260]	; (8001d1c <UART_Transfer_Complete_Callback+0x144>)
 8001c16:	4613      	mov	r3, r2
 8001c18:	019b      	lsls	r3, r3, #6
 8001c1a:	4413      	add	r3, r2
 8001c1c:	011b      	lsls	r3, r3, #4
 8001c1e:	440b      	add	r3, r1
 8001c20:	f203 2306 	addw	r3, r3, #518	; 0x206
 8001c24:	8819      	ldrh	r1, [r3, #0]
 8001c26:	79fa      	ldrb	r2, [r7, #7]
 8001c28:	483c      	ldr	r0, [pc, #240]	; (8001d1c <UART_Transfer_Complete_Callback+0x144>)
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	019b      	lsls	r3, r3, #6
 8001c2e:	4413      	add	r3, r2
 8001c30:	011b      	lsls	r3, r3, #4
 8001c32:	4403      	add	r3, r0
 8001c34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001c38:	881b      	ldrh	r3, [r3, #0]
 8001c3a:	4299      	cmp	r1, r3
 8001c3c:	d916      	bls.n	8001c6c <UART_Transfer_Complete_Callback+0x94>
		{
			nb_bytes_to_read = uart[id].index_write_tx - uart[id].index_read_tx;
 8001c3e:	79fa      	ldrb	r2, [r7, #7]
 8001c40:	4936      	ldr	r1, [pc, #216]	; (8001d1c <UART_Transfer_Complete_Callback+0x144>)
 8001c42:	4613      	mov	r3, r2
 8001c44:	019b      	lsls	r3, r3, #6
 8001c46:	4413      	add	r3, r2
 8001c48:	011b      	lsls	r3, r3, #4
 8001c4a:	440b      	add	r3, r1
 8001c4c:	f203 2306 	addw	r3, r3, #518	; 0x206
 8001c50:	8819      	ldrh	r1, [r3, #0]
 8001c52:	79fa      	ldrb	r2, [r7, #7]
 8001c54:	4831      	ldr	r0, [pc, #196]	; (8001d1c <UART_Transfer_Complete_Callback+0x144>)
 8001c56:	4613      	mov	r3, r2
 8001c58:	019b      	lsls	r3, r3, #6
 8001c5a:	4413      	add	r3, r2
 8001c5c:	011b      	lsls	r3, r3, #4
 8001c5e:	4403      	add	r3, r0
 8001c60:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	1acb      	subs	r3, r1, r3
 8001c68:	81fb      	strh	r3, [r7, #14]
 8001c6a:	e00c      	b.n	8001c86 <UART_Transfer_Complete_Callback+0xae>
		}
		else
		{
			nb_bytes_to_read = LEN_BUFFER - uart[id].index_read_tx;
 8001c6c:	79fa      	ldrb	r2, [r7, #7]
 8001c6e:	492b      	ldr	r1, [pc, #172]	; (8001d1c <UART_Transfer_Complete_Callback+0x144>)
 8001c70:	4613      	mov	r3, r2
 8001c72:	019b      	lsls	r3, r3, #6
 8001c74:	4413      	add	r3, r2
 8001c76:	011b      	lsls	r3, r3, #4
 8001c78:	440b      	add	r3, r1
 8001c7a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001c84:	81fb      	strh	r3, [r7, #14]
		}
		HAL_UART_Transmit_DMA(uart[id].huart, &uart[id].buffer_tx[uart[id].index_read_tx], nb_bytes_to_read);
 8001c86:	79fa      	ldrb	r2, [r7, #7]
 8001c88:	4924      	ldr	r1, [pc, #144]	; (8001d1c <UART_Transfer_Complete_Callback+0x144>)
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	019b      	lsls	r3, r3, #6
 8001c8e:	4413      	add	r3, r2
 8001c90:	011b      	lsls	r3, r3, #4
 8001c92:	440b      	add	r3, r1
 8001c94:	6818      	ldr	r0, [r3, #0]
 8001c96:	79fa      	ldrb	r2, [r7, #7]
 8001c98:	79f9      	ldrb	r1, [r7, #7]
 8001c9a:	4c20      	ldr	r4, [pc, #128]	; (8001d1c <UART_Transfer_Complete_Callback+0x144>)
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	019b      	lsls	r3, r3, #6
 8001ca0:	440b      	add	r3, r1
 8001ca2:	011b      	lsls	r3, r3, #4
 8001ca4:	4423      	add	r3, r4
 8001ca6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	4619      	mov	r1, r3
 8001cae:	4613      	mov	r3, r2
 8001cb0:	019b      	lsls	r3, r3, #6
 8001cb2:	4413      	add	r3, r2
 8001cb4:	011b      	lsls	r3, r3, #4
 8001cb6:	440b      	add	r3, r1
 8001cb8:	4a18      	ldr	r2, [pc, #96]	; (8001d1c <UART_Transfer_Complete_Callback+0x144>)
 8001cba:	4413      	add	r3, r2
 8001cbc:	3306      	adds	r3, #6
 8001cbe:	89fa      	ldrh	r2, [r7, #14]
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f004 fba5 	bl	8006410 <HAL_UART_Transmit_DMA>
		uart[id].index_read_tx = (uart[id].index_read_tx + nb_bytes_to_read) % LEN_BUFFER;
 8001cc6:	79fa      	ldrb	r2, [r7, #7]
 8001cc8:	4914      	ldr	r1, [pc, #80]	; (8001d1c <UART_Transfer_Complete_Callback+0x144>)
 8001cca:	4613      	mov	r3, r2
 8001ccc:	019b      	lsls	r3, r3, #6
 8001cce:	4413      	add	r3, r2
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	440b      	add	r3, r1
 8001cd4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001cd8:	881a      	ldrh	r2, [r3, #0]
 8001cda:	89fb      	ldrh	r3, [r7, #14]
 8001cdc:	4413      	add	r3, r2
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	79fa      	ldrb	r2, [r7, #7]
 8001ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ce6:	b298      	uxth	r0, r3
 8001ce8:	490c      	ldr	r1, [pc, #48]	; (8001d1c <UART_Transfer_Complete_Callback+0x144>)
 8001cea:	4613      	mov	r3, r2
 8001cec:	019b      	lsls	r3, r3, #6
 8001cee:	4413      	add	r3, r2
 8001cf0:	011b      	lsls	r3, r3, #4
 8001cf2:	440b      	add	r3, r1
 8001cf4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		uart[id].transmission_state = transmission_state_eIDLE;
	}
}
 8001cfc:	e009      	b.n	8001d12 <UART_Transfer_Complete_Callback+0x13a>
		uart[id].transmission_state = transmission_state_eIDLE;
 8001cfe:	79fa      	ldrb	r2, [r7, #7]
 8001d00:	4906      	ldr	r1, [pc, #24]	; (8001d1c <UART_Transfer_Complete_Callback+0x144>)
 8001d02:	4613      	mov	r3, r2
 8001d04:	019b      	lsls	r3, r3, #6
 8001d06:	4413      	add	r3, r2
 8001d08:	011b      	lsls	r3, r3, #4
 8001d0a:	440b      	add	r3, r1
 8001d0c:	3305      	adds	r3, #5
 8001d0e:	2200      	movs	r2, #0
 8001d10:	701a      	strb	r2, [r3, #0]
}
 8001d12:	bf00      	nop
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd90      	pop	{r4, r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	200005f8 	.word	0x200005f8

08001d20 <UART_Availables>:
 * @brief Number of byte available in the RX buffer
 * @param id Id of the uart we are interested in
 * @return Number of bytes
 */
uint16_t UART_Availables(uart_e id)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]
	return get_nb_bytes_available(id);
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f000 f94f 	bl	8001fd0 <get_nb_bytes_available>
 8001d32:	4603      	mov	r3, r0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <UART_Get>:
 * 		  Does nothing if there are no characters available
 * @param id Id of the uart
 * @param c Buffer to write the character into
 */
void UART_Get(uart_e id, uint8_t * c)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	6039      	str	r1, [r7, #0]
 8001d46:	71fb      	strb	r3, [r7, #7]
	if(get_nb_bytes_available(id))
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f000 f940 	bl	8001fd0 <get_nb_bytes_available>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d035      	beq.n	8001dc2 <UART_Get+0x86>
	{
		*c = uart[id].buffer_rx[uart[id].index_read_rx];
 8001d56:	79fa      	ldrb	r2, [r7, #7]
 8001d58:	79f9      	ldrb	r1, [r7, #7]
 8001d5a:	481c      	ldr	r0, [pc, #112]	; (8001dcc <UART_Get+0x90>)
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	019b      	lsls	r3, r3, #6
 8001d60:	440b      	add	r3, r1
 8001d62:	011b      	lsls	r3, r3, #4
 8001d64:	4403      	add	r3, r0
 8001d66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	4917      	ldr	r1, [pc, #92]	; (8001dcc <UART_Get+0x90>)
 8001d70:	4613      	mov	r3, r2
 8001d72:	019b      	lsls	r3, r3, #6
 8001d74:	4413      	add	r3, r2
 8001d76:	011b      	lsls	r3, r3, #4
 8001d78:	440b      	add	r3, r1
 8001d7a:	4403      	add	r3, r0
 8001d7c:	f203 230a 	addw	r3, r3, #522	; 0x20a
 8001d80:	781a      	ldrb	r2, [r3, #0]
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	701a      	strb	r2, [r3, #0]
		uart[id].index_read_rx = (uart[id].index_read_rx + 1) % LEN_BUFFER;
 8001d86:	79fa      	ldrb	r2, [r7, #7]
 8001d88:	4910      	ldr	r1, [pc, #64]	; (8001dcc <UART_Get+0x90>)
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	019b      	lsls	r3, r3, #6
 8001d8e:	4413      	add	r3, r2
 8001d90:	011b      	lsls	r3, r3, #4
 8001d92:	440b      	add	r3, r1
 8001d94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	425a      	negs	r2, r3
 8001d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001da2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001da6:	bf58      	it	pl
 8001da8:	4253      	negpl	r3, r2
 8001daa:	79fa      	ldrb	r2, [r7, #7]
 8001dac:	b298      	uxth	r0, r3
 8001dae:	4907      	ldr	r1, [pc, #28]	; (8001dcc <UART_Get+0x90>)
 8001db0:	4613      	mov	r3, r2
 8001db2:	019b      	lsls	r3, r3, #6
 8001db4:	4413      	add	r3, r2
 8001db6:	011b      	lsls	r3, r3, #4
 8001db8:	440b      	add	r3, r1
 8001dba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	801a      	strh	r2, [r3, #0]
	}
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	200005f8 	.word	0x200005f8

08001dd0 <UART_Init>:

/*
 * @brief Initialize every uarts and start dma reception
 */
void UART_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
	/* Link  huarts to the right uarts structures */
	uart[uart_e1].huart = &huart1;
 8001dd6:	4b21      	ldr	r3, [pc, #132]	; (8001e5c <UART_Init+0x8c>)
 8001dd8:	4a21      	ldr	r2, [pc, #132]	; (8001e60 <UART_Init+0x90>)
 8001dda:	601a      	str	r2, [r3, #0]
	uart[uart_e4].huart = &huart4;
 8001ddc:	4b1f      	ldr	r3, [pc, #124]	; (8001e5c <UART_Init+0x8c>)
 8001dde:	4a21      	ldr	r2, [pc, #132]	; (8001e64 <UART_Init+0x94>)
 8001de0:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410

	/* Initialization */
	for(uint8_t u = 0; u < uart_eCOUNT; u ++)
 8001de4:	2300      	movs	r3, #0
 8001de6:	71fb      	strb	r3, [r7, #7]
 8001de8:	e02f      	b.n	8001e4a <UART_Init+0x7a>
	{
		__HAL_UART_ENABLE_IT(uart[u].huart, UART_IT_IDLE);
 8001dea:	79fa      	ldrb	r2, [r7, #7]
 8001dec:	491b      	ldr	r1, [pc, #108]	; (8001e5c <UART_Init+0x8c>)
 8001dee:	4613      	mov	r3, r2
 8001df0:	019b      	lsls	r3, r3, #6
 8001df2:	4413      	add	r3, r2
 8001df4:	011b      	lsls	r3, r3, #4
 8001df6:	440b      	add	r3, r1
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68d9      	ldr	r1, [r3, #12]
 8001dfe:	79fa      	ldrb	r2, [r7, #7]
 8001e00:	4816      	ldr	r0, [pc, #88]	; (8001e5c <UART_Init+0x8c>)
 8001e02:	4613      	mov	r3, r2
 8001e04:	019b      	lsls	r3, r3, #6
 8001e06:	4413      	add	r3, r2
 8001e08:	011b      	lsls	r3, r3, #4
 8001e0a:	4403      	add	r3, r0
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f041 0210 	orr.w	r2, r1, #16
 8001e14:	60da      	str	r2, [r3, #12]
		HAL_UART_Receive_DMA(uart[u].huart, uart[u].buffer_rx, LEN_BUFFER);
 8001e16:	79fa      	ldrb	r2, [r7, #7]
 8001e18:	4910      	ldr	r1, [pc, #64]	; (8001e5c <UART_Init+0x8c>)
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	019b      	lsls	r3, r3, #6
 8001e1e:	4413      	add	r3, r2
 8001e20:	011b      	lsls	r3, r3, #4
 8001e22:	440b      	add	r3, r1
 8001e24:	6818      	ldr	r0, [r3, #0]
 8001e26:	79fa      	ldrb	r2, [r7, #7]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	019b      	lsls	r3, r3, #6
 8001e2c:	4413      	add	r3, r2
 8001e2e:	011b      	lsls	r3, r3, #4
 8001e30:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e34:	4a09      	ldr	r2, [pc, #36]	; (8001e5c <UART_Init+0x8c>)
 8001e36:	4413      	add	r3, r2
 8001e38:	3302      	adds	r3, #2
 8001e3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f004 fb64 	bl	800650c <HAL_UART_Receive_DMA>
	for(uint8_t u = 0; u < uart_eCOUNT; u ++)
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	3301      	adds	r3, #1
 8001e48:	71fb      	strb	r3, [r7, #7]
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d9cc      	bls.n	8001dea <UART_Init+0x1a>
	}
}
 8001e50:	bf00      	nop
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	200005f8 	.word	0x200005f8
 8001e60:	20001098 	.word	0x20001098
 8001e64:	200010dc 	.word	0x200010dc

08001e68 <UART_Transmit>:
 * @param id Id of the uart to use
 * @param data Array with the data
 * @param len Length of the data array
 */
void UART_Transmit(uart_e id, uint8_t * data, uint16_t len)
{
 8001e68:	b590      	push	{r4, r7, lr}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	6039      	str	r1, [r7, #0]
 8001e72:	71fb      	strb	r3, [r7, #7]
 8001e74:	4613      	mov	r3, r2
 8001e76:	80bb      	strh	r3, [r7, #4]
	for(uint16_t c = 0; c < len; c ++)
 8001e78:	2300      	movs	r3, #0
 8001e7a:	81fb      	strh	r3, [r7, #14]
 8001e7c:	e020      	b.n	8001ec0 <UART_Transmit+0x58>
	{
		uart[id].buffer_tx[(uart[id].index_write_tx + c) % LEN_BUFFER] = data[c];
 8001e7e:	89fb      	ldrh	r3, [r7, #14]
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	18d0      	adds	r0, r2, r3
 8001e84:	79fa      	ldrb	r2, [r7, #7]
 8001e86:	79f9      	ldrb	r1, [r7, #7]
 8001e88:	4c50      	ldr	r4, [pc, #320]	; (8001fcc <UART_Transmit+0x164>)
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	019b      	lsls	r3, r3, #6
 8001e8e:	440b      	add	r3, r1
 8001e90:	011b      	lsls	r3, r3, #4
 8001e92:	4423      	add	r3, r4
 8001e94:	f203 2306 	addw	r3, r3, #518	; 0x206
 8001e98:	8819      	ldrh	r1, [r3, #0]
 8001e9a:	89fb      	ldrh	r3, [r7, #14]
 8001e9c:	440b      	add	r3, r1
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8001ea4:	7804      	ldrb	r4, [r0, #0]
 8001ea6:	4849      	ldr	r0, [pc, #292]	; (8001fcc <UART_Transmit+0x164>)
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	019b      	lsls	r3, r3, #6
 8001eac:	4413      	add	r3, r2
 8001eae:	011b      	lsls	r3, r3, #4
 8001eb0:	4403      	add	r3, r0
 8001eb2:	440b      	add	r3, r1
 8001eb4:	3306      	adds	r3, #6
 8001eb6:	4622      	mov	r2, r4
 8001eb8:	701a      	strb	r2, [r3, #0]
	for(uint16_t c = 0; c < len; c ++)
 8001eba:	89fb      	ldrh	r3, [r7, #14]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	81fb      	strh	r3, [r7, #14]
 8001ec0:	89fa      	ldrh	r2, [r7, #14]
 8001ec2:	88bb      	ldrh	r3, [r7, #4]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d3da      	bcc.n	8001e7e <UART_Transmit+0x16>
	}
	uart[id].index_write_tx = (uart[id].index_write_tx + len) % LEN_BUFFER;
 8001ec8:	79fa      	ldrb	r2, [r7, #7]
 8001eca:	4940      	ldr	r1, [pc, #256]	; (8001fcc <UART_Transmit+0x164>)
 8001ecc:	4613      	mov	r3, r2
 8001ece:	019b      	lsls	r3, r3, #6
 8001ed0:	4413      	add	r3, r2
 8001ed2:	011b      	lsls	r3, r3, #4
 8001ed4:	440b      	add	r3, r1
 8001ed6:	f203 2306 	addw	r3, r3, #518	; 0x206
 8001eda:	881a      	ldrh	r2, [r3, #0]
 8001edc:	88bb      	ldrh	r3, [r7, #4]
 8001ede:	4413      	add	r3, r2
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	79fa      	ldrb	r2, [r7, #7]
 8001ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ee8:	b298      	uxth	r0, r3
 8001eea:	4938      	ldr	r1, [pc, #224]	; (8001fcc <UART_Transmit+0x164>)
 8001eec:	4613      	mov	r3, r2
 8001eee:	019b      	lsls	r3, r3, #6
 8001ef0:	4413      	add	r3, r2
 8001ef2:	011b      	lsls	r3, r3, #4
 8001ef4:	440b      	add	r3, r1
 8001ef6:	f203 2306 	addw	r3, r3, #518	; 0x206
 8001efa:	4602      	mov	r2, r0
 8001efc:	801a      	strh	r2, [r3, #0]
	if(uart[id].transmission_state == transmission_state_eIDLE)
 8001efe:	79fa      	ldrb	r2, [r7, #7]
 8001f00:	4932      	ldr	r1, [pc, #200]	; (8001fcc <UART_Transmit+0x164>)
 8001f02:	4613      	mov	r3, r2
 8001f04:	019b      	lsls	r3, r3, #6
 8001f06:	4413      	add	r3, r2
 8001f08:	011b      	lsls	r3, r3, #4
 8001f0a:	440b      	add	r3, r1
 8001f0c:	3305      	adds	r3, #5
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d157      	bne.n	8001fc4 <UART_Transmit+0x15c>
	{
		uart[id].transmission_state = transmission_state_eIN_PROGRESS;
 8001f14:	79fa      	ldrb	r2, [r7, #7]
 8001f16:	492d      	ldr	r1, [pc, #180]	; (8001fcc <UART_Transmit+0x164>)
 8001f18:	4613      	mov	r3, r2
 8001f1a:	019b      	lsls	r3, r3, #6
 8001f1c:	4413      	add	r3, r2
 8001f1e:	011b      	lsls	r3, r3, #4
 8001f20:	440b      	add	r3, r1
 8001f22:	3305      	adds	r3, #5
 8001f24:	2201      	movs	r2, #1
 8001f26:	701a      	strb	r2, [r3, #0]
		uint16_t nb_bytes_before_end_of_buffer = LEN_BUFFER - uart[id].index_read_tx;
 8001f28:	79fa      	ldrb	r2, [r7, #7]
 8001f2a:	4928      	ldr	r1, [pc, #160]	; (8001fcc <UART_Transmit+0x164>)
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	019b      	lsls	r3, r3, #6
 8001f30:	4413      	add	r3, r2
 8001f32:	011b      	lsls	r3, r3, #4
 8001f34:	440b      	add	r3, r1
 8001f36:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001f40:	81bb      	strh	r3, [r7, #12]
		len = MIN(len, nb_bytes_before_end_of_buffer);
 8001f42:	88ba      	ldrh	r2, [r7, #4]
 8001f44:	89bb      	ldrh	r3, [r7, #12]
 8001f46:	4293      	cmp	r3, r2
 8001f48:	bf28      	it	cs
 8001f4a:	4613      	movcs	r3, r2
 8001f4c:	80bb      	strh	r3, [r7, #4]
		HAL_UART_Transmit_DMA(uart[id].huart, &uart[id].buffer_tx[uart[id].index_read_tx], len);
 8001f4e:	79fa      	ldrb	r2, [r7, #7]
 8001f50:	491e      	ldr	r1, [pc, #120]	; (8001fcc <UART_Transmit+0x164>)
 8001f52:	4613      	mov	r3, r2
 8001f54:	019b      	lsls	r3, r3, #6
 8001f56:	4413      	add	r3, r2
 8001f58:	011b      	lsls	r3, r3, #4
 8001f5a:	440b      	add	r3, r1
 8001f5c:	6818      	ldr	r0, [r3, #0]
 8001f5e:	79fa      	ldrb	r2, [r7, #7]
 8001f60:	79f9      	ldrb	r1, [r7, #7]
 8001f62:	4c1a      	ldr	r4, [pc, #104]	; (8001fcc <UART_Transmit+0x164>)
 8001f64:	460b      	mov	r3, r1
 8001f66:	019b      	lsls	r3, r3, #6
 8001f68:	440b      	add	r3, r1
 8001f6a:	011b      	lsls	r3, r3, #4
 8001f6c:	4423      	add	r3, r4
 8001f6e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	4619      	mov	r1, r3
 8001f76:	4613      	mov	r3, r2
 8001f78:	019b      	lsls	r3, r3, #6
 8001f7a:	4413      	add	r3, r2
 8001f7c:	011b      	lsls	r3, r3, #4
 8001f7e:	440b      	add	r3, r1
 8001f80:	4a12      	ldr	r2, [pc, #72]	; (8001fcc <UART_Transmit+0x164>)
 8001f82:	4413      	add	r3, r2
 8001f84:	3306      	adds	r3, #6
 8001f86:	88ba      	ldrh	r2, [r7, #4]
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f004 fa41 	bl	8006410 <HAL_UART_Transmit_DMA>
		uart[id].index_read_tx = (uart[id].index_read_tx + len) % LEN_BUFFER;
 8001f8e:	79fa      	ldrb	r2, [r7, #7]
 8001f90:	490e      	ldr	r1, [pc, #56]	; (8001fcc <UART_Transmit+0x164>)
 8001f92:	4613      	mov	r3, r2
 8001f94:	019b      	lsls	r3, r3, #6
 8001f96:	4413      	add	r3, r2
 8001f98:	011b      	lsls	r3, r3, #4
 8001f9a:	440b      	add	r3, r1
 8001f9c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001fa0:	881a      	ldrh	r2, [r3, #0]
 8001fa2:	88bb      	ldrh	r3, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	79fa      	ldrb	r2, [r7, #7]
 8001faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fae:	b298      	uxth	r0, r3
 8001fb0:	4906      	ldr	r1, [pc, #24]	; (8001fcc <UART_Transmit+0x164>)
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	019b      	lsls	r3, r3, #6
 8001fb6:	4413      	add	r3, r2
 8001fb8:	011b      	lsls	r3, r3, #4
 8001fba:	440b      	add	r3, r1
 8001fbc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	801a      	strh	r2, [r3, #0]
	}
}
 8001fc4:	bf00      	nop
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd90      	pop	{r4, r7, pc}
 8001fcc:	200005f8 	.word	0x200005f8

08001fd0 <get_nb_bytes_available>:
 * @brief Compute the numbers of byte available in the buffer
 * @param id Id of the uart
 * @return nb of bytes available
 */
uint16_t get_nb_bytes_available(uart_e id)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
	uint16_t nb = 0 ;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	81fb      	strh	r3, [r7, #14]
	if(uart[id].index_write_rx > uart[id].index_read_rx)
 8001fde:	79fa      	ldrb	r2, [r7, #7]
 8001fe0:	4932      	ldr	r1, [pc, #200]	; (80020ac <get_nb_bytes_available+0xdc>)
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	019b      	lsls	r3, r3, #6
 8001fe6:	4413      	add	r3, r2
 8001fe8:	011b      	lsls	r3, r3, #4
 8001fea:	440b      	add	r3, r1
 8001fec:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	b299      	uxth	r1, r3
 8001ff4:	79fa      	ldrb	r2, [r7, #7]
 8001ff6:	482d      	ldr	r0, [pc, #180]	; (80020ac <get_nb_bytes_available+0xdc>)
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	019b      	lsls	r3, r3, #6
 8001ffc:	4413      	add	r3, r2
 8001ffe:	011b      	lsls	r3, r3, #4
 8002000:	4403      	add	r3, r0
 8002002:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	4299      	cmp	r1, r3
 800200a:	d917      	bls.n	800203c <get_nb_bytes_available+0x6c>
	{
		nb = uart[id].index_write_rx - uart[id].index_read_rx ;
 800200c:	79fa      	ldrb	r2, [r7, #7]
 800200e:	4927      	ldr	r1, [pc, #156]	; (80020ac <get_nb_bytes_available+0xdc>)
 8002010:	4613      	mov	r3, r2
 8002012:	019b      	lsls	r3, r3, #6
 8002014:	4413      	add	r3, r2
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	440b      	add	r3, r1
 800201a:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	b299      	uxth	r1, r3
 8002022:	79fa      	ldrb	r2, [r7, #7]
 8002024:	4821      	ldr	r0, [pc, #132]	; (80020ac <get_nb_bytes_available+0xdc>)
 8002026:	4613      	mov	r3, r2
 8002028:	019b      	lsls	r3, r3, #6
 800202a:	4413      	add	r3, r2
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	4403      	add	r3, r0
 8002030:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	1acb      	subs	r3, r1, r3
 8002038:	81fb      	strh	r3, [r7, #14]
 800203a:	e030      	b.n	800209e <get_nb_bytes_available+0xce>
	}
	else if(uart[id].index_write_rx < uart[id].index_read_rx)
 800203c:	79fa      	ldrb	r2, [r7, #7]
 800203e:	491b      	ldr	r1, [pc, #108]	; (80020ac <get_nb_bytes_available+0xdc>)
 8002040:	4613      	mov	r3, r2
 8002042:	019b      	lsls	r3, r3, #6
 8002044:	4413      	add	r3, r2
 8002046:	011b      	lsls	r3, r3, #4
 8002048:	440b      	add	r3, r1
 800204a:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 800204e:	881b      	ldrh	r3, [r3, #0]
 8002050:	b299      	uxth	r1, r3
 8002052:	79fa      	ldrb	r2, [r7, #7]
 8002054:	4815      	ldr	r0, [pc, #84]	; (80020ac <get_nb_bytes_available+0xdc>)
 8002056:	4613      	mov	r3, r2
 8002058:	019b      	lsls	r3, r3, #6
 800205a:	4413      	add	r3, r2
 800205c:	011b      	lsls	r3, r3, #4
 800205e:	4403      	add	r3, r0
 8002060:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	4299      	cmp	r1, r3
 8002068:	d219      	bcs.n	800209e <get_nb_bytes_available+0xce>
	{
		nb = LEN_BUFFER - uart[id].index_read_rx + uart[id].index_write_rx ;
 800206a:	79fa      	ldrb	r2, [r7, #7]
 800206c:	490f      	ldr	r1, [pc, #60]	; (80020ac <get_nb_bytes_available+0xdc>)
 800206e:	4613      	mov	r3, r2
 8002070:	019b      	lsls	r3, r3, #6
 8002072:	4413      	add	r3, r2
 8002074:	011b      	lsls	r3, r3, #4
 8002076:	440b      	add	r3, r1
 8002078:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 800207c:	881b      	ldrh	r3, [r3, #0]
 800207e:	b299      	uxth	r1, r3
 8002080:	79fa      	ldrb	r2, [r7, #7]
 8002082:	480a      	ldr	r0, [pc, #40]	; (80020ac <get_nb_bytes_available+0xdc>)
 8002084:	4613      	mov	r3, r2
 8002086:	019b      	lsls	r3, r3, #6
 8002088:	4413      	add	r3, r2
 800208a:	011b      	lsls	r3, r3, #4
 800208c:	4403      	add	r3, r0
 800208e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	1acb      	subs	r3, r1, r3
 8002096:	b29b      	uxth	r3, r3
 8002098:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800209c:	81fb      	strh	r3, [r7, #14]
	}
	return nb;
 800209e:	89fb      	ldrh	r3, [r7, #14]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	200005f8 	.word	0x200005f8

080020b0 <MPU_Init>:
/*
 * @brief Wake up the MPU6000
 *		  Configure the Gyroscope and the Accelerometer
 */
void MPU_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af02      	add	r7, sp, #8
	/* Set the Gyroscope and Accelerometer data buffer */
	mpu.gyro_data = &mpu.data[8];
 80020b6:	4b54      	ldr	r3, [pc, #336]	; (8002208 <MPU_Init+0x158>)
 80020b8:	4a54      	ldr	r2, [pc, #336]	; (800220c <MPU_Init+0x15c>)
 80020ba:	611a      	str	r2, [r3, #16]
	mpu.acc_data = &mpu.data[0];
 80020bc:	4b52      	ldr	r3, [pc, #328]	; (8002208 <MPU_Init+0x158>)
 80020be:	4a54      	ldr	r2, [pc, #336]	; (8002210 <MPU_Init+0x160>)
 80020c0:	625a      	str	r2, [r3, #36]	; 0x24
	/* Disable I2C */
	SPI_Transmit(SPI_MPU, CS_MPU, mpu_disable_i2c, 2);
	HAL_Delay(150);
#else
	/* Power up the mpu an wait for it to start */
	HAL_GPIO_WritePin(MPU_POWER_GPIO_Port, MPU_POWER_Pin, GPIO_PIN_SET);
 80020c2:	2201      	movs	r2, #1
 80020c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020c8:	4852      	ldr	r0, [pc, #328]	; (8002214 <MPU_Init+0x164>)
 80020ca:	f001 feab 	bl	8003e24 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80020ce:	20c8      	movs	r0, #200	; 0xc8
 80020d0:	f000 ffd4 	bl	800307c <HAL_Delay>
	/* Wake up the mpu */
	uint8_t wakeup_data = 0x80;
 80020d4:	2380      	movs	r3, #128	; 0x80
 80020d6:	71fb      	strb	r3, [r7, #7]
	I2C_Mem_Write(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_PWR_MGMT_1, &wakeup_data, 1);
 80020d8:	1dfb      	adds	r3, r7, #7
 80020da:	2201      	movs	r2, #1
 80020dc:	9200      	str	r2, [sp, #0]
 80020de:	226b      	movs	r2, #107	; 0x6b
 80020e0:	21d0      	movs	r1, #208	; 0xd0
 80020e2:	2000      	movs	r0, #0
 80020e4:	f7ff fcba 	bl	8001a5c <I2C_Mem_Write>
	HAL_Delay(15);
 80020e8:	200f      	movs	r0, #15
 80020ea:	f000 ffc7 	bl	800307c <HAL_Delay>
	/* Select the clock */
	uint8_t clock_select = 0x03;
 80020ee:	2303      	movs	r3, #3
 80020f0:	71bb      	strb	r3, [r7, #6]
	I2C_Mem_Write(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_PWR_MGMT_1, &clock_select, 1);
 80020f2:	1dbb      	adds	r3, r7, #6
 80020f4:	2201      	movs	r2, #1
 80020f6:	9200      	str	r2, [sp, #0]
 80020f8:	226b      	movs	r2, #107	; 0x6b
 80020fa:	21d0      	movs	r1, #208	; 0xd0
 80020fc:	2000      	movs	r0, #0
 80020fe:	f7ff fcad 	bl	8001a5c <I2C_Mem_Write>
	SPI_Transmit(SPI_MPU, CS_MPU, temp_write, 2);
	HAL_Delay(150);
#else
	/* Sensitivity configuration */
	uint8_t temp;
	I2C_Mem_Read(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_GYRO_CONFIG, &temp, 1);
 8002102:	1d7b      	adds	r3, r7, #5
 8002104:	2201      	movs	r2, #1
 8002106:	9200      	str	r2, [sp, #0]
 8002108:	221b      	movs	r2, #27
 800210a:	21d0      	movs	r1, #208	; 0xd0
 800210c:	2000      	movs	r0, #0
 800210e:	f7ff fcc7 	bl	8001aa0 <I2C_Mem_Read>
	temp = (temp & 0xE7) | (uint8_t)mpu.gyro_range << 3;
 8002112:	797b      	ldrb	r3, [r7, #5]
 8002114:	b25b      	sxtb	r3, r3
 8002116:	f023 0318 	bic.w	r3, r3, #24
 800211a:	b25a      	sxtb	r2, r3
 800211c:	4b3a      	ldr	r3, [pc, #232]	; (8002208 <MPU_Init+0x158>)
 800211e:	7bdb      	ldrb	r3, [r3, #15]
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	b25b      	sxtb	r3, r3
 8002124:	4313      	orrs	r3, r2
 8002126:	b25b      	sxtb	r3, r3
 8002128:	b2db      	uxtb	r3, r3
 800212a:	717b      	strb	r3, [r7, #5]
	I2C_Mem_Write(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_GYRO_CONFIG, &temp, 1);
 800212c:	1d7b      	adds	r3, r7, #5
 800212e:	2201      	movs	r2, #1
 8002130:	9200      	str	r2, [sp, #0]
 8002132:	221b      	movs	r2, #27
 8002134:	21d0      	movs	r1, #208	; 0xd0
 8002136:	2000      	movs	r0, #0
 8002138:	f7ff fc90 	bl	8001a5c <I2C_Mem_Write>
#endif
	switch(mpu.gyro_range)
 800213c:	4b32      	ldr	r3, [pc, #200]	; (8002208 <MPU_Init+0x158>)
 800213e:	7bdb      	ldrb	r3, [r3, #15]
 8002140:	2b03      	cmp	r3, #3
 8002142:	d81b      	bhi.n	800217c <MPU_Init+0xcc>
 8002144:	a201      	add	r2, pc, #4	; (adr r2, 800214c <MPU_Init+0x9c>)
 8002146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800214a:	bf00      	nop
 800214c:	0800215d 	.word	0x0800215d
 8002150:	08002165 	.word	0x08002165
 8002154:	0800216d 	.word	0x0800216d
 8002158:	08002175 	.word	0x08002175
	{
		case MPU_GYRO_250s :
			mpu.gyro_conversion = (float)1 / MPU6050_GYRO_SENS_250 ;
 800215c:	4b2a      	ldr	r3, [pc, #168]	; (8002208 <MPU_Init+0x158>)
 800215e:	4a2e      	ldr	r2, [pc, #184]	; (8002218 <MPU_Init+0x168>)
 8002160:	615a      	str	r2, [r3, #20]
			break;
 8002162:	e00b      	b.n	800217c <MPU_Init+0xcc>
		case MPU_GYRO_500s :
			mpu.gyro_conversion = (float)1 / MPU6050_GYRO_SENS_500 ;
 8002164:	4b28      	ldr	r3, [pc, #160]	; (8002208 <MPU_Init+0x158>)
 8002166:	4a2d      	ldr	r2, [pc, #180]	; (800221c <MPU_Init+0x16c>)
 8002168:	615a      	str	r2, [r3, #20]
			break;
 800216a:	e007      	b.n	800217c <MPU_Init+0xcc>
		case MPU_GYRO_1000s :
			mpu.gyro_conversion = (float)1 / MPU6050_GYRO_SENS_1000 ;
 800216c:	4b26      	ldr	r3, [pc, #152]	; (8002208 <MPU_Init+0x158>)
 800216e:	4a2c      	ldr	r2, [pc, #176]	; (8002220 <MPU_Init+0x170>)
 8002170:	615a      	str	r2, [r3, #20]
			break;
 8002172:	e003      	b.n	800217c <MPU_Init+0xcc>
		case MPU_GYRO_2000s :
			mpu.gyro_conversion = (float)1 / MPU6050_GYRO_SENS_2000 ;
 8002174:	4b24      	ldr	r3, [pc, #144]	; (8002208 <MPU_Init+0x158>)
 8002176:	4a2b      	ldr	r2, [pc, #172]	; (8002224 <MPU_Init+0x174>)
 8002178:	615a      	str	r2, [r3, #20]
			break;
 800217a:	bf00      	nop
	temp_write[1] = (temp_read[1] & 0xE7) | (uint8_t)mpu.acc_range << 3;
	SPI_Transmit(SPI_MPU, CS_MPU, temp_write, 2);
	HAL_Delay(150);
#else
	/* Sensitivity configuration */
	I2C_Mem_Read(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_ACCEL_CONFIG, &temp, 1);
 800217c:	1d7b      	adds	r3, r7, #5
 800217e:	2201      	movs	r2, #1
 8002180:	9200      	str	r2, [sp, #0]
 8002182:	221c      	movs	r2, #28
 8002184:	21d0      	movs	r1, #208	; 0xd0
 8002186:	2000      	movs	r0, #0
 8002188:	f7ff fc8a 	bl	8001aa0 <I2C_Mem_Read>
	temp = (temp & 0xE7) | (uint8_t)mpu.acc_range << 3;
 800218c:	797b      	ldrb	r3, [r7, #5]
 800218e:	b25b      	sxtb	r3, r3
 8002190:	f023 0318 	bic.w	r3, r3, #24
 8002194:	b25a      	sxtb	r2, r3
 8002196:	4b1c      	ldr	r3, [pc, #112]	; (8002208 <MPU_Init+0x158>)
 8002198:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	b25b      	sxtb	r3, r3
 80021a0:	4313      	orrs	r3, r2
 80021a2:	b25b      	sxtb	r3, r3
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	717b      	strb	r3, [r7, #5]
	I2C_Mem_Write(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_ACCEL_CONFIG, &temp, 1);
 80021a8:	1d7b      	adds	r3, r7, #5
 80021aa:	2201      	movs	r2, #1
 80021ac:	9200      	str	r2, [sp, #0]
 80021ae:	221c      	movs	r2, #28
 80021b0:	21d0      	movs	r1, #208	; 0xd0
 80021b2:	2000      	movs	r0, #0
 80021b4:	f7ff fc52 	bl	8001a5c <I2C_Mem_Write>
#endif
	switch(mpu.acc_range)
 80021b8:	4b13      	ldr	r3, [pc, #76]	; (8002208 <MPU_Init+0x158>)
 80021ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80021be:	2b03      	cmp	r3, #3
 80021c0:	d81e      	bhi.n	8002200 <MPU_Init+0x150>
 80021c2:	a201      	add	r2, pc, #4	; (adr r2, 80021c8 <MPU_Init+0x118>)
 80021c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c8:	080021d9 	.word	0x080021d9
 80021cc:	080021e3 	.word	0x080021e3
 80021d0:	080021ed 	.word	0x080021ed
 80021d4:	080021f7 	.word	0x080021f7
	{
		case MPU_ACC_2G :
			mpu.acc_conversion = (float)1 / MPU6050_ACCE_SENS_2 ;
 80021d8:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <MPU_Init+0x158>)
 80021da:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80021de:	62da      	str	r2, [r3, #44]	; 0x2c
			break;
 80021e0:	e00e      	b.n	8002200 <MPU_Init+0x150>
		case MPU_ACC_4G :
			mpu.acc_conversion = (float)1 / MPU6050_ACCE_SENS_4 ;
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <MPU_Init+0x158>)
 80021e4:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80021e8:	62da      	str	r2, [r3, #44]	; 0x2c
			break;
 80021ea:	e009      	b.n	8002200 <MPU_Init+0x150>
		case MPU_ACC_8G :
			mpu.acc_conversion = (float)1 / MPU6050_ACCE_SENS_8 ;
 80021ec:	4b06      	ldr	r3, [pc, #24]	; (8002208 <MPU_Init+0x158>)
 80021ee:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80021f2:	62da      	str	r2, [r3, #44]	; 0x2c
			break;
 80021f4:	e004      	b.n	8002200 <MPU_Init+0x150>
		case MPU_ACC_16G :
			mpu.acc_conversion = (float)1 / MPU6050_ACCE_SENS_16 ;
 80021f6:	4b04      	ldr	r3, [pc, #16]	; (8002208 <MPU_Init+0x158>)
 80021f8:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 80021fc:	62da      	str	r2, [r3, #44]	; 0x2c
			break;
 80021fe:	bf00      	nop
	}
}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20000384 	.word	0x20000384
 800220c:	2000038d 	.word	0x2000038d
 8002210:	20000385 	.word	0x20000385
 8002214:	40020800 	.word	0x40020800
 8002218:	3bfa232d 	.word	0x3bfa232d
 800221c:	3c7a232d 	.word	0x3c7a232d
 8002220:	3cf9c190 	.word	0x3cf9c190
 8002224:	3d79c190 	.word	0x3d79c190

08002228 <MPU_Get_Gyro_Ptr>:
float * MPU_Get_Gyro_Ptr(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
	return mpu.gyro;
 800222c:	4b02      	ldr	r3, [pc, #8]	; (8002238 <MPU_Get_Gyro_Ptr+0x10>)
}
 800222e:	4618      	mov	r0, r3
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	2000039c 	.word	0x2000039c

0800223c <MPU_Get_Acc_Ptr>:

float * MPU_Get_Acc_Ptr(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
	return mpu.acc;
 8002240:	4b02      	ldr	r3, [pc, #8]	; (800224c <MPU_Get_Acc_Ptr+0x10>)
}
 8002242:	4618      	mov	r0, r3
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	200003b4 	.word	0x200003b4

08002250 <MPU_Read_All>:

void MPU_Read_All(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af02      	add	r7, sp, #8
#if USE_SPI
	uint8_t registers [14] = {MPU6050_ACCEL_XOUT_H | MPU6050_READ};
	SPI_Transmit_Receive(SPI_MPU, CS_MPU, registers, mpu.data, 14);
#else
	I2C_Mem_Read(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_ACCEL_XOUT_H, mpu.data, 14);
 8002256:	230e      	movs	r3, #14
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <MPU_Read_All+0x24>)
 800225c:	223b      	movs	r2, #59	; 0x3b
 800225e:	21d0      	movs	r1, #208	; 0xd0
 8002260:	2000      	movs	r0, #0
 8002262:	f7ff fc1d 	bl	8001aa0 <I2C_Mem_Read>
#endif
	MPU_Convert_Acc_Data();
 8002266:	f000 f807 	bl	8002278 <MPU_Convert_Acc_Data>
	MPU_Convert_Gyro_Data();
 800226a:	f000 f859 	bl	8002320 <MPU_Convert_Gyro_Data>
}
 800226e:	bf00      	nop
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	20000385 	.word	0x20000385

08002278 <MPU_Convert_Acc_Data>:

/*
 * @brief Convert acc bytes to measurement
 */
void MPU_Convert_Acc_Data(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
	mpu.acc[0] = (int16_t)(mpu.acc_data[1] | (mpu.acc_data[0] << 8)) * mpu.acc_conversion;
 800227c:	4b27      	ldr	r3, [pc, #156]	; (800231c <MPU_Convert_Acc_Data+0xa4>)
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	3301      	adds	r3, #1
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	b21a      	sxth	r2, r3
 8002286:	4b25      	ldr	r3, [pc, #148]	; (800231c <MPU_Convert_Acc_Data+0xa4>)
 8002288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	021b      	lsls	r3, r3, #8
 800228e:	b21b      	sxth	r3, r3
 8002290:	4313      	orrs	r3, r2
 8002292:	b21b      	sxth	r3, r3
 8002294:	ee07 3a90 	vmov	s15, r3
 8002298:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800229c:	4b1f      	ldr	r3, [pc, #124]	; (800231c <MPU_Convert_Acc_Data+0xa4>)
 800229e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80022a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022a6:	4b1d      	ldr	r3, [pc, #116]	; (800231c <MPU_Convert_Acc_Data+0xa4>)
 80022a8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	mpu.acc[1] = (int16_t)(mpu.acc_data[3] | (mpu.acc_data[2] << 8)) * mpu.acc_conversion;
 80022ac:	4b1b      	ldr	r3, [pc, #108]	; (800231c <MPU_Convert_Acc_Data+0xa4>)
 80022ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b0:	3303      	adds	r3, #3
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	b21a      	sxth	r2, r3
 80022b6:	4b19      	ldr	r3, [pc, #100]	; (800231c <MPU_Convert_Acc_Data+0xa4>)
 80022b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ba:	3302      	adds	r3, #2
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	021b      	lsls	r3, r3, #8
 80022c0:	b21b      	sxth	r3, r3
 80022c2:	4313      	orrs	r3, r2
 80022c4:	b21b      	sxth	r3, r3
 80022c6:	ee07 3a90 	vmov	s15, r3
 80022ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022ce:	4b13      	ldr	r3, [pc, #76]	; (800231c <MPU_Convert_Acc_Data+0xa4>)
 80022d0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80022d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022d8:	4b10      	ldr	r3, [pc, #64]	; (800231c <MPU_Convert_Acc_Data+0xa4>)
 80022da:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	mpu.acc[2] = (int16_t)(mpu.acc_data[5] | (mpu.acc_data[4] << 8)) * mpu.acc_conversion;
 80022de:	4b0f      	ldr	r3, [pc, #60]	; (800231c <MPU_Convert_Acc_Data+0xa4>)
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	3305      	adds	r3, #5
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	b21a      	sxth	r2, r3
 80022e8:	4b0c      	ldr	r3, [pc, #48]	; (800231c <MPU_Convert_Acc_Data+0xa4>)
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	3304      	adds	r3, #4
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	021b      	lsls	r3, r3, #8
 80022f2:	b21b      	sxth	r3, r3
 80022f4:	4313      	orrs	r3, r2
 80022f6:	b21b      	sxth	r3, r3
 80022f8:	ee07 3a90 	vmov	s15, r3
 80022fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002300:	4b06      	ldr	r3, [pc, #24]	; (800231c <MPU_Convert_Acc_Data+0xa4>)
 8002302:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800230a:	4b04      	ldr	r3, [pc, #16]	; (800231c <MPU_Convert_Acc_Data+0xa4>)
 800230c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	20000384 	.word	0x20000384

08002320 <MPU_Convert_Gyro_Data>:

/*
 * @brief Convert gyro bytes to measurement
 */
void MPU_Convert_Gyro_Data(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
	mpu.gyro[0] = (int16_t)(mpu.gyro_data[1] | (mpu.gyro_data[0] << 8)) * mpu.gyro_conversion;
 8002324:	4b27      	ldr	r3, [pc, #156]	; (80023c4 <MPU_Convert_Gyro_Data+0xa4>)
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	3301      	adds	r3, #1
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	b21a      	sxth	r2, r3
 800232e:	4b25      	ldr	r3, [pc, #148]	; (80023c4 <MPU_Convert_Gyro_Data+0xa4>)
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	021b      	lsls	r3, r3, #8
 8002336:	b21b      	sxth	r3, r3
 8002338:	4313      	orrs	r3, r2
 800233a:	b21b      	sxth	r3, r3
 800233c:	ee07 3a90 	vmov	s15, r3
 8002340:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002344:	4b1f      	ldr	r3, [pc, #124]	; (80023c4 <MPU_Convert_Gyro_Data+0xa4>)
 8002346:	edd3 7a05 	vldr	s15, [r3, #20]
 800234a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800234e:	4b1d      	ldr	r3, [pc, #116]	; (80023c4 <MPU_Convert_Gyro_Data+0xa4>)
 8002350:	edc3 7a06 	vstr	s15, [r3, #24]
	mpu.gyro[1] = (int16_t)(mpu.gyro_data[3] | (mpu.gyro_data[2] << 8)) * mpu.gyro_conversion;
 8002354:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <MPU_Convert_Gyro_Data+0xa4>)
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	3303      	adds	r3, #3
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	b21a      	sxth	r2, r3
 800235e:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <MPU_Convert_Gyro_Data+0xa4>)
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	3302      	adds	r3, #2
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	021b      	lsls	r3, r3, #8
 8002368:	b21b      	sxth	r3, r3
 800236a:	4313      	orrs	r3, r2
 800236c:	b21b      	sxth	r3, r3
 800236e:	ee07 3a90 	vmov	s15, r3
 8002372:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002376:	4b13      	ldr	r3, [pc, #76]	; (80023c4 <MPU_Convert_Gyro_Data+0xa4>)
 8002378:	edd3 7a05 	vldr	s15, [r3, #20]
 800237c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002380:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <MPU_Convert_Gyro_Data+0xa4>)
 8002382:	edc3 7a07 	vstr	s15, [r3, #28]
	mpu.gyro[2] = (int16_t)(mpu.gyro_data[5] | (mpu.gyro_data[4] << 8)) * mpu.gyro_conversion;
 8002386:	4b0f      	ldr	r3, [pc, #60]	; (80023c4 <MPU_Convert_Gyro_Data+0xa4>)
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	3305      	adds	r3, #5
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	b21a      	sxth	r2, r3
 8002390:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <MPU_Convert_Gyro_Data+0xa4>)
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	3304      	adds	r3, #4
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	021b      	lsls	r3, r3, #8
 800239a:	b21b      	sxth	r3, r3
 800239c:	4313      	orrs	r3, r2
 800239e:	b21b      	sxth	r3, r3
 80023a0:	ee07 3a90 	vmov	s15, r3
 80023a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <MPU_Convert_Gyro_Data+0xa4>)
 80023aa:	edd3 7a05 	vldr	s15, [r3, #20]
 80023ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023b2:	4b04      	ldr	r3, [pc, #16]	; (80023c4 <MPU_Convert_Gyro_Data+0xa4>)
 80023b4:	edc3 7a08 	vstr	s15, [r3, #32]
}
 80023b8:	bf00      	nop
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	20000384 	.word	0x20000384

080023c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	607b      	str	r3, [r7, #4]
 80023d2:	4b27      	ldr	r3, [pc, #156]	; (8002470 <MX_DMA_Init+0xa8>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	4a26      	ldr	r2, [pc, #152]	; (8002470 <MX_DMA_Init+0xa8>)
 80023d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023dc:	6313      	str	r3, [r2, #48]	; 0x30
 80023de:	4b24      	ldr	r3, [pc, #144]	; (8002470 <MX_DMA_Init+0xa8>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023e6:	607b      	str	r3, [r7, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	603b      	str	r3, [r7, #0]
 80023ee:	4b20      	ldr	r3, [pc, #128]	; (8002470 <MX_DMA_Init+0xa8>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	4a1f      	ldr	r2, [pc, #124]	; (8002470 <MX_DMA_Init+0xa8>)
 80023f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023f8:	6313      	str	r3, [r2, #48]	; 0x30
 80023fa:	4b1d      	ldr	r3, [pc, #116]	; (8002470 <MX_DMA_Init+0xa8>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002402:	603b      	str	r3, [r7, #0]
 8002404:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002406:	2200      	movs	r2, #0
 8002408:	2100      	movs	r1, #0
 800240a:	200b      	movs	r0, #11
 800240c:	f000 ff35 	bl	800327a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002410:	200b      	movs	r0, #11
 8002412:	f000 ff4e 	bl	80032b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002416:	2200      	movs	r2, #0
 8002418:	2100      	movs	r1, #0
 800241a:	200d      	movs	r0, #13
 800241c:	f000 ff2d 	bl	800327a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002420:	200d      	movs	r0, #13
 8002422:	f000 ff46 	bl	80032b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002426:	2200      	movs	r2, #0
 8002428:	2100      	movs	r1, #0
 800242a:	200f      	movs	r0, #15
 800242c:	f000 ff25 	bl	800327a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002430:	200f      	movs	r0, #15
 8002432:	f000 ff3e 	bl	80032b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002436:	2200      	movs	r2, #0
 8002438:	2100      	movs	r1, #0
 800243a:	2011      	movs	r0, #17
 800243c:	f000 ff1d 	bl	800327a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002440:	2011      	movs	r0, #17
 8002442:	f000 ff36 	bl	80032b2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002446:	2200      	movs	r2, #0
 8002448:	2100      	movs	r1, #0
 800244a:	203a      	movs	r0, #58	; 0x3a
 800244c:	f000 ff15 	bl	800327a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002450:	203a      	movs	r0, #58	; 0x3a
 8002452:	f000 ff2e 	bl	80032b2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002456:	2200      	movs	r2, #0
 8002458:	2100      	movs	r1, #0
 800245a:	2046      	movs	r0, #70	; 0x46
 800245c:	f000 ff0d 	bl	800327a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002460:	2046      	movs	r0, #70	; 0x46
 8002462:	f000 ff26 	bl	80032b2 <HAL_NVIC_EnableIRQ>

}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40023800 	.word	0x40023800

08002474 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b088      	sub	sp, #32
 8002478:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800247a:	f107 030c 	add.w	r3, r7, #12
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	605a      	str	r2, [r3, #4]
 8002484:	609a      	str	r2, [r3, #8]
 8002486:	60da      	str	r2, [r3, #12]
 8002488:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	60bb      	str	r3, [r7, #8]
 800248e:	4b20      	ldr	r3, [pc, #128]	; (8002510 <MX_GPIO_Init+0x9c>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	4a1f      	ldr	r2, [pc, #124]	; (8002510 <MX_GPIO_Init+0x9c>)
 8002494:	f043 0301 	orr.w	r3, r3, #1
 8002498:	6313      	str	r3, [r2, #48]	; 0x30
 800249a:	4b1d      	ldr	r3, [pc, #116]	; (8002510 <MX_GPIO_Init+0x9c>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	60bb      	str	r3, [r7, #8]
 80024a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024a6:	2300      	movs	r3, #0
 80024a8:	607b      	str	r3, [r7, #4]
 80024aa:	4b19      	ldr	r3, [pc, #100]	; (8002510 <MX_GPIO_Init+0x9c>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	4a18      	ldr	r2, [pc, #96]	; (8002510 <MX_GPIO_Init+0x9c>)
 80024b0:	f043 0302 	orr.w	r3, r3, #2
 80024b4:	6313      	str	r3, [r2, #48]	; 0x30
 80024b6:	4b16      	ldr	r3, [pc, #88]	; (8002510 <MX_GPIO_Init+0x9c>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	607b      	str	r3, [r7, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	603b      	str	r3, [r7, #0]
 80024c6:	4b12      	ldr	r3, [pc, #72]	; (8002510 <MX_GPIO_Init+0x9c>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	4a11      	ldr	r2, [pc, #68]	; (8002510 <MX_GPIO_Init+0x9c>)
 80024cc:	f043 0304 	orr.w	r3, r3, #4
 80024d0:	6313      	str	r3, [r2, #48]	; 0x30
 80024d2:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <MX_GPIO_Init+0x9c>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	f003 0304 	and.w	r3, r3, #4
 80024da:	603b      	str	r3, [r7, #0]
 80024dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MPU_POWER_GPIO_Port, MPU_POWER_Pin, GPIO_PIN_RESET);
 80024de:	2200      	movs	r2, #0
 80024e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024e4:	480b      	ldr	r0, [pc, #44]	; (8002514 <MX_GPIO_Init+0xa0>)
 80024e6:	f001 fc9d 	bl	8003e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MPU_POWER_Pin;
 80024ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024f0:	2301      	movs	r3, #1
 80024f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f8:	2300      	movs	r3, #0
 80024fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MPU_POWER_GPIO_Port, &GPIO_InitStruct);
 80024fc:	f107 030c 	add.w	r3, r7, #12
 8002500:	4619      	mov	r1, r3
 8002502:	4804      	ldr	r0, [pc, #16]	; (8002514 <MX_GPIO_Init+0xa0>)
 8002504:	f001 faf2 	bl	8003aec <HAL_GPIO_Init>

}
 8002508:	bf00      	nop
 800250a:	3720      	adds	r7, #32
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40023800 	.word	0x40023800
 8002514:	40020800 	.word	0x40020800

08002518 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800251c:	4b12      	ldr	r3, [pc, #72]	; (8002568 <MX_I2C1_Init+0x50>)
 800251e:	4a13      	ldr	r2, [pc, #76]	; (800256c <MX_I2C1_Init+0x54>)
 8002520:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002522:	4b11      	ldr	r3, [pc, #68]	; (8002568 <MX_I2C1_Init+0x50>)
 8002524:	4a12      	ldr	r2, [pc, #72]	; (8002570 <MX_I2C1_Init+0x58>)
 8002526:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002528:	4b0f      	ldr	r3, [pc, #60]	; (8002568 <MX_I2C1_Init+0x50>)
 800252a:	2200      	movs	r2, #0
 800252c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800252e:	4b0e      	ldr	r3, [pc, #56]	; (8002568 <MX_I2C1_Init+0x50>)
 8002530:	2200      	movs	r2, #0
 8002532:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002534:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <MX_I2C1_Init+0x50>)
 8002536:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800253a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800253c:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <MX_I2C1_Init+0x50>)
 800253e:	2200      	movs	r2, #0
 8002540:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002542:	4b09      	ldr	r3, [pc, #36]	; (8002568 <MX_I2C1_Init+0x50>)
 8002544:	2200      	movs	r2, #0
 8002546:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002548:	4b07      	ldr	r3, [pc, #28]	; (8002568 <MX_I2C1_Init+0x50>)
 800254a:	2200      	movs	r2, #0
 800254c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800254e:	4b06      	ldr	r3, [pc, #24]	; (8002568 <MX_I2C1_Init+0x50>)
 8002550:	2200      	movs	r2, #0
 8002552:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002554:	4804      	ldr	r0, [pc, #16]	; (8002568 <MX_I2C1_Init+0x50>)
 8002556:	f001 fc7f 	bl	8003e58 <HAL_I2C_Init>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002560:	f000 f954 	bl	800280c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002564:	bf00      	nop
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20000e7c 	.word	0x20000e7c
 800256c:	40005400 	.word	0x40005400
 8002570:	00061a80 	.word	0x00061a80

08002574 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08a      	sub	sp, #40	; 0x28
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257c:	f107 0314 	add.w	r3, r7, #20
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	60da      	str	r2, [r3, #12]
 800258a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a48      	ldr	r2, [pc, #288]	; (80026b4 <HAL_I2C_MspInit+0x140>)
 8002592:	4293      	cmp	r3, r2
 8002594:	f040 8089 	bne.w	80026aa <HAL_I2C_MspInit+0x136>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002598:	2300      	movs	r3, #0
 800259a:	613b      	str	r3, [r7, #16]
 800259c:	4b46      	ldr	r3, [pc, #280]	; (80026b8 <HAL_I2C_MspInit+0x144>)
 800259e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a0:	4a45      	ldr	r2, [pc, #276]	; (80026b8 <HAL_I2C_MspInit+0x144>)
 80025a2:	f043 0302 	orr.w	r3, r3, #2
 80025a6:	6313      	str	r3, [r2, #48]	; 0x30
 80025a8:	4b43      	ldr	r3, [pc, #268]	; (80026b8 <HAL_I2C_MspInit+0x144>)
 80025aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	613b      	str	r3, [r7, #16]
 80025b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025b4:	2300      	movs	r3, #0
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	4b3f      	ldr	r3, [pc, #252]	; (80026b8 <HAL_I2C_MspInit+0x144>)
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	4a3e      	ldr	r2, [pc, #248]	; (80026b8 <HAL_I2C_MspInit+0x144>)
 80025be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025c2:	6413      	str	r3, [r2, #64]	; 0x40
 80025c4:	4b3c      	ldr	r3, [pc, #240]	; (80026b8 <HAL_I2C_MspInit+0x144>)
 80025c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025d6:	2312      	movs	r3, #18
 80025d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025de:	2303      	movs	r3, #3
 80025e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025e2:	2304      	movs	r3, #4
 80025e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e6:	f107 0314 	add.w	r3, r7, #20
 80025ea:	4619      	mov	r1, r3
 80025ec:	4833      	ldr	r0, [pc, #204]	; (80026bc <HAL_I2C_MspInit+0x148>)
 80025ee:	f001 fa7d 	bl	8003aec <HAL_GPIO_Init>

    /* I2C1 clock enable */

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80025f2:	4b33      	ldr	r3, [pc, #204]	; (80026c0 <HAL_I2C_MspInit+0x14c>)
 80025f4:	4a33      	ldr	r2, [pc, #204]	; (80026c4 <HAL_I2C_MspInit+0x150>)
 80025f6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80025f8:	4b31      	ldr	r3, [pc, #196]	; (80026c0 <HAL_I2C_MspInit+0x14c>)
 80025fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025fe:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002600:	4b2f      	ldr	r3, [pc, #188]	; (80026c0 <HAL_I2C_MspInit+0x14c>)
 8002602:	2200      	movs	r2, #0
 8002604:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002606:	4b2e      	ldr	r3, [pc, #184]	; (80026c0 <HAL_I2C_MspInit+0x14c>)
 8002608:	2200      	movs	r2, #0
 800260a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800260c:	4b2c      	ldr	r3, [pc, #176]	; (80026c0 <HAL_I2C_MspInit+0x14c>)
 800260e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002612:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002614:	4b2a      	ldr	r3, [pc, #168]	; (80026c0 <HAL_I2C_MspInit+0x14c>)
 8002616:	2200      	movs	r2, #0
 8002618:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800261a:	4b29      	ldr	r3, [pc, #164]	; (80026c0 <HAL_I2C_MspInit+0x14c>)
 800261c:	2200      	movs	r2, #0
 800261e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002620:	4b27      	ldr	r3, [pc, #156]	; (80026c0 <HAL_I2C_MspInit+0x14c>)
 8002622:	2200      	movs	r2, #0
 8002624:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002626:	4b26      	ldr	r3, [pc, #152]	; (80026c0 <HAL_I2C_MspInit+0x14c>)
 8002628:	2200      	movs	r2, #0
 800262a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800262c:	4b24      	ldr	r3, [pc, #144]	; (80026c0 <HAL_I2C_MspInit+0x14c>)
 800262e:	2200      	movs	r2, #0
 8002630:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002632:	4823      	ldr	r0, [pc, #140]	; (80026c0 <HAL_I2C_MspInit+0x14c>)
 8002634:	f000 fe58 	bl	80032e8 <HAL_DMA_Init>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 800263e:	f000 f8e5 	bl	800280c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a1e      	ldr	r2, [pc, #120]	; (80026c0 <HAL_I2C_MspInit+0x14c>)
 8002646:	639a      	str	r2, [r3, #56]	; 0x38
 8002648:	4a1d      	ldr	r2, [pc, #116]	; (80026c0 <HAL_I2C_MspInit+0x14c>)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800264e:	4b1e      	ldr	r3, [pc, #120]	; (80026c8 <HAL_I2C_MspInit+0x154>)
 8002650:	4a1e      	ldr	r2, [pc, #120]	; (80026cc <HAL_I2C_MspInit+0x158>)
 8002652:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8002654:	4b1c      	ldr	r3, [pc, #112]	; (80026c8 <HAL_I2C_MspInit+0x154>)
 8002656:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800265a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800265c:	4b1a      	ldr	r3, [pc, #104]	; (80026c8 <HAL_I2C_MspInit+0x154>)
 800265e:	2240      	movs	r2, #64	; 0x40
 8002660:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002662:	4b19      	ldr	r3, [pc, #100]	; (80026c8 <HAL_I2C_MspInit+0x154>)
 8002664:	2200      	movs	r2, #0
 8002666:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002668:	4b17      	ldr	r3, [pc, #92]	; (80026c8 <HAL_I2C_MspInit+0x154>)
 800266a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800266e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002670:	4b15      	ldr	r3, [pc, #84]	; (80026c8 <HAL_I2C_MspInit+0x154>)
 8002672:	2200      	movs	r2, #0
 8002674:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002676:	4b14      	ldr	r3, [pc, #80]	; (80026c8 <HAL_I2C_MspInit+0x154>)
 8002678:	2200      	movs	r2, #0
 800267a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800267c:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <HAL_I2C_MspInit+0x154>)
 800267e:	2200      	movs	r2, #0
 8002680:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002682:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <HAL_I2C_MspInit+0x154>)
 8002684:	2200      	movs	r2, #0
 8002686:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002688:	4b0f      	ldr	r3, [pc, #60]	; (80026c8 <HAL_I2C_MspInit+0x154>)
 800268a:	2200      	movs	r2, #0
 800268c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800268e:	480e      	ldr	r0, [pc, #56]	; (80026c8 <HAL_I2C_MspInit+0x154>)
 8002690:	f000 fe2a 	bl	80032e8 <HAL_DMA_Init>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 800269a:	f000 f8b7 	bl	800280c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a09      	ldr	r2, [pc, #36]	; (80026c8 <HAL_I2C_MspInit+0x154>)
 80026a2:	635a      	str	r2, [r3, #52]	; 0x34
 80026a4:	4a08      	ldr	r2, [pc, #32]	; (80026c8 <HAL_I2C_MspInit+0x154>)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80026aa:	bf00      	nop
 80026ac:	3728      	adds	r7, #40	; 0x28
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40005400 	.word	0x40005400
 80026b8:	40023800 	.word	0x40023800
 80026bc:	40020400 	.word	0x40020400
 80026c0:	20000ed0 	.word	0x20000ed0
 80026c4:	40026010 	.word	0x40026010
 80026c8:	20000e1c 	.word	0x20000e1c
 80026cc:	400260a0 	.word	0x400260a0

080026d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026d0:	b598      	push	{r3, r4, r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026d4:	f000 fc60 	bl	8002f98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026d8:	f000 f82e 	bl	8002738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026dc:	f7ff feca 	bl	8002474 <MX_GPIO_Init>
  MX_DMA_Init();
 80026e0:	f7ff fe72 	bl	80023c8 <MX_DMA_Init>
  MX_UART4_Init();
 80026e4:	f000 fa80 	bl	8002be8 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80026e8:	f000 faa8 	bl	8002c3c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80026ec:	f000 f968 	bl	80029c0 <MX_TIM3_Init>
  MX_I2C1_Init();
 80026f0:	f7ff ff12 	bl	8002518 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* Peripherals initialization */
  UART_Init();
 80026f4:	f7ff fb6c 	bl	8001dd0 <UART_Init>
  /* Sensors initialization */
  HAL_Delay(100);
 80026f8:	2064      	movs	r0, #100	; 0x64
 80026fa:	f000 fcbf 	bl	800307c <HAL_Delay>
  MPU_Init();
 80026fe:	f7ff fcd7 	bl	80020b0 <MPU_Init>
  COMPLEMENTARY_FILTER_Init(MPU_Get_Gyro_Ptr(), MPU_Get_Acc_Ptr());
 8002702:	f7ff fd91 	bl	8002228 <MPU_Get_Gyro_Ptr>
 8002706:	4604      	mov	r4, r0
 8002708:	f7ff fd98 	bl	800223c <MPU_Get_Acc_Ptr>
 800270c:	4603      	mov	r3, r0
 800270e:	4619      	mov	r1, r3
 8002710:	4620      	mov	r0, r4
 8002712:	f7fd fed5 	bl	80004c0 <COMPLEMENTARY_FILTER_Init>

  /* System initialization */
  DATA_LOGGER_Init(&mark1);
 8002716:	4807      	ldr	r0, [pc, #28]	; (8002734 <main+0x64>)
 8002718:	f7fe f898 	bl	800084c <DATA_LOGGER_Init>
  TASK_Init(&mark1);
 800271c:	4805      	ldr	r0, [pc, #20]	; (8002734 <main+0x64>)
 800271e:	f7ff f90f 	bl	8001940 <TASK_Init>
  SCHEDULER_init();
 8002722:	f7fe fe4b 	bl	80013bc <SCHEDULER_init>
  TIMER_Start_All_Channels(timer_eMOTORS);
 8002726:	2000      	movs	r0, #0
 8002728:	f7ff f9dc 	bl	8001ae4 <TIMER_Start_All_Channels>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCHEDULER_run();
 800272c:	f7fe fe5a 	bl	80013e4 <SCHEDULER_run>
 8002730:	e7fc      	b.n	800272c <main+0x5c>
 8002732:	bf00      	nop
 8002734:	20000e18 	.word	0x20000e18

08002738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b094      	sub	sp, #80	; 0x50
 800273c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800273e:	f107 0320 	add.w	r3, r7, #32
 8002742:	2230      	movs	r2, #48	; 0x30
 8002744:	2100      	movs	r1, #0
 8002746:	4618      	mov	r0, r3
 8002748:	f004 ff9c 	bl	8007684 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800274c:	f107 030c 	add.w	r3, r7, #12
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	60da      	str	r2, [r3, #12]
 800275a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800275c:	2300      	movs	r3, #0
 800275e:	60bb      	str	r3, [r7, #8]
 8002760:	4b28      	ldr	r3, [pc, #160]	; (8002804 <SystemClock_Config+0xcc>)
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	4a27      	ldr	r2, [pc, #156]	; (8002804 <SystemClock_Config+0xcc>)
 8002766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800276a:	6413      	str	r3, [r2, #64]	; 0x40
 800276c:	4b25      	ldr	r3, [pc, #148]	; (8002804 <SystemClock_Config+0xcc>)
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002778:	2300      	movs	r3, #0
 800277a:	607b      	str	r3, [r7, #4]
 800277c:	4b22      	ldr	r3, [pc, #136]	; (8002808 <SystemClock_Config+0xd0>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a21      	ldr	r2, [pc, #132]	; (8002808 <SystemClock_Config+0xd0>)
 8002782:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002786:	6013      	str	r3, [r2, #0]
 8002788:	4b1f      	ldr	r3, [pc, #124]	; (8002808 <SystemClock_Config+0xd0>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002790:	607b      	str	r3, [r7, #4]
 8002792:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002794:	2302      	movs	r3, #2
 8002796:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002798:	2301      	movs	r3, #1
 800279a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800279c:	2310      	movs	r3, #16
 800279e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027a0:	2302      	movs	r3, #2
 80027a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80027a4:	2300      	movs	r3, #0
 80027a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80027a8:	2308      	movs	r3, #8
 80027aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80027ac:	23a8      	movs	r3, #168	; 0xa8
 80027ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027b0:	2302      	movs	r3, #2
 80027b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80027b4:	2304      	movs	r3, #4
 80027b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027b8:	f107 0320 	add.w	r3, r7, #32
 80027bc:	4618      	mov	r0, r3
 80027be:	f002 fb0b 	bl	8004dd8 <HAL_RCC_OscConfig>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80027c8:	f000 f820 	bl	800280c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027cc:	230f      	movs	r3, #15
 80027ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027d0:	2302      	movs	r3, #2
 80027d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80027d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80027dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80027de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80027e4:	f107 030c 	add.w	r3, r7, #12
 80027e8:	2105      	movs	r1, #5
 80027ea:	4618      	mov	r0, r3
 80027ec:	f002 fd6c 	bl	80052c8 <HAL_RCC_ClockConfig>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80027f6:	f000 f809 	bl	800280c <Error_Handler>
  }
}
 80027fa:	bf00      	nop
 80027fc:	3750      	adds	r7, #80	; 0x50
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40023800 	.word	0x40023800
 8002808:	40007000 	.word	0x40007000

0800280c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002810:	b672      	cpsid	i
}
 8002812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002814:	e7fe      	b.n	8002814 <Error_Handler+0x8>
	...

08002818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	607b      	str	r3, [r7, #4]
 8002822:	4b10      	ldr	r3, [pc, #64]	; (8002864 <HAL_MspInit+0x4c>)
 8002824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002826:	4a0f      	ldr	r2, [pc, #60]	; (8002864 <HAL_MspInit+0x4c>)
 8002828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800282c:	6453      	str	r3, [r2, #68]	; 0x44
 800282e:	4b0d      	ldr	r3, [pc, #52]	; (8002864 <HAL_MspInit+0x4c>)
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002836:	607b      	str	r3, [r7, #4]
 8002838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	603b      	str	r3, [r7, #0]
 800283e:	4b09      	ldr	r3, [pc, #36]	; (8002864 <HAL_MspInit+0x4c>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	4a08      	ldr	r2, [pc, #32]	; (8002864 <HAL_MspInit+0x4c>)
 8002844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002848:	6413      	str	r3, [r2, #64]	; 0x40
 800284a:	4b06      	ldr	r3, [pc, #24]	; (8002864 <HAL_MspInit+0x4c>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002852:	603b      	str	r3, [r7, #0]
 8002854:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	40023800 	.word	0x40023800

08002868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800286c:	e7fe      	b.n	800286c <NMI_Handler+0x4>

0800286e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800286e:	b480      	push	{r7}
 8002870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002872:	e7fe      	b.n	8002872 <HardFault_Handler+0x4>

08002874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002878:	e7fe      	b.n	8002878 <MemManage_Handler+0x4>

0800287a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800287a:	b480      	push	{r7}
 800287c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800287e:	e7fe      	b.n	800287e <BusFault_Handler+0x4>

08002880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002884:	e7fe      	b.n	8002884 <UsageFault_Handler+0x4>

08002886 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002886:	b480      	push	{r7}
 8002888:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800288a:	bf00      	nop
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002898:	bf00      	nop
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028a2:	b480      	push	{r7}
 80028a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028a6:	bf00      	nop
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028b4:	f000 fbc2 	bl	800303c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028b8:	bf00      	nop
 80028ba:	bd80      	pop	{r7, pc}

080028bc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80028c0:	4802      	ldr	r0, [pc, #8]	; (80028cc <DMA1_Stream0_IRQHandler+0x10>)
 80028c2:	f000 fea9 	bl	8003618 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80028c6:	bf00      	nop
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	20000ed0 	.word	0x20000ed0

080028d0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80028d4:	4802      	ldr	r0, [pc, #8]	; (80028e0 <DMA1_Stream2_IRQHandler+0x10>)
 80028d6:	f000 fe9f 	bl	8003618 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80028da:	bf00      	nop
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20000f78 	.word	0x20000f78

080028e4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80028e8:	4802      	ldr	r0, [pc, #8]	; (80028f4 <DMA1_Stream4_IRQHandler+0x10>)
 80028ea:	f000 fe95 	bl	8003618 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	20001120 	.word	0x20001120

080028f8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80028fc:	4802      	ldr	r0, [pc, #8]	; (8002908 <DMA1_Stream6_IRQHandler+0x10>)
 80028fe:	f000 fe8b 	bl	8003618 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20000e1c 	.word	0x20000e1c

0800290c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002910:	4803      	ldr	r0, [pc, #12]	; (8002920 <USART1_IRQHandler+0x14>)
 8002912:	f003 fe2b 	bl	800656c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  UART_Idle_Line_Callback(uart_e1);
 8002916:	2000      	movs	r0, #0
 8002918:	f7ff f910 	bl	8001b3c <UART_Idle_Line_Callback>
  /* USER CODE END USART1_IRQn 1 */
}
 800291c:	bf00      	nop
 800291e:	bd80      	pop	{r7, pc}
 8002920:	20001098 	.word	0x20001098

08002924 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002928:	4803      	ldr	r0, [pc, #12]	; (8002938 <UART4_IRQHandler+0x14>)
 800292a:	f003 fe1f 	bl	800656c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  UART_Idle_Line_Callback(uart_e4);
 800292e:	2001      	movs	r0, #1
 8002930:	f7ff f904 	bl	8001b3c <UART_Idle_Line_Callback>
  /* USER CODE END UART4_IRQn 1 */
}
 8002934:	bf00      	nop
 8002936:	bd80      	pop	{r7, pc}
 8002938:	200010dc 	.word	0x200010dc

0800293c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002940:	4802      	ldr	r0, [pc, #8]	; (800294c <DMA2_Stream2_IRQHandler+0x10>)
 8002942:	f000 fe69 	bl	8003618 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20001038 	.word	0x20001038

08002950 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002954:	4802      	ldr	r0, [pc, #8]	; (8002960 <DMA2_Stream7_IRQHandler+0x10>)
 8002956:	f000 fe5f 	bl	8003618 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	20000fd8 	.word	0x20000fd8

08002964 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
	if(huart == &huart4)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a09      	ldr	r2, [pc, #36]	; (8002994 <HAL_UART_TxCpltCallback+0x30>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d103      	bne.n	800297c <HAL_UART_TxCpltCallback+0x18>
	{
		UART_Transfer_Complete_Callback(uart_e4);
 8002974:	2001      	movs	r0, #1
 8002976:	f7ff f92f 	bl	8001bd8 <UART_Transfer_Complete_Callback>
	}
	else if(huart == &huart1)
	{
		UART_Transfer_Complete_Callback(uart_e1 );
	}
}
 800297a:	e006      	b.n	800298a <HAL_UART_TxCpltCallback+0x26>
	else if(huart == &huart1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a06      	ldr	r2, [pc, #24]	; (8002998 <HAL_UART_TxCpltCallback+0x34>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d102      	bne.n	800298a <HAL_UART_TxCpltCallback+0x26>
		UART_Transfer_Complete_Callback(uart_e1 );
 8002984:	2000      	movs	r0, #0
 8002986:	f7ff f927 	bl	8001bd8 <UART_Transfer_Complete_Callback>
}
 800298a:	bf00      	nop
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	200010dc 	.word	0x200010dc
 8002998:	20001098 	.word	0x20001098

0800299c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029a0:	4b06      	ldr	r3, [pc, #24]	; (80029bc <SystemInit+0x20>)
 80029a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a6:	4a05      	ldr	r2, [pc, #20]	; (80029bc <SystemInit+0x20>)
 80029a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029b0:	bf00      	nop
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08e      	sub	sp, #56	; 0x38
 80029c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	605a      	str	r2, [r3, #4]
 80029d0:	609a      	str	r2, [r3, #8]
 80029d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029d4:	f107 0320 	add.w	r3, r7, #32
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029de:	1d3b      	adds	r3, r7, #4
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	609a      	str	r2, [r3, #8]
 80029e8:	60da      	str	r2, [r3, #12]
 80029ea:	611a      	str	r2, [r3, #16]
 80029ec:	615a      	str	r2, [r3, #20]
 80029ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80029f0:	4b3d      	ldr	r3, [pc, #244]	; (8002ae8 <MX_TIM3_Init+0x128>)
 80029f2:	4a3e      	ldr	r2, [pc, #248]	; (8002aec <MX_TIM3_Init+0x12c>)
 80029f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 80029f6:	4b3c      	ldr	r3, [pc, #240]	; (8002ae8 <MX_TIM3_Init+0x128>)
 80029f8:	2253      	movs	r2, #83	; 0x53
 80029fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029fc:	4b3a      	ldr	r3, [pc, #232]	; (8002ae8 <MX_TIM3_Init+0x128>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3999;
 8002a02:	4b39      	ldr	r3, [pc, #228]	; (8002ae8 <MX_TIM3_Init+0x128>)
 8002a04:	f640 729f 	movw	r2, #3999	; 0xf9f
 8002a08:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a0a:	4b37      	ldr	r3, [pc, #220]	; (8002ae8 <MX_TIM3_Init+0x128>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a10:	4b35      	ldr	r3, [pc, #212]	; (8002ae8 <MX_TIM3_Init+0x128>)
 8002a12:	2280      	movs	r2, #128	; 0x80
 8002a14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a16:	4834      	ldr	r0, [pc, #208]	; (8002ae8 <MX_TIM3_Init+0x128>)
 8002a18:	f002 fe26 	bl	8005668 <HAL_TIM_Base_Init>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002a22:	f7ff fef3 	bl	800280c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a30:	4619      	mov	r1, r3
 8002a32:	482d      	ldr	r0, [pc, #180]	; (8002ae8 <MX_TIM3_Init+0x128>)
 8002a34:	f003 f84a 	bl	8005acc <HAL_TIM_ConfigClockSource>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002a3e:	f7ff fee5 	bl	800280c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002a42:	4829      	ldr	r0, [pc, #164]	; (8002ae8 <MX_TIM3_Init+0x128>)
 8002a44:	f002 fe5f 	bl	8005706 <HAL_TIM_PWM_Init>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002a4e:	f7ff fedd 	bl	800280c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a52:	2300      	movs	r3, #0
 8002a54:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a56:	2300      	movs	r3, #0
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a5a:	f107 0320 	add.w	r3, r7, #32
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4821      	ldr	r0, [pc, #132]	; (8002ae8 <MX_TIM3_Init+0x128>)
 8002a62:	f003 fc0b 	bl	800627c <HAL_TIMEx_MasterConfigSynchronization>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002a6c:	f7ff fece 	bl	800280c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a70:	2360      	movs	r3, #96	; 0x60
 8002a72:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 999;
 8002a74:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002a78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a82:	1d3b      	adds	r3, r7, #4
 8002a84:	2200      	movs	r2, #0
 8002a86:	4619      	mov	r1, r3
 8002a88:	4817      	ldr	r0, [pc, #92]	; (8002ae8 <MX_TIM3_Init+0x128>)
 8002a8a:	f002 ff5d 	bl	8005948 <HAL_TIM_PWM_ConfigChannel>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002a94:	f7ff feba 	bl	800280c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a98:	1d3b      	adds	r3, r7, #4
 8002a9a:	2204      	movs	r2, #4
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4812      	ldr	r0, [pc, #72]	; (8002ae8 <MX_TIM3_Init+0x128>)
 8002aa0:	f002 ff52 	bl	8005948 <HAL_TIM_PWM_ConfigChannel>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002aaa:	f7ff feaf 	bl	800280c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002aae:	1d3b      	adds	r3, r7, #4
 8002ab0:	2208      	movs	r2, #8
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	480c      	ldr	r0, [pc, #48]	; (8002ae8 <MX_TIM3_Init+0x128>)
 8002ab6:	f002 ff47 	bl	8005948 <HAL_TIM_PWM_ConfigChannel>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8002ac0:	f7ff fea4 	bl	800280c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002ac4:	1d3b      	adds	r3, r7, #4
 8002ac6:	220c      	movs	r2, #12
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4807      	ldr	r0, [pc, #28]	; (8002ae8 <MX_TIM3_Init+0x128>)
 8002acc:	f002 ff3c 	bl	8005948 <HAL_TIM_PWM_ConfigChannel>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8002ad6:	f7ff fe99 	bl	800280c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002ada:	4803      	ldr	r0, [pc, #12]	; (8002ae8 <MX_TIM3_Init+0x128>)
 8002adc:	f000 f82a 	bl	8002b34 <HAL_TIM_MspPostInit>

}
 8002ae0:	bf00      	nop
 8002ae2:	3738      	adds	r7, #56	; 0x38
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	20000f30 	.word	0x20000f30
 8002aec:	40000400 	.word	0x40000400

08002af0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a0b      	ldr	r2, [pc, #44]	; (8002b2c <HAL_TIM_Base_MspInit+0x3c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d10d      	bne.n	8002b1e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	4b0a      	ldr	r3, [pc, #40]	; (8002b30 <HAL_TIM_Base_MspInit+0x40>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	4a09      	ldr	r2, [pc, #36]	; (8002b30 <HAL_TIM_Base_MspInit+0x40>)
 8002b0c:	f043 0302 	orr.w	r3, r3, #2
 8002b10:	6413      	str	r3, [r2, #64]	; 0x40
 8002b12:	4b07      	ldr	r3, [pc, #28]	; (8002b30 <HAL_TIM_Base_MspInit+0x40>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002b1e:	bf00      	nop
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	40000400 	.word	0x40000400
 8002b30:	40023800 	.word	0x40023800

08002b34 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b08a      	sub	sp, #40	; 0x28
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b3c:	f107 0314 	add.w	r3, r7, #20
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	609a      	str	r2, [r3, #8]
 8002b48:	60da      	str	r2, [r3, #12]
 8002b4a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a21      	ldr	r2, [pc, #132]	; (8002bd8 <HAL_TIM_MspPostInit+0xa4>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d13b      	bne.n	8002bce <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	4b20      	ldr	r3, [pc, #128]	; (8002bdc <HAL_TIM_MspPostInit+0xa8>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	4a1f      	ldr	r2, [pc, #124]	; (8002bdc <HAL_TIM_MspPostInit+0xa8>)
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	6313      	str	r3, [r2, #48]	; 0x30
 8002b66:	4b1d      	ldr	r3, [pc, #116]	; (8002bdc <HAL_TIM_MspPostInit+0xa8>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	613b      	str	r3, [r7, #16]
 8002b70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	4b19      	ldr	r3, [pc, #100]	; (8002bdc <HAL_TIM_MspPostInit+0xa8>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	4a18      	ldr	r2, [pc, #96]	; (8002bdc <HAL_TIM_MspPostInit+0xa8>)
 8002b7c:	f043 0302 	orr.w	r3, r3, #2
 8002b80:	6313      	str	r3, [r2, #48]	; 0x30
 8002b82:	4b16      	ldr	r3, [pc, #88]	; (8002bdc <HAL_TIM_MspPostInit+0xa8>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b8e:	23c0      	movs	r3, #192	; 0xc0
 8002b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b92:	2302      	movs	r3, #2
 8002b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba2:	f107 0314 	add.w	r3, r7, #20
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	480d      	ldr	r0, [pc, #52]	; (8002be0 <HAL_TIM_MspPostInit+0xac>)
 8002baa:	f000 ff9f 	bl	8003aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bc2:	f107 0314 	add.w	r3, r7, #20
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4806      	ldr	r0, [pc, #24]	; (8002be4 <HAL_TIM_MspPostInit+0xb0>)
 8002bca:	f000 ff8f 	bl	8003aec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002bce:	bf00      	nop
 8002bd0:	3728      	adds	r7, #40	; 0x28
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40000400 	.word	0x40000400
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	40020000 	.word	0x40020000
 8002be4:	40020400 	.word	0x40020400

08002be8 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart1_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002bec:	4b11      	ldr	r3, [pc, #68]	; (8002c34 <MX_UART4_Init+0x4c>)
 8002bee:	4a12      	ldr	r2, [pc, #72]	; (8002c38 <MX_UART4_Init+0x50>)
 8002bf0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 230400;
 8002bf2:	4b10      	ldr	r3, [pc, #64]	; (8002c34 <MX_UART4_Init+0x4c>)
 8002bf4:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8002bf8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002bfa:	4b0e      	ldr	r3, [pc, #56]	; (8002c34 <MX_UART4_Init+0x4c>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002c00:	4b0c      	ldr	r3, [pc, #48]	; (8002c34 <MX_UART4_Init+0x4c>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002c06:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <MX_UART4_Init+0x4c>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002c0c:	4b09      	ldr	r3, [pc, #36]	; (8002c34 <MX_UART4_Init+0x4c>)
 8002c0e:	220c      	movs	r2, #12
 8002c10:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c12:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <MX_UART4_Init+0x4c>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c18:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <MX_UART4_Init+0x4c>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002c1e:	4805      	ldr	r0, [pc, #20]	; (8002c34 <MX_UART4_Init+0x4c>)
 8002c20:	f003 fba8 	bl	8006374 <HAL_UART_Init>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002c2a:	f7ff fdef 	bl	800280c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	200010dc 	.word	0x200010dc
 8002c38:	40004c00 	.word	0x40004c00

08002c3c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c40:	4b11      	ldr	r3, [pc, #68]	; (8002c88 <MX_USART1_UART_Init+0x4c>)
 8002c42:	4a12      	ldr	r2, [pc, #72]	; (8002c8c <MX_USART1_UART_Init+0x50>)
 8002c44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8002c46:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <MX_USART1_UART_Init+0x4c>)
 8002c48:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8002c4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c4e:	4b0e      	ldr	r3, [pc, #56]	; (8002c88 <MX_USART1_UART_Init+0x4c>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c54:	4b0c      	ldr	r3, [pc, #48]	; (8002c88 <MX_USART1_UART_Init+0x4c>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c5a:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <MX_USART1_UART_Init+0x4c>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c60:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <MX_USART1_UART_Init+0x4c>)
 8002c62:	220c      	movs	r2, #12
 8002c64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c66:	4b08      	ldr	r3, [pc, #32]	; (8002c88 <MX_USART1_UART_Init+0x4c>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c6c:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <MX_USART1_UART_Init+0x4c>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c72:	4805      	ldr	r0, [pc, #20]	; (8002c88 <MX_USART1_UART_Init+0x4c>)
 8002c74:	f003 fb7e 	bl	8006374 <HAL_UART_Init>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002c7e:	f7ff fdc5 	bl	800280c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20001098 	.word	0x20001098
 8002c8c:	40011000 	.word	0x40011000

08002c90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b08c      	sub	sp, #48	; 0x30
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c98:	f107 031c 	add.w	r3, r7, #28
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	605a      	str	r2, [r3, #4]
 8002ca2:	609a      	str	r2, [r3, #8]
 8002ca4:	60da      	str	r2, [r3, #12]
 8002ca6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a98      	ldr	r2, [pc, #608]	; (8002f10 <HAL_UART_MspInit+0x280>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	f040 8092 	bne.w	8002dd8 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	61bb      	str	r3, [r7, #24]
 8002cb8:	4b96      	ldr	r3, [pc, #600]	; (8002f14 <HAL_UART_MspInit+0x284>)
 8002cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbc:	4a95      	ldr	r2, [pc, #596]	; (8002f14 <HAL_UART_MspInit+0x284>)
 8002cbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002cc2:	6413      	str	r3, [r2, #64]	; 0x40
 8002cc4:	4b93      	ldr	r3, [pc, #588]	; (8002f14 <HAL_UART_MspInit+0x284>)
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ccc:	61bb      	str	r3, [r7, #24]
 8002cce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]
 8002cd4:	4b8f      	ldr	r3, [pc, #572]	; (8002f14 <HAL_UART_MspInit+0x284>)
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	4a8e      	ldr	r2, [pc, #568]	; (8002f14 <HAL_UART_MspInit+0x284>)
 8002cda:	f043 0301 	orr.w	r3, r3, #1
 8002cde:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce0:	4b8c      	ldr	r3, [pc, #560]	; (8002f14 <HAL_UART_MspInit+0x284>)
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	617b      	str	r3, [r7, #20]
 8002cea:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002cec:	2303      	movs	r3, #3
 8002cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002cfc:	2308      	movs	r3, #8
 8002cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d00:	f107 031c 	add.w	r3, r7, #28
 8002d04:	4619      	mov	r1, r3
 8002d06:	4884      	ldr	r0, [pc, #528]	; (8002f18 <HAL_UART_MspInit+0x288>)
 8002d08:	f000 fef0 	bl	8003aec <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8002d0c:	4b83      	ldr	r3, [pc, #524]	; (8002f1c <HAL_UART_MspInit+0x28c>)
 8002d0e:	4a84      	ldr	r2, [pc, #528]	; (8002f20 <HAL_UART_MspInit+0x290>)
 8002d10:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8002d12:	4b82      	ldr	r3, [pc, #520]	; (8002f1c <HAL_UART_MspInit+0x28c>)
 8002d14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d18:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d1a:	4b80      	ldr	r3, [pc, #512]	; (8002f1c <HAL_UART_MspInit+0x28c>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d20:	4b7e      	ldr	r3, [pc, #504]	; (8002f1c <HAL_UART_MspInit+0x28c>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d26:	4b7d      	ldr	r3, [pc, #500]	; (8002f1c <HAL_UART_MspInit+0x28c>)
 8002d28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d2c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d2e:	4b7b      	ldr	r3, [pc, #492]	; (8002f1c <HAL_UART_MspInit+0x28c>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d34:	4b79      	ldr	r3, [pc, #484]	; (8002f1c <HAL_UART_MspInit+0x28c>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8002d3a:	4b78      	ldr	r3, [pc, #480]	; (8002f1c <HAL_UART_MspInit+0x28c>)
 8002d3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d40:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d42:	4b76      	ldr	r3, [pc, #472]	; (8002f1c <HAL_UART_MspInit+0x28c>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d48:	4b74      	ldr	r3, [pc, #464]	; (8002f1c <HAL_UART_MspInit+0x28c>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002d4e:	4873      	ldr	r0, [pc, #460]	; (8002f1c <HAL_UART_MspInit+0x28c>)
 8002d50:	f000 faca 	bl	80032e8 <HAL_DMA_Init>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002d5a:	f7ff fd57 	bl	800280c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a6e      	ldr	r2, [pc, #440]	; (8002f1c <HAL_UART_MspInit+0x28c>)
 8002d62:	639a      	str	r2, [r3, #56]	; 0x38
 8002d64:	4a6d      	ldr	r2, [pc, #436]	; (8002f1c <HAL_UART_MspInit+0x28c>)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8002d6a:	4b6e      	ldr	r3, [pc, #440]	; (8002f24 <HAL_UART_MspInit+0x294>)
 8002d6c:	4a6e      	ldr	r2, [pc, #440]	; (8002f28 <HAL_UART_MspInit+0x298>)
 8002d6e:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8002d70:	4b6c      	ldr	r3, [pc, #432]	; (8002f24 <HAL_UART_MspInit+0x294>)
 8002d72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d76:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d78:	4b6a      	ldr	r3, [pc, #424]	; (8002f24 <HAL_UART_MspInit+0x294>)
 8002d7a:	2240      	movs	r2, #64	; 0x40
 8002d7c:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d7e:	4b69      	ldr	r3, [pc, #420]	; (8002f24 <HAL_UART_MspInit+0x294>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d84:	4b67      	ldr	r3, [pc, #412]	; (8002f24 <HAL_UART_MspInit+0x294>)
 8002d86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d8a:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d8c:	4b65      	ldr	r3, [pc, #404]	; (8002f24 <HAL_UART_MspInit+0x294>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d92:	4b64      	ldr	r3, [pc, #400]	; (8002f24 <HAL_UART_MspInit+0x294>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8002d98:	4b62      	ldr	r3, [pc, #392]	; (8002f24 <HAL_UART_MspInit+0x294>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d9e:	4b61      	ldr	r3, [pc, #388]	; (8002f24 <HAL_UART_MspInit+0x294>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002da4:	4b5f      	ldr	r3, [pc, #380]	; (8002f24 <HAL_UART_MspInit+0x294>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8002daa:	485e      	ldr	r0, [pc, #376]	; (8002f24 <HAL_UART_MspInit+0x294>)
 8002dac:	f000 fa9c 	bl	80032e8 <HAL_DMA_Init>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002db6:	f7ff fd29 	bl	800280c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a59      	ldr	r2, [pc, #356]	; (8002f24 <HAL_UART_MspInit+0x294>)
 8002dbe:	635a      	str	r2, [r3, #52]	; 0x34
 8002dc0:	4a58      	ldr	r2, [pc, #352]	; (8002f24 <HAL_UART_MspInit+0x294>)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	2100      	movs	r1, #0
 8002dca:	2034      	movs	r0, #52	; 0x34
 8002dcc:	f000 fa55 	bl	800327a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002dd0:	2034      	movs	r0, #52	; 0x34
 8002dd2:	f000 fa6e 	bl	80032b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002dd6:	e096      	b.n	8002f06 <HAL_UART_MspInit+0x276>
  else if(uartHandle->Instance==USART1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a53      	ldr	r2, [pc, #332]	; (8002f2c <HAL_UART_MspInit+0x29c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	f040 8091 	bne.w	8002f06 <HAL_UART_MspInit+0x276>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002de4:	2300      	movs	r3, #0
 8002de6:	613b      	str	r3, [r7, #16]
 8002de8:	4b4a      	ldr	r3, [pc, #296]	; (8002f14 <HAL_UART_MspInit+0x284>)
 8002dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dec:	4a49      	ldr	r2, [pc, #292]	; (8002f14 <HAL_UART_MspInit+0x284>)
 8002dee:	f043 0310 	orr.w	r3, r3, #16
 8002df2:	6453      	str	r3, [r2, #68]	; 0x44
 8002df4:	4b47      	ldr	r3, [pc, #284]	; (8002f14 <HAL_UART_MspInit+0x284>)
 8002df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df8:	f003 0310 	and.w	r3, r3, #16
 8002dfc:	613b      	str	r3, [r7, #16]
 8002dfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e00:	2300      	movs	r3, #0
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	4b43      	ldr	r3, [pc, #268]	; (8002f14 <HAL_UART_MspInit+0x284>)
 8002e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e08:	4a42      	ldr	r2, [pc, #264]	; (8002f14 <HAL_UART_MspInit+0x284>)
 8002e0a:	f043 0302 	orr.w	r3, r3, #2
 8002e0e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e10:	4b40      	ldr	r3, [pc, #256]	; (8002f14 <HAL_UART_MspInit+0x284>)
 8002e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e1c:	23c0      	movs	r3, #192	; 0xc0
 8002e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e20:	2302      	movs	r3, #2
 8002e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e2c:	2307      	movs	r3, #7
 8002e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e30:	f107 031c 	add.w	r3, r7, #28
 8002e34:	4619      	mov	r1, r3
 8002e36:	483e      	ldr	r0, [pc, #248]	; (8002f30 <HAL_UART_MspInit+0x2a0>)
 8002e38:	f000 fe58 	bl	8003aec <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002e3c:	4b3d      	ldr	r3, [pc, #244]	; (8002f34 <HAL_UART_MspInit+0x2a4>)
 8002e3e:	4a3e      	ldr	r2, [pc, #248]	; (8002f38 <HAL_UART_MspInit+0x2a8>)
 8002e40:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002e42:	4b3c      	ldr	r3, [pc, #240]	; (8002f34 <HAL_UART_MspInit+0x2a4>)
 8002e44:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e48:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e4a:	4b3a      	ldr	r3, [pc, #232]	; (8002f34 <HAL_UART_MspInit+0x2a4>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e50:	4b38      	ldr	r3, [pc, #224]	; (8002f34 <HAL_UART_MspInit+0x2a4>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e56:	4b37      	ldr	r3, [pc, #220]	; (8002f34 <HAL_UART_MspInit+0x2a4>)
 8002e58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e5c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e5e:	4b35      	ldr	r3, [pc, #212]	; (8002f34 <HAL_UART_MspInit+0x2a4>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e64:	4b33      	ldr	r3, [pc, #204]	; (8002f34 <HAL_UART_MspInit+0x2a4>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002e6a:	4b32      	ldr	r3, [pc, #200]	; (8002f34 <HAL_UART_MspInit+0x2a4>)
 8002e6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e70:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e72:	4b30      	ldr	r3, [pc, #192]	; (8002f34 <HAL_UART_MspInit+0x2a4>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e78:	4b2e      	ldr	r3, [pc, #184]	; (8002f34 <HAL_UART_MspInit+0x2a4>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002e7e:	482d      	ldr	r0, [pc, #180]	; (8002f34 <HAL_UART_MspInit+0x2a4>)
 8002e80:	f000 fa32 	bl	80032e8 <HAL_DMA_Init>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <HAL_UART_MspInit+0x1fe>
      Error_Handler();
 8002e8a:	f7ff fcbf 	bl	800280c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a28      	ldr	r2, [pc, #160]	; (8002f34 <HAL_UART_MspInit+0x2a4>)
 8002e92:	639a      	str	r2, [r3, #56]	; 0x38
 8002e94:	4a27      	ldr	r2, [pc, #156]	; (8002f34 <HAL_UART_MspInit+0x2a4>)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002e9a:	4b28      	ldr	r3, [pc, #160]	; (8002f3c <HAL_UART_MspInit+0x2ac>)
 8002e9c:	4a28      	ldr	r2, [pc, #160]	; (8002f40 <HAL_UART_MspInit+0x2b0>)
 8002e9e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002ea0:	4b26      	ldr	r3, [pc, #152]	; (8002f3c <HAL_UART_MspInit+0x2ac>)
 8002ea2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ea6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ea8:	4b24      	ldr	r3, [pc, #144]	; (8002f3c <HAL_UART_MspInit+0x2ac>)
 8002eaa:	2240      	movs	r2, #64	; 0x40
 8002eac:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eae:	4b23      	ldr	r3, [pc, #140]	; (8002f3c <HAL_UART_MspInit+0x2ac>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002eb4:	4b21      	ldr	r3, [pc, #132]	; (8002f3c <HAL_UART_MspInit+0x2ac>)
 8002eb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002eba:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ebc:	4b1f      	ldr	r3, [pc, #124]	; (8002f3c <HAL_UART_MspInit+0x2ac>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ec2:	4b1e      	ldr	r3, [pc, #120]	; (8002f3c <HAL_UART_MspInit+0x2ac>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002ec8:	4b1c      	ldr	r3, [pc, #112]	; (8002f3c <HAL_UART_MspInit+0x2ac>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ece:	4b1b      	ldr	r3, [pc, #108]	; (8002f3c <HAL_UART_MspInit+0x2ac>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ed4:	4b19      	ldr	r3, [pc, #100]	; (8002f3c <HAL_UART_MspInit+0x2ac>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002eda:	4818      	ldr	r0, [pc, #96]	; (8002f3c <HAL_UART_MspInit+0x2ac>)
 8002edc:	f000 fa04 	bl	80032e8 <HAL_DMA_Init>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <HAL_UART_MspInit+0x25a>
      Error_Handler();
 8002ee6:	f7ff fc91 	bl	800280c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a13      	ldr	r2, [pc, #76]	; (8002f3c <HAL_UART_MspInit+0x2ac>)
 8002eee:	635a      	str	r2, [r3, #52]	; 0x34
 8002ef0:	4a12      	ldr	r2, [pc, #72]	; (8002f3c <HAL_UART_MspInit+0x2ac>)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	2100      	movs	r1, #0
 8002efa:	2025      	movs	r0, #37	; 0x25
 8002efc:	f000 f9bd 	bl	800327a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f00:	2025      	movs	r0, #37	; 0x25
 8002f02:	f000 f9d6 	bl	80032b2 <HAL_NVIC_EnableIRQ>
}
 8002f06:	bf00      	nop
 8002f08:	3730      	adds	r7, #48	; 0x30
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40004c00 	.word	0x40004c00
 8002f14:	40023800 	.word	0x40023800
 8002f18:	40020000 	.word	0x40020000
 8002f1c:	20000f78 	.word	0x20000f78
 8002f20:	40026040 	.word	0x40026040
 8002f24:	20001120 	.word	0x20001120
 8002f28:	40026070 	.word	0x40026070
 8002f2c:	40011000 	.word	0x40011000
 8002f30:	40020400 	.word	0x40020400
 8002f34:	20001038 	.word	0x20001038
 8002f38:	40026440 	.word	0x40026440
 8002f3c:	20000fd8 	.word	0x20000fd8
 8002f40:	400264b8 	.word	0x400264b8

08002f44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f48:	480d      	ldr	r0, [pc, #52]	; (8002f80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f4a:	490e      	ldr	r1, [pc, #56]	; (8002f84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f4c:	4a0e      	ldr	r2, [pc, #56]	; (8002f88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f50:	e002      	b.n	8002f58 <LoopCopyDataInit>

08002f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f56:	3304      	adds	r3, #4

08002f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f5c:	d3f9      	bcc.n	8002f52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f5e:	4a0b      	ldr	r2, [pc, #44]	; (8002f8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f60:	4c0b      	ldr	r4, [pc, #44]	; (8002f90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f64:	e001      	b.n	8002f6a <LoopFillZerobss>

08002f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f68:	3204      	adds	r2, #4

08002f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f6c:	d3fb      	bcc.n	8002f66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f6e:	f7ff fd15 	bl	800299c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f72:	f004 fb3b 	bl	80075ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f76:	f7ff fbab 	bl	80026d0 <main>
  bx  lr    
 8002f7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f84:	20000434 	.word	0x20000434
  ldr r2, =_sidata
 8002f88:	08008858 	.word	0x08008858
  ldr r2, =_sbss
 8002f8c:	20000434 	.word	0x20000434
  ldr r4, =_ebss
 8002f90:	20001184 	.word	0x20001184

08002f94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f94:	e7fe      	b.n	8002f94 <ADC_IRQHandler>
	...

08002f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f9c:	4b0e      	ldr	r3, [pc, #56]	; (8002fd8 <HAL_Init+0x40>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a0d      	ldr	r2, [pc, #52]	; (8002fd8 <HAL_Init+0x40>)
 8002fa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fa8:	4b0b      	ldr	r3, [pc, #44]	; (8002fd8 <HAL_Init+0x40>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a0a      	ldr	r2, [pc, #40]	; (8002fd8 <HAL_Init+0x40>)
 8002fae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fb4:	4b08      	ldr	r3, [pc, #32]	; (8002fd8 <HAL_Init+0x40>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a07      	ldr	r2, [pc, #28]	; (8002fd8 <HAL_Init+0x40>)
 8002fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fc0:	2003      	movs	r0, #3
 8002fc2:	f000 f94f 	bl	8003264 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fc6:	200f      	movs	r0, #15
 8002fc8:	f000 f808 	bl	8002fdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fcc:	f7ff fc24 	bl	8002818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40023c00 	.word	0x40023c00

08002fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fe4:	4b12      	ldr	r3, [pc, #72]	; (8003030 <HAL_InitTick+0x54>)
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	4b12      	ldr	r3, [pc, #72]	; (8003034 <HAL_InitTick+0x58>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	4619      	mov	r1, r3
 8002fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 f967 	bl	80032ce <HAL_SYSTICK_Config>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e00e      	b.n	8003028 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b0f      	cmp	r3, #15
 800300e:	d80a      	bhi.n	8003026 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003010:	2200      	movs	r2, #0
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	f04f 30ff 	mov.w	r0, #4294967295
 8003018:	f000 f92f 	bl	800327a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800301c:	4a06      	ldr	r2, [pc, #24]	; (8003038 <HAL_InitTick+0x5c>)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003022:	2300      	movs	r3, #0
 8003024:	e000      	b.n	8003028 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
}
 8003028:	4618      	mov	r0, r3
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	200003c0 	.word	0x200003c0
 8003034:	200003c8 	.word	0x200003c8
 8003038:	200003c4 	.word	0x200003c4

0800303c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003040:	4b06      	ldr	r3, [pc, #24]	; (800305c <HAL_IncTick+0x20>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	461a      	mov	r2, r3
 8003046:	4b06      	ldr	r3, [pc, #24]	; (8003060 <HAL_IncTick+0x24>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4413      	add	r3, r2
 800304c:	4a04      	ldr	r2, [pc, #16]	; (8003060 <HAL_IncTick+0x24>)
 800304e:	6013      	str	r3, [r2, #0]
}
 8003050:	bf00      	nop
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	200003c8 	.word	0x200003c8
 8003060:	20001180 	.word	0x20001180

08003064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  return uwTick;
 8003068:	4b03      	ldr	r3, [pc, #12]	; (8003078 <HAL_GetTick+0x14>)
 800306a:	681b      	ldr	r3, [r3, #0]
}
 800306c:	4618      	mov	r0, r3
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	20001180 	.word	0x20001180

0800307c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003084:	f7ff ffee 	bl	8003064 <HAL_GetTick>
 8003088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003094:	d005      	beq.n	80030a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003096:	4b0a      	ldr	r3, [pc, #40]	; (80030c0 <HAL_Delay+0x44>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	461a      	mov	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4413      	add	r3, r2
 80030a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030a2:	bf00      	nop
 80030a4:	f7ff ffde 	bl	8003064 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d8f7      	bhi.n	80030a4 <HAL_Delay+0x28>
  {
  }
}
 80030b4:	bf00      	nop
 80030b6:	bf00      	nop
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	200003c8 	.word	0x200003c8

080030c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030d4:	4b0c      	ldr	r3, [pc, #48]	; (8003108 <__NVIC_SetPriorityGrouping+0x44>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030e0:	4013      	ands	r3, r2
 80030e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030f6:	4a04      	ldr	r2, [pc, #16]	; (8003108 <__NVIC_SetPriorityGrouping+0x44>)
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	60d3      	str	r3, [r2, #12]
}
 80030fc:	bf00      	nop
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	e000ed00 	.word	0xe000ed00

0800310c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003110:	4b04      	ldr	r3, [pc, #16]	; (8003124 <__NVIC_GetPriorityGrouping+0x18>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	0a1b      	lsrs	r3, r3, #8
 8003116:	f003 0307 	and.w	r3, r3, #7
}
 800311a:	4618      	mov	r0, r3
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	e000ed00 	.word	0xe000ed00

08003128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	4603      	mov	r3, r0
 8003130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003136:	2b00      	cmp	r3, #0
 8003138:	db0b      	blt.n	8003152 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800313a:	79fb      	ldrb	r3, [r7, #7]
 800313c:	f003 021f 	and.w	r2, r3, #31
 8003140:	4907      	ldr	r1, [pc, #28]	; (8003160 <__NVIC_EnableIRQ+0x38>)
 8003142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003146:	095b      	lsrs	r3, r3, #5
 8003148:	2001      	movs	r0, #1
 800314a:	fa00 f202 	lsl.w	r2, r0, r2
 800314e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	e000e100 	.word	0xe000e100

08003164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	4603      	mov	r3, r0
 800316c:	6039      	str	r1, [r7, #0]
 800316e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003174:	2b00      	cmp	r3, #0
 8003176:	db0a      	blt.n	800318e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	b2da      	uxtb	r2, r3
 800317c:	490c      	ldr	r1, [pc, #48]	; (80031b0 <__NVIC_SetPriority+0x4c>)
 800317e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003182:	0112      	lsls	r2, r2, #4
 8003184:	b2d2      	uxtb	r2, r2
 8003186:	440b      	add	r3, r1
 8003188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800318c:	e00a      	b.n	80031a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	b2da      	uxtb	r2, r3
 8003192:	4908      	ldr	r1, [pc, #32]	; (80031b4 <__NVIC_SetPriority+0x50>)
 8003194:	79fb      	ldrb	r3, [r7, #7]
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	3b04      	subs	r3, #4
 800319c:	0112      	lsls	r2, r2, #4
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	440b      	add	r3, r1
 80031a2:	761a      	strb	r2, [r3, #24]
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	e000e100 	.word	0xe000e100
 80031b4:	e000ed00 	.word	0xe000ed00

080031b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b089      	sub	sp, #36	; 0x24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	f1c3 0307 	rsb	r3, r3, #7
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	bf28      	it	cs
 80031d6:	2304      	movcs	r3, #4
 80031d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	3304      	adds	r3, #4
 80031de:	2b06      	cmp	r3, #6
 80031e0:	d902      	bls.n	80031e8 <NVIC_EncodePriority+0x30>
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	3b03      	subs	r3, #3
 80031e6:	e000      	b.n	80031ea <NVIC_EncodePriority+0x32>
 80031e8:	2300      	movs	r3, #0
 80031ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031ec:	f04f 32ff 	mov.w	r2, #4294967295
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	43da      	mvns	r2, r3
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	401a      	ands	r2, r3
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003200:	f04f 31ff 	mov.w	r1, #4294967295
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	fa01 f303 	lsl.w	r3, r1, r3
 800320a:	43d9      	mvns	r1, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003210:	4313      	orrs	r3, r2
         );
}
 8003212:	4618      	mov	r0, r3
 8003214:	3724      	adds	r7, #36	; 0x24
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
	...

08003220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3b01      	subs	r3, #1
 800322c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003230:	d301      	bcc.n	8003236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003232:	2301      	movs	r3, #1
 8003234:	e00f      	b.n	8003256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003236:	4a0a      	ldr	r2, [pc, #40]	; (8003260 <SysTick_Config+0x40>)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3b01      	subs	r3, #1
 800323c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800323e:	210f      	movs	r1, #15
 8003240:	f04f 30ff 	mov.w	r0, #4294967295
 8003244:	f7ff ff8e 	bl	8003164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003248:	4b05      	ldr	r3, [pc, #20]	; (8003260 <SysTick_Config+0x40>)
 800324a:	2200      	movs	r2, #0
 800324c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800324e:	4b04      	ldr	r3, [pc, #16]	; (8003260 <SysTick_Config+0x40>)
 8003250:	2207      	movs	r2, #7
 8003252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	e000e010 	.word	0xe000e010

08003264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f7ff ff29 	bl	80030c4 <__NVIC_SetPriorityGrouping>
}
 8003272:	bf00      	nop
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800327a:	b580      	push	{r7, lr}
 800327c:	b086      	sub	sp, #24
 800327e:	af00      	add	r7, sp, #0
 8003280:	4603      	mov	r3, r0
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	607a      	str	r2, [r7, #4]
 8003286:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800328c:	f7ff ff3e 	bl	800310c <__NVIC_GetPriorityGrouping>
 8003290:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	68b9      	ldr	r1, [r7, #8]
 8003296:	6978      	ldr	r0, [r7, #20]
 8003298:	f7ff ff8e 	bl	80031b8 <NVIC_EncodePriority>
 800329c:	4602      	mov	r2, r0
 800329e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032a2:	4611      	mov	r1, r2
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff ff5d 	bl	8003164 <__NVIC_SetPriority>
}
 80032aa:	bf00      	nop
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b082      	sub	sp, #8
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	4603      	mov	r3, r0
 80032ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff ff31 	bl	8003128 <__NVIC_EnableIRQ>
}
 80032c6:	bf00      	nop
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b082      	sub	sp, #8
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7ff ffa2 	bl	8003220 <SysTick_Config>
 80032dc:	4603      	mov	r3, r0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
	...

080032e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032f4:	f7ff feb6 	bl	8003064 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e099      	b.n	8003438 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0201 	bic.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003324:	e00f      	b.n	8003346 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003326:	f7ff fe9d 	bl	8003064 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b05      	cmp	r3, #5
 8003332:	d908      	bls.n	8003346 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2220      	movs	r2, #32
 8003338:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2203      	movs	r2, #3
 800333e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e078      	b.n	8003438 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1e8      	bne.n	8003326 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	4b38      	ldr	r3, [pc, #224]	; (8003440 <HAL_DMA_Init+0x158>)
 8003360:	4013      	ands	r3, r2
 8003362:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003372:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800337e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800338a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	4313      	orrs	r3, r2
 8003396:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	2b04      	cmp	r3, #4
 800339e:	d107      	bne.n	80033b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a8:	4313      	orrs	r3, r2
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f023 0307 	bic.w	r3, r3, #7
 80033c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d117      	bne.n	800340a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00e      	beq.n	800340a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 fb01 	bl	80039f4 <DMA_CheckFifoParam>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d008      	beq.n	800340a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2240      	movs	r2, #64	; 0x40
 80033fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003406:	2301      	movs	r3, #1
 8003408:	e016      	b.n	8003438 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 fab8 	bl	8003988 <DMA_CalcBaseAndBitshift>
 8003418:	4603      	mov	r3, r0
 800341a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003420:	223f      	movs	r2, #63	; 0x3f
 8003422:	409a      	lsls	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3718      	adds	r7, #24
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	f010803f 	.word	0xf010803f

08003444 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
 8003450:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003452:	2300      	movs	r3, #0
 8003454:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_DMA_Start_IT+0x26>
 8003466:	2302      	movs	r3, #2
 8003468:	e040      	b.n	80034ec <HAL_DMA_Start_IT+0xa8>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b01      	cmp	r3, #1
 800347c:	d12f      	bne.n	80034de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2202      	movs	r2, #2
 8003482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	68b9      	ldr	r1, [r7, #8]
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f000 fa4a 	bl	800392c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349c:	223f      	movs	r2, #63	; 0x3f
 800349e:	409a      	lsls	r2, r3
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f042 0216 	orr.w	r2, r2, #22
 80034b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d007      	beq.n	80034cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0208 	orr.w	r2, r2, #8
 80034ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0201 	orr.w	r2, r2, #1
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	e005      	b.n	80034ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034e6:	2302      	movs	r3, #2
 80034e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3718      	adds	r7, #24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003500:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003502:	f7ff fdaf 	bl	8003064 <HAL_GetTick>
 8003506:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d008      	beq.n	8003526 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2280      	movs	r2, #128	; 0x80
 8003518:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e052      	b.n	80035cc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 0216 	bic.w	r2, r2, #22
 8003534:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	695a      	ldr	r2, [r3, #20]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003544:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	2b00      	cmp	r3, #0
 800354c:	d103      	bne.n	8003556 <HAL_DMA_Abort+0x62>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003552:	2b00      	cmp	r3, #0
 8003554:	d007      	beq.n	8003566 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 0208 	bic.w	r2, r2, #8
 8003564:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 0201 	bic.w	r2, r2, #1
 8003574:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003576:	e013      	b.n	80035a0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003578:	f7ff fd74 	bl	8003064 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b05      	cmp	r3, #5
 8003584:	d90c      	bls.n	80035a0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2220      	movs	r2, #32
 800358a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2203      	movs	r2, #3
 8003590:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e015      	b.n	80035cc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1e4      	bne.n	8003578 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b2:	223f      	movs	r2, #63	; 0x3f
 80035b4:	409a      	lsls	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d004      	beq.n	80035f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2280      	movs	r2, #128	; 0x80
 80035ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e00c      	b.n	800360c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2205      	movs	r2, #5
 80035f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 0201 	bic.w	r2, r2, #1
 8003608:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003620:	2300      	movs	r3, #0
 8003622:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003624:	4b92      	ldr	r3, [pc, #584]	; (8003870 <HAL_DMA_IRQHandler+0x258>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a92      	ldr	r2, [pc, #584]	; (8003874 <HAL_DMA_IRQHandler+0x25c>)
 800362a:	fba2 2303 	umull	r2, r3, r2, r3
 800362e:	0a9b      	lsrs	r3, r3, #10
 8003630:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003636:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003642:	2208      	movs	r2, #8
 8003644:	409a      	lsls	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4013      	ands	r3, r2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d01a      	beq.n	8003684 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	d013      	beq.n	8003684 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 0204 	bic.w	r2, r2, #4
 800366a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003670:	2208      	movs	r2, #8
 8003672:	409a      	lsls	r2, r3
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367c:	f043 0201 	orr.w	r2, r3, #1
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003688:	2201      	movs	r2, #1
 800368a:	409a      	lsls	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4013      	ands	r3, r2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d012      	beq.n	80036ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00b      	beq.n	80036ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a6:	2201      	movs	r2, #1
 80036a8:	409a      	lsls	r2, r3
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b2:	f043 0202 	orr.w	r2, r3, #2
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036be:	2204      	movs	r2, #4
 80036c0:	409a      	lsls	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	4013      	ands	r3, r2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d012      	beq.n	80036f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00b      	beq.n	80036f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036dc:	2204      	movs	r2, #4
 80036de:	409a      	lsls	r2, r3
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e8:	f043 0204 	orr.w	r2, r3, #4
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f4:	2210      	movs	r2, #16
 80036f6:	409a      	lsls	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4013      	ands	r3, r2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d043      	beq.n	8003788 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d03c      	beq.n	8003788 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003712:	2210      	movs	r2, #16
 8003714:	409a      	lsls	r2, r3
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d018      	beq.n	800375a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d108      	bne.n	8003748 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	2b00      	cmp	r3, #0
 800373c:	d024      	beq.n	8003788 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	4798      	blx	r3
 8003746:	e01f      	b.n	8003788 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800374c:	2b00      	cmp	r3, #0
 800374e:	d01b      	beq.n	8003788 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	4798      	blx	r3
 8003758:	e016      	b.n	8003788 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003764:	2b00      	cmp	r3, #0
 8003766:	d107      	bne.n	8003778 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0208 	bic.w	r2, r2, #8
 8003776:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800378c:	2220      	movs	r2, #32
 800378e:	409a      	lsls	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4013      	ands	r3, r2
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 808e 	beq.w	80038b6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0310 	and.w	r3, r3, #16
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 8086 	beq.w	80038b6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ae:	2220      	movs	r2, #32
 80037b0:	409a      	lsls	r2, r3
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b05      	cmp	r3, #5
 80037c0:	d136      	bne.n	8003830 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0216 	bic.w	r2, r2, #22
 80037d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695a      	ldr	r2, [r3, #20]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d103      	bne.n	80037f2 <HAL_DMA_IRQHandler+0x1da>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d007      	beq.n	8003802 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0208 	bic.w	r2, r2, #8
 8003800:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003806:	223f      	movs	r2, #63	; 0x3f
 8003808:	409a      	lsls	r2, r3
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003822:	2b00      	cmp	r3, #0
 8003824:	d07d      	beq.n	8003922 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	4798      	blx	r3
        }
        return;
 800382e:	e078      	b.n	8003922 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d01c      	beq.n	8003878 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d108      	bne.n	800385e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003850:	2b00      	cmp	r3, #0
 8003852:	d030      	beq.n	80038b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	4798      	blx	r3
 800385c:	e02b      	b.n	80038b6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003862:	2b00      	cmp	r3, #0
 8003864:	d027      	beq.n	80038b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	4798      	blx	r3
 800386e:	e022      	b.n	80038b6 <HAL_DMA_IRQHandler+0x29e>
 8003870:	200003c0 	.word	0x200003c0
 8003874:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10f      	bne.n	80038a6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 0210 	bic.w	r2, r2, #16
 8003894:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d032      	beq.n	8003924 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d022      	beq.n	8003910 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2205      	movs	r2, #5
 80038ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 0201 	bic.w	r2, r2, #1
 80038e0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	3301      	adds	r3, #1
 80038e6:	60bb      	str	r3, [r7, #8]
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d307      	bcc.n	80038fe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1f2      	bne.n	80038e2 <HAL_DMA_IRQHandler+0x2ca>
 80038fc:	e000      	b.n	8003900 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80038fe:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003914:	2b00      	cmp	r3, #0
 8003916:	d005      	beq.n	8003924 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	4798      	blx	r3
 8003920:	e000      	b.n	8003924 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003922:	bf00      	nop
    }
  }
}
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop

0800392c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
 8003938:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003948:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	2b40      	cmp	r3, #64	; 0x40
 8003958:	d108      	bne.n	800396c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800396a:	e007      	b.n	800397c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	60da      	str	r2, [r3, #12]
}
 800397c:	bf00      	nop
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	b2db      	uxtb	r3, r3
 8003996:	3b10      	subs	r3, #16
 8003998:	4a14      	ldr	r2, [pc, #80]	; (80039ec <DMA_CalcBaseAndBitshift+0x64>)
 800399a:	fba2 2303 	umull	r2, r3, r2, r3
 800399e:	091b      	lsrs	r3, r3, #4
 80039a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039a2:	4a13      	ldr	r2, [pc, #76]	; (80039f0 <DMA_CalcBaseAndBitshift+0x68>)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4413      	add	r3, r2
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	461a      	mov	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2b03      	cmp	r3, #3
 80039b4:	d909      	bls.n	80039ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039be:	f023 0303 	bic.w	r3, r3, #3
 80039c2:	1d1a      	adds	r2, r3, #4
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	659a      	str	r2, [r3, #88]	; 0x58
 80039c8:	e007      	b.n	80039da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039d2:	f023 0303 	bic.w	r3, r3, #3
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	aaaaaaab 	.word	0xaaaaaaab
 80039f0:	0800846c 	.word	0x0800846c

080039f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039fc:	2300      	movs	r3, #0
 80039fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a04:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d11f      	bne.n	8003a4e <DMA_CheckFifoParam+0x5a>
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	2b03      	cmp	r3, #3
 8003a12:	d856      	bhi.n	8003ac2 <DMA_CheckFifoParam+0xce>
 8003a14:	a201      	add	r2, pc, #4	; (adr r2, 8003a1c <DMA_CheckFifoParam+0x28>)
 8003a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1a:	bf00      	nop
 8003a1c:	08003a2d 	.word	0x08003a2d
 8003a20:	08003a3f 	.word	0x08003a3f
 8003a24:	08003a2d 	.word	0x08003a2d
 8003a28:	08003ac3 	.word	0x08003ac3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d046      	beq.n	8003ac6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a3c:	e043      	b.n	8003ac6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a42:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a46:	d140      	bne.n	8003aca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a4c:	e03d      	b.n	8003aca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a56:	d121      	bne.n	8003a9c <DMA_CheckFifoParam+0xa8>
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2b03      	cmp	r3, #3
 8003a5c:	d837      	bhi.n	8003ace <DMA_CheckFifoParam+0xda>
 8003a5e:	a201      	add	r2, pc, #4	; (adr r2, 8003a64 <DMA_CheckFifoParam+0x70>)
 8003a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a64:	08003a75 	.word	0x08003a75
 8003a68:	08003a7b 	.word	0x08003a7b
 8003a6c:	08003a75 	.word	0x08003a75
 8003a70:	08003a8d 	.word	0x08003a8d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	73fb      	strb	r3, [r7, #15]
      break;
 8003a78:	e030      	b.n	8003adc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d025      	beq.n	8003ad2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a8a:	e022      	b.n	8003ad2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a90:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a94:	d11f      	bne.n	8003ad6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a9a:	e01c      	b.n	8003ad6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d903      	bls.n	8003aaa <DMA_CheckFifoParam+0xb6>
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	2b03      	cmp	r3, #3
 8003aa6:	d003      	beq.n	8003ab0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003aa8:	e018      	b.n	8003adc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	73fb      	strb	r3, [r7, #15]
      break;
 8003aae:	e015      	b.n	8003adc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00e      	beq.n	8003ada <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	73fb      	strb	r3, [r7, #15]
      break;
 8003ac0:	e00b      	b.n	8003ada <DMA_CheckFifoParam+0xe6>
      break;
 8003ac2:	bf00      	nop
 8003ac4:	e00a      	b.n	8003adc <DMA_CheckFifoParam+0xe8>
      break;
 8003ac6:	bf00      	nop
 8003ac8:	e008      	b.n	8003adc <DMA_CheckFifoParam+0xe8>
      break;
 8003aca:	bf00      	nop
 8003acc:	e006      	b.n	8003adc <DMA_CheckFifoParam+0xe8>
      break;
 8003ace:	bf00      	nop
 8003ad0:	e004      	b.n	8003adc <DMA_CheckFifoParam+0xe8>
      break;
 8003ad2:	bf00      	nop
 8003ad4:	e002      	b.n	8003adc <DMA_CheckFifoParam+0xe8>
      break;   
 8003ad6:	bf00      	nop
 8003ad8:	e000      	b.n	8003adc <DMA_CheckFifoParam+0xe8>
      break;
 8003ada:	bf00      	nop
    }
  } 
  
  return status; 
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop

08003aec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b089      	sub	sp, #36	; 0x24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b02:	2300      	movs	r3, #0
 8003b04:	61fb      	str	r3, [r7, #28]
 8003b06:	e16b      	b.n	8003de0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b08:	2201      	movs	r2, #1
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	f040 815a 	bne.w	8003dda <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f003 0303 	and.w	r3, r3, #3
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d005      	beq.n	8003b3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d130      	bne.n	8003ba0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	2203      	movs	r2, #3
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	43db      	mvns	r3, r3
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	4013      	ands	r3, r2
 8003b54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	68da      	ldr	r2, [r3, #12]
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b74:	2201      	movs	r2, #1
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	43db      	mvns	r3, r3
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	4013      	ands	r3, r2
 8003b82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	091b      	lsrs	r3, r3, #4
 8003b8a:	f003 0201 	and.w	r2, r3, #1
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f003 0303 	and.w	r3, r3, #3
 8003ba8:	2b03      	cmp	r3, #3
 8003baa:	d017      	beq.n	8003bdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	2203      	movs	r2, #3
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f003 0303 	and.w	r3, r3, #3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d123      	bne.n	8003c30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	08da      	lsrs	r2, r3, #3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	3208      	adds	r2, #8
 8003bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	220f      	movs	r2, #15
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	43db      	mvns	r3, r3
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	691a      	ldr	r2, [r3, #16]
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	f003 0307 	and.w	r3, r3, #7
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	08da      	lsrs	r2, r3, #3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	3208      	adds	r2, #8
 8003c2a:	69b9      	ldr	r1, [r7, #24]
 8003c2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	2203      	movs	r2, #3
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	43db      	mvns	r3, r3
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	4013      	ands	r3, r2
 8003c46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f003 0203 	and.w	r2, r3, #3
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	fa02 f303 	lsl.w	r3, r2, r3
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 80b4 	beq.w	8003dda <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c72:	2300      	movs	r3, #0
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	4b60      	ldr	r3, [pc, #384]	; (8003df8 <HAL_GPIO_Init+0x30c>)
 8003c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7a:	4a5f      	ldr	r2, [pc, #380]	; (8003df8 <HAL_GPIO_Init+0x30c>)
 8003c7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c80:	6453      	str	r3, [r2, #68]	; 0x44
 8003c82:	4b5d      	ldr	r3, [pc, #372]	; (8003df8 <HAL_GPIO_Init+0x30c>)
 8003c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c8e:	4a5b      	ldr	r2, [pc, #364]	; (8003dfc <HAL_GPIO_Init+0x310>)
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	089b      	lsrs	r3, r3, #2
 8003c94:	3302      	adds	r3, #2
 8003c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	220f      	movs	r2, #15
 8003ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8003caa:	43db      	mvns	r3, r3
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a52      	ldr	r2, [pc, #328]	; (8003e00 <HAL_GPIO_Init+0x314>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d02b      	beq.n	8003d12 <HAL_GPIO_Init+0x226>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a51      	ldr	r2, [pc, #324]	; (8003e04 <HAL_GPIO_Init+0x318>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d025      	beq.n	8003d0e <HAL_GPIO_Init+0x222>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a50      	ldr	r2, [pc, #320]	; (8003e08 <HAL_GPIO_Init+0x31c>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d01f      	beq.n	8003d0a <HAL_GPIO_Init+0x21e>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a4f      	ldr	r2, [pc, #316]	; (8003e0c <HAL_GPIO_Init+0x320>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d019      	beq.n	8003d06 <HAL_GPIO_Init+0x21a>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a4e      	ldr	r2, [pc, #312]	; (8003e10 <HAL_GPIO_Init+0x324>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d013      	beq.n	8003d02 <HAL_GPIO_Init+0x216>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a4d      	ldr	r2, [pc, #308]	; (8003e14 <HAL_GPIO_Init+0x328>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d00d      	beq.n	8003cfe <HAL_GPIO_Init+0x212>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a4c      	ldr	r2, [pc, #304]	; (8003e18 <HAL_GPIO_Init+0x32c>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d007      	beq.n	8003cfa <HAL_GPIO_Init+0x20e>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a4b      	ldr	r2, [pc, #300]	; (8003e1c <HAL_GPIO_Init+0x330>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d101      	bne.n	8003cf6 <HAL_GPIO_Init+0x20a>
 8003cf2:	2307      	movs	r3, #7
 8003cf4:	e00e      	b.n	8003d14 <HAL_GPIO_Init+0x228>
 8003cf6:	2308      	movs	r3, #8
 8003cf8:	e00c      	b.n	8003d14 <HAL_GPIO_Init+0x228>
 8003cfa:	2306      	movs	r3, #6
 8003cfc:	e00a      	b.n	8003d14 <HAL_GPIO_Init+0x228>
 8003cfe:	2305      	movs	r3, #5
 8003d00:	e008      	b.n	8003d14 <HAL_GPIO_Init+0x228>
 8003d02:	2304      	movs	r3, #4
 8003d04:	e006      	b.n	8003d14 <HAL_GPIO_Init+0x228>
 8003d06:	2303      	movs	r3, #3
 8003d08:	e004      	b.n	8003d14 <HAL_GPIO_Init+0x228>
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	e002      	b.n	8003d14 <HAL_GPIO_Init+0x228>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e000      	b.n	8003d14 <HAL_GPIO_Init+0x228>
 8003d12:	2300      	movs	r3, #0
 8003d14:	69fa      	ldr	r2, [r7, #28]
 8003d16:	f002 0203 	and.w	r2, r2, #3
 8003d1a:	0092      	lsls	r2, r2, #2
 8003d1c:	4093      	lsls	r3, r2
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d24:	4935      	ldr	r1, [pc, #212]	; (8003dfc <HAL_GPIO_Init+0x310>)
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	089b      	lsrs	r3, r3, #2
 8003d2a:	3302      	adds	r3, #2
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d32:	4b3b      	ldr	r3, [pc, #236]	; (8003e20 <HAL_GPIO_Init+0x334>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	43db      	mvns	r3, r3
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d56:	4a32      	ldr	r2, [pc, #200]	; (8003e20 <HAL_GPIO_Init+0x334>)
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003d5c:	4b30      	ldr	r3, [pc, #192]	; (8003e20 <HAL_GPIO_Init+0x334>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	43db      	mvns	r3, r3
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d80:	4a27      	ldr	r2, [pc, #156]	; (8003e20 <HAL_GPIO_Init+0x334>)
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d86:	4b26      	ldr	r3, [pc, #152]	; (8003e20 <HAL_GPIO_Init+0x334>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	43db      	mvns	r3, r3
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	4013      	ands	r3, r2
 8003d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003daa:	4a1d      	ldr	r2, [pc, #116]	; (8003e20 <HAL_GPIO_Init+0x334>)
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003db0:	4b1b      	ldr	r3, [pc, #108]	; (8003e20 <HAL_GPIO_Init+0x334>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	43db      	mvns	r3, r3
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d003      	beq.n	8003dd4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003dd4:	4a12      	ldr	r2, [pc, #72]	; (8003e20 <HAL_GPIO_Init+0x334>)
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	61fb      	str	r3, [r7, #28]
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	2b0f      	cmp	r3, #15
 8003de4:	f67f ae90 	bls.w	8003b08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003de8:	bf00      	nop
 8003dea:	bf00      	nop
 8003dec:	3724      	adds	r7, #36	; 0x24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40023800 	.word	0x40023800
 8003dfc:	40013800 	.word	0x40013800
 8003e00:	40020000 	.word	0x40020000
 8003e04:	40020400 	.word	0x40020400
 8003e08:	40020800 	.word	0x40020800
 8003e0c:	40020c00 	.word	0x40020c00
 8003e10:	40021000 	.word	0x40021000
 8003e14:	40021400 	.word	0x40021400
 8003e18:	40021800 	.word	0x40021800
 8003e1c:	40021c00 	.word	0x40021c00
 8003e20:	40013c00 	.word	0x40013c00

08003e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	807b      	strh	r3, [r7, #2]
 8003e30:	4613      	mov	r3, r2
 8003e32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e34:	787b      	ldrb	r3, [r7, #1]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e3a:	887a      	ldrh	r2, [r7, #2]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e40:	e003      	b.n	8003e4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e42:	887b      	ldrh	r3, [r7, #2]
 8003e44:	041a      	lsls	r2, r3, #16
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	619a      	str	r2, [r3, #24]
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
	...

08003e58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e12b      	b.n	80040c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d106      	bne.n	8003e84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7fe fb78 	bl	8002574 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2224      	movs	r2, #36	; 0x24
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 0201 	bic.w	r2, r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003eaa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003eba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ebc:	f001 fbac 	bl	8005618 <HAL_RCC_GetPCLK1Freq>
 8003ec0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	4a81      	ldr	r2, [pc, #516]	; (80040cc <HAL_I2C_Init+0x274>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d807      	bhi.n	8003edc <HAL_I2C_Init+0x84>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4a80      	ldr	r2, [pc, #512]	; (80040d0 <HAL_I2C_Init+0x278>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	bf94      	ite	ls
 8003ed4:	2301      	movls	r3, #1
 8003ed6:	2300      	movhi	r3, #0
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	e006      	b.n	8003eea <HAL_I2C_Init+0x92>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4a7d      	ldr	r2, [pc, #500]	; (80040d4 <HAL_I2C_Init+0x27c>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	bf94      	ite	ls
 8003ee4:	2301      	movls	r3, #1
 8003ee6:	2300      	movhi	r3, #0
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e0e7      	b.n	80040c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4a78      	ldr	r2, [pc, #480]	; (80040d8 <HAL_I2C_Init+0x280>)
 8003ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8003efa:	0c9b      	lsrs	r3, r3, #18
 8003efc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	4a6a      	ldr	r2, [pc, #424]	; (80040cc <HAL_I2C_Init+0x274>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d802      	bhi.n	8003f2c <HAL_I2C_Init+0xd4>
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	e009      	b.n	8003f40 <HAL_I2C_Init+0xe8>
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f32:	fb02 f303 	mul.w	r3, r2, r3
 8003f36:	4a69      	ldr	r2, [pc, #420]	; (80040dc <HAL_I2C_Init+0x284>)
 8003f38:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3c:	099b      	lsrs	r3, r3, #6
 8003f3e:	3301      	adds	r3, #1
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6812      	ldr	r2, [r2, #0]
 8003f44:	430b      	orrs	r3, r1
 8003f46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	495c      	ldr	r1, [pc, #368]	; (80040cc <HAL_I2C_Init+0x274>)
 8003f5c:	428b      	cmp	r3, r1
 8003f5e:	d819      	bhi.n	8003f94 <HAL_I2C_Init+0x13c>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	1e59      	subs	r1, r3, #1
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f6e:	1c59      	adds	r1, r3, #1
 8003f70:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003f74:	400b      	ands	r3, r1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00a      	beq.n	8003f90 <HAL_I2C_Init+0x138>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	1e59      	subs	r1, r3, #1
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f88:	3301      	adds	r3, #1
 8003f8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f8e:	e051      	b.n	8004034 <HAL_I2C_Init+0x1dc>
 8003f90:	2304      	movs	r3, #4
 8003f92:	e04f      	b.n	8004034 <HAL_I2C_Init+0x1dc>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d111      	bne.n	8003fc0 <HAL_I2C_Init+0x168>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	1e58      	subs	r0, r3, #1
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6859      	ldr	r1, [r3, #4]
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	440b      	add	r3, r1
 8003faa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fae:	3301      	adds	r3, #1
 8003fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	bf0c      	ite	eq
 8003fb8:	2301      	moveq	r3, #1
 8003fba:	2300      	movne	r3, #0
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	e012      	b.n	8003fe6 <HAL_I2C_Init+0x18e>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	1e58      	subs	r0, r3, #1
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6859      	ldr	r1, [r3, #4]
 8003fc8:	460b      	mov	r3, r1
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	440b      	add	r3, r1
 8003fce:	0099      	lsls	r1, r3, #2
 8003fd0:	440b      	add	r3, r1
 8003fd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	bf0c      	ite	eq
 8003fe0:	2301      	moveq	r3, #1
 8003fe2:	2300      	movne	r3, #0
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <HAL_I2C_Init+0x196>
 8003fea:	2301      	movs	r3, #1
 8003fec:	e022      	b.n	8004034 <HAL_I2C_Init+0x1dc>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10e      	bne.n	8004014 <HAL_I2C_Init+0x1bc>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	1e58      	subs	r0, r3, #1
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6859      	ldr	r1, [r3, #4]
 8003ffe:	460b      	mov	r3, r1
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	440b      	add	r3, r1
 8004004:	fbb0 f3f3 	udiv	r3, r0, r3
 8004008:	3301      	adds	r3, #1
 800400a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800400e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004012:	e00f      	b.n	8004034 <HAL_I2C_Init+0x1dc>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	1e58      	subs	r0, r3, #1
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6859      	ldr	r1, [r3, #4]
 800401c:	460b      	mov	r3, r1
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	440b      	add	r3, r1
 8004022:	0099      	lsls	r1, r3, #2
 8004024:	440b      	add	r3, r1
 8004026:	fbb0 f3f3 	udiv	r3, r0, r3
 800402a:	3301      	adds	r3, #1
 800402c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004030:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004034:	6879      	ldr	r1, [r7, #4]
 8004036:	6809      	ldr	r1, [r1, #0]
 8004038:	4313      	orrs	r3, r2
 800403a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	69da      	ldr	r2, [r3, #28]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	431a      	orrs	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004062:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	6911      	ldr	r1, [r2, #16]
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	68d2      	ldr	r2, [r2, #12]
 800406e:	4311      	orrs	r1, r2
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	6812      	ldr	r2, [r2, #0]
 8004074:	430b      	orrs	r3, r1
 8004076:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	695a      	ldr	r2, [r3, #20]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	431a      	orrs	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f042 0201 	orr.w	r2, r2, #1
 80040a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2220      	movs	r2, #32
 80040ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	000186a0 	.word	0x000186a0
 80040d0:	001e847f 	.word	0x001e847f
 80040d4:	003d08ff 	.word	0x003d08ff
 80040d8:	431bde83 	.word	0x431bde83
 80040dc:	10624dd3 	.word	0x10624dd3

080040e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b088      	sub	sp, #32
 80040e4:	af02      	add	r7, sp, #8
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	4608      	mov	r0, r1
 80040ea:	4611      	mov	r1, r2
 80040ec:	461a      	mov	r2, r3
 80040ee:	4603      	mov	r3, r0
 80040f0:	817b      	strh	r3, [r7, #10]
 80040f2:	460b      	mov	r3, r1
 80040f4:	813b      	strh	r3, [r7, #8]
 80040f6:	4613      	mov	r3, r2
 80040f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040fa:	f7fe ffb3 	bl	8003064 <HAL_GetTick>
 80040fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b20      	cmp	r3, #32
 800410a:	f040 80d9 	bne.w	80042c0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	2319      	movs	r3, #25
 8004114:	2201      	movs	r2, #1
 8004116:	496d      	ldr	r1, [pc, #436]	; (80042cc <HAL_I2C_Mem_Write+0x1ec>)
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f000 fc7f 	bl	8004a1c <I2C_WaitOnFlagUntilTimeout>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004124:	2302      	movs	r3, #2
 8004126:	e0cc      	b.n	80042c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800412e:	2b01      	cmp	r3, #1
 8004130:	d101      	bne.n	8004136 <HAL_I2C_Mem_Write+0x56>
 8004132:	2302      	movs	r3, #2
 8004134:	e0c5      	b.n	80042c2 <HAL_I2C_Mem_Write+0x1e2>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b01      	cmp	r3, #1
 800414a:	d007      	beq.n	800415c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0201 	orr.w	r2, r2, #1
 800415a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800416a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2221      	movs	r2, #33	; 0x21
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2240      	movs	r2, #64	; 0x40
 8004178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6a3a      	ldr	r2, [r7, #32]
 8004186:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800418c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004192:	b29a      	uxth	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	4a4d      	ldr	r2, [pc, #308]	; (80042d0 <HAL_I2C_Mem_Write+0x1f0>)
 800419c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800419e:	88f8      	ldrh	r0, [r7, #6]
 80041a0:	893a      	ldrh	r2, [r7, #8]
 80041a2:	8979      	ldrh	r1, [r7, #10]
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	9301      	str	r3, [sp, #4]
 80041a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	4603      	mov	r3, r0
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 fab6 	bl	8004720 <I2C_RequestMemoryWrite>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d052      	beq.n	8004260 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e081      	b.n	80042c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f000 fd00 	bl	8004bc8 <I2C_WaitOnTXEFlagUntilTimeout>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00d      	beq.n	80041ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	d107      	bne.n	80041e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e06b      	b.n	80042c2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	781a      	ldrb	r2, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004204:	3b01      	subs	r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004210:	b29b      	uxth	r3, r3
 8004212:	3b01      	subs	r3, #1
 8004214:	b29a      	uxth	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	2b04      	cmp	r3, #4
 8004226:	d11b      	bne.n	8004260 <HAL_I2C_Mem_Write+0x180>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800422c:	2b00      	cmp	r3, #0
 800422e:	d017      	beq.n	8004260 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	781a      	ldrb	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800424a:	3b01      	subs	r3, #1
 800424c:	b29a      	uxth	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004256:	b29b      	uxth	r3, r3
 8004258:	3b01      	subs	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1aa      	bne.n	80041be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f000 fcec 	bl	8004c4a <I2C_WaitOnBTFFlagUntilTimeout>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00d      	beq.n	8004294 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	2b04      	cmp	r3, #4
 800427e:	d107      	bne.n	8004290 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800428e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e016      	b.n	80042c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80042bc:	2300      	movs	r3, #0
 80042be:	e000      	b.n	80042c2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80042c0:	2302      	movs	r3, #2
  }
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	00100002 	.word	0x00100002
 80042d0:	ffff0000 	.word	0xffff0000

080042d4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b08c      	sub	sp, #48	; 0x30
 80042d8:	af02      	add	r7, sp, #8
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	4608      	mov	r0, r1
 80042de:	4611      	mov	r1, r2
 80042e0:	461a      	mov	r2, r3
 80042e2:	4603      	mov	r3, r0
 80042e4:	817b      	strh	r3, [r7, #10]
 80042e6:	460b      	mov	r3, r1
 80042e8:	813b      	strh	r3, [r7, #8]
 80042ea:	4613      	mov	r3, r2
 80042ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042ee:	f7fe feb9 	bl	8003064 <HAL_GetTick>
 80042f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	2b20      	cmp	r3, #32
 80042fe:	f040 8208 	bne.w	8004712 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	2319      	movs	r3, #25
 8004308:	2201      	movs	r2, #1
 800430a:	497b      	ldr	r1, [pc, #492]	; (80044f8 <HAL_I2C_Mem_Read+0x224>)
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 fb85 	bl	8004a1c <I2C_WaitOnFlagUntilTimeout>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004318:	2302      	movs	r3, #2
 800431a:	e1fb      	b.n	8004714 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004322:	2b01      	cmp	r3, #1
 8004324:	d101      	bne.n	800432a <HAL_I2C_Mem_Read+0x56>
 8004326:	2302      	movs	r3, #2
 8004328:	e1f4      	b.n	8004714 <HAL_I2C_Mem_Read+0x440>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b01      	cmp	r3, #1
 800433e:	d007      	beq.n	8004350 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0201 	orr.w	r2, r2, #1
 800434e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800435e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2222      	movs	r2, #34	; 0x22
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2240      	movs	r2, #64	; 0x40
 800436c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800437a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004380:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004386:	b29a      	uxth	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	4a5b      	ldr	r2, [pc, #364]	; (80044fc <HAL_I2C_Mem_Read+0x228>)
 8004390:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004392:	88f8      	ldrh	r0, [r7, #6]
 8004394:	893a      	ldrh	r2, [r7, #8]
 8004396:	8979      	ldrh	r1, [r7, #10]
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	9301      	str	r3, [sp, #4]
 800439c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	4603      	mov	r3, r0
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f000 fa52 	bl	800484c <I2C_RequestMemoryRead>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e1b0      	b.n	8004714 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d113      	bne.n	80043e2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ba:	2300      	movs	r3, #0
 80043bc:	623b      	str	r3, [r7, #32]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	623b      	str	r3, [r7, #32]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	623b      	str	r3, [r7, #32]
 80043ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	e184      	b.n	80046ec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d11b      	bne.n	8004422 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043fa:	2300      	movs	r3, #0
 80043fc:	61fb      	str	r3, [r7, #28]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	61fb      	str	r3, [r7, #28]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	61fb      	str	r3, [r7, #28]
 800440e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800441e:	601a      	str	r2, [r3, #0]
 8004420:	e164      	b.n	80046ec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004426:	2b02      	cmp	r3, #2
 8004428:	d11b      	bne.n	8004462 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004438:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004448:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800444a:	2300      	movs	r3, #0
 800444c:	61bb      	str	r3, [r7, #24]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	61bb      	str	r3, [r7, #24]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	61bb      	str	r3, [r7, #24]
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	e144      	b.n	80046ec <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004462:	2300      	movs	r3, #0
 8004464:	617b      	str	r3, [r7, #20]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	617b      	str	r3, [r7, #20]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	617b      	str	r3, [r7, #20]
 8004476:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004478:	e138      	b.n	80046ec <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800447e:	2b03      	cmp	r3, #3
 8004480:	f200 80f1 	bhi.w	8004666 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004488:	2b01      	cmp	r3, #1
 800448a:	d123      	bne.n	80044d4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800448c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800448e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 fc1b 	bl	8004ccc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e139      	b.n	8004714 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	691a      	ldr	r2, [r3, #16]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	b2d2      	uxtb	r2, r2
 80044ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	1c5a      	adds	r2, r3, #1
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044bc:	3b01      	subs	r3, #1
 80044be:	b29a      	uxth	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	3b01      	subs	r3, #1
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044d2:	e10b      	b.n	80046ec <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d14e      	bne.n	800457a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e2:	2200      	movs	r2, #0
 80044e4:	4906      	ldr	r1, [pc, #24]	; (8004500 <HAL_I2C_Mem_Read+0x22c>)
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f000 fa98 	bl	8004a1c <I2C_WaitOnFlagUntilTimeout>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d008      	beq.n	8004504 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e10e      	b.n	8004714 <HAL_I2C_Mem_Read+0x440>
 80044f6:	bf00      	nop
 80044f8:	00100002 	.word	0x00100002
 80044fc:	ffff0000 	.word	0xffff0000
 8004500:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004512:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	691a      	ldr	r2, [r3, #16]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451e:	b2d2      	uxtb	r2, r2
 8004520:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004530:	3b01      	subs	r3, #1
 8004532:	b29a      	uxth	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453c:	b29b      	uxth	r3, r3
 800453e:	3b01      	subs	r3, #1
 8004540:	b29a      	uxth	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	691a      	ldr	r2, [r3, #16]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	b2d2      	uxtb	r2, r2
 8004552:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004558:	1c5a      	adds	r2, r3, #1
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004562:	3b01      	subs	r3, #1
 8004564:	b29a      	uxth	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800456e:	b29b      	uxth	r3, r3
 8004570:	3b01      	subs	r3, #1
 8004572:	b29a      	uxth	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004578:	e0b8      	b.n	80046ec <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004580:	2200      	movs	r2, #0
 8004582:	4966      	ldr	r1, [pc, #408]	; (800471c <HAL_I2C_Mem_Read+0x448>)
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f000 fa49 	bl	8004a1c <I2C_WaitOnFlagUntilTimeout>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d001      	beq.n	8004594 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e0bf      	b.n	8004714 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	691a      	ldr	r2, [r3, #16]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ae:	b2d2      	uxtb	r2, r2
 80045b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b6:	1c5a      	adds	r2, r3, #1
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c0:	3b01      	subs	r3, #1
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	3b01      	subs	r3, #1
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045dc:	2200      	movs	r2, #0
 80045de:	494f      	ldr	r1, [pc, #316]	; (800471c <HAL_I2C_Mem_Read+0x448>)
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 fa1b 	bl	8004a1c <I2C_WaitOnFlagUntilTimeout>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d001      	beq.n	80045f0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e091      	b.n	8004714 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	691a      	ldr	r2, [r3, #16]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460a:	b2d2      	uxtb	r2, r2
 800460c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800461c:	3b01      	subs	r3, #1
 800461e:	b29a      	uxth	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004628:	b29b      	uxth	r3, r3
 800462a:	3b01      	subs	r3, #1
 800462c:	b29a      	uxth	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	691a      	ldr	r2, [r3, #16]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	b2d2      	uxtb	r2, r2
 800463e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	1c5a      	adds	r2, r3, #1
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800464e:	3b01      	subs	r3, #1
 8004650:	b29a      	uxth	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465a:	b29b      	uxth	r3, r3
 800465c:	3b01      	subs	r3, #1
 800465e:	b29a      	uxth	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004664:	e042      	b.n	80046ec <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004668:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f000 fb2e 	bl	8004ccc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e04c      	b.n	8004714 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	691a      	ldr	r2, [r3, #16]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	b2d2      	uxtb	r2, r2
 8004686:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	1c5a      	adds	r2, r3, #1
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004696:	3b01      	subs	r3, #1
 8004698:	b29a      	uxth	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	3b01      	subs	r3, #1
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	f003 0304 	and.w	r3, r3, #4
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	d118      	bne.n	80046ec <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	691a      	ldr	r2, [r3, #16]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c4:	b2d2      	uxtb	r2, r2
 80046c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046cc:	1c5a      	adds	r2, r3, #1
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d6:	3b01      	subs	r3, #1
 80046d8:	b29a      	uxth	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	3b01      	subs	r3, #1
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f47f aec2 	bne.w	800447a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2220      	movs	r2, #32
 80046fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800470e:	2300      	movs	r3, #0
 8004710:	e000      	b.n	8004714 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004712:	2302      	movs	r3, #2
  }
}
 8004714:	4618      	mov	r0, r3
 8004716:	3728      	adds	r7, #40	; 0x28
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	00010004 	.word	0x00010004

08004720 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b088      	sub	sp, #32
 8004724:	af02      	add	r7, sp, #8
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	4608      	mov	r0, r1
 800472a:	4611      	mov	r1, r2
 800472c:	461a      	mov	r2, r3
 800472e:	4603      	mov	r3, r0
 8004730:	817b      	strh	r3, [r7, #10]
 8004732:	460b      	mov	r3, r1
 8004734:	813b      	strh	r3, [r7, #8]
 8004736:	4613      	mov	r3, r2
 8004738:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004748:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800474a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	6a3b      	ldr	r3, [r7, #32]
 8004750:	2200      	movs	r2, #0
 8004752:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 f960 	bl	8004a1c <I2C_WaitOnFlagUntilTimeout>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00d      	beq.n	800477e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800476c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004770:	d103      	bne.n	800477a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004778:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e05f      	b.n	800483e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800477e:	897b      	ldrh	r3, [r7, #10]
 8004780:	b2db      	uxtb	r3, r3
 8004782:	461a      	mov	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800478c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	6a3a      	ldr	r2, [r7, #32]
 8004792:	492d      	ldr	r1, [pc, #180]	; (8004848 <I2C_RequestMemoryWrite+0x128>)
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f000 f998 	bl	8004aca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e04c      	b.n	800483e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047a4:	2300      	movs	r3, #0
 80047a6:	617b      	str	r3, [r7, #20]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	617b      	str	r3, [r7, #20]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	617b      	str	r3, [r7, #20]
 80047b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047bc:	6a39      	ldr	r1, [r7, #32]
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f000 fa02 	bl	8004bc8 <I2C_WaitOnTXEFlagUntilTimeout>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00d      	beq.n	80047e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	d107      	bne.n	80047e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e02b      	b.n	800483e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047e6:	88fb      	ldrh	r3, [r7, #6]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d105      	bne.n	80047f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047ec:	893b      	ldrh	r3, [r7, #8]
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	611a      	str	r2, [r3, #16]
 80047f6:	e021      	b.n	800483c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80047f8:	893b      	ldrh	r3, [r7, #8]
 80047fa:	0a1b      	lsrs	r3, r3, #8
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004808:	6a39      	ldr	r1, [r7, #32]
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f000 f9dc 	bl	8004bc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00d      	beq.n	8004832 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	2b04      	cmp	r3, #4
 800481c:	d107      	bne.n	800482e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800482c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e005      	b.n	800483e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004832:	893b      	ldrh	r3, [r7, #8]
 8004834:	b2da      	uxtb	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3718      	adds	r7, #24
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	00010002 	.word	0x00010002

0800484c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b088      	sub	sp, #32
 8004850:	af02      	add	r7, sp, #8
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	4608      	mov	r0, r1
 8004856:	4611      	mov	r1, r2
 8004858:	461a      	mov	r2, r3
 800485a:	4603      	mov	r3, r0
 800485c:	817b      	strh	r3, [r7, #10]
 800485e:	460b      	mov	r3, r1
 8004860:	813b      	strh	r3, [r7, #8]
 8004862:	4613      	mov	r3, r2
 8004864:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004874:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004884:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	6a3b      	ldr	r3, [r7, #32]
 800488c:	2200      	movs	r2, #0
 800488e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f000 f8c2 	bl	8004a1c <I2C_WaitOnFlagUntilTimeout>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00d      	beq.n	80048ba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ac:	d103      	bne.n	80048b6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e0aa      	b.n	8004a10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048ba:	897b      	ldrh	r3, [r7, #10]
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	461a      	mov	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80048c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	6a3a      	ldr	r2, [r7, #32]
 80048ce:	4952      	ldr	r1, [pc, #328]	; (8004a18 <I2C_RequestMemoryRead+0x1cc>)
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 f8fa 	bl	8004aca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e097      	b.n	8004a10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048e0:	2300      	movs	r3, #0
 80048e2:	617b      	str	r3, [r7, #20]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	617b      	str	r3, [r7, #20]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	617b      	str	r3, [r7, #20]
 80048f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048f8:	6a39      	ldr	r1, [r7, #32]
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f000 f964 	bl	8004bc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00d      	beq.n	8004922 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	2b04      	cmp	r3, #4
 800490c:	d107      	bne.n	800491e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800491c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e076      	b.n	8004a10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004922:	88fb      	ldrh	r3, [r7, #6]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d105      	bne.n	8004934 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004928:	893b      	ldrh	r3, [r7, #8]
 800492a:	b2da      	uxtb	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	611a      	str	r2, [r3, #16]
 8004932:	e021      	b.n	8004978 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004934:	893b      	ldrh	r3, [r7, #8]
 8004936:	0a1b      	lsrs	r3, r3, #8
 8004938:	b29b      	uxth	r3, r3
 800493a:	b2da      	uxtb	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004944:	6a39      	ldr	r1, [r7, #32]
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 f93e 	bl	8004bc8 <I2C_WaitOnTXEFlagUntilTimeout>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00d      	beq.n	800496e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	2b04      	cmp	r3, #4
 8004958:	d107      	bne.n	800496a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004968:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e050      	b.n	8004a10 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800496e:	893b      	ldrh	r3, [r7, #8]
 8004970:	b2da      	uxtb	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800497a:	6a39      	ldr	r1, [r7, #32]
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f000 f923 	bl	8004bc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00d      	beq.n	80049a4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498c:	2b04      	cmp	r3, #4
 800498e:	d107      	bne.n	80049a0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800499e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e035      	b.n	8004a10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	6a3b      	ldr	r3, [r7, #32]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 f82b 	bl	8004a1c <I2C_WaitOnFlagUntilTimeout>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00d      	beq.n	80049e8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049da:	d103      	bne.n	80049e4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e013      	b.n	8004a10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80049e8:	897b      	ldrh	r3, [r7, #10]
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	f043 0301 	orr.w	r3, r3, #1
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fa:	6a3a      	ldr	r2, [r7, #32]
 80049fc:	4906      	ldr	r1, [pc, #24]	; (8004a18 <I2C_RequestMemoryRead+0x1cc>)
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 f863 	bl	8004aca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e000      	b.n	8004a10 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3718      	adds	r7, #24
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	00010002 	.word	0x00010002

08004a1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	603b      	str	r3, [r7, #0]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a2c:	e025      	b.n	8004a7a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a34:	d021      	beq.n	8004a7a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a36:	f7fe fb15 	bl	8003064 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d302      	bcc.n	8004a4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d116      	bne.n	8004a7a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2220      	movs	r2, #32
 8004a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	f043 0220 	orr.w	r2, r3, #32
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e023      	b.n	8004ac2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	0c1b      	lsrs	r3, r3, #16
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d10d      	bne.n	8004aa0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	43da      	mvns	r2, r3
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	bf0c      	ite	eq
 8004a96:	2301      	moveq	r3, #1
 8004a98:	2300      	movne	r3, #0
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	e00c      	b.n	8004aba <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	43da      	mvns	r2, r3
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	bf0c      	ite	eq
 8004ab2:	2301      	moveq	r3, #1
 8004ab4:	2300      	movne	r3, #0
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	461a      	mov	r2, r3
 8004aba:	79fb      	ldrb	r3, [r7, #7]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d0b6      	beq.n	8004a2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b084      	sub	sp, #16
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	60f8      	str	r0, [r7, #12]
 8004ad2:	60b9      	str	r1, [r7, #8]
 8004ad4:	607a      	str	r2, [r7, #4]
 8004ad6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ad8:	e051      	b.n	8004b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ae8:	d123      	bne.n	8004b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004af8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b02:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2220      	movs	r2, #32
 8004b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	f043 0204 	orr.w	r2, r3, #4
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e046      	b.n	8004bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b38:	d021      	beq.n	8004b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b3a:	f7fe fa93 	bl	8003064 <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d302      	bcc.n	8004b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d116      	bne.n	8004b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2220      	movs	r2, #32
 8004b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	f043 0220 	orr.w	r2, r3, #32
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e020      	b.n	8004bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	0c1b      	lsrs	r3, r3, #16
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d10c      	bne.n	8004ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	43da      	mvns	r2, r3
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	4013      	ands	r3, r2
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	bf14      	ite	ne
 8004b9a:	2301      	movne	r3, #1
 8004b9c:	2300      	moveq	r3, #0
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	e00b      	b.n	8004bba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	43da      	mvns	r2, r3
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	4013      	ands	r3, r2
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	bf14      	ite	ne
 8004bb4:	2301      	movne	r3, #1
 8004bb6:	2300      	moveq	r3, #0
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d18d      	bne.n	8004ada <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bd4:	e02d      	b.n	8004c32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f000 f8ce 	bl	8004d78 <I2C_IsAcknowledgeFailed>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e02d      	b.n	8004c42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bec:	d021      	beq.n	8004c32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bee:	f7fe fa39 	bl	8003064 <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d302      	bcc.n	8004c04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d116      	bne.n	8004c32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2220      	movs	r2, #32
 8004c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1e:	f043 0220 	orr.w	r2, r3, #32
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e007      	b.n	8004c42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c3c:	2b80      	cmp	r3, #128	; 0x80
 8004c3e:	d1ca      	bne.n	8004bd6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b084      	sub	sp, #16
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	60f8      	str	r0, [r7, #12]
 8004c52:	60b9      	str	r1, [r7, #8]
 8004c54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c56:	e02d      	b.n	8004cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 f88d 	bl	8004d78 <I2C_IsAcknowledgeFailed>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e02d      	b.n	8004cc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c6e:	d021      	beq.n	8004cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c70:	f7fe f9f8 	bl	8003064 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d302      	bcc.n	8004c86 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d116      	bne.n	8004cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2220      	movs	r2, #32
 8004c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca0:	f043 0220 	orr.w	r2, r3, #32
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e007      	b.n	8004cc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	f003 0304 	and.w	r3, r3, #4
 8004cbe:	2b04      	cmp	r3, #4
 8004cc0:	d1ca      	bne.n	8004c58 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004cd8:	e042      	b.n	8004d60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	695b      	ldr	r3, [r3, #20]
 8004ce0:	f003 0310 	and.w	r3, r3, #16
 8004ce4:	2b10      	cmp	r3, #16
 8004ce6:	d119      	bne.n	8004d1c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f06f 0210 	mvn.w	r2, #16
 8004cf0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e029      	b.n	8004d70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d1c:	f7fe f9a2 	bl	8003064 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d302      	bcc.n	8004d32 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d116      	bne.n	8004d60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4c:	f043 0220 	orr.w	r2, r3, #32
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e007      	b.n	8004d70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6a:	2b40      	cmp	r3, #64	; 0x40
 8004d6c:	d1b5      	bne.n	8004cda <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d8e:	d11b      	bne.n	8004dc8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2220      	movs	r2, #32
 8004da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db4:	f043 0204 	orr.w	r2, r3, #4
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e000      	b.n	8004dca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
	...

08004dd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e264      	b.n	80052b4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d075      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004df6:	4ba3      	ldr	r3, [pc, #652]	; (8005084 <HAL_RCC_OscConfig+0x2ac>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f003 030c 	and.w	r3, r3, #12
 8004dfe:	2b04      	cmp	r3, #4
 8004e00:	d00c      	beq.n	8004e1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e02:	4ba0      	ldr	r3, [pc, #640]	; (8005084 <HAL_RCC_OscConfig+0x2ac>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e0a:	2b08      	cmp	r3, #8
 8004e0c:	d112      	bne.n	8004e34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e0e:	4b9d      	ldr	r3, [pc, #628]	; (8005084 <HAL_RCC_OscConfig+0x2ac>)
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e1a:	d10b      	bne.n	8004e34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e1c:	4b99      	ldr	r3, [pc, #612]	; (8005084 <HAL_RCC_OscConfig+0x2ac>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d05b      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x108>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d157      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e23f      	b.n	80052b4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e3c:	d106      	bne.n	8004e4c <HAL_RCC_OscConfig+0x74>
 8004e3e:	4b91      	ldr	r3, [pc, #580]	; (8005084 <HAL_RCC_OscConfig+0x2ac>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a90      	ldr	r2, [pc, #576]	; (8005084 <HAL_RCC_OscConfig+0x2ac>)
 8004e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e48:	6013      	str	r3, [r2, #0]
 8004e4a:	e01d      	b.n	8004e88 <HAL_RCC_OscConfig+0xb0>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e54:	d10c      	bne.n	8004e70 <HAL_RCC_OscConfig+0x98>
 8004e56:	4b8b      	ldr	r3, [pc, #556]	; (8005084 <HAL_RCC_OscConfig+0x2ac>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a8a      	ldr	r2, [pc, #552]	; (8005084 <HAL_RCC_OscConfig+0x2ac>)
 8004e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e60:	6013      	str	r3, [r2, #0]
 8004e62:	4b88      	ldr	r3, [pc, #544]	; (8005084 <HAL_RCC_OscConfig+0x2ac>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a87      	ldr	r2, [pc, #540]	; (8005084 <HAL_RCC_OscConfig+0x2ac>)
 8004e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e6c:	6013      	str	r3, [r2, #0]
 8004e6e:	e00b      	b.n	8004e88 <HAL_RCC_OscConfig+0xb0>
 8004e70:	4b84      	ldr	r3, [pc, #528]	; (8005084 <HAL_RCC_OscConfig+0x2ac>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a83      	ldr	r2, [pc, #524]	; (8005084 <HAL_RCC_OscConfig+0x2ac>)
 8004e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e7a:	6013      	str	r3, [r2, #0]
 8004e7c:	4b81      	ldr	r3, [pc, #516]	; (8005084 <HAL_RCC_OscConfig+0x2ac>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a80      	ldr	r2, [pc, #512]	; (8005084 <HAL_RCC_OscConfig+0x2ac>)
 8004e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d013      	beq.n	8004eb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e90:	f7fe f8e8 	bl	8003064 <HAL_GetTick>
 8004e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e96:	e008      	b.n	8004eaa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e98:	f7fe f8e4 	bl	8003064 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b64      	cmp	r3, #100	; 0x64
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e204      	b.n	80052b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eaa:	4b76      	ldr	r3, [pc, #472]	; (8005084 <HAL_RCC_OscConfig+0x2ac>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0f0      	beq.n	8004e98 <HAL_RCC_OscConfig+0xc0>
 8004eb6:	e014      	b.n	8004ee2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb8:	f7fe f8d4 	bl	8003064 <HAL_GetTick>
 8004ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ebe:	e008      	b.n	8004ed2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ec0:	f7fe f8d0 	bl	8003064 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b64      	cmp	r3, #100	; 0x64
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e1f0      	b.n	80052b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ed2:	4b6c      	ldr	r3, [pc, #432]	; (8005084 <HAL_RCC_OscConfig+0x2ac>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1f0      	bne.n	8004ec0 <HAL_RCC_OscConfig+0xe8>
 8004ede:	e000      	b.n	8004ee2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d063      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004eee:	4b65      	ldr	r3, [pc, #404]	; (8005084 <HAL_RCC_OscConfig+0x2ac>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f003 030c 	and.w	r3, r3, #12
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00b      	beq.n	8004f12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004efa:	4b62      	ldr	r3, [pc, #392]	; (8005084 <HAL_RCC_OscConfig+0x2ac>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f02:	2b08      	cmp	r3, #8
 8004f04:	d11c      	bne.n	8004f40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f06:	4b5f      	ldr	r3, [pc, #380]	; (8005084 <HAL_RCC_OscConfig+0x2ac>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d116      	bne.n	8004f40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f12:	4b5c      	ldr	r3, [pc, #368]	; (8005084 <HAL_RCC_OscConfig+0x2ac>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d005      	beq.n	8004f2a <HAL_RCC_OscConfig+0x152>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d001      	beq.n	8004f2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e1c4      	b.n	80052b4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f2a:	4b56      	ldr	r3, [pc, #344]	; (8005084 <HAL_RCC_OscConfig+0x2ac>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	00db      	lsls	r3, r3, #3
 8004f38:	4952      	ldr	r1, [pc, #328]	; (8005084 <HAL_RCC_OscConfig+0x2ac>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f3e:	e03a      	b.n	8004fb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d020      	beq.n	8004f8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f48:	4b4f      	ldr	r3, [pc, #316]	; (8005088 <HAL_RCC_OscConfig+0x2b0>)
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f4e:	f7fe f889 	bl	8003064 <HAL_GetTick>
 8004f52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f54:	e008      	b.n	8004f68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f56:	f7fe f885 	bl	8003064 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d901      	bls.n	8004f68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e1a5      	b.n	80052b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f68:	4b46      	ldr	r3, [pc, #280]	; (8005084 <HAL_RCC_OscConfig+0x2ac>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d0f0      	beq.n	8004f56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f74:	4b43      	ldr	r3, [pc, #268]	; (8005084 <HAL_RCC_OscConfig+0x2ac>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	00db      	lsls	r3, r3, #3
 8004f82:	4940      	ldr	r1, [pc, #256]	; (8005084 <HAL_RCC_OscConfig+0x2ac>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	600b      	str	r3, [r1, #0]
 8004f88:	e015      	b.n	8004fb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f8a:	4b3f      	ldr	r3, [pc, #252]	; (8005088 <HAL_RCC_OscConfig+0x2b0>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f90:	f7fe f868 	bl	8003064 <HAL_GetTick>
 8004f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f96:	e008      	b.n	8004faa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f98:	f7fe f864 	bl	8003064 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e184      	b.n	80052b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004faa:	4b36      	ldr	r3, [pc, #216]	; (8005084 <HAL_RCC_OscConfig+0x2ac>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1f0      	bne.n	8004f98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0308 	and.w	r3, r3, #8
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d030      	beq.n	8005024 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d016      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fca:	4b30      	ldr	r3, [pc, #192]	; (800508c <HAL_RCC_OscConfig+0x2b4>)
 8004fcc:	2201      	movs	r2, #1
 8004fce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd0:	f7fe f848 	bl	8003064 <HAL_GetTick>
 8004fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fd6:	e008      	b.n	8004fea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fd8:	f7fe f844 	bl	8003064 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e164      	b.n	80052b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fea:	4b26      	ldr	r3, [pc, #152]	; (8005084 <HAL_RCC_OscConfig+0x2ac>)
 8004fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d0f0      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x200>
 8004ff6:	e015      	b.n	8005024 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ff8:	4b24      	ldr	r3, [pc, #144]	; (800508c <HAL_RCC_OscConfig+0x2b4>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ffe:	f7fe f831 	bl	8003064 <HAL_GetTick>
 8005002:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005004:	e008      	b.n	8005018 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005006:	f7fe f82d 	bl	8003064 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	2b02      	cmp	r3, #2
 8005012:	d901      	bls.n	8005018 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e14d      	b.n	80052b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005018:	4b1a      	ldr	r3, [pc, #104]	; (8005084 <HAL_RCC_OscConfig+0x2ac>)
 800501a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1f0      	bne.n	8005006 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b00      	cmp	r3, #0
 800502e:	f000 80a0 	beq.w	8005172 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005032:	2300      	movs	r3, #0
 8005034:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005036:	4b13      	ldr	r3, [pc, #76]	; (8005084 <HAL_RCC_OscConfig+0x2ac>)
 8005038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10f      	bne.n	8005062 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005042:	2300      	movs	r3, #0
 8005044:	60bb      	str	r3, [r7, #8]
 8005046:	4b0f      	ldr	r3, [pc, #60]	; (8005084 <HAL_RCC_OscConfig+0x2ac>)
 8005048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504a:	4a0e      	ldr	r2, [pc, #56]	; (8005084 <HAL_RCC_OscConfig+0x2ac>)
 800504c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005050:	6413      	str	r3, [r2, #64]	; 0x40
 8005052:	4b0c      	ldr	r3, [pc, #48]	; (8005084 <HAL_RCC_OscConfig+0x2ac>)
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800505a:	60bb      	str	r3, [r7, #8]
 800505c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800505e:	2301      	movs	r3, #1
 8005060:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005062:	4b0b      	ldr	r3, [pc, #44]	; (8005090 <HAL_RCC_OscConfig+0x2b8>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800506a:	2b00      	cmp	r3, #0
 800506c:	d121      	bne.n	80050b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800506e:	4b08      	ldr	r3, [pc, #32]	; (8005090 <HAL_RCC_OscConfig+0x2b8>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a07      	ldr	r2, [pc, #28]	; (8005090 <HAL_RCC_OscConfig+0x2b8>)
 8005074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005078:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800507a:	f7fd fff3 	bl	8003064 <HAL_GetTick>
 800507e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005080:	e011      	b.n	80050a6 <HAL_RCC_OscConfig+0x2ce>
 8005082:	bf00      	nop
 8005084:	40023800 	.word	0x40023800
 8005088:	42470000 	.word	0x42470000
 800508c:	42470e80 	.word	0x42470e80
 8005090:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005094:	f7fd ffe6 	bl	8003064 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e106      	b.n	80052b4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050a6:	4b85      	ldr	r3, [pc, #532]	; (80052bc <HAL_RCC_OscConfig+0x4e4>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d0f0      	beq.n	8005094 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d106      	bne.n	80050c8 <HAL_RCC_OscConfig+0x2f0>
 80050ba:	4b81      	ldr	r3, [pc, #516]	; (80052c0 <HAL_RCC_OscConfig+0x4e8>)
 80050bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050be:	4a80      	ldr	r2, [pc, #512]	; (80052c0 <HAL_RCC_OscConfig+0x4e8>)
 80050c0:	f043 0301 	orr.w	r3, r3, #1
 80050c4:	6713      	str	r3, [r2, #112]	; 0x70
 80050c6:	e01c      	b.n	8005102 <HAL_RCC_OscConfig+0x32a>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	2b05      	cmp	r3, #5
 80050ce:	d10c      	bne.n	80050ea <HAL_RCC_OscConfig+0x312>
 80050d0:	4b7b      	ldr	r3, [pc, #492]	; (80052c0 <HAL_RCC_OscConfig+0x4e8>)
 80050d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d4:	4a7a      	ldr	r2, [pc, #488]	; (80052c0 <HAL_RCC_OscConfig+0x4e8>)
 80050d6:	f043 0304 	orr.w	r3, r3, #4
 80050da:	6713      	str	r3, [r2, #112]	; 0x70
 80050dc:	4b78      	ldr	r3, [pc, #480]	; (80052c0 <HAL_RCC_OscConfig+0x4e8>)
 80050de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e0:	4a77      	ldr	r2, [pc, #476]	; (80052c0 <HAL_RCC_OscConfig+0x4e8>)
 80050e2:	f043 0301 	orr.w	r3, r3, #1
 80050e6:	6713      	str	r3, [r2, #112]	; 0x70
 80050e8:	e00b      	b.n	8005102 <HAL_RCC_OscConfig+0x32a>
 80050ea:	4b75      	ldr	r3, [pc, #468]	; (80052c0 <HAL_RCC_OscConfig+0x4e8>)
 80050ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ee:	4a74      	ldr	r2, [pc, #464]	; (80052c0 <HAL_RCC_OscConfig+0x4e8>)
 80050f0:	f023 0301 	bic.w	r3, r3, #1
 80050f4:	6713      	str	r3, [r2, #112]	; 0x70
 80050f6:	4b72      	ldr	r3, [pc, #456]	; (80052c0 <HAL_RCC_OscConfig+0x4e8>)
 80050f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fa:	4a71      	ldr	r2, [pc, #452]	; (80052c0 <HAL_RCC_OscConfig+0x4e8>)
 80050fc:	f023 0304 	bic.w	r3, r3, #4
 8005100:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d015      	beq.n	8005136 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800510a:	f7fd ffab 	bl	8003064 <HAL_GetTick>
 800510e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005110:	e00a      	b.n	8005128 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005112:	f7fd ffa7 	bl	8003064 <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005120:	4293      	cmp	r3, r2
 8005122:	d901      	bls.n	8005128 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e0c5      	b.n	80052b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005128:	4b65      	ldr	r3, [pc, #404]	; (80052c0 <HAL_RCC_OscConfig+0x4e8>)
 800512a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800512c:	f003 0302 	and.w	r3, r3, #2
 8005130:	2b00      	cmp	r3, #0
 8005132:	d0ee      	beq.n	8005112 <HAL_RCC_OscConfig+0x33a>
 8005134:	e014      	b.n	8005160 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005136:	f7fd ff95 	bl	8003064 <HAL_GetTick>
 800513a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800513c:	e00a      	b.n	8005154 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800513e:	f7fd ff91 	bl	8003064 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	f241 3288 	movw	r2, #5000	; 0x1388
 800514c:	4293      	cmp	r3, r2
 800514e:	d901      	bls.n	8005154 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e0af      	b.n	80052b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005154:	4b5a      	ldr	r3, [pc, #360]	; (80052c0 <HAL_RCC_OscConfig+0x4e8>)
 8005156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1ee      	bne.n	800513e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005160:	7dfb      	ldrb	r3, [r7, #23]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d105      	bne.n	8005172 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005166:	4b56      	ldr	r3, [pc, #344]	; (80052c0 <HAL_RCC_OscConfig+0x4e8>)
 8005168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516a:	4a55      	ldr	r2, [pc, #340]	; (80052c0 <HAL_RCC_OscConfig+0x4e8>)
 800516c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005170:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	2b00      	cmp	r3, #0
 8005178:	f000 809b 	beq.w	80052b2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800517c:	4b50      	ldr	r3, [pc, #320]	; (80052c0 <HAL_RCC_OscConfig+0x4e8>)
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f003 030c 	and.w	r3, r3, #12
 8005184:	2b08      	cmp	r3, #8
 8005186:	d05c      	beq.n	8005242 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	2b02      	cmp	r3, #2
 800518e:	d141      	bne.n	8005214 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005190:	4b4c      	ldr	r3, [pc, #304]	; (80052c4 <HAL_RCC_OscConfig+0x4ec>)
 8005192:	2200      	movs	r2, #0
 8005194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005196:	f7fd ff65 	bl	8003064 <HAL_GetTick>
 800519a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800519c:	e008      	b.n	80051b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800519e:	f7fd ff61 	bl	8003064 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d901      	bls.n	80051b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e081      	b.n	80052b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051b0:	4b43      	ldr	r3, [pc, #268]	; (80052c0 <HAL_RCC_OscConfig+0x4e8>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1f0      	bne.n	800519e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	69da      	ldr	r2, [r3, #28]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a1b      	ldr	r3, [r3, #32]
 80051c4:	431a      	orrs	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ca:	019b      	lsls	r3, r3, #6
 80051cc:	431a      	orrs	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d2:	085b      	lsrs	r3, r3, #1
 80051d4:	3b01      	subs	r3, #1
 80051d6:	041b      	lsls	r3, r3, #16
 80051d8:	431a      	orrs	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051de:	061b      	lsls	r3, r3, #24
 80051e0:	4937      	ldr	r1, [pc, #220]	; (80052c0 <HAL_RCC_OscConfig+0x4e8>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051e6:	4b37      	ldr	r3, [pc, #220]	; (80052c4 <HAL_RCC_OscConfig+0x4ec>)
 80051e8:	2201      	movs	r2, #1
 80051ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ec:	f7fd ff3a 	bl	8003064 <HAL_GetTick>
 80051f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051f2:	e008      	b.n	8005206 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051f4:	f7fd ff36 	bl	8003064 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e056      	b.n	80052b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005206:	4b2e      	ldr	r3, [pc, #184]	; (80052c0 <HAL_RCC_OscConfig+0x4e8>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d0f0      	beq.n	80051f4 <HAL_RCC_OscConfig+0x41c>
 8005212:	e04e      	b.n	80052b2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005214:	4b2b      	ldr	r3, [pc, #172]	; (80052c4 <HAL_RCC_OscConfig+0x4ec>)
 8005216:	2200      	movs	r2, #0
 8005218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800521a:	f7fd ff23 	bl	8003064 <HAL_GetTick>
 800521e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005220:	e008      	b.n	8005234 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005222:	f7fd ff1f 	bl	8003064 <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	2b02      	cmp	r3, #2
 800522e:	d901      	bls.n	8005234 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e03f      	b.n	80052b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005234:	4b22      	ldr	r3, [pc, #136]	; (80052c0 <HAL_RCC_OscConfig+0x4e8>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1f0      	bne.n	8005222 <HAL_RCC_OscConfig+0x44a>
 8005240:	e037      	b.n	80052b2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d101      	bne.n	800524e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e032      	b.n	80052b4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800524e:	4b1c      	ldr	r3, [pc, #112]	; (80052c0 <HAL_RCC_OscConfig+0x4e8>)
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d028      	beq.n	80052ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005266:	429a      	cmp	r2, r3
 8005268:	d121      	bne.n	80052ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005274:	429a      	cmp	r2, r3
 8005276:	d11a      	bne.n	80052ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800527e:	4013      	ands	r3, r2
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005284:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005286:	4293      	cmp	r3, r2
 8005288:	d111      	bne.n	80052ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005294:	085b      	lsrs	r3, r3, #1
 8005296:	3b01      	subs	r3, #1
 8005298:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800529a:	429a      	cmp	r2, r3
 800529c:	d107      	bne.n	80052ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d001      	beq.n	80052b2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e000      	b.n	80052b4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3718      	adds	r7, #24
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	40007000 	.word	0x40007000
 80052c0:	40023800 	.word	0x40023800
 80052c4:	42470060 	.word	0x42470060

080052c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e0cc      	b.n	8005476 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052dc:	4b68      	ldr	r3, [pc, #416]	; (8005480 <HAL_RCC_ClockConfig+0x1b8>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0307 	and.w	r3, r3, #7
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d90c      	bls.n	8005304 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ea:	4b65      	ldr	r3, [pc, #404]	; (8005480 <HAL_RCC_ClockConfig+0x1b8>)
 80052ec:	683a      	ldr	r2, [r7, #0]
 80052ee:	b2d2      	uxtb	r2, r2
 80052f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052f2:	4b63      	ldr	r3, [pc, #396]	; (8005480 <HAL_RCC_ClockConfig+0x1b8>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0307 	and.w	r3, r3, #7
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d001      	beq.n	8005304 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e0b8      	b.n	8005476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	2b00      	cmp	r3, #0
 800530e:	d020      	beq.n	8005352 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0304 	and.w	r3, r3, #4
 8005318:	2b00      	cmp	r3, #0
 800531a:	d005      	beq.n	8005328 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800531c:	4b59      	ldr	r3, [pc, #356]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	4a58      	ldr	r2, [pc, #352]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 8005322:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005326:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0308 	and.w	r3, r3, #8
 8005330:	2b00      	cmp	r3, #0
 8005332:	d005      	beq.n	8005340 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005334:	4b53      	ldr	r3, [pc, #332]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	4a52      	ldr	r2, [pc, #328]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 800533a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800533e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005340:	4b50      	ldr	r3, [pc, #320]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	494d      	ldr	r1, [pc, #308]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 800534e:	4313      	orrs	r3, r2
 8005350:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	d044      	beq.n	80053e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d107      	bne.n	8005376 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005366:	4b47      	ldr	r3, [pc, #284]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d119      	bne.n	80053a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e07f      	b.n	8005476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	2b02      	cmp	r3, #2
 800537c:	d003      	beq.n	8005386 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005382:	2b03      	cmp	r3, #3
 8005384:	d107      	bne.n	8005396 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005386:	4b3f      	ldr	r3, [pc, #252]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d109      	bne.n	80053a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e06f      	b.n	8005476 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005396:	4b3b      	ldr	r3, [pc, #236]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e067      	b.n	8005476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053a6:	4b37      	ldr	r3, [pc, #220]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f023 0203 	bic.w	r2, r3, #3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	4934      	ldr	r1, [pc, #208]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053b8:	f7fd fe54 	bl	8003064 <HAL_GetTick>
 80053bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053be:	e00a      	b.n	80053d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053c0:	f7fd fe50 	bl	8003064 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e04f      	b.n	8005476 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053d6:	4b2b      	ldr	r3, [pc, #172]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f003 020c 	and.w	r2, r3, #12
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d1eb      	bne.n	80053c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053e8:	4b25      	ldr	r3, [pc, #148]	; (8005480 <HAL_RCC_ClockConfig+0x1b8>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0307 	and.w	r3, r3, #7
 80053f0:	683a      	ldr	r2, [r7, #0]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d20c      	bcs.n	8005410 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053f6:	4b22      	ldr	r3, [pc, #136]	; (8005480 <HAL_RCC_ClockConfig+0x1b8>)
 80053f8:	683a      	ldr	r2, [r7, #0]
 80053fa:	b2d2      	uxtb	r2, r2
 80053fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053fe:	4b20      	ldr	r3, [pc, #128]	; (8005480 <HAL_RCC_ClockConfig+0x1b8>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0307 	and.w	r3, r3, #7
 8005406:	683a      	ldr	r2, [r7, #0]
 8005408:	429a      	cmp	r2, r3
 800540a:	d001      	beq.n	8005410 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e032      	b.n	8005476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0304 	and.w	r3, r3, #4
 8005418:	2b00      	cmp	r3, #0
 800541a:	d008      	beq.n	800542e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800541c:	4b19      	ldr	r3, [pc, #100]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	4916      	ldr	r1, [pc, #88]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 800542a:	4313      	orrs	r3, r2
 800542c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0308 	and.w	r3, r3, #8
 8005436:	2b00      	cmp	r3, #0
 8005438:	d009      	beq.n	800544e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800543a:	4b12      	ldr	r3, [pc, #72]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	490e      	ldr	r1, [pc, #56]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 800544a:	4313      	orrs	r3, r2
 800544c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800544e:	f000 f821 	bl	8005494 <HAL_RCC_GetSysClockFreq>
 8005452:	4602      	mov	r2, r0
 8005454:	4b0b      	ldr	r3, [pc, #44]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	091b      	lsrs	r3, r3, #4
 800545a:	f003 030f 	and.w	r3, r3, #15
 800545e:	490a      	ldr	r1, [pc, #40]	; (8005488 <HAL_RCC_ClockConfig+0x1c0>)
 8005460:	5ccb      	ldrb	r3, [r1, r3]
 8005462:	fa22 f303 	lsr.w	r3, r2, r3
 8005466:	4a09      	ldr	r2, [pc, #36]	; (800548c <HAL_RCC_ClockConfig+0x1c4>)
 8005468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800546a:	4b09      	ldr	r3, [pc, #36]	; (8005490 <HAL_RCC_ClockConfig+0x1c8>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4618      	mov	r0, r3
 8005470:	f7fd fdb4 	bl	8002fdc <HAL_InitTick>

  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	40023c00 	.word	0x40023c00
 8005484:	40023800 	.word	0x40023800
 8005488:	08008454 	.word	0x08008454
 800548c:	200003c0 	.word	0x200003c0
 8005490:	200003c4 	.word	0x200003c4

08005494 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005494:	b5b0      	push	{r4, r5, r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800549a:	2100      	movs	r1, #0
 800549c:	6079      	str	r1, [r7, #4]
 800549e:	2100      	movs	r1, #0
 80054a0:	60f9      	str	r1, [r7, #12]
 80054a2:	2100      	movs	r1, #0
 80054a4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80054a6:	2100      	movs	r1, #0
 80054a8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054aa:	4952      	ldr	r1, [pc, #328]	; (80055f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80054ac:	6889      	ldr	r1, [r1, #8]
 80054ae:	f001 010c 	and.w	r1, r1, #12
 80054b2:	2908      	cmp	r1, #8
 80054b4:	d00d      	beq.n	80054d2 <HAL_RCC_GetSysClockFreq+0x3e>
 80054b6:	2908      	cmp	r1, #8
 80054b8:	f200 8094 	bhi.w	80055e4 <HAL_RCC_GetSysClockFreq+0x150>
 80054bc:	2900      	cmp	r1, #0
 80054be:	d002      	beq.n	80054c6 <HAL_RCC_GetSysClockFreq+0x32>
 80054c0:	2904      	cmp	r1, #4
 80054c2:	d003      	beq.n	80054cc <HAL_RCC_GetSysClockFreq+0x38>
 80054c4:	e08e      	b.n	80055e4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054c6:	4b4c      	ldr	r3, [pc, #304]	; (80055f8 <HAL_RCC_GetSysClockFreq+0x164>)
 80054c8:	60bb      	str	r3, [r7, #8]
       break;
 80054ca:	e08e      	b.n	80055ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054cc:	4b4b      	ldr	r3, [pc, #300]	; (80055fc <HAL_RCC_GetSysClockFreq+0x168>)
 80054ce:	60bb      	str	r3, [r7, #8]
      break;
 80054d0:	e08b      	b.n	80055ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054d2:	4948      	ldr	r1, [pc, #288]	; (80055f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80054d4:	6849      	ldr	r1, [r1, #4]
 80054d6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80054da:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054dc:	4945      	ldr	r1, [pc, #276]	; (80055f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80054de:	6849      	ldr	r1, [r1, #4]
 80054e0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80054e4:	2900      	cmp	r1, #0
 80054e6:	d024      	beq.n	8005532 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054e8:	4942      	ldr	r1, [pc, #264]	; (80055f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80054ea:	6849      	ldr	r1, [r1, #4]
 80054ec:	0989      	lsrs	r1, r1, #6
 80054ee:	4608      	mov	r0, r1
 80054f0:	f04f 0100 	mov.w	r1, #0
 80054f4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80054f8:	f04f 0500 	mov.w	r5, #0
 80054fc:	ea00 0204 	and.w	r2, r0, r4
 8005500:	ea01 0305 	and.w	r3, r1, r5
 8005504:	493d      	ldr	r1, [pc, #244]	; (80055fc <HAL_RCC_GetSysClockFreq+0x168>)
 8005506:	fb01 f003 	mul.w	r0, r1, r3
 800550a:	2100      	movs	r1, #0
 800550c:	fb01 f102 	mul.w	r1, r1, r2
 8005510:	1844      	adds	r4, r0, r1
 8005512:	493a      	ldr	r1, [pc, #232]	; (80055fc <HAL_RCC_GetSysClockFreq+0x168>)
 8005514:	fba2 0101 	umull	r0, r1, r2, r1
 8005518:	1863      	adds	r3, r4, r1
 800551a:	4619      	mov	r1, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	461a      	mov	r2, r3
 8005520:	f04f 0300 	mov.w	r3, #0
 8005524:	f7fa fe50 	bl	80001c8 <__aeabi_uldivmod>
 8005528:	4602      	mov	r2, r0
 800552a:	460b      	mov	r3, r1
 800552c:	4613      	mov	r3, r2
 800552e:	60fb      	str	r3, [r7, #12]
 8005530:	e04a      	b.n	80055c8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005532:	4b30      	ldr	r3, [pc, #192]	; (80055f4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	099b      	lsrs	r3, r3, #6
 8005538:	461a      	mov	r2, r3
 800553a:	f04f 0300 	mov.w	r3, #0
 800553e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005542:	f04f 0100 	mov.w	r1, #0
 8005546:	ea02 0400 	and.w	r4, r2, r0
 800554a:	ea03 0501 	and.w	r5, r3, r1
 800554e:	4620      	mov	r0, r4
 8005550:	4629      	mov	r1, r5
 8005552:	f04f 0200 	mov.w	r2, #0
 8005556:	f04f 0300 	mov.w	r3, #0
 800555a:	014b      	lsls	r3, r1, #5
 800555c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005560:	0142      	lsls	r2, r0, #5
 8005562:	4610      	mov	r0, r2
 8005564:	4619      	mov	r1, r3
 8005566:	1b00      	subs	r0, r0, r4
 8005568:	eb61 0105 	sbc.w	r1, r1, r5
 800556c:	f04f 0200 	mov.w	r2, #0
 8005570:	f04f 0300 	mov.w	r3, #0
 8005574:	018b      	lsls	r3, r1, #6
 8005576:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800557a:	0182      	lsls	r2, r0, #6
 800557c:	1a12      	subs	r2, r2, r0
 800557e:	eb63 0301 	sbc.w	r3, r3, r1
 8005582:	f04f 0000 	mov.w	r0, #0
 8005586:	f04f 0100 	mov.w	r1, #0
 800558a:	00d9      	lsls	r1, r3, #3
 800558c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005590:	00d0      	lsls	r0, r2, #3
 8005592:	4602      	mov	r2, r0
 8005594:	460b      	mov	r3, r1
 8005596:	1912      	adds	r2, r2, r4
 8005598:	eb45 0303 	adc.w	r3, r5, r3
 800559c:	f04f 0000 	mov.w	r0, #0
 80055a0:	f04f 0100 	mov.w	r1, #0
 80055a4:	0299      	lsls	r1, r3, #10
 80055a6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80055aa:	0290      	lsls	r0, r2, #10
 80055ac:	4602      	mov	r2, r0
 80055ae:	460b      	mov	r3, r1
 80055b0:	4610      	mov	r0, r2
 80055b2:	4619      	mov	r1, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	461a      	mov	r2, r3
 80055b8:	f04f 0300 	mov.w	r3, #0
 80055bc:	f7fa fe04 	bl	80001c8 <__aeabi_uldivmod>
 80055c0:	4602      	mov	r2, r0
 80055c2:	460b      	mov	r3, r1
 80055c4:	4613      	mov	r3, r2
 80055c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055c8:	4b0a      	ldr	r3, [pc, #40]	; (80055f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	0c1b      	lsrs	r3, r3, #16
 80055ce:	f003 0303 	and.w	r3, r3, #3
 80055d2:	3301      	adds	r3, #1
 80055d4:	005b      	lsls	r3, r3, #1
 80055d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e0:	60bb      	str	r3, [r7, #8]
      break;
 80055e2:	e002      	b.n	80055ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055e4:	4b04      	ldr	r3, [pc, #16]	; (80055f8 <HAL_RCC_GetSysClockFreq+0x164>)
 80055e6:	60bb      	str	r3, [r7, #8]
      break;
 80055e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055ea:	68bb      	ldr	r3, [r7, #8]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bdb0      	pop	{r4, r5, r7, pc}
 80055f4:	40023800 	.word	0x40023800
 80055f8:	00f42400 	.word	0x00f42400
 80055fc:	017d7840 	.word	0x017d7840

08005600 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005600:	b480      	push	{r7}
 8005602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005604:	4b03      	ldr	r3, [pc, #12]	; (8005614 <HAL_RCC_GetHCLKFreq+0x14>)
 8005606:	681b      	ldr	r3, [r3, #0]
}
 8005608:	4618      	mov	r0, r3
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	200003c0 	.word	0x200003c0

08005618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800561c:	f7ff fff0 	bl	8005600 <HAL_RCC_GetHCLKFreq>
 8005620:	4602      	mov	r2, r0
 8005622:	4b05      	ldr	r3, [pc, #20]	; (8005638 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	0a9b      	lsrs	r3, r3, #10
 8005628:	f003 0307 	and.w	r3, r3, #7
 800562c:	4903      	ldr	r1, [pc, #12]	; (800563c <HAL_RCC_GetPCLK1Freq+0x24>)
 800562e:	5ccb      	ldrb	r3, [r1, r3]
 8005630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005634:	4618      	mov	r0, r3
 8005636:	bd80      	pop	{r7, pc}
 8005638:	40023800 	.word	0x40023800
 800563c:	08008464 	.word	0x08008464

08005640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005644:	f7ff ffdc 	bl	8005600 <HAL_RCC_GetHCLKFreq>
 8005648:	4602      	mov	r2, r0
 800564a:	4b05      	ldr	r3, [pc, #20]	; (8005660 <HAL_RCC_GetPCLK2Freq+0x20>)
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	0b5b      	lsrs	r3, r3, #13
 8005650:	f003 0307 	and.w	r3, r3, #7
 8005654:	4903      	ldr	r1, [pc, #12]	; (8005664 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005656:	5ccb      	ldrb	r3, [r1, r3]
 8005658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800565c:	4618      	mov	r0, r3
 800565e:	bd80      	pop	{r7, pc}
 8005660:	40023800 	.word	0x40023800
 8005664:	08008464 	.word	0x08008464

08005668 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e041      	b.n	80056fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d106      	bne.n	8005694 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7fd fa2e 	bl	8002af0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2202      	movs	r2, #2
 8005698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	3304      	adds	r3, #4
 80056a4:	4619      	mov	r1, r3
 80056a6:	4610      	mov	r0, r2
 80056a8:	f000 fad8 	bl	8005c5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b082      	sub	sp, #8
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d101      	bne.n	8005718 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e041      	b.n	800579c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b00      	cmp	r3, #0
 8005722:	d106      	bne.n	8005732 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 f839 	bl	80057a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2202      	movs	r2, #2
 8005736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	3304      	adds	r3, #4
 8005742:	4619      	mov	r1, r3
 8005744:	4610      	mov	r0, r2
 8005746:	f000 fa89 	bl	8005c5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2201      	movs	r2, #1
 800577e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3708      	adds	r7, #8
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d109      	bne.n	80057dc <HAL_TIM_PWM_Start+0x24>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	bf14      	ite	ne
 80057d4:	2301      	movne	r3, #1
 80057d6:	2300      	moveq	r3, #0
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	e022      	b.n	8005822 <HAL_TIM_PWM_Start+0x6a>
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	2b04      	cmp	r3, #4
 80057e0:	d109      	bne.n	80057f6 <HAL_TIM_PWM_Start+0x3e>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	bf14      	ite	ne
 80057ee:	2301      	movne	r3, #1
 80057f0:	2300      	moveq	r3, #0
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	e015      	b.n	8005822 <HAL_TIM_PWM_Start+0x6a>
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	2b08      	cmp	r3, #8
 80057fa:	d109      	bne.n	8005810 <HAL_TIM_PWM_Start+0x58>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2b01      	cmp	r3, #1
 8005806:	bf14      	ite	ne
 8005808:	2301      	movne	r3, #1
 800580a:	2300      	moveq	r3, #0
 800580c:	b2db      	uxtb	r3, r3
 800580e:	e008      	b.n	8005822 <HAL_TIM_PWM_Start+0x6a>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005816:	b2db      	uxtb	r3, r3
 8005818:	2b01      	cmp	r3, #1
 800581a:	bf14      	ite	ne
 800581c:	2301      	movne	r3, #1
 800581e:	2300      	moveq	r3, #0
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e07c      	b.n	8005924 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d104      	bne.n	800583a <HAL_TIM_PWM_Start+0x82>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2202      	movs	r2, #2
 8005834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005838:	e013      	b.n	8005862 <HAL_TIM_PWM_Start+0xaa>
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2b04      	cmp	r3, #4
 800583e:	d104      	bne.n	800584a <HAL_TIM_PWM_Start+0x92>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2202      	movs	r2, #2
 8005844:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005848:	e00b      	b.n	8005862 <HAL_TIM_PWM_Start+0xaa>
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	2b08      	cmp	r3, #8
 800584e:	d104      	bne.n	800585a <HAL_TIM_PWM_Start+0xa2>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2202      	movs	r2, #2
 8005854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005858:	e003      	b.n	8005862 <HAL_TIM_PWM_Start+0xaa>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2202      	movs	r2, #2
 800585e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2201      	movs	r2, #1
 8005868:	6839      	ldr	r1, [r7, #0]
 800586a:	4618      	mov	r0, r3
 800586c:	f000 fce0 	bl	8006230 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a2d      	ldr	r2, [pc, #180]	; (800592c <HAL_TIM_PWM_Start+0x174>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d004      	beq.n	8005884 <HAL_TIM_PWM_Start+0xcc>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a2c      	ldr	r2, [pc, #176]	; (8005930 <HAL_TIM_PWM_Start+0x178>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d101      	bne.n	8005888 <HAL_TIM_PWM_Start+0xd0>
 8005884:	2301      	movs	r3, #1
 8005886:	e000      	b.n	800588a <HAL_TIM_PWM_Start+0xd2>
 8005888:	2300      	movs	r3, #0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d007      	beq.n	800589e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800589c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a22      	ldr	r2, [pc, #136]	; (800592c <HAL_TIM_PWM_Start+0x174>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d022      	beq.n	80058ee <HAL_TIM_PWM_Start+0x136>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058b0:	d01d      	beq.n	80058ee <HAL_TIM_PWM_Start+0x136>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a1f      	ldr	r2, [pc, #124]	; (8005934 <HAL_TIM_PWM_Start+0x17c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d018      	beq.n	80058ee <HAL_TIM_PWM_Start+0x136>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a1d      	ldr	r2, [pc, #116]	; (8005938 <HAL_TIM_PWM_Start+0x180>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d013      	beq.n	80058ee <HAL_TIM_PWM_Start+0x136>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a1c      	ldr	r2, [pc, #112]	; (800593c <HAL_TIM_PWM_Start+0x184>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d00e      	beq.n	80058ee <HAL_TIM_PWM_Start+0x136>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a16      	ldr	r2, [pc, #88]	; (8005930 <HAL_TIM_PWM_Start+0x178>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d009      	beq.n	80058ee <HAL_TIM_PWM_Start+0x136>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a18      	ldr	r2, [pc, #96]	; (8005940 <HAL_TIM_PWM_Start+0x188>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d004      	beq.n	80058ee <HAL_TIM_PWM_Start+0x136>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a16      	ldr	r2, [pc, #88]	; (8005944 <HAL_TIM_PWM_Start+0x18c>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d111      	bne.n	8005912 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f003 0307 	and.w	r3, r3, #7
 80058f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2b06      	cmp	r3, #6
 80058fe:	d010      	beq.n	8005922 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f042 0201 	orr.w	r2, r2, #1
 800590e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005910:	e007      	b.n	8005922 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f042 0201 	orr.w	r2, r2, #1
 8005920:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	40010000 	.word	0x40010000
 8005930:	40010400 	.word	0x40010400
 8005934:	40000400 	.word	0x40000400
 8005938:	40000800 	.word	0x40000800
 800593c:	40000c00 	.word	0x40000c00
 8005940:	40014000 	.word	0x40014000
 8005944:	40001800 	.word	0x40001800

08005948 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005954:	2300      	movs	r3, #0
 8005956:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800595e:	2b01      	cmp	r3, #1
 8005960:	d101      	bne.n	8005966 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005962:	2302      	movs	r3, #2
 8005964:	e0ae      	b.n	8005ac4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b0c      	cmp	r3, #12
 8005972:	f200 809f 	bhi.w	8005ab4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005976:	a201      	add	r2, pc, #4	; (adr r2, 800597c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800597c:	080059b1 	.word	0x080059b1
 8005980:	08005ab5 	.word	0x08005ab5
 8005984:	08005ab5 	.word	0x08005ab5
 8005988:	08005ab5 	.word	0x08005ab5
 800598c:	080059f1 	.word	0x080059f1
 8005990:	08005ab5 	.word	0x08005ab5
 8005994:	08005ab5 	.word	0x08005ab5
 8005998:	08005ab5 	.word	0x08005ab5
 800599c:	08005a33 	.word	0x08005a33
 80059a0:	08005ab5 	.word	0x08005ab5
 80059a4:	08005ab5 	.word	0x08005ab5
 80059a8:	08005ab5 	.word	0x08005ab5
 80059ac:	08005a73 	.word	0x08005a73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68b9      	ldr	r1, [r7, #8]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f000 f9f0 	bl	8005d9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	699a      	ldr	r2, [r3, #24]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f042 0208 	orr.w	r2, r2, #8
 80059ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	699a      	ldr	r2, [r3, #24]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f022 0204 	bic.w	r2, r2, #4
 80059da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6999      	ldr	r1, [r3, #24]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	691a      	ldr	r2, [r3, #16]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	619a      	str	r2, [r3, #24]
      break;
 80059ee:	e064      	b.n	8005aba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68b9      	ldr	r1, [r7, #8]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f000 fa40 	bl	8005e7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	699a      	ldr	r2, [r3, #24]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	699a      	ldr	r2, [r3, #24]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6999      	ldr	r1, [r3, #24]
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	021a      	lsls	r2, r3, #8
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	619a      	str	r2, [r3, #24]
      break;
 8005a30:	e043      	b.n	8005aba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68b9      	ldr	r1, [r7, #8]
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f000 fa95 	bl	8005f68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	69da      	ldr	r2, [r3, #28]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f042 0208 	orr.w	r2, r2, #8
 8005a4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	69da      	ldr	r2, [r3, #28]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 0204 	bic.w	r2, r2, #4
 8005a5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	69d9      	ldr	r1, [r3, #28]
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	691a      	ldr	r2, [r3, #16]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	61da      	str	r2, [r3, #28]
      break;
 8005a70:	e023      	b.n	8005aba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68b9      	ldr	r1, [r7, #8]
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f000 fae9 	bl	8006050 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	69da      	ldr	r2, [r3, #28]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	69da      	ldr	r2, [r3, #28]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	69d9      	ldr	r1, [r3, #28]
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	021a      	lsls	r2, r3, #8
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	61da      	str	r2, [r3, #28]
      break;
 8005ab2:	e002      	b.n	8005aba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ab8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3718      	adds	r7, #24
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d101      	bne.n	8005ae8 <HAL_TIM_ConfigClockSource+0x1c>
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	e0b4      	b.n	8005c52 <HAL_TIM_ConfigClockSource+0x186>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2202      	movs	r2, #2
 8005af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68ba      	ldr	r2, [r7, #8]
 8005b16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b20:	d03e      	beq.n	8005ba0 <HAL_TIM_ConfigClockSource+0xd4>
 8005b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b26:	f200 8087 	bhi.w	8005c38 <HAL_TIM_ConfigClockSource+0x16c>
 8005b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b2e:	f000 8086 	beq.w	8005c3e <HAL_TIM_ConfigClockSource+0x172>
 8005b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b36:	d87f      	bhi.n	8005c38 <HAL_TIM_ConfigClockSource+0x16c>
 8005b38:	2b70      	cmp	r3, #112	; 0x70
 8005b3a:	d01a      	beq.n	8005b72 <HAL_TIM_ConfigClockSource+0xa6>
 8005b3c:	2b70      	cmp	r3, #112	; 0x70
 8005b3e:	d87b      	bhi.n	8005c38 <HAL_TIM_ConfigClockSource+0x16c>
 8005b40:	2b60      	cmp	r3, #96	; 0x60
 8005b42:	d050      	beq.n	8005be6 <HAL_TIM_ConfigClockSource+0x11a>
 8005b44:	2b60      	cmp	r3, #96	; 0x60
 8005b46:	d877      	bhi.n	8005c38 <HAL_TIM_ConfigClockSource+0x16c>
 8005b48:	2b50      	cmp	r3, #80	; 0x50
 8005b4a:	d03c      	beq.n	8005bc6 <HAL_TIM_ConfigClockSource+0xfa>
 8005b4c:	2b50      	cmp	r3, #80	; 0x50
 8005b4e:	d873      	bhi.n	8005c38 <HAL_TIM_ConfigClockSource+0x16c>
 8005b50:	2b40      	cmp	r3, #64	; 0x40
 8005b52:	d058      	beq.n	8005c06 <HAL_TIM_ConfigClockSource+0x13a>
 8005b54:	2b40      	cmp	r3, #64	; 0x40
 8005b56:	d86f      	bhi.n	8005c38 <HAL_TIM_ConfigClockSource+0x16c>
 8005b58:	2b30      	cmp	r3, #48	; 0x30
 8005b5a:	d064      	beq.n	8005c26 <HAL_TIM_ConfigClockSource+0x15a>
 8005b5c:	2b30      	cmp	r3, #48	; 0x30
 8005b5e:	d86b      	bhi.n	8005c38 <HAL_TIM_ConfigClockSource+0x16c>
 8005b60:	2b20      	cmp	r3, #32
 8005b62:	d060      	beq.n	8005c26 <HAL_TIM_ConfigClockSource+0x15a>
 8005b64:	2b20      	cmp	r3, #32
 8005b66:	d867      	bhi.n	8005c38 <HAL_TIM_ConfigClockSource+0x16c>
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d05c      	beq.n	8005c26 <HAL_TIM_ConfigClockSource+0x15a>
 8005b6c:	2b10      	cmp	r3, #16
 8005b6e:	d05a      	beq.n	8005c26 <HAL_TIM_ConfigClockSource+0x15a>
 8005b70:	e062      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6818      	ldr	r0, [r3, #0]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	6899      	ldr	r1, [r3, #8]
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	f000 fb35 	bl	80061f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68ba      	ldr	r2, [r7, #8]
 8005b9c:	609a      	str	r2, [r3, #8]
      break;
 8005b9e:	e04f      	b.n	8005c40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6818      	ldr	r0, [r3, #0]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	6899      	ldr	r1, [r3, #8]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	685a      	ldr	r2, [r3, #4]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	f000 fb1e 	bl	80061f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689a      	ldr	r2, [r3, #8]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bc2:	609a      	str	r2, [r3, #8]
      break;
 8005bc4:	e03c      	b.n	8005c40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6818      	ldr	r0, [r3, #0]
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	6859      	ldr	r1, [r3, #4]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	f000 fa92 	bl	80060fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2150      	movs	r1, #80	; 0x50
 8005bde:	4618      	mov	r0, r3
 8005be0:	f000 faeb 	bl	80061ba <TIM_ITRx_SetConfig>
      break;
 8005be4:	e02c      	b.n	8005c40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6818      	ldr	r0, [r3, #0]
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	6859      	ldr	r1, [r3, #4]
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	f000 fab1 	bl	800615a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2160      	movs	r1, #96	; 0x60
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f000 fadb 	bl	80061ba <TIM_ITRx_SetConfig>
      break;
 8005c04:	e01c      	b.n	8005c40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6818      	ldr	r0, [r3, #0]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	6859      	ldr	r1, [r3, #4]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	461a      	mov	r2, r3
 8005c14:	f000 fa72 	bl	80060fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2140      	movs	r1, #64	; 0x40
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f000 facb 	bl	80061ba <TIM_ITRx_SetConfig>
      break;
 8005c24:	e00c      	b.n	8005c40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4619      	mov	r1, r3
 8005c30:	4610      	mov	r0, r2
 8005c32:	f000 fac2 	bl	80061ba <TIM_ITRx_SetConfig>
      break;
 8005c36:	e003      	b.n	8005c40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c3c:	e000      	b.n	8005c40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
	...

08005c5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a40      	ldr	r2, [pc, #256]	; (8005d70 <TIM_Base_SetConfig+0x114>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d013      	beq.n	8005c9c <TIM_Base_SetConfig+0x40>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c7a:	d00f      	beq.n	8005c9c <TIM_Base_SetConfig+0x40>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a3d      	ldr	r2, [pc, #244]	; (8005d74 <TIM_Base_SetConfig+0x118>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d00b      	beq.n	8005c9c <TIM_Base_SetConfig+0x40>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a3c      	ldr	r2, [pc, #240]	; (8005d78 <TIM_Base_SetConfig+0x11c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d007      	beq.n	8005c9c <TIM_Base_SetConfig+0x40>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a3b      	ldr	r2, [pc, #236]	; (8005d7c <TIM_Base_SetConfig+0x120>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d003      	beq.n	8005c9c <TIM_Base_SetConfig+0x40>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a3a      	ldr	r2, [pc, #232]	; (8005d80 <TIM_Base_SetConfig+0x124>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d108      	bne.n	8005cae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a2f      	ldr	r2, [pc, #188]	; (8005d70 <TIM_Base_SetConfig+0x114>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d02b      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cbc:	d027      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a2c      	ldr	r2, [pc, #176]	; (8005d74 <TIM_Base_SetConfig+0x118>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d023      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a2b      	ldr	r2, [pc, #172]	; (8005d78 <TIM_Base_SetConfig+0x11c>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d01f      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a2a      	ldr	r2, [pc, #168]	; (8005d7c <TIM_Base_SetConfig+0x120>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d01b      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a29      	ldr	r2, [pc, #164]	; (8005d80 <TIM_Base_SetConfig+0x124>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d017      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a28      	ldr	r2, [pc, #160]	; (8005d84 <TIM_Base_SetConfig+0x128>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d013      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a27      	ldr	r2, [pc, #156]	; (8005d88 <TIM_Base_SetConfig+0x12c>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d00f      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a26      	ldr	r2, [pc, #152]	; (8005d8c <TIM_Base_SetConfig+0x130>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d00b      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a25      	ldr	r2, [pc, #148]	; (8005d90 <TIM_Base_SetConfig+0x134>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d007      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a24      	ldr	r2, [pc, #144]	; (8005d94 <TIM_Base_SetConfig+0x138>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d003      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a23      	ldr	r2, [pc, #140]	; (8005d98 <TIM_Base_SetConfig+0x13c>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d108      	bne.n	8005d20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	689a      	ldr	r2, [r3, #8]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a0a      	ldr	r2, [pc, #40]	; (8005d70 <TIM_Base_SetConfig+0x114>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d003      	beq.n	8005d54 <TIM_Base_SetConfig+0xf8>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a0c      	ldr	r2, [pc, #48]	; (8005d80 <TIM_Base_SetConfig+0x124>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d103      	bne.n	8005d5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	691a      	ldr	r2, [r3, #16]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	615a      	str	r2, [r3, #20]
}
 8005d62:	bf00      	nop
 8005d64:	3714      	adds	r7, #20
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	40010000 	.word	0x40010000
 8005d74:	40000400 	.word	0x40000400
 8005d78:	40000800 	.word	0x40000800
 8005d7c:	40000c00 	.word	0x40000c00
 8005d80:	40010400 	.word	0x40010400
 8005d84:	40014000 	.word	0x40014000
 8005d88:	40014400 	.word	0x40014400
 8005d8c:	40014800 	.word	0x40014800
 8005d90:	40001800 	.word	0x40001800
 8005d94:	40001c00 	.word	0x40001c00
 8005d98:	40002000 	.word	0x40002000

08005d9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b087      	sub	sp, #28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	f023 0201 	bic.w	r2, r3, #1
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f023 0303 	bic.w	r3, r3, #3
 8005dd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f023 0302 	bic.w	r3, r3, #2
 8005de4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a20      	ldr	r2, [pc, #128]	; (8005e74 <TIM_OC1_SetConfig+0xd8>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d003      	beq.n	8005e00 <TIM_OC1_SetConfig+0x64>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a1f      	ldr	r2, [pc, #124]	; (8005e78 <TIM_OC1_SetConfig+0xdc>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d10c      	bne.n	8005e1a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	f023 0308 	bic.w	r3, r3, #8
 8005e06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f023 0304 	bic.w	r3, r3, #4
 8005e18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a15      	ldr	r2, [pc, #84]	; (8005e74 <TIM_OC1_SetConfig+0xd8>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d003      	beq.n	8005e2a <TIM_OC1_SetConfig+0x8e>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a14      	ldr	r2, [pc, #80]	; (8005e78 <TIM_OC1_SetConfig+0xdc>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d111      	bne.n	8005e4e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	685a      	ldr	r2, [r3, #4]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	621a      	str	r2, [r3, #32]
}
 8005e68:	bf00      	nop
 8005e6a:	371c      	adds	r7, #28
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr
 8005e74:	40010000 	.word	0x40010000
 8005e78:	40010400 	.word	0x40010400

08005e7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b087      	sub	sp, #28
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	f023 0210 	bic.w	r2, r3, #16
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	021b      	lsls	r3, r3, #8
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f023 0320 	bic.w	r3, r3, #32
 8005ec6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	011b      	lsls	r3, r3, #4
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a22      	ldr	r2, [pc, #136]	; (8005f60 <TIM_OC2_SetConfig+0xe4>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d003      	beq.n	8005ee4 <TIM_OC2_SetConfig+0x68>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a21      	ldr	r2, [pc, #132]	; (8005f64 <TIM_OC2_SetConfig+0xe8>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d10d      	bne.n	8005f00 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	011b      	lsls	r3, r3, #4
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005efe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a17      	ldr	r2, [pc, #92]	; (8005f60 <TIM_OC2_SetConfig+0xe4>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d003      	beq.n	8005f10 <TIM_OC2_SetConfig+0x94>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a16      	ldr	r2, [pc, #88]	; (8005f64 <TIM_OC2_SetConfig+0xe8>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d113      	bne.n	8005f38 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	685a      	ldr	r2, [r3, #4]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	621a      	str	r2, [r3, #32]
}
 8005f52:	bf00      	nop
 8005f54:	371c      	adds	r7, #28
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	40010000 	.word	0x40010000
 8005f64:	40010400 	.word	0x40010400

08005f68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b087      	sub	sp, #28
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f023 0303 	bic.w	r3, r3, #3
 8005f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	021b      	lsls	r3, r3, #8
 8005fb8:	697a      	ldr	r2, [r7, #20]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a21      	ldr	r2, [pc, #132]	; (8006048 <TIM_OC3_SetConfig+0xe0>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d003      	beq.n	8005fce <TIM_OC3_SetConfig+0x66>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a20      	ldr	r2, [pc, #128]	; (800604c <TIM_OC3_SetConfig+0xe4>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d10d      	bne.n	8005fea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	021b      	lsls	r3, r3, #8
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fe8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a16      	ldr	r2, [pc, #88]	; (8006048 <TIM_OC3_SetConfig+0xe0>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d003      	beq.n	8005ffa <TIM_OC3_SetConfig+0x92>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a15      	ldr	r2, [pc, #84]	; (800604c <TIM_OC3_SetConfig+0xe4>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d113      	bne.n	8006022 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006000:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006008:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	011b      	lsls	r3, r3, #4
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	4313      	orrs	r3, r2
 8006014:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	699b      	ldr	r3, [r3, #24]
 800601a:	011b      	lsls	r3, r3, #4
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	4313      	orrs	r3, r2
 8006020:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	685a      	ldr	r2, [r3, #4]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	621a      	str	r2, [r3, #32]
}
 800603c:	bf00      	nop
 800603e:	371c      	adds	r7, #28
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr
 8006048:	40010000 	.word	0x40010000
 800604c:	40010400 	.word	0x40010400

08006050 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006050:	b480      	push	{r7}
 8006052:	b087      	sub	sp, #28
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	69db      	ldr	r3, [r3, #28]
 8006076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800607e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006086:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	021b      	lsls	r3, r3, #8
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	4313      	orrs	r3, r2
 8006092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800609a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	031b      	lsls	r3, r3, #12
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a12      	ldr	r2, [pc, #72]	; (80060f4 <TIM_OC4_SetConfig+0xa4>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d003      	beq.n	80060b8 <TIM_OC4_SetConfig+0x68>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a11      	ldr	r2, [pc, #68]	; (80060f8 <TIM_OC4_SetConfig+0xa8>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d109      	bne.n	80060cc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	695b      	ldr	r3, [r3, #20]
 80060c4:	019b      	lsls	r3, r3, #6
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	621a      	str	r2, [r3, #32]
}
 80060e6:	bf00      	nop
 80060e8:	371c      	adds	r7, #28
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	40010000 	.word	0x40010000
 80060f8:	40010400 	.word	0x40010400

080060fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b087      	sub	sp, #28
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6a1b      	ldr	r3, [r3, #32]
 800610c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	f023 0201 	bic.w	r2, r3, #1
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006126:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	011b      	lsls	r3, r3, #4
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	4313      	orrs	r3, r2
 8006130:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	f023 030a 	bic.w	r3, r3, #10
 8006138:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800613a:	697a      	ldr	r2, [r7, #20]
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	4313      	orrs	r3, r2
 8006140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	621a      	str	r2, [r3, #32]
}
 800614e:	bf00      	nop
 8006150:	371c      	adds	r7, #28
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800615a:	b480      	push	{r7}
 800615c:	b087      	sub	sp, #28
 800615e:	af00      	add	r7, sp, #0
 8006160:	60f8      	str	r0, [r7, #12]
 8006162:	60b9      	str	r1, [r7, #8]
 8006164:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	f023 0210 	bic.w	r2, r3, #16
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6a1b      	ldr	r3, [r3, #32]
 800617c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006184:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	031b      	lsls	r3, r3, #12
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	4313      	orrs	r3, r2
 800618e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006196:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	011b      	lsls	r3, r3, #4
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	4313      	orrs	r3, r2
 80061a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	621a      	str	r2, [r3, #32]
}
 80061ae:	bf00      	nop
 80061b0:	371c      	adds	r7, #28
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b085      	sub	sp, #20
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	f043 0307 	orr.w	r3, r3, #7
 80061dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	609a      	str	r2, [r3, #8]
}
 80061e4:	bf00      	nop
 80061e6:	3714      	adds	r7, #20
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b087      	sub	sp, #28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
 80061fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800620a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	021a      	lsls	r2, r3, #8
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	431a      	orrs	r2, r3
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	4313      	orrs	r3, r2
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	4313      	orrs	r3, r2
 800621c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	609a      	str	r2, [r3, #8]
}
 8006224:	bf00      	nop
 8006226:	371c      	adds	r7, #28
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006230:	b480      	push	{r7}
 8006232:	b087      	sub	sp, #28
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	f003 031f 	and.w	r3, r3, #31
 8006242:	2201      	movs	r2, #1
 8006244:	fa02 f303 	lsl.w	r3, r2, r3
 8006248:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6a1a      	ldr	r2, [r3, #32]
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	43db      	mvns	r3, r3
 8006252:	401a      	ands	r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6a1a      	ldr	r2, [r3, #32]
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	f003 031f 	and.w	r3, r3, #31
 8006262:	6879      	ldr	r1, [r7, #4]
 8006264:	fa01 f303 	lsl.w	r3, r1, r3
 8006268:	431a      	orrs	r2, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	621a      	str	r2, [r3, #32]
}
 800626e:	bf00      	nop
 8006270:	371c      	adds	r7, #28
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
	...

0800627c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800628c:	2b01      	cmp	r3, #1
 800628e:	d101      	bne.n	8006294 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006290:	2302      	movs	r3, #2
 8006292:	e05a      	b.n	800634a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2202      	movs	r2, #2
 80062a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a21      	ldr	r2, [pc, #132]	; (8006358 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d022      	beq.n	800631e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062e0:	d01d      	beq.n	800631e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a1d      	ldr	r2, [pc, #116]	; (800635c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d018      	beq.n	800631e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a1b      	ldr	r2, [pc, #108]	; (8006360 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d013      	beq.n	800631e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a1a      	ldr	r2, [pc, #104]	; (8006364 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d00e      	beq.n	800631e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a18      	ldr	r2, [pc, #96]	; (8006368 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d009      	beq.n	800631e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a17      	ldr	r2, [pc, #92]	; (800636c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d004      	beq.n	800631e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a15      	ldr	r2, [pc, #84]	; (8006370 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d10c      	bne.n	8006338 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006324:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	68ba      	ldr	r2, [r7, #8]
 800632c:	4313      	orrs	r3, r2
 800632e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	40010000 	.word	0x40010000
 800635c:	40000400 	.word	0x40000400
 8006360:	40000800 	.word	0x40000800
 8006364:	40000c00 	.word	0x40000c00
 8006368:	40010400 	.word	0x40010400
 800636c:	40014000 	.word	0x40014000
 8006370:	40001800 	.word	0x40001800

08006374 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d101      	bne.n	8006386 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e03f      	b.n	8006406 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b00      	cmp	r3, #0
 8006390:	d106      	bne.n	80063a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f7fc fc78 	bl	8002c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2224      	movs	r2, #36	; 0x24
 80063a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68da      	ldr	r2, [r3, #12]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 ff49 	bl	8007250 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	691a      	ldr	r2, [r3, #16]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	695a      	ldr	r2, [r3, #20]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68da      	ldr	r2, [r3, #12]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2220      	movs	r2, #32
 80063f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2220      	movs	r2, #32
 8006400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3708      	adds	r7, #8
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
	...

08006410 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b08c      	sub	sp, #48	; 0x30
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	4613      	mov	r3, r2
 800641c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b20      	cmp	r3, #32
 8006428:	d165      	bne.n	80064f6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d002      	beq.n	8006436 <HAL_UART_Transmit_DMA+0x26>
 8006430:	88fb      	ldrh	r3, [r7, #6]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e05e      	b.n	80064f8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006440:	2b01      	cmp	r3, #1
 8006442:	d101      	bne.n	8006448 <HAL_UART_Transmit_DMA+0x38>
 8006444:	2302      	movs	r3, #2
 8006446:	e057      	b.n	80064f8 <HAL_UART_Transmit_DMA+0xe8>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	88fa      	ldrh	r2, [r7, #6]
 800645a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	88fa      	ldrh	r2, [r7, #6]
 8006460:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2221      	movs	r2, #33	; 0x21
 800646c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006474:	4a22      	ldr	r2, [pc, #136]	; (8006500 <HAL_UART_Transmit_DMA+0xf0>)
 8006476:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800647c:	4a21      	ldr	r2, [pc, #132]	; (8006504 <HAL_UART_Transmit_DMA+0xf4>)
 800647e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006484:	4a20      	ldr	r2, [pc, #128]	; (8006508 <HAL_UART_Transmit_DMA+0xf8>)
 8006486:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800648c:	2200      	movs	r2, #0
 800648e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8006490:	f107 0308 	add.w	r3, r7, #8
 8006494:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800649a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649c:	6819      	ldr	r1, [r3, #0]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	3304      	adds	r3, #4
 80064a4:	461a      	mov	r2, r3
 80064a6:	88fb      	ldrh	r3, [r7, #6]
 80064a8:	f7fc ffcc 	bl	8003444 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80064b4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	3314      	adds	r3, #20
 80064c4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	e853 3f00 	ldrex	r3, [r3]
 80064cc:	617b      	str	r3, [r7, #20]
   return(result);
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	3314      	adds	r3, #20
 80064dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064de:	627a      	str	r2, [r7, #36]	; 0x24
 80064e0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e2:	6a39      	ldr	r1, [r7, #32]
 80064e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064e6:	e841 2300 	strex	r3, r2, [r1]
 80064ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1e5      	bne.n	80064be <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80064f2:	2300      	movs	r3, #0
 80064f4:	e000      	b.n	80064f8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80064f6:	2302      	movs	r3, #2
  }
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3730      	adds	r7, #48	; 0x30
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	08006af1 	.word	0x08006af1
 8006504:	08006b8b 	.word	0x08006b8b
 8006508:	08006d03 	.word	0x08006d03

0800650c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	4613      	mov	r3, r2
 8006518:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b20      	cmp	r3, #32
 8006524:	d11d      	bne.n	8006562 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d002      	beq.n	8006532 <HAL_UART_Receive_DMA+0x26>
 800652c:	88fb      	ldrh	r3, [r7, #6]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d101      	bne.n	8006536 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e016      	b.n	8006564 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800653c:	2b01      	cmp	r3, #1
 800653e:	d101      	bne.n	8006544 <HAL_UART_Receive_DMA+0x38>
 8006540:	2302      	movs	r3, #2
 8006542:	e00f      	b.n	8006564 <HAL_UART_Receive_DMA+0x58>
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006552:	88fb      	ldrh	r3, [r7, #6]
 8006554:	461a      	mov	r2, r3
 8006556:	68b9      	ldr	r1, [r7, #8]
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f000 fc1d 	bl	8006d98 <UART_Start_Receive_DMA>
 800655e:	4603      	mov	r3, r0
 8006560:	e000      	b.n	8006564 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006562:	2302      	movs	r3, #2
  }
}
 8006564:	4618      	mov	r0, r3
 8006566:	3710      	adds	r7, #16
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b0ba      	sub	sp, #232	; 0xe8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006592:	2300      	movs	r3, #0
 8006594:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006598:	2300      	movs	r3, #0
 800659a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800659e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065a2:	f003 030f 	and.w	r3, r3, #15
 80065a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80065aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10f      	bne.n	80065d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065b6:	f003 0320 	and.w	r3, r3, #32
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d009      	beq.n	80065d2 <HAL_UART_IRQHandler+0x66>
 80065be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065c2:	f003 0320 	and.w	r3, r3, #32
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d003      	beq.n	80065d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 fd85 	bl	80070da <UART_Receive_IT>
      return;
 80065d0:	e256      	b.n	8006a80 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80065d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	f000 80de 	beq.w	8006798 <HAL_UART_IRQHandler+0x22c>
 80065dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065e0:	f003 0301 	and.w	r3, r3, #1
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d106      	bne.n	80065f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80065e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065ec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f000 80d1 	beq.w	8006798 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80065f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00b      	beq.n	800661a <HAL_UART_IRQHandler+0xae>
 8006602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800660a:	2b00      	cmp	r3, #0
 800660c:	d005      	beq.n	800661a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006612:	f043 0201 	orr.w	r2, r3, #1
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800661a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800661e:	f003 0304 	and.w	r3, r3, #4
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00b      	beq.n	800663e <HAL_UART_IRQHandler+0xd2>
 8006626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800662a:	f003 0301 	and.w	r3, r3, #1
 800662e:	2b00      	cmp	r3, #0
 8006630:	d005      	beq.n	800663e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006636:	f043 0202 	orr.w	r2, r3, #2
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800663e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006642:	f003 0302 	and.w	r3, r3, #2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00b      	beq.n	8006662 <HAL_UART_IRQHandler+0xf6>
 800664a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	2b00      	cmp	r3, #0
 8006654:	d005      	beq.n	8006662 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665a:	f043 0204 	orr.w	r2, r3, #4
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006666:	f003 0308 	and.w	r3, r3, #8
 800666a:	2b00      	cmp	r3, #0
 800666c:	d011      	beq.n	8006692 <HAL_UART_IRQHandler+0x126>
 800666e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006672:	f003 0320 	and.w	r3, r3, #32
 8006676:	2b00      	cmp	r3, #0
 8006678:	d105      	bne.n	8006686 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800667a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	2b00      	cmp	r3, #0
 8006684:	d005      	beq.n	8006692 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668a:	f043 0208 	orr.w	r2, r3, #8
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006696:	2b00      	cmp	r3, #0
 8006698:	f000 81ed 	beq.w	8006a76 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800669c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066a0:	f003 0320 	and.w	r3, r3, #32
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d008      	beq.n	80066ba <HAL_UART_IRQHandler+0x14e>
 80066a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066ac:	f003 0320 	and.w	r3, r3, #32
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d002      	beq.n	80066ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 fd10 	bl	80070da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c4:	2b40      	cmp	r3, #64	; 0x40
 80066c6:	bf0c      	ite	eq
 80066c8:	2301      	moveq	r3, #1
 80066ca:	2300      	movne	r3, #0
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d6:	f003 0308 	and.w	r3, r3, #8
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d103      	bne.n	80066e6 <HAL_UART_IRQHandler+0x17a>
 80066de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d04f      	beq.n	8006786 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 fc18 	bl	8006f1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f6:	2b40      	cmp	r3, #64	; 0x40
 80066f8:	d141      	bne.n	800677e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	3314      	adds	r3, #20
 8006700:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006704:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006708:	e853 3f00 	ldrex	r3, [r3]
 800670c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006710:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006714:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006718:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	3314      	adds	r3, #20
 8006722:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006726:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800672a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006732:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006736:	e841 2300 	strex	r3, r2, [r1]
 800673a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800673e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1d9      	bne.n	80066fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674a:	2b00      	cmp	r3, #0
 800674c:	d013      	beq.n	8006776 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006752:	4a7d      	ldr	r2, [pc, #500]	; (8006948 <HAL_UART_IRQHandler+0x3dc>)
 8006754:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675a:	4618      	mov	r0, r3
 800675c:	f7fc ff3a 	bl	80035d4 <HAL_DMA_Abort_IT>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d016      	beq.n	8006794 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006770:	4610      	mov	r0, r2
 8006772:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006774:	e00e      	b.n	8006794 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f9a4 	bl	8006ac4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800677c:	e00a      	b.n	8006794 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f9a0 	bl	8006ac4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006784:	e006      	b.n	8006794 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 f99c 	bl	8006ac4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006792:	e170      	b.n	8006a76 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006794:	bf00      	nop
    return;
 8006796:	e16e      	b.n	8006a76 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679c:	2b01      	cmp	r3, #1
 800679e:	f040 814a 	bne.w	8006a36 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80067a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067a6:	f003 0310 	and.w	r3, r3, #16
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f000 8143 	beq.w	8006a36 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80067b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067b4:	f003 0310 	and.w	r3, r3, #16
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f000 813c 	beq.w	8006a36 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80067be:	2300      	movs	r3, #0
 80067c0:	60bb      	str	r3, [r7, #8]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	60bb      	str	r3, [r7, #8]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	60bb      	str	r3, [r7, #8]
 80067d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	695b      	ldr	r3, [r3, #20]
 80067da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067de:	2b40      	cmp	r3, #64	; 0x40
 80067e0:	f040 80b4 	bne.w	800694c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80067f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 8140 	beq.w	8006a7a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80067fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006802:	429a      	cmp	r2, r3
 8006804:	f080 8139 	bcs.w	8006a7a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800680e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006814:	69db      	ldr	r3, [r3, #28]
 8006816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800681a:	f000 8088 	beq.w	800692e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	330c      	adds	r3, #12
 8006824:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006828:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800682c:	e853 3f00 	ldrex	r3, [r3]
 8006830:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006834:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800683c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	330c      	adds	r3, #12
 8006846:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800684a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800684e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006852:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006856:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800685a:	e841 2300 	strex	r3, r2, [r1]
 800685e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006862:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006866:	2b00      	cmp	r3, #0
 8006868:	d1d9      	bne.n	800681e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	3314      	adds	r3, #20
 8006870:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006872:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006874:	e853 3f00 	ldrex	r3, [r3]
 8006878:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800687a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800687c:	f023 0301 	bic.w	r3, r3, #1
 8006880:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	3314      	adds	r3, #20
 800688a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800688e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006892:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006894:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006896:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800689a:	e841 2300 	strex	r3, r2, [r1]
 800689e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80068a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1e1      	bne.n	800686a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	3314      	adds	r3, #20
 80068ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068b0:	e853 3f00 	ldrex	r3, [r3]
 80068b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80068b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	3314      	adds	r3, #20
 80068c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80068ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80068cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80068d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80068d2:	e841 2300 	strex	r3, r2, [r1]
 80068d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80068d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1e3      	bne.n	80068a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2220      	movs	r2, #32
 80068e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	330c      	adds	r3, #12
 80068f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068f6:	e853 3f00 	ldrex	r3, [r3]
 80068fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80068fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068fe:	f023 0310 	bic.w	r3, r3, #16
 8006902:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	330c      	adds	r3, #12
 800690c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006910:	65ba      	str	r2, [r7, #88]	; 0x58
 8006912:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006914:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006916:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006918:	e841 2300 	strex	r3, r2, [r1]
 800691c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800691e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1e3      	bne.n	80068ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006928:	4618      	mov	r0, r3
 800692a:	f7fc fde3 	bl	80034f4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006936:	b29b      	uxth	r3, r3
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	b29b      	uxth	r3, r3
 800693c:	4619      	mov	r1, r3
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f8ca 	bl	8006ad8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006944:	e099      	b.n	8006a7a <HAL_UART_IRQHandler+0x50e>
 8006946:	bf00      	nop
 8006948:	08006fe3 	.word	0x08006fe3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006954:	b29b      	uxth	r3, r3
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006960:	b29b      	uxth	r3, r3
 8006962:	2b00      	cmp	r3, #0
 8006964:	f000 808b 	beq.w	8006a7e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006968:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 8086 	beq.w	8006a7e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	330c      	adds	r3, #12
 8006978:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697c:	e853 3f00 	ldrex	r3, [r3]
 8006980:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006984:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006988:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	330c      	adds	r3, #12
 8006992:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006996:	647a      	str	r2, [r7, #68]	; 0x44
 8006998:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800699c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800699e:	e841 2300 	strex	r3, r2, [r1]
 80069a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1e3      	bne.n	8006972 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	3314      	adds	r3, #20
 80069b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b4:	e853 3f00 	ldrex	r3, [r3]
 80069b8:	623b      	str	r3, [r7, #32]
   return(result);
 80069ba:	6a3b      	ldr	r3, [r7, #32]
 80069bc:	f023 0301 	bic.w	r3, r3, #1
 80069c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	3314      	adds	r3, #20
 80069ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80069ce:	633a      	str	r2, [r7, #48]	; 0x30
 80069d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069d6:	e841 2300 	strex	r3, r2, [r1]
 80069da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1e3      	bne.n	80069aa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2220      	movs	r2, #32
 80069e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	330c      	adds	r3, #12
 80069f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	e853 3f00 	ldrex	r3, [r3]
 80069fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f023 0310 	bic.w	r3, r3, #16
 8006a06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	330c      	adds	r3, #12
 8006a10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006a14:	61fa      	str	r2, [r7, #28]
 8006a16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a18:	69b9      	ldr	r1, [r7, #24]
 8006a1a:	69fa      	ldr	r2, [r7, #28]
 8006a1c:	e841 2300 	strex	r3, r2, [r1]
 8006a20:	617b      	str	r3, [r7, #20]
   return(result);
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1e3      	bne.n	80069f0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 f852 	bl	8006ad8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a34:	e023      	b.n	8006a7e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d009      	beq.n	8006a56 <HAL_UART_IRQHandler+0x4ea>
 8006a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d003      	beq.n	8006a56 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fadb 	bl	800700a <UART_Transmit_IT>
    return;
 8006a54:	e014      	b.n	8006a80 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00e      	beq.n	8006a80 <HAL_UART_IRQHandler+0x514>
 8006a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d008      	beq.n	8006a80 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 fb1b 	bl	80070aa <UART_EndTransmit_IT>
    return;
 8006a74:	e004      	b.n	8006a80 <HAL_UART_IRQHandler+0x514>
    return;
 8006a76:	bf00      	nop
 8006a78:	e002      	b.n	8006a80 <HAL_UART_IRQHandler+0x514>
      return;
 8006a7a:	bf00      	nop
 8006a7c:	e000      	b.n	8006a80 <HAL_UART_IRQHandler+0x514>
      return;
 8006a7e:	bf00      	nop
  }
}
 8006a80:	37e8      	adds	r7, #232	; 0xe8
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop

08006a88 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006a90:	bf00      	nop
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006aa4:	bf00      	nop
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b090      	sub	sp, #64	; 0x40
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afc:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d137      	bne.n	8006b7c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b0e:	2200      	movs	r2, #0
 8006b10:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	3314      	adds	r3, #20
 8006b18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1c:	e853 3f00 	ldrex	r3, [r3]
 8006b20:	623b      	str	r3, [r7, #32]
   return(result);
 8006b22:	6a3b      	ldr	r3, [r7, #32]
 8006b24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b28:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	3314      	adds	r3, #20
 8006b30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b32:	633a      	str	r2, [r7, #48]	; 0x30
 8006b34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b3a:	e841 2300 	strex	r3, r2, [r1]
 8006b3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1e5      	bne.n	8006b12 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	330c      	adds	r3, #12
 8006b4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	e853 3f00 	ldrex	r3, [r3]
 8006b54:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	330c      	adds	r3, #12
 8006b64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b66:	61fa      	str	r2, [r7, #28]
 8006b68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6a:	69b9      	ldr	r1, [r7, #24]
 8006b6c:	69fa      	ldr	r2, [r7, #28]
 8006b6e:	e841 2300 	strex	r3, r2, [r1]
 8006b72:	617b      	str	r3, [r7, #20]
   return(result);
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1e5      	bne.n	8006b46 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b7a:	e002      	b.n	8006b82 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006b7c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006b7e:	f7fb fef1 	bl	8002964 <HAL_UART_TxCpltCallback>
}
 8006b82:	bf00      	nop
 8006b84:	3740      	adds	r7, #64	; 0x40
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b084      	sub	sp, #16
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b96:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f7ff ff75 	bl	8006a88 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b9e:	bf00      	nop
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b09c      	sub	sp, #112	; 0x70
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb2:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d172      	bne.n	8006ca8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	330c      	adds	r3, #12
 8006bce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bd2:	e853 3f00 	ldrex	r3, [r3]
 8006bd6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bde:	66bb      	str	r3, [r7, #104]	; 0x68
 8006be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	330c      	adds	r3, #12
 8006be6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006be8:	65ba      	str	r2, [r7, #88]	; 0x58
 8006bea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006bee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006bf0:	e841 2300 	strex	r3, r2, [r1]
 8006bf4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006bf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d1e5      	bne.n	8006bc8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	3314      	adds	r3, #20
 8006c02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c06:	e853 3f00 	ldrex	r3, [r3]
 8006c0a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c0e:	f023 0301 	bic.w	r3, r3, #1
 8006c12:	667b      	str	r3, [r7, #100]	; 0x64
 8006c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	3314      	adds	r3, #20
 8006c1a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006c1c:	647a      	str	r2, [r7, #68]	; 0x44
 8006c1e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c20:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c24:	e841 2300 	strex	r3, r2, [r1]
 8006c28:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1e5      	bne.n	8006bfc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	3314      	adds	r3, #20
 8006c36:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3a:	e853 3f00 	ldrex	r3, [r3]
 8006c3e:	623b      	str	r3, [r7, #32]
   return(result);
 8006c40:	6a3b      	ldr	r3, [r7, #32]
 8006c42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c46:	663b      	str	r3, [r7, #96]	; 0x60
 8006c48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	3314      	adds	r3, #20
 8006c4e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c50:	633a      	str	r2, [r7, #48]	; 0x30
 8006c52:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c58:	e841 2300 	strex	r3, r2, [r1]
 8006c5c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1e5      	bne.n	8006c30 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006c64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c66:	2220      	movs	r2, #32
 8006c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d119      	bne.n	8006ca8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	330c      	adds	r3, #12
 8006c7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	e853 3f00 	ldrex	r3, [r3]
 8006c82:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f023 0310 	bic.w	r3, r3, #16
 8006c8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	330c      	adds	r3, #12
 8006c92:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c94:	61fa      	str	r2, [r7, #28]
 8006c96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c98:	69b9      	ldr	r1, [r7, #24]
 8006c9a:	69fa      	ldr	r2, [r7, #28]
 8006c9c:	e841 2300 	strex	r3, r2, [r1]
 8006ca0:	617b      	str	r3, [r7, #20]
   return(result);
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d1e5      	bne.n	8006c74 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d106      	bne.n	8006cbe <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cb2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006cb8:	f7ff ff0e 	bl	8006ad8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006cbc:	e002      	b.n	8006cc4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006cbe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006cc0:	f7ff feec 	bl	8006a9c <HAL_UART_RxCpltCallback>
}
 8006cc4:	bf00      	nop
 8006cc6:	3770      	adds	r7, #112	; 0x70
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d108      	bne.n	8006cf4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ce6:	085b      	lsrs	r3, r3, #1
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	4619      	mov	r1, r3
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f7ff fef3 	bl	8006ad8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006cf2:	e002      	b.n	8006cfa <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f7ff fedb 	bl	8006ab0 <HAL_UART_RxHalfCpltCallback>
}
 8006cfa:	bf00      	nop
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b084      	sub	sp, #16
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d12:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	695b      	ldr	r3, [r3, #20]
 8006d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d1e:	2b80      	cmp	r3, #128	; 0x80
 8006d20:	bf0c      	ite	eq
 8006d22:	2301      	moveq	r3, #1
 8006d24:	2300      	movne	r3, #0
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	2b21      	cmp	r3, #33	; 0x21
 8006d34:	d108      	bne.n	8006d48 <UART_DMAError+0x46>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d005      	beq.n	8006d48 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006d42:	68b8      	ldr	r0, [r7, #8]
 8006d44:	f000 f8c2 	bl	8006ecc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	695b      	ldr	r3, [r3, #20]
 8006d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d52:	2b40      	cmp	r3, #64	; 0x40
 8006d54:	bf0c      	ite	eq
 8006d56:	2301      	moveq	r3, #1
 8006d58:	2300      	movne	r3, #0
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b22      	cmp	r3, #34	; 0x22
 8006d68:	d108      	bne.n	8006d7c <UART_DMAError+0x7a>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d005      	beq.n	8006d7c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	2200      	movs	r2, #0
 8006d74:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006d76:	68b8      	ldr	r0, [r7, #8]
 8006d78:	f000 f8d0 	bl	8006f1c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d80:	f043 0210 	orr.w	r2, r3, #16
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d88:	68b8      	ldr	r0, [r7, #8]
 8006d8a:	f7ff fe9b 	bl	8006ac4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d8e:	bf00      	nop
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
	...

08006d98 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b098      	sub	sp, #96	; 0x60
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	4613      	mov	r3, r2
 8006da4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006da6:	68ba      	ldr	r2, [r7, #8]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	88fa      	ldrh	r2, [r7, #6]
 8006db0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2222      	movs	r2, #34	; 0x22
 8006dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc4:	4a3e      	ldr	r2, [pc, #248]	; (8006ec0 <UART_Start_Receive_DMA+0x128>)
 8006dc6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dcc:	4a3d      	ldr	r2, [pc, #244]	; (8006ec4 <UART_Start_Receive_DMA+0x12c>)
 8006dce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd4:	4a3c      	ldr	r2, [pc, #240]	; (8006ec8 <UART_Start_Receive_DMA+0x130>)
 8006dd6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ddc:	2200      	movs	r2, #0
 8006dde:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006de0:	f107 0308 	add.w	r3, r7, #8
 8006de4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	3304      	adds	r3, #4
 8006df0:	4619      	mov	r1, r3
 8006df2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	88fb      	ldrh	r3, [r7, #6]
 8006df8:	f7fc fb24 	bl	8003444 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	613b      	str	r3, [r7, #16]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	613b      	str	r3, [r7, #16]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	613b      	str	r3, [r7, #16]
 8006e10:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	330c      	adds	r3, #12
 8006e20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e24:	e853 3f00 	ldrex	r3, [r3]
 8006e28:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e30:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	330c      	adds	r3, #12
 8006e38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e3a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006e3c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006e40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e42:	e841 2300 	strex	r3, r2, [r1]
 8006e46:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006e48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1e5      	bne.n	8006e1a <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	3314      	adds	r3, #20
 8006e54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e58:	e853 3f00 	ldrex	r3, [r3]
 8006e5c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e60:	f043 0301 	orr.w	r3, r3, #1
 8006e64:	657b      	str	r3, [r7, #84]	; 0x54
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	3314      	adds	r3, #20
 8006e6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006e6e:	63ba      	str	r2, [r7, #56]	; 0x38
 8006e70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e72:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006e74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e76:	e841 2300 	strex	r3, r2, [r1]
 8006e7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1e5      	bne.n	8006e4e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	3314      	adds	r3, #20
 8006e88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	e853 3f00 	ldrex	r3, [r3]
 8006e90:	617b      	str	r3, [r7, #20]
   return(result);
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e98:	653b      	str	r3, [r7, #80]	; 0x50
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	3314      	adds	r3, #20
 8006ea0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006ea2:	627a      	str	r2, [r7, #36]	; 0x24
 8006ea4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea6:	6a39      	ldr	r1, [r7, #32]
 8006ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eaa:	e841 2300 	strex	r3, r2, [r1]
 8006eae:	61fb      	str	r3, [r7, #28]
   return(result);
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1e5      	bne.n	8006e82 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3760      	adds	r7, #96	; 0x60
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	08006ba7 	.word	0x08006ba7
 8006ec4:	08006ccd 	.word	0x08006ccd
 8006ec8:	08006d03 	.word	0x08006d03

08006ecc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b089      	sub	sp, #36	; 0x24
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	330c      	adds	r3, #12
 8006eda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	e853 3f00 	ldrex	r3, [r3]
 8006ee2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006eea:	61fb      	str	r3, [r7, #28]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	330c      	adds	r3, #12
 8006ef2:	69fa      	ldr	r2, [r7, #28]
 8006ef4:	61ba      	str	r2, [r7, #24]
 8006ef6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef8:	6979      	ldr	r1, [r7, #20]
 8006efa:	69ba      	ldr	r2, [r7, #24]
 8006efc:	e841 2300 	strex	r3, r2, [r1]
 8006f00:	613b      	str	r3, [r7, #16]
   return(result);
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1e5      	bne.n	8006ed4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2220      	movs	r2, #32
 8006f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006f10:	bf00      	nop
 8006f12:	3724      	adds	r7, #36	; 0x24
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b095      	sub	sp, #84	; 0x54
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	330c      	adds	r3, #12
 8006f2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f2e:	e853 3f00 	ldrex	r3, [r3]
 8006f32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	330c      	adds	r3, #12
 8006f42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f44:	643a      	str	r2, [r7, #64]	; 0x40
 8006f46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f4c:	e841 2300 	strex	r3, r2, [r1]
 8006f50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1e5      	bne.n	8006f24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	3314      	adds	r3, #20
 8006f5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f60:	6a3b      	ldr	r3, [r7, #32]
 8006f62:	e853 3f00 	ldrex	r3, [r3]
 8006f66:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	f023 0301 	bic.w	r3, r3, #1
 8006f6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	3314      	adds	r3, #20
 8006f76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f80:	e841 2300 	strex	r3, r2, [r1]
 8006f84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1e5      	bne.n	8006f58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d119      	bne.n	8006fc8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	330c      	adds	r3, #12
 8006f9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	e853 3f00 	ldrex	r3, [r3]
 8006fa2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	f023 0310 	bic.w	r3, r3, #16
 8006faa:	647b      	str	r3, [r7, #68]	; 0x44
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	330c      	adds	r3, #12
 8006fb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fb4:	61ba      	str	r2, [r7, #24]
 8006fb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb8:	6979      	ldr	r1, [r7, #20]
 8006fba:	69ba      	ldr	r2, [r7, #24]
 8006fbc:	e841 2300 	strex	r3, r2, [r1]
 8006fc0:	613b      	str	r3, [r7, #16]
   return(result);
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d1e5      	bne.n	8006f94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2220      	movs	r2, #32
 8006fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006fd6:	bf00      	nop
 8006fd8:	3754      	adds	r7, #84	; 0x54
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b084      	sub	sp, #16
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f7ff fd61 	bl	8006ac4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007002:	bf00      	nop
 8007004:	3710      	adds	r7, #16
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}

0800700a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800700a:	b480      	push	{r7}
 800700c:	b085      	sub	sp, #20
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007018:	b2db      	uxtb	r3, r3
 800701a:	2b21      	cmp	r3, #33	; 0x21
 800701c:	d13e      	bne.n	800709c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007026:	d114      	bne.n	8007052 <UART_Transmit_IT+0x48>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d110      	bne.n	8007052 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a1b      	ldr	r3, [r3, #32]
 8007034:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	881b      	ldrh	r3, [r3, #0]
 800703a:	461a      	mov	r2, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007044:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a1b      	ldr	r3, [r3, #32]
 800704a:	1c9a      	adds	r2, r3, #2
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	621a      	str	r2, [r3, #32]
 8007050:	e008      	b.n	8007064 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a1b      	ldr	r3, [r3, #32]
 8007056:	1c59      	adds	r1, r3, #1
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	6211      	str	r1, [r2, #32]
 800705c:	781a      	ldrb	r2, [r3, #0]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007068:	b29b      	uxth	r3, r3
 800706a:	3b01      	subs	r3, #1
 800706c:	b29b      	uxth	r3, r3
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	4619      	mov	r1, r3
 8007072:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007074:	2b00      	cmp	r3, #0
 8007076:	d10f      	bne.n	8007098 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68da      	ldr	r2, [r3, #12]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007086:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68da      	ldr	r2, [r3, #12]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007096:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007098:	2300      	movs	r3, #0
 800709a:	e000      	b.n	800709e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800709c:	2302      	movs	r3, #2
  }
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3714      	adds	r7, #20
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr

080070aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b082      	sub	sp, #8
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68da      	ldr	r2, [r3, #12]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2220      	movs	r2, #32
 80070c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f7fb fc4a 	bl	8002964 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3708      	adds	r7, #8
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b08c      	sub	sp, #48	; 0x30
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	2b22      	cmp	r3, #34	; 0x22
 80070ec:	f040 80ab 	bne.w	8007246 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070f8:	d117      	bne.n	800712a <UART_Receive_IT+0x50>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d113      	bne.n	800712a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007102:	2300      	movs	r3, #0
 8007104:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800710a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	b29b      	uxth	r3, r3
 8007114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007118:	b29a      	uxth	r2, r3
 800711a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007122:	1c9a      	adds	r2, r3, #2
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	629a      	str	r2, [r3, #40]	; 0x28
 8007128:	e026      	b.n	8007178 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800712e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007130:	2300      	movs	r3, #0
 8007132:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800713c:	d007      	beq.n	800714e <UART_Receive_IT+0x74>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d10a      	bne.n	800715c <UART_Receive_IT+0x82>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d106      	bne.n	800715c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	b2da      	uxtb	r2, r3
 8007156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007158:	701a      	strb	r2, [r3, #0]
 800715a:	e008      	b.n	800716e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	b2db      	uxtb	r3, r3
 8007164:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007168:	b2da      	uxtb	r2, r3
 800716a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007172:	1c5a      	adds	r2, r3, #1
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800717c:	b29b      	uxth	r3, r3
 800717e:	3b01      	subs	r3, #1
 8007180:	b29b      	uxth	r3, r3
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	4619      	mov	r1, r3
 8007186:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007188:	2b00      	cmp	r3, #0
 800718a:	d15a      	bne.n	8007242 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68da      	ldr	r2, [r3, #12]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f022 0220 	bic.w	r2, r2, #32
 800719a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68da      	ldr	r2, [r3, #12]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	695a      	ldr	r2, [r3, #20]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f022 0201 	bic.w	r2, r2, #1
 80071ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2220      	movs	r2, #32
 80071c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d135      	bne.n	8007238 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	330c      	adds	r3, #12
 80071d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	e853 3f00 	ldrex	r3, [r3]
 80071e0:	613b      	str	r3, [r7, #16]
   return(result);
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	f023 0310 	bic.w	r3, r3, #16
 80071e8:	627b      	str	r3, [r7, #36]	; 0x24
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	330c      	adds	r3, #12
 80071f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071f2:	623a      	str	r2, [r7, #32]
 80071f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f6:	69f9      	ldr	r1, [r7, #28]
 80071f8:	6a3a      	ldr	r2, [r7, #32]
 80071fa:	e841 2300 	strex	r3, r2, [r1]
 80071fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d1e5      	bne.n	80071d2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 0310 	and.w	r3, r3, #16
 8007210:	2b10      	cmp	r3, #16
 8007212:	d10a      	bne.n	800722a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007214:	2300      	movs	r3, #0
 8007216:	60fb      	str	r3, [r7, #12]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	60fb      	str	r3, [r7, #12]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	60fb      	str	r3, [r7, #12]
 8007228:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800722e:	4619      	mov	r1, r3
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f7ff fc51 	bl	8006ad8 <HAL_UARTEx_RxEventCallback>
 8007236:	e002      	b.n	800723e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f7ff fc2f 	bl	8006a9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800723e:	2300      	movs	r3, #0
 8007240:	e002      	b.n	8007248 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007242:	2300      	movs	r3, #0
 8007244:	e000      	b.n	8007248 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007246:	2302      	movs	r3, #2
  }
}
 8007248:	4618      	mov	r0, r3
 800724a:	3730      	adds	r7, #48	; 0x30
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007254:	b09f      	sub	sp, #124	; 0x7c
 8007256:	af00      	add	r7, sp, #0
 8007258:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800725a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007266:	68d9      	ldr	r1, [r3, #12]
 8007268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	ea40 0301 	orr.w	r3, r0, r1
 8007270:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007274:	689a      	ldr	r2, [r3, #8]
 8007276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	431a      	orrs	r2, r3
 800727c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800727e:	695b      	ldr	r3, [r3, #20]
 8007280:	431a      	orrs	r2, r3
 8007282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007284:	69db      	ldr	r3, [r3, #28]
 8007286:	4313      	orrs	r3, r2
 8007288:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800728a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007294:	f021 010c 	bic.w	r1, r1, #12
 8007298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800729e:	430b      	orrs	r3, r1
 80072a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80072a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	695b      	ldr	r3, [r3, #20]
 80072a8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80072ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ae:	6999      	ldr	r1, [r3, #24]
 80072b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	ea40 0301 	orr.w	r3, r0, r1
 80072b8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80072ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	4bc5      	ldr	r3, [pc, #788]	; (80075d4 <UART_SetConfig+0x384>)
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d004      	beq.n	80072ce <UART_SetConfig+0x7e>
 80072c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	4bc3      	ldr	r3, [pc, #780]	; (80075d8 <UART_SetConfig+0x388>)
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d103      	bne.n	80072d6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80072ce:	f7fe f9b7 	bl	8005640 <HAL_RCC_GetPCLK2Freq>
 80072d2:	6778      	str	r0, [r7, #116]	; 0x74
 80072d4:	e002      	b.n	80072dc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80072d6:	f7fe f99f 	bl	8005618 <HAL_RCC_GetPCLK1Freq>
 80072da:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072de:	69db      	ldr	r3, [r3, #28]
 80072e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072e4:	f040 80b6 	bne.w	8007454 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80072e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072ea:	461c      	mov	r4, r3
 80072ec:	f04f 0500 	mov.w	r5, #0
 80072f0:	4622      	mov	r2, r4
 80072f2:	462b      	mov	r3, r5
 80072f4:	1891      	adds	r1, r2, r2
 80072f6:	6439      	str	r1, [r7, #64]	; 0x40
 80072f8:	415b      	adcs	r3, r3
 80072fa:	647b      	str	r3, [r7, #68]	; 0x44
 80072fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007300:	1912      	adds	r2, r2, r4
 8007302:	eb45 0303 	adc.w	r3, r5, r3
 8007306:	f04f 0000 	mov.w	r0, #0
 800730a:	f04f 0100 	mov.w	r1, #0
 800730e:	00d9      	lsls	r1, r3, #3
 8007310:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007314:	00d0      	lsls	r0, r2, #3
 8007316:	4602      	mov	r2, r0
 8007318:	460b      	mov	r3, r1
 800731a:	1911      	adds	r1, r2, r4
 800731c:	6639      	str	r1, [r7, #96]	; 0x60
 800731e:	416b      	adcs	r3, r5
 8007320:	667b      	str	r3, [r7, #100]	; 0x64
 8007322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	461a      	mov	r2, r3
 8007328:	f04f 0300 	mov.w	r3, #0
 800732c:	1891      	adds	r1, r2, r2
 800732e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007330:	415b      	adcs	r3, r3
 8007332:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007334:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007338:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800733c:	f7f8 ff44 	bl	80001c8 <__aeabi_uldivmod>
 8007340:	4602      	mov	r2, r0
 8007342:	460b      	mov	r3, r1
 8007344:	4ba5      	ldr	r3, [pc, #660]	; (80075dc <UART_SetConfig+0x38c>)
 8007346:	fba3 2302 	umull	r2, r3, r3, r2
 800734a:	095b      	lsrs	r3, r3, #5
 800734c:	011e      	lsls	r6, r3, #4
 800734e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007350:	461c      	mov	r4, r3
 8007352:	f04f 0500 	mov.w	r5, #0
 8007356:	4622      	mov	r2, r4
 8007358:	462b      	mov	r3, r5
 800735a:	1891      	adds	r1, r2, r2
 800735c:	6339      	str	r1, [r7, #48]	; 0x30
 800735e:	415b      	adcs	r3, r3
 8007360:	637b      	str	r3, [r7, #52]	; 0x34
 8007362:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007366:	1912      	adds	r2, r2, r4
 8007368:	eb45 0303 	adc.w	r3, r5, r3
 800736c:	f04f 0000 	mov.w	r0, #0
 8007370:	f04f 0100 	mov.w	r1, #0
 8007374:	00d9      	lsls	r1, r3, #3
 8007376:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800737a:	00d0      	lsls	r0, r2, #3
 800737c:	4602      	mov	r2, r0
 800737e:	460b      	mov	r3, r1
 8007380:	1911      	adds	r1, r2, r4
 8007382:	65b9      	str	r1, [r7, #88]	; 0x58
 8007384:	416b      	adcs	r3, r5
 8007386:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	461a      	mov	r2, r3
 800738e:	f04f 0300 	mov.w	r3, #0
 8007392:	1891      	adds	r1, r2, r2
 8007394:	62b9      	str	r1, [r7, #40]	; 0x28
 8007396:	415b      	adcs	r3, r3
 8007398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800739a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800739e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80073a2:	f7f8 ff11 	bl	80001c8 <__aeabi_uldivmod>
 80073a6:	4602      	mov	r2, r0
 80073a8:	460b      	mov	r3, r1
 80073aa:	4b8c      	ldr	r3, [pc, #560]	; (80075dc <UART_SetConfig+0x38c>)
 80073ac:	fba3 1302 	umull	r1, r3, r3, r2
 80073b0:	095b      	lsrs	r3, r3, #5
 80073b2:	2164      	movs	r1, #100	; 0x64
 80073b4:	fb01 f303 	mul.w	r3, r1, r3
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	00db      	lsls	r3, r3, #3
 80073bc:	3332      	adds	r3, #50	; 0x32
 80073be:	4a87      	ldr	r2, [pc, #540]	; (80075dc <UART_SetConfig+0x38c>)
 80073c0:	fba2 2303 	umull	r2, r3, r2, r3
 80073c4:	095b      	lsrs	r3, r3, #5
 80073c6:	005b      	lsls	r3, r3, #1
 80073c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80073cc:	441e      	add	r6, r3
 80073ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073d0:	4618      	mov	r0, r3
 80073d2:	f04f 0100 	mov.w	r1, #0
 80073d6:	4602      	mov	r2, r0
 80073d8:	460b      	mov	r3, r1
 80073da:	1894      	adds	r4, r2, r2
 80073dc:	623c      	str	r4, [r7, #32]
 80073de:	415b      	adcs	r3, r3
 80073e0:	627b      	str	r3, [r7, #36]	; 0x24
 80073e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80073e6:	1812      	adds	r2, r2, r0
 80073e8:	eb41 0303 	adc.w	r3, r1, r3
 80073ec:	f04f 0400 	mov.w	r4, #0
 80073f0:	f04f 0500 	mov.w	r5, #0
 80073f4:	00dd      	lsls	r5, r3, #3
 80073f6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80073fa:	00d4      	lsls	r4, r2, #3
 80073fc:	4622      	mov	r2, r4
 80073fe:	462b      	mov	r3, r5
 8007400:	1814      	adds	r4, r2, r0
 8007402:	653c      	str	r4, [r7, #80]	; 0x50
 8007404:	414b      	adcs	r3, r1
 8007406:	657b      	str	r3, [r7, #84]	; 0x54
 8007408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	461a      	mov	r2, r3
 800740e:	f04f 0300 	mov.w	r3, #0
 8007412:	1891      	adds	r1, r2, r2
 8007414:	61b9      	str	r1, [r7, #24]
 8007416:	415b      	adcs	r3, r3
 8007418:	61fb      	str	r3, [r7, #28]
 800741a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800741e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007422:	f7f8 fed1 	bl	80001c8 <__aeabi_uldivmod>
 8007426:	4602      	mov	r2, r0
 8007428:	460b      	mov	r3, r1
 800742a:	4b6c      	ldr	r3, [pc, #432]	; (80075dc <UART_SetConfig+0x38c>)
 800742c:	fba3 1302 	umull	r1, r3, r3, r2
 8007430:	095b      	lsrs	r3, r3, #5
 8007432:	2164      	movs	r1, #100	; 0x64
 8007434:	fb01 f303 	mul.w	r3, r1, r3
 8007438:	1ad3      	subs	r3, r2, r3
 800743a:	00db      	lsls	r3, r3, #3
 800743c:	3332      	adds	r3, #50	; 0x32
 800743e:	4a67      	ldr	r2, [pc, #412]	; (80075dc <UART_SetConfig+0x38c>)
 8007440:	fba2 2303 	umull	r2, r3, r2, r3
 8007444:	095b      	lsrs	r3, r3, #5
 8007446:	f003 0207 	and.w	r2, r3, #7
 800744a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4432      	add	r2, r6
 8007450:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007452:	e0b9      	b.n	80075c8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007454:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007456:	461c      	mov	r4, r3
 8007458:	f04f 0500 	mov.w	r5, #0
 800745c:	4622      	mov	r2, r4
 800745e:	462b      	mov	r3, r5
 8007460:	1891      	adds	r1, r2, r2
 8007462:	6139      	str	r1, [r7, #16]
 8007464:	415b      	adcs	r3, r3
 8007466:	617b      	str	r3, [r7, #20]
 8007468:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800746c:	1912      	adds	r2, r2, r4
 800746e:	eb45 0303 	adc.w	r3, r5, r3
 8007472:	f04f 0000 	mov.w	r0, #0
 8007476:	f04f 0100 	mov.w	r1, #0
 800747a:	00d9      	lsls	r1, r3, #3
 800747c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007480:	00d0      	lsls	r0, r2, #3
 8007482:	4602      	mov	r2, r0
 8007484:	460b      	mov	r3, r1
 8007486:	eb12 0804 	adds.w	r8, r2, r4
 800748a:	eb43 0905 	adc.w	r9, r3, r5
 800748e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	4618      	mov	r0, r3
 8007494:	f04f 0100 	mov.w	r1, #0
 8007498:	f04f 0200 	mov.w	r2, #0
 800749c:	f04f 0300 	mov.w	r3, #0
 80074a0:	008b      	lsls	r3, r1, #2
 80074a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80074a6:	0082      	lsls	r2, r0, #2
 80074a8:	4640      	mov	r0, r8
 80074aa:	4649      	mov	r1, r9
 80074ac:	f7f8 fe8c 	bl	80001c8 <__aeabi_uldivmod>
 80074b0:	4602      	mov	r2, r0
 80074b2:	460b      	mov	r3, r1
 80074b4:	4b49      	ldr	r3, [pc, #292]	; (80075dc <UART_SetConfig+0x38c>)
 80074b6:	fba3 2302 	umull	r2, r3, r3, r2
 80074ba:	095b      	lsrs	r3, r3, #5
 80074bc:	011e      	lsls	r6, r3, #4
 80074be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074c0:	4618      	mov	r0, r3
 80074c2:	f04f 0100 	mov.w	r1, #0
 80074c6:	4602      	mov	r2, r0
 80074c8:	460b      	mov	r3, r1
 80074ca:	1894      	adds	r4, r2, r2
 80074cc:	60bc      	str	r4, [r7, #8]
 80074ce:	415b      	adcs	r3, r3
 80074d0:	60fb      	str	r3, [r7, #12]
 80074d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80074d6:	1812      	adds	r2, r2, r0
 80074d8:	eb41 0303 	adc.w	r3, r1, r3
 80074dc:	f04f 0400 	mov.w	r4, #0
 80074e0:	f04f 0500 	mov.w	r5, #0
 80074e4:	00dd      	lsls	r5, r3, #3
 80074e6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80074ea:	00d4      	lsls	r4, r2, #3
 80074ec:	4622      	mov	r2, r4
 80074ee:	462b      	mov	r3, r5
 80074f0:	1814      	adds	r4, r2, r0
 80074f2:	64bc      	str	r4, [r7, #72]	; 0x48
 80074f4:	414b      	adcs	r3, r1
 80074f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	4618      	mov	r0, r3
 80074fe:	f04f 0100 	mov.w	r1, #0
 8007502:	f04f 0200 	mov.w	r2, #0
 8007506:	f04f 0300 	mov.w	r3, #0
 800750a:	008b      	lsls	r3, r1, #2
 800750c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007510:	0082      	lsls	r2, r0, #2
 8007512:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007516:	f7f8 fe57 	bl	80001c8 <__aeabi_uldivmod>
 800751a:	4602      	mov	r2, r0
 800751c:	460b      	mov	r3, r1
 800751e:	4b2f      	ldr	r3, [pc, #188]	; (80075dc <UART_SetConfig+0x38c>)
 8007520:	fba3 1302 	umull	r1, r3, r3, r2
 8007524:	095b      	lsrs	r3, r3, #5
 8007526:	2164      	movs	r1, #100	; 0x64
 8007528:	fb01 f303 	mul.w	r3, r1, r3
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	011b      	lsls	r3, r3, #4
 8007530:	3332      	adds	r3, #50	; 0x32
 8007532:	4a2a      	ldr	r2, [pc, #168]	; (80075dc <UART_SetConfig+0x38c>)
 8007534:	fba2 2303 	umull	r2, r3, r2, r3
 8007538:	095b      	lsrs	r3, r3, #5
 800753a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800753e:	441e      	add	r6, r3
 8007540:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007542:	4618      	mov	r0, r3
 8007544:	f04f 0100 	mov.w	r1, #0
 8007548:	4602      	mov	r2, r0
 800754a:	460b      	mov	r3, r1
 800754c:	1894      	adds	r4, r2, r2
 800754e:	603c      	str	r4, [r7, #0]
 8007550:	415b      	adcs	r3, r3
 8007552:	607b      	str	r3, [r7, #4]
 8007554:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007558:	1812      	adds	r2, r2, r0
 800755a:	eb41 0303 	adc.w	r3, r1, r3
 800755e:	f04f 0400 	mov.w	r4, #0
 8007562:	f04f 0500 	mov.w	r5, #0
 8007566:	00dd      	lsls	r5, r3, #3
 8007568:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800756c:	00d4      	lsls	r4, r2, #3
 800756e:	4622      	mov	r2, r4
 8007570:	462b      	mov	r3, r5
 8007572:	eb12 0a00 	adds.w	sl, r2, r0
 8007576:	eb43 0b01 	adc.w	fp, r3, r1
 800757a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	4618      	mov	r0, r3
 8007580:	f04f 0100 	mov.w	r1, #0
 8007584:	f04f 0200 	mov.w	r2, #0
 8007588:	f04f 0300 	mov.w	r3, #0
 800758c:	008b      	lsls	r3, r1, #2
 800758e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007592:	0082      	lsls	r2, r0, #2
 8007594:	4650      	mov	r0, sl
 8007596:	4659      	mov	r1, fp
 8007598:	f7f8 fe16 	bl	80001c8 <__aeabi_uldivmod>
 800759c:	4602      	mov	r2, r0
 800759e:	460b      	mov	r3, r1
 80075a0:	4b0e      	ldr	r3, [pc, #56]	; (80075dc <UART_SetConfig+0x38c>)
 80075a2:	fba3 1302 	umull	r1, r3, r3, r2
 80075a6:	095b      	lsrs	r3, r3, #5
 80075a8:	2164      	movs	r1, #100	; 0x64
 80075aa:	fb01 f303 	mul.w	r3, r1, r3
 80075ae:	1ad3      	subs	r3, r2, r3
 80075b0:	011b      	lsls	r3, r3, #4
 80075b2:	3332      	adds	r3, #50	; 0x32
 80075b4:	4a09      	ldr	r2, [pc, #36]	; (80075dc <UART_SetConfig+0x38c>)
 80075b6:	fba2 2303 	umull	r2, r3, r2, r3
 80075ba:	095b      	lsrs	r3, r3, #5
 80075bc:	f003 020f 	and.w	r2, r3, #15
 80075c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4432      	add	r2, r6
 80075c6:	609a      	str	r2, [r3, #8]
}
 80075c8:	bf00      	nop
 80075ca:	377c      	adds	r7, #124	; 0x7c
 80075cc:	46bd      	mov	sp, r7
 80075ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075d2:	bf00      	nop
 80075d4:	40011000 	.word	0x40011000
 80075d8:	40011400 	.word	0x40011400
 80075dc:	51eb851f 	.word	0x51eb851f

080075e0 <__errno>:
 80075e0:	4b01      	ldr	r3, [pc, #4]	; (80075e8 <__errno+0x8>)
 80075e2:	6818      	ldr	r0, [r3, #0]
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop
 80075e8:	200003cc 	.word	0x200003cc

080075ec <__libc_init_array>:
 80075ec:	b570      	push	{r4, r5, r6, lr}
 80075ee:	4d0d      	ldr	r5, [pc, #52]	; (8007624 <__libc_init_array+0x38>)
 80075f0:	4c0d      	ldr	r4, [pc, #52]	; (8007628 <__libc_init_array+0x3c>)
 80075f2:	1b64      	subs	r4, r4, r5
 80075f4:	10a4      	asrs	r4, r4, #2
 80075f6:	2600      	movs	r6, #0
 80075f8:	42a6      	cmp	r6, r4
 80075fa:	d109      	bne.n	8007610 <__libc_init_array+0x24>
 80075fc:	4d0b      	ldr	r5, [pc, #44]	; (800762c <__libc_init_array+0x40>)
 80075fe:	4c0c      	ldr	r4, [pc, #48]	; (8007630 <__libc_init_array+0x44>)
 8007600:	f000 fefc 	bl	80083fc <_init>
 8007604:	1b64      	subs	r4, r4, r5
 8007606:	10a4      	asrs	r4, r4, #2
 8007608:	2600      	movs	r6, #0
 800760a:	42a6      	cmp	r6, r4
 800760c:	d105      	bne.n	800761a <__libc_init_array+0x2e>
 800760e:	bd70      	pop	{r4, r5, r6, pc}
 8007610:	f855 3b04 	ldr.w	r3, [r5], #4
 8007614:	4798      	blx	r3
 8007616:	3601      	adds	r6, #1
 8007618:	e7ee      	b.n	80075f8 <__libc_init_array+0xc>
 800761a:	f855 3b04 	ldr.w	r3, [r5], #4
 800761e:	4798      	blx	r3
 8007620:	3601      	adds	r6, #1
 8007622:	e7f2      	b.n	800760a <__libc_init_array+0x1e>
 8007624:	08008850 	.word	0x08008850
 8007628:	08008850 	.word	0x08008850
 800762c:	08008850 	.word	0x08008850
 8007630:	08008854 	.word	0x08008854

08007634 <memcpy>:
 8007634:	440a      	add	r2, r1
 8007636:	4291      	cmp	r1, r2
 8007638:	f100 33ff 	add.w	r3, r0, #4294967295
 800763c:	d100      	bne.n	8007640 <memcpy+0xc>
 800763e:	4770      	bx	lr
 8007640:	b510      	push	{r4, lr}
 8007642:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007646:	f803 4f01 	strb.w	r4, [r3, #1]!
 800764a:	4291      	cmp	r1, r2
 800764c:	d1f9      	bne.n	8007642 <memcpy+0xe>
 800764e:	bd10      	pop	{r4, pc}

08007650 <memmove>:
 8007650:	4288      	cmp	r0, r1
 8007652:	b510      	push	{r4, lr}
 8007654:	eb01 0402 	add.w	r4, r1, r2
 8007658:	d902      	bls.n	8007660 <memmove+0x10>
 800765a:	4284      	cmp	r4, r0
 800765c:	4623      	mov	r3, r4
 800765e:	d807      	bhi.n	8007670 <memmove+0x20>
 8007660:	1e43      	subs	r3, r0, #1
 8007662:	42a1      	cmp	r1, r4
 8007664:	d008      	beq.n	8007678 <memmove+0x28>
 8007666:	f811 2b01 	ldrb.w	r2, [r1], #1
 800766a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800766e:	e7f8      	b.n	8007662 <memmove+0x12>
 8007670:	4402      	add	r2, r0
 8007672:	4601      	mov	r1, r0
 8007674:	428a      	cmp	r2, r1
 8007676:	d100      	bne.n	800767a <memmove+0x2a>
 8007678:	bd10      	pop	{r4, pc}
 800767a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800767e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007682:	e7f7      	b.n	8007674 <memmove+0x24>

08007684 <memset>:
 8007684:	4402      	add	r2, r0
 8007686:	4603      	mov	r3, r0
 8007688:	4293      	cmp	r3, r2
 800768a:	d100      	bne.n	800768e <memset+0xa>
 800768c:	4770      	bx	lr
 800768e:	f803 1b01 	strb.w	r1, [r3], #1
 8007692:	e7f9      	b.n	8007688 <memset+0x4>

08007694 <sinf>:
 8007694:	ee10 3a10 	vmov	r3, s0
 8007698:	b507      	push	{r0, r1, r2, lr}
 800769a:	4a1d      	ldr	r2, [pc, #116]	; (8007710 <sinf+0x7c>)
 800769c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80076a0:	4293      	cmp	r3, r2
 80076a2:	dc05      	bgt.n	80076b0 <sinf+0x1c>
 80076a4:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8007714 <sinf+0x80>
 80076a8:	2000      	movs	r0, #0
 80076aa:	f000 fd9d 	bl	80081e8 <__kernel_sinf>
 80076ae:	e004      	b.n	80076ba <sinf+0x26>
 80076b0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80076b4:	db04      	blt.n	80076c0 <sinf+0x2c>
 80076b6:	ee30 0a40 	vsub.f32	s0, s0, s0
 80076ba:	b003      	add	sp, #12
 80076bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80076c0:	4668      	mov	r0, sp
 80076c2:	f000 f967 	bl	8007994 <__ieee754_rem_pio2f>
 80076c6:	f000 0003 	and.w	r0, r0, #3
 80076ca:	2801      	cmp	r0, #1
 80076cc:	d008      	beq.n	80076e0 <sinf+0x4c>
 80076ce:	2802      	cmp	r0, #2
 80076d0:	d00d      	beq.n	80076ee <sinf+0x5a>
 80076d2:	b9b0      	cbnz	r0, 8007702 <sinf+0x6e>
 80076d4:	eddd 0a01 	vldr	s1, [sp, #4]
 80076d8:	ed9d 0a00 	vldr	s0, [sp]
 80076dc:	2001      	movs	r0, #1
 80076de:	e7e4      	b.n	80076aa <sinf+0x16>
 80076e0:	eddd 0a01 	vldr	s1, [sp, #4]
 80076e4:	ed9d 0a00 	vldr	s0, [sp]
 80076e8:	f000 fa94 	bl	8007c14 <__kernel_cosf>
 80076ec:	e7e5      	b.n	80076ba <sinf+0x26>
 80076ee:	eddd 0a01 	vldr	s1, [sp, #4]
 80076f2:	ed9d 0a00 	vldr	s0, [sp]
 80076f6:	2001      	movs	r0, #1
 80076f8:	f000 fd76 	bl	80081e8 <__kernel_sinf>
 80076fc:	eeb1 0a40 	vneg.f32	s0, s0
 8007700:	e7db      	b.n	80076ba <sinf+0x26>
 8007702:	eddd 0a01 	vldr	s1, [sp, #4]
 8007706:	ed9d 0a00 	vldr	s0, [sp]
 800770a:	f000 fa83 	bl	8007c14 <__kernel_cosf>
 800770e:	e7f5      	b.n	80076fc <sinf+0x68>
 8007710:	3f490fd8 	.word	0x3f490fd8
 8007714:	00000000 	.word	0x00000000

08007718 <asinf>:
 8007718:	b508      	push	{r3, lr}
 800771a:	ed2d 8b02 	vpush	{d8}
 800771e:	eeb0 8a40 	vmov.f32	s16, s0
 8007722:	f000 f851 	bl	80077c8 <__ieee754_asinf>
 8007726:	4b13      	ldr	r3, [pc, #76]	; (8007774 <asinf+0x5c>)
 8007728:	f993 3000 	ldrsb.w	r3, [r3]
 800772c:	3301      	adds	r3, #1
 800772e:	eef0 8a40 	vmov.f32	s17, s0
 8007732:	d01a      	beq.n	800776a <asinf+0x52>
 8007734:	eeb4 8a48 	vcmp.f32	s16, s16
 8007738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800773c:	d615      	bvs.n	800776a <asinf+0x52>
 800773e:	eeb0 0a48 	vmov.f32	s0, s16
 8007742:	f000 fd99 	bl	8008278 <fabsf>
 8007746:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800774a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800774e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007752:	dd0a      	ble.n	800776a <asinf+0x52>
 8007754:	f7ff ff44 	bl	80075e0 <__errno>
 8007758:	ecbd 8b02 	vpop	{d8}
 800775c:	2321      	movs	r3, #33	; 0x21
 800775e:	6003      	str	r3, [r0, #0]
 8007760:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007764:	4804      	ldr	r0, [pc, #16]	; (8007778 <asinf+0x60>)
 8007766:	f000 bdd1 	b.w	800830c <nanf>
 800776a:	eeb0 0a68 	vmov.f32	s0, s17
 800776e:	ecbd 8b02 	vpop	{d8}
 8007772:	bd08      	pop	{r3, pc}
 8007774:	20000430 	.word	0x20000430
 8007778:	08008474 	.word	0x08008474

0800777c <sqrtf>:
 800777c:	b508      	push	{r3, lr}
 800777e:	ed2d 8b02 	vpush	{d8}
 8007782:	eeb0 8a40 	vmov.f32	s16, s0
 8007786:	f000 fa41 	bl	8007c0c <__ieee754_sqrtf>
 800778a:	4b0d      	ldr	r3, [pc, #52]	; (80077c0 <sqrtf+0x44>)
 800778c:	f993 3000 	ldrsb.w	r3, [r3]
 8007790:	3301      	adds	r3, #1
 8007792:	d011      	beq.n	80077b8 <sqrtf+0x3c>
 8007794:	eeb4 8a48 	vcmp.f32	s16, s16
 8007798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800779c:	d60c      	bvs.n	80077b8 <sqrtf+0x3c>
 800779e:	eddf 8a09 	vldr	s17, [pc, #36]	; 80077c4 <sqrtf+0x48>
 80077a2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80077a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077aa:	d505      	bpl.n	80077b8 <sqrtf+0x3c>
 80077ac:	f7ff ff18 	bl	80075e0 <__errno>
 80077b0:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80077b4:	2321      	movs	r3, #33	; 0x21
 80077b6:	6003      	str	r3, [r0, #0]
 80077b8:	ecbd 8b02 	vpop	{d8}
 80077bc:	bd08      	pop	{r3, pc}
 80077be:	bf00      	nop
 80077c0:	20000430 	.word	0x20000430
 80077c4:	00000000 	.word	0x00000000

080077c8 <__ieee754_asinf>:
 80077c8:	b538      	push	{r3, r4, r5, lr}
 80077ca:	ee10 5a10 	vmov	r5, s0
 80077ce:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80077d2:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80077d6:	ed2d 8b04 	vpush	{d8-d9}
 80077da:	d10c      	bne.n	80077f6 <__ieee754_asinf+0x2e>
 80077dc:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8007954 <__ieee754_asinf+0x18c>
 80077e0:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8007958 <__ieee754_asinf+0x190>
 80077e4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80077e8:	eee0 7a07 	vfma.f32	s15, s0, s14
 80077ec:	eeb0 0a67 	vmov.f32	s0, s15
 80077f0:	ecbd 8b04 	vpop	{d8-d9}
 80077f4:	bd38      	pop	{r3, r4, r5, pc}
 80077f6:	dd04      	ble.n	8007802 <__ieee754_asinf+0x3a>
 80077f8:	ee70 7a40 	vsub.f32	s15, s0, s0
 80077fc:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8007800:	e7f6      	b.n	80077f0 <__ieee754_asinf+0x28>
 8007802:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8007806:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800780a:	da0b      	bge.n	8007824 <__ieee754_asinf+0x5c>
 800780c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8007810:	da52      	bge.n	80078b8 <__ieee754_asinf+0xf0>
 8007812:	eddf 7a52 	vldr	s15, [pc, #328]	; 800795c <__ieee754_asinf+0x194>
 8007816:	ee70 7a27 	vadd.f32	s15, s0, s15
 800781a:	eef4 7ae8 	vcmpe.f32	s15, s17
 800781e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007822:	dce5      	bgt.n	80077f0 <__ieee754_asinf+0x28>
 8007824:	f000 fd28 	bl	8008278 <fabsf>
 8007828:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800782c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8007830:	ee20 8a08 	vmul.f32	s16, s0, s16
 8007834:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8007960 <__ieee754_asinf+0x198>
 8007838:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8007964 <__ieee754_asinf+0x19c>
 800783c:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8007968 <__ieee754_asinf+0x1a0>
 8007840:	eea8 7a27 	vfma.f32	s14, s16, s15
 8007844:	eddf 7a49 	vldr	s15, [pc, #292]	; 800796c <__ieee754_asinf+0x1a4>
 8007848:	eee7 7a08 	vfma.f32	s15, s14, s16
 800784c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8007970 <__ieee754_asinf+0x1a8>
 8007850:	eea7 7a88 	vfma.f32	s14, s15, s16
 8007854:	eddf 7a47 	vldr	s15, [pc, #284]	; 8007974 <__ieee754_asinf+0x1ac>
 8007858:	eee7 7a08 	vfma.f32	s15, s14, s16
 800785c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8007978 <__ieee754_asinf+0x1b0>
 8007860:	eea7 9a88 	vfma.f32	s18, s15, s16
 8007864:	eddf 7a45 	vldr	s15, [pc, #276]	; 800797c <__ieee754_asinf+0x1b4>
 8007868:	eee8 7a07 	vfma.f32	s15, s16, s14
 800786c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8007980 <__ieee754_asinf+0x1b8>
 8007870:	eea7 7a88 	vfma.f32	s14, s15, s16
 8007874:	eddf 7a43 	vldr	s15, [pc, #268]	; 8007984 <__ieee754_asinf+0x1bc>
 8007878:	eee7 7a08 	vfma.f32	s15, s14, s16
 800787c:	eeb0 0a48 	vmov.f32	s0, s16
 8007880:	eee7 8a88 	vfma.f32	s17, s15, s16
 8007884:	f000 f9c2 	bl	8007c0c <__ieee754_sqrtf>
 8007888:	4b3f      	ldr	r3, [pc, #252]	; (8007988 <__ieee754_asinf+0x1c0>)
 800788a:	ee29 9a08 	vmul.f32	s18, s18, s16
 800788e:	429c      	cmp	r4, r3
 8007890:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8007894:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007898:	dd3d      	ble.n	8007916 <__ieee754_asinf+0x14e>
 800789a:	eea0 0a06 	vfma.f32	s0, s0, s12
 800789e:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800798c <__ieee754_asinf+0x1c4>
 80078a2:	eee0 7a26 	vfma.f32	s15, s0, s13
 80078a6:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8007958 <__ieee754_asinf+0x190>
 80078aa:	ee30 0a67 	vsub.f32	s0, s0, s15
 80078ae:	2d00      	cmp	r5, #0
 80078b0:	bfd8      	it	le
 80078b2:	eeb1 0a40 	vnegle.f32	s0, s0
 80078b6:	e79b      	b.n	80077f0 <__ieee754_asinf+0x28>
 80078b8:	ee60 7a00 	vmul.f32	s15, s0, s0
 80078bc:	eddf 6a28 	vldr	s13, [pc, #160]	; 8007960 <__ieee754_asinf+0x198>
 80078c0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8007964 <__ieee754_asinf+0x19c>
 80078c4:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8007978 <__ieee754_asinf+0x1b0>
 80078c8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80078cc:	eddf 6a27 	vldr	s13, [pc, #156]	; 800796c <__ieee754_asinf+0x1a4>
 80078d0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80078d4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8007970 <__ieee754_asinf+0x1a8>
 80078d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80078dc:	eddf 6a25 	vldr	s13, [pc, #148]	; 8007974 <__ieee754_asinf+0x1ac>
 80078e0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80078e4:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8007968 <__ieee754_asinf+0x1a0>
 80078e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80078ec:	eddf 6a23 	vldr	s13, [pc, #140]	; 800797c <__ieee754_asinf+0x1b4>
 80078f0:	eee7 6a86 	vfma.f32	s13, s15, s12
 80078f4:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8007980 <__ieee754_asinf+0x1b8>
 80078f8:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80078fc:	eddf 6a21 	vldr	s13, [pc, #132]	; 8007984 <__ieee754_asinf+0x1bc>
 8007900:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007904:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007908:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800790c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8007910:	eea0 0a27 	vfma.f32	s0, s0, s15
 8007914:	e76c      	b.n	80077f0 <__ieee754_asinf+0x28>
 8007916:	ee10 3a10 	vmov	r3, s0
 800791a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800791e:	f023 030f 	bic.w	r3, r3, #15
 8007922:	ee07 3a10 	vmov	s14, r3
 8007926:	eea7 8a47 	vfms.f32	s16, s14, s14
 800792a:	ee70 7a07 	vadd.f32	s15, s0, s14
 800792e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007932:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8007936:	eddf 7a07 	vldr	s15, [pc, #28]	; 8007954 <__ieee754_asinf+0x18c>
 800793a:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800793e:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8007942:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8007990 <__ieee754_asinf+0x1c8>
 8007946:	eeb0 6a40 	vmov.f32	s12, s0
 800794a:	eea7 6a66 	vfms.f32	s12, s14, s13
 800794e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007952:	e7aa      	b.n	80078aa <__ieee754_asinf+0xe2>
 8007954:	b33bbd2e 	.word	0xb33bbd2e
 8007958:	3fc90fdb 	.word	0x3fc90fdb
 800795c:	7149f2ca 	.word	0x7149f2ca
 8007960:	3811ef08 	.word	0x3811ef08
 8007964:	3a4f7f04 	.word	0x3a4f7f04
 8007968:	3e2aaaab 	.word	0x3e2aaaab
 800796c:	bd241146 	.word	0xbd241146
 8007970:	3e4e0aa8 	.word	0x3e4e0aa8
 8007974:	bea6b090 	.word	0xbea6b090
 8007978:	3d9dc62e 	.word	0x3d9dc62e
 800797c:	bf303361 	.word	0xbf303361
 8007980:	4001572d 	.word	0x4001572d
 8007984:	c019d139 	.word	0xc019d139
 8007988:	3f799999 	.word	0x3f799999
 800798c:	333bbd2e 	.word	0x333bbd2e
 8007990:	3f490fdb 	.word	0x3f490fdb

08007994 <__ieee754_rem_pio2f>:
 8007994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007996:	ee10 6a10 	vmov	r6, s0
 800799a:	4b8e      	ldr	r3, [pc, #568]	; (8007bd4 <__ieee754_rem_pio2f+0x240>)
 800799c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80079a0:	429d      	cmp	r5, r3
 80079a2:	b087      	sub	sp, #28
 80079a4:	eef0 7a40 	vmov.f32	s15, s0
 80079a8:	4604      	mov	r4, r0
 80079aa:	dc05      	bgt.n	80079b8 <__ieee754_rem_pio2f+0x24>
 80079ac:	2300      	movs	r3, #0
 80079ae:	ed80 0a00 	vstr	s0, [r0]
 80079b2:	6043      	str	r3, [r0, #4]
 80079b4:	2000      	movs	r0, #0
 80079b6:	e01a      	b.n	80079ee <__ieee754_rem_pio2f+0x5a>
 80079b8:	4b87      	ldr	r3, [pc, #540]	; (8007bd8 <__ieee754_rem_pio2f+0x244>)
 80079ba:	429d      	cmp	r5, r3
 80079bc:	dc46      	bgt.n	8007a4c <__ieee754_rem_pio2f+0xb8>
 80079be:	2e00      	cmp	r6, #0
 80079c0:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8007bdc <__ieee754_rem_pio2f+0x248>
 80079c4:	4b86      	ldr	r3, [pc, #536]	; (8007be0 <__ieee754_rem_pio2f+0x24c>)
 80079c6:	f025 050f 	bic.w	r5, r5, #15
 80079ca:	dd1f      	ble.n	8007a0c <__ieee754_rem_pio2f+0x78>
 80079cc:	429d      	cmp	r5, r3
 80079ce:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80079d2:	d00e      	beq.n	80079f2 <__ieee754_rem_pio2f+0x5e>
 80079d4:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8007be4 <__ieee754_rem_pio2f+0x250>
 80079d8:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80079dc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80079e0:	ed80 0a00 	vstr	s0, [r0]
 80079e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80079e8:	2001      	movs	r0, #1
 80079ea:	edc4 7a01 	vstr	s15, [r4, #4]
 80079ee:	b007      	add	sp, #28
 80079f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079f2:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8007be8 <__ieee754_rem_pio2f+0x254>
 80079f6:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8007bec <__ieee754_rem_pio2f+0x258>
 80079fa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80079fe:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8007a02:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007a06:	edc0 6a00 	vstr	s13, [r0]
 8007a0a:	e7eb      	b.n	80079e4 <__ieee754_rem_pio2f+0x50>
 8007a0c:	429d      	cmp	r5, r3
 8007a0e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007a12:	d00e      	beq.n	8007a32 <__ieee754_rem_pio2f+0x9e>
 8007a14:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8007be4 <__ieee754_rem_pio2f+0x250>
 8007a18:	ee37 0a87 	vadd.f32	s0, s15, s14
 8007a1c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007a20:	ed80 0a00 	vstr	s0, [r0]
 8007a24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a28:	f04f 30ff 	mov.w	r0, #4294967295
 8007a2c:	edc4 7a01 	vstr	s15, [r4, #4]
 8007a30:	e7dd      	b.n	80079ee <__ieee754_rem_pio2f+0x5a>
 8007a32:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8007be8 <__ieee754_rem_pio2f+0x254>
 8007a36:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8007bec <__ieee754_rem_pio2f+0x258>
 8007a3a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007a3e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007a42:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007a46:	edc0 6a00 	vstr	s13, [r0]
 8007a4a:	e7eb      	b.n	8007a24 <__ieee754_rem_pio2f+0x90>
 8007a4c:	4b68      	ldr	r3, [pc, #416]	; (8007bf0 <__ieee754_rem_pio2f+0x25c>)
 8007a4e:	429d      	cmp	r5, r3
 8007a50:	dc72      	bgt.n	8007b38 <__ieee754_rem_pio2f+0x1a4>
 8007a52:	f000 fc11 	bl	8008278 <fabsf>
 8007a56:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8007bf4 <__ieee754_rem_pio2f+0x260>
 8007a5a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007a5e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007a62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007a6a:	ee17 0a90 	vmov	r0, s15
 8007a6e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8007bdc <__ieee754_rem_pio2f+0x248>
 8007a72:	eea7 0a67 	vfms.f32	s0, s14, s15
 8007a76:	281f      	cmp	r0, #31
 8007a78:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8007be4 <__ieee754_rem_pio2f+0x250>
 8007a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a80:	eeb1 6a47 	vneg.f32	s12, s14
 8007a84:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007a88:	ee16 2a90 	vmov	r2, s13
 8007a8c:	dc1c      	bgt.n	8007ac8 <__ieee754_rem_pio2f+0x134>
 8007a8e:	495a      	ldr	r1, [pc, #360]	; (8007bf8 <__ieee754_rem_pio2f+0x264>)
 8007a90:	1e47      	subs	r7, r0, #1
 8007a92:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8007a96:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8007a9a:	428b      	cmp	r3, r1
 8007a9c:	d014      	beq.n	8007ac8 <__ieee754_rem_pio2f+0x134>
 8007a9e:	6022      	str	r2, [r4, #0]
 8007aa0:	ed94 7a00 	vldr	s14, [r4]
 8007aa4:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007aa8:	2e00      	cmp	r6, #0
 8007aaa:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007aae:	ed84 0a01 	vstr	s0, [r4, #4]
 8007ab2:	da9c      	bge.n	80079ee <__ieee754_rem_pio2f+0x5a>
 8007ab4:	eeb1 7a47 	vneg.f32	s14, s14
 8007ab8:	eeb1 0a40 	vneg.f32	s0, s0
 8007abc:	ed84 7a00 	vstr	s14, [r4]
 8007ac0:	ed84 0a01 	vstr	s0, [r4, #4]
 8007ac4:	4240      	negs	r0, r0
 8007ac6:	e792      	b.n	80079ee <__ieee754_rem_pio2f+0x5a>
 8007ac8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007acc:	15eb      	asrs	r3, r5, #23
 8007ace:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8007ad2:	2d08      	cmp	r5, #8
 8007ad4:	dde3      	ble.n	8007a9e <__ieee754_rem_pio2f+0x10a>
 8007ad6:	eddf 7a44 	vldr	s15, [pc, #272]	; 8007be8 <__ieee754_rem_pio2f+0x254>
 8007ada:	eef0 6a40 	vmov.f32	s13, s0
 8007ade:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007ae2:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007ae6:	eea6 0a27 	vfma.f32	s0, s12, s15
 8007aea:	eddf 7a40 	vldr	s15, [pc, #256]	; 8007bec <__ieee754_rem_pio2f+0x258>
 8007aee:	ee97 0a27 	vfnms.f32	s0, s14, s15
 8007af2:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8007af6:	eef0 7a40 	vmov.f32	s15, s0
 8007afa:	ee15 2a90 	vmov	r2, s11
 8007afe:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007b02:	1a5b      	subs	r3, r3, r1
 8007b04:	2b19      	cmp	r3, #25
 8007b06:	dc04      	bgt.n	8007b12 <__ieee754_rem_pio2f+0x17e>
 8007b08:	edc4 5a00 	vstr	s11, [r4]
 8007b0c:	eeb0 0a66 	vmov.f32	s0, s13
 8007b10:	e7c6      	b.n	8007aa0 <__ieee754_rem_pio2f+0x10c>
 8007b12:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8007bfc <__ieee754_rem_pio2f+0x268>
 8007b16:	eeb0 0a66 	vmov.f32	s0, s13
 8007b1a:	eea6 0a25 	vfma.f32	s0, s12, s11
 8007b1e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8007b22:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007c00 <__ieee754_rem_pio2f+0x26c>
 8007b26:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007b2a:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8007b2e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007b32:	ed84 7a00 	vstr	s14, [r4]
 8007b36:	e7b3      	b.n	8007aa0 <__ieee754_rem_pio2f+0x10c>
 8007b38:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8007b3c:	db06      	blt.n	8007b4c <__ieee754_rem_pio2f+0x1b8>
 8007b3e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007b42:	edc0 7a01 	vstr	s15, [r0, #4]
 8007b46:	edc0 7a00 	vstr	s15, [r0]
 8007b4a:	e733      	b.n	80079b4 <__ieee754_rem_pio2f+0x20>
 8007b4c:	15ea      	asrs	r2, r5, #23
 8007b4e:	3a86      	subs	r2, #134	; 0x86
 8007b50:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8007b54:	ee07 3a90 	vmov	s15, r3
 8007b58:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007b5c:	eddf 6a29 	vldr	s13, [pc, #164]	; 8007c04 <__ieee754_rem_pio2f+0x270>
 8007b60:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007b64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007b68:	ed8d 7a03 	vstr	s14, [sp, #12]
 8007b6c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007b70:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007b74:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007b78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007b7c:	ed8d 7a04 	vstr	s14, [sp, #16]
 8007b80:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007b84:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b8c:	edcd 7a05 	vstr	s15, [sp, #20]
 8007b90:	d11e      	bne.n	8007bd0 <__ieee754_rem_pio2f+0x23c>
 8007b92:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b9a:	bf14      	ite	ne
 8007b9c:	2302      	movne	r3, #2
 8007b9e:	2301      	moveq	r3, #1
 8007ba0:	4919      	ldr	r1, [pc, #100]	; (8007c08 <__ieee754_rem_pio2f+0x274>)
 8007ba2:	9101      	str	r1, [sp, #4]
 8007ba4:	2102      	movs	r1, #2
 8007ba6:	9100      	str	r1, [sp, #0]
 8007ba8:	a803      	add	r0, sp, #12
 8007baa:	4621      	mov	r1, r4
 8007bac:	f000 f892 	bl	8007cd4 <__kernel_rem_pio2f>
 8007bb0:	2e00      	cmp	r6, #0
 8007bb2:	f6bf af1c 	bge.w	80079ee <__ieee754_rem_pio2f+0x5a>
 8007bb6:	edd4 7a00 	vldr	s15, [r4]
 8007bba:	eef1 7a67 	vneg.f32	s15, s15
 8007bbe:	edc4 7a00 	vstr	s15, [r4]
 8007bc2:	edd4 7a01 	vldr	s15, [r4, #4]
 8007bc6:	eef1 7a67 	vneg.f32	s15, s15
 8007bca:	edc4 7a01 	vstr	s15, [r4, #4]
 8007bce:	e779      	b.n	8007ac4 <__ieee754_rem_pio2f+0x130>
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	e7e5      	b.n	8007ba0 <__ieee754_rem_pio2f+0x20c>
 8007bd4:	3f490fd8 	.word	0x3f490fd8
 8007bd8:	4016cbe3 	.word	0x4016cbe3
 8007bdc:	3fc90f80 	.word	0x3fc90f80
 8007be0:	3fc90fd0 	.word	0x3fc90fd0
 8007be4:	37354443 	.word	0x37354443
 8007be8:	37354400 	.word	0x37354400
 8007bec:	2e85a308 	.word	0x2e85a308
 8007bf0:	43490f80 	.word	0x43490f80
 8007bf4:	3f22f984 	.word	0x3f22f984
 8007bf8:	08008478 	.word	0x08008478
 8007bfc:	2e85a300 	.word	0x2e85a300
 8007c00:	248d3132 	.word	0x248d3132
 8007c04:	43800000 	.word	0x43800000
 8007c08:	080084f8 	.word	0x080084f8

08007c0c <__ieee754_sqrtf>:
 8007c0c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007c10:	4770      	bx	lr
	...

08007c14 <__kernel_cosf>:
 8007c14:	ee10 3a10 	vmov	r3, s0
 8007c18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c1c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007c20:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007c24:	da05      	bge.n	8007c32 <__kernel_cosf+0x1e>
 8007c26:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007c2a:	ee17 2a90 	vmov	r2, s15
 8007c2e:	2a00      	cmp	r2, #0
 8007c30:	d03d      	beq.n	8007cae <__kernel_cosf+0x9a>
 8007c32:	ee60 5a00 	vmul.f32	s11, s0, s0
 8007c36:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007cb4 <__kernel_cosf+0xa0>
 8007c3a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8007cb8 <__kernel_cosf+0xa4>
 8007c3e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8007cbc <__kernel_cosf+0xa8>
 8007c42:	4a1f      	ldr	r2, [pc, #124]	; (8007cc0 <__kernel_cosf+0xac>)
 8007c44:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8007cc4 <__kernel_cosf+0xb0>
 8007c4e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8007c52:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8007cc8 <__kernel_cosf+0xb4>
 8007c56:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8007c5a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8007ccc <__kernel_cosf+0xb8>
 8007c5e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8007c62:	eeb0 7a66 	vmov.f32	s14, s13
 8007c66:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8007c6a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8007c6e:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8007c72:	ee67 6a25 	vmul.f32	s13, s14, s11
 8007c76:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8007c7a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007c7e:	dc04      	bgt.n	8007c8a <__kernel_cosf+0x76>
 8007c80:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007c84:	ee36 0a47 	vsub.f32	s0, s12, s14
 8007c88:	4770      	bx	lr
 8007c8a:	4a11      	ldr	r2, [pc, #68]	; (8007cd0 <__kernel_cosf+0xbc>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	bfda      	itte	le
 8007c90:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8007c94:	ee06 3a90 	vmovle	s13, r3
 8007c98:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8007c9c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007ca0:	ee36 0a66 	vsub.f32	s0, s12, s13
 8007ca4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ca8:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007cac:	4770      	bx	lr
 8007cae:	eeb0 0a46 	vmov.f32	s0, s12
 8007cb2:	4770      	bx	lr
 8007cb4:	ad47d74e 	.word	0xad47d74e
 8007cb8:	310f74f6 	.word	0x310f74f6
 8007cbc:	3d2aaaab 	.word	0x3d2aaaab
 8007cc0:	3e999999 	.word	0x3e999999
 8007cc4:	b493f27c 	.word	0xb493f27c
 8007cc8:	37d00d01 	.word	0x37d00d01
 8007ccc:	bab60b61 	.word	0xbab60b61
 8007cd0:	3f480000 	.word	0x3f480000

08007cd4 <__kernel_rem_pio2f>:
 8007cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cd8:	ed2d 8b04 	vpush	{d8-d9}
 8007cdc:	b0d7      	sub	sp, #348	; 0x15c
 8007cde:	4616      	mov	r6, r2
 8007ce0:	4698      	mov	r8, r3
 8007ce2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8007ce4:	4bbb      	ldr	r3, [pc, #748]	; (8007fd4 <__kernel_rem_pio2f+0x300>)
 8007ce6:	9001      	str	r0, [sp, #4]
 8007ce8:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8007cec:	1d33      	adds	r3, r6, #4
 8007cee:	460d      	mov	r5, r1
 8007cf0:	f108 39ff 	add.w	r9, r8, #4294967295
 8007cf4:	db29      	blt.n	8007d4a <__kernel_rem_pio2f+0x76>
 8007cf6:	1ef1      	subs	r1, r6, #3
 8007cf8:	bf48      	it	mi
 8007cfa:	1d31      	addmi	r1, r6, #4
 8007cfc:	10c9      	asrs	r1, r1, #3
 8007cfe:	1c4c      	adds	r4, r1, #1
 8007d00:	00e3      	lsls	r3, r4, #3
 8007d02:	9302      	str	r3, [sp, #8]
 8007d04:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8007d06:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8007fe4 <__kernel_rem_pio2f+0x310>
 8007d0a:	eba1 0009 	sub.w	r0, r1, r9
 8007d0e:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 8007d12:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 8007d16:	eb07 0c09 	add.w	ip, r7, r9
 8007d1a:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8007d1e:	2300      	movs	r3, #0
 8007d20:	4563      	cmp	r3, ip
 8007d22:	dd14      	ble.n	8007d4e <__kernel_rem_pio2f+0x7a>
 8007d24:	ab1a      	add	r3, sp, #104	; 0x68
 8007d26:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8007d2a:	46cc      	mov	ip, r9
 8007d2c:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8007d30:	f1c8 0b01 	rsb	fp, r8, #1
 8007d34:	eb0b 020c 	add.w	r2, fp, ip
 8007d38:	4297      	cmp	r7, r2
 8007d3a:	db27      	blt.n	8007d8c <__kernel_rem_pio2f+0xb8>
 8007d3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007d40:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8007fe4 <__kernel_rem_pio2f+0x310>
 8007d44:	4618      	mov	r0, r3
 8007d46:	2200      	movs	r2, #0
 8007d48:	e016      	b.n	8007d78 <__kernel_rem_pio2f+0xa4>
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	e7d7      	b.n	8007cfe <__kernel_rem_pio2f+0x2a>
 8007d4e:	42d8      	cmn	r0, r3
 8007d50:	bf5d      	ittte	pl
 8007d52:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 8007d56:	ee07 2a90 	vmovpl	s15, r2
 8007d5a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8007d5e:	eef0 7a47 	vmovmi.f32	s15, s14
 8007d62:	ecea 7a01 	vstmia	sl!, {s15}
 8007d66:	3301      	adds	r3, #1
 8007d68:	e7da      	b.n	8007d20 <__kernel_rem_pio2f+0x4c>
 8007d6a:	ecfe 6a01 	vldmia	lr!, {s13}
 8007d6e:	ed90 7a00 	vldr	s14, [r0]
 8007d72:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007d76:	3201      	adds	r2, #1
 8007d78:	454a      	cmp	r2, r9
 8007d7a:	f1a0 0004 	sub.w	r0, r0, #4
 8007d7e:	ddf4      	ble.n	8007d6a <__kernel_rem_pio2f+0x96>
 8007d80:	ecea 7a01 	vstmia	sl!, {s15}
 8007d84:	3304      	adds	r3, #4
 8007d86:	f10c 0c01 	add.w	ip, ip, #1
 8007d8a:	e7d3      	b.n	8007d34 <__kernel_rem_pio2f+0x60>
 8007d8c:	ab06      	add	r3, sp, #24
 8007d8e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8007d92:	9304      	str	r3, [sp, #16]
 8007d94:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8007d96:	eddf 8a92 	vldr	s17, [pc, #584]	; 8007fe0 <__kernel_rem_pio2f+0x30c>
 8007d9a:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8007fdc <__kernel_rem_pio2f+0x308>
 8007d9e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8007da2:	9303      	str	r3, [sp, #12]
 8007da4:	46ba      	mov	sl, r7
 8007da6:	ab56      	add	r3, sp, #344	; 0x158
 8007da8:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8007dac:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8007db0:	ab06      	add	r3, sp, #24
 8007db2:	4618      	mov	r0, r3
 8007db4:	4652      	mov	r2, sl
 8007db6:	2a00      	cmp	r2, #0
 8007db8:	dc51      	bgt.n	8007e5e <__kernel_rem_pio2f+0x18a>
 8007dba:	4620      	mov	r0, r4
 8007dbc:	9305      	str	r3, [sp, #20]
 8007dbe:	f000 faab 	bl	8008318 <scalbnf>
 8007dc2:	eeb0 8a40 	vmov.f32	s16, s0
 8007dc6:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8007dca:	ee28 0a00 	vmul.f32	s0, s16, s0
 8007dce:	f000 fa5b 	bl	8008288 <floorf>
 8007dd2:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8007dd6:	eea0 8a67 	vfms.f32	s16, s0, s15
 8007dda:	2c00      	cmp	r4, #0
 8007ddc:	9b05      	ldr	r3, [sp, #20]
 8007dde:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8007de2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8007de6:	edcd 7a00 	vstr	s15, [sp]
 8007dea:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007dee:	dd4b      	ble.n	8007e88 <__kernel_rem_pio2f+0x1b4>
 8007df0:	f10a 3cff 	add.w	ip, sl, #4294967295
 8007df4:	aa06      	add	r2, sp, #24
 8007df6:	f1c4 0e08 	rsb	lr, r4, #8
 8007dfa:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8007dfe:	ee17 1a90 	vmov	r1, s15
 8007e02:	fa42 f00e 	asr.w	r0, r2, lr
 8007e06:	4401      	add	r1, r0
 8007e08:	9100      	str	r1, [sp, #0]
 8007e0a:	fa00 f00e 	lsl.w	r0, r0, lr
 8007e0e:	a906      	add	r1, sp, #24
 8007e10:	1a12      	subs	r2, r2, r0
 8007e12:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8007e16:	f1c4 0007 	rsb	r0, r4, #7
 8007e1a:	fa42 fb00 	asr.w	fp, r2, r0
 8007e1e:	f1bb 0f00 	cmp.w	fp, #0
 8007e22:	dd43      	ble.n	8007eac <__kernel_rem_pio2f+0x1d8>
 8007e24:	9a00      	ldr	r2, [sp, #0]
 8007e26:	f04f 0e00 	mov.w	lr, #0
 8007e2a:	3201      	adds	r2, #1
 8007e2c:	9200      	str	r2, [sp, #0]
 8007e2e:	4670      	mov	r0, lr
 8007e30:	45f2      	cmp	sl, lr
 8007e32:	dc6c      	bgt.n	8007f0e <__kernel_rem_pio2f+0x23a>
 8007e34:	2c00      	cmp	r4, #0
 8007e36:	dd04      	ble.n	8007e42 <__kernel_rem_pio2f+0x16e>
 8007e38:	2c01      	cmp	r4, #1
 8007e3a:	d079      	beq.n	8007f30 <__kernel_rem_pio2f+0x25c>
 8007e3c:	2c02      	cmp	r4, #2
 8007e3e:	f000 8082 	beq.w	8007f46 <__kernel_rem_pio2f+0x272>
 8007e42:	f1bb 0f02 	cmp.w	fp, #2
 8007e46:	d131      	bne.n	8007eac <__kernel_rem_pio2f+0x1d8>
 8007e48:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007e4c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8007e50:	b360      	cbz	r0, 8007eac <__kernel_rem_pio2f+0x1d8>
 8007e52:	4620      	mov	r0, r4
 8007e54:	f000 fa60 	bl	8008318 <scalbnf>
 8007e58:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007e5c:	e026      	b.n	8007eac <__kernel_rem_pio2f+0x1d8>
 8007e5e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8007e62:	3a01      	subs	r2, #1
 8007e64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e68:	a942      	add	r1, sp, #264	; 0x108
 8007e6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e6e:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8007e72:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8007e76:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007e7a:	eca0 0a01 	vstmia	r0!, {s0}
 8007e7e:	ed9c 0a00 	vldr	s0, [ip]
 8007e82:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007e86:	e796      	b.n	8007db6 <__kernel_rem_pio2f+0xe2>
 8007e88:	d107      	bne.n	8007e9a <__kernel_rem_pio2f+0x1c6>
 8007e8a:	f10a 32ff 	add.w	r2, sl, #4294967295
 8007e8e:	a906      	add	r1, sp, #24
 8007e90:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007e94:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8007e98:	e7c1      	b.n	8007e1e <__kernel_rem_pio2f+0x14a>
 8007e9a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007e9e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ea6:	da2f      	bge.n	8007f08 <__kernel_rem_pio2f+0x234>
 8007ea8:	f04f 0b00 	mov.w	fp, #0
 8007eac:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eb4:	f040 8098 	bne.w	8007fe8 <__kernel_rem_pio2f+0x314>
 8007eb8:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007ebc:	469c      	mov	ip, r3
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	45bc      	cmp	ip, r7
 8007ec2:	da48      	bge.n	8007f56 <__kernel_rem_pio2f+0x282>
 8007ec4:	2a00      	cmp	r2, #0
 8007ec6:	d05f      	beq.n	8007f88 <__kernel_rem_pio2f+0x2b4>
 8007ec8:	aa06      	add	r2, sp, #24
 8007eca:	3c08      	subs	r4, #8
 8007ecc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007ed0:	2900      	cmp	r1, #0
 8007ed2:	d07d      	beq.n	8007fd0 <__kernel_rem_pio2f+0x2fc>
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007eda:	9301      	str	r3, [sp, #4]
 8007edc:	f000 fa1c 	bl	8008318 <scalbnf>
 8007ee0:	9b01      	ldr	r3, [sp, #4]
 8007ee2:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8007fe0 <__kernel_rem_pio2f+0x30c>
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	2900      	cmp	r1, #0
 8007eea:	f280 80af 	bge.w	800804c <__kernel_rem_pio2f+0x378>
 8007eee:	4618      	mov	r0, r3
 8007ef0:	2400      	movs	r4, #0
 8007ef2:	2800      	cmp	r0, #0
 8007ef4:	f2c0 80d0 	blt.w	8008098 <__kernel_rem_pio2f+0x3c4>
 8007ef8:	a942      	add	r1, sp, #264	; 0x108
 8007efa:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8007efe:	4a36      	ldr	r2, [pc, #216]	; (8007fd8 <__kernel_rem_pio2f+0x304>)
 8007f00:	eddf 7a38 	vldr	s15, [pc, #224]	; 8007fe4 <__kernel_rem_pio2f+0x310>
 8007f04:	2100      	movs	r1, #0
 8007f06:	e0bb      	b.n	8008080 <__kernel_rem_pio2f+0x3ac>
 8007f08:	f04f 0b02 	mov.w	fp, #2
 8007f0c:	e78a      	b.n	8007e24 <__kernel_rem_pio2f+0x150>
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	b948      	cbnz	r0, 8007f26 <__kernel_rem_pio2f+0x252>
 8007f12:	b11a      	cbz	r2, 8007f1c <__kernel_rem_pio2f+0x248>
 8007f14:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8007f18:	601a      	str	r2, [r3, #0]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f10e 0e01 	add.w	lr, lr, #1
 8007f20:	3304      	adds	r3, #4
 8007f22:	4610      	mov	r0, r2
 8007f24:	e784      	b.n	8007e30 <__kernel_rem_pio2f+0x15c>
 8007f26:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8007f2a:	601a      	str	r2, [r3, #0]
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	e7f5      	b.n	8007f1c <__kernel_rem_pio2f+0x248>
 8007f30:	f10a 3cff 	add.w	ip, sl, #4294967295
 8007f34:	ab06      	add	r3, sp, #24
 8007f36:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8007f3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f3e:	aa06      	add	r2, sp, #24
 8007f40:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8007f44:	e77d      	b.n	8007e42 <__kernel_rem_pio2f+0x16e>
 8007f46:	f10a 3cff 	add.w	ip, sl, #4294967295
 8007f4a:	ab06      	add	r3, sp, #24
 8007f4c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8007f50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f54:	e7f3      	b.n	8007f3e <__kernel_rem_pio2f+0x26a>
 8007f56:	a906      	add	r1, sp, #24
 8007f58:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8007f5c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007f60:	4302      	orrs	r2, r0
 8007f62:	e7ad      	b.n	8007ec0 <__kernel_rem_pio2f+0x1ec>
 8007f64:	3001      	adds	r0, #1
 8007f66:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007f6a:	2a00      	cmp	r2, #0
 8007f6c:	d0fa      	beq.n	8007f64 <__kernel_rem_pio2f+0x290>
 8007f6e:	a91a      	add	r1, sp, #104	; 0x68
 8007f70:	eb0a 0208 	add.w	r2, sl, r8
 8007f74:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8007f78:	f10a 0301 	add.w	r3, sl, #1
 8007f7c:	eb0a 0100 	add.w	r1, sl, r0
 8007f80:	4299      	cmp	r1, r3
 8007f82:	da04      	bge.n	8007f8e <__kernel_rem_pio2f+0x2ba>
 8007f84:	468a      	mov	sl, r1
 8007f86:	e70e      	b.n	8007da6 <__kernel_rem_pio2f+0xd2>
 8007f88:	9b04      	ldr	r3, [sp, #16]
 8007f8a:	2001      	movs	r0, #1
 8007f8c:	e7eb      	b.n	8007f66 <__kernel_rem_pio2f+0x292>
 8007f8e:	9803      	ldr	r0, [sp, #12]
 8007f90:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007f94:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8007f98:	9000      	str	r0, [sp, #0]
 8007f9a:	ee07 0a90 	vmov	s15, r0
 8007f9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007fa2:	2000      	movs	r0, #0
 8007fa4:	ece2 7a01 	vstmia	r2!, {s15}
 8007fa8:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8007fe4 <__kernel_rem_pio2f+0x310>
 8007fac:	4696      	mov	lr, r2
 8007fae:	4548      	cmp	r0, r9
 8007fb0:	dd06      	ble.n	8007fc0 <__kernel_rem_pio2f+0x2ec>
 8007fb2:	a842      	add	r0, sp, #264	; 0x108
 8007fb4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007fb8:	edc0 7a00 	vstr	s15, [r0]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	e7df      	b.n	8007f80 <__kernel_rem_pio2f+0x2ac>
 8007fc0:	ecfc 6a01 	vldmia	ip!, {s13}
 8007fc4:	ed3e 7a01 	vldmdb	lr!, {s14}
 8007fc8:	3001      	adds	r0, #1
 8007fca:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007fce:	e7ee      	b.n	8007fae <__kernel_rem_pio2f+0x2da>
 8007fd0:	3b01      	subs	r3, #1
 8007fd2:	e779      	b.n	8007ec8 <__kernel_rem_pio2f+0x1f4>
 8007fd4:	0800883c 	.word	0x0800883c
 8007fd8:	08008810 	.word	0x08008810
 8007fdc:	43800000 	.word	0x43800000
 8007fe0:	3b800000 	.word	0x3b800000
 8007fe4:	00000000 	.word	0x00000000
 8007fe8:	9b02      	ldr	r3, [sp, #8]
 8007fea:	eeb0 0a48 	vmov.f32	s0, s16
 8007fee:	1b98      	subs	r0, r3, r6
 8007ff0:	f000 f992 	bl	8008318 <scalbnf>
 8007ff4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8007fdc <__kernel_rem_pio2f+0x308>
 8007ff8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8007ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008000:	db1b      	blt.n	800803a <__kernel_rem_pio2f+0x366>
 8008002:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8007fe0 <__kernel_rem_pio2f+0x30c>
 8008006:	ee60 7a27 	vmul.f32	s15, s0, s15
 800800a:	aa06      	add	r2, sp, #24
 800800c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008010:	a906      	add	r1, sp, #24
 8008012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008016:	3408      	adds	r4, #8
 8008018:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800801c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008020:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008024:	ee10 3a10 	vmov	r3, s0
 8008028:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800802c:	ee17 2a90 	vmov	r2, s15
 8008030:	f10a 0301 	add.w	r3, sl, #1
 8008034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008038:	e74c      	b.n	8007ed4 <__kernel_rem_pio2f+0x200>
 800803a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800803e:	aa06      	add	r2, sp, #24
 8008040:	ee10 3a10 	vmov	r3, s0
 8008044:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8008048:	4653      	mov	r3, sl
 800804a:	e743      	b.n	8007ed4 <__kernel_rem_pio2f+0x200>
 800804c:	aa42      	add	r2, sp, #264	; 0x108
 800804e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8008052:	aa06      	add	r2, sp, #24
 8008054:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008058:	9201      	str	r2, [sp, #4]
 800805a:	ee07 2a90 	vmov	s15, r2
 800805e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008062:	3901      	subs	r1, #1
 8008064:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008068:	ee20 0a07 	vmul.f32	s0, s0, s14
 800806c:	edc0 7a00 	vstr	s15, [r0]
 8008070:	e73a      	b.n	8007ee8 <__kernel_rem_pio2f+0x214>
 8008072:	ecf2 6a01 	vldmia	r2!, {s13}
 8008076:	ecb6 7a01 	vldmia	r6!, {s14}
 800807a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800807e:	3101      	adds	r1, #1
 8008080:	42b9      	cmp	r1, r7
 8008082:	dc01      	bgt.n	8008088 <__kernel_rem_pio2f+0x3b4>
 8008084:	428c      	cmp	r4, r1
 8008086:	daf4      	bge.n	8008072 <__kernel_rem_pio2f+0x39e>
 8008088:	aa56      	add	r2, sp, #344	; 0x158
 800808a:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800808e:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8008092:	3801      	subs	r0, #1
 8008094:	3401      	adds	r4, #1
 8008096:	e72c      	b.n	8007ef2 <__kernel_rem_pio2f+0x21e>
 8008098:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800809a:	2a02      	cmp	r2, #2
 800809c:	dc0a      	bgt.n	80080b4 <__kernel_rem_pio2f+0x3e0>
 800809e:	2a00      	cmp	r2, #0
 80080a0:	dc61      	bgt.n	8008166 <__kernel_rem_pio2f+0x492>
 80080a2:	d03c      	beq.n	800811e <__kernel_rem_pio2f+0x44a>
 80080a4:	9b00      	ldr	r3, [sp, #0]
 80080a6:	f003 0007 	and.w	r0, r3, #7
 80080aa:	b057      	add	sp, #348	; 0x15c
 80080ac:	ecbd 8b04 	vpop	{d8-d9}
 80080b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080b4:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80080b6:	2a03      	cmp	r2, #3
 80080b8:	d1f4      	bne.n	80080a4 <__kernel_rem_pio2f+0x3d0>
 80080ba:	aa2e      	add	r2, sp, #184	; 0xb8
 80080bc:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80080c0:	4608      	mov	r0, r1
 80080c2:	461c      	mov	r4, r3
 80080c4:	2c00      	cmp	r4, #0
 80080c6:	f1a0 0004 	sub.w	r0, r0, #4
 80080ca:	dc59      	bgt.n	8008180 <__kernel_rem_pio2f+0x4ac>
 80080cc:	4618      	mov	r0, r3
 80080ce:	2801      	cmp	r0, #1
 80080d0:	f1a1 0104 	sub.w	r1, r1, #4
 80080d4:	dc64      	bgt.n	80081a0 <__kernel_rem_pio2f+0x4cc>
 80080d6:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 8007fe4 <__kernel_rem_pio2f+0x310>
 80080da:	2b01      	cmp	r3, #1
 80080dc:	dc70      	bgt.n	80081c0 <__kernel_rem_pio2f+0x4ec>
 80080de:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80080e2:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80080e6:	f1bb 0f00 	cmp.w	fp, #0
 80080ea:	d172      	bne.n	80081d2 <__kernel_rem_pio2f+0x4fe>
 80080ec:	edc5 6a00 	vstr	s13, [r5]
 80080f0:	ed85 7a01 	vstr	s14, [r5, #4]
 80080f4:	edc5 7a02 	vstr	s15, [r5, #8]
 80080f8:	e7d4      	b.n	80080a4 <__kernel_rem_pio2f+0x3d0>
 80080fa:	aa2e      	add	r2, sp, #184	; 0xb8
 80080fc:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8008100:	ed91 7a00 	vldr	s14, [r1]
 8008104:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008108:	3b01      	subs	r3, #1
 800810a:	2b00      	cmp	r3, #0
 800810c:	daf5      	bge.n	80080fa <__kernel_rem_pio2f+0x426>
 800810e:	f1bb 0f00 	cmp.w	fp, #0
 8008112:	d001      	beq.n	8008118 <__kernel_rem_pio2f+0x444>
 8008114:	eef1 7a67 	vneg.f32	s15, s15
 8008118:	edc5 7a00 	vstr	s15, [r5]
 800811c:	e7c2      	b.n	80080a4 <__kernel_rem_pio2f+0x3d0>
 800811e:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8007fe4 <__kernel_rem_pio2f+0x310>
 8008122:	e7f2      	b.n	800810a <__kernel_rem_pio2f+0x436>
 8008124:	aa2e      	add	r2, sp, #184	; 0xb8
 8008126:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800812a:	edd0 7a00 	vldr	s15, [r0]
 800812e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008132:	3901      	subs	r1, #1
 8008134:	2900      	cmp	r1, #0
 8008136:	daf5      	bge.n	8008124 <__kernel_rem_pio2f+0x450>
 8008138:	f1bb 0f00 	cmp.w	fp, #0
 800813c:	d017      	beq.n	800816e <__kernel_rem_pio2f+0x49a>
 800813e:	eef1 7a47 	vneg.f32	s15, s14
 8008142:	edc5 7a00 	vstr	s15, [r5]
 8008146:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800814a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800814e:	a82f      	add	r0, sp, #188	; 0xbc
 8008150:	2101      	movs	r1, #1
 8008152:	428b      	cmp	r3, r1
 8008154:	da0e      	bge.n	8008174 <__kernel_rem_pio2f+0x4a0>
 8008156:	f1bb 0f00 	cmp.w	fp, #0
 800815a:	d001      	beq.n	8008160 <__kernel_rem_pio2f+0x48c>
 800815c:	eef1 7a67 	vneg.f32	s15, s15
 8008160:	edc5 7a01 	vstr	s15, [r5, #4]
 8008164:	e79e      	b.n	80080a4 <__kernel_rem_pio2f+0x3d0>
 8008166:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 8007fe4 <__kernel_rem_pio2f+0x310>
 800816a:	4619      	mov	r1, r3
 800816c:	e7e2      	b.n	8008134 <__kernel_rem_pio2f+0x460>
 800816e:	eef0 7a47 	vmov.f32	s15, s14
 8008172:	e7e6      	b.n	8008142 <__kernel_rem_pio2f+0x46e>
 8008174:	ecb0 7a01 	vldmia	r0!, {s14}
 8008178:	3101      	adds	r1, #1
 800817a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800817e:	e7e8      	b.n	8008152 <__kernel_rem_pio2f+0x47e>
 8008180:	edd0 7a00 	vldr	s15, [r0]
 8008184:	edd0 6a01 	vldr	s13, [r0, #4]
 8008188:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800818c:	3c01      	subs	r4, #1
 800818e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008192:	ed80 7a00 	vstr	s14, [r0]
 8008196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800819a:	edc0 7a01 	vstr	s15, [r0, #4]
 800819e:	e791      	b.n	80080c4 <__kernel_rem_pio2f+0x3f0>
 80081a0:	edd1 7a00 	vldr	s15, [r1]
 80081a4:	edd1 6a01 	vldr	s13, [r1, #4]
 80081a8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80081ac:	3801      	subs	r0, #1
 80081ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80081b2:	ed81 7a00 	vstr	s14, [r1]
 80081b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081ba:	edc1 7a01 	vstr	s15, [r1, #4]
 80081be:	e786      	b.n	80080ce <__kernel_rem_pio2f+0x3fa>
 80081c0:	aa2e      	add	r2, sp, #184	; 0xb8
 80081c2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80081c6:	ed91 7a00 	vldr	s14, [r1]
 80081ca:	3b01      	subs	r3, #1
 80081cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80081d0:	e783      	b.n	80080da <__kernel_rem_pio2f+0x406>
 80081d2:	eef1 6a66 	vneg.f32	s13, s13
 80081d6:	eeb1 7a47 	vneg.f32	s14, s14
 80081da:	edc5 6a00 	vstr	s13, [r5]
 80081de:	ed85 7a01 	vstr	s14, [r5, #4]
 80081e2:	eef1 7a67 	vneg.f32	s15, s15
 80081e6:	e785      	b.n	80080f4 <__kernel_rem_pio2f+0x420>

080081e8 <__kernel_sinf>:
 80081e8:	ee10 3a10 	vmov	r3, s0
 80081ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80081f0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80081f4:	da04      	bge.n	8008200 <__kernel_sinf+0x18>
 80081f6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80081fa:	ee17 3a90 	vmov	r3, s15
 80081fe:	b35b      	cbz	r3, 8008258 <__kernel_sinf+0x70>
 8008200:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008204:	eddf 7a15 	vldr	s15, [pc, #84]	; 800825c <__kernel_sinf+0x74>
 8008208:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8008260 <__kernel_sinf+0x78>
 800820c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008210:	eddf 7a14 	vldr	s15, [pc, #80]	; 8008264 <__kernel_sinf+0x7c>
 8008214:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008218:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8008268 <__kernel_sinf+0x80>
 800821c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008220:	eddf 7a12 	vldr	s15, [pc, #72]	; 800826c <__kernel_sinf+0x84>
 8008224:	ee60 6a07 	vmul.f32	s13, s0, s14
 8008228:	eee6 7a07 	vfma.f32	s15, s12, s14
 800822c:	b930      	cbnz	r0, 800823c <__kernel_sinf+0x54>
 800822e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8008270 <__kernel_sinf+0x88>
 8008232:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008236:	eea6 0a26 	vfma.f32	s0, s12, s13
 800823a:	4770      	bx	lr
 800823c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008240:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008244:	eee0 7a86 	vfma.f32	s15, s1, s12
 8008248:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800824c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8008274 <__kernel_sinf+0x8c>
 8008250:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8008254:	ee30 0a60 	vsub.f32	s0, s0, s1
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	2f2ec9d3 	.word	0x2f2ec9d3
 8008260:	b2d72f34 	.word	0xb2d72f34
 8008264:	3638ef1b 	.word	0x3638ef1b
 8008268:	b9500d01 	.word	0xb9500d01
 800826c:	3c088889 	.word	0x3c088889
 8008270:	be2aaaab 	.word	0xbe2aaaab
 8008274:	3e2aaaab 	.word	0x3e2aaaab

08008278 <fabsf>:
 8008278:	ee10 3a10 	vmov	r3, s0
 800827c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008280:	ee00 3a10 	vmov	s0, r3
 8008284:	4770      	bx	lr
	...

08008288 <floorf>:
 8008288:	ee10 3a10 	vmov	r3, s0
 800828c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008290:	3a7f      	subs	r2, #127	; 0x7f
 8008292:	2a16      	cmp	r2, #22
 8008294:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008298:	dc2a      	bgt.n	80082f0 <floorf+0x68>
 800829a:	2a00      	cmp	r2, #0
 800829c:	da11      	bge.n	80082c2 <floorf+0x3a>
 800829e:	eddf 7a18 	vldr	s15, [pc, #96]	; 8008300 <floorf+0x78>
 80082a2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80082a6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80082aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082ae:	dd05      	ble.n	80082bc <floorf+0x34>
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	da23      	bge.n	80082fc <floorf+0x74>
 80082b4:	4a13      	ldr	r2, [pc, #76]	; (8008304 <floorf+0x7c>)
 80082b6:	2900      	cmp	r1, #0
 80082b8:	bf18      	it	ne
 80082ba:	4613      	movne	r3, r2
 80082bc:	ee00 3a10 	vmov	s0, r3
 80082c0:	4770      	bx	lr
 80082c2:	4911      	ldr	r1, [pc, #68]	; (8008308 <floorf+0x80>)
 80082c4:	4111      	asrs	r1, r2
 80082c6:	420b      	tst	r3, r1
 80082c8:	d0fa      	beq.n	80082c0 <floorf+0x38>
 80082ca:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8008300 <floorf+0x78>
 80082ce:	ee30 0a27 	vadd.f32	s0, s0, s15
 80082d2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80082d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082da:	ddef      	ble.n	80082bc <floorf+0x34>
 80082dc:	2b00      	cmp	r3, #0
 80082de:	bfbe      	ittt	lt
 80082e0:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80082e4:	fa40 f202 	asrlt.w	r2, r0, r2
 80082e8:	189b      	addlt	r3, r3, r2
 80082ea:	ea23 0301 	bic.w	r3, r3, r1
 80082ee:	e7e5      	b.n	80082bc <floorf+0x34>
 80082f0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80082f4:	d3e4      	bcc.n	80082c0 <floorf+0x38>
 80082f6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80082fa:	4770      	bx	lr
 80082fc:	2300      	movs	r3, #0
 80082fe:	e7dd      	b.n	80082bc <floorf+0x34>
 8008300:	7149f2ca 	.word	0x7149f2ca
 8008304:	bf800000 	.word	0xbf800000
 8008308:	007fffff 	.word	0x007fffff

0800830c <nanf>:
 800830c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008314 <nanf+0x8>
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop
 8008314:	7fc00000 	.word	0x7fc00000

08008318 <scalbnf>:
 8008318:	ee10 3a10 	vmov	r3, s0
 800831c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8008320:	d025      	beq.n	800836e <scalbnf+0x56>
 8008322:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008326:	d302      	bcc.n	800832e <scalbnf+0x16>
 8008328:	ee30 0a00 	vadd.f32	s0, s0, s0
 800832c:	4770      	bx	lr
 800832e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8008332:	d122      	bne.n	800837a <scalbnf+0x62>
 8008334:	4b2a      	ldr	r3, [pc, #168]	; (80083e0 <scalbnf+0xc8>)
 8008336:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80083e4 <scalbnf+0xcc>
 800833a:	4298      	cmp	r0, r3
 800833c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008340:	db16      	blt.n	8008370 <scalbnf+0x58>
 8008342:	ee10 3a10 	vmov	r3, s0
 8008346:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800834a:	3a19      	subs	r2, #25
 800834c:	4402      	add	r2, r0
 800834e:	2afe      	cmp	r2, #254	; 0xfe
 8008350:	dd15      	ble.n	800837e <scalbnf+0x66>
 8008352:	ee10 3a10 	vmov	r3, s0
 8008356:	eddf 7a24 	vldr	s15, [pc, #144]	; 80083e8 <scalbnf+0xd0>
 800835a:	eddf 6a24 	vldr	s13, [pc, #144]	; 80083ec <scalbnf+0xd4>
 800835e:	2b00      	cmp	r3, #0
 8008360:	eeb0 7a67 	vmov.f32	s14, s15
 8008364:	bfb8      	it	lt
 8008366:	eef0 7a66 	vmovlt.f32	s15, s13
 800836a:	ee27 0a27 	vmul.f32	s0, s14, s15
 800836e:	4770      	bx	lr
 8008370:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80083f0 <scalbnf+0xd8>
 8008374:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008378:	4770      	bx	lr
 800837a:	0dd2      	lsrs	r2, r2, #23
 800837c:	e7e6      	b.n	800834c <scalbnf+0x34>
 800837e:	2a00      	cmp	r2, #0
 8008380:	dd06      	ble.n	8008390 <scalbnf+0x78>
 8008382:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008386:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800838a:	ee00 3a10 	vmov	s0, r3
 800838e:	4770      	bx	lr
 8008390:	f112 0f16 	cmn.w	r2, #22
 8008394:	da1a      	bge.n	80083cc <scalbnf+0xb4>
 8008396:	f24c 3350 	movw	r3, #50000	; 0xc350
 800839a:	4298      	cmp	r0, r3
 800839c:	ee10 3a10 	vmov	r3, s0
 80083a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083a4:	dd0a      	ble.n	80083bc <scalbnf+0xa4>
 80083a6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80083e8 <scalbnf+0xd0>
 80083aa:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80083ec <scalbnf+0xd4>
 80083ae:	eef0 7a40 	vmov.f32	s15, s0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	bf18      	it	ne
 80083b6:	eeb0 0a47 	vmovne.f32	s0, s14
 80083ba:	e7db      	b.n	8008374 <scalbnf+0x5c>
 80083bc:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80083f0 <scalbnf+0xd8>
 80083c0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80083f4 <scalbnf+0xdc>
 80083c4:	eef0 7a40 	vmov.f32	s15, s0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	e7f3      	b.n	80083b4 <scalbnf+0x9c>
 80083cc:	3219      	adds	r2, #25
 80083ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80083d2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80083d6:	eddf 7a08 	vldr	s15, [pc, #32]	; 80083f8 <scalbnf+0xe0>
 80083da:	ee07 3a10 	vmov	s14, r3
 80083de:	e7c4      	b.n	800836a <scalbnf+0x52>
 80083e0:	ffff3cb0 	.word	0xffff3cb0
 80083e4:	4c000000 	.word	0x4c000000
 80083e8:	7149f2ca 	.word	0x7149f2ca
 80083ec:	f149f2ca 	.word	0xf149f2ca
 80083f0:	0da24260 	.word	0x0da24260
 80083f4:	8da24260 	.word	0x8da24260
 80083f8:	33000000 	.word	0x33000000

080083fc <_init>:
 80083fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083fe:	bf00      	nop
 8008400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008402:	bc08      	pop	{r3}
 8008404:	469e      	mov	lr, r3
 8008406:	4770      	bx	lr

08008408 <_fini>:
 8008408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800840a:	bf00      	nop
 800840c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800840e:	bc08      	pop	{r3}
 8008410:	469e      	mov	lr, r3
 8008412:	4770      	bx	lr
