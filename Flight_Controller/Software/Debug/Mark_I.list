
Mark_I.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006664  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080067ec  080067ec  000167ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800684c  0800684c  0002038c  2**0
                  CONTENTS
  4 .ARM          00000008  0800684c  0800684c  0001684c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006854  08006854  0002038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006854  08006854  00016854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006858  08006858  00016858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000038c  20000000  0800685c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002038c  2**0
                  CONTENTS
 10 .bss          00000c94  2000038c  2000038c  0002038c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001020  20001020  0002038c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002038c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bb8d  00000000  00000000  000203bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b92  00000000  00000000  0003bf49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a0  00000000  00000000  0003fae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001008  00000000  00000000  00040c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022a2c  00000000  00000000  00041c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018af7  00000000  00000000  000646b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3c69  00000000  00000000  0007d1ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00140e14  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004710  00000000  00000000  00140e68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000038c 	.word	0x2000038c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080067d4 	.word	0x080067d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000390 	.word	0x20000390
 80001c4:	080067d4 	.word	0x080067d4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <DATA_LOGGER_Init>:
/*
 * @brief Declare every data
 * @param mark1_ pointer to a system_t structure
 */
void DATA_LOGGER_Init(system_t * mark1_)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	mark1 = mark1_;
 80004c8:	4a2e      	ldr	r2, [pc, #184]	; (8000584 <DATA_LOGGER_Init+0xc4>)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	6013      	str	r3, [r2, #0]
	/* -------------- Outputs ----------------- */
	DEFINE_DATA(data_id_eMCU_LOAD,
 80004ce:	4b2e      	ldr	r3, [pc, #184]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 80004d0:	2203      	movs	r2, #3
 80004d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80004d6:	4b2b      	ldr	r3, [pc, #172]	; (8000584 <DATA_LOGGER_Init+0xc4>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	461a      	mov	r2, r3
 80004dc:	4b2a      	ldr	r3, [pc, #168]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 80004de:	641a      	str	r2, [r3, #64]	; 0x40
 80004e0:	4b29      	ldr	r3, [pc, #164]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 80004e2:	222a      	movs	r2, #42	; 0x2a
 80004e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80004e8:	4b27      	ldr	r3, [pc, #156]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 80004ea:	4a28      	ldr	r2, [pc, #160]	; (800058c <DATA_LOGGER_Init+0xcc>)
 80004ec:	649a      	str	r2, [r3, #72]	; 0x48
 80004ee:	4b26      	ldr	r3, [pc, #152]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 80004f0:	2208      	movs	r2, #8
 80004f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 80004f6:	4b24      	ldr	r3, [pc, #144]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				(void*)&mark1->software.cpu_load,
				data_format_e16B_FLOAT_2D,
				"Mcu Load",
				use_format_eAS_OUTPUT);
	/* -------------- Inputs ----------------- */
	DEFINE_DATA(data_id_eCONFIG_REQUEST,
 80004fe:	4b22      	ldr	r3, [pc, #136]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 8000500:	2200      	movs	r2, #0
 8000502:	721a      	strb	r2, [r3, #8]
 8000504:	4b20      	ldr	r3, [pc, #128]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 8000506:	2200      	movs	r2, #0
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	4b1f      	ldr	r3, [pc, #124]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 800050c:	2200      	movs	r2, #0
 800050e:	725a      	strb	r2, [r3, #9]
 8000510:	4b1d      	ldr	r3, [pc, #116]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 8000512:	4a1f      	ldr	r2, [pc, #124]	; (8000590 <DATA_LOGGER_Init+0xd0>)
 8000514:	60da      	str	r2, [r3, #12]
 8000516:	4b1c      	ldr	r3, [pc, #112]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 8000518:	2212      	movs	r2, #18
 800051a:	741a      	strb	r2, [r3, #16]
 800051c:	4b1a      	ldr	r3, [pc, #104]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 800051e:	2202      	movs	r2, #2
 8000520:	745a      	strb	r2, [r3, #17]
				NULL,
				data_format_e0B_BUTTON,
				"Send Configuration",
				use_format_eAS_INPUT);
	DEFINE_DATA(data_id_eSTART_TRANSFER,
 8000522:	4b19      	ldr	r3, [pc, #100]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 8000524:	2201      	movs	r2, #1
 8000526:	771a      	strb	r2, [r3, #28]
 8000528:	4b17      	ldr	r3, [pc, #92]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 800052a:	2200      	movs	r2, #0
 800052c:	619a      	str	r2, [r3, #24]
 800052e:	4b16      	ldr	r3, [pc, #88]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 8000530:	2200      	movs	r2, #0
 8000532:	775a      	strb	r2, [r3, #29]
 8000534:	4b14      	ldr	r3, [pc, #80]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 8000536:	4a17      	ldr	r2, [pc, #92]	; (8000594 <DATA_LOGGER_Init+0xd4>)
 8000538:	621a      	str	r2, [r3, #32]
 800053a:	4b13      	ldr	r3, [pc, #76]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 800053c:	220e      	movs	r2, #14
 800053e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000542:	4b11      	ldr	r3, [pc, #68]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 8000544:	2202      	movs	r2, #2
 8000546:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				NULL,
				data_format_e0B_BUTTON,
				"Start Transfer",
				use_format_eAS_INPUT);
	DEFINE_DATA(data_id_eSTOP_TRANSFER,
 800054a:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 800054c:	2202      	movs	r2, #2
 800054e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8000552:	4b0d      	ldr	r3, [pc, #52]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 8000554:	2200      	movs	r2, #0
 8000556:	62da      	str	r2, [r3, #44]	; 0x2c
 8000558:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 800055a:	2200      	movs	r2, #0
 800055c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8000560:	4b09      	ldr	r3, [pc, #36]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 8000562:	4a0d      	ldr	r2, [pc, #52]	; (8000598 <DATA_LOGGER_Init+0xd8>)
 8000564:	635a      	str	r2, [r3, #52]	; 0x34
 8000566:	4b08      	ldr	r3, [pc, #32]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 8000568:	220d      	movs	r2, #13
 800056a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800056e:	4b06      	ldr	r3, [pc, #24]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 8000570:	2202      	movs	r2, #2
 8000572:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
				NULL,
				data_format_e0B_BUTTON,
				"Stop Transfer",
				use_format_eAS_INPUT);
}
 8000576:	bf00      	nop
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	200003a8 	.word	0x200003a8
 8000588:	200003ac 	.word	0x200003ac
 800058c:	080067ec 	.word	0x080067ec
 8000590:	080067f8 	.word	0x080067f8
 8000594:	0800680c 	.word	0x0800680c
 8000598:	0800681c 	.word	0x0800681c

0800059c <DATA_LOGGER_Start>:
/*
 * @brief Request to start logging data
 */
void DATA_LOGGER_Start()
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
	start_flag = TRUE;
 80005a0:	4b03      	ldr	r3, [pc, #12]	; (80005b0 <DATA_LOGGER_Start+0x14>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	701a      	strb	r2, [r3, #0]
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	200003fc 	.word	0x200003fc

080005b4 <DATA_LOGGER_Stop>:
/*
 * @brief Request to stop logging data
 */
void DATA_LOGGER_Stop()
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
	stop_flag = TRUE;
 80005b8:	4b03      	ldr	r3, [pc, #12]	; (80005c8 <DATA_LOGGER_Stop+0x14>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	701a      	strb	r2, [r3, #0]
}
 80005be:	bf00      	nop
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	200003fe 	.word	0x200003fe

080005cc <DATA_LOGGER_Main>:

/*
 * @brief Call the state machine and the uart parser
 */
void DATA_LOGGER_Main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	state_machine();
 80005d0:	f000 fab0 	bl	8000b34 <state_machine>
	parse_uart();
 80005d4:	f000 fbb4 	bl	8000d40 <parse_uart>
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}

080005dc <DATA_LOGGER_Reception>:
/*
 * @brief Parse input data
 * @param input_buffer Buffer to use to parse the data
 */
void DATA_LOGGER_Reception(uint8_t * input_buffer)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	uint8_t id = input_buffer[0];
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp_uint_16 = 0 ;
 80005ea:	2300      	movs	r3, #0
 80005ec:	81bb      	strh	r3, [r7, #12]
	int16_t tmp_int_16 = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	817b      	strh	r3, [r7, #10]
	switch(data_list[id].format)
 80005f2:	7bfa      	ldrb	r2, [r7, #15]
 80005f4:	4954      	ldr	r1, [pc, #336]	; (8000748 <DATA_LOGGER_Reception+0x16c>)
 80005f6:	4613      	mov	r3, r2
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	4413      	add	r3, r2
 80005fc:	009b      	lsls	r3, r3, #2
 80005fe:	440b      	add	r3, r1
 8000600:	3309      	adds	r3, #9
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b2d      	cmp	r3, #45	; 0x2d
 8000606:	f200 809a 	bhi.w	800073e <DATA_LOGGER_Reception+0x162>
 800060a:	a201      	add	r2, pc, #4	; (adr r2, 8000610 <DATA_LOGGER_Reception+0x34>)
 800060c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000610:	080006c9 	.word	0x080006c9
 8000614:	0800073f 	.word	0x0800073f
 8000618:	0800073f 	.word	0x0800073f
 800061c:	0800073f 	.word	0x0800073f
 8000620:	0800073f 	.word	0x0800073f
 8000624:	0800073f 	.word	0x0800073f
 8000628:	0800073f 	.word	0x0800073f
 800062c:	0800073f 	.word	0x0800073f
 8000630:	0800073f 	.word	0x0800073f
 8000634:	0800073f 	.word	0x0800073f
 8000638:	0800073f 	.word	0x0800073f
 800063c:	0800073f 	.word	0x0800073f
 8000640:	0800073f 	.word	0x0800073f
 8000644:	0800073f 	.word	0x0800073f
 8000648:	0800073f 	.word	0x0800073f
 800064c:	0800073f 	.word	0x0800073f
 8000650:	0800073f 	.word	0x0800073f
 8000654:	0800073f 	.word	0x0800073f
 8000658:	0800073f 	.word	0x0800073f
 800065c:	0800073f 	.word	0x0800073f
 8000660:	0800073f 	.word	0x0800073f
 8000664:	080006f5 	.word	0x080006f5
 8000668:	0800073f 	.word	0x0800073f
 800066c:	0800073f 	.word	0x0800073f
 8000670:	0800073f 	.word	0x0800073f
 8000674:	0800073f 	.word	0x0800073f
 8000678:	0800073f 	.word	0x0800073f
 800067c:	0800073f 	.word	0x0800073f
 8000680:	0800073f 	.word	0x0800073f
 8000684:	0800073f 	.word	0x0800073f
 8000688:	0800073f 	.word	0x0800073f
 800068c:	0800073f 	.word	0x0800073f
 8000690:	0800073f 	.word	0x0800073f
 8000694:	0800073f 	.word	0x0800073f
 8000698:	0800073f 	.word	0x0800073f
 800069c:	0800073f 	.word	0x0800073f
 80006a0:	0800073f 	.word	0x0800073f
 80006a4:	0800073f 	.word	0x0800073f
 80006a8:	0800073f 	.word	0x0800073f
 80006ac:	0800073f 	.word	0x0800073f
 80006b0:	0800073f 	.word	0x0800073f
 80006b4:	0800073f 	.word	0x0800073f
 80006b8:	0800073f 	.word	0x0800073f
 80006bc:	0800073f 	.word	0x0800073f
 80006c0:	08000721 	.word	0x08000721
 80006c4:	08000703 	.word	0x08000703
	{
		case data_format_e0B_BUTTON:
			/* Link an action to each id */
			switch(id)
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
 80006ca:	2b02      	cmp	r3, #2
 80006cc:	d00d      	beq.n	80006ea <DATA_LOGGER_Reception+0x10e>
 80006ce:	2b02      	cmp	r3, #2
 80006d0:	dc0e      	bgt.n	80006f0 <DATA_LOGGER_Reception+0x114>
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d002      	beq.n	80006dc <DATA_LOGGER_Reception+0x100>
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d004      	beq.n	80006e4 <DATA_LOGGER_Reception+0x108>
			{
				default:
					break;
 80006da:	e009      	b.n	80006f0 <DATA_LOGGER_Reception+0x114>
				case data_id_eCONFIG_REQUEST:
					send_config_flag = TRUE;
 80006dc:	4b1b      	ldr	r3, [pc, #108]	; (800074c <DATA_LOGGER_Reception+0x170>)
 80006de:	2201      	movs	r2, #1
 80006e0:	701a      	strb	r2, [r3, #0]
					break;
 80006e2:	e006      	b.n	80006f2 <DATA_LOGGER_Reception+0x116>
				case data_id_eSTART_TRANSFER:
					DATA_LOGGER_Start();
 80006e4:	f7ff ff5a 	bl	800059c <DATA_LOGGER_Start>
					break;
 80006e8:	e003      	b.n	80006f2 <DATA_LOGGER_Reception+0x116>
				case data_id_eSTOP_TRANSFER:
					DATA_LOGGER_Stop();
 80006ea:	f7ff ff63 	bl	80005b4 <DATA_LOGGER_Stop>
					break;
 80006ee:	e000      	b.n	80006f2 <DATA_LOGGER_Reception+0x116>
					break;
 80006f0:	bf00      	nop
			}
			break;
 80006f2:	e025      	b.n	8000740 <DATA_LOGGER_Reception+0x164>
		case data_format_e8B_FLOAT_0D:
			break;
		case data_format_e8B_FLOAT_1D:
			break;
		case data_format_e8B_PWM:
			tmp_uint_16 = 4*input_buffer[1];
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	3301      	adds	r3, #1
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	81bb      	strh	r3, [r7, #12]
			break;
 8000700:	e01e      	b.n	8000740 <DATA_LOGGER_Reception+0x164>
		case data_format_e16B_INT16:
			tmp_int_16 = (int16_t)input_buffer[1] << 8;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	3301      	adds	r3, #1
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	021b      	lsls	r3, r3, #8
 800070a:	817b      	strh	r3, [r7, #10]
			tmp_int_16 += (int16_t)input_buffer[2];
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	3302      	adds	r3, #2
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	b29a      	uxth	r2, r3
 8000714:	897b      	ldrh	r3, [r7, #10]
 8000716:	4413      	add	r3, r2
 8000718:	b29b      	uxth	r3, r3
 800071a:	817b      	strh	r3, [r7, #10]
			switch(id)
			{
				default:
					break;
 800071c:	bf00      	nop
			}

			break;
 800071e:	e00f      	b.n	8000740 <DATA_LOGGER_Reception+0x164>
		case data_format_e16B_UINT16:
			tmp_uint_16 = (uint16_t)input_buffer[1] << 8;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	3301      	adds	r3, #1
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	b29b      	uxth	r3, r3
 8000728:	021b      	lsls	r3, r3, #8
 800072a:	81bb      	strh	r3, [r7, #12]
			tmp_uint_16 += (uint16_t)input_buffer[2];
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3302      	adds	r3, #2
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	b29a      	uxth	r2, r3
 8000734:	89bb      	ldrh	r3, [r7, #12]
 8000736:	4413      	add	r3, r2
 8000738:	81bb      	strh	r3, [r7, #12]
			switch(id)
			{
				default:
					break;
 800073a:	bf00      	nop
			}

		case data_format_e16B_FLOAT_1D:
			break;
 800073c:	e000      	b.n	8000740 <DATA_LOGGER_Reception+0x164>
		default:
			break;
 800073e:	bf00      	nop

	}
}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	200003ac 	.word	0x200003ac
 800074c:	200003fd 	.word	0x200003fd

08000750 <DATA_LOGGER_Get_Data_Value>:
 * @param id Id of the data
 * @param buffer Buffer array
 * @return Number of bytes written
 */
uint8_t DATA_LOGGER_Get_Data_Value(data_id_e id, uint8_t * buffer)
{
 8000750:	b480      	push	{r7}
 8000752:	b087      	sub	sp, #28
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	73fb      	strb	r3, [r7, #15]

	/* Local temporary variables */
	int16_t tmp_16 = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	82fb      	strh	r3, [r7, #22]
	float tmp_float = 0;
 8000760:	f04f 0300 	mov.w	r3, #0
 8000764:	613b      	str	r3, [r7, #16]

	/* First byte is reserved for the id */
	buffer[0] = id ;
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	7bfa      	ldrb	r2, [r7, #15]
 800076a:	701a      	strb	r2, [r3, #0]
	switch(data_list[id].format)
 800076c:	7bfa      	ldrb	r2, [r7, #15]
 800076e:	498f      	ldr	r1, [pc, #572]	; (80009ac <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000770:	4613      	mov	r3, r2
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	4413      	add	r3, r2
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	440b      	add	r3, r1
 800077a:	3309      	adds	r3, #9
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	3b14      	subs	r3, #20
 8000780:	2b19      	cmp	r3, #25
 8000782:	f200 80fb 	bhi.w	800097c <DATA_LOGGER_Get_Data_Value+0x22c>
 8000786:	a201      	add	r2, pc, #4	; (adr r2, 800078c <DATA_LOGGER_Get_Data_Value+0x3c>)
 8000788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800078c:	080007f5 	.word	0x080007f5
 8000790:	0800097d 	.word	0x0800097d
 8000794:	0800097d 	.word	0x0800097d
 8000798:	08000811 	.word	0x08000811
 800079c:	0800097d 	.word	0x0800097d
 80007a0:	0800097d 	.word	0x0800097d
 80007a4:	0800097d 	.word	0x0800097d
 80007a8:	0800097d 	.word	0x0800097d
 80007ac:	0800097d 	.word	0x0800097d
 80007b0:	0800097d 	.word	0x0800097d
 80007b4:	0800097d 	.word	0x0800097d
 80007b8:	0800097d 	.word	0x0800097d
 80007bc:	0800097d 	.word	0x0800097d
 80007c0:	0800097d 	.word	0x0800097d
 80007c4:	0800097d 	.word	0x0800097d
 80007c8:	0800097d 	.word	0x0800097d
 80007cc:	0800097d 	.word	0x0800097d
 80007d0:	0800097d 	.word	0x0800097d
 80007d4:	0800097d 	.word	0x0800097d
 80007d8:	0800097d 	.word	0x0800097d
 80007dc:	0800097d 	.word	0x0800097d
 80007e0:	08000841 	.word	0x08000841
 80007e4:	08000889 	.word	0x08000889
 80007e8:	080008d1 	.word	0x080008d1
 80007ec:	08000919 	.word	0x08000919
 80007f0:	0800094b 	.word	0x0800094b
	{
		case data_format_e8B:
			buffer[1] = *(uint8_t*)data_list[id].data ;
 80007f4:	7bfa      	ldrb	r2, [r7, #15]
 80007f6:	496d      	ldr	r1, [pc, #436]	; (80009ac <DATA_LOGGER_Get_Data_Value+0x25c>)
 80007f8:	4613      	mov	r3, r2
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	4413      	add	r3, r2
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	440b      	add	r3, r1
 8000802:	3304      	adds	r3, #4
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	3301      	adds	r3, #1
 800080a:	7812      	ldrb	r2, [r2, #0]
 800080c:	701a      	strb	r2, [r3, #0]
			break;
 800080e:	e0b6      	b.n	800097e <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e8B_PWM:
			break;
		case data_format_e8B_FLOAT_0D:
			tmp_float = *(float*)data_list[id].data ;
 8000810:	7bfa      	ldrb	r2, [r7, #15]
 8000812:	4966      	ldr	r1, [pc, #408]	; (80009ac <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000814:	4613      	mov	r3, r2
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	4413      	add	r3, r2
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	440b      	add	r3, r1
 800081e:	3304      	adds	r3, #4
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	613b      	str	r3, [r7, #16]
			buffer[1] = (int8_t)tmp_float;
 8000826:	edd7 7a04 	vldr	s15, [r7, #16]
 800082a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800082e:	edc7 7a01 	vstr	s15, [r7, #4]
 8000832:	793b      	ldrb	r3, [r7, #4]
 8000834:	b25a      	sxtb	r2, r3
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	3301      	adds	r3, #1
 800083a:	b2d2      	uxtb	r2, r2
 800083c:	701a      	strb	r2, [r3, #0]
			break;
 800083e:	e09e      	b.n	800097e <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e8B_FLOAT_1D:
			break;
		case data_format_e16B:
			break;
		case data_format_e16B_FLOAT_1D:
			tmp_float = *(float*)data_list[id].data;
 8000840:	7bfa      	ldrb	r2, [r7, #15]
 8000842:	495a      	ldr	r1, [pc, #360]	; (80009ac <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000844:	4613      	mov	r3, r2
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	4413      	add	r3, r2
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	440b      	add	r3, r1
 800084e:	3304      	adds	r3, #4
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 10;
 8000856:	edd7 7a04 	vldr	s15, [r7, #16]
 800085a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800085e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000862:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000866:	ee17 3a90 	vmov	r3, s15
 800086a:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 800086c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000870:	121b      	asrs	r3, r3, #8
 8000872:	b21a      	sxth	r2, r3
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	3301      	adds	r3, #1
 8000878:	b2d2      	uxtb	r2, r2
 800087a:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	3302      	adds	r3, #2
 8000880:	8afa      	ldrh	r2, [r7, #22]
 8000882:	b2d2      	uxtb	r2, r2
 8000884:	701a      	strb	r2, [r3, #0]
			break;
 8000886:	e07a      	b.n	800097e <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e16B_FLOAT_2D:
			tmp_float = *(float*)data_list[id].data;
 8000888:	7bfa      	ldrb	r2, [r7, #15]
 800088a:	4948      	ldr	r1, [pc, #288]	; (80009ac <DATA_LOGGER_Get_Data_Value+0x25c>)
 800088c:	4613      	mov	r3, r2
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	4413      	add	r3, r2
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	440b      	add	r3, r1
 8000896:	3304      	adds	r3, #4
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 100;
 800089e:	edd7 7a04 	vldr	s15, [r7, #16]
 80008a2:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80009b0 <DATA_LOGGER_Get_Data_Value+0x260>
 80008a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008ae:	ee17 3a90 	vmov	r3, s15
 80008b2:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 80008b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80008b8:	121b      	asrs	r3, r3, #8
 80008ba:	b21a      	sxth	r2, r3
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	3301      	adds	r3, #1
 80008c0:	b2d2      	uxtb	r2, r2
 80008c2:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	3302      	adds	r3, #2
 80008c8:	8afa      	ldrh	r2, [r7, #22]
 80008ca:	b2d2      	uxtb	r2, r2
 80008cc:	701a      	strb	r2, [r3, #0]
			break;
 80008ce:	e056      	b.n	800097e <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e16B_FLOAT_3D:
			tmp_float = *(float*)data_list[id].data;
 80008d0:	7bfa      	ldrb	r2, [r7, #15]
 80008d2:	4936      	ldr	r1, [pc, #216]	; (80009ac <DATA_LOGGER_Get_Data_Value+0x25c>)
 80008d4:	4613      	mov	r3, r2
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	4413      	add	r3, r2
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	440b      	add	r3, r1
 80008de:	3304      	adds	r3, #4
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 1000;
 80008e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80008ea:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80009b4 <DATA_LOGGER_Get_Data_Value+0x264>
 80008ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008f6:	ee17 3a90 	vmov	r3, s15
 80008fa:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 80008fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000900:	121b      	asrs	r3, r3, #8
 8000902:	b21a      	sxth	r2, r3
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	3301      	adds	r3, #1
 8000908:	b2d2      	uxtb	r2, r2
 800090a:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	3302      	adds	r3, #2
 8000910:	8afa      	ldrh	r2, [r7, #22]
 8000912:	b2d2      	uxtb	r2, r2
 8000914:	701a      	strb	r2, [r3, #0]
			break;
 8000916:	e032      	b.n	800097e <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e16B_UINT16:
			tmp_16 = *(uint16_t*)data_list[id].data ;
 8000918:	7bfa      	ldrb	r2, [r7, #15]
 800091a:	4924      	ldr	r1, [pc, #144]	; (80009ac <DATA_LOGGER_Get_Data_Value+0x25c>)
 800091c:	4613      	mov	r3, r2
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	4413      	add	r3, r2
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	440b      	add	r3, r1
 8000926:	3304      	adds	r3, #4
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	881b      	ldrh	r3, [r3, #0]
 800092c:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 800092e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000932:	121b      	asrs	r3, r3, #8
 8000934:	b21a      	sxth	r2, r3
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	3301      	adds	r3, #1
 800093a:	b2d2      	uxtb	r2, r2
 800093c:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	3302      	adds	r3, #2
 8000942:	8afa      	ldrh	r2, [r7, #22]
 8000944:	b2d2      	uxtb	r2, r2
 8000946:	701a      	strb	r2, [r3, #0]
			break;
 8000948:	e019      	b.n	800097e <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e16B_INT16:
			tmp_16 = *(int16_t*)data_list[id].data ;
 800094a:	7bfa      	ldrb	r2, [r7, #15]
 800094c:	4917      	ldr	r1, [pc, #92]	; (80009ac <DATA_LOGGER_Get_Data_Value+0x25c>)
 800094e:	4613      	mov	r3, r2
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	4413      	add	r3, r2
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	440b      	add	r3, r1
 8000958:	3304      	adds	r3, #4
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	881b      	ldrh	r3, [r3, #0]
 800095e:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8000960:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000964:	121b      	asrs	r3, r3, #8
 8000966:	b21a      	sxth	r2, r3
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	3301      	adds	r3, #1
 800096c:	b2d2      	uxtb	r2, r2
 800096e:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	3302      	adds	r3, #2
 8000974:	8afa      	ldrh	r2, [r7, #22]
 8000976:	b2d2      	uxtb	r2, r2
 8000978:	701a      	strb	r2, [r3, #0]
			break;
 800097a:	e000      	b.n	800097e <DATA_LOGGER_Get_Data_Value+0x22e>
		default:
			break;
 800097c:	bf00      	nop
	}
	/* Length of the data array */
	return (data_list[id].format / 20) + 1;
 800097e:	7bfa      	ldrb	r2, [r7, #15]
 8000980:	490a      	ldr	r1, [pc, #40]	; (80009ac <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000982:	4613      	mov	r3, r2
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	4413      	add	r3, r2
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	440b      	add	r3, r1
 800098c:	3309      	adds	r3, #9
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	4a09      	ldr	r2, [pc, #36]	; (80009b8 <DATA_LOGGER_Get_Data_Value+0x268>)
 8000992:	fba2 2303 	umull	r2, r3, r2, r3
 8000996:	091b      	lsrs	r3, r3, #4
 8000998:	b2db      	uxtb	r3, r3
 800099a:	3301      	adds	r3, #1
 800099c:	b2db      	uxtb	r3, r3
}
 800099e:	4618      	mov	r0, r3
 80009a0:	371c      	adds	r7, #28
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	200003ac 	.word	0x200003ac
 80009b0:	42c80000 	.word	0x42c80000
 80009b4:	447a0000 	.word	0x447a0000
 80009b8:	cccccccd 	.word	0xcccccccd

080009bc <DATA_LOGGER_Get_Data_Config>:
 * @param id Id of the data
 * @param buffer Buffer array to write the configuration into
 * @return Number of bytes we wrote in the buffer
 */
uint8_t DATA_LOGGER_Get_Data_Config(data_id_e id, uint8_t * buffer)
{
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	6039      	str	r1, [r7, #0]
 80009c6:	71fb      	strb	r3, [r7, #7]
	/* We send a configuration so it must start with 0xFF */
	buffer[0] = 0xFF;
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	22ff      	movs	r2, #255	; 0xff
 80009cc:	701a      	strb	r2, [r3, #0]
	/* Then we put the length of the name */
	buffer[1] = data_list[id].len_name;
 80009ce:	79fa      	ldrb	r2, [r7, #7]
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	1c59      	adds	r1, r3, #1
 80009d4:	4828      	ldr	r0, [pc, #160]	; (8000a78 <DATA_LOGGER_Get_Data_Config+0xbc>)
 80009d6:	4613      	mov	r3, r2
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	4413      	add	r3, r2
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	4403      	add	r3, r0
 80009e0:	3310      	adds	r3, #16
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	700b      	strb	r3, [r1, #0]
	/* Then we write the data format */
	buffer[2] = data_list[id].format;
 80009e6:	79fa      	ldrb	r2, [r7, #7]
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	1c99      	adds	r1, r3, #2
 80009ec:	4822      	ldr	r0, [pc, #136]	; (8000a78 <DATA_LOGGER_Get_Data_Config+0xbc>)
 80009ee:	4613      	mov	r3, r2
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	4413      	add	r3, r2
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	4403      	add	r3, r0
 80009f8:	3309      	adds	r3, #9
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	700b      	strb	r3, [r1, #0]
	/* Then the id of the data */
	buffer[3] = id;
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	3303      	adds	r3, #3
 8000a02:	79fa      	ldrb	r2, [r7, #7]
 8000a04:	701a      	strb	r2, [r3, #0]
	/* When the data is used as output, we add 128 to the id */
	if(data_list[id].use_format == use_format_eAS_INPUT)
 8000a06:	79fa      	ldrb	r2, [r7, #7]
 8000a08:	491b      	ldr	r1, [pc, #108]	; (8000a78 <DATA_LOGGER_Get_Data_Config+0xbc>)
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	4413      	add	r3, r2
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	440b      	add	r3, r1
 8000a14:	3311      	adds	r3, #17
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	d107      	bne.n	8000a2c <DATA_LOGGER_Get_Data_Config+0x70>
	{
		buffer[3] += 128 ;
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	3303      	adds	r3, #3
 8000a20:	781a      	ldrb	r2, [r3, #0]
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	3303      	adds	r3, #3
 8000a26:	3a80      	subs	r2, #128	; 0x80
 8000a28:	b2d2      	uxtb	r2, r2
 8000a2a:	701a      	strb	r2, [r3, #0]
	}
	/* Finally we write the name */
	memcpy(&buffer[4], data_list[id].name, data_list[id].len_name);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	1d18      	adds	r0, r3, #4
 8000a30:	79fa      	ldrb	r2, [r7, #7]
 8000a32:	4911      	ldr	r1, [pc, #68]	; (8000a78 <DATA_LOGGER_Get_Data_Config+0xbc>)
 8000a34:	4613      	mov	r3, r2
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	4413      	add	r3, r2
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	440b      	add	r3, r1
 8000a3e:	330c      	adds	r3, #12
 8000a40:	6819      	ldr	r1, [r3, #0]
 8000a42:	79fa      	ldrb	r2, [r7, #7]
 8000a44:	4c0c      	ldr	r4, [pc, #48]	; (8000a78 <DATA_LOGGER_Get_Data_Config+0xbc>)
 8000a46:	4613      	mov	r3, r2
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	4413      	add	r3, r2
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	4423      	add	r3, r4
 8000a50:	3310      	adds	r3, #16
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	461a      	mov	r2, r3
 8000a56:	f005 fe8d 	bl	8006774 <memcpy>

	return 4 + data_list[id].len_name ;
 8000a5a:	79fa      	ldrb	r2, [r7, #7]
 8000a5c:	4906      	ldr	r1, [pc, #24]	; (8000a78 <DATA_LOGGER_Get_Data_Config+0xbc>)
 8000a5e:	4613      	mov	r3, r2
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	4413      	add	r3, r2
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	440b      	add	r3, r1
 8000a68:	3310      	adds	r3, #16
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	3304      	adds	r3, #4
 8000a6e:	b2db      	uxtb	r3, r3
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd90      	pop	{r4, r7, pc}
 8000a78:	200003ac 	.word	0x200003ac

08000a7c <DATA_LOGGER_Get_Data>:
 * @brief Get data
 * @param id Id of the data
 * @return pointer to the data structure with the corresponding ID
 */
data_t * DATA_LOGGER_Get_Data(data_id_e id)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]
	return &data_list[id];
 8000a86:	79fa      	ldrb	r2, [r7, #7]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	4413      	add	r3, r2
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	4a03      	ldr	r2, [pc, #12]	; (8000aa0 <DATA_LOGGER_Get_Data+0x24>)
 8000a92:	4413      	add	r3, r2
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	200003ac 	.word	0x200003ac

08000aa4 <push_data_to_uart>:
 * @brief Add the start byte and checksum to a message
 * @param buffer Data array to send
 * @param len Number of bytes to send
 */
void push_data_to_uart(uint8_t * buffer, uint8_t len)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b090      	sub	sp, #64	; 0x40
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	460b      	mov	r3, r1
 8000aae:	70fb      	strb	r3, [r7, #3]
	uint8_t buffer_new[50];
	uint32_t checksum = 0 ;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
	buffer_new[0] = '$';
 8000ab4:	2324      	movs	r3, #36	; 0x24
 8000ab6:	723b      	strb	r3, [r7, #8]
	for(uint8_t b = 0; b < len; b++)
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8000abe:	e01d      	b.n	8000afc <push_data_to_uart+0x58>
	{
		buffer_new[1 + b] = buffer[b];
 8000ac0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	441a      	add	r2, r3
 8000ac8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000acc:	3301      	adds	r3, #1
 8000ace:	7812      	ldrb	r2, [r2, #0]
 8000ad0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000ad4:	440b      	add	r3, r1
 8000ad6:	f803 2c38 	strb.w	r2, [r3, #-56]
		checksum += (uint32_t)buffer_new[1 + b];
 8000ada:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000ade:	3301      	adds	r3, #1
 8000ae0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000ae4:	4413      	add	r3, r2
 8000ae6:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8000aea:	461a      	mov	r2, r3
 8000aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000aee:	4413      	add	r3, r2
 8000af0:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(uint8_t b = 0; b < len; b++)
 8000af2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000af6:	3301      	adds	r3, #1
 8000af8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8000afc:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8000b00:	78fb      	ldrb	r3, [r7, #3]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d3dc      	bcc.n	8000ac0 <push_data_to_uart+0x1c>
	}
	buffer_new[1 + len] = (uint8_t)(checksum % 256) ;
 8000b06:	78fb      	ldrb	r3, [r7, #3]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000b0c:	b2d2      	uxtb	r2, r2
 8000b0e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000b12:	440b      	add	r3, r1
 8000b14:	f803 2c38 	strb.w	r2, [r3, #-56]
	UART_Transmit(uart_eTELEMETRY, buffer_new, len+2);
 8000b18:	78fb      	ldrb	r3, [r7, #3]
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	3302      	adds	r3, #2
 8000b1e:	b29a      	uxth	r2, r3
 8000b20:	f107 0308 	add.w	r3, r7, #8
 8000b24:	4619      	mov	r1, r3
 8000b26:	2000      	movs	r0, #0
 8000b28:	f000 ffd6 	bl	8001ad8 <UART_Transmit>
}
 8000b2c:	bf00      	nop
 8000b2e:	3740      	adds	r7, #64	; 0x40
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <state_machine>:

/*
 * @brief data logger state machine
 */
static void state_machine(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
	static data_logger_state_e state = data_logger_state_eIDLE;
	static data_logger_state_e previous_state = data_logger_state_eTRANSMIT_CONFIG ;
	bool_e entrance = previous_state != state ;
 8000b3a:	4b74      	ldr	r3, [pc, #464]	; (8000d0c <state_machine+0x1d8>)
 8000b3c:	781a      	ldrb	r2, [r3, #0]
 8000b3e:	4b74      	ldr	r3, [pc, #464]	; (8000d10 <state_machine+0x1dc>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	bf14      	ite	ne
 8000b46:	2301      	movne	r3, #1
 8000b48:	2300      	moveq	r3, #0
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	71bb      	strb	r3, [r7, #6]
	previous_state = state ;
 8000b4e:	4b70      	ldr	r3, [pc, #448]	; (8000d10 <state_machine+0x1dc>)
 8000b50:	781a      	ldrb	r2, [r3, #0]
 8000b52:	4b6e      	ldr	r3, [pc, #440]	; (8000d0c <state_machine+0x1d8>)
 8000b54:	701a      	strb	r2, [r3, #0]
	switch(state)
 8000b56:	4b6e      	ldr	r3, [pc, #440]	; (8000d10 <state_machine+0x1dc>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b02      	cmp	r3, #2
 8000b5c:	f000 8092 	beq.w	8000c84 <state_machine+0x150>
 8000b60:	2b02      	cmp	r3, #2
 8000b62:	f300 80ce 	bgt.w	8000d02 <state_machine+0x1ce>
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d002      	beq.n	8000b70 <state_machine+0x3c>
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d043      	beq.n	8000bf6 <state_machine+0xc2>
					push_data_to_uart(tmp, tmp_len);
				}
			}
			break;
	}
}
 8000b6e:	e0c8      	b.n	8000d02 <state_machine+0x1ce>
			if(entrance)
 8000b70:	79bb      	ldrb	r3, [r7, #6]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d003      	beq.n	8000b7e <state_machine+0x4a>
				SCHEDULER_reschedule_task(task_ids_eDATA_LOGGER, PERIODE_PING);
 8000b76:	4967      	ldr	r1, [pc, #412]	; (8000d14 <state_machine+0x1e0>)
 8000b78:	2002      	movs	r0, #2
 8000b7a:	f000 fb25 	bl	80011c8 <SCHEDULER_reschedule_task>
			tmp_len = DATA_LOGGER_Get_Data_Config(data_id_eCONFIG_REQUEST, tmp);
 8000b7e:	4966      	ldr	r1, [pc, #408]	; (8000d18 <state_machine+0x1e4>)
 8000b80:	2000      	movs	r0, #0
 8000b82:	f7ff ff1b 	bl	80009bc <DATA_LOGGER_Get_Data_Config>
 8000b86:	4603      	mov	r3, r0
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b64      	ldr	r3, [pc, #400]	; (8000d1c <state_machine+0x1e8>)
 8000b8c:	701a      	strb	r2, [r3, #0]
			push_data_to_uart(tmp, tmp_len);
 8000b8e:	4b63      	ldr	r3, [pc, #396]	; (8000d1c <state_machine+0x1e8>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	4619      	mov	r1, r3
 8000b94:	4860      	ldr	r0, [pc, #384]	; (8000d18 <state_machine+0x1e4>)
 8000b96:	f7ff ff85 	bl	8000aa4 <push_data_to_uart>
			if(send_config_flag)
 8000b9a:	4b61      	ldr	r3, [pc, #388]	; (8000d20 <state_machine+0x1ec>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d01a      	beq.n	8000bd8 <state_machine+0xa4>
				start_flag = FALSE;
 8000ba2:	4b60      	ldr	r3, [pc, #384]	; (8000d24 <state_machine+0x1f0>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	701a      	strb	r2, [r3, #0]
				stop_flag = FALSE;
 8000ba8:	4b5f      	ldr	r3, [pc, #380]	; (8000d28 <state_machine+0x1f4>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	701a      	strb	r2, [r3, #0]
				send_config_flag = FALSE;
 8000bae:	4b5c      	ldr	r3, [pc, #368]	; (8000d20 <state_machine+0x1ec>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	701a      	strb	r2, [r3, #0]
				if(config_not_sent)
 8000bb4:	4b5d      	ldr	r3, [pc, #372]	; (8000d2c <state_machine+0x1f8>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d009      	beq.n	8000bd0 <state_machine+0x9c>
					id_init_counter = 0;
 8000bbc:	4b5c      	ldr	r3, [pc, #368]	; (8000d30 <state_machine+0x1fc>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
					is_any_data_used = FALSE;
 8000bc2:	4b5c      	ldr	r3, [pc, #368]	; (8000d34 <state_machine+0x200>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
					state = data_logger_state_eTRANSMIT_CONFIG;
 8000bc8:	4b51      	ldr	r3, [pc, #324]	; (8000d10 <state_machine+0x1dc>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	701a      	strb	r2, [r3, #0]
			break;
 8000bce:	e097      	b.n	8000d00 <state_machine+0x1cc>
					state = data_logger_state_eLOG;
 8000bd0:	4b4f      	ldr	r3, [pc, #316]	; (8000d10 <state_machine+0x1dc>)
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	701a      	strb	r2, [r3, #0]
			break;
 8000bd6:	e093      	b.n	8000d00 <state_machine+0x1cc>
			else if(start_flag)
 8000bd8:	4b52      	ldr	r3, [pc, #328]	; (8000d24 <state_machine+0x1f0>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	f000 808f 	beq.w	8000d00 <state_machine+0x1cc>
				start_flag = FALSE;
 8000be2:	4b50      	ldr	r3, [pc, #320]	; (8000d24 <state_machine+0x1f0>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	701a      	strb	r2, [r3, #0]
				stop_flag = FALSE;
 8000be8:	4b4f      	ldr	r3, [pc, #316]	; (8000d28 <state_machine+0x1f4>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	701a      	strb	r2, [r3, #0]
				state = data_logger_state_eLOG;
 8000bee:	4b48      	ldr	r3, [pc, #288]	; (8000d10 <state_machine+0x1dc>)
 8000bf0:	2202      	movs	r2, #2
 8000bf2:	701a      	strb	r2, [r3, #0]
			break;
 8000bf4:	e084      	b.n	8000d00 <state_machine+0x1cc>
			if(entrance)
 8000bf6:	79bb      	ldrb	r3, [r7, #6]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d00a      	beq.n	8000c12 <state_machine+0xde>
				SCHEDULER_reschedule_task(task_ids_eDATA_LOGGER, PERIODE_CONFIG_SEND);
 8000bfc:	494e      	ldr	r1, [pc, #312]	; (8000d38 <state_machine+0x204>)
 8000bfe:	2002      	movs	r0, #2
 8000c00:	f000 fae2 	bl	80011c8 <SCHEDULER_reschedule_task>
			while(data_list[id_init_counter].use_format == use_format_eNOT_USED && id_init_counter < data_id_eCOUNT)
 8000c04:	e005      	b.n	8000c12 <state_machine+0xde>
				id_init_counter ++ ;
 8000c06:	4b4a      	ldr	r3, [pc, #296]	; (8000d30 <state_machine+0x1fc>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	4b48      	ldr	r3, [pc, #288]	; (8000d30 <state_machine+0x1fc>)
 8000c10:	701a      	strb	r2, [r3, #0]
			while(data_list[id_init_counter].use_format == use_format_eNOT_USED && id_init_counter < data_id_eCOUNT)
 8000c12:	4b47      	ldr	r3, [pc, #284]	; (8000d30 <state_machine+0x1fc>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	4619      	mov	r1, r3
 8000c18:	4a48      	ldr	r2, [pc, #288]	; (8000d3c <state_machine+0x208>)
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	440b      	add	r3, r1
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	4413      	add	r3, r2
 8000c24:	3311      	adds	r3, #17
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d103      	bne.n	8000c34 <state_machine+0x100>
 8000c2c:	4b40      	ldr	r3, [pc, #256]	; (8000d30 <state_machine+0x1fc>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b03      	cmp	r3, #3
 8000c32:	d9e8      	bls.n	8000c06 <state_machine+0xd2>
			if(id_init_counter < data_id_eCOUNT)
 8000c34:	4b3e      	ldr	r3, [pc, #248]	; (8000d30 <state_machine+0x1fc>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b03      	cmp	r3, #3
 8000c3a:	d817      	bhi.n	8000c6c <state_machine+0x138>
				is_any_data_used = TRUE;
 8000c3c:	4b3d      	ldr	r3, [pc, #244]	; (8000d34 <state_machine+0x200>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	701a      	strb	r2, [r3, #0]
				tmp_len = DATA_LOGGER_Get_Data_Config(id_init_counter++, tmp);
 8000c42:	4b3b      	ldr	r3, [pc, #236]	; (8000d30 <state_machine+0x1fc>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	1c5a      	adds	r2, r3, #1
 8000c48:	b2d1      	uxtb	r1, r2
 8000c4a:	4a39      	ldr	r2, [pc, #228]	; (8000d30 <state_machine+0x1fc>)
 8000c4c:	7011      	strb	r1, [r2, #0]
 8000c4e:	4932      	ldr	r1, [pc, #200]	; (8000d18 <state_machine+0x1e4>)
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff feb3 	bl	80009bc <DATA_LOGGER_Get_Data_Config>
 8000c56:	4603      	mov	r3, r0
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4b30      	ldr	r3, [pc, #192]	; (8000d1c <state_machine+0x1e8>)
 8000c5c:	701a      	strb	r2, [r3, #0]
				push_data_to_uart(tmp, tmp_len);
 8000c5e:	4b2f      	ldr	r3, [pc, #188]	; (8000d1c <state_machine+0x1e8>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	4619      	mov	r1, r3
 8000c64:	482c      	ldr	r0, [pc, #176]	; (8000d18 <state_machine+0x1e4>)
 8000c66:	f7ff ff1d 	bl	8000aa4 <push_data_to_uart>
			break;
 8000c6a:	e04a      	b.n	8000d02 <state_machine+0x1ce>
				if(is_any_data_used)
 8000c6c:	4b31      	ldr	r3, [pc, #196]	; (8000d34 <state_machine+0x200>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d003      	beq.n	8000c7c <state_machine+0x148>
					state = data_logger_state_eLOG ;
 8000c74:	4b26      	ldr	r3, [pc, #152]	; (8000d10 <state_machine+0x1dc>)
 8000c76:	2202      	movs	r2, #2
 8000c78:	701a      	strb	r2, [r3, #0]
			break;
 8000c7a:	e042      	b.n	8000d02 <state_machine+0x1ce>
					state = data_logger_state_eIDLE ;
 8000c7c:	4b24      	ldr	r3, [pc, #144]	; (8000d10 <state_machine+0x1dc>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	701a      	strb	r2, [r3, #0]
			break;
 8000c82:	e03e      	b.n	8000d02 <state_machine+0x1ce>
			if(entrance)
 8000c84:	79bb      	ldrb	r3, [r7, #6]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d004      	beq.n	8000c94 <state_machine+0x160>
				SCHEDULER_reschedule_task(task_ids_eDATA_LOGGER, PERIODE_SEND);
 8000c8a:	f242 7110 	movw	r1, #10000	; 0x2710
 8000c8e:	2002      	movs	r0, #2
 8000c90:	f000 fa9a 	bl	80011c8 <SCHEDULER_reschedule_task>
			if(stop_flag)
 8000c94:	4b24      	ldr	r3, [pc, #144]	; (8000d28 <state_machine+0x1f4>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d002      	beq.n	8000ca2 <state_machine+0x16e>
				state = data_logger_state_eIDLE;
 8000c9c:	4b1c      	ldr	r3, [pc, #112]	; (8000d10 <state_machine+0x1dc>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	701a      	strb	r2, [r3, #0]
			for(uint8_t d = 0; d < data_id_eCOUNT; d++)
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	71fb      	strb	r3, [r7, #7]
 8000ca6:	e027      	b.n	8000cf8 <state_machine+0x1c4>
				if(data_list[d].use_format == use_format_eAS_OUTPUT && (data_list[d].data != NULL))
 8000ca8:	79fa      	ldrb	r2, [r7, #7]
 8000caa:	4924      	ldr	r1, [pc, #144]	; (8000d3c <state_machine+0x208>)
 8000cac:	4613      	mov	r3, r2
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	4413      	add	r3, r2
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	440b      	add	r3, r1
 8000cb6:	3311      	adds	r3, #17
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d119      	bne.n	8000cf2 <state_machine+0x1be>
 8000cbe:	79fa      	ldrb	r2, [r7, #7]
 8000cc0:	491e      	ldr	r1, [pc, #120]	; (8000d3c <state_machine+0x208>)
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	4413      	add	r3, r2
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	440b      	add	r3, r1
 8000ccc:	3304      	adds	r3, #4
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d00e      	beq.n	8000cf2 <state_machine+0x1be>
					tmp_len = DATA_LOGGER_Get_Data_Value(d, tmp);
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	4910      	ldr	r1, [pc, #64]	; (8000d18 <state_machine+0x1e4>)
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fd39 	bl	8000750 <DATA_LOGGER_Get_Data_Value>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <state_machine+0x1e8>)
 8000ce4:	701a      	strb	r2, [r3, #0]
					push_data_to_uart(tmp, tmp_len);
 8000ce6:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <state_machine+0x1e8>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	4619      	mov	r1, r3
 8000cec:	480a      	ldr	r0, [pc, #40]	; (8000d18 <state_machine+0x1e4>)
 8000cee:	f7ff fed9 	bl	8000aa4 <push_data_to_uart>
			for(uint8_t d = 0; d < data_id_eCOUNT; d++)
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	71fb      	strb	r3, [r7, #7]
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	2b03      	cmp	r3, #3
 8000cfc:	d9d4      	bls.n	8000ca8 <state_machine+0x174>
			break;
 8000cfe:	e000      	b.n	8000d02 <state_machine+0x1ce>
			break;
 8000d00:	bf00      	nop
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000001 	.word	0x20000001
 8000d10:	20000435 	.word	0x20000435
 8000d14:	0007a120 	.word	0x0007a120
 8000d18:	20000400 	.word	0x20000400
 8000d1c:	20000432 	.word	0x20000432
 8000d20:	200003fd 	.word	0x200003fd
 8000d24:	200003fc 	.word	0x200003fc
 8000d28:	200003fe 	.word	0x200003fe
 8000d2c:	20000000 	.word	0x20000000
 8000d30:	20000433 	.word	0x20000433
 8000d34:	20000434 	.word	0x20000434
 8000d38:	000186a0 	.word	0x000186a0
 8000d3c:	200003ac 	.word	0x200003ac

08000d40 <parse_uart>:

/*
 * @brief Parse incoming bytes
 */
static void parse_uart(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
	static uint8_t trame[20] = { 0 };
	static uint8_t nb_byte_to_buffer = 0;
	static uint8_t buffer_counter = 0;
	static uint16_t checksum = 0;
	/* Check for available data */
	if(UART_Availables(uart_eTELEMETRY))
 8000d46:	2000      	movs	r0, #0
 8000d48:	f000 fe22 	bl	8001990 <UART_Availables>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d06c      	beq.n	8000e2c <parse_uart+0xec>
	{
		uint8_t c;
		UART_Get(uart_eTELEMETRY, &c);
 8000d52:	1dfb      	adds	r3, r7, #7
 8000d54:	4619      	mov	r1, r3
 8000d56:	2000      	movs	r0, #0
 8000d58:	f000 fe28 	bl	80019ac <UART_Get>
		switch(state)
 8000d5c:	4b35      	ldr	r3, [pc, #212]	; (8000e34 <parse_uart+0xf4>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b03      	cmp	r3, #3
 8000d62:	d863      	bhi.n	8000e2c <parse_uart+0xec>
 8000d64:	a201      	add	r2, pc, #4	; (adr r2, 8000d6c <parse_uart+0x2c>)
 8000d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d6a:	bf00      	nop
 8000d6c:	08000d7d 	.word	0x08000d7d
 8000d70:	08000d8b 	.word	0x08000d8b
 8000d74:	08000dd1 	.word	0x08000dd1
 8000d78:	08000e09 	.word	0x08000e09
		{
			case parser_state_eSTART_BYTE:
				if(c == '$')
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	2b24      	cmp	r3, #36	; 0x24
 8000d80:	d14f      	bne.n	8000e22 <parse_uart+0xe2>
				{
					state = parser_state_eID;
 8000d82:	4b2c      	ldr	r3, [pc, #176]	; (8000e34 <parse_uart+0xf4>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000d88:	e04b      	b.n	8000e22 <parse_uart+0xe2>

			case parser_state_eID:
				if(c < data_id_eCOUNT)
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	2b03      	cmp	r3, #3
 8000d8e:	d84a      	bhi.n	8000e26 <parse_uart+0xe6>
				{
					/* Store the id for later use */
					trame[0] = c;
 8000d90:	79fa      	ldrb	r2, [r7, #7]
 8000d92:	4b29      	ldr	r3, [pc, #164]	; (8000e38 <parse_uart+0xf8>)
 8000d94:	701a      	strb	r2, [r3, #0]
					/* Reset the checksum */
					checksum = c;
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	4b28      	ldr	r3, [pc, #160]	; (8000e3c <parse_uart+0xfc>)
 8000d9c:	801a      	strh	r2, [r3, #0]
					/* Get the data length according to the data format */
					nb_byte_to_buffer = (DATA_LOGGER_Get_Data(c)->format / 20);
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fe6b 	bl	8000a7c <DATA_LOGGER_Get_Data>
 8000da6:	4603      	mov	r3, r0
 8000da8:	7a5b      	ldrb	r3, [r3, #9]
 8000daa:	4a25      	ldr	r2, [pc, #148]	; (8000e40 <parse_uart+0x100>)
 8000dac:	fba2 2303 	umull	r2, r3, r2, r3
 8000db0:	091b      	lsrs	r3, r3, #4
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	4b23      	ldr	r3, [pc, #140]	; (8000e44 <parse_uart+0x104>)
 8000db6:	701a      	strb	r2, [r3, #0]
					if(nb_byte_to_buffer)
 8000db8:	4b22      	ldr	r3, [pc, #136]	; (8000e44 <parse_uart+0x104>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d003      	beq.n	8000dc8 <parse_uart+0x88>
					{
						state = parser_state_eDATA;
 8000dc0:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <parse_uart+0xf4>)
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	701a      	strb	r2, [r3, #0]
					else
					{
						state = parser_state_eCHECKSUM;
					}
				}
				break;
 8000dc6:	e02e      	b.n	8000e26 <parse_uart+0xe6>
						state = parser_state_eCHECKSUM;
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <parse_uart+0xf4>)
 8000dca:	2203      	movs	r2, #3
 8000dcc:	701a      	strb	r2, [r3, #0]
				break;
 8000dce:	e02a      	b.n	8000e26 <parse_uart+0xe6>
			case parser_state_eDATA:
				trame[1+buffer_counter++] = c;
 8000dd0:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <parse_uart+0x108>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	1c5a      	adds	r2, r3, #1
 8000dd6:	b2d1      	uxtb	r1, r2
 8000dd8:	4a1b      	ldr	r2, [pc, #108]	; (8000e48 <parse_uart+0x108>)
 8000dda:	7011      	strb	r1, [r2, #0]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	79f9      	ldrb	r1, [r7, #7]
 8000de0:	4a15      	ldr	r2, [pc, #84]	; (8000e38 <parse_uart+0xf8>)
 8000de2:	54d1      	strb	r1, [r2, r3]
				checksum += c;
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <parse_uart+0xfc>)
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	4413      	add	r3, r2
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <parse_uart+0xfc>)
 8000df2:	801a      	strh	r2, [r3, #0]
				if(buffer_counter == nb_byte_to_buffer)
 8000df4:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <parse_uart+0x108>)
 8000df6:	781a      	ldrb	r2, [r3, #0]
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <parse_uart+0x104>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d114      	bne.n	8000e2a <parse_uart+0xea>
				{
					state = parser_state_eCHECKSUM;
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <parse_uart+0xf4>)
 8000e02:	2203      	movs	r2, #3
 8000e04:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000e06:	e010      	b.n	8000e2a <parse_uart+0xea>
			case parser_state_eCHECKSUM:
				if(checksum == c)
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <parse_uart+0xfc>)
 8000e0e:	881b      	ldrh	r3, [r3, #0]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d102      	bne.n	8000e1a <parse_uart+0xda>
				{
					DATA_LOGGER_Reception(trame);
 8000e14:	4808      	ldr	r0, [pc, #32]	; (8000e38 <parse_uart+0xf8>)
 8000e16:	f7ff fbe1 	bl	80005dc <DATA_LOGGER_Reception>
				}
				state = parser_state_eSTART_BYTE;
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <parse_uart+0xf4>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	701a      	strb	r2, [r3, #0]
				break;
 8000e20:	e004      	b.n	8000e2c <parse_uart+0xec>
				break;
 8000e22:	bf00      	nop
 8000e24:	e002      	b.n	8000e2c <parse_uart+0xec>
				break;
 8000e26:	bf00      	nop
 8000e28:	e000      	b.n	8000e2c <parse_uart+0xec>
				break;
 8000e2a:	bf00      	nop


		}
	}

}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000436 	.word	0x20000436
 8000e38:	20000438 	.word	0x20000438
 8000e3c:	2000044c 	.word	0x2000044c
 8000e40:	cccccccd 	.word	0xcccccccd
 8000e44:	2000044e 	.word	0x2000044e
 8000e48:	2000044f 	.word	0x2000044f

08000e4c <EVENT_process>:

/*
 * @brief check if any event has been triggered
 * @param test_all False to test only low level events
 */
void EVENT_process(bool_e test_all){
 8000e4c:	b590      	push	{r4, r7, lr}
 8000e4e:	b087      	sub	sp, #28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	71fb      	strb	r3, [r7, #7]
	if(new_flag)
 8000e56:	4b42      	ldr	r3, [pc, #264]	; (8000f60 <EVENT_process+0x114>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d07a      	beq.n	8000f56 <EVENT_process+0x10a>
	{
		new_flag = FALSE;
 8000e60:	4b3f      	ldr	r3, [pc, #252]	; (8000f60 <EVENT_process+0x114>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	701a      	strb	r2, [r3, #0]
		/* Number of events to test */
		uint8_t max = EVENT_LOW_LVL_COUNT ;
 8000e66:	2300      	movs	r3, #0
 8000e68:	75fb      	strb	r3, [r7, #23]
		if(test_all)
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <EVENT_process+0x28>
		{
			max = EVENT_COUNT ;
 8000e70:	2301      	movs	r3, #1
 8000e72:	75fb      	strb	r3, [r7, #23]
		}

		/* For each events */
		for(uint32_t e = 0; e < max; e ++)
 8000e74:	2300      	movs	r3, #0
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	e069      	b.n	8000f4e <EVENT_process+0x102>
		{

			uint32_t m = 0 ;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
			bool_e function_did_run_once = FALSE ;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	72fb      	strb	r3, [r7, #11]

			/* For each masks */
			while(m < events_main[e].nb_mask && !function_did_run_once && events_main[e].state == event_state_eENABLED)
 8000e82:	e049      	b.n	8000f18 <EVENT_process+0xcc>
			{
				if(Mask_test_and(events_main[e].mask_and[m], flags))			/* Mask "and" test */
 8000e84:	4837      	ldr	r0, [pc, #220]	; (8000f64 <EVENT_process+0x118>)
 8000e86:	4938      	ldr	r1, [pc, #224]	; (8000f68 <EVENT_process+0x11c>)
 8000e88:	68fa      	ldr	r2, [r7, #12]
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	00d2      	lsls	r2, r2, #3
 8000e8e:	24b4      	movs	r4, #180	; 0xb4
 8000e90:	fb04 f303 	mul.w	r3, r4, r3
 8000e94:	4413      	add	r3, r2
 8000e96:	4419      	add	r1, r3
 8000e98:	e890 000c 	ldmia.w	r0, {r2, r3}
 8000e9c:	c903      	ldmia	r1, {r0, r1}
 8000e9e:	f000 f865 	bl	8000f6c <Mask_test_and>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d034      	beq.n	8000f12 <EVENT_process+0xc6>
				{
					if(Mask_test_or(events_main[e].mask_or[m], flags))			/* Mask "or" test */
 8000ea8:	482e      	ldr	r0, [pc, #184]	; (8000f64 <EVENT_process+0x118>)
 8000eaa:	492f      	ldr	r1, [pc, #188]	; (8000f68 <EVENT_process+0x11c>)
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	1dda      	adds	r2, r3, #7
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	00d2      	lsls	r2, r2, #3
 8000eb4:	24b4      	movs	r4, #180	; 0xb4
 8000eb6:	fb04 f303 	mul.w	r3, r4, r3
 8000eba:	4413      	add	r3, r2
 8000ebc:	4419      	add	r1, r3
 8000ebe:	e890 000c 	ldmia.w	r0, {r2, r3}
 8000ec2:	c903      	ldmia	r1, {r0, r1}
 8000ec4:	f000 f885 	bl	8000fd2 <Mask_test_or>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d021      	beq.n	8000f12 <EVENT_process+0xc6>
					{
						if(!Mask_test_or(events_main[e].mask_not[m], flags))	/* Mask "not" test */
 8000ece:	4825      	ldr	r0, [pc, #148]	; (8000f64 <EVENT_process+0x118>)
 8000ed0:	4925      	ldr	r1, [pc, #148]	; (8000f68 <EVENT_process+0x11c>)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f103 020e 	add.w	r2, r3, #14
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	00d2      	lsls	r2, r2, #3
 8000edc:	24b4      	movs	r4, #180	; 0xb4
 8000ede:	fb04 f303 	mul.w	r3, r4, r3
 8000ee2:	4413      	add	r3, r2
 8000ee4:	4419      	add	r1, r3
 8000ee6:	e890 000c 	ldmia.w	r0, {r2, r3}
 8000eea:	c903      	ldmia	r1, {r0, r1}
 8000eec:	f000 f871 	bl	8000fd2 <Mask_test_or>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d10d      	bne.n	8000f12 <EVENT_process+0xc6>
						{
							events_main[e].function(m);
 8000ef6:	4a1c      	ldr	r2, [pc, #112]	; (8000f68 <EVENT_process+0x11c>)
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	21b4      	movs	r1, #180	; 0xb4
 8000efc:	fb01 f303 	mul.w	r3, r1, r3
 8000f00:	4413      	add	r3, r2
 8000f02:	33b0      	adds	r3, #176	; 0xb0
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	4610      	mov	r0, r2
 8000f0c:	4798      	blx	r3
							function_did_run_once = TRUE ;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	72fb      	strb	r3, [r7, #11]
						}
					}
				}
				m++ ;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	3301      	adds	r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
			while(m < events_main[e].nb_mask && !function_did_run_once && events_main[e].state == event_state_eENABLED)
 8000f18:	4a13      	ldr	r2, [pc, #76]	; (8000f68 <EVENT_process+0x11c>)
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	21b4      	movs	r1, #180	; 0xb4
 8000f1e:	fb01 f303 	mul.w	r3, r1, r3
 8000f22:	4413      	add	r3, r2
 8000f24:	33a8      	adds	r3, #168	; 0xa8
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	68fa      	ldr	r2, [r7, #12]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d20c      	bcs.n	8000f48 <EVENT_process+0xfc>
 8000f2e:	7afb      	ldrb	r3, [r7, #11]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d109      	bne.n	8000f48 <EVENT_process+0xfc>
 8000f34:	4a0c      	ldr	r2, [pc, #48]	; (8000f68 <EVENT_process+0x11c>)
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	21b4      	movs	r1, #180	; 0xb4
 8000f3a:	fb01 f303 	mul.w	r3, r1, r3
 8000f3e:	4413      	add	r3, r2
 8000f40:	33ac      	adds	r3, #172	; 0xac
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d09d      	beq.n	8000e84 <EVENT_process+0x38>
		for(uint32_t e = 0; e < max; e ++)
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	613b      	str	r3, [r7, #16]
 8000f4e:	7dfb      	ldrb	r3, [r7, #23]
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d391      	bcc.n	8000e7a <EVENT_process+0x2e>
			}
		}
	}
}
 8000f56:	bf00      	nop
 8000f58:	371c      	adds	r7, #28
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd90      	pop	{r4, r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000458 	.word	0x20000458
 8000f64:	20000450 	.word	0x20000450
 8000f68:	2000045c 	.word	0x2000045c

08000f6c <Mask_test_and>:
 * @param mask_test The test mask
 * @param mask_ref The ref mask
 * @return True ...
 */
bool_e Mask_test_and(Mask_t mask_test, Mask_t mask_ref)
{
 8000f6c:	b490      	push	{r4, r7}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	f107 0408 	add.w	r4, r7, #8
 8000f76:	e884 0003 	stmia.w	r4, {r0, r1}
 8000f7a:	4639      	mov	r1, r7
 8000f7c:	e881 000c 	stmia.w	r1, {r2, r3}
	for(uint32_t m = 0; m < NB_ARRAY_MASK; m++)
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	e01c      	b.n	8000fc0 <Mask_test_and+0x54>
	{
		if((mask_test.array[m] & mask_ref.array[m]) != mask_test.array[m])
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	f107 0218 	add.w	r2, r7, #24
 8000f8e:	4413      	add	r3, r2
 8000f90:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	f107 0118 	add.w	r1, r7, #24
 8000f9c:	440b      	add	r3, r1
 8000f9e:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	f107 0118 	add.w	r1, r7, #24
 8000fac:	440b      	add	r3, r1
 8000fae:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d001      	beq.n	8000fba <Mask_test_and+0x4e>
		{
			return FALSE ;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e006      	b.n	8000fc8 <Mask_test_and+0x5c>
	for(uint32_t m = 0; m < NB_ARRAY_MASK; m++)
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d9df      	bls.n	8000f86 <Mask_test_and+0x1a>
		}
	}
	return TRUE ;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc90      	pop	{r4, r7}
 8000fd0:	4770      	bx	lr

08000fd2 <Mask_test_or>:
 * @brief Check if one of the bit in the ref_mask is in the test_mask
 * @param mask_test The test mask
 * @param mask_ref The ref mask
 * @return True if we found one corresponding bit
 */
bool_e Mask_test_or(Mask_t mask_test, Mask_t mask_ref){
 8000fd2:	b490      	push	{r4, r7}
 8000fd4:	b086      	sub	sp, #24
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	f107 0408 	add.w	r4, r7, #8
 8000fdc:	e884 0003 	stmia.w	r4, {r0, r1}
 8000fe0:	4639      	mov	r1, r7
 8000fe2:	e881 000c 	stmia.w	r1, {r2, r3}
	bool_e to_return = FALSE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	75fb      	strb	r3, [r7, #23]
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	e015      	b.n	800101c <Mask_test_or+0x4a>
	{
		if(mask_test.array[m] & mask_ref.array[m])
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	f107 0218 	add.w	r2, r7, #24
 8000ff8:	4413      	add	r3, r2
 8000ffa:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	f107 0118 	add.w	r1, r7, #24
 8001006:	440b      	add	r3, r1
 8001008:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800100c:	4013      	ands	r3, r2
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <Mask_test_or+0x44>
		{
			to_return = TRUE;
 8001012:	2301      	movs	r3, #1
 8001014:	75fb      	strb	r3, [r7, #23]
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	3301      	adds	r3, #1
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	2b01      	cmp	r3, #1
 8001020:	dde6      	ble.n	8000ff0 <Mask_test_or+0x1e>
		}
	}
	return to_return ;
 8001022:	7dfb      	ldrb	r3, [r7, #23]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bc90      	pop	{r4, r7}
 800102c:	4770      	bx	lr
	...

08001030 <SCHEDULER_init>:
/*
 * @brief Must be called after TASK_init function
 * 	      Store the pointer to the scheduler and event task to buy time
 */
void SCHEDULER_init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	task_scheduler = TASK_get_task(task_ids_eSCHEDULER);
 8001034:	2000      	movs	r0, #0
 8001036:	f000 fb01 	bl	800163c <TASK_get_task>
 800103a:	4603      	mov	r3, r0
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <SCHEDULER_init+0x20>)
 800103e:	6013      	str	r3, [r2, #0]
	task_event = TASK_get_task(task_ids_eEVENTS);
 8001040:	2001      	movs	r0, #1
 8001042:	f000 fafb 	bl	800163c <TASK_get_task>
 8001046:	4603      	mov	r3, r0
 8001048:	4a02      	ldr	r2, [pc, #8]	; (8001054 <SCHEDULER_init+0x24>)
 800104a:	6013      	str	r3, [r2, #0]
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000540 	.word	0x20000540
 8001054:	20000544 	.word	0x20000544

08001058 <SCHEDULER_run>:

/*
 * @brief It calls tasks one after another according to their priorities and current modes
 */
void SCHEDULER_run(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
	uint32_t current_time_us = TIME_us();
 800105e:	f000 fb01 	bl	8001664 <TIME_us>
 8001062:	60f8      	str	r0, [r7, #12]
	task_t * task = get_first_task();
 8001064:	f000 f8c2 	bl	80011ec <get_first_task>
 8001068:	60b8      	str	r0, [r7, #8]
	bool_e task_executed = FALSE ;
 800106a:	2300      	movs	r3, #0
 800106c:	71fb      	strb	r3, [r7, #7]
	while(task_queu_position < task_queu_size && task != NULL)
 800106e:	e04d      	b.n	800110c <SCHEDULER_run+0xb4>
	{

		switch(task->mode)
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	789b      	ldrb	r3, [r3, #2]
 8001074:	2b03      	cmp	r3, #3
 8001076:	d006      	beq.n	8001086 <SCHEDULER_run+0x2e>
 8001078:	2b03      	cmp	r3, #3
 800107a:	dc32      	bgt.n	80010e2 <SCHEDULER_run+0x8a>
 800107c:	2b01      	cmp	r3, #1
 800107e:	d00a      	beq.n	8001096 <SCHEDULER_run+0x3e>
 8001080:	2b02      	cmp	r3, #2
 8001082:	d023      	beq.n	80010cc <SCHEDULER_run+0x74>
				task->mode = task_mode_eWAIT ;
				break;
			case task_mode_eTIMMER :
			case task_mode_eWAIT:
			default:
				break;
 8001084:	e02d      	b.n	80010e2 <SCHEDULER_run+0x8a>
				current_time_us = task_process(task, current_time_us);
 8001086:	68f9      	ldr	r1, [r7, #12]
 8001088:	68b8      	ldr	r0, [r7, #8]
 800108a:	f000 f8d5 	bl	8001238 <task_process>
 800108e:	60f8      	str	r0, [r7, #12]
				task_executed = TRUE ;
 8001090:	2301      	movs	r3, #1
 8001092:	71fb      	strb	r3, [r7, #7]
				break;
 8001094:	e028      	b.n	80010e8 <SCHEDULER_run+0x90>
				if(current_time_us >= task->desired_next_start_us){
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	6a1b      	ldr	r3, [r3, #32]
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	429a      	cmp	r2, r3
 800109e:	d322      	bcc.n	80010e6 <SCHEDULER_run+0x8e>
					current_time_us = task_process(task, current_time_us);
 80010a0:	68f9      	ldr	r1, [r7, #12]
 80010a2:	68b8      	ldr	r0, [r7, #8]
 80010a4:	f000 f8c8 	bl	8001238 <task_process>
 80010a8:	60f8      	str	r0, [r7, #12]
					task->desired_next_start_us = task->desired_period_us - (int32_t)task->lag_average + current_time_us ;
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	edd2 7a02 	vldr	s15, [r2, #8]
 80010b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010b8:	ee17 2a90 	vmov	r2, s15
 80010bc:	1a9a      	subs	r2, r3, r2
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	441a      	add	r2, r3
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	621a      	str	r2, [r3, #32]
					task_executed = TRUE ;
 80010c6:	2301      	movs	r3, #1
 80010c8:	71fb      	strb	r3, [r7, #7]
				break;
 80010ca:	e00c      	b.n	80010e6 <SCHEDULER_run+0x8e>
				current_time_us = task_process(task, current_time_us);
 80010cc:	68f9      	ldr	r1, [r7, #12]
 80010ce:	68b8      	ldr	r0, [r7, #8]
 80010d0:	f000 f8b2 	bl	8001238 <task_process>
 80010d4:	60f8      	str	r0, [r7, #12]
				task_executed = TRUE ;
 80010d6:	2301      	movs	r3, #1
 80010d8:	71fb      	strb	r3, [r7, #7]
				task->mode = task_mode_eWAIT ;
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	2200      	movs	r2, #0
 80010de:	709a      	strb	r2, [r3, #2]
				break;
 80010e0:	e002      	b.n	80010e8 <SCHEDULER_run+0x90>
				break;
 80010e2:	bf00      	nop
 80010e4:	e000      	b.n	80010e8 <SCHEDULER_run+0x90>
				break;
 80010e6:	bf00      	nop
		}
		/* Stop the while loop when once a task gets executed */
		if(task_executed && (task != task_scheduler) && (task != task_event))
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d009      	beq.n	8001102 <SCHEDULER_run+0xaa>
 80010ee:	4b0f      	ldr	r3, [pc, #60]	; (800112c <SCHEDULER_run+0xd4>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d004      	beq.n	8001102 <SCHEDULER_run+0xaa>
 80010f8:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <SCHEDULER_run+0xd8>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	68ba      	ldr	r2, [r7, #8]
 80010fe:	429a      	cmp	r2, r3
 8001100:	d10e      	bne.n	8001120 <SCHEDULER_run+0xc8>
		{
			break;
		}
		task_executed = FALSE ;
 8001102:	2300      	movs	r3, #0
 8001104:	71fb      	strb	r3, [r7, #7]
		task = get_next_task();
 8001106:	f000 f881 	bl	800120c <get_next_task>
 800110a:	60b8      	str	r0, [r7, #8]
	while(task_queu_position < task_queu_size && task != NULL)
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <SCHEDULER_run+0xdc>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <SCHEDULER_run+0xe0>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	429a      	cmp	r2, r3
 8001116:	d204      	bcs.n	8001122 <SCHEDULER_run+0xca>
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1a8      	bne.n	8001070 <SCHEDULER_run+0x18>
	}
}
 800111e:	e000      	b.n	8001122 <SCHEDULER_run+0xca>
			break;
 8001120:	bf00      	nop
}
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000540 	.word	0x20000540
 8001130:	20000544 	.word	0x20000544
 8001134:	20000524 	.word	0x20000524
 8001138:	20000520 	.word	0x20000520

0800113c <SCHEDULER_task>:

/*
 * @brief Check for some tasks that requires to change of mode
 */
void SCHEDULER_task(void)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
	for(uint8_t t = 0; t < task_to_moove_counter; t++)
 8001142:	2300      	movs	r3, #0
 8001144:	71fb      	strb	r3, [r7, #7]
 8001146:	e00a      	b.n	800115e <SCHEDULER_task+0x22>
	{
		task_to_change[t]->mode = change_mode[t] ;
 8001148:	79fa      	ldrb	r2, [r7, #7]
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	490b      	ldr	r1, [pc, #44]	; (800117c <SCHEDULER_task+0x40>)
 800114e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001152:	490b      	ldr	r1, [pc, #44]	; (8001180 <SCHEDULER_task+0x44>)
 8001154:	5c8a      	ldrb	r2, [r1, r2]
 8001156:	709a      	strb	r2, [r3, #2]
	for(uint8_t t = 0; t < task_to_moove_counter; t++)
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	3301      	adds	r3, #1
 800115c:	71fb      	strb	r3, [r7, #7]
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <SCHEDULER_task+0x48>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	79fa      	ldrb	r2, [r7, #7]
 8001164:	429a      	cmp	r2, r3
 8001166:	d3ef      	bcc.n	8001148 <SCHEDULER_task+0xc>
	}
	task_to_moove_counter = 0 ;
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <SCHEDULER_task+0x48>)
 800116a:	2200      	movs	r2, #0
 800116c:	701a      	strb	r2, [r3, #0]
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20000528 	.word	0x20000528
 8001180:	20000538 	.word	0x20000538
 8001184:	2000053c 	.word	0x2000053c

08001188 <SCHEDULER_enable_task>:
 * @brief Add or remove a task to / from the queue
 * @param id The id of the task
 * @param enable Enable (Add) or disable (remove) a task
 */
void SCHEDULER_enable_task(task_ids_e id, bool_e enable)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	460a      	mov	r2, r1
 8001192:	71fb      	strb	r3, [r7, #7]
 8001194:	4613      	mov	r3, r2
 8001196:	71bb      	strb	r3, [r7, #6]
	if(enable)
 8001198:	79bb      	ldrb	r3, [r7, #6]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d008      	beq.n	80011b0 <SCHEDULER_enable_task+0x28>
	{
		queu_add(TASK_get_task(id));
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 fa4b 	bl	800163c <TASK_get_task>
 80011a6:	4603      	mov	r3, r0
 80011a8:	4618      	mov	r0, r3
 80011aa:	f000 f963 	bl	8001474 <queu_add>
	}
	else
	{
		queu_remove(TASK_get_task(id));
	}
}
 80011ae:	e007      	b.n	80011c0 <SCHEDULER_enable_task+0x38>
		queu_remove(TASK_get_task(id));
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 fa42 	bl	800163c <TASK_get_task>
 80011b8:	4603      	mov	r3, r0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 f9b8 	bl	8001530 <queu_remove>
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <SCHEDULER_reschedule_task>:
 * @brief Change the execution period of a task
 * @param id The id of the task
 * @param new_period_us The new desired period
 */
void SCHEDULER_reschedule_task(task_ids_e id, uint32_t new_period_us)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	71fb      	strb	r3, [r7, #7]
	task_t * task = TASK_get_task(id);
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 fa30 	bl	800163c <TASK_get_task>
 80011dc:	60f8      	str	r0, [r7, #12]
	task->desired_period_us = new_period_us ;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	615a      	str	r2, [r3, #20]
}
 80011e4:	bf00      	nop
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <get_first_task>:

/*
 * @brief get the first task of the queue
 */
static task_t * get_first_task(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
	task_queu_position = 0 ;
 80011f0:	4b04      	ldr	r3, [pc, #16]	; (8001204 <get_first_task+0x18>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
	return task_queu[0] ;
 80011f6:	4b04      	ldr	r3, [pc, #16]	; (8001208 <get_first_task+0x1c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	20000524 	.word	0x20000524
 8001208:	20000510 	.word	0x20000510

0800120c <get_next_task>:
/*
 * @brief get the next task in the queue
 * @return the next task
 */
static task_t * get_next_task(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
	return task_queu[++task_queu_position];
 8001210:	4b07      	ldr	r3, [pc, #28]	; (8001230 <get_next_task+0x24>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	3301      	adds	r3, #1
 8001216:	4a06      	ldr	r2, [pc, #24]	; (8001230 <get_next_task+0x24>)
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	4b05      	ldr	r3, [pc, #20]	; (8001230 <get_next_task+0x24>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a05      	ldr	r2, [pc, #20]	; (8001234 <get_next_task+0x28>)
 8001220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001224:	4618      	mov	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20000524 	.word	0x20000524
 8001234:	20000510 	.word	0x20000510

08001238 <task_process>:

static uint32_t task_process(task_t * task, uint32_t current_time_us){
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]

	/* If the task has no process associated, we just stop here before making a mistake .. */
	if(task->process == NULL)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <task_process+0x16>
	{
		return current_time_us ;
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	e0e4      	b.n	8001418 <task_process+0x1e0>
	}

	/* Compute the real period using the moving average */
	task->real_period_us_average_sum -= task->real_period_us_average_array[task->average_index];
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001258:	6879      	ldr	r1, [r7, #4]
 800125a:	3308      	adds	r3, #8
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	440b      	add	r3, r1
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	1ad2      	subs	r2, r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	675a      	str	r2, [r3, #116]	; 0x74
	task->real_period_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69da      	ldr	r2, [r3, #28]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001272:	6839      	ldr	r1, [r7, #0]
 8001274:	1a8a      	subs	r2, r1, r2
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	3308      	adds	r3, #8
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	440b      	add	r3, r1
 800127e:	605a      	str	r2, [r3, #4]
	task->real_period_us_average_sum += task->real_period_us_average_array[task->average_index] ;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	3308      	adds	r3, #8
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	440b      	add	r3, r1
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	441a      	add	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	675a      	str	r2, [r3, #116]	; 0x74
	task->real_period_us = task->real_period_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800129e:	4a60      	ldr	r2, [pc, #384]	; (8001420 <task_process+0x1e8>)
 80012a0:	fba2 2303 	umull	r2, r3, r2, r3
 80012a4:	091a      	lsrs	r2, r3, #4
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	619a      	str	r2, [r3, #24]

	/* Lag compensation */
	if(task->mode == task_mode_eTIME)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	789b      	ldrb	r3, [r3, #2]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d142      	bne.n	8001338 <task_process+0x100>
	{
		if(task->real_period_us_average_array[task->average_index] > task->desired_period_us)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	3308      	adds	r3, #8
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	4413      	add	r3, r2
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d91b      	bls.n	8001302 <task_process+0xca>
		{
			task->lag_average += (float)(task->real_period_us_average_array[task->average_index] - task->desired_period_us) * 0.5f ;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	ed93 7a02 	vldr	s14, [r3, #8]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	3308      	adds	r3, #8
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	4413      	add	r3, r2
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	ee07 3a90 	vmov	s15, r3
 80012ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012ee:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80012f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80012f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	edc3 7a02 	vstr	s15, [r3, #8]
 8001300:	e01a      	b.n	8001338 <task_process+0x100>
		}

		else
		{
			task->lag_average -= (float)(task->desired_period_us - task->real_period_us_average_array[task->average_index]) * 0.5f ;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	ed93 7a02 	vldr	s14, [r3, #8]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	695a      	ldr	r2, [r3, #20]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	3308      	adds	r3, #8
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	440b      	add	r3, r1
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	ee07 3a90 	vmov	s15, r3
 8001322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001326:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800132a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800132e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	edc3 7a02 	vstr	s15, [r3, #8]
		}
	}
	task->last_execution_us = current_time_us ;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	61da      	str	r2, [r3, #28]
	task->process(current_time_us);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	6838      	ldr	r0, [r7, #0]
 8001344:	4798      	blx	r3
	current_time_us = TIME_us();
 8001346:	f000 f98d 	bl	8001664 <TIME_us>
 800134a:	6038      	str	r0, [r7, #0]
	/* Compute the "burst time" with the moving average */
	task->duration_us_average_sum -= task->duration_us_average_array[task->average_index];
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	311e      	adds	r1, #30
 800135c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001360:	1ad2      	subs	r2, r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	task->duration_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	69db      	ldr	r3, [r3, #28]
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	f8d2 20cc 	ldr.w	r2, [r2, #204]	; 0xcc
 8001372:	6839      	ldr	r1, [r7, #0]
 8001374:	1ac9      	subs	r1, r1, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	321e      	adds	r2, #30
 800137a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	task->duration_us_worst = MAX(task->duration_us_average_array[task->average_index] , task->duration_us_worst);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	691a      	ldr	r2, [r3, #16]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	311e      	adds	r1, #30
 800138c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001390:	429a      	cmp	r2, r3
 8001392:	bf38      	it	cc
 8001394:	461a      	movcc	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	611a      	str	r2, [r3, #16]
	task->duration_us_average_sum += task->duration_us_average_array[task->average_index];
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	311e      	adds	r1, #30
 80013aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80013ae:	441a      	add	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	task->duration_us = task->duration_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80013bc:	4a18      	ldr	r2, [pc, #96]	; (8001420 <task_process+0x1e8>)
 80013be:	fba2 2303 	umull	r2, r3, r2, r3
 80013c2:	091a      	lsrs	r2, r3, #4
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	60da      	str	r2, [r3, #12]

	if(task->duration_us_average_array[task->average_index] > 1000)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	321e      	adds	r2, #30
 80013d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013da:	d90c      	bls.n	80013f6 <task_process+0x1be>
		task->duration_us_average_array[task->average_index] ++ ;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	f103 011e 	add.w	r1, r3, #30
 80013e8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80013ec:	1c51      	adds	r1, r2, #1
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	331e      	adds	r3, #30
 80013f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if(++task->average_index == TASK_STAT_AVERAGE_OVER)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80013fc:	1c5a      	adds	r2, r3, #1
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800140a:	2b14      	cmp	r3, #20
 800140c:	d103      	bne.n	8001416 <task_process+0x1de>
		task->average_index = 0 ;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	return current_time_us ;
 8001416:	683b      	ldr	r3, [r7, #0]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	cccccccd 	.word	0xcccccccd

08001424 <queu_contains>:
 * @brief Check if the given task is currently in the queue
 * @param task pointer to a task
 * @return true when it does contains the task, false otherwise
 */
static bool_e queu_contains(task_t * task)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	if(task == NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <queu_contains+0x12>
	{
		return FALSE ;
 8001432:	2300      	movs	r3, #0
 8001434:	e014      	b.n	8001460 <queu_contains+0x3c>
	}
	for(uint32_t t = 0; t < task_queu_size; t++)
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	e00b      	b.n	8001454 <queu_contains+0x30>
	{
		if(task_queu[t] == task)
 800143c:	4a0b      	ldr	r2, [pc, #44]	; (800146c <queu_contains+0x48>)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	429a      	cmp	r2, r3
 8001448:	d101      	bne.n	800144e <queu_contains+0x2a>
			{
				return TRUE ;
 800144a:	2301      	movs	r3, #1
 800144c:	e008      	b.n	8001460 <queu_contains+0x3c>
	for(uint32_t t = 0; t < task_queu_size; t++)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	3301      	adds	r3, #1
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <queu_contains+0x4c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	429a      	cmp	r2, r3
 800145c:	d3ee      	bcc.n	800143c <queu_contains+0x18>
			}
	}

	return FALSE ;
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	20000510 	.word	0x20000510
 8001470:	20000520 	.word	0x20000520

08001474 <queu_add>:
 * @brief Add a task to the queue
 * @param task pointer to the task to add
 * @return true when added, false otherwise
 */
static bool_e queu_add(task_t * task)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]

	if(queu_contains(task) || task_queu_size >= task_ids_eCOUNT || task == NULL)
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff ffd1 	bl	8001424 <queu_contains>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d106      	bne.n	8001496 <queu_add+0x22>
 8001488:	4b27      	ldr	r3, [pc, #156]	; (8001528 <queu_add+0xb4>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b03      	cmp	r3, #3
 800148e:	d802      	bhi.n	8001496 <queu_add+0x22>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d101      	bne.n	800149a <queu_add+0x26>
	{
		return FALSE ;
 8001496:	2300      	movs	r3, #0
 8001498:	e041      	b.n	800151e <queu_add+0xaa>
	}
	uint32_t t = 0 ;
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
	while(t < task_ids_eCOUNT)
 800149e:	e03a      	b.n	8001516 <queu_add+0xa2>
	{
		if(task_queu[t] == NULL)
 80014a0:	4a22      	ldr	r2, [pc, #136]	; (800152c <queu_add+0xb8>)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d10b      	bne.n	80014c4 <queu_add+0x50>
		{
			task_queu[t] = task ;
 80014ac:	491f      	ldr	r1, [pc, #124]	; (800152c <queu_add+0xb8>)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			task_queu_size ++ ;
 80014b6:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <queu_add+0xb4>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	3301      	adds	r3, #1
 80014bc:	4a1a      	ldr	r2, [pc, #104]	; (8001528 <queu_add+0xb4>)
 80014be:	6013      	str	r3, [r2, #0]
			return TRUE;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e02c      	b.n	800151e <queu_add+0xaa>
		}
		else if(task->static_priority > task_queu[t]->static_priority){
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	781a      	ldrb	r2, [r3, #0]
 80014c8:	4918      	ldr	r1, [pc, #96]	; (800152c <queu_add+0xb8>)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d91c      	bls.n	8001510 <queu_add+0x9c>
			memmove(&task_queu[t+1], &task_queu[t], sizeof(task) * (task_queu_size - t));
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	3301      	adds	r3, #1
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4a13      	ldr	r2, [pc, #76]	; (800152c <queu_add+0xb8>)
 80014de:	1898      	adds	r0, r3, r2
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4a11      	ldr	r2, [pc, #68]	; (800152c <queu_add+0xb8>)
 80014e6:	1899      	adds	r1, r3, r2
 80014e8:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <queu_add+0xb4>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	461a      	mov	r2, r3
 80014f4:	f005 f94c 	bl	8006790 <memmove>
			task_queu[t] = task ;
 80014f8:	490c      	ldr	r1, [pc, #48]	; (800152c <queu_add+0xb8>)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			task_queu_size ++ ;
 8001502:	4b09      	ldr	r3, [pc, #36]	; (8001528 <queu_add+0xb4>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	3301      	adds	r3, #1
 8001508:	4a07      	ldr	r2, [pc, #28]	; (8001528 <queu_add+0xb4>)
 800150a:	6013      	str	r3, [r2, #0]
			return TRUE ;
 800150c:	2301      	movs	r3, #1
 800150e:	e006      	b.n	800151e <queu_add+0xaa>
		}
		t++;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	3301      	adds	r3, #1
 8001514:	60fb      	str	r3, [r7, #12]
	while(t < task_ids_eCOUNT)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2b03      	cmp	r3, #3
 800151a:	d9c1      	bls.n	80014a0 <queu_add+0x2c>
	}
	return FALSE ;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000520 	.word	0x20000520
 800152c:	20000510 	.word	0x20000510

08001530 <queu_remove>:
 * @brief remove a task from the queue
 * @param task pointer to the task to remove
 * @return true if the task was removed, false otherwise
 */
static bool_e queu_remove(task_t * task)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	if(!queu_contains(task) || task == NULL)
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff ff73 	bl	8001424 <queu_contains>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d002      	beq.n	800154a <queu_remove+0x1a>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <queu_remove+0x1e>
	{
		return FALSE ;
 800154a:	2300      	movs	r3, #0
 800154c:	e02a      	b.n	80015a4 <queu_remove+0x74>
	}
	for(uint32_t t = 0; t < task_queu_size; t ++)
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	e021      	b.n	8001598 <queu_remove+0x68>
	{
		if(task == task_queu[t])
 8001554:	4a15      	ldr	r2, [pc, #84]	; (80015ac <queu_remove+0x7c>)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	429a      	cmp	r2, r3
 8001560:	d117      	bne.n	8001592 <queu_remove+0x62>
		{
			memmove(&task_queu[t], &task_queu[t+1], sizeof(task) * (task_queu_size - t));
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4a11      	ldr	r2, [pc, #68]	; (80015ac <queu_remove+0x7c>)
 8001568:	1898      	adds	r0, r3, r2
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	3301      	adds	r3, #1
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4a0e      	ldr	r2, [pc, #56]	; (80015ac <queu_remove+0x7c>)
 8001572:	1899      	adds	r1, r3, r2
 8001574:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <queu_remove+0x80>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	461a      	mov	r2, r3
 8001580:	f005 f906 	bl	8006790 <memmove>
			task_queu_size -- ;
 8001584:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <queu_remove+0x80>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	3b01      	subs	r3, #1
 800158a:	4a09      	ldr	r2, [pc, #36]	; (80015b0 <queu_remove+0x80>)
 800158c:	6013      	str	r3, [r2, #0]
			return TRUE ;
 800158e:	2301      	movs	r3, #1
 8001590:	e008      	b.n	80015a4 <queu_remove+0x74>
	for(uint32_t t = 0; t < task_queu_size; t ++)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	3301      	adds	r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <queu_remove+0x80>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d3d8      	bcc.n	8001554 <queu_remove+0x24>
		}
	}
	return FALSE ;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000510 	.word	0x20000510
 80015b0:	20000520 	.word	0x20000520

080015b4 <TASK_Init>:
/*
 * @brief Initialization of every task
 * @param mark1_ pointer to a system_t structure
 */
void TASK_Init(system_t * mark1_)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	mark1 = mark1_;
 80015bc:	4a09      	ldr	r2, [pc, #36]	; (80015e4 <TASK_Init+0x30>)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6013      	str	r3, [r2, #0]
	SCHEDULER_enable_task(task_ids_eEVENTS, TRUE);
 80015c2:	2101      	movs	r1, #1
 80015c4:	2001      	movs	r0, #1
 80015c6:	f7ff fddf 	bl	8001188 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(task_ids_eSCHEDULER, TRUE);
 80015ca:	2101      	movs	r1, #1
 80015cc:	2000      	movs	r0, #0
 80015ce:	f7ff fddb 	bl	8001188 <SCHEDULER_enable_task>
//	SCHEDULER_enable_task(task_ids_eGYRO_UPDATE, TRUE);
	SCHEDULER_enable_task(task_ids_eDATA_LOGGER, TRUE);
 80015d2:	2101      	movs	r1, #1
 80015d4:	2002      	movs	r0, #2
 80015d6:	f7ff fdd7 	bl	8001188 <SCHEDULER_enable_task>
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000548 	.word	0x20000548

080015e8 <process_scheduler>:

/*
 * @brief Call the scheduler main function
 */
static void process_scheduler(uint32_t current_time_us)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
	SCHEDULER_task();
 80015f0:	f7ff fda4 	bl	800113c <SCHEDULER_task>
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <process_events>:

/*
 * @brief Call the scheduler main function
 */
static void process_events(uint32_t current_time_us)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
	UNUSED(current_time_us);
	EVENT_process(FALSE);
 8001604:	2000      	movs	r0, #0
 8001606:	f7ff fc21 	bl	8000e4c <EVENT_process>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <process_data_logger>:

/*
 * @brief Call the data logger main function
 */
static void process_data_logger(uint32_t current_time_us)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
	UNUSED(current_time_us);
	DATA_LOGGER_Main();
 800161a:	f7fe ffd7 	bl	80005cc <DATA_LOGGER_Main>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <process_gyro_update>:

/*
 * @brief Measure new data from the gyro
 */
static void process_gyro_update(uint32_t current_time_us)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
	MPU_Read_All();
 800162e:	f000 fb77 	bl	8001d20 <MPU_Read_All>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <TASK_get_task>:
 * @brief Return a pointer to a task for a given task id
 * @param id Id of the task
 * @return Pointer to the task
 */
task_t * TASK_get_task(task_ids_e id)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	71fb      	strb	r3, [r7, #7]
	return &tasks[id];
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	22d0      	movs	r2, #208	; 0xd0
 800164a:	fb02 f303 	mul.w	r3, r2, r3
 800164e:	4a04      	ldr	r2, [pc, #16]	; (8001660 <TASK_get_task+0x24>)
 8001650:	4413      	add	r3, r2
}
 8001652:	4618      	mov	r0, r3
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	20000004 	.word	0x20000004

08001664 <TIME_us>:

#include "time.h"


uint32_t TIME_us(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800166a:	b672      	cpsid	i
}
 800166c:	bf00      	nop

	uint32_t t_us;
	static uint32_t previous_t_us = 0;
	__disable_irq();
	t_us = HAL_GetTick() * 1000 + 1000 - SysTick->VAL / 168;
 800166e:	f001 f94b 	bl	8002908 <HAL_GetTick>
 8001672:	4603      	mov	r3, r0
 8001674:	3301      	adds	r3, #1
 8001676:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800167a:	fb02 f203 	mul.w	r2, r2, r3
 800167e:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <TIME_us+0x54>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	08db      	lsrs	r3, r3, #3
 8001684:	490d      	ldr	r1, [pc, #52]	; (80016bc <TIME_us+0x58>)
 8001686:	fba1 1303 	umull	r1, r3, r1, r3
 800168a:	085b      	lsrs	r3, r3, #1
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8001690:	b662      	cpsie	i
}
 8001692:	bf00      	nop
	__enable_irq();

	if(previous_t_us > t_us)
 8001694:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <TIME_us+0x5c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	429a      	cmp	r2, r3
 800169c:	d203      	bcs.n	80016a6 <TIME_us+0x42>
		t_us += 1000;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80016a4:	607b      	str	r3, [r7, #4]
	previous_t_us = t_us ;
 80016a6:	4a06      	ldr	r2, [pc, #24]	; (80016c0 <TIME_us+0x5c>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6013      	str	r3, [r2, #0]

	return t_us;
 80016ac:	687b      	ldr	r3, [r7, #4]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	e000e010 	.word	0xe000e010
 80016bc:	18618619 	.word	0x18618619
 80016c0:	2000054c 	.word	0x2000054c

080016c4 <SPI_Transmit_Receive>:
 * @param transmit Data to transmit
 * @param receive Buffer to put the data
 * @param len Number of byte
 */
void SPI_Transmit_Receive(spi_e spi_id, cs_e cs_id, uint8_t * transmit, uint8_t * receive, uint16_t len)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af02      	add	r7, sp, #8
 80016ca:	60ba      	str	r2, [r7, #8]
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	4603      	mov	r3, r0
 80016d0:	73fb      	strb	r3, [r7, #15]
 80016d2:	460b      	mov	r3, r1
 80016d4:	73bb      	strb	r3, [r7, #14]
	/* Lock the chip */
	HAL_GPIO_WritePin(cs[cs_id].port, cs[cs_id].pin_high, GPIO_PIN_RESET);
 80016d6:	7bba      	ldrb	r2, [r7, #14]
 80016d8:	491c      	ldr	r1, [pc, #112]	; (800174c <SPI_Transmit_Receive+0x88>)
 80016da:	4613      	mov	r3, r2
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	4413      	add	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	440b      	add	r3, r1
 80016e4:	6818      	ldr	r0, [r3, #0]
 80016e6:	7bba      	ldrb	r2, [r7, #14]
 80016e8:	4918      	ldr	r1, [pc, #96]	; (800174c <SPI_Transmit_Receive+0x88>)
 80016ea:	4613      	mov	r3, r2
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	4413      	add	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	440b      	add	r3, r1
 80016f4:	3304      	adds	r3, #4
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	2200      	movs	r2, #0
 80016fc:	4619      	mov	r1, r3
 80016fe:	f001 ffe3 	bl	80036c8 <HAL_GPIO_WritePin>
	/* Send data */
	HAL_SPI_TransmitReceive(spi[spi_id].hspi, transmit, receive, len, SPI_TRANSMIT_TIMEOUT);
 8001702:	7bfb      	ldrb	r3, [r7, #15]
 8001704:	4a12      	ldr	r2, [pc, #72]	; (8001750 <SPI_Transmit_Receive+0x8c>)
 8001706:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800170a:	8b3b      	ldrh	r3, [r7, #24]
 800170c:	2205      	movs	r2, #5
 800170e:	9200      	str	r2, [sp, #0]
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	68b9      	ldr	r1, [r7, #8]
 8001714:	f002 fcc3 	bl	800409e <HAL_SPI_TransmitReceive>
	/* Unlock the chip */
	HAL_GPIO_WritePin(cs[cs_id].port, cs[cs_id].pin_high, GPIO_PIN_SET);
 8001718:	7bba      	ldrb	r2, [r7, #14]
 800171a:	490c      	ldr	r1, [pc, #48]	; (800174c <SPI_Transmit_Receive+0x88>)
 800171c:	4613      	mov	r3, r2
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	4413      	add	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	440b      	add	r3, r1
 8001726:	6818      	ldr	r0, [r3, #0]
 8001728:	7bba      	ldrb	r2, [r7, #14]
 800172a:	4908      	ldr	r1, [pc, #32]	; (800174c <SPI_Transmit_Receive+0x88>)
 800172c:	4613      	mov	r3, r2
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	4413      	add	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	440b      	add	r3, r1
 8001736:	3304      	adds	r3, #4
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	b29b      	uxth	r3, r3
 800173c:	2201      	movs	r2, #1
 800173e:	4619      	mov	r1, r3
 8001740:	f001 ffc2 	bl	80036c8 <HAL_GPIO_WritePin>
}
 8001744:	bf00      	nop
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000344 	.word	0x20000344
 8001750:	20000350 	.word	0x20000350

08001754 <TIMER_Start_All_Channels>:
/*
 * @brief Start all channels of a timer
 * @param timer_id id of the timer
 */
void TIMER_Start_All_Channels(timer_e timer_id)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
	HAL_TIM_PWM_Start(timer[timer_id].htim, TIM_CHANNEL_1);
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	4a11      	ldr	r2, [pc, #68]	; (80017a8 <TIMER_Start_All_Channels+0x54>)
 8001762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001766:	2100      	movs	r1, #0
 8001768:	4618      	mov	r0, r3
 800176a:	f003 f8cb 	bl	8004904 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer[timer_id].htim, TIM_CHANNEL_2);
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	4a0d      	ldr	r2, [pc, #52]	; (80017a8 <TIMER_Start_All_Channels+0x54>)
 8001772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001776:	2104      	movs	r1, #4
 8001778:	4618      	mov	r0, r3
 800177a:	f003 f8c3 	bl	8004904 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer[timer_id].htim, TIM_CHANNEL_3);
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	4a09      	ldr	r2, [pc, #36]	; (80017a8 <TIMER_Start_All_Channels+0x54>)
 8001782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001786:	2108      	movs	r1, #8
 8001788:	4618      	mov	r0, r3
 800178a:	f003 f8bb 	bl	8004904 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer[timer_id].htim, TIM_CHANNEL_4);
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	4a05      	ldr	r2, [pc, #20]	; (80017a8 <TIMER_Start_All_Channels+0x54>)
 8001792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001796:	210c      	movs	r1, #12
 8001798:	4618      	mov	r0, r3
 800179a:	f003 f8b3 	bl	8004904 <HAL_TIM_PWM_Start>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000354 	.word	0x20000354

080017ac <UART_Idle_Line_Callback>:
/* -------------------------- Public callback functions -------------------------- */
/*
 * @brief Update the read index when the idle flag is raised
 */
void UART_Idle_Line_Callback(uart_e id)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
	if(__HAL_UART_GET_FLAG(uart[id].huart, UART_FLAG_IDLE))
 80017b6:	79fa      	ldrb	r2, [r7, #7]
 80017b8:	4922      	ldr	r1, [pc, #136]	; (8001844 <UART_Idle_Line_Callback+0x98>)
 80017ba:	4613      	mov	r3, r2
 80017bc:	019b      	lsls	r3, r3, #6
 80017be:	4413      	add	r3, r2
 80017c0:	011b      	lsls	r3, r3, #4
 80017c2:	440b      	add	r3, r1
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0310 	and.w	r3, r3, #16
 80017ce:	2b10      	cmp	r3, #16
 80017d0:	d132      	bne.n	8001838 <UART_Idle_Line_Callback+0x8c>
	{
		uart[id].index_write_rx = LEN_BUFFER - uart[id].huart->hdmarx->Instance->NDTR ;
 80017d2:	79fa      	ldrb	r2, [r7, #7]
 80017d4:	491b      	ldr	r1, [pc, #108]	; (8001844 <UART_Idle_Line_Callback+0x98>)
 80017d6:	4613      	mov	r3, r2
 80017d8:	019b      	lsls	r3, r3, #6
 80017da:	4413      	add	r3, r2
 80017dc:	011b      	lsls	r3, r3, #4
 80017de:	440b      	add	r3, r1
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	79fa      	ldrb	r2, [r7, #7]
 80017ec:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80017f0:	b298      	uxth	r0, r3
 80017f2:	4914      	ldr	r1, [pc, #80]	; (8001844 <UART_Idle_Line_Callback+0x98>)
 80017f4:	4613      	mov	r3, r2
 80017f6:	019b      	lsls	r3, r3, #6
 80017f8:	4413      	add	r3, r2
 80017fa:	011b      	lsls	r3, r3, #4
 80017fc:	440b      	add	r3, r1
 80017fe:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8001802:	4602      	mov	r2, r0
 8001804:	801a      	strh	r2, [r3, #0]
	  __HAL_UART_CLEAR_IDLEFLAG(uart[id].huart);
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	79fa      	ldrb	r2, [r7, #7]
 800180c:	490d      	ldr	r1, [pc, #52]	; (8001844 <UART_Idle_Line_Callback+0x98>)
 800180e:	4613      	mov	r3, r2
 8001810:	019b      	lsls	r3, r3, #6
 8001812:	4413      	add	r3, r2
 8001814:	011b      	lsls	r3, r3, #4
 8001816:	440b      	add	r3, r1
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	79fa      	ldrb	r2, [r7, #7]
 8001822:	4908      	ldr	r1, [pc, #32]	; (8001844 <UART_Idle_Line_Callback+0x98>)
 8001824:	4613      	mov	r3, r2
 8001826:	019b      	lsls	r3, r3, #6
 8001828:	4413      	add	r3, r2
 800182a:	011b      	lsls	r3, r3, #4
 800182c:	440b      	add	r3, r1
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]
	}
}
 8001838:	bf00      	nop
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	20000550 	.word	0x20000550

08001848 <UART_Transfer_Complete_Callback>:

/*
 * @brief Re start the dma transfer if there is data to send or reset the transmission state to idle
 */
void UART_Transfer_Complete_Callback(uart_e id)
{
 8001848:	b590      	push	{r4, r7, lr}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	71fb      	strb	r3, [r7, #7]
	if(uart[id].index_write_tx != uart[id].index_read_tx)
 8001852:	79fa      	ldrb	r2, [r7, #7]
 8001854:	494d      	ldr	r1, [pc, #308]	; (800198c <UART_Transfer_Complete_Callback+0x144>)
 8001856:	4613      	mov	r3, r2
 8001858:	019b      	lsls	r3, r3, #6
 800185a:	4413      	add	r3, r2
 800185c:	011b      	lsls	r3, r3, #4
 800185e:	440b      	add	r3, r1
 8001860:	f203 2306 	addw	r3, r3, #518	; 0x206
 8001864:	8819      	ldrh	r1, [r3, #0]
 8001866:	79fa      	ldrb	r2, [r7, #7]
 8001868:	4848      	ldr	r0, [pc, #288]	; (800198c <UART_Transfer_Complete_Callback+0x144>)
 800186a:	4613      	mov	r3, r2
 800186c:	019b      	lsls	r3, r3, #6
 800186e:	4413      	add	r3, r2
 8001870:	011b      	lsls	r3, r3, #4
 8001872:	4403      	add	r3, r0
 8001874:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	4299      	cmp	r1, r3
 800187c:	d077      	beq.n	800196e <UART_Transfer_Complete_Callback+0x126>
	{
		uint16_t nb_bytes_to_read = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	81fb      	strh	r3, [r7, #14]
		if(uart[id].index_write_tx > uart[id].index_read_rx)
 8001882:	79fa      	ldrb	r2, [r7, #7]
 8001884:	4941      	ldr	r1, [pc, #260]	; (800198c <UART_Transfer_Complete_Callback+0x144>)
 8001886:	4613      	mov	r3, r2
 8001888:	019b      	lsls	r3, r3, #6
 800188a:	4413      	add	r3, r2
 800188c:	011b      	lsls	r3, r3, #4
 800188e:	440b      	add	r3, r1
 8001890:	f203 2306 	addw	r3, r3, #518	; 0x206
 8001894:	8819      	ldrh	r1, [r3, #0]
 8001896:	79fa      	ldrb	r2, [r7, #7]
 8001898:	483c      	ldr	r0, [pc, #240]	; (800198c <UART_Transfer_Complete_Callback+0x144>)
 800189a:	4613      	mov	r3, r2
 800189c:	019b      	lsls	r3, r3, #6
 800189e:	4413      	add	r3, r2
 80018a0:	011b      	lsls	r3, r3, #4
 80018a2:	4403      	add	r3, r0
 80018a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80018a8:	881b      	ldrh	r3, [r3, #0]
 80018aa:	4299      	cmp	r1, r3
 80018ac:	d916      	bls.n	80018dc <UART_Transfer_Complete_Callback+0x94>
		{
			nb_bytes_to_read = uart[id].index_write_tx - uart[id].index_read_tx;
 80018ae:	79fa      	ldrb	r2, [r7, #7]
 80018b0:	4936      	ldr	r1, [pc, #216]	; (800198c <UART_Transfer_Complete_Callback+0x144>)
 80018b2:	4613      	mov	r3, r2
 80018b4:	019b      	lsls	r3, r3, #6
 80018b6:	4413      	add	r3, r2
 80018b8:	011b      	lsls	r3, r3, #4
 80018ba:	440b      	add	r3, r1
 80018bc:	f203 2306 	addw	r3, r3, #518	; 0x206
 80018c0:	8819      	ldrh	r1, [r3, #0]
 80018c2:	79fa      	ldrb	r2, [r7, #7]
 80018c4:	4831      	ldr	r0, [pc, #196]	; (800198c <UART_Transfer_Complete_Callback+0x144>)
 80018c6:	4613      	mov	r3, r2
 80018c8:	019b      	lsls	r3, r3, #6
 80018ca:	4413      	add	r3, r2
 80018cc:	011b      	lsls	r3, r3, #4
 80018ce:	4403      	add	r3, r0
 80018d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	1acb      	subs	r3, r1, r3
 80018d8:	81fb      	strh	r3, [r7, #14]
 80018da:	e00c      	b.n	80018f6 <UART_Transfer_Complete_Callback+0xae>
		}
		else
		{
			nb_bytes_to_read = LEN_BUFFER - uart[id].index_read_tx;
 80018dc:	79fa      	ldrb	r2, [r7, #7]
 80018de:	492b      	ldr	r1, [pc, #172]	; (800198c <UART_Transfer_Complete_Callback+0x144>)
 80018e0:	4613      	mov	r3, r2
 80018e2:	019b      	lsls	r3, r3, #6
 80018e4:	4413      	add	r3, r2
 80018e6:	011b      	lsls	r3, r3, #4
 80018e8:	440b      	add	r3, r1
 80018ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80018f4:	81fb      	strh	r3, [r7, #14]
		}
		HAL_UART_Transmit_DMA(uart[id].huart, &uart[id].buffer_tx[uart[id].index_read_tx], nb_bytes_to_read);
 80018f6:	79fa      	ldrb	r2, [r7, #7]
 80018f8:	4924      	ldr	r1, [pc, #144]	; (800198c <UART_Transfer_Complete_Callback+0x144>)
 80018fa:	4613      	mov	r3, r2
 80018fc:	019b      	lsls	r3, r3, #6
 80018fe:	4413      	add	r3, r2
 8001900:	011b      	lsls	r3, r3, #4
 8001902:	440b      	add	r3, r1
 8001904:	6818      	ldr	r0, [r3, #0]
 8001906:	79fa      	ldrb	r2, [r7, #7]
 8001908:	79f9      	ldrb	r1, [r7, #7]
 800190a:	4c20      	ldr	r4, [pc, #128]	; (800198c <UART_Transfer_Complete_Callback+0x144>)
 800190c:	460b      	mov	r3, r1
 800190e:	019b      	lsls	r3, r3, #6
 8001910:	440b      	add	r3, r1
 8001912:	011b      	lsls	r3, r3, #4
 8001914:	4423      	add	r3, r4
 8001916:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800191a:	881b      	ldrh	r3, [r3, #0]
 800191c:	4619      	mov	r1, r3
 800191e:	4613      	mov	r3, r2
 8001920:	019b      	lsls	r3, r3, #6
 8001922:	4413      	add	r3, r2
 8001924:	011b      	lsls	r3, r3, #4
 8001926:	440b      	add	r3, r1
 8001928:	4a18      	ldr	r2, [pc, #96]	; (800198c <UART_Transfer_Complete_Callback+0x144>)
 800192a:	4413      	add	r3, r2
 800192c:	3306      	adds	r3, #6
 800192e:	89fa      	ldrh	r2, [r7, #14]
 8001930:	4619      	mov	r1, r3
 8001932:	f003 fe13 	bl	800555c <HAL_UART_Transmit_DMA>
		uart[id].index_read_tx = (uart[id].index_read_tx + nb_bytes_to_read) % LEN_BUFFER;
 8001936:	79fa      	ldrb	r2, [r7, #7]
 8001938:	4914      	ldr	r1, [pc, #80]	; (800198c <UART_Transfer_Complete_Callback+0x144>)
 800193a:	4613      	mov	r3, r2
 800193c:	019b      	lsls	r3, r3, #6
 800193e:	4413      	add	r3, r2
 8001940:	011b      	lsls	r3, r3, #4
 8001942:	440b      	add	r3, r1
 8001944:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001948:	881a      	ldrh	r2, [r3, #0]
 800194a:	89fb      	ldrh	r3, [r7, #14]
 800194c:	4413      	add	r3, r2
 800194e:	b29b      	uxth	r3, r3
 8001950:	79fa      	ldrb	r2, [r7, #7]
 8001952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001956:	b298      	uxth	r0, r3
 8001958:	490c      	ldr	r1, [pc, #48]	; (800198c <UART_Transfer_Complete_Callback+0x144>)
 800195a:	4613      	mov	r3, r2
 800195c:	019b      	lsls	r3, r3, #6
 800195e:	4413      	add	r3, r2
 8001960:	011b      	lsls	r3, r3, #4
 8001962:	440b      	add	r3, r1
 8001964:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001968:	4602      	mov	r2, r0
 800196a:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		uart[id].transmission_state = transmission_state_eIDLE;
	}
}
 800196c:	e009      	b.n	8001982 <UART_Transfer_Complete_Callback+0x13a>
		uart[id].transmission_state = transmission_state_eIDLE;
 800196e:	79fa      	ldrb	r2, [r7, #7]
 8001970:	4906      	ldr	r1, [pc, #24]	; (800198c <UART_Transfer_Complete_Callback+0x144>)
 8001972:	4613      	mov	r3, r2
 8001974:	019b      	lsls	r3, r3, #6
 8001976:	4413      	add	r3, r2
 8001978:	011b      	lsls	r3, r3, #4
 800197a:	440b      	add	r3, r1
 800197c:	3305      	adds	r3, #5
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
}
 8001982:	bf00      	nop
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	bd90      	pop	{r4, r7, pc}
 800198a:	bf00      	nop
 800198c:	20000550 	.word	0x20000550

08001990 <UART_Availables>:
 * @brief Number of byte available in the RX buffer
 * @param id Id of the uart we are interested in
 * @return Number of bytes
 */
uint16_t UART_Availables(uart_e id)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	71fb      	strb	r3, [r7, #7]
	return get_nb_bytes_available(id);
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	4618      	mov	r0, r3
 800199e:	f000 f94f 	bl	8001c40 <get_nb_bytes_available>
 80019a2:	4603      	mov	r3, r0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <UART_Get>:
 * 		  Does nothing if there are no characters available
 * @param id Id of the uart
 * @param c Buffer to write the character into
 */
void UART_Get(uart_e id, uint8_t * c)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	6039      	str	r1, [r7, #0]
 80019b6:	71fb      	strb	r3, [r7, #7]
	if(get_nb_bytes_available(id))
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f000 f940 	bl	8001c40 <get_nb_bytes_available>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d035      	beq.n	8001a32 <UART_Get+0x86>
	{
		*c = uart[id].buffer_rx[uart[id].index_read_rx];
 80019c6:	79fa      	ldrb	r2, [r7, #7]
 80019c8:	79f9      	ldrb	r1, [r7, #7]
 80019ca:	481c      	ldr	r0, [pc, #112]	; (8001a3c <UART_Get+0x90>)
 80019cc:	460b      	mov	r3, r1
 80019ce:	019b      	lsls	r3, r3, #6
 80019d0:	440b      	add	r3, r1
 80019d2:	011b      	lsls	r3, r3, #4
 80019d4:	4403      	add	r3, r0
 80019d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	4917      	ldr	r1, [pc, #92]	; (8001a3c <UART_Get+0x90>)
 80019e0:	4613      	mov	r3, r2
 80019e2:	019b      	lsls	r3, r3, #6
 80019e4:	4413      	add	r3, r2
 80019e6:	011b      	lsls	r3, r3, #4
 80019e8:	440b      	add	r3, r1
 80019ea:	4403      	add	r3, r0
 80019ec:	f203 230a 	addw	r3, r3, #522	; 0x20a
 80019f0:	781a      	ldrb	r2, [r3, #0]
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	701a      	strb	r2, [r3, #0]
		uart[id].index_read_rx = (uart[id].index_read_rx + 1) % LEN_BUFFER;
 80019f6:	79fa      	ldrb	r2, [r7, #7]
 80019f8:	4910      	ldr	r1, [pc, #64]	; (8001a3c <UART_Get+0x90>)
 80019fa:	4613      	mov	r3, r2
 80019fc:	019b      	lsls	r3, r3, #6
 80019fe:	4413      	add	r3, r2
 8001a00:	011b      	lsls	r3, r3, #4
 8001a02:	440b      	add	r3, r1
 8001a04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	425a      	negs	r2, r3
 8001a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a16:	bf58      	it	pl
 8001a18:	4253      	negpl	r3, r2
 8001a1a:	79fa      	ldrb	r2, [r7, #7]
 8001a1c:	b298      	uxth	r0, r3
 8001a1e:	4907      	ldr	r1, [pc, #28]	; (8001a3c <UART_Get+0x90>)
 8001a20:	4613      	mov	r3, r2
 8001a22:	019b      	lsls	r3, r3, #6
 8001a24:	4413      	add	r3, r2
 8001a26:	011b      	lsls	r3, r3, #4
 8001a28:	440b      	add	r3, r1
 8001a2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001a2e:	4602      	mov	r2, r0
 8001a30:	801a      	strh	r2, [r3, #0]
	}
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000550 	.word	0x20000550

08001a40 <UART_Init>:

/*
 * @brief Initialize every uarts and start dma reception
 */
void UART_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
	/* Link  huarts to the right uarts structures */
	uart[uart_e1].huart = &huart1;
 8001a46:	4b21      	ldr	r3, [pc, #132]	; (8001acc <UART_Init+0x8c>)
 8001a48:	4a21      	ldr	r2, [pc, #132]	; (8001ad0 <UART_Init+0x90>)
 8001a4a:	601a      	str	r2, [r3, #0]
	uart[uart_e4].huart = &huart4;
 8001a4c:	4b1f      	ldr	r3, [pc, #124]	; (8001acc <UART_Init+0x8c>)
 8001a4e:	4a21      	ldr	r2, [pc, #132]	; (8001ad4 <UART_Init+0x94>)
 8001a50:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410

	/* Initialization */
	for(uint8_t u = 0; u < uart_eCOUNT; u ++)
 8001a54:	2300      	movs	r3, #0
 8001a56:	71fb      	strb	r3, [r7, #7]
 8001a58:	e02f      	b.n	8001aba <UART_Init+0x7a>
	{
		__HAL_UART_ENABLE_IT(uart[u].huart, UART_IT_IDLE);
 8001a5a:	79fa      	ldrb	r2, [r7, #7]
 8001a5c:	491b      	ldr	r1, [pc, #108]	; (8001acc <UART_Init+0x8c>)
 8001a5e:	4613      	mov	r3, r2
 8001a60:	019b      	lsls	r3, r3, #6
 8001a62:	4413      	add	r3, r2
 8001a64:	011b      	lsls	r3, r3, #4
 8001a66:	440b      	add	r3, r1
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68d9      	ldr	r1, [r3, #12]
 8001a6e:	79fa      	ldrb	r2, [r7, #7]
 8001a70:	4816      	ldr	r0, [pc, #88]	; (8001acc <UART_Init+0x8c>)
 8001a72:	4613      	mov	r3, r2
 8001a74:	019b      	lsls	r3, r3, #6
 8001a76:	4413      	add	r3, r2
 8001a78:	011b      	lsls	r3, r3, #4
 8001a7a:	4403      	add	r3, r0
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f041 0210 	orr.w	r2, r1, #16
 8001a84:	60da      	str	r2, [r3, #12]
		HAL_UART_Receive_DMA(uart[u].huart, uart[u].buffer_rx, LEN_BUFFER);
 8001a86:	79fa      	ldrb	r2, [r7, #7]
 8001a88:	4910      	ldr	r1, [pc, #64]	; (8001acc <UART_Init+0x8c>)
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	019b      	lsls	r3, r3, #6
 8001a8e:	4413      	add	r3, r2
 8001a90:	011b      	lsls	r3, r3, #4
 8001a92:	440b      	add	r3, r1
 8001a94:	6818      	ldr	r0, [r3, #0]
 8001a96:	79fa      	ldrb	r2, [r7, #7]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	019b      	lsls	r3, r3, #6
 8001a9c:	4413      	add	r3, r2
 8001a9e:	011b      	lsls	r3, r3, #4
 8001aa0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001aa4:	4a09      	ldr	r2, [pc, #36]	; (8001acc <UART_Init+0x8c>)
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3302      	adds	r3, #2
 8001aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aae:	4619      	mov	r1, r3
 8001ab0:	f003 fdd2 	bl	8005658 <HAL_UART_Receive_DMA>
	for(uint8_t u = 0; u < uart_eCOUNT; u ++)
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	71fb      	strb	r3, [r7, #7]
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d9cc      	bls.n	8001a5a <UART_Init+0x1a>
	}
}
 8001ac0:	bf00      	nop
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000550 	.word	0x20000550
 8001ad0:	20000f34 	.word	0x20000f34
 8001ad4:	20000f78 	.word	0x20000f78

08001ad8 <UART_Transmit>:
 * @param id Id of the uart to use
 * @param data Array with the data
 * @param len Length of the data array
 */
void UART_Transmit(uart_e id, uint8_t * data, uint16_t len)
{
 8001ad8:	b590      	push	{r4, r7, lr}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	6039      	str	r1, [r7, #0]
 8001ae2:	71fb      	strb	r3, [r7, #7]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	80bb      	strh	r3, [r7, #4]
	for(uint16_t c = 0; c < len; c ++)
 8001ae8:	2300      	movs	r3, #0
 8001aea:	81fb      	strh	r3, [r7, #14]
 8001aec:	e020      	b.n	8001b30 <UART_Transmit+0x58>
	{
		uart[id].buffer_tx[(uart[id].index_write_tx + c) % LEN_BUFFER] = data[c];
 8001aee:	89fb      	ldrh	r3, [r7, #14]
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	18d0      	adds	r0, r2, r3
 8001af4:	79fa      	ldrb	r2, [r7, #7]
 8001af6:	79f9      	ldrb	r1, [r7, #7]
 8001af8:	4c50      	ldr	r4, [pc, #320]	; (8001c3c <UART_Transmit+0x164>)
 8001afa:	460b      	mov	r3, r1
 8001afc:	019b      	lsls	r3, r3, #6
 8001afe:	440b      	add	r3, r1
 8001b00:	011b      	lsls	r3, r3, #4
 8001b02:	4423      	add	r3, r4
 8001b04:	f203 2306 	addw	r3, r3, #518	; 0x206
 8001b08:	8819      	ldrh	r1, [r3, #0]
 8001b0a:	89fb      	ldrh	r3, [r7, #14]
 8001b0c:	440b      	add	r3, r1
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8001b14:	7804      	ldrb	r4, [r0, #0]
 8001b16:	4849      	ldr	r0, [pc, #292]	; (8001c3c <UART_Transmit+0x164>)
 8001b18:	4613      	mov	r3, r2
 8001b1a:	019b      	lsls	r3, r3, #6
 8001b1c:	4413      	add	r3, r2
 8001b1e:	011b      	lsls	r3, r3, #4
 8001b20:	4403      	add	r3, r0
 8001b22:	440b      	add	r3, r1
 8001b24:	3306      	adds	r3, #6
 8001b26:	4622      	mov	r2, r4
 8001b28:	701a      	strb	r2, [r3, #0]
	for(uint16_t c = 0; c < len; c ++)
 8001b2a:	89fb      	ldrh	r3, [r7, #14]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	81fb      	strh	r3, [r7, #14]
 8001b30:	89fa      	ldrh	r2, [r7, #14]
 8001b32:	88bb      	ldrh	r3, [r7, #4]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d3da      	bcc.n	8001aee <UART_Transmit+0x16>
	}
	uart[id].index_write_tx = (uart[id].index_write_tx + len) % LEN_BUFFER;
 8001b38:	79fa      	ldrb	r2, [r7, #7]
 8001b3a:	4940      	ldr	r1, [pc, #256]	; (8001c3c <UART_Transmit+0x164>)
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	019b      	lsls	r3, r3, #6
 8001b40:	4413      	add	r3, r2
 8001b42:	011b      	lsls	r3, r3, #4
 8001b44:	440b      	add	r3, r1
 8001b46:	f203 2306 	addw	r3, r3, #518	; 0x206
 8001b4a:	881a      	ldrh	r2, [r3, #0]
 8001b4c:	88bb      	ldrh	r3, [r7, #4]
 8001b4e:	4413      	add	r3, r2
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	79fa      	ldrb	r2, [r7, #7]
 8001b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b58:	b298      	uxth	r0, r3
 8001b5a:	4938      	ldr	r1, [pc, #224]	; (8001c3c <UART_Transmit+0x164>)
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	019b      	lsls	r3, r3, #6
 8001b60:	4413      	add	r3, r2
 8001b62:	011b      	lsls	r3, r3, #4
 8001b64:	440b      	add	r3, r1
 8001b66:	f203 2306 	addw	r3, r3, #518	; 0x206
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	801a      	strh	r2, [r3, #0]
	if(uart[id].transmission_state == transmission_state_eIDLE)
 8001b6e:	79fa      	ldrb	r2, [r7, #7]
 8001b70:	4932      	ldr	r1, [pc, #200]	; (8001c3c <UART_Transmit+0x164>)
 8001b72:	4613      	mov	r3, r2
 8001b74:	019b      	lsls	r3, r3, #6
 8001b76:	4413      	add	r3, r2
 8001b78:	011b      	lsls	r3, r3, #4
 8001b7a:	440b      	add	r3, r1
 8001b7c:	3305      	adds	r3, #5
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d157      	bne.n	8001c34 <UART_Transmit+0x15c>
	{
		uart[id].transmission_state = transmission_state_eIN_PROGRESS;
 8001b84:	79fa      	ldrb	r2, [r7, #7]
 8001b86:	492d      	ldr	r1, [pc, #180]	; (8001c3c <UART_Transmit+0x164>)
 8001b88:	4613      	mov	r3, r2
 8001b8a:	019b      	lsls	r3, r3, #6
 8001b8c:	4413      	add	r3, r2
 8001b8e:	011b      	lsls	r3, r3, #4
 8001b90:	440b      	add	r3, r1
 8001b92:	3305      	adds	r3, #5
 8001b94:	2201      	movs	r2, #1
 8001b96:	701a      	strb	r2, [r3, #0]
		uint16_t nb_bytes_before_end_of_buffer = LEN_BUFFER - uart[id].index_read_tx;
 8001b98:	79fa      	ldrb	r2, [r7, #7]
 8001b9a:	4928      	ldr	r1, [pc, #160]	; (8001c3c <UART_Transmit+0x164>)
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	019b      	lsls	r3, r3, #6
 8001ba0:	4413      	add	r3, r2
 8001ba2:	011b      	lsls	r3, r3, #4
 8001ba4:	440b      	add	r3, r1
 8001ba6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001bb0:	81bb      	strh	r3, [r7, #12]
		len = MIN(len, nb_bytes_before_end_of_buffer);
 8001bb2:	88ba      	ldrh	r2, [r7, #4]
 8001bb4:	89bb      	ldrh	r3, [r7, #12]
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	bf28      	it	cs
 8001bba:	4613      	movcs	r3, r2
 8001bbc:	80bb      	strh	r3, [r7, #4]
		HAL_UART_Transmit_DMA(uart[id].huart, &uart[id].buffer_tx[uart[id].index_read_tx], len);
 8001bbe:	79fa      	ldrb	r2, [r7, #7]
 8001bc0:	491e      	ldr	r1, [pc, #120]	; (8001c3c <UART_Transmit+0x164>)
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	019b      	lsls	r3, r3, #6
 8001bc6:	4413      	add	r3, r2
 8001bc8:	011b      	lsls	r3, r3, #4
 8001bca:	440b      	add	r3, r1
 8001bcc:	6818      	ldr	r0, [r3, #0]
 8001bce:	79fa      	ldrb	r2, [r7, #7]
 8001bd0:	79f9      	ldrb	r1, [r7, #7]
 8001bd2:	4c1a      	ldr	r4, [pc, #104]	; (8001c3c <UART_Transmit+0x164>)
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	019b      	lsls	r3, r3, #6
 8001bd8:	440b      	add	r3, r1
 8001bda:	011b      	lsls	r3, r3, #4
 8001bdc:	4423      	add	r3, r4
 8001bde:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	4619      	mov	r1, r3
 8001be6:	4613      	mov	r3, r2
 8001be8:	019b      	lsls	r3, r3, #6
 8001bea:	4413      	add	r3, r2
 8001bec:	011b      	lsls	r3, r3, #4
 8001bee:	440b      	add	r3, r1
 8001bf0:	4a12      	ldr	r2, [pc, #72]	; (8001c3c <UART_Transmit+0x164>)
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3306      	adds	r3, #6
 8001bf6:	88ba      	ldrh	r2, [r7, #4]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f003 fcaf 	bl	800555c <HAL_UART_Transmit_DMA>
		uart[id].index_read_tx = (uart[id].index_read_tx + len) % LEN_BUFFER;
 8001bfe:	79fa      	ldrb	r2, [r7, #7]
 8001c00:	490e      	ldr	r1, [pc, #56]	; (8001c3c <UART_Transmit+0x164>)
 8001c02:	4613      	mov	r3, r2
 8001c04:	019b      	lsls	r3, r3, #6
 8001c06:	4413      	add	r3, r2
 8001c08:	011b      	lsls	r3, r3, #4
 8001c0a:	440b      	add	r3, r1
 8001c0c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c10:	881a      	ldrh	r2, [r3, #0]
 8001c12:	88bb      	ldrh	r3, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	79fa      	ldrb	r2, [r7, #7]
 8001c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c1e:	b298      	uxth	r0, r3
 8001c20:	4906      	ldr	r1, [pc, #24]	; (8001c3c <UART_Transmit+0x164>)
 8001c22:	4613      	mov	r3, r2
 8001c24:	019b      	lsls	r3, r3, #6
 8001c26:	4413      	add	r3, r2
 8001c28:	011b      	lsls	r3, r3, #4
 8001c2a:	440b      	add	r3, r1
 8001c2c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c30:	4602      	mov	r2, r0
 8001c32:	801a      	strh	r2, [r3, #0]
	}
}
 8001c34:	bf00      	nop
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd90      	pop	{r4, r7, pc}
 8001c3c:	20000550 	.word	0x20000550

08001c40 <get_nb_bytes_available>:
 * @brief Compute the numbers of byte available in the buffer
 * @param id Id of the uart
 * @return nb of bytes available
 */
uint16_t get_nb_bytes_available(uart_e id)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	71fb      	strb	r3, [r7, #7]
	uint16_t nb = 0 ;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	81fb      	strh	r3, [r7, #14]
	if(uart[id].index_write_rx > uart[id].index_read_rx)
 8001c4e:	79fa      	ldrb	r2, [r7, #7]
 8001c50:	4932      	ldr	r1, [pc, #200]	; (8001d1c <get_nb_bytes_available+0xdc>)
 8001c52:	4613      	mov	r3, r2
 8001c54:	019b      	lsls	r3, r3, #6
 8001c56:	4413      	add	r3, r2
 8001c58:	011b      	lsls	r3, r3, #4
 8001c5a:	440b      	add	r3, r1
 8001c5c:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	b299      	uxth	r1, r3
 8001c64:	79fa      	ldrb	r2, [r7, #7]
 8001c66:	482d      	ldr	r0, [pc, #180]	; (8001d1c <get_nb_bytes_available+0xdc>)
 8001c68:	4613      	mov	r3, r2
 8001c6a:	019b      	lsls	r3, r3, #6
 8001c6c:	4413      	add	r3, r2
 8001c6e:	011b      	lsls	r3, r3, #4
 8001c70:	4403      	add	r3, r0
 8001c72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	4299      	cmp	r1, r3
 8001c7a:	d917      	bls.n	8001cac <get_nb_bytes_available+0x6c>
	{
		nb = uart[id].index_write_rx - uart[id].index_read_rx ;
 8001c7c:	79fa      	ldrb	r2, [r7, #7]
 8001c7e:	4927      	ldr	r1, [pc, #156]	; (8001d1c <get_nb_bytes_available+0xdc>)
 8001c80:	4613      	mov	r3, r2
 8001c82:	019b      	lsls	r3, r3, #6
 8001c84:	4413      	add	r3, r2
 8001c86:	011b      	lsls	r3, r3, #4
 8001c88:	440b      	add	r3, r1
 8001c8a:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	b299      	uxth	r1, r3
 8001c92:	79fa      	ldrb	r2, [r7, #7]
 8001c94:	4821      	ldr	r0, [pc, #132]	; (8001d1c <get_nb_bytes_available+0xdc>)
 8001c96:	4613      	mov	r3, r2
 8001c98:	019b      	lsls	r3, r3, #6
 8001c9a:	4413      	add	r3, r2
 8001c9c:	011b      	lsls	r3, r3, #4
 8001c9e:	4403      	add	r3, r0
 8001ca0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	1acb      	subs	r3, r1, r3
 8001ca8:	81fb      	strh	r3, [r7, #14]
 8001caa:	e030      	b.n	8001d0e <get_nb_bytes_available+0xce>
	}
	else if(uart[id].index_write_rx < uart[id].index_read_rx)
 8001cac:	79fa      	ldrb	r2, [r7, #7]
 8001cae:	491b      	ldr	r1, [pc, #108]	; (8001d1c <get_nb_bytes_available+0xdc>)
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	019b      	lsls	r3, r3, #6
 8001cb4:	4413      	add	r3, r2
 8001cb6:	011b      	lsls	r3, r3, #4
 8001cb8:	440b      	add	r3, r1
 8001cba:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	b299      	uxth	r1, r3
 8001cc2:	79fa      	ldrb	r2, [r7, #7]
 8001cc4:	4815      	ldr	r0, [pc, #84]	; (8001d1c <get_nb_bytes_available+0xdc>)
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	019b      	lsls	r3, r3, #6
 8001cca:	4413      	add	r3, r2
 8001ccc:	011b      	lsls	r3, r3, #4
 8001cce:	4403      	add	r3, r0
 8001cd0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	4299      	cmp	r1, r3
 8001cd8:	d219      	bcs.n	8001d0e <get_nb_bytes_available+0xce>
	{
		nb = LEN_BUFFER - uart[id].index_read_rx + uart[id].index_write_rx ;
 8001cda:	79fa      	ldrb	r2, [r7, #7]
 8001cdc:	490f      	ldr	r1, [pc, #60]	; (8001d1c <get_nb_bytes_available+0xdc>)
 8001cde:	4613      	mov	r3, r2
 8001ce0:	019b      	lsls	r3, r3, #6
 8001ce2:	4413      	add	r3, r2
 8001ce4:	011b      	lsls	r3, r3, #4
 8001ce6:	440b      	add	r3, r1
 8001ce8:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8001cec:	881b      	ldrh	r3, [r3, #0]
 8001cee:	b299      	uxth	r1, r3
 8001cf0:	79fa      	ldrb	r2, [r7, #7]
 8001cf2:	480a      	ldr	r0, [pc, #40]	; (8001d1c <get_nb_bytes_available+0xdc>)
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	019b      	lsls	r3, r3, #6
 8001cf8:	4413      	add	r3, r2
 8001cfa:	011b      	lsls	r3, r3, #4
 8001cfc:	4403      	add	r3, r0
 8001cfe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	1acb      	subs	r3, r1, r3
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001d0c:	81fb      	strh	r3, [r7, #14]
	}
	return nb;
 8001d0e:	89fb      	ldrh	r3, [r7, #14]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	20000550 	.word	0x20000550

08001d20 <MPU_Read_All>:
			mpu.acc_conversion = (float)1 / MPU6050_ACCE_SENS_16 ;
			break;
	}
}
void MPU_Read_All(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af02      	add	r7, sp, #8
	uint8_t registers [14] = {MPU6050_ACCEL_XOUT_H | MPU6050_READ};
 8001d26:	23bb      	movs	r3, #187	; 0xbb
 8001d28:	603b      	str	r3, [r7, #0]
 8001d2a:	1d3b      	adds	r3, r7, #4
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	811a      	strh	r2, [r3, #8]
	SPI_Transmit_Receive(mpu.spi, mpu.cs, registers, mpu.readings, 14);
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <MPU_Read_All+0x30>)
 8001d36:	7818      	ldrb	r0, [r3, #0]
 8001d38:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <MPU_Read_All+0x30>)
 8001d3a:	7859      	ldrb	r1, [r3, #1]
 8001d3c:	463a      	mov	r2, r7
 8001d3e:	230e      	movs	r3, #14
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <MPU_Read_All+0x34>)
 8001d44:	f7ff fcbe 	bl	80016c4 <SPI_Transmit_Receive>
}
 8001d48:	bf00      	nop
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20000358 	.word	0x20000358
 8001d54:	2000035b 	.word	0x2000035b

08001d58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	607b      	str	r3, [r7, #4]
 8001d62:	4b1f      	ldr	r3, [pc, #124]	; (8001de0 <MX_DMA_Init+0x88>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4a1e      	ldr	r2, [pc, #120]	; (8001de0 <MX_DMA_Init+0x88>)
 8001d68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6e:	4b1c      	ldr	r3, [pc, #112]	; (8001de0 <MX_DMA_Init+0x88>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d76:	607b      	str	r3, [r7, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	603b      	str	r3, [r7, #0]
 8001d7e:	4b18      	ldr	r3, [pc, #96]	; (8001de0 <MX_DMA_Init+0x88>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	4a17      	ldr	r2, [pc, #92]	; (8001de0 <MX_DMA_Init+0x88>)
 8001d84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d88:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8a:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <MX_DMA_Init+0x88>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d92:	603b      	str	r3, [r7, #0]
 8001d94:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001d96:	2200      	movs	r2, #0
 8001d98:	2100      	movs	r1, #0
 8001d9a:	200d      	movs	r0, #13
 8001d9c:	f000 febf 	bl	8002b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001da0:	200d      	movs	r0, #13
 8001da2:	f000 fed8 	bl	8002b56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001da6:	2200      	movs	r2, #0
 8001da8:	2100      	movs	r1, #0
 8001daa:	200f      	movs	r0, #15
 8001dac:	f000 feb7 	bl	8002b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001db0:	200f      	movs	r0, #15
 8001db2:	f000 fed0 	bl	8002b56 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001db6:	2200      	movs	r2, #0
 8001db8:	2100      	movs	r1, #0
 8001dba:	203a      	movs	r0, #58	; 0x3a
 8001dbc:	f000 feaf 	bl	8002b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001dc0:	203a      	movs	r0, #58	; 0x3a
 8001dc2:	f000 fec8 	bl	8002b56 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2100      	movs	r1, #0
 8001dca:	2046      	movs	r0, #70	; 0x46
 8001dcc:	f000 fea7 	bl	8002b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001dd0:	2046      	movs	r0, #70	; 0x46
 8001dd2:	f000 fec0 	bl	8002b56 <HAL_NVIC_EnableIRQ>

}
 8001dd6:	bf00      	nop
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40023800 	.word	0x40023800

08001de4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b088      	sub	sp, #32
 8001de8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dea:	f107 030c 	add.w	r3, r7, #12
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]
 8001df4:	609a      	str	r2, [r3, #8]
 8001df6:	60da      	str	r2, [r3, #12]
 8001df8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	4b20      	ldr	r3, [pc, #128]	; (8001e80 <MX_GPIO_Init+0x9c>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a1f      	ldr	r2, [pc, #124]	; (8001e80 <MX_GPIO_Init+0x9c>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b1d      	ldr	r3, [pc, #116]	; (8001e80 <MX_GPIO_Init+0x9c>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	607b      	str	r3, [r7, #4]
 8001e1a:	4b19      	ldr	r3, [pc, #100]	; (8001e80 <MX_GPIO_Init+0x9c>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a18      	ldr	r2, [pc, #96]	; (8001e80 <MX_GPIO_Init+0x9c>)
 8001e20:	f043 0302 	orr.w	r3, r3, #2
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b16      	ldr	r3, [pc, #88]	; (8001e80 <MX_GPIO_Init+0x9c>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	607b      	str	r3, [r7, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	603b      	str	r3, [r7, #0]
 8001e36:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <MX_GPIO_Init+0x9c>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4a11      	ldr	r2, [pc, #68]	; (8001e80 <MX_GPIO_Init+0x9c>)
 8001e3c:	f043 0304 	orr.w	r3, r3, #4
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <MX_GPIO_Init+0x9c>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f003 0304 	and.w	r3, r3, #4
 8001e4a:	603b      	str	r3, [r7, #0]
 8001e4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MPU_CS_GPIO_Port, MPU_CS_Pin, GPIO_PIN_RESET);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e54:	480b      	ldr	r0, [pc, #44]	; (8001e84 <MX_GPIO_Init+0xa0>)
 8001e56:	f001 fc37 	bl	80036c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MPU_CS_Pin;
 8001e5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e60:	2301      	movs	r3, #1
 8001e62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MPU_CS_GPIO_Port, &GPIO_InitStruct);
 8001e6c:	f107 030c 	add.w	r3, r7, #12
 8001e70:	4619      	mov	r1, r3
 8001e72:	4804      	ldr	r0, [pc, #16]	; (8001e84 <MX_GPIO_Init+0xa0>)
 8001e74:	f001 fa8c 	bl	8003390 <HAL_GPIO_Init>

}
 8001e78:	bf00      	nop
 8001e7a:	3720      	adds	r7, #32
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40020000 	.word	0x40020000

08001e88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e8c:	f000 fcd6 	bl	800283c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e90:	f000 f822 	bl	8001ed8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e94:	f7ff ffa6 	bl	8001de4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e98:	f7ff ff5e 	bl	8001d58 <MX_DMA_Init>
  MX_UART4_Init();
 8001e9c:	f000 faf6 	bl	800248c <MX_UART4_Init>
  MX_SPI3_Init();
 8001ea0:	f000 f88a 	bl	8001fb8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8001ea4:	f000 fb1c 	bl	80024e0 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001ea8:	f000 f9dc 	bl	8002264 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* Peripherals initialization */
  UART_Init();
 8001eac:	f7ff fdc8 	bl	8001a40 <UART_Init>
//  SPI_Init(); //C est de la merde ça marche pas :!!!!!!!!!!!!!!!!!!!!!!!!!!! dsfng:;jnsdfgkdfsg
  /* Sensors initialization */
  HAL_Delay(100);
 8001eb0:	2064      	movs	r0, #100	; 0x64
 8001eb2:	f000 fd35 	bl	8002920 <HAL_Delay>
//  MPU_Init();

  /* System initialization */
  DATA_LOGGER_Init(&mark1);
 8001eb6:	4807      	ldr	r0, [pc, #28]	; (8001ed4 <main+0x4c>)
 8001eb8:	f7fe fb02 	bl	80004c0 <DATA_LOGGER_Init>
  TASK_Init(&mark1);
 8001ebc:	4805      	ldr	r0, [pc, #20]	; (8001ed4 <main+0x4c>)
 8001ebe:	f7ff fb79 	bl	80015b4 <TASK_Init>
  SCHEDULER_init();
 8001ec2:	f7ff f8b5 	bl	8001030 <SCHEDULER_init>
  TIMER_Start_All_Channels(timer_eMOTORS);
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	f7ff fc44 	bl	8001754 <TIMER_Start_All_Channels>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCHEDULER_run();
 8001ecc:	f7ff f8c4 	bl	8001058 <SCHEDULER_run>
 8001ed0:	e7fc      	b.n	8001ecc <main+0x44>
 8001ed2:	bf00      	nop
 8001ed4:	20000d70 	.word	0x20000d70

08001ed8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b094      	sub	sp, #80	; 0x50
 8001edc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ede:	f107 0320 	add.w	r3, r7, #32
 8001ee2:	2230      	movs	r2, #48	; 0x30
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f004 fc6c 	bl	80067c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001eec:	f107 030c 	add.w	r3, r7, #12
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001efc:	2300      	movs	r3, #0
 8001efe:	60bb      	str	r3, [r7, #8]
 8001f00:	4b28      	ldr	r3, [pc, #160]	; (8001fa4 <SystemClock_Config+0xcc>)
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	4a27      	ldr	r2, [pc, #156]	; (8001fa4 <SystemClock_Config+0xcc>)
 8001f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f0a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0c:	4b25      	ldr	r3, [pc, #148]	; (8001fa4 <SystemClock_Config+0xcc>)
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f18:	2300      	movs	r3, #0
 8001f1a:	607b      	str	r3, [r7, #4]
 8001f1c:	4b22      	ldr	r3, [pc, #136]	; (8001fa8 <SystemClock_Config+0xd0>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a21      	ldr	r2, [pc, #132]	; (8001fa8 <SystemClock_Config+0xd0>)
 8001f22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	4b1f      	ldr	r3, [pc, #124]	; (8001fa8 <SystemClock_Config+0xd0>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f30:	607b      	str	r3, [r7, #4]
 8001f32:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f34:	2302      	movs	r3, #2
 8001f36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f3c:	2310      	movs	r3, #16
 8001f3e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f40:	2302      	movs	r3, #2
 8001f42:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f44:	2300      	movs	r3, #0
 8001f46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f48:	2308      	movs	r3, #8
 8001f4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001f4c:	23a8      	movs	r3, #168	; 0xa8
 8001f4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f50:	2302      	movs	r3, #2
 8001f52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f54:	2304      	movs	r3, #4
 8001f56:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f58:	f107 0320 	add.w	r3, r7, #32
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f001 fbcd 	bl	80036fc <HAL_RCC_OscConfig>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f68:	f000 f820 	bl	8001fac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f6c:	230f      	movs	r3, #15
 8001f6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f70:	2302      	movs	r3, #2
 8001f72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f78:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f82:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f84:	f107 030c 	add.w	r3, r7, #12
 8001f88:	2105      	movs	r1, #5
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f001 fe2e 	bl	8003bec <HAL_RCC_ClockConfig>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001f96:	f000 f809 	bl	8001fac <Error_Handler>
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	3750      	adds	r7, #80	; 0x50
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	40007000 	.word	0x40007000

08001fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001fb0:	b672      	cpsid	i
}
 8001fb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fb4:	e7fe      	b.n	8001fb4 <Error_Handler+0x8>
	...

08001fb8 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001fbc:	4b17      	ldr	r3, [pc, #92]	; (800201c <MX_SPI3_Init+0x64>)
 8001fbe:	4a18      	ldr	r2, [pc, #96]	; (8002020 <MX_SPI3_Init+0x68>)
 8001fc0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001fc2:	4b16      	ldr	r3, [pc, #88]	; (800201c <MX_SPI3_Init+0x64>)
 8001fc4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fc8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001fca:	4b14      	ldr	r3, [pc, #80]	; (800201c <MX_SPI3_Init+0x64>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fd0:	4b12      	ldr	r3, [pc, #72]	; (800201c <MX_SPI3_Init+0x64>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fd6:	4b11      	ldr	r3, [pc, #68]	; (800201c <MX_SPI3_Init+0x64>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	; (800201c <MX_SPI3_Init+0x64>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	; (800201c <MX_SPI3_Init+0x64>)
 8001fe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fe8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001fea:	4b0c      	ldr	r3, [pc, #48]	; (800201c <MX_SPI3_Init+0x64>)
 8001fec:	2230      	movs	r2, #48	; 0x30
 8001fee:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ff0:	4b0a      	ldr	r3, [pc, #40]	; (800201c <MX_SPI3_Init+0x64>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ff6:	4b09      	ldr	r3, [pc, #36]	; (800201c <MX_SPI3_Init+0x64>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ffc:	4b07      	ldr	r3, [pc, #28]	; (800201c <MX_SPI3_Init+0x64>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002002:	4b06      	ldr	r3, [pc, #24]	; (800201c <MX_SPI3_Init+0x64>)
 8002004:	220a      	movs	r2, #10
 8002006:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002008:	4804      	ldr	r0, [pc, #16]	; (800201c <MX_SPI3_Init+0x64>)
 800200a:	f001 ffbf 	bl	8003f8c <HAL_SPI_Init>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002014:	f7ff ffca 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}
 800201c:	20000d74 	.word	0x20000d74
 8002020:	40003c00 	.word	0x40003c00

08002024 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08a      	sub	sp, #40	; 0x28
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a20      	ldr	r2, [pc, #128]	; (80020c4 <HAL_SPI_MspInit+0xa0>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d13a      	bne.n	80020bc <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	4b1f      	ldr	r3, [pc, #124]	; (80020c8 <HAL_SPI_MspInit+0xa4>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	4a1e      	ldr	r2, [pc, #120]	; (80020c8 <HAL_SPI_MspInit+0xa4>)
 8002050:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002054:	6413      	str	r3, [r2, #64]	; 0x40
 8002056:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <HAL_SPI_MspInit+0xa4>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	4b18      	ldr	r3, [pc, #96]	; (80020c8 <HAL_SPI_MspInit+0xa4>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	4a17      	ldr	r2, [pc, #92]	; (80020c8 <HAL_SPI_MspInit+0xa4>)
 800206c:	f043 0304 	orr.w	r3, r3, #4
 8002070:	6313      	str	r3, [r2, #48]	; 0x30
 8002072:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <HAL_SPI_MspInit+0xa4>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	f003 0304 	and.w	r3, r3, #4
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800207e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002084:	2302      	movs	r3, #2
 8002086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208c:	2303      	movs	r3, #3
 800208e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002090:	2306      	movs	r3, #6
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002094:	f107 0314 	add.w	r3, r7, #20
 8002098:	4619      	mov	r1, r3
 800209a:	480c      	ldr	r0, [pc, #48]	; (80020cc <HAL_SPI_MspInit+0xa8>)
 800209c:	f001 f978 	bl	8003390 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80020a0:	2200      	movs	r2, #0
 80020a2:	2100      	movs	r1, #0
 80020a4:	2033      	movs	r0, #51	; 0x33
 80020a6:	f000 fd3a 	bl	8002b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80020aa:	2033      	movs	r0, #51	; 0x33
 80020ac:	f000 fd53 	bl	8002b56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80020b0:	2200      	movs	r2, #0
 80020b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020b6:	4805      	ldr	r0, [pc, #20]	; (80020cc <HAL_SPI_MspInit+0xa8>)
 80020b8:	f001 fb06 	bl	80036c8 <HAL_GPIO_WritePin>
  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80020bc:	bf00      	nop
 80020be:	3728      	adds	r7, #40	; 0x28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40003c00 	.word	0x40003c00
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40020800 	.word	0x40020800

080020d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	607b      	str	r3, [r7, #4]
 80020da:	4b10      	ldr	r3, [pc, #64]	; (800211c <HAL_MspInit+0x4c>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	4a0f      	ldr	r2, [pc, #60]	; (800211c <HAL_MspInit+0x4c>)
 80020e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020e4:	6453      	str	r3, [r2, #68]	; 0x44
 80020e6:	4b0d      	ldr	r3, [pc, #52]	; (800211c <HAL_MspInit+0x4c>)
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ee:	607b      	str	r3, [r7, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	603b      	str	r3, [r7, #0]
 80020f6:	4b09      	ldr	r3, [pc, #36]	; (800211c <HAL_MspInit+0x4c>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	4a08      	ldr	r2, [pc, #32]	; (800211c <HAL_MspInit+0x4c>)
 80020fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002100:	6413      	str	r3, [r2, #64]	; 0x40
 8002102:	4b06      	ldr	r3, [pc, #24]	; (800211c <HAL_MspInit+0x4c>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210a:	603b      	str	r3, [r7, #0]
 800210c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40023800 	.word	0x40023800

08002120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002124:	e7fe      	b.n	8002124 <NMI_Handler+0x4>

08002126 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002126:	b480      	push	{r7}
 8002128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800212a:	e7fe      	b.n	800212a <HardFault_Handler+0x4>

0800212c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002130:	e7fe      	b.n	8002130 <MemManage_Handler+0x4>

08002132 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002132:	b480      	push	{r7}
 8002134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002136:	e7fe      	b.n	8002136 <BusFault_Handler+0x4>

08002138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800213c:	e7fe      	b.n	800213c <UsageFault_Handler+0x4>

0800213e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002150:	bf00      	nop
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800215a:	b480      	push	{r7}
 800215c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800216c:	f000 fbb8 	bl	80028e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002170:	bf00      	nop
 8002172:	bd80      	pop	{r7, pc}

08002174 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002178:	4802      	ldr	r0, [pc, #8]	; (8002184 <DMA1_Stream2_IRQHandler+0x10>)
 800217a:	f000 fe9f 	bl	8002ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000e14 	.word	0x20000e14

08002188 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800218c:	4802      	ldr	r0, [pc, #8]	; (8002198 <DMA1_Stream4_IRQHandler+0x10>)
 800218e:	f000 fe95 	bl	8002ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	20000fbc 	.word	0x20000fbc

0800219c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021a0:	4803      	ldr	r0, [pc, #12]	; (80021b0 <USART1_IRQHandler+0x14>)
 80021a2:	f003 fa89 	bl	80056b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  UART_Idle_Line_Callback(uart_e1);
 80021a6:	2000      	movs	r0, #0
 80021a8:	f7ff fb00 	bl	80017ac <UART_Idle_Line_Callback>
  /* USER CODE END USART1_IRQn 1 */
}
 80021ac:	bf00      	nop
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20000f34 	.word	0x20000f34

080021b4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80021b8:	4802      	ldr	r0, [pc, #8]	; (80021c4 <SPI3_IRQHandler+0x10>)
 80021ba:	f002 f913 	bl	80043e4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000d74 	.word	0x20000d74

080021c8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80021cc:	4803      	ldr	r0, [pc, #12]	; (80021dc <UART4_IRQHandler+0x14>)
 80021ce:	f003 fa73 	bl	80056b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  UART_Idle_Line_Callback(uart_e4);
 80021d2:	2001      	movs	r0, #1
 80021d4:	f7ff faea 	bl	80017ac <UART_Idle_Line_Callback>
  /* USER CODE END UART4_IRQn 1 */
}
 80021d8:	bf00      	nop
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	20000f78 	.word	0x20000f78

080021e0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80021e4:	4802      	ldr	r0, [pc, #8]	; (80021f0 <DMA2_Stream2_IRQHandler+0x10>)
 80021e6:	f000 fe69 	bl	8002ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000ed4 	.word	0x20000ed4

080021f4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80021f8:	4802      	ldr	r0, [pc, #8]	; (8002204 <DMA2_Stream7_IRQHandler+0x10>)
 80021fa:	f000 fe5f 	bl	8002ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000e74 	.word	0x20000e74

08002208 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
	if(huart == &huart4)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a09      	ldr	r2, [pc, #36]	; (8002238 <HAL_UART_TxCpltCallback+0x30>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d103      	bne.n	8002220 <HAL_UART_TxCpltCallback+0x18>
	{
		UART_Transfer_Complete_Callback(uart_e4);
 8002218:	2001      	movs	r0, #1
 800221a:	f7ff fb15 	bl	8001848 <UART_Transfer_Complete_Callback>
	}
	else if(huart == &huart1)
	{
		UART_Transfer_Complete_Callback(uart_e1 );
	}
}
 800221e:	e006      	b.n	800222e <HAL_UART_TxCpltCallback+0x26>
	else if(huart == &huart1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a06      	ldr	r2, [pc, #24]	; (800223c <HAL_UART_TxCpltCallback+0x34>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d102      	bne.n	800222e <HAL_UART_TxCpltCallback+0x26>
		UART_Transfer_Complete_Callback(uart_e1 );
 8002228:	2000      	movs	r0, #0
 800222a:	f7ff fb0d 	bl	8001848 <UART_Transfer_Complete_Callback>
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20000f78 	.word	0x20000f78
 800223c:	20000f34 	.word	0x20000f34

08002240 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002244:	4b06      	ldr	r3, [pc, #24]	; (8002260 <SystemInit+0x20>)
 8002246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224a:	4a05      	ldr	r2, [pc, #20]	; (8002260 <SystemInit+0x20>)
 800224c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002250:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b08e      	sub	sp, #56	; 0x38
 8002268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800226a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	605a      	str	r2, [r3, #4]
 8002274:	609a      	str	r2, [r3, #8]
 8002276:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002278:	f107 0320 	add.w	r3, r7, #32
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002282:	1d3b      	adds	r3, r7, #4
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]
 8002290:	615a      	str	r2, [r3, #20]
 8002292:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002294:	4b3d      	ldr	r3, [pc, #244]	; (800238c <MX_TIM3_Init+0x128>)
 8002296:	4a3e      	ldr	r2, [pc, #248]	; (8002390 <MX_TIM3_Init+0x12c>)
 8002298:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 800229a:	4b3c      	ldr	r3, [pc, #240]	; (800238c <MX_TIM3_Init+0x128>)
 800229c:	2253      	movs	r2, #83	; 0x53
 800229e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a0:	4b3a      	ldr	r3, [pc, #232]	; (800238c <MX_TIM3_Init+0x128>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3999;
 80022a6:	4b39      	ldr	r3, [pc, #228]	; (800238c <MX_TIM3_Init+0x128>)
 80022a8:	f640 729f 	movw	r2, #3999	; 0xf9f
 80022ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ae:	4b37      	ldr	r3, [pc, #220]	; (800238c <MX_TIM3_Init+0x128>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022b4:	4b35      	ldr	r3, [pc, #212]	; (800238c <MX_TIM3_Init+0x128>)
 80022b6:	2280      	movs	r2, #128	; 0x80
 80022b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022ba:	4834      	ldr	r0, [pc, #208]	; (800238c <MX_TIM3_Init+0x128>)
 80022bc:	f002 fa7a 	bl	80047b4 <HAL_TIM_Base_Init>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80022c6:	f7ff fe71 	bl	8001fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022d4:	4619      	mov	r1, r3
 80022d6:	482d      	ldr	r0, [pc, #180]	; (800238c <MX_TIM3_Init+0x128>)
 80022d8:	f002 fc9e 	bl	8004c18 <HAL_TIM_ConfigClockSource>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80022e2:	f7ff fe63 	bl	8001fac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80022e6:	4829      	ldr	r0, [pc, #164]	; (800238c <MX_TIM3_Init+0x128>)
 80022e8:	f002 fab3 	bl	8004852 <HAL_TIM_PWM_Init>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80022f2:	f7ff fe5b 	bl	8001fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022f6:	2300      	movs	r3, #0
 80022f8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022fa:	2300      	movs	r3, #0
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022fe:	f107 0320 	add.w	r3, r7, #32
 8002302:	4619      	mov	r1, r3
 8002304:	4821      	ldr	r0, [pc, #132]	; (800238c <MX_TIM3_Init+0x128>)
 8002306:	f003 f85f 	bl	80053c8 <HAL_TIMEx_MasterConfigSynchronization>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002310:	f7ff fe4c 	bl	8001fac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002314:	2360      	movs	r3, #96	; 0x60
 8002316:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 999;
 8002318:	f240 33e7 	movw	r3, #999	; 0x3e7
 800231c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002322:	2300      	movs	r3, #0
 8002324:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002326:	1d3b      	adds	r3, r7, #4
 8002328:	2200      	movs	r2, #0
 800232a:	4619      	mov	r1, r3
 800232c:	4817      	ldr	r0, [pc, #92]	; (800238c <MX_TIM3_Init+0x128>)
 800232e:	f002 fbb1 	bl	8004a94 <HAL_TIM_PWM_ConfigChannel>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002338:	f7ff fe38 	bl	8001fac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800233c:	1d3b      	adds	r3, r7, #4
 800233e:	2204      	movs	r2, #4
 8002340:	4619      	mov	r1, r3
 8002342:	4812      	ldr	r0, [pc, #72]	; (800238c <MX_TIM3_Init+0x128>)
 8002344:	f002 fba6 	bl	8004a94 <HAL_TIM_PWM_ConfigChannel>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800234e:	f7ff fe2d 	bl	8001fac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002352:	1d3b      	adds	r3, r7, #4
 8002354:	2208      	movs	r2, #8
 8002356:	4619      	mov	r1, r3
 8002358:	480c      	ldr	r0, [pc, #48]	; (800238c <MX_TIM3_Init+0x128>)
 800235a:	f002 fb9b 	bl	8004a94 <HAL_TIM_PWM_ConfigChannel>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8002364:	f7ff fe22 	bl	8001fac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002368:	1d3b      	adds	r3, r7, #4
 800236a:	220c      	movs	r2, #12
 800236c:	4619      	mov	r1, r3
 800236e:	4807      	ldr	r0, [pc, #28]	; (800238c <MX_TIM3_Init+0x128>)
 8002370:	f002 fb90 	bl	8004a94 <HAL_TIM_PWM_ConfigChannel>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 800237a:	f7ff fe17 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800237e:	4803      	ldr	r0, [pc, #12]	; (800238c <MX_TIM3_Init+0x128>)
 8002380:	f000 f82a 	bl	80023d8 <HAL_TIM_MspPostInit>

}
 8002384:	bf00      	nop
 8002386:	3738      	adds	r7, #56	; 0x38
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20000dcc 	.word	0x20000dcc
 8002390:	40000400 	.word	0x40000400

08002394 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a0b      	ldr	r2, [pc, #44]	; (80023d0 <HAL_TIM_Base_MspInit+0x3c>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d10d      	bne.n	80023c2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <HAL_TIM_Base_MspInit+0x40>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	4a09      	ldr	r2, [pc, #36]	; (80023d4 <HAL_TIM_Base_MspInit+0x40>)
 80023b0:	f043 0302 	orr.w	r3, r3, #2
 80023b4:	6413      	str	r3, [r2, #64]	; 0x40
 80023b6:	4b07      	ldr	r3, [pc, #28]	; (80023d4 <HAL_TIM_Base_MspInit+0x40>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80023c2:	bf00      	nop
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	40000400 	.word	0x40000400
 80023d4:	40023800 	.word	0x40023800

080023d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08a      	sub	sp, #40	; 0x28
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e0:	f107 0314 	add.w	r3, r7, #20
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]
 80023ee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a21      	ldr	r2, [pc, #132]	; (800247c <HAL_TIM_MspPostInit+0xa4>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d13b      	bne.n	8002472 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	613b      	str	r3, [r7, #16]
 80023fe:	4b20      	ldr	r3, [pc, #128]	; (8002480 <HAL_TIM_MspPostInit+0xa8>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	4a1f      	ldr	r2, [pc, #124]	; (8002480 <HAL_TIM_MspPostInit+0xa8>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	6313      	str	r3, [r2, #48]	; 0x30
 800240a:	4b1d      	ldr	r3, [pc, #116]	; (8002480 <HAL_TIM_MspPostInit+0xa8>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	613b      	str	r3, [r7, #16]
 8002414:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	4b19      	ldr	r3, [pc, #100]	; (8002480 <HAL_TIM_MspPostInit+0xa8>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	4a18      	ldr	r2, [pc, #96]	; (8002480 <HAL_TIM_MspPostInit+0xa8>)
 8002420:	f043 0302 	orr.w	r3, r3, #2
 8002424:	6313      	str	r3, [r2, #48]	; 0x30
 8002426:	4b16      	ldr	r3, [pc, #88]	; (8002480 <HAL_TIM_MspPostInit+0xa8>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002432:	23c0      	movs	r3, #192	; 0xc0
 8002434:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002436:	2302      	movs	r3, #2
 8002438:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243e:	2300      	movs	r3, #0
 8002440:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002442:	2302      	movs	r3, #2
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002446:	f107 0314 	add.w	r3, r7, #20
 800244a:	4619      	mov	r1, r3
 800244c:	480d      	ldr	r0, [pc, #52]	; (8002484 <HAL_TIM_MspPostInit+0xac>)
 800244e:	f000 ff9f 	bl	8003390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002452:	2303      	movs	r3, #3
 8002454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002456:	2302      	movs	r3, #2
 8002458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245a:	2300      	movs	r3, #0
 800245c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245e:	2300      	movs	r3, #0
 8002460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002462:	2302      	movs	r3, #2
 8002464:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002466:	f107 0314 	add.w	r3, r7, #20
 800246a:	4619      	mov	r1, r3
 800246c:	4806      	ldr	r0, [pc, #24]	; (8002488 <HAL_TIM_MspPostInit+0xb0>)
 800246e:	f000 ff8f 	bl	8003390 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002472:	bf00      	nop
 8002474:	3728      	adds	r7, #40	; 0x28
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40000400 	.word	0x40000400
 8002480:	40023800 	.word	0x40023800
 8002484:	40020000 	.word	0x40020000
 8002488:	40020400 	.word	0x40020400

0800248c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart1_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002490:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <MX_UART4_Init+0x4c>)
 8002492:	4a12      	ldr	r2, [pc, #72]	; (80024dc <MX_UART4_Init+0x50>)
 8002494:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 230400;
 8002496:	4b10      	ldr	r3, [pc, #64]	; (80024d8 <MX_UART4_Init+0x4c>)
 8002498:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 800249c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800249e:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <MX_UART4_Init+0x4c>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80024a4:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <MX_UART4_Init+0x4c>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80024aa:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <MX_UART4_Init+0x4c>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80024b0:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <MX_UART4_Init+0x4c>)
 80024b2:	220c      	movs	r2, #12
 80024b4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024b6:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <MX_UART4_Init+0x4c>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80024bc:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <MX_UART4_Init+0x4c>)
 80024be:	2200      	movs	r2, #0
 80024c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80024c2:	4805      	ldr	r0, [pc, #20]	; (80024d8 <MX_UART4_Init+0x4c>)
 80024c4:	f002 fffc 	bl	80054c0 <HAL_UART_Init>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80024ce:	f7ff fd6d 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20000f78 	.word	0x20000f78
 80024dc:	40004c00 	.word	0x40004c00

080024e0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024e4:	4b11      	ldr	r3, [pc, #68]	; (800252c <MX_USART1_UART_Init+0x4c>)
 80024e6:	4a12      	ldr	r2, [pc, #72]	; (8002530 <MX_USART1_UART_Init+0x50>)
 80024e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 80024ea:	4b10      	ldr	r3, [pc, #64]	; (800252c <MX_USART1_UART_Init+0x4c>)
 80024ec:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80024f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024f2:	4b0e      	ldr	r3, [pc, #56]	; (800252c <MX_USART1_UART_Init+0x4c>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024f8:	4b0c      	ldr	r3, [pc, #48]	; (800252c <MX_USART1_UART_Init+0x4c>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024fe:	4b0b      	ldr	r3, [pc, #44]	; (800252c <MX_USART1_UART_Init+0x4c>)
 8002500:	2200      	movs	r2, #0
 8002502:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002504:	4b09      	ldr	r3, [pc, #36]	; (800252c <MX_USART1_UART_Init+0x4c>)
 8002506:	220c      	movs	r2, #12
 8002508:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800250a:	4b08      	ldr	r3, [pc, #32]	; (800252c <MX_USART1_UART_Init+0x4c>)
 800250c:	2200      	movs	r2, #0
 800250e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002510:	4b06      	ldr	r3, [pc, #24]	; (800252c <MX_USART1_UART_Init+0x4c>)
 8002512:	2200      	movs	r2, #0
 8002514:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002516:	4805      	ldr	r0, [pc, #20]	; (800252c <MX_USART1_UART_Init+0x4c>)
 8002518:	f002 ffd2 	bl	80054c0 <HAL_UART_Init>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002522:	f7ff fd43 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	20000f34 	.word	0x20000f34
 8002530:	40011000 	.word	0x40011000

08002534 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08c      	sub	sp, #48	; 0x30
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253c:	f107 031c 	add.w	r3, r7, #28
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	60da      	str	r2, [r3, #12]
 800254a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a98      	ldr	r2, [pc, #608]	; (80027b4 <HAL_UART_MspInit+0x280>)
 8002552:	4293      	cmp	r3, r2
 8002554:	f040 8092 	bne.w	800267c <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002558:	2300      	movs	r3, #0
 800255a:	61bb      	str	r3, [r7, #24]
 800255c:	4b96      	ldr	r3, [pc, #600]	; (80027b8 <HAL_UART_MspInit+0x284>)
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	4a95      	ldr	r2, [pc, #596]	; (80027b8 <HAL_UART_MspInit+0x284>)
 8002562:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002566:	6413      	str	r3, [r2, #64]	; 0x40
 8002568:	4b93      	ldr	r3, [pc, #588]	; (80027b8 <HAL_UART_MspInit+0x284>)
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002570:	61bb      	str	r3, [r7, #24]
 8002572:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	4b8f      	ldr	r3, [pc, #572]	; (80027b8 <HAL_UART_MspInit+0x284>)
 800257a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257c:	4a8e      	ldr	r2, [pc, #568]	; (80027b8 <HAL_UART_MspInit+0x284>)
 800257e:	f043 0301 	orr.w	r3, r3, #1
 8002582:	6313      	str	r3, [r2, #48]	; 0x30
 8002584:	4b8c      	ldr	r3, [pc, #560]	; (80027b8 <HAL_UART_MspInit+0x284>)
 8002586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	617b      	str	r3, [r7, #20]
 800258e:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002590:	2303      	movs	r3, #3
 8002592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002594:	2302      	movs	r3, #2
 8002596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002598:	2300      	movs	r3, #0
 800259a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800259c:	2303      	movs	r3, #3
 800259e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80025a0:	2308      	movs	r3, #8
 80025a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a4:	f107 031c 	add.w	r3, r7, #28
 80025a8:	4619      	mov	r1, r3
 80025aa:	4884      	ldr	r0, [pc, #528]	; (80027bc <HAL_UART_MspInit+0x288>)
 80025ac:	f000 fef0 	bl	8003390 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80025b0:	4b83      	ldr	r3, [pc, #524]	; (80027c0 <HAL_UART_MspInit+0x28c>)
 80025b2:	4a84      	ldr	r2, [pc, #528]	; (80027c4 <HAL_UART_MspInit+0x290>)
 80025b4:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80025b6:	4b82      	ldr	r3, [pc, #520]	; (80027c0 <HAL_UART_MspInit+0x28c>)
 80025b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025bc:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025be:	4b80      	ldr	r3, [pc, #512]	; (80027c0 <HAL_UART_MspInit+0x28c>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025c4:	4b7e      	ldr	r3, [pc, #504]	; (80027c0 <HAL_UART_MspInit+0x28c>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025ca:	4b7d      	ldr	r3, [pc, #500]	; (80027c0 <HAL_UART_MspInit+0x28c>)
 80025cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025d0:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025d2:	4b7b      	ldr	r3, [pc, #492]	; (80027c0 <HAL_UART_MspInit+0x28c>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025d8:	4b79      	ldr	r3, [pc, #484]	; (80027c0 <HAL_UART_MspInit+0x28c>)
 80025da:	2200      	movs	r2, #0
 80025dc:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80025de:	4b78      	ldr	r3, [pc, #480]	; (80027c0 <HAL_UART_MspInit+0x28c>)
 80025e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025e4:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025e6:	4b76      	ldr	r3, [pc, #472]	; (80027c0 <HAL_UART_MspInit+0x28c>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025ec:	4b74      	ldr	r3, [pc, #464]	; (80027c0 <HAL_UART_MspInit+0x28c>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80025f2:	4873      	ldr	r0, [pc, #460]	; (80027c0 <HAL_UART_MspInit+0x28c>)
 80025f4:	f000 faca 	bl	8002b8c <HAL_DMA_Init>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80025fe:	f7ff fcd5 	bl	8001fac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a6e      	ldr	r2, [pc, #440]	; (80027c0 <HAL_UART_MspInit+0x28c>)
 8002606:	639a      	str	r2, [r3, #56]	; 0x38
 8002608:	4a6d      	ldr	r2, [pc, #436]	; (80027c0 <HAL_UART_MspInit+0x28c>)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800260e:	4b6e      	ldr	r3, [pc, #440]	; (80027c8 <HAL_UART_MspInit+0x294>)
 8002610:	4a6e      	ldr	r2, [pc, #440]	; (80027cc <HAL_UART_MspInit+0x298>)
 8002612:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8002614:	4b6c      	ldr	r3, [pc, #432]	; (80027c8 <HAL_UART_MspInit+0x294>)
 8002616:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800261a:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800261c:	4b6a      	ldr	r3, [pc, #424]	; (80027c8 <HAL_UART_MspInit+0x294>)
 800261e:	2240      	movs	r2, #64	; 0x40
 8002620:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002622:	4b69      	ldr	r3, [pc, #420]	; (80027c8 <HAL_UART_MspInit+0x294>)
 8002624:	2200      	movs	r2, #0
 8002626:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002628:	4b67      	ldr	r3, [pc, #412]	; (80027c8 <HAL_UART_MspInit+0x294>)
 800262a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800262e:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002630:	4b65      	ldr	r3, [pc, #404]	; (80027c8 <HAL_UART_MspInit+0x294>)
 8002632:	2200      	movs	r2, #0
 8002634:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002636:	4b64      	ldr	r3, [pc, #400]	; (80027c8 <HAL_UART_MspInit+0x294>)
 8002638:	2200      	movs	r2, #0
 800263a:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800263c:	4b62      	ldr	r3, [pc, #392]	; (80027c8 <HAL_UART_MspInit+0x294>)
 800263e:	2200      	movs	r2, #0
 8002640:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002642:	4b61      	ldr	r3, [pc, #388]	; (80027c8 <HAL_UART_MspInit+0x294>)
 8002644:	2200      	movs	r2, #0
 8002646:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002648:	4b5f      	ldr	r3, [pc, #380]	; (80027c8 <HAL_UART_MspInit+0x294>)
 800264a:	2200      	movs	r2, #0
 800264c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800264e:	485e      	ldr	r0, [pc, #376]	; (80027c8 <HAL_UART_MspInit+0x294>)
 8002650:	f000 fa9c 	bl	8002b8c <HAL_DMA_Init>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800265a:	f7ff fca7 	bl	8001fac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a59      	ldr	r2, [pc, #356]	; (80027c8 <HAL_UART_MspInit+0x294>)
 8002662:	635a      	str	r2, [r3, #52]	; 0x34
 8002664:	4a58      	ldr	r2, [pc, #352]	; (80027c8 <HAL_UART_MspInit+0x294>)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800266a:	2200      	movs	r2, #0
 800266c:	2100      	movs	r1, #0
 800266e:	2034      	movs	r0, #52	; 0x34
 8002670:	f000 fa55 	bl	8002b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002674:	2034      	movs	r0, #52	; 0x34
 8002676:	f000 fa6e 	bl	8002b56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800267a:	e096      	b.n	80027aa <HAL_UART_MspInit+0x276>
  else if(uartHandle->Instance==USART1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a53      	ldr	r2, [pc, #332]	; (80027d0 <HAL_UART_MspInit+0x29c>)
 8002682:	4293      	cmp	r3, r2
 8002684:	f040 8091 	bne.w	80027aa <HAL_UART_MspInit+0x276>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002688:	2300      	movs	r3, #0
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	4b4a      	ldr	r3, [pc, #296]	; (80027b8 <HAL_UART_MspInit+0x284>)
 800268e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002690:	4a49      	ldr	r2, [pc, #292]	; (80027b8 <HAL_UART_MspInit+0x284>)
 8002692:	f043 0310 	orr.w	r3, r3, #16
 8002696:	6453      	str	r3, [r2, #68]	; 0x44
 8002698:	4b47      	ldr	r3, [pc, #284]	; (80027b8 <HAL_UART_MspInit+0x284>)
 800269a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269c:	f003 0310 	and.w	r3, r3, #16
 80026a0:	613b      	str	r3, [r7, #16]
 80026a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a4:	2300      	movs	r3, #0
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	4b43      	ldr	r3, [pc, #268]	; (80027b8 <HAL_UART_MspInit+0x284>)
 80026aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ac:	4a42      	ldr	r2, [pc, #264]	; (80027b8 <HAL_UART_MspInit+0x284>)
 80026ae:	f043 0302 	orr.w	r3, r3, #2
 80026b2:	6313      	str	r3, [r2, #48]	; 0x30
 80026b4:	4b40      	ldr	r3, [pc, #256]	; (80027b8 <HAL_UART_MspInit+0x284>)
 80026b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026c0:	23c0      	movs	r3, #192	; 0xc0
 80026c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c4:	2302      	movs	r3, #2
 80026c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026cc:	2303      	movs	r3, #3
 80026ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026d0:	2307      	movs	r3, #7
 80026d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d4:	f107 031c 	add.w	r3, r7, #28
 80026d8:	4619      	mov	r1, r3
 80026da:	483e      	ldr	r0, [pc, #248]	; (80027d4 <HAL_UART_MspInit+0x2a0>)
 80026dc:	f000 fe58 	bl	8003390 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80026e0:	4b3d      	ldr	r3, [pc, #244]	; (80027d8 <HAL_UART_MspInit+0x2a4>)
 80026e2:	4a3e      	ldr	r2, [pc, #248]	; (80027dc <HAL_UART_MspInit+0x2a8>)
 80026e4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80026e6:	4b3c      	ldr	r3, [pc, #240]	; (80027d8 <HAL_UART_MspInit+0x2a4>)
 80026e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026ec:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026ee:	4b3a      	ldr	r3, [pc, #232]	; (80027d8 <HAL_UART_MspInit+0x2a4>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026f4:	4b38      	ldr	r3, [pc, #224]	; (80027d8 <HAL_UART_MspInit+0x2a4>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026fa:	4b37      	ldr	r3, [pc, #220]	; (80027d8 <HAL_UART_MspInit+0x2a4>)
 80026fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002700:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002702:	4b35      	ldr	r3, [pc, #212]	; (80027d8 <HAL_UART_MspInit+0x2a4>)
 8002704:	2200      	movs	r2, #0
 8002706:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002708:	4b33      	ldr	r3, [pc, #204]	; (80027d8 <HAL_UART_MspInit+0x2a4>)
 800270a:	2200      	movs	r2, #0
 800270c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800270e:	4b32      	ldr	r3, [pc, #200]	; (80027d8 <HAL_UART_MspInit+0x2a4>)
 8002710:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002714:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002716:	4b30      	ldr	r3, [pc, #192]	; (80027d8 <HAL_UART_MspInit+0x2a4>)
 8002718:	2200      	movs	r2, #0
 800271a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800271c:	4b2e      	ldr	r3, [pc, #184]	; (80027d8 <HAL_UART_MspInit+0x2a4>)
 800271e:	2200      	movs	r2, #0
 8002720:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002722:	482d      	ldr	r0, [pc, #180]	; (80027d8 <HAL_UART_MspInit+0x2a4>)
 8002724:	f000 fa32 	bl	8002b8c <HAL_DMA_Init>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_UART_MspInit+0x1fe>
      Error_Handler();
 800272e:	f7ff fc3d 	bl	8001fac <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a28      	ldr	r2, [pc, #160]	; (80027d8 <HAL_UART_MspInit+0x2a4>)
 8002736:	639a      	str	r2, [r3, #56]	; 0x38
 8002738:	4a27      	ldr	r2, [pc, #156]	; (80027d8 <HAL_UART_MspInit+0x2a4>)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800273e:	4b28      	ldr	r3, [pc, #160]	; (80027e0 <HAL_UART_MspInit+0x2ac>)
 8002740:	4a28      	ldr	r2, [pc, #160]	; (80027e4 <HAL_UART_MspInit+0x2b0>)
 8002742:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002744:	4b26      	ldr	r3, [pc, #152]	; (80027e0 <HAL_UART_MspInit+0x2ac>)
 8002746:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800274a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800274c:	4b24      	ldr	r3, [pc, #144]	; (80027e0 <HAL_UART_MspInit+0x2ac>)
 800274e:	2240      	movs	r2, #64	; 0x40
 8002750:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002752:	4b23      	ldr	r3, [pc, #140]	; (80027e0 <HAL_UART_MspInit+0x2ac>)
 8002754:	2200      	movs	r2, #0
 8002756:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002758:	4b21      	ldr	r3, [pc, #132]	; (80027e0 <HAL_UART_MspInit+0x2ac>)
 800275a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800275e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002760:	4b1f      	ldr	r3, [pc, #124]	; (80027e0 <HAL_UART_MspInit+0x2ac>)
 8002762:	2200      	movs	r2, #0
 8002764:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002766:	4b1e      	ldr	r3, [pc, #120]	; (80027e0 <HAL_UART_MspInit+0x2ac>)
 8002768:	2200      	movs	r2, #0
 800276a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800276c:	4b1c      	ldr	r3, [pc, #112]	; (80027e0 <HAL_UART_MspInit+0x2ac>)
 800276e:	2200      	movs	r2, #0
 8002770:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002772:	4b1b      	ldr	r3, [pc, #108]	; (80027e0 <HAL_UART_MspInit+0x2ac>)
 8002774:	2200      	movs	r2, #0
 8002776:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002778:	4b19      	ldr	r3, [pc, #100]	; (80027e0 <HAL_UART_MspInit+0x2ac>)
 800277a:	2200      	movs	r2, #0
 800277c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800277e:	4818      	ldr	r0, [pc, #96]	; (80027e0 <HAL_UART_MspInit+0x2ac>)
 8002780:	f000 fa04 	bl	8002b8c <HAL_DMA_Init>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <HAL_UART_MspInit+0x25a>
      Error_Handler();
 800278a:	f7ff fc0f 	bl	8001fac <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a13      	ldr	r2, [pc, #76]	; (80027e0 <HAL_UART_MspInit+0x2ac>)
 8002792:	635a      	str	r2, [r3, #52]	; 0x34
 8002794:	4a12      	ldr	r2, [pc, #72]	; (80027e0 <HAL_UART_MspInit+0x2ac>)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800279a:	2200      	movs	r2, #0
 800279c:	2100      	movs	r1, #0
 800279e:	2025      	movs	r0, #37	; 0x25
 80027a0:	f000 f9bd 	bl	8002b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027a4:	2025      	movs	r0, #37	; 0x25
 80027a6:	f000 f9d6 	bl	8002b56 <HAL_NVIC_EnableIRQ>
}
 80027aa:	bf00      	nop
 80027ac:	3730      	adds	r7, #48	; 0x30
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40004c00 	.word	0x40004c00
 80027b8:	40023800 	.word	0x40023800
 80027bc:	40020000 	.word	0x40020000
 80027c0:	20000e14 	.word	0x20000e14
 80027c4:	40026040 	.word	0x40026040
 80027c8:	20000fbc 	.word	0x20000fbc
 80027cc:	40026070 	.word	0x40026070
 80027d0:	40011000 	.word	0x40011000
 80027d4:	40020400 	.word	0x40020400
 80027d8:	20000ed4 	.word	0x20000ed4
 80027dc:	40026440 	.word	0x40026440
 80027e0:	20000e74 	.word	0x20000e74
 80027e4:	400264b8 	.word	0x400264b8

080027e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80027e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002820 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027ec:	480d      	ldr	r0, [pc, #52]	; (8002824 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80027ee:	490e      	ldr	r1, [pc, #56]	; (8002828 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027f0:	4a0e      	ldr	r2, [pc, #56]	; (800282c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027f4:	e002      	b.n	80027fc <LoopCopyDataInit>

080027f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027fa:	3304      	adds	r3, #4

080027fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002800:	d3f9      	bcc.n	80027f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002802:	4a0b      	ldr	r2, [pc, #44]	; (8002830 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002804:	4c0b      	ldr	r4, [pc, #44]	; (8002834 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002808:	e001      	b.n	800280e <LoopFillZerobss>

0800280a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800280a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800280c:	3204      	adds	r2, #4

0800280e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800280e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002810:	d3fb      	bcc.n	800280a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002812:	f7ff fd15 	bl	8002240 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002816:	f003 ff89 	bl	800672c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800281a:	f7ff fb35 	bl	8001e88 <main>
  bx  lr    
 800281e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002820:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002828:	2000038c 	.word	0x2000038c
  ldr r2, =_sidata
 800282c:	0800685c 	.word	0x0800685c
  ldr r2, =_sbss
 8002830:	2000038c 	.word	0x2000038c
  ldr r4, =_ebss
 8002834:	20001020 	.word	0x20001020

08002838 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002838:	e7fe      	b.n	8002838 <ADC_IRQHandler>
	...

0800283c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002840:	4b0e      	ldr	r3, [pc, #56]	; (800287c <HAL_Init+0x40>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a0d      	ldr	r2, [pc, #52]	; (800287c <HAL_Init+0x40>)
 8002846:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800284a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800284c:	4b0b      	ldr	r3, [pc, #44]	; (800287c <HAL_Init+0x40>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a0a      	ldr	r2, [pc, #40]	; (800287c <HAL_Init+0x40>)
 8002852:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002856:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002858:	4b08      	ldr	r3, [pc, #32]	; (800287c <HAL_Init+0x40>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a07      	ldr	r2, [pc, #28]	; (800287c <HAL_Init+0x40>)
 800285e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002862:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002864:	2003      	movs	r0, #3
 8002866:	f000 f94f 	bl	8002b08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800286a:	200f      	movs	r0, #15
 800286c:	f000 f808 	bl	8002880 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002870:	f7ff fc2e 	bl	80020d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40023c00 	.word	0x40023c00

08002880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002888:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <HAL_InitTick+0x54>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	4b12      	ldr	r3, [pc, #72]	; (80028d8 <HAL_InitTick+0x58>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	4619      	mov	r1, r3
 8002892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002896:	fbb3 f3f1 	udiv	r3, r3, r1
 800289a:	fbb2 f3f3 	udiv	r3, r2, r3
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 f967 	bl	8002b72 <HAL_SYSTICK_Config>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e00e      	b.n	80028cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b0f      	cmp	r3, #15
 80028b2:	d80a      	bhi.n	80028ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028b4:	2200      	movs	r2, #0
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	f04f 30ff 	mov.w	r0, #4294967295
 80028bc:	f000 f92f 	bl	8002b1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028c0:	4a06      	ldr	r2, [pc, #24]	; (80028dc <HAL_InitTick+0x5c>)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
 80028c8:	e000      	b.n	80028cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	20000380 	.word	0x20000380
 80028d8:	20000388 	.word	0x20000388
 80028dc:	20000384 	.word	0x20000384

080028e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028e4:	4b06      	ldr	r3, [pc, #24]	; (8002900 <HAL_IncTick+0x20>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	461a      	mov	r2, r3
 80028ea:	4b06      	ldr	r3, [pc, #24]	; (8002904 <HAL_IncTick+0x24>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4413      	add	r3, r2
 80028f0:	4a04      	ldr	r2, [pc, #16]	; (8002904 <HAL_IncTick+0x24>)
 80028f2:	6013      	str	r3, [r2, #0]
}
 80028f4:	bf00      	nop
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	20000388 	.word	0x20000388
 8002904:	2000101c 	.word	0x2000101c

08002908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  return uwTick;
 800290c:	4b03      	ldr	r3, [pc, #12]	; (800291c <HAL_GetTick+0x14>)
 800290e:	681b      	ldr	r3, [r3, #0]
}
 8002910:	4618      	mov	r0, r3
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	2000101c 	.word	0x2000101c

08002920 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002928:	f7ff ffee 	bl	8002908 <HAL_GetTick>
 800292c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002938:	d005      	beq.n	8002946 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800293a:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <HAL_Delay+0x44>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	461a      	mov	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4413      	add	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002946:	bf00      	nop
 8002948:	f7ff ffde 	bl	8002908 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	429a      	cmp	r2, r3
 8002956:	d8f7      	bhi.n	8002948 <HAL_Delay+0x28>
  {
  }
}
 8002958:	bf00      	nop
 800295a:	bf00      	nop
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	20000388 	.word	0x20000388

08002968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002978:	4b0c      	ldr	r3, [pc, #48]	; (80029ac <__NVIC_SetPriorityGrouping+0x44>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002984:	4013      	ands	r3, r2
 8002986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002990:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800299a:	4a04      	ldr	r2, [pc, #16]	; (80029ac <__NVIC_SetPriorityGrouping+0x44>)
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	60d3      	str	r3, [r2, #12]
}
 80029a0:	bf00      	nop
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	e000ed00 	.word	0xe000ed00

080029b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029b4:	4b04      	ldr	r3, [pc, #16]	; (80029c8 <__NVIC_GetPriorityGrouping+0x18>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	0a1b      	lsrs	r3, r3, #8
 80029ba:	f003 0307 	and.w	r3, r3, #7
}
 80029be:	4618      	mov	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	e000ed00 	.word	0xe000ed00

080029cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	db0b      	blt.n	80029f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029de:	79fb      	ldrb	r3, [r7, #7]
 80029e0:	f003 021f 	and.w	r2, r3, #31
 80029e4:	4907      	ldr	r1, [pc, #28]	; (8002a04 <__NVIC_EnableIRQ+0x38>)
 80029e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ea:	095b      	lsrs	r3, r3, #5
 80029ec:	2001      	movs	r0, #1
 80029ee:	fa00 f202 	lsl.w	r2, r0, r2
 80029f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	e000e100 	.word	0xe000e100

08002a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	6039      	str	r1, [r7, #0]
 8002a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	db0a      	blt.n	8002a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	490c      	ldr	r1, [pc, #48]	; (8002a54 <__NVIC_SetPriority+0x4c>)
 8002a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a26:	0112      	lsls	r2, r2, #4
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a30:	e00a      	b.n	8002a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	4908      	ldr	r1, [pc, #32]	; (8002a58 <__NVIC_SetPriority+0x50>)
 8002a38:	79fb      	ldrb	r3, [r7, #7]
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	3b04      	subs	r3, #4
 8002a40:	0112      	lsls	r2, r2, #4
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	440b      	add	r3, r1
 8002a46:	761a      	strb	r2, [r3, #24]
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	e000e100 	.word	0xe000e100
 8002a58:	e000ed00 	.word	0xe000ed00

08002a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b089      	sub	sp, #36	; 0x24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	f1c3 0307 	rsb	r3, r3, #7
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	bf28      	it	cs
 8002a7a:	2304      	movcs	r3, #4
 8002a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	3304      	adds	r3, #4
 8002a82:	2b06      	cmp	r3, #6
 8002a84:	d902      	bls.n	8002a8c <NVIC_EncodePriority+0x30>
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	3b03      	subs	r3, #3
 8002a8a:	e000      	b.n	8002a8e <NVIC_EncodePriority+0x32>
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a90:	f04f 32ff 	mov.w	r2, #4294967295
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43da      	mvns	r2, r3
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	401a      	ands	r2, r3
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002aae:	43d9      	mvns	r1, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab4:	4313      	orrs	r3, r2
         );
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3724      	adds	r7, #36	; 0x24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
	...

08002ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ad4:	d301      	bcc.n	8002ada <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e00f      	b.n	8002afa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ada:	4a0a      	ldr	r2, [pc, #40]	; (8002b04 <SysTick_Config+0x40>)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ae2:	210f      	movs	r1, #15
 8002ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae8:	f7ff ff8e 	bl	8002a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aec:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <SysTick_Config+0x40>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002af2:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <SysTick_Config+0x40>)
 8002af4:	2207      	movs	r2, #7
 8002af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	e000e010 	.word	0xe000e010

08002b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7ff ff29 	bl	8002968 <__NVIC_SetPriorityGrouping>
}
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b086      	sub	sp, #24
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	4603      	mov	r3, r0
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	607a      	str	r2, [r7, #4]
 8002b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b30:	f7ff ff3e 	bl	80029b0 <__NVIC_GetPriorityGrouping>
 8002b34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	68b9      	ldr	r1, [r7, #8]
 8002b3a:	6978      	ldr	r0, [r7, #20]
 8002b3c:	f7ff ff8e 	bl	8002a5c <NVIC_EncodePriority>
 8002b40:	4602      	mov	r2, r0
 8002b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b46:	4611      	mov	r1, r2
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff ff5d 	bl	8002a08 <__NVIC_SetPriority>
}
 8002b4e:	bf00      	nop
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b082      	sub	sp, #8
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff ff31 	bl	80029cc <__NVIC_EnableIRQ>
}
 8002b6a:	bf00      	nop
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b082      	sub	sp, #8
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff ffa2 	bl	8002ac4 <SysTick_Config>
 8002b80:	4603      	mov	r3, r0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
	...

08002b8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b98:	f7ff feb6 	bl	8002908 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e099      	b.n	8002cdc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2202      	movs	r2, #2
 8002bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0201 	bic.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bc8:	e00f      	b.n	8002bea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bca:	f7ff fe9d 	bl	8002908 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b05      	cmp	r3, #5
 8002bd6:	d908      	bls.n	8002bea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2203      	movs	r2, #3
 8002be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e078      	b.n	8002cdc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1e8      	bne.n	8002bca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	4b38      	ldr	r3, [pc, #224]	; (8002ce4 <HAL_DMA_Init+0x158>)
 8002c04:	4013      	ands	r3, r2
 8002c06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	2b04      	cmp	r3, #4
 8002c42:	d107      	bne.n	8002c54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	f023 0307 	bic.w	r3, r3, #7
 8002c6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	d117      	bne.n	8002cae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00e      	beq.n	8002cae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 fb01 	bl	8003298 <DMA_CheckFifoParam>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d008      	beq.n	8002cae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2240      	movs	r2, #64	; 0x40
 8002ca0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002caa:	2301      	movs	r3, #1
 8002cac:	e016      	b.n	8002cdc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 fab8 	bl	800322c <DMA_CalcBaseAndBitshift>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc4:	223f      	movs	r2, #63	; 0x3f
 8002cc6:	409a      	lsls	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	f010803f 	.word	0xf010803f

08002ce8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
 8002cf4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d101      	bne.n	8002d0e <HAL_DMA_Start_IT+0x26>
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	e040      	b.n	8002d90 <HAL_DMA_Start_IT+0xa8>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d12f      	bne.n	8002d82 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2202      	movs	r2, #2
 8002d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	68b9      	ldr	r1, [r7, #8]
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 fa4a 	bl	80031d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d40:	223f      	movs	r2, #63	; 0x3f
 8002d42:	409a      	lsls	r2, r3
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f042 0216 	orr.w	r2, r2, #22
 8002d56:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d007      	beq.n	8002d70 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0208 	orr.w	r2, r2, #8
 8002d6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0201 	orr.w	r2, r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	e005      	b.n	8002d8e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3718      	adds	r7, #24
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002da6:	f7ff fdaf 	bl	8002908 <HAL_GetTick>
 8002daa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d008      	beq.n	8002dca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2280      	movs	r2, #128	; 0x80
 8002dbc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e052      	b.n	8002e70 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0216 	bic.w	r2, r2, #22
 8002dd8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695a      	ldr	r2, [r3, #20]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002de8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d103      	bne.n	8002dfa <HAL_DMA_Abort+0x62>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d007      	beq.n	8002e0a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 0208 	bic.w	r2, r2, #8
 8002e08:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 0201 	bic.w	r2, r2, #1
 8002e18:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e1a:	e013      	b.n	8002e44 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e1c:	f7ff fd74 	bl	8002908 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b05      	cmp	r3, #5
 8002e28:	d90c      	bls.n	8002e44 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2203      	movs	r2, #3
 8002e34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e015      	b.n	8002e70 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1e4      	bne.n	8002e1c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e56:	223f      	movs	r2, #63	; 0x3f
 8002e58:	409a      	lsls	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d004      	beq.n	8002e96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2280      	movs	r2, #128	; 0x80
 8002e90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e00c      	b.n	8002eb0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2205      	movs	r2, #5
 8002e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 0201 	bic.w	r2, r2, #1
 8002eac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ec8:	4b92      	ldr	r3, [pc, #584]	; (8003114 <HAL_DMA_IRQHandler+0x258>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a92      	ldr	r2, [pc, #584]	; (8003118 <HAL_DMA_IRQHandler+0x25c>)
 8002ece:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed2:	0a9b      	lsrs	r3, r3, #10
 8002ed4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee6:	2208      	movs	r2, #8
 8002ee8:	409a      	lsls	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	4013      	ands	r3, r2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d01a      	beq.n	8002f28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d013      	beq.n	8002f28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0204 	bic.w	r2, r2, #4
 8002f0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f14:	2208      	movs	r2, #8
 8002f16:	409a      	lsls	r2, r3
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f20:	f043 0201 	orr.w	r2, r3, #1
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	409a      	lsls	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4013      	ands	r3, r2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d012      	beq.n	8002f5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00b      	beq.n	8002f5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	409a      	lsls	r2, r3
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f56:	f043 0202 	orr.w	r2, r3, #2
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f62:	2204      	movs	r2, #4
 8002f64:	409a      	lsls	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d012      	beq.n	8002f94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00b      	beq.n	8002f94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f80:	2204      	movs	r2, #4
 8002f82:	409a      	lsls	r2, r3
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8c:	f043 0204 	orr.w	r2, r3, #4
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f98:	2210      	movs	r2, #16
 8002f9a:	409a      	lsls	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d043      	beq.n	800302c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0308 	and.w	r3, r3, #8
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d03c      	beq.n	800302c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb6:	2210      	movs	r2, #16
 8002fb8:	409a      	lsls	r2, r3
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d018      	beq.n	8002ffe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d108      	bne.n	8002fec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d024      	beq.n	800302c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	4798      	blx	r3
 8002fea:	e01f      	b.n	800302c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d01b      	beq.n	800302c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	4798      	blx	r3
 8002ffc:	e016      	b.n	800302c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003008:	2b00      	cmp	r3, #0
 800300a:	d107      	bne.n	800301c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 0208 	bic.w	r2, r2, #8
 800301a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003030:	2220      	movs	r2, #32
 8003032:	409a      	lsls	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4013      	ands	r3, r2
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 808e 	beq.w	800315a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0310 	and.w	r3, r3, #16
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 8086 	beq.w	800315a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003052:	2220      	movs	r2, #32
 8003054:	409a      	lsls	r2, r3
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b05      	cmp	r3, #5
 8003064:	d136      	bne.n	80030d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 0216 	bic.w	r2, r2, #22
 8003074:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	695a      	ldr	r2, [r3, #20]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003084:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	2b00      	cmp	r3, #0
 800308c:	d103      	bne.n	8003096 <HAL_DMA_IRQHandler+0x1da>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003092:	2b00      	cmp	r3, #0
 8003094:	d007      	beq.n	80030a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0208 	bic.w	r2, r2, #8
 80030a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030aa:	223f      	movs	r2, #63	; 0x3f
 80030ac:	409a      	lsls	r2, r3
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d07d      	beq.n	80031c6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	4798      	blx	r3
        }
        return;
 80030d2:	e078      	b.n	80031c6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d01c      	beq.n	800311c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d108      	bne.n	8003102 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d030      	beq.n	800315a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	4798      	blx	r3
 8003100:	e02b      	b.n	800315a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003106:	2b00      	cmp	r3, #0
 8003108:	d027      	beq.n	800315a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	4798      	blx	r3
 8003112:	e022      	b.n	800315a <HAL_DMA_IRQHandler+0x29e>
 8003114:	20000380 	.word	0x20000380
 8003118:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10f      	bne.n	800314a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0210 	bic.w	r2, r2, #16
 8003138:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315e:	2b00      	cmp	r3, #0
 8003160:	d032      	beq.n	80031c8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d022      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2205      	movs	r2, #5
 8003172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 0201 	bic.w	r2, r2, #1
 8003184:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	3301      	adds	r3, #1
 800318a:	60bb      	str	r3, [r7, #8]
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	429a      	cmp	r2, r3
 8003190:	d307      	bcc.n	80031a2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1f2      	bne.n	8003186 <HAL_DMA_IRQHandler+0x2ca>
 80031a0:	e000      	b.n	80031a4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80031a2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d005      	beq.n	80031c8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	4798      	blx	r3
 80031c4:	e000      	b.n	80031c8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80031c6:	bf00      	nop
    }
  }
}
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop

080031d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
 80031dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	2b40      	cmp	r3, #64	; 0x40
 80031fc:	d108      	bne.n	8003210 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800320e:	e007      	b.n	8003220 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	60da      	str	r2, [r3, #12]
}
 8003220:	bf00      	nop
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	b2db      	uxtb	r3, r3
 800323a:	3b10      	subs	r3, #16
 800323c:	4a14      	ldr	r2, [pc, #80]	; (8003290 <DMA_CalcBaseAndBitshift+0x64>)
 800323e:	fba2 2303 	umull	r2, r3, r2, r3
 8003242:	091b      	lsrs	r3, r3, #4
 8003244:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003246:	4a13      	ldr	r2, [pc, #76]	; (8003294 <DMA_CalcBaseAndBitshift+0x68>)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4413      	add	r3, r2
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	461a      	mov	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2b03      	cmp	r3, #3
 8003258:	d909      	bls.n	800326e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003262:	f023 0303 	bic.w	r3, r3, #3
 8003266:	1d1a      	adds	r2, r3, #4
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	659a      	str	r2, [r3, #88]	; 0x58
 800326c:	e007      	b.n	800327e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003276:	f023 0303 	bic.w	r3, r3, #3
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003282:	4618      	mov	r0, r3
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	aaaaaaab 	.word	0xaaaaaaab
 8003294:	08006844 	.word	0x08006844

08003298 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032a0:	2300      	movs	r3, #0
 80032a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d11f      	bne.n	80032f2 <DMA_CheckFifoParam+0x5a>
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	d856      	bhi.n	8003366 <DMA_CheckFifoParam+0xce>
 80032b8:	a201      	add	r2, pc, #4	; (adr r2, 80032c0 <DMA_CheckFifoParam+0x28>)
 80032ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032be:	bf00      	nop
 80032c0:	080032d1 	.word	0x080032d1
 80032c4:	080032e3 	.word	0x080032e3
 80032c8:	080032d1 	.word	0x080032d1
 80032cc:	08003367 	.word	0x08003367
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d046      	beq.n	800336a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032e0:	e043      	b.n	800336a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032ea:	d140      	bne.n	800336e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032f0:	e03d      	b.n	800336e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032fa:	d121      	bne.n	8003340 <DMA_CheckFifoParam+0xa8>
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2b03      	cmp	r3, #3
 8003300:	d837      	bhi.n	8003372 <DMA_CheckFifoParam+0xda>
 8003302:	a201      	add	r2, pc, #4	; (adr r2, 8003308 <DMA_CheckFifoParam+0x70>)
 8003304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003308:	08003319 	.word	0x08003319
 800330c:	0800331f 	.word	0x0800331f
 8003310:	08003319 	.word	0x08003319
 8003314:	08003331 	.word	0x08003331
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	73fb      	strb	r3, [r7, #15]
      break;
 800331c:	e030      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003322:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d025      	beq.n	8003376 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800332e:	e022      	b.n	8003376 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003338:	d11f      	bne.n	800337a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800333e:	e01c      	b.n	800337a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	2b02      	cmp	r3, #2
 8003344:	d903      	bls.n	800334e <DMA_CheckFifoParam+0xb6>
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2b03      	cmp	r3, #3
 800334a:	d003      	beq.n	8003354 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800334c:	e018      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	73fb      	strb	r3, [r7, #15]
      break;
 8003352:	e015      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003358:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00e      	beq.n	800337e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	73fb      	strb	r3, [r7, #15]
      break;
 8003364:	e00b      	b.n	800337e <DMA_CheckFifoParam+0xe6>
      break;
 8003366:	bf00      	nop
 8003368:	e00a      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
      break;
 800336a:	bf00      	nop
 800336c:	e008      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
      break;
 800336e:	bf00      	nop
 8003370:	e006      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
      break;
 8003372:	bf00      	nop
 8003374:	e004      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
      break;
 8003376:	bf00      	nop
 8003378:	e002      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
      break;   
 800337a:	bf00      	nop
 800337c:	e000      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
      break;
 800337e:	bf00      	nop
    }
  } 
  
  return status; 
 8003380:	7bfb      	ldrb	r3, [r7, #15]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop

08003390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003390:	b480      	push	{r7}
 8003392:	b089      	sub	sp, #36	; 0x24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800339a:	2300      	movs	r3, #0
 800339c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800339e:	2300      	movs	r3, #0
 80033a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033a6:	2300      	movs	r3, #0
 80033a8:	61fb      	str	r3, [r7, #28]
 80033aa:	e16b      	b.n	8003684 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033ac:	2201      	movs	r2, #1
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	4013      	ands	r3, r2
 80033be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	f040 815a 	bne.w	800367e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f003 0303 	and.w	r3, r3, #3
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d005      	beq.n	80033e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d130      	bne.n	8003444 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	2203      	movs	r2, #3
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	43db      	mvns	r3, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4013      	ands	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4313      	orrs	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003418:	2201      	movs	r2, #1
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	091b      	lsrs	r3, r3, #4
 800342e:	f003 0201 	and.w	r2, r3, #1
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4313      	orrs	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 0303 	and.w	r3, r3, #3
 800344c:	2b03      	cmp	r3, #3
 800344e:	d017      	beq.n	8003480 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	2203      	movs	r2, #3
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	43db      	mvns	r3, r3
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	4013      	ands	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4313      	orrs	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f003 0303 	and.w	r3, r3, #3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d123      	bne.n	80034d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	08da      	lsrs	r2, r3, #3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3208      	adds	r2, #8
 8003494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003498:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	220f      	movs	r2, #15
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	43db      	mvns	r3, r3
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4013      	ands	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	691a      	ldr	r2, [r3, #16]
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	08da      	lsrs	r2, r3, #3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	3208      	adds	r2, #8
 80034ce:	69b9      	ldr	r1, [r7, #24]
 80034d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	2203      	movs	r2, #3
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	43db      	mvns	r3, r3
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4013      	ands	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f003 0203 	and.w	r2, r3, #3
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	4313      	orrs	r3, r2
 8003500:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 80b4 	beq.w	800367e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003516:	2300      	movs	r3, #0
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	4b60      	ldr	r3, [pc, #384]	; (800369c <HAL_GPIO_Init+0x30c>)
 800351c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351e:	4a5f      	ldr	r2, [pc, #380]	; (800369c <HAL_GPIO_Init+0x30c>)
 8003520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003524:	6453      	str	r3, [r2, #68]	; 0x44
 8003526:	4b5d      	ldr	r3, [pc, #372]	; (800369c <HAL_GPIO_Init+0x30c>)
 8003528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003532:	4a5b      	ldr	r2, [pc, #364]	; (80036a0 <HAL_GPIO_Init+0x310>)
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	089b      	lsrs	r3, r3, #2
 8003538:	3302      	adds	r3, #2
 800353a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800353e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	f003 0303 	and.w	r3, r3, #3
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	220f      	movs	r2, #15
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	43db      	mvns	r3, r3
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4013      	ands	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a52      	ldr	r2, [pc, #328]	; (80036a4 <HAL_GPIO_Init+0x314>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d02b      	beq.n	80035b6 <HAL_GPIO_Init+0x226>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a51      	ldr	r2, [pc, #324]	; (80036a8 <HAL_GPIO_Init+0x318>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d025      	beq.n	80035b2 <HAL_GPIO_Init+0x222>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a50      	ldr	r2, [pc, #320]	; (80036ac <HAL_GPIO_Init+0x31c>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d01f      	beq.n	80035ae <HAL_GPIO_Init+0x21e>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a4f      	ldr	r2, [pc, #316]	; (80036b0 <HAL_GPIO_Init+0x320>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d019      	beq.n	80035aa <HAL_GPIO_Init+0x21a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a4e      	ldr	r2, [pc, #312]	; (80036b4 <HAL_GPIO_Init+0x324>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d013      	beq.n	80035a6 <HAL_GPIO_Init+0x216>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a4d      	ldr	r2, [pc, #308]	; (80036b8 <HAL_GPIO_Init+0x328>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d00d      	beq.n	80035a2 <HAL_GPIO_Init+0x212>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a4c      	ldr	r2, [pc, #304]	; (80036bc <HAL_GPIO_Init+0x32c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d007      	beq.n	800359e <HAL_GPIO_Init+0x20e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a4b      	ldr	r2, [pc, #300]	; (80036c0 <HAL_GPIO_Init+0x330>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d101      	bne.n	800359a <HAL_GPIO_Init+0x20a>
 8003596:	2307      	movs	r3, #7
 8003598:	e00e      	b.n	80035b8 <HAL_GPIO_Init+0x228>
 800359a:	2308      	movs	r3, #8
 800359c:	e00c      	b.n	80035b8 <HAL_GPIO_Init+0x228>
 800359e:	2306      	movs	r3, #6
 80035a0:	e00a      	b.n	80035b8 <HAL_GPIO_Init+0x228>
 80035a2:	2305      	movs	r3, #5
 80035a4:	e008      	b.n	80035b8 <HAL_GPIO_Init+0x228>
 80035a6:	2304      	movs	r3, #4
 80035a8:	e006      	b.n	80035b8 <HAL_GPIO_Init+0x228>
 80035aa:	2303      	movs	r3, #3
 80035ac:	e004      	b.n	80035b8 <HAL_GPIO_Init+0x228>
 80035ae:	2302      	movs	r3, #2
 80035b0:	e002      	b.n	80035b8 <HAL_GPIO_Init+0x228>
 80035b2:	2301      	movs	r3, #1
 80035b4:	e000      	b.n	80035b8 <HAL_GPIO_Init+0x228>
 80035b6:	2300      	movs	r3, #0
 80035b8:	69fa      	ldr	r2, [r7, #28]
 80035ba:	f002 0203 	and.w	r2, r2, #3
 80035be:	0092      	lsls	r2, r2, #2
 80035c0:	4093      	lsls	r3, r2
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035c8:	4935      	ldr	r1, [pc, #212]	; (80036a0 <HAL_GPIO_Init+0x310>)
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	089b      	lsrs	r3, r3, #2
 80035ce:	3302      	adds	r3, #2
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035d6:	4b3b      	ldr	r3, [pc, #236]	; (80036c4 <HAL_GPIO_Init+0x334>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	43db      	mvns	r3, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4013      	ands	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035fa:	4a32      	ldr	r2, [pc, #200]	; (80036c4 <HAL_GPIO_Init+0x334>)
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003600:	4b30      	ldr	r3, [pc, #192]	; (80036c4 <HAL_GPIO_Init+0x334>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	43db      	mvns	r3, r3
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4013      	ands	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d003      	beq.n	8003624 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	4313      	orrs	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003624:	4a27      	ldr	r2, [pc, #156]	; (80036c4 <HAL_GPIO_Init+0x334>)
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800362a:	4b26      	ldr	r3, [pc, #152]	; (80036c4 <HAL_GPIO_Init+0x334>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	43db      	mvns	r3, r3
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	4013      	ands	r3, r2
 8003638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	4313      	orrs	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800364e:	4a1d      	ldr	r2, [pc, #116]	; (80036c4 <HAL_GPIO_Init+0x334>)
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003654:	4b1b      	ldr	r3, [pc, #108]	; (80036c4 <HAL_GPIO_Init+0x334>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	43db      	mvns	r3, r3
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	4013      	ands	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	4313      	orrs	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003678:	4a12      	ldr	r2, [pc, #72]	; (80036c4 <HAL_GPIO_Init+0x334>)
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	3301      	adds	r3, #1
 8003682:	61fb      	str	r3, [r7, #28]
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	2b0f      	cmp	r3, #15
 8003688:	f67f ae90 	bls.w	80033ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800368c:	bf00      	nop
 800368e:	bf00      	nop
 8003690:	3724      	adds	r7, #36	; 0x24
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	40023800 	.word	0x40023800
 80036a0:	40013800 	.word	0x40013800
 80036a4:	40020000 	.word	0x40020000
 80036a8:	40020400 	.word	0x40020400
 80036ac:	40020800 	.word	0x40020800
 80036b0:	40020c00 	.word	0x40020c00
 80036b4:	40021000 	.word	0x40021000
 80036b8:	40021400 	.word	0x40021400
 80036bc:	40021800 	.word	0x40021800
 80036c0:	40021c00 	.word	0x40021c00
 80036c4:	40013c00 	.word	0x40013c00

080036c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	460b      	mov	r3, r1
 80036d2:	807b      	strh	r3, [r7, #2]
 80036d4:	4613      	mov	r3, r2
 80036d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036d8:	787b      	ldrb	r3, [r7, #1]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036de:	887a      	ldrh	r2, [r7, #2]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036e4:	e003      	b.n	80036ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036e6:	887b      	ldrh	r3, [r7, #2]
 80036e8:	041a      	lsls	r2, r3, #16
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	619a      	str	r2, [r3, #24]
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
	...

080036fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e264      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d075      	beq.n	8003806 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800371a:	4ba3      	ldr	r3, [pc, #652]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 030c 	and.w	r3, r3, #12
 8003722:	2b04      	cmp	r3, #4
 8003724:	d00c      	beq.n	8003740 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003726:	4ba0      	ldr	r3, [pc, #640]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800372e:	2b08      	cmp	r3, #8
 8003730:	d112      	bne.n	8003758 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003732:	4b9d      	ldr	r3, [pc, #628]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800373a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800373e:	d10b      	bne.n	8003758 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003740:	4b99      	ldr	r3, [pc, #612]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d05b      	beq.n	8003804 <HAL_RCC_OscConfig+0x108>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d157      	bne.n	8003804 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e23f      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003760:	d106      	bne.n	8003770 <HAL_RCC_OscConfig+0x74>
 8003762:	4b91      	ldr	r3, [pc, #580]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a90      	ldr	r2, [pc, #576]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800376c:	6013      	str	r3, [r2, #0]
 800376e:	e01d      	b.n	80037ac <HAL_RCC_OscConfig+0xb0>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003778:	d10c      	bne.n	8003794 <HAL_RCC_OscConfig+0x98>
 800377a:	4b8b      	ldr	r3, [pc, #556]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a8a      	ldr	r2, [pc, #552]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003780:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	4b88      	ldr	r3, [pc, #544]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a87      	ldr	r2, [pc, #540]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800378c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003790:	6013      	str	r3, [r2, #0]
 8003792:	e00b      	b.n	80037ac <HAL_RCC_OscConfig+0xb0>
 8003794:	4b84      	ldr	r3, [pc, #528]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a83      	ldr	r2, [pc, #524]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800379a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800379e:	6013      	str	r3, [r2, #0]
 80037a0:	4b81      	ldr	r3, [pc, #516]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a80      	ldr	r2, [pc, #512]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 80037a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d013      	beq.n	80037dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b4:	f7ff f8a8 	bl	8002908 <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037bc:	f7ff f8a4 	bl	8002908 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b64      	cmp	r3, #100	; 0x64
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e204      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ce:	4b76      	ldr	r3, [pc, #472]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0f0      	beq.n	80037bc <HAL_RCC_OscConfig+0xc0>
 80037da:	e014      	b.n	8003806 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037dc:	f7ff f894 	bl	8002908 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037e4:	f7ff f890 	bl	8002908 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b64      	cmp	r3, #100	; 0x64
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e1f0      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037f6:	4b6c      	ldr	r3, [pc, #432]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f0      	bne.n	80037e4 <HAL_RCC_OscConfig+0xe8>
 8003802:	e000      	b.n	8003806 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003804:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d063      	beq.n	80038da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003812:	4b65      	ldr	r3, [pc, #404]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 030c 	and.w	r3, r3, #12
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00b      	beq.n	8003836 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800381e:	4b62      	ldr	r3, [pc, #392]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003826:	2b08      	cmp	r3, #8
 8003828:	d11c      	bne.n	8003864 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800382a:	4b5f      	ldr	r3, [pc, #380]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d116      	bne.n	8003864 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003836:	4b5c      	ldr	r3, [pc, #368]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d005      	beq.n	800384e <HAL_RCC_OscConfig+0x152>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d001      	beq.n	800384e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e1c4      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800384e:	4b56      	ldr	r3, [pc, #344]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	4952      	ldr	r1, [pc, #328]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800385e:	4313      	orrs	r3, r2
 8003860:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003862:	e03a      	b.n	80038da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d020      	beq.n	80038ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800386c:	4b4f      	ldr	r3, [pc, #316]	; (80039ac <HAL_RCC_OscConfig+0x2b0>)
 800386e:	2201      	movs	r2, #1
 8003870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003872:	f7ff f849 	bl	8002908 <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003878:	e008      	b.n	800388c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800387a:	f7ff f845 	bl	8002908 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d901      	bls.n	800388c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e1a5      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800388c:	4b46      	ldr	r3, [pc, #280]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0f0      	beq.n	800387a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003898:	4b43      	ldr	r3, [pc, #268]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	4940      	ldr	r1, [pc, #256]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	600b      	str	r3, [r1, #0]
 80038ac:	e015      	b.n	80038da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ae:	4b3f      	ldr	r3, [pc, #252]	; (80039ac <HAL_RCC_OscConfig+0x2b0>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b4:	f7ff f828 	bl	8002908 <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038bc:	f7ff f824 	bl	8002908 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e184      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ce:	4b36      	ldr	r3, [pc, #216]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f0      	bne.n	80038bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d030      	beq.n	8003948 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d016      	beq.n	800391c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ee:	4b30      	ldr	r3, [pc, #192]	; (80039b0 <HAL_RCC_OscConfig+0x2b4>)
 80038f0:	2201      	movs	r2, #1
 80038f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f4:	f7ff f808 	bl	8002908 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038fc:	f7ff f804 	bl	8002908 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e164      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800390e:	4b26      	ldr	r3, [pc, #152]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0f0      	beq.n	80038fc <HAL_RCC_OscConfig+0x200>
 800391a:	e015      	b.n	8003948 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800391c:	4b24      	ldr	r3, [pc, #144]	; (80039b0 <HAL_RCC_OscConfig+0x2b4>)
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003922:	f7fe fff1 	bl	8002908 <HAL_GetTick>
 8003926:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003928:	e008      	b.n	800393c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800392a:	f7fe ffed 	bl	8002908 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e14d      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800393c:	4b1a      	ldr	r3, [pc, #104]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800393e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1f0      	bne.n	800392a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b00      	cmp	r3, #0
 8003952:	f000 80a0 	beq.w	8003a96 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003956:	2300      	movs	r3, #0
 8003958:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800395a:	4b13      	ldr	r3, [pc, #76]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10f      	bne.n	8003986 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003966:	2300      	movs	r3, #0
 8003968:	60bb      	str	r3, [r7, #8]
 800396a:	4b0f      	ldr	r3, [pc, #60]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	4a0e      	ldr	r2, [pc, #56]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003974:	6413      	str	r3, [r2, #64]	; 0x40
 8003976:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800397e:	60bb      	str	r3, [r7, #8]
 8003980:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003982:	2301      	movs	r3, #1
 8003984:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003986:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <HAL_RCC_OscConfig+0x2b8>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398e:	2b00      	cmp	r3, #0
 8003990:	d121      	bne.n	80039d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003992:	4b08      	ldr	r3, [pc, #32]	; (80039b4 <HAL_RCC_OscConfig+0x2b8>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a07      	ldr	r2, [pc, #28]	; (80039b4 <HAL_RCC_OscConfig+0x2b8>)
 8003998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800399c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800399e:	f7fe ffb3 	bl	8002908 <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a4:	e011      	b.n	80039ca <HAL_RCC_OscConfig+0x2ce>
 80039a6:	bf00      	nop
 80039a8:	40023800 	.word	0x40023800
 80039ac:	42470000 	.word	0x42470000
 80039b0:	42470e80 	.word	0x42470e80
 80039b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039b8:	f7fe ffa6 	bl	8002908 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e106      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ca:	4b85      	ldr	r3, [pc, #532]	; (8003be0 <HAL_RCC_OscConfig+0x4e4>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0f0      	beq.n	80039b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d106      	bne.n	80039ec <HAL_RCC_OscConfig+0x2f0>
 80039de:	4b81      	ldr	r3, [pc, #516]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 80039e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e2:	4a80      	ldr	r2, [pc, #512]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 80039e4:	f043 0301 	orr.w	r3, r3, #1
 80039e8:	6713      	str	r3, [r2, #112]	; 0x70
 80039ea:	e01c      	b.n	8003a26 <HAL_RCC_OscConfig+0x32a>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	2b05      	cmp	r3, #5
 80039f2:	d10c      	bne.n	8003a0e <HAL_RCC_OscConfig+0x312>
 80039f4:	4b7b      	ldr	r3, [pc, #492]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 80039f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f8:	4a7a      	ldr	r2, [pc, #488]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 80039fa:	f043 0304 	orr.w	r3, r3, #4
 80039fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003a00:	4b78      	ldr	r3, [pc, #480]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a04:	4a77      	ldr	r2, [pc, #476]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003a06:	f043 0301 	orr.w	r3, r3, #1
 8003a0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a0c:	e00b      	b.n	8003a26 <HAL_RCC_OscConfig+0x32a>
 8003a0e:	4b75      	ldr	r3, [pc, #468]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a12:	4a74      	ldr	r2, [pc, #464]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003a14:	f023 0301 	bic.w	r3, r3, #1
 8003a18:	6713      	str	r3, [r2, #112]	; 0x70
 8003a1a:	4b72      	ldr	r3, [pc, #456]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1e:	4a71      	ldr	r2, [pc, #452]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003a20:	f023 0304 	bic.w	r3, r3, #4
 8003a24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d015      	beq.n	8003a5a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2e:	f7fe ff6b 	bl	8002908 <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a34:	e00a      	b.n	8003a4c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a36:	f7fe ff67 	bl	8002908 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e0c5      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a4c:	4b65      	ldr	r3, [pc, #404]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0ee      	beq.n	8003a36 <HAL_RCC_OscConfig+0x33a>
 8003a58:	e014      	b.n	8003a84 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a5a:	f7fe ff55 	bl	8002908 <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a60:	e00a      	b.n	8003a78 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a62:	f7fe ff51 	bl	8002908 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e0af      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a78:	4b5a      	ldr	r3, [pc, #360]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1ee      	bne.n	8003a62 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a84:	7dfb      	ldrb	r3, [r7, #23]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d105      	bne.n	8003a96 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a8a:	4b56      	ldr	r3, [pc, #344]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	4a55      	ldr	r2, [pc, #340]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 809b 	beq.w	8003bd6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003aa0:	4b50      	ldr	r3, [pc, #320]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 030c 	and.w	r3, r3, #12
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d05c      	beq.n	8003b66 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d141      	bne.n	8003b38 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab4:	4b4c      	ldr	r3, [pc, #304]	; (8003be8 <HAL_RCC_OscConfig+0x4ec>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aba:	f7fe ff25 	bl	8002908 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ac2:	f7fe ff21 	bl	8002908 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e081      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad4:	4b43      	ldr	r3, [pc, #268]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1f0      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	69da      	ldr	r2, [r3, #28]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	019b      	lsls	r3, r3, #6
 8003af0:	431a      	orrs	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af6:	085b      	lsrs	r3, r3, #1
 8003af8:	3b01      	subs	r3, #1
 8003afa:	041b      	lsls	r3, r3, #16
 8003afc:	431a      	orrs	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b02:	061b      	lsls	r3, r3, #24
 8003b04:	4937      	ldr	r1, [pc, #220]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b0a:	4b37      	ldr	r3, [pc, #220]	; (8003be8 <HAL_RCC_OscConfig+0x4ec>)
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b10:	f7fe fefa 	bl	8002908 <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b18:	f7fe fef6 	bl	8002908 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e056      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b2a:	4b2e      	ldr	r3, [pc, #184]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0f0      	beq.n	8003b18 <HAL_RCC_OscConfig+0x41c>
 8003b36:	e04e      	b.n	8003bd6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b38:	4b2b      	ldr	r3, [pc, #172]	; (8003be8 <HAL_RCC_OscConfig+0x4ec>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b3e:	f7fe fee3 	bl	8002908 <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b44:	e008      	b.n	8003b58 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b46:	f7fe fedf 	bl	8002908 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d901      	bls.n	8003b58 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e03f      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b58:	4b22      	ldr	r3, [pc, #136]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1f0      	bne.n	8003b46 <HAL_RCC_OscConfig+0x44a>
 8003b64:	e037      	b.n	8003bd6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d101      	bne.n	8003b72 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e032      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b72:	4b1c      	ldr	r3, [pc, #112]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d028      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d121      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d11a      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ba8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d111      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb8:	085b      	lsrs	r3, r3, #1
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d107      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d001      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e000      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3718      	adds	r7, #24
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	40007000 	.word	0x40007000
 8003be4:	40023800 	.word	0x40023800
 8003be8:	42470060 	.word	0x42470060

08003bec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e0cc      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c00:	4b68      	ldr	r3, [pc, #416]	; (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d90c      	bls.n	8003c28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c0e:	4b65      	ldr	r3, [pc, #404]	; (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	b2d2      	uxtb	r2, r2
 8003c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c16:	4b63      	ldr	r3, [pc, #396]	; (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0307 	and.w	r3, r3, #7
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d001      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e0b8      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d020      	beq.n	8003c76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d005      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c40:	4b59      	ldr	r3, [pc, #356]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	4a58      	ldr	r2, [pc, #352]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0308 	and.w	r3, r3, #8
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d005      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c58:	4b53      	ldr	r3, [pc, #332]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	4a52      	ldr	r2, [pc, #328]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c64:	4b50      	ldr	r3, [pc, #320]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	494d      	ldr	r1, [pc, #308]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d044      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d107      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8a:	4b47      	ldr	r3, [pc, #284]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d119      	bne.n	8003cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e07f      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d003      	beq.n	8003caa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ca6:	2b03      	cmp	r3, #3
 8003ca8:	d107      	bne.n	8003cba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003caa:	4b3f      	ldr	r3, [pc, #252]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d109      	bne.n	8003cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e06f      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cba:	4b3b      	ldr	r3, [pc, #236]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e067      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cca:	4b37      	ldr	r3, [pc, #220]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f023 0203 	bic.w	r2, r3, #3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	4934      	ldr	r1, [pc, #208]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cdc:	f7fe fe14 	bl	8002908 <HAL_GetTick>
 8003ce0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce2:	e00a      	b.n	8003cfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ce4:	f7fe fe10 	bl	8002908 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e04f      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfa:	4b2b      	ldr	r3, [pc, #172]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 020c 	and.w	r2, r3, #12
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d1eb      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d0c:	4b25      	ldr	r3, [pc, #148]	; (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0307 	and.w	r3, r3, #7
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d20c      	bcs.n	8003d34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1a:	4b22      	ldr	r3, [pc, #136]	; (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d22:	4b20      	ldr	r3, [pc, #128]	; (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0307 	and.w	r3, r3, #7
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d001      	beq.n	8003d34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e032      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d008      	beq.n	8003d52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d40:	4b19      	ldr	r3, [pc, #100]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	4916      	ldr	r1, [pc, #88]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d009      	beq.n	8003d72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d5e:	4b12      	ldr	r3, [pc, #72]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	490e      	ldr	r1, [pc, #56]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d72:	f000 f821 	bl	8003db8 <HAL_RCC_GetSysClockFreq>
 8003d76:	4602      	mov	r2, r0
 8003d78:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	091b      	lsrs	r3, r3, #4
 8003d7e:	f003 030f 	and.w	r3, r3, #15
 8003d82:	490a      	ldr	r1, [pc, #40]	; (8003dac <HAL_RCC_ClockConfig+0x1c0>)
 8003d84:	5ccb      	ldrb	r3, [r1, r3]
 8003d86:	fa22 f303 	lsr.w	r3, r2, r3
 8003d8a:	4a09      	ldr	r2, [pc, #36]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d8e:	4b09      	ldr	r3, [pc, #36]	; (8003db4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fe fd74 	bl	8002880 <HAL_InitTick>

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	40023c00 	.word	0x40023c00
 8003da8:	40023800 	.word	0x40023800
 8003dac:	0800682c 	.word	0x0800682c
 8003db0:	20000380 	.word	0x20000380
 8003db4:	20000384 	.word	0x20000384

08003db8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003db8:	b5b0      	push	{r4, r5, r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	6079      	str	r1, [r7, #4]
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	60f9      	str	r1, [r7, #12]
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003dca:	2100      	movs	r1, #0
 8003dcc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dce:	4952      	ldr	r1, [pc, #328]	; (8003f18 <HAL_RCC_GetSysClockFreq+0x160>)
 8003dd0:	6889      	ldr	r1, [r1, #8]
 8003dd2:	f001 010c 	and.w	r1, r1, #12
 8003dd6:	2908      	cmp	r1, #8
 8003dd8:	d00d      	beq.n	8003df6 <HAL_RCC_GetSysClockFreq+0x3e>
 8003dda:	2908      	cmp	r1, #8
 8003ddc:	f200 8094 	bhi.w	8003f08 <HAL_RCC_GetSysClockFreq+0x150>
 8003de0:	2900      	cmp	r1, #0
 8003de2:	d002      	beq.n	8003dea <HAL_RCC_GetSysClockFreq+0x32>
 8003de4:	2904      	cmp	r1, #4
 8003de6:	d003      	beq.n	8003df0 <HAL_RCC_GetSysClockFreq+0x38>
 8003de8:	e08e      	b.n	8003f08 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dea:	4b4c      	ldr	r3, [pc, #304]	; (8003f1c <HAL_RCC_GetSysClockFreq+0x164>)
 8003dec:	60bb      	str	r3, [r7, #8]
       break;
 8003dee:	e08e      	b.n	8003f0e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003df0:	4b4b      	ldr	r3, [pc, #300]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x168>)
 8003df2:	60bb      	str	r3, [r7, #8]
      break;
 8003df4:	e08b      	b.n	8003f0e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003df6:	4948      	ldr	r1, [pc, #288]	; (8003f18 <HAL_RCC_GetSysClockFreq+0x160>)
 8003df8:	6849      	ldr	r1, [r1, #4]
 8003dfa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003dfe:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e00:	4945      	ldr	r1, [pc, #276]	; (8003f18 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e02:	6849      	ldr	r1, [r1, #4]
 8003e04:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003e08:	2900      	cmp	r1, #0
 8003e0a:	d024      	beq.n	8003e56 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e0c:	4942      	ldr	r1, [pc, #264]	; (8003f18 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e0e:	6849      	ldr	r1, [r1, #4]
 8003e10:	0989      	lsrs	r1, r1, #6
 8003e12:	4608      	mov	r0, r1
 8003e14:	f04f 0100 	mov.w	r1, #0
 8003e18:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003e1c:	f04f 0500 	mov.w	r5, #0
 8003e20:	ea00 0204 	and.w	r2, r0, r4
 8003e24:	ea01 0305 	and.w	r3, r1, r5
 8003e28:	493d      	ldr	r1, [pc, #244]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x168>)
 8003e2a:	fb01 f003 	mul.w	r0, r1, r3
 8003e2e:	2100      	movs	r1, #0
 8003e30:	fb01 f102 	mul.w	r1, r1, r2
 8003e34:	1844      	adds	r4, r0, r1
 8003e36:	493a      	ldr	r1, [pc, #232]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x168>)
 8003e38:	fba2 0101 	umull	r0, r1, r2, r1
 8003e3c:	1863      	adds	r3, r4, r1
 8003e3e:	4619      	mov	r1, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	461a      	mov	r2, r3
 8003e44:	f04f 0300 	mov.w	r3, #0
 8003e48:	f7fc f9be 	bl	80001c8 <__aeabi_uldivmod>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4613      	mov	r3, r2
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	e04a      	b.n	8003eec <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e56:	4b30      	ldr	r3, [pc, #192]	; (8003f18 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	099b      	lsrs	r3, r3, #6
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	f04f 0300 	mov.w	r3, #0
 8003e62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e66:	f04f 0100 	mov.w	r1, #0
 8003e6a:	ea02 0400 	and.w	r4, r2, r0
 8003e6e:	ea03 0501 	and.w	r5, r3, r1
 8003e72:	4620      	mov	r0, r4
 8003e74:	4629      	mov	r1, r5
 8003e76:	f04f 0200 	mov.w	r2, #0
 8003e7a:	f04f 0300 	mov.w	r3, #0
 8003e7e:	014b      	lsls	r3, r1, #5
 8003e80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e84:	0142      	lsls	r2, r0, #5
 8003e86:	4610      	mov	r0, r2
 8003e88:	4619      	mov	r1, r3
 8003e8a:	1b00      	subs	r0, r0, r4
 8003e8c:	eb61 0105 	sbc.w	r1, r1, r5
 8003e90:	f04f 0200 	mov.w	r2, #0
 8003e94:	f04f 0300 	mov.w	r3, #0
 8003e98:	018b      	lsls	r3, r1, #6
 8003e9a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e9e:	0182      	lsls	r2, r0, #6
 8003ea0:	1a12      	subs	r2, r2, r0
 8003ea2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ea6:	f04f 0000 	mov.w	r0, #0
 8003eaa:	f04f 0100 	mov.w	r1, #0
 8003eae:	00d9      	lsls	r1, r3, #3
 8003eb0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003eb4:	00d0      	lsls	r0, r2, #3
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	1912      	adds	r2, r2, r4
 8003ebc:	eb45 0303 	adc.w	r3, r5, r3
 8003ec0:	f04f 0000 	mov.w	r0, #0
 8003ec4:	f04f 0100 	mov.w	r1, #0
 8003ec8:	0299      	lsls	r1, r3, #10
 8003eca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003ece:	0290      	lsls	r0, r2, #10
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4610      	mov	r0, r2
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	461a      	mov	r2, r3
 8003edc:	f04f 0300 	mov.w	r3, #0
 8003ee0:	f7fc f972 	bl	80001c8 <__aeabi_uldivmod>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4613      	mov	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003eec:	4b0a      	ldr	r3, [pc, #40]	; (8003f18 <HAL_RCC_GetSysClockFreq+0x160>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	0c1b      	lsrs	r3, r3, #16
 8003ef2:	f003 0303 	and.w	r3, r3, #3
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f04:	60bb      	str	r3, [r7, #8]
      break;
 8003f06:	e002      	b.n	8003f0e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f08:	4b04      	ldr	r3, [pc, #16]	; (8003f1c <HAL_RCC_GetSysClockFreq+0x164>)
 8003f0a:	60bb      	str	r3, [r7, #8]
      break;
 8003f0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f0e:	68bb      	ldr	r3, [r7, #8]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bdb0      	pop	{r4, r5, r7, pc}
 8003f18:	40023800 	.word	0x40023800
 8003f1c:	00f42400 	.word	0x00f42400
 8003f20:	017d7840 	.word	0x017d7840

08003f24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f28:	4b03      	ldr	r3, [pc, #12]	; (8003f38 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	20000380 	.word	0x20000380

08003f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f40:	f7ff fff0 	bl	8003f24 <HAL_RCC_GetHCLKFreq>
 8003f44:	4602      	mov	r2, r0
 8003f46:	4b05      	ldr	r3, [pc, #20]	; (8003f5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	0a9b      	lsrs	r3, r3, #10
 8003f4c:	f003 0307 	and.w	r3, r3, #7
 8003f50:	4903      	ldr	r1, [pc, #12]	; (8003f60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f52:	5ccb      	ldrb	r3, [r1, r3]
 8003f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	40023800 	.word	0x40023800
 8003f60:	0800683c 	.word	0x0800683c

08003f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f68:	f7ff ffdc 	bl	8003f24 <HAL_RCC_GetHCLKFreq>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	4b05      	ldr	r3, [pc, #20]	; (8003f84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	0b5b      	lsrs	r3, r3, #13
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	4903      	ldr	r1, [pc, #12]	; (8003f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f7a:	5ccb      	ldrb	r3, [r1, r3]
 8003f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40023800 	.word	0x40023800
 8003f88:	0800683c 	.word	0x0800683c

08003f8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e07b      	b.n	8004096 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d108      	bne.n	8003fb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fae:	d009      	beq.n	8003fc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	61da      	str	r2, [r3, #28]
 8003fb6:	e005      	b.n	8003fc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d106      	bne.n	8003fe4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7fe f820 	bl	8002024 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ffa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800400c:	431a      	orrs	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004016:	431a      	orrs	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	431a      	orrs	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004034:	431a      	orrs	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800403e:	431a      	orrs	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004048:	ea42 0103 	orr.w	r1, r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004050:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	430a      	orrs	r2, r1
 800405a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	0c1b      	lsrs	r3, r3, #16
 8004062:	f003 0104 	and.w	r1, r3, #4
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	f003 0210 	and.w	r2, r3, #16
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	69da      	ldr	r2, [r3, #28]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004084:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b08c      	sub	sp, #48	; 0x30
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	60f8      	str	r0, [r7, #12]
 80040a6:	60b9      	str	r1, [r7, #8]
 80040a8:	607a      	str	r2, [r7, #4]
 80040aa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80040ac:	2301      	movs	r3, #1
 80040ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80040b0:	2300      	movs	r3, #0
 80040b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d101      	bne.n	80040c4 <HAL_SPI_TransmitReceive+0x26>
 80040c0:	2302      	movs	r3, #2
 80040c2:	e18a      	b.n	80043da <HAL_SPI_TransmitReceive+0x33c>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040cc:	f7fe fc1c 	bl	8002908 <HAL_GetTick>
 80040d0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80040e2:	887b      	ldrh	r3, [r7, #2]
 80040e4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80040e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d00f      	beq.n	800410e <HAL_SPI_TransmitReceive+0x70>
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040f4:	d107      	bne.n	8004106 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d103      	bne.n	8004106 <HAL_SPI_TransmitReceive+0x68>
 80040fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004102:	2b04      	cmp	r3, #4
 8004104:	d003      	beq.n	800410e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004106:	2302      	movs	r3, #2
 8004108:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800410c:	e15b      	b.n	80043c6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d005      	beq.n	8004120 <HAL_SPI_TransmitReceive+0x82>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d002      	beq.n	8004120 <HAL_SPI_TransmitReceive+0x82>
 800411a:	887b      	ldrh	r3, [r7, #2]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d103      	bne.n	8004128 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004126:	e14e      	b.n	80043c6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b04      	cmp	r3, #4
 8004132:	d003      	beq.n	800413c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2205      	movs	r2, #5
 8004138:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	887a      	ldrh	r2, [r7, #2]
 800414c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	887a      	ldrh	r2, [r7, #2]
 8004152:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	887a      	ldrh	r2, [r7, #2]
 800415e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	887a      	ldrh	r2, [r7, #2]
 8004164:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417c:	2b40      	cmp	r3, #64	; 0x40
 800417e:	d007      	beq.n	8004190 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800418e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004198:	d178      	bne.n	800428c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d002      	beq.n	80041a8 <HAL_SPI_TransmitReceive+0x10a>
 80041a2:	8b7b      	ldrh	r3, [r7, #26]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d166      	bne.n	8004276 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ac:	881a      	ldrh	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b8:	1c9a      	adds	r2, r3, #2
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041cc:	e053      	b.n	8004276 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d11b      	bne.n	8004214 <HAL_SPI_TransmitReceive+0x176>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d016      	beq.n	8004214 <HAL_SPI_TransmitReceive+0x176>
 80041e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d113      	bne.n	8004214 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f0:	881a      	ldrh	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fc:	1c9a      	adds	r2, r3, #2
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004206:	b29b      	uxth	r3, r3
 8004208:	3b01      	subs	r3, #1
 800420a:	b29a      	uxth	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004210:	2300      	movs	r3, #0
 8004212:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b01      	cmp	r3, #1
 8004220:	d119      	bne.n	8004256 <HAL_SPI_TransmitReceive+0x1b8>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004226:	b29b      	uxth	r3, r3
 8004228:	2b00      	cmp	r3, #0
 800422a:	d014      	beq.n	8004256 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004236:	b292      	uxth	r2, r2
 8004238:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423e:	1c9a      	adds	r2, r3, #2
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004248:	b29b      	uxth	r3, r3
 800424a:	3b01      	subs	r3, #1
 800424c:	b29a      	uxth	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004252:	2301      	movs	r3, #1
 8004254:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004256:	f7fe fb57 	bl	8002908 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004262:	429a      	cmp	r2, r3
 8004264:	d807      	bhi.n	8004276 <HAL_SPI_TransmitReceive+0x1d8>
 8004266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426c:	d003      	beq.n	8004276 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004274:	e0a7      	b.n	80043c6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800427a:	b29b      	uxth	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1a6      	bne.n	80041ce <HAL_SPI_TransmitReceive+0x130>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004284:	b29b      	uxth	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1a1      	bne.n	80041ce <HAL_SPI_TransmitReceive+0x130>
 800428a:	e07c      	b.n	8004386 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d002      	beq.n	800429a <HAL_SPI_TransmitReceive+0x1fc>
 8004294:	8b7b      	ldrh	r3, [r7, #26]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d16b      	bne.n	8004372 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	330c      	adds	r3, #12
 80042a4:	7812      	ldrb	r2, [r2, #0]
 80042a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ac:	1c5a      	adds	r2, r3, #1
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	3b01      	subs	r3, #1
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042c0:	e057      	b.n	8004372 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d11c      	bne.n	800430a <HAL_SPI_TransmitReceive+0x26c>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d017      	beq.n	800430a <HAL_SPI_TransmitReceive+0x26c>
 80042da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d114      	bne.n	800430a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	330c      	adds	r3, #12
 80042ea:	7812      	ldrb	r2, [r2, #0]
 80042ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f2:	1c5a      	adds	r2, r3, #1
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	3b01      	subs	r3, #1
 8004300:	b29a      	uxth	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004306:	2300      	movs	r3, #0
 8004308:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b01      	cmp	r3, #1
 8004316:	d119      	bne.n	800434c <HAL_SPI_TransmitReceive+0x2ae>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800431c:	b29b      	uxth	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d014      	beq.n	800434c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68da      	ldr	r2, [r3, #12]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432c:	b2d2      	uxtb	r2, r2
 800432e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004334:	1c5a      	adds	r2, r3, #1
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800433e:	b29b      	uxth	r3, r3
 8004340:	3b01      	subs	r3, #1
 8004342:	b29a      	uxth	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004348:	2301      	movs	r3, #1
 800434a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800434c:	f7fe fadc 	bl	8002908 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004358:	429a      	cmp	r2, r3
 800435a:	d803      	bhi.n	8004364 <HAL_SPI_TransmitReceive+0x2c6>
 800435c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800435e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004362:	d102      	bne.n	800436a <HAL_SPI_TransmitReceive+0x2cc>
 8004364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004366:	2b00      	cmp	r3, #0
 8004368:	d103      	bne.n	8004372 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004370:	e029      	b.n	80043c6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004376:	b29b      	uxth	r3, r3
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1a2      	bne.n	80042c2 <HAL_SPI_TransmitReceive+0x224>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004380:	b29b      	uxth	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d19d      	bne.n	80042c2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004388:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f000 f9d0 	bl	8004730 <SPI_EndRxTxTransaction>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d006      	beq.n	80043a4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2220      	movs	r2, #32
 80043a0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80043a2:	e010      	b.n	80043c6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10b      	bne.n	80043c4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043ac:	2300      	movs	r3, #0
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	617b      	str	r3, [r7, #20]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	e000      	b.n	80043c6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80043c4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80043d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3730      	adds	r7, #48	; 0x30
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
	...

080043e4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b088      	sub	sp, #32
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	099b      	lsrs	r3, r3, #6
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10f      	bne.n	8004428 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00a      	beq.n	8004428 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	099b      	lsrs	r3, r3, #6
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	d004      	beq.n	8004428 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	4798      	blx	r3
    return;
 8004426:	e0d7      	b.n	80045d8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	085b      	lsrs	r3, r3, #1
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00a      	beq.n	800444a <HAL_SPI_IRQHandler+0x66>
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	09db      	lsrs	r3, r3, #7
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b00      	cmp	r3, #0
 800443e:	d004      	beq.n	800444a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	4798      	blx	r3
    return;
 8004448:	e0c6      	b.n	80045d8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	095b      	lsrs	r3, r3, #5
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10c      	bne.n	8004470 <HAL_SPI_IRQHandler+0x8c>
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	099b      	lsrs	r3, r3, #6
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d106      	bne.n	8004470 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	0a1b      	lsrs	r3, r3, #8
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	f000 80b4 	beq.w	80045d8 <HAL_SPI_IRQHandler+0x1f4>
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	095b      	lsrs	r3, r3, #5
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 80ad 	beq.w	80045d8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	099b      	lsrs	r3, r3, #6
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d023      	beq.n	80044d2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b03      	cmp	r3, #3
 8004494:	d011      	beq.n	80044ba <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449a:	f043 0204 	orr.w	r2, r3, #4
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044a2:	2300      	movs	r3, #0
 80044a4:	617b      	str	r3, [r7, #20]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	617b      	str	r3, [r7, #20]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	617b      	str	r3, [r7, #20]
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	e00b      	b.n	80044d2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044ba:	2300      	movs	r3, #0
 80044bc:	613b      	str	r3, [r7, #16]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	613b      	str	r3, [r7, #16]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	613b      	str	r3, [r7, #16]
 80044ce:	693b      	ldr	r3, [r7, #16]
        return;
 80044d0:	e082      	b.n	80045d8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	095b      	lsrs	r3, r3, #5
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d014      	beq.n	8004508 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e2:	f043 0201 	orr.w	r2, r3, #1
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80044ea:	2300      	movs	r3, #0
 80044ec:	60fb      	str	r3, [r7, #12]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	60fb      	str	r3, [r7, #12]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004504:	601a      	str	r2, [r3, #0]
 8004506:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	0a1b      	lsrs	r3, r3, #8
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00c      	beq.n	800452e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004518:	f043 0208 	orr.w	r2, r3, #8
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004520:	2300      	movs	r3, #0
 8004522:	60bb      	str	r3, [r7, #8]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	60bb      	str	r3, [r7, #8]
 800452c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004532:	2b00      	cmp	r3, #0
 8004534:	d04f      	beq.n	80045d6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004544:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d104      	bne.n	8004562 <HAL_SPI_IRQHandler+0x17e>
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d034      	beq.n	80045cc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0203 	bic.w	r2, r2, #3
 8004570:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004576:	2b00      	cmp	r3, #0
 8004578:	d011      	beq.n	800459e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800457e:	4a18      	ldr	r2, [pc, #96]	; (80045e0 <HAL_SPI_IRQHandler+0x1fc>)
 8004580:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004586:	4618      	mov	r0, r3
 8004588:	f7fe fc76 	bl	8002e78 <HAL_DMA_Abort_IT>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d005      	beq.n	800459e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004596:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d016      	beq.n	80045d4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045aa:	4a0d      	ldr	r2, [pc, #52]	; (80045e0 <HAL_SPI_IRQHandler+0x1fc>)
 80045ac:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7fe fc60 	bl	8002e78 <HAL_DMA_Abort_IT>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00a      	beq.n	80045d4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80045ca:	e003      	b.n	80045d4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f809 	bl	80045e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80045d2:	e000      	b.n	80045d6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80045d4:	bf00      	nop
    return;
 80045d6:	bf00      	nop
  }
}
 80045d8:	3720      	adds	r7, #32
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	080045f9 	.word	0x080045f9

080045e4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004604:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f7ff ffe6 	bl	80045e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004618:	bf00      	nop
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b088      	sub	sp, #32
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	603b      	str	r3, [r7, #0]
 800462c:	4613      	mov	r3, r2
 800462e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004630:	f7fe f96a 	bl	8002908 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004638:	1a9b      	subs	r3, r3, r2
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	4413      	add	r3, r2
 800463e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004640:	f7fe f962 	bl	8002908 <HAL_GetTick>
 8004644:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004646:	4b39      	ldr	r3, [pc, #228]	; (800472c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	015b      	lsls	r3, r3, #5
 800464c:	0d1b      	lsrs	r3, r3, #20
 800464e:	69fa      	ldr	r2, [r7, #28]
 8004650:	fb02 f303 	mul.w	r3, r2, r3
 8004654:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004656:	e054      	b.n	8004702 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465e:	d050      	beq.n	8004702 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004660:	f7fe f952 	bl	8002908 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	69fa      	ldr	r2, [r7, #28]
 800466c:	429a      	cmp	r2, r3
 800466e:	d902      	bls.n	8004676 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d13d      	bne.n	80046f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004684:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800468e:	d111      	bne.n	80046b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004698:	d004      	beq.n	80046a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046a2:	d107      	bne.n	80046b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046bc:	d10f      	bne.n	80046de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e017      	b.n	8004722 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d101      	bne.n	80046fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80046f8:	2300      	movs	r3, #0
 80046fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	3b01      	subs	r3, #1
 8004700:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	4013      	ands	r3, r2
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	429a      	cmp	r2, r3
 8004710:	bf0c      	ite	eq
 8004712:	2301      	moveq	r3, #1
 8004714:	2300      	movne	r3, #0
 8004716:	b2db      	uxtb	r3, r3
 8004718:	461a      	mov	r2, r3
 800471a:	79fb      	ldrb	r3, [r7, #7]
 800471c:	429a      	cmp	r2, r3
 800471e:	d19b      	bne.n	8004658 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3720      	adds	r7, #32
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	20000380 	.word	0x20000380

08004730 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b088      	sub	sp, #32
 8004734:	af02      	add	r7, sp, #8
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800473c:	4b1b      	ldr	r3, [pc, #108]	; (80047ac <SPI_EndRxTxTransaction+0x7c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a1b      	ldr	r2, [pc, #108]	; (80047b0 <SPI_EndRxTxTransaction+0x80>)
 8004742:	fba2 2303 	umull	r2, r3, r2, r3
 8004746:	0d5b      	lsrs	r3, r3, #21
 8004748:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800474c:	fb02 f303 	mul.w	r3, r2, r3
 8004750:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800475a:	d112      	bne.n	8004782 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	2200      	movs	r2, #0
 8004764:	2180      	movs	r1, #128	; 0x80
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f7ff ff5a 	bl	8004620 <SPI_WaitFlagStateUntilTimeout>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d016      	beq.n	80047a0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004776:	f043 0220 	orr.w	r2, r3, #32
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e00f      	b.n	80047a2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00a      	beq.n	800479e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	3b01      	subs	r3, #1
 800478c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004798:	2b80      	cmp	r3, #128	; 0x80
 800479a:	d0f2      	beq.n	8004782 <SPI_EndRxTxTransaction+0x52>
 800479c:	e000      	b.n	80047a0 <SPI_EndRxTxTransaction+0x70>
        break;
 800479e:	bf00      	nop
  }

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3718      	adds	r7, #24
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	20000380 	.word	0x20000380
 80047b0:	165e9f81 	.word	0x165e9f81

080047b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e041      	b.n	800484a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d106      	bne.n	80047e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7fd fdda 	bl	8002394 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2202      	movs	r2, #2
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3304      	adds	r3, #4
 80047f0:	4619      	mov	r1, r3
 80047f2:	4610      	mov	r0, r2
 80047f4:	f000 fad8 	bl	8004da8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b082      	sub	sp, #8
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d101      	bne.n	8004864 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e041      	b.n	80048e8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b00      	cmp	r3, #0
 800486e:	d106      	bne.n	800487e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 f839 	bl	80048f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2202      	movs	r2, #2
 8004882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	3304      	adds	r3, #4
 800488e:	4619      	mov	r1, r3
 8004890:	4610      	mov	r0, r2
 8004892:	f000 fa89 	bl	8004da8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d109      	bne.n	8004928 <HAL_TIM_PWM_Start+0x24>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b01      	cmp	r3, #1
 800491e:	bf14      	ite	ne
 8004920:	2301      	movne	r3, #1
 8004922:	2300      	moveq	r3, #0
 8004924:	b2db      	uxtb	r3, r3
 8004926:	e022      	b.n	800496e <HAL_TIM_PWM_Start+0x6a>
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	2b04      	cmp	r3, #4
 800492c:	d109      	bne.n	8004942 <HAL_TIM_PWM_Start+0x3e>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b01      	cmp	r3, #1
 8004938:	bf14      	ite	ne
 800493a:	2301      	movne	r3, #1
 800493c:	2300      	moveq	r3, #0
 800493e:	b2db      	uxtb	r3, r3
 8004940:	e015      	b.n	800496e <HAL_TIM_PWM_Start+0x6a>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b08      	cmp	r3, #8
 8004946:	d109      	bne.n	800495c <HAL_TIM_PWM_Start+0x58>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b01      	cmp	r3, #1
 8004952:	bf14      	ite	ne
 8004954:	2301      	movne	r3, #1
 8004956:	2300      	moveq	r3, #0
 8004958:	b2db      	uxtb	r3, r3
 800495a:	e008      	b.n	800496e <HAL_TIM_PWM_Start+0x6a>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b01      	cmp	r3, #1
 8004966:	bf14      	ite	ne
 8004968:	2301      	movne	r3, #1
 800496a:	2300      	moveq	r3, #0
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e07c      	b.n	8004a70 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d104      	bne.n	8004986 <HAL_TIM_PWM_Start+0x82>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2202      	movs	r2, #2
 8004980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004984:	e013      	b.n	80049ae <HAL_TIM_PWM_Start+0xaa>
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b04      	cmp	r3, #4
 800498a:	d104      	bne.n	8004996 <HAL_TIM_PWM_Start+0x92>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2202      	movs	r2, #2
 8004990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004994:	e00b      	b.n	80049ae <HAL_TIM_PWM_Start+0xaa>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	2b08      	cmp	r3, #8
 800499a:	d104      	bne.n	80049a6 <HAL_TIM_PWM_Start+0xa2>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2202      	movs	r2, #2
 80049a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049a4:	e003      	b.n	80049ae <HAL_TIM_PWM_Start+0xaa>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2202      	movs	r2, #2
 80049aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2201      	movs	r2, #1
 80049b4:	6839      	ldr	r1, [r7, #0]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 fce0 	bl	800537c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a2d      	ldr	r2, [pc, #180]	; (8004a78 <HAL_TIM_PWM_Start+0x174>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d004      	beq.n	80049d0 <HAL_TIM_PWM_Start+0xcc>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a2c      	ldr	r2, [pc, #176]	; (8004a7c <HAL_TIM_PWM_Start+0x178>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d101      	bne.n	80049d4 <HAL_TIM_PWM_Start+0xd0>
 80049d0:	2301      	movs	r3, #1
 80049d2:	e000      	b.n	80049d6 <HAL_TIM_PWM_Start+0xd2>
 80049d4:	2300      	movs	r3, #0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d007      	beq.n	80049ea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a22      	ldr	r2, [pc, #136]	; (8004a78 <HAL_TIM_PWM_Start+0x174>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d022      	beq.n	8004a3a <HAL_TIM_PWM_Start+0x136>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049fc:	d01d      	beq.n	8004a3a <HAL_TIM_PWM_Start+0x136>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a1f      	ldr	r2, [pc, #124]	; (8004a80 <HAL_TIM_PWM_Start+0x17c>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d018      	beq.n	8004a3a <HAL_TIM_PWM_Start+0x136>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a1d      	ldr	r2, [pc, #116]	; (8004a84 <HAL_TIM_PWM_Start+0x180>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d013      	beq.n	8004a3a <HAL_TIM_PWM_Start+0x136>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a1c      	ldr	r2, [pc, #112]	; (8004a88 <HAL_TIM_PWM_Start+0x184>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d00e      	beq.n	8004a3a <HAL_TIM_PWM_Start+0x136>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a16      	ldr	r2, [pc, #88]	; (8004a7c <HAL_TIM_PWM_Start+0x178>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d009      	beq.n	8004a3a <HAL_TIM_PWM_Start+0x136>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a18      	ldr	r2, [pc, #96]	; (8004a8c <HAL_TIM_PWM_Start+0x188>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d004      	beq.n	8004a3a <HAL_TIM_PWM_Start+0x136>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a16      	ldr	r2, [pc, #88]	; (8004a90 <HAL_TIM_PWM_Start+0x18c>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d111      	bne.n	8004a5e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f003 0307 	and.w	r3, r3, #7
 8004a44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2b06      	cmp	r3, #6
 8004a4a:	d010      	beq.n	8004a6e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f042 0201 	orr.w	r2, r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a5c:	e007      	b.n	8004a6e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f042 0201 	orr.w	r2, r2, #1
 8004a6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	40010000 	.word	0x40010000
 8004a7c:	40010400 	.word	0x40010400
 8004a80:	40000400 	.word	0x40000400
 8004a84:	40000800 	.word	0x40000800
 8004a88:	40000c00 	.word	0x40000c00
 8004a8c:	40014000 	.word	0x40014000
 8004a90:	40001800 	.word	0x40001800

08004a94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d101      	bne.n	8004ab2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004aae:	2302      	movs	r3, #2
 8004ab0:	e0ae      	b.n	8004c10 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2b0c      	cmp	r3, #12
 8004abe:	f200 809f 	bhi.w	8004c00 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ac2:	a201      	add	r2, pc, #4	; (adr r2, 8004ac8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac8:	08004afd 	.word	0x08004afd
 8004acc:	08004c01 	.word	0x08004c01
 8004ad0:	08004c01 	.word	0x08004c01
 8004ad4:	08004c01 	.word	0x08004c01
 8004ad8:	08004b3d 	.word	0x08004b3d
 8004adc:	08004c01 	.word	0x08004c01
 8004ae0:	08004c01 	.word	0x08004c01
 8004ae4:	08004c01 	.word	0x08004c01
 8004ae8:	08004b7f 	.word	0x08004b7f
 8004aec:	08004c01 	.word	0x08004c01
 8004af0:	08004c01 	.word	0x08004c01
 8004af4:	08004c01 	.word	0x08004c01
 8004af8:	08004bbf 	.word	0x08004bbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68b9      	ldr	r1, [r7, #8]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 f9f0 	bl	8004ee8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699a      	ldr	r2, [r3, #24]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f042 0208 	orr.w	r2, r2, #8
 8004b16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	699a      	ldr	r2, [r3, #24]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f022 0204 	bic.w	r2, r2, #4
 8004b26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	6999      	ldr	r1, [r3, #24]
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	691a      	ldr	r2, [r3, #16]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	619a      	str	r2, [r3, #24]
      break;
 8004b3a:	e064      	b.n	8004c06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68b9      	ldr	r1, [r7, #8]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 fa40 	bl	8004fc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	699a      	ldr	r2, [r3, #24]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	699a      	ldr	r2, [r3, #24]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6999      	ldr	r1, [r3, #24]
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	021a      	lsls	r2, r3, #8
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	619a      	str	r2, [r3, #24]
      break;
 8004b7c:	e043      	b.n	8004c06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68b9      	ldr	r1, [r7, #8]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f000 fa95 	bl	80050b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	69da      	ldr	r2, [r3, #28]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f042 0208 	orr.w	r2, r2, #8
 8004b98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	69da      	ldr	r2, [r3, #28]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 0204 	bic.w	r2, r2, #4
 8004ba8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69d9      	ldr	r1, [r3, #28]
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	691a      	ldr	r2, [r3, #16]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	61da      	str	r2, [r3, #28]
      break;
 8004bbc:	e023      	b.n	8004c06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68b9      	ldr	r1, [r7, #8]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f000 fae9 	bl	800519c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	69da      	ldr	r2, [r3, #28]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	69da      	ldr	r2, [r3, #28]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004be8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	69d9      	ldr	r1, [r3, #28]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	021a      	lsls	r2, r3, #8
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	61da      	str	r2, [r3, #28]
      break;
 8004bfe:	e002      	b.n	8004c06 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	75fb      	strb	r3, [r7, #23]
      break;
 8004c04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3718      	adds	r7, #24
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c22:	2300      	movs	r3, #0
 8004c24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d101      	bne.n	8004c34 <HAL_TIM_ConfigClockSource+0x1c>
 8004c30:	2302      	movs	r3, #2
 8004c32:	e0b4      	b.n	8004d9e <HAL_TIM_ConfigClockSource+0x186>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2202      	movs	r2, #2
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c6c:	d03e      	beq.n	8004cec <HAL_TIM_ConfigClockSource+0xd4>
 8004c6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c72:	f200 8087 	bhi.w	8004d84 <HAL_TIM_ConfigClockSource+0x16c>
 8004c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c7a:	f000 8086 	beq.w	8004d8a <HAL_TIM_ConfigClockSource+0x172>
 8004c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c82:	d87f      	bhi.n	8004d84 <HAL_TIM_ConfigClockSource+0x16c>
 8004c84:	2b70      	cmp	r3, #112	; 0x70
 8004c86:	d01a      	beq.n	8004cbe <HAL_TIM_ConfigClockSource+0xa6>
 8004c88:	2b70      	cmp	r3, #112	; 0x70
 8004c8a:	d87b      	bhi.n	8004d84 <HAL_TIM_ConfigClockSource+0x16c>
 8004c8c:	2b60      	cmp	r3, #96	; 0x60
 8004c8e:	d050      	beq.n	8004d32 <HAL_TIM_ConfigClockSource+0x11a>
 8004c90:	2b60      	cmp	r3, #96	; 0x60
 8004c92:	d877      	bhi.n	8004d84 <HAL_TIM_ConfigClockSource+0x16c>
 8004c94:	2b50      	cmp	r3, #80	; 0x50
 8004c96:	d03c      	beq.n	8004d12 <HAL_TIM_ConfigClockSource+0xfa>
 8004c98:	2b50      	cmp	r3, #80	; 0x50
 8004c9a:	d873      	bhi.n	8004d84 <HAL_TIM_ConfigClockSource+0x16c>
 8004c9c:	2b40      	cmp	r3, #64	; 0x40
 8004c9e:	d058      	beq.n	8004d52 <HAL_TIM_ConfigClockSource+0x13a>
 8004ca0:	2b40      	cmp	r3, #64	; 0x40
 8004ca2:	d86f      	bhi.n	8004d84 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca4:	2b30      	cmp	r3, #48	; 0x30
 8004ca6:	d064      	beq.n	8004d72 <HAL_TIM_ConfigClockSource+0x15a>
 8004ca8:	2b30      	cmp	r3, #48	; 0x30
 8004caa:	d86b      	bhi.n	8004d84 <HAL_TIM_ConfigClockSource+0x16c>
 8004cac:	2b20      	cmp	r3, #32
 8004cae:	d060      	beq.n	8004d72 <HAL_TIM_ConfigClockSource+0x15a>
 8004cb0:	2b20      	cmp	r3, #32
 8004cb2:	d867      	bhi.n	8004d84 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d05c      	beq.n	8004d72 <HAL_TIM_ConfigClockSource+0x15a>
 8004cb8:	2b10      	cmp	r3, #16
 8004cba:	d05a      	beq.n	8004d72 <HAL_TIM_ConfigClockSource+0x15a>
 8004cbc:	e062      	b.n	8004d84 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6818      	ldr	r0, [r3, #0]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	6899      	ldr	r1, [r3, #8]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	f000 fb35 	bl	800533c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ce0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	609a      	str	r2, [r3, #8]
      break;
 8004cea:	e04f      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6818      	ldr	r0, [r3, #0]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	6899      	ldr	r1, [r3, #8]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f000 fb1e 	bl	800533c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689a      	ldr	r2, [r3, #8]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d0e:	609a      	str	r2, [r3, #8]
      break;
 8004d10:	e03c      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6818      	ldr	r0, [r3, #0]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	6859      	ldr	r1, [r3, #4]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	461a      	mov	r2, r3
 8004d20:	f000 fa92 	bl	8005248 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2150      	movs	r1, #80	; 0x50
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 faeb 	bl	8005306 <TIM_ITRx_SetConfig>
      break;
 8004d30:	e02c      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6818      	ldr	r0, [r3, #0]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	6859      	ldr	r1, [r3, #4]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	f000 fab1 	bl	80052a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2160      	movs	r1, #96	; 0x60
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 fadb 	bl	8005306 <TIM_ITRx_SetConfig>
      break;
 8004d50:	e01c      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6818      	ldr	r0, [r3, #0]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	6859      	ldr	r1, [r3, #4]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	461a      	mov	r2, r3
 8004d60:	f000 fa72 	bl	8005248 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2140      	movs	r1, #64	; 0x40
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 facb 	bl	8005306 <TIM_ITRx_SetConfig>
      break;
 8004d70:	e00c      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	4610      	mov	r0, r2
 8004d7e:	f000 fac2 	bl	8005306 <TIM_ITRx_SetConfig>
      break;
 8004d82:	e003      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	73fb      	strb	r3, [r7, #15]
      break;
 8004d88:	e000      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
	...

08004da8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a40      	ldr	r2, [pc, #256]	; (8004ebc <TIM_Base_SetConfig+0x114>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d013      	beq.n	8004de8 <TIM_Base_SetConfig+0x40>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dc6:	d00f      	beq.n	8004de8 <TIM_Base_SetConfig+0x40>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a3d      	ldr	r2, [pc, #244]	; (8004ec0 <TIM_Base_SetConfig+0x118>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d00b      	beq.n	8004de8 <TIM_Base_SetConfig+0x40>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a3c      	ldr	r2, [pc, #240]	; (8004ec4 <TIM_Base_SetConfig+0x11c>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d007      	beq.n	8004de8 <TIM_Base_SetConfig+0x40>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a3b      	ldr	r2, [pc, #236]	; (8004ec8 <TIM_Base_SetConfig+0x120>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d003      	beq.n	8004de8 <TIM_Base_SetConfig+0x40>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a3a      	ldr	r2, [pc, #232]	; (8004ecc <TIM_Base_SetConfig+0x124>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d108      	bne.n	8004dfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a2f      	ldr	r2, [pc, #188]	; (8004ebc <TIM_Base_SetConfig+0x114>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d02b      	beq.n	8004e5a <TIM_Base_SetConfig+0xb2>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e08:	d027      	beq.n	8004e5a <TIM_Base_SetConfig+0xb2>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a2c      	ldr	r2, [pc, #176]	; (8004ec0 <TIM_Base_SetConfig+0x118>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d023      	beq.n	8004e5a <TIM_Base_SetConfig+0xb2>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a2b      	ldr	r2, [pc, #172]	; (8004ec4 <TIM_Base_SetConfig+0x11c>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d01f      	beq.n	8004e5a <TIM_Base_SetConfig+0xb2>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a2a      	ldr	r2, [pc, #168]	; (8004ec8 <TIM_Base_SetConfig+0x120>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d01b      	beq.n	8004e5a <TIM_Base_SetConfig+0xb2>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a29      	ldr	r2, [pc, #164]	; (8004ecc <TIM_Base_SetConfig+0x124>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d017      	beq.n	8004e5a <TIM_Base_SetConfig+0xb2>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a28      	ldr	r2, [pc, #160]	; (8004ed0 <TIM_Base_SetConfig+0x128>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d013      	beq.n	8004e5a <TIM_Base_SetConfig+0xb2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a27      	ldr	r2, [pc, #156]	; (8004ed4 <TIM_Base_SetConfig+0x12c>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d00f      	beq.n	8004e5a <TIM_Base_SetConfig+0xb2>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a26      	ldr	r2, [pc, #152]	; (8004ed8 <TIM_Base_SetConfig+0x130>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d00b      	beq.n	8004e5a <TIM_Base_SetConfig+0xb2>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a25      	ldr	r2, [pc, #148]	; (8004edc <TIM_Base_SetConfig+0x134>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d007      	beq.n	8004e5a <TIM_Base_SetConfig+0xb2>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a24      	ldr	r2, [pc, #144]	; (8004ee0 <TIM_Base_SetConfig+0x138>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d003      	beq.n	8004e5a <TIM_Base_SetConfig+0xb2>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a23      	ldr	r2, [pc, #140]	; (8004ee4 <TIM_Base_SetConfig+0x13c>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d108      	bne.n	8004e6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	689a      	ldr	r2, [r3, #8]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a0a      	ldr	r2, [pc, #40]	; (8004ebc <TIM_Base_SetConfig+0x114>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d003      	beq.n	8004ea0 <TIM_Base_SetConfig+0xf8>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a0c      	ldr	r2, [pc, #48]	; (8004ecc <TIM_Base_SetConfig+0x124>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d103      	bne.n	8004ea8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	691a      	ldr	r2, [r3, #16]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	615a      	str	r2, [r3, #20]
}
 8004eae:	bf00      	nop
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	40010000 	.word	0x40010000
 8004ec0:	40000400 	.word	0x40000400
 8004ec4:	40000800 	.word	0x40000800
 8004ec8:	40000c00 	.word	0x40000c00
 8004ecc:	40010400 	.word	0x40010400
 8004ed0:	40014000 	.word	0x40014000
 8004ed4:	40014400 	.word	0x40014400
 8004ed8:	40014800 	.word	0x40014800
 8004edc:	40001800 	.word	0x40001800
 8004ee0:	40001c00 	.word	0x40001c00
 8004ee4:	40002000 	.word	0x40002000

08004ee8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b087      	sub	sp, #28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	f023 0201 	bic.w	r2, r3, #1
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f023 0303 	bic.w	r3, r3, #3
 8004f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f023 0302 	bic.w	r3, r3, #2
 8004f30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a20      	ldr	r2, [pc, #128]	; (8004fc0 <TIM_OC1_SetConfig+0xd8>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d003      	beq.n	8004f4c <TIM_OC1_SetConfig+0x64>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a1f      	ldr	r2, [pc, #124]	; (8004fc4 <TIM_OC1_SetConfig+0xdc>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d10c      	bne.n	8004f66 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f023 0308 	bic.w	r3, r3, #8
 8004f52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f023 0304 	bic.w	r3, r3, #4
 8004f64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a15      	ldr	r2, [pc, #84]	; (8004fc0 <TIM_OC1_SetConfig+0xd8>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d003      	beq.n	8004f76 <TIM_OC1_SetConfig+0x8e>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a14      	ldr	r2, [pc, #80]	; (8004fc4 <TIM_OC1_SetConfig+0xdc>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d111      	bne.n	8004f9a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	685a      	ldr	r2, [r3, #4]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	621a      	str	r2, [r3, #32]
}
 8004fb4:	bf00      	nop
 8004fb6:	371c      	adds	r7, #28
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	40010000 	.word	0x40010000
 8004fc4:	40010400 	.word	0x40010400

08004fc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b087      	sub	sp, #28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	f023 0210 	bic.w	r2, r3, #16
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	021b      	lsls	r3, r3, #8
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	4313      	orrs	r3, r2
 800500a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	f023 0320 	bic.w	r3, r3, #32
 8005012:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	011b      	lsls	r3, r3, #4
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	4313      	orrs	r3, r2
 800501e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a22      	ldr	r2, [pc, #136]	; (80050ac <TIM_OC2_SetConfig+0xe4>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d003      	beq.n	8005030 <TIM_OC2_SetConfig+0x68>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a21      	ldr	r2, [pc, #132]	; (80050b0 <TIM_OC2_SetConfig+0xe8>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d10d      	bne.n	800504c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005036:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	011b      	lsls	r3, r3, #4
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	4313      	orrs	r3, r2
 8005042:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800504a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a17      	ldr	r2, [pc, #92]	; (80050ac <TIM_OC2_SetConfig+0xe4>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d003      	beq.n	800505c <TIM_OC2_SetConfig+0x94>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a16      	ldr	r2, [pc, #88]	; (80050b0 <TIM_OC2_SetConfig+0xe8>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d113      	bne.n	8005084 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005062:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800506a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	4313      	orrs	r3, r2
 8005076:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	4313      	orrs	r3, r2
 8005082:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	621a      	str	r2, [r3, #32]
}
 800509e:	bf00      	nop
 80050a0:	371c      	adds	r7, #28
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	40010000 	.word	0x40010000
 80050b0:	40010400 	.word	0x40010400

080050b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f023 0303 	bic.w	r3, r3, #3
 80050ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	021b      	lsls	r3, r3, #8
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	4313      	orrs	r3, r2
 8005108:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a21      	ldr	r2, [pc, #132]	; (8005194 <TIM_OC3_SetConfig+0xe0>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d003      	beq.n	800511a <TIM_OC3_SetConfig+0x66>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a20      	ldr	r2, [pc, #128]	; (8005198 <TIM_OC3_SetConfig+0xe4>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d10d      	bne.n	8005136 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005120:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	021b      	lsls	r3, r3, #8
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	4313      	orrs	r3, r2
 800512c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005134:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a16      	ldr	r2, [pc, #88]	; (8005194 <TIM_OC3_SetConfig+0xe0>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d003      	beq.n	8005146 <TIM_OC3_SetConfig+0x92>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a15      	ldr	r2, [pc, #84]	; (8005198 <TIM_OC3_SetConfig+0xe4>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d113      	bne.n	800516e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800514c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005154:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	011b      	lsls	r3, r3, #4
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	4313      	orrs	r3, r2
 8005160:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	011b      	lsls	r3, r3, #4
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	4313      	orrs	r3, r2
 800516c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	621a      	str	r2, [r3, #32]
}
 8005188:	bf00      	nop
 800518a:	371c      	adds	r7, #28
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr
 8005194:	40010000 	.word	0x40010000
 8005198:	40010400 	.word	0x40010400

0800519c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800519c:	b480      	push	{r7}
 800519e:	b087      	sub	sp, #28
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	69db      	ldr	r3, [r3, #28]
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	021b      	lsls	r3, r3, #8
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	4313      	orrs	r3, r2
 80051de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	031b      	lsls	r3, r3, #12
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a12      	ldr	r2, [pc, #72]	; (8005240 <TIM_OC4_SetConfig+0xa4>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d003      	beq.n	8005204 <TIM_OC4_SetConfig+0x68>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a11      	ldr	r2, [pc, #68]	; (8005244 <TIM_OC4_SetConfig+0xa8>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d109      	bne.n	8005218 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800520a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	019b      	lsls	r3, r3, #6
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	4313      	orrs	r3, r2
 8005216:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	621a      	str	r2, [r3, #32]
}
 8005232:	bf00      	nop
 8005234:	371c      	adds	r7, #28
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	40010000 	.word	0x40010000
 8005244:	40010400 	.word	0x40010400

08005248 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005248:	b480      	push	{r7}
 800524a:	b087      	sub	sp, #28
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6a1b      	ldr	r3, [r3, #32]
 8005258:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	f023 0201 	bic.w	r2, r3, #1
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005272:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	011b      	lsls	r3, r3, #4
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	4313      	orrs	r3, r2
 800527c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f023 030a 	bic.w	r3, r3, #10
 8005284:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	4313      	orrs	r3, r2
 800528c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	621a      	str	r2, [r3, #32]
}
 800529a:	bf00      	nop
 800529c:	371c      	adds	r7, #28
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b087      	sub	sp, #28
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	60f8      	str	r0, [r7, #12]
 80052ae:	60b9      	str	r1, [r7, #8]
 80052b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	f023 0210 	bic.w	r2, r3, #16
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6a1b      	ldr	r3, [r3, #32]
 80052c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	031b      	lsls	r3, r3, #12
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	4313      	orrs	r3, r2
 80052da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	011b      	lsls	r3, r3, #4
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	621a      	str	r2, [r3, #32]
}
 80052fa:	bf00      	nop
 80052fc:	371c      	adds	r7, #28
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005306:	b480      	push	{r7}
 8005308:	b085      	sub	sp, #20
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
 800530e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800531c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	4313      	orrs	r3, r2
 8005324:	f043 0307 	orr.w	r3, r3, #7
 8005328:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	609a      	str	r2, [r3, #8]
}
 8005330:	bf00      	nop
 8005332:	3714      	adds	r7, #20
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800533c:	b480      	push	{r7}
 800533e:	b087      	sub	sp, #28
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
 8005348:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005356:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	021a      	lsls	r2, r3, #8
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	431a      	orrs	r2, r3
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	4313      	orrs	r3, r2
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	4313      	orrs	r3, r2
 8005368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	609a      	str	r2, [r3, #8]
}
 8005370:	bf00      	nop
 8005372:	371c      	adds	r7, #28
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800537c:	b480      	push	{r7}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	f003 031f 	and.w	r3, r3, #31
 800538e:	2201      	movs	r2, #1
 8005390:	fa02 f303 	lsl.w	r3, r2, r3
 8005394:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6a1a      	ldr	r2, [r3, #32]
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	43db      	mvns	r3, r3
 800539e:	401a      	ands	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6a1a      	ldr	r2, [r3, #32]
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	f003 031f 	and.w	r3, r3, #31
 80053ae:	6879      	ldr	r1, [r7, #4]
 80053b0:	fa01 f303 	lsl.w	r3, r1, r3
 80053b4:	431a      	orrs	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	621a      	str	r2, [r3, #32]
}
 80053ba:	bf00      	nop
 80053bc:	371c      	adds	r7, #28
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
	...

080053c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d101      	bne.n	80053e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053dc:	2302      	movs	r3, #2
 80053de:	e05a      	b.n	8005496 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2202      	movs	r2, #2
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005406:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	4313      	orrs	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a21      	ldr	r2, [pc, #132]	; (80054a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d022      	beq.n	800546a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800542c:	d01d      	beq.n	800546a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a1d      	ldr	r2, [pc, #116]	; (80054a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d018      	beq.n	800546a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a1b      	ldr	r2, [pc, #108]	; (80054ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d013      	beq.n	800546a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a1a      	ldr	r2, [pc, #104]	; (80054b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d00e      	beq.n	800546a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a18      	ldr	r2, [pc, #96]	; (80054b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d009      	beq.n	800546a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a17      	ldr	r2, [pc, #92]	; (80054b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d004      	beq.n	800546a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a15      	ldr	r2, [pc, #84]	; (80054bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d10c      	bne.n	8005484 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005470:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	4313      	orrs	r3, r2
 800547a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3714      	adds	r7, #20
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	40010000 	.word	0x40010000
 80054a8:	40000400 	.word	0x40000400
 80054ac:	40000800 	.word	0x40000800
 80054b0:	40000c00 	.word	0x40000c00
 80054b4:	40010400 	.word	0x40010400
 80054b8:	40014000 	.word	0x40014000
 80054bc:	40001800 	.word	0x40001800

080054c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e03f      	b.n	8005552 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d106      	bne.n	80054ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7fd f824 	bl	8002534 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2224      	movs	r2, #36	; 0x24
 80054f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68da      	ldr	r2, [r3, #12]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005502:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 ff49 	bl	800639c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	691a      	ldr	r2, [r3, #16]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005518:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	695a      	ldr	r2, [r3, #20]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005528:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68da      	ldr	r2, [r3, #12]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005538:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2220      	movs	r2, #32
 8005544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2220      	movs	r2, #32
 800554c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3708      	adds	r7, #8
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
	...

0800555c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b08c      	sub	sp, #48	; 0x30
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	4613      	mov	r3, r2
 8005568:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b20      	cmp	r3, #32
 8005574:	d165      	bne.n	8005642 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d002      	beq.n	8005582 <HAL_UART_Transmit_DMA+0x26>
 800557c:	88fb      	ldrh	r3, [r7, #6]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e05e      	b.n	8005644 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800558c:	2b01      	cmp	r3, #1
 800558e:	d101      	bne.n	8005594 <HAL_UART_Transmit_DMA+0x38>
 8005590:	2302      	movs	r3, #2
 8005592:	e057      	b.n	8005644 <HAL_UART_Transmit_DMA+0xe8>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	88fa      	ldrh	r2, [r7, #6]
 80055a6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	88fa      	ldrh	r2, [r7, #6]
 80055ac:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2221      	movs	r2, #33	; 0x21
 80055b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c0:	4a22      	ldr	r2, [pc, #136]	; (800564c <HAL_UART_Transmit_DMA+0xf0>)
 80055c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c8:	4a21      	ldr	r2, [pc, #132]	; (8005650 <HAL_UART_Transmit_DMA+0xf4>)
 80055ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d0:	4a20      	ldr	r2, [pc, #128]	; (8005654 <HAL_UART_Transmit_DMA+0xf8>)
 80055d2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d8:	2200      	movs	r2, #0
 80055da:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80055dc:	f107 0308 	add.w	r3, r7, #8
 80055e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80055e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e8:	6819      	ldr	r1, [r3, #0]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	3304      	adds	r3, #4
 80055f0:	461a      	mov	r2, r3
 80055f2:	88fb      	ldrh	r3, [r7, #6]
 80055f4:	f7fd fb78 	bl	8002ce8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005600:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	3314      	adds	r3, #20
 8005610:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	e853 3f00 	ldrex	r3, [r3]
 8005618:	617b      	str	r3, [r7, #20]
   return(result);
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005620:	62bb      	str	r3, [r7, #40]	; 0x28
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	3314      	adds	r3, #20
 8005628:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800562a:	627a      	str	r2, [r7, #36]	; 0x24
 800562c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562e:	6a39      	ldr	r1, [r7, #32]
 8005630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005632:	e841 2300 	strex	r3, r2, [r1]
 8005636:	61fb      	str	r3, [r7, #28]
   return(result);
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1e5      	bne.n	800560a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800563e:	2300      	movs	r3, #0
 8005640:	e000      	b.n	8005644 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8005642:	2302      	movs	r3, #2
  }
}
 8005644:	4618      	mov	r0, r3
 8005646:	3730      	adds	r7, #48	; 0x30
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	08005c3d 	.word	0x08005c3d
 8005650:	08005cd7 	.word	0x08005cd7
 8005654:	08005e4f 	.word	0x08005e4f

08005658 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	4613      	mov	r3, r2
 8005664:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b20      	cmp	r3, #32
 8005670:	d11d      	bne.n	80056ae <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d002      	beq.n	800567e <HAL_UART_Receive_DMA+0x26>
 8005678:	88fb      	ldrh	r3, [r7, #6]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e016      	b.n	80056b0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005688:	2b01      	cmp	r3, #1
 800568a:	d101      	bne.n	8005690 <HAL_UART_Receive_DMA+0x38>
 800568c:	2302      	movs	r3, #2
 800568e:	e00f      	b.n	80056b0 <HAL_UART_Receive_DMA+0x58>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800569e:	88fb      	ldrh	r3, [r7, #6]
 80056a0:	461a      	mov	r2, r3
 80056a2:	68b9      	ldr	r1, [r7, #8]
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f000 fc1d 	bl	8005ee4 <UART_Start_Receive_DMA>
 80056aa:	4603      	mov	r3, r0
 80056ac:	e000      	b.n	80056b0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80056ae:	2302      	movs	r3, #2
  }
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b0ba      	sub	sp, #232	; 0xe8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80056de:	2300      	movs	r3, #0
 80056e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80056e4:	2300      	movs	r3, #0
 80056e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80056ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ee:	f003 030f 	and.w	r3, r3, #15
 80056f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80056f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10f      	bne.n	800571e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005702:	f003 0320 	and.w	r3, r3, #32
 8005706:	2b00      	cmp	r3, #0
 8005708:	d009      	beq.n	800571e <HAL_UART_IRQHandler+0x66>
 800570a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800570e:	f003 0320 	and.w	r3, r3, #32
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 fd85 	bl	8006226 <UART_Receive_IT>
      return;
 800571c:	e256      	b.n	8005bcc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800571e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005722:	2b00      	cmp	r3, #0
 8005724:	f000 80de 	beq.w	80058e4 <HAL_UART_IRQHandler+0x22c>
 8005728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	2b00      	cmp	r3, #0
 8005732:	d106      	bne.n	8005742 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005738:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800573c:	2b00      	cmp	r3, #0
 800573e:	f000 80d1 	beq.w	80058e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00b      	beq.n	8005766 <HAL_UART_IRQHandler+0xae>
 800574e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005756:	2b00      	cmp	r3, #0
 8005758:	d005      	beq.n	8005766 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575e:	f043 0201 	orr.w	r2, r3, #1
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800576a:	f003 0304 	and.w	r3, r3, #4
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00b      	beq.n	800578a <HAL_UART_IRQHandler+0xd2>
 8005772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	2b00      	cmp	r3, #0
 800577c:	d005      	beq.n	800578a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005782:	f043 0202 	orr.w	r2, r3, #2
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800578a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00b      	beq.n	80057ae <HAL_UART_IRQHandler+0xf6>
 8005796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d005      	beq.n	80057ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a6:	f043 0204 	orr.w	r2, r3, #4
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80057ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057b2:	f003 0308 	and.w	r3, r3, #8
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d011      	beq.n	80057de <HAL_UART_IRQHandler+0x126>
 80057ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057be:	f003 0320 	and.w	r3, r3, #32
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d105      	bne.n	80057d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80057c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d005      	beq.n	80057de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d6:	f043 0208 	orr.w	r2, r3, #8
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f000 81ed 	beq.w	8005bc2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ec:	f003 0320 	and.w	r3, r3, #32
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d008      	beq.n	8005806 <HAL_UART_IRQHandler+0x14e>
 80057f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057f8:	f003 0320 	and.w	r3, r3, #32
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d002      	beq.n	8005806 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 fd10 	bl	8006226 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	695b      	ldr	r3, [r3, #20]
 800580c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005810:	2b40      	cmp	r3, #64	; 0x40
 8005812:	bf0c      	ite	eq
 8005814:	2301      	moveq	r3, #1
 8005816:	2300      	movne	r3, #0
 8005818:	b2db      	uxtb	r3, r3
 800581a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005822:	f003 0308 	and.w	r3, r3, #8
 8005826:	2b00      	cmp	r3, #0
 8005828:	d103      	bne.n	8005832 <HAL_UART_IRQHandler+0x17a>
 800582a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800582e:	2b00      	cmp	r3, #0
 8005830:	d04f      	beq.n	80058d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 fc18 	bl	8006068 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005842:	2b40      	cmp	r3, #64	; 0x40
 8005844:	d141      	bne.n	80058ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	3314      	adds	r3, #20
 800584c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005850:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005854:	e853 3f00 	ldrex	r3, [r3]
 8005858:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800585c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005860:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005864:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	3314      	adds	r3, #20
 800586e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005872:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005876:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800587e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005882:	e841 2300 	strex	r3, r2, [r1]
 8005886:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800588a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1d9      	bne.n	8005846 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005896:	2b00      	cmp	r3, #0
 8005898:	d013      	beq.n	80058c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589e:	4a7d      	ldr	r2, [pc, #500]	; (8005a94 <HAL_UART_IRQHandler+0x3dc>)
 80058a0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7fd fae6 	bl	8002e78 <HAL_DMA_Abort_IT>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d016      	beq.n	80058e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80058bc:	4610      	mov	r0, r2
 80058be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c0:	e00e      	b.n	80058e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f9a4 	bl	8005c10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c8:	e00a      	b.n	80058e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 f9a0 	bl	8005c10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058d0:	e006      	b.n	80058e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f99c 	bl	8005c10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80058de:	e170      	b.n	8005bc2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e0:	bf00      	nop
    return;
 80058e2:	e16e      	b.n	8005bc2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	f040 814a 	bne.w	8005b82 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80058ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058f2:	f003 0310 	and.w	r3, r3, #16
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 8143 	beq.w	8005b82 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80058fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005900:	f003 0310 	and.w	r3, r3, #16
 8005904:	2b00      	cmp	r3, #0
 8005906:	f000 813c 	beq.w	8005b82 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800590a:	2300      	movs	r3, #0
 800590c:	60bb      	str	r3, [r7, #8]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	60bb      	str	r3, [r7, #8]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	60bb      	str	r3, [r7, #8]
 800591e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800592a:	2b40      	cmp	r3, #64	; 0x40
 800592c:	f040 80b4 	bne.w	8005a98 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800593c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005940:	2b00      	cmp	r3, #0
 8005942:	f000 8140 	beq.w	8005bc6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800594a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800594e:	429a      	cmp	r2, r3
 8005950:	f080 8139 	bcs.w	8005bc6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800595a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005960:	69db      	ldr	r3, [r3, #28]
 8005962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005966:	f000 8088 	beq.w	8005a7a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	330c      	adds	r3, #12
 8005970:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005974:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005978:	e853 3f00 	ldrex	r3, [r3]
 800597c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005980:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005984:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005988:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	330c      	adds	r3, #12
 8005992:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005996:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800599a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80059a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80059a6:	e841 2300 	strex	r3, r2, [r1]
 80059aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80059ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1d9      	bne.n	800596a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	3314      	adds	r3, #20
 80059bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059c0:	e853 3f00 	ldrex	r3, [r3]
 80059c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80059c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059c8:	f023 0301 	bic.w	r3, r3, #1
 80059cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	3314      	adds	r3, #20
 80059d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80059da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80059de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80059e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80059e6:	e841 2300 	strex	r3, r2, [r1]
 80059ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80059ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1e1      	bne.n	80059b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	3314      	adds	r3, #20
 80059f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059fc:	e853 3f00 	ldrex	r3, [r3]
 8005a00:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005a02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3314      	adds	r3, #20
 8005a12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005a16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005a18:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005a1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a1e:	e841 2300 	strex	r3, r2, [r1]
 8005a22:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1e3      	bne.n	80059f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2220      	movs	r2, #32
 8005a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	330c      	adds	r3, #12
 8005a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a42:	e853 3f00 	ldrex	r3, [r3]
 8005a46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a4a:	f023 0310 	bic.w	r3, r3, #16
 8005a4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	330c      	adds	r3, #12
 8005a58:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005a5c:	65ba      	str	r2, [r7, #88]	; 0x58
 8005a5e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a64:	e841 2300 	strex	r3, r2, [r1]
 8005a68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1e3      	bne.n	8005a38 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7fd f98f 	bl	8002d98 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	4619      	mov	r1, r3
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f8ca 	bl	8005c24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a90:	e099      	b.n	8005bc6 <HAL_UART_IRQHandler+0x50e>
 8005a92:	bf00      	nop
 8005a94:	0800612f 	.word	0x0800612f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	f000 808b 	beq.w	8005bca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005ab4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f000 8086 	beq.w	8005bca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	330c      	adds	r3, #12
 8005ac4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac8:	e853 3f00 	ldrex	r3, [r3]
 8005acc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ad4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	330c      	adds	r3, #12
 8005ade:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005ae2:	647a      	str	r2, [r7, #68]	; 0x44
 8005ae4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ae8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005aea:	e841 2300 	strex	r3, r2, [r1]
 8005aee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1e3      	bne.n	8005abe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	3314      	adds	r3, #20
 8005afc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	e853 3f00 	ldrex	r3, [r3]
 8005b04:	623b      	str	r3, [r7, #32]
   return(result);
 8005b06:	6a3b      	ldr	r3, [r7, #32]
 8005b08:	f023 0301 	bic.w	r3, r3, #1
 8005b0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	3314      	adds	r3, #20
 8005b16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005b1a:	633a      	str	r2, [r7, #48]	; 0x30
 8005b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b22:	e841 2300 	strex	r3, r2, [r1]
 8005b26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1e3      	bne.n	8005af6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2220      	movs	r2, #32
 8005b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	330c      	adds	r3, #12
 8005b42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	e853 3f00 	ldrex	r3, [r3]
 8005b4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f023 0310 	bic.w	r3, r3, #16
 8005b52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	330c      	adds	r3, #12
 8005b5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005b60:	61fa      	str	r2, [r7, #28]
 8005b62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b64:	69b9      	ldr	r1, [r7, #24]
 8005b66:	69fa      	ldr	r2, [r7, #28]
 8005b68:	e841 2300 	strex	r3, r2, [r1]
 8005b6c:	617b      	str	r3, [r7, #20]
   return(result);
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1e3      	bne.n	8005b3c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b78:	4619      	mov	r1, r3
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f852 	bl	8005c24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b80:	e023      	b.n	8005bca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d009      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x4ea>
 8005b8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 fadb 	bl	8006156 <UART_Transmit_IT>
    return;
 8005ba0:	e014      	b.n	8005bcc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00e      	beq.n	8005bcc <HAL_UART_IRQHandler+0x514>
 8005bae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d008      	beq.n	8005bcc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 fb1b 	bl	80061f6 <UART_EndTransmit_IT>
    return;
 8005bc0:	e004      	b.n	8005bcc <HAL_UART_IRQHandler+0x514>
    return;
 8005bc2:	bf00      	nop
 8005bc4:	e002      	b.n	8005bcc <HAL_UART_IRQHandler+0x514>
      return;
 8005bc6:	bf00      	nop
 8005bc8:	e000      	b.n	8005bcc <HAL_UART_IRQHandler+0x514>
      return;
 8005bca:	bf00      	nop
  }
}
 8005bcc:	37e8      	adds	r7, #232	; 0xe8
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop

08005bd4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b090      	sub	sp, #64	; 0x40
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c48:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d137      	bne.n	8005cc8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	3314      	adds	r3, #20
 8005c64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c68:	e853 3f00 	ldrex	r3, [r3]
 8005c6c:	623b      	str	r3, [r7, #32]
   return(result);
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c74:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	3314      	adds	r3, #20
 8005c7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c7e:	633a      	str	r2, [r7, #48]	; 0x30
 8005c80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c86:	e841 2300 	strex	r3, r2, [r1]
 8005c8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1e5      	bne.n	8005c5e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	330c      	adds	r3, #12
 8005c98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	e853 3f00 	ldrex	r3, [r3]
 8005ca0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8005caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	330c      	adds	r3, #12
 8005cb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cb2:	61fa      	str	r2, [r7, #28]
 8005cb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb6:	69b9      	ldr	r1, [r7, #24]
 8005cb8:	69fa      	ldr	r2, [r7, #28]
 8005cba:	e841 2300 	strex	r3, r2, [r1]
 8005cbe:	617b      	str	r3, [r7, #20]
   return(result);
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1e5      	bne.n	8005c92 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005cc6:	e002      	b.n	8005cce <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005cc8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005cca:	f7fc fa9d 	bl	8002208 <HAL_UART_TxCpltCallback>
}
 8005cce:	bf00      	nop
 8005cd0:	3740      	adds	r7, #64	; 0x40
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b084      	sub	sp, #16
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f7ff ff75 	bl	8005bd4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cea:	bf00      	nop
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b09c      	sub	sp, #112	; 0x70
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfe:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d172      	bne.n	8005df4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d10:	2200      	movs	r2, #0
 8005d12:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	330c      	adds	r3, #12
 8005d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d1e:	e853 3f00 	ldrex	r3, [r3]
 8005d22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	330c      	adds	r3, #12
 8005d32:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005d34:	65ba      	str	r2, [r7, #88]	; 0x58
 8005d36:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d3c:	e841 2300 	strex	r3, r2, [r1]
 8005d40:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1e5      	bne.n	8005d14 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	3314      	adds	r3, #20
 8005d4e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d52:	e853 3f00 	ldrex	r3, [r3]
 8005d56:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d5a:	f023 0301 	bic.w	r3, r3, #1
 8005d5e:	667b      	str	r3, [r7, #100]	; 0x64
 8005d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	3314      	adds	r3, #20
 8005d66:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005d68:	647a      	str	r2, [r7, #68]	; 0x44
 8005d6a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d70:	e841 2300 	strex	r3, r2, [r1]
 8005d74:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d1e5      	bne.n	8005d48 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	3314      	adds	r3, #20
 8005d82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d86:	e853 3f00 	ldrex	r3, [r3]
 8005d8a:	623b      	str	r3, [r7, #32]
   return(result);
 8005d8c:	6a3b      	ldr	r3, [r7, #32]
 8005d8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d92:	663b      	str	r3, [r7, #96]	; 0x60
 8005d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	3314      	adds	r3, #20
 8005d9a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d9c:	633a      	str	r2, [r7, #48]	; 0x30
 8005d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005da2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005da4:	e841 2300 	strex	r3, r2, [r1]
 8005da8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d1e5      	bne.n	8005d7c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005db2:	2220      	movs	r2, #32
 8005db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d119      	bne.n	8005df4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	330c      	adds	r3, #12
 8005dc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	e853 3f00 	ldrex	r3, [r3]
 8005dce:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f023 0310 	bic.w	r3, r3, #16
 8005dd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	330c      	adds	r3, #12
 8005dde:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005de0:	61fa      	str	r2, [r7, #28]
 8005de2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de4:	69b9      	ldr	r1, [r7, #24]
 8005de6:	69fa      	ldr	r2, [r7, #28]
 8005de8:	e841 2300 	strex	r3, r2, [r1]
 8005dec:	617b      	str	r3, [r7, #20]
   return(result);
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d1e5      	bne.n	8005dc0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d106      	bne.n	8005e0a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dfe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e00:	4619      	mov	r1, r3
 8005e02:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005e04:	f7ff ff0e 	bl	8005c24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e08:	e002      	b.n	8005e10 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005e0a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005e0c:	f7ff feec 	bl	8005be8 <HAL_UART_RxCpltCallback>
}
 8005e10:	bf00      	nop
 8005e12:	3770      	adds	r7, #112	; 0x70
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e24:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d108      	bne.n	8005e40 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e32:	085b      	lsrs	r3, r3, #1
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	4619      	mov	r1, r3
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f7ff fef3 	bl	8005c24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e3e:	e002      	b.n	8005e46 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f7ff fedb 	bl	8005bfc <HAL_UART_RxHalfCpltCallback>
}
 8005e46:	bf00      	nop
 8005e48:	3710      	adds	r7, #16
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b084      	sub	sp, #16
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005e56:	2300      	movs	r3, #0
 8005e58:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e6a:	2b80      	cmp	r3, #128	; 0x80
 8005e6c:	bf0c      	ite	eq
 8005e6e:	2301      	moveq	r3, #1
 8005e70:	2300      	movne	r3, #0
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	2b21      	cmp	r3, #33	; 0x21
 8005e80:	d108      	bne.n	8005e94 <UART_DMAError+0x46>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d005      	beq.n	8005e94 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005e8e:	68b8      	ldr	r0, [r7, #8]
 8005e90:	f000 f8c2 	bl	8006018 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e9e:	2b40      	cmp	r3, #64	; 0x40
 8005ea0:	bf0c      	ite	eq
 8005ea2:	2301      	moveq	r3, #1
 8005ea4:	2300      	movne	r3, #0
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b22      	cmp	r3, #34	; 0x22
 8005eb4:	d108      	bne.n	8005ec8 <UART_DMAError+0x7a>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d005      	beq.n	8005ec8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005ec2:	68b8      	ldr	r0, [r7, #8]
 8005ec4:	f000 f8d0 	bl	8006068 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ecc:	f043 0210 	orr.w	r2, r3, #16
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ed4:	68b8      	ldr	r0, [r7, #8]
 8005ed6:	f7ff fe9b 	bl	8005c10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005eda:	bf00      	nop
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
	...

08005ee4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b098      	sub	sp, #96	; 0x60
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	4613      	mov	r3, r2
 8005ef0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	88fa      	ldrh	r2, [r7, #6]
 8005efc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2222      	movs	r2, #34	; 0x22
 8005f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f10:	4a3e      	ldr	r2, [pc, #248]	; (800600c <UART_Start_Receive_DMA+0x128>)
 8005f12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f18:	4a3d      	ldr	r2, [pc, #244]	; (8006010 <UART_Start_Receive_DMA+0x12c>)
 8005f1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f20:	4a3c      	ldr	r2, [pc, #240]	; (8006014 <UART_Start_Receive_DMA+0x130>)
 8005f22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f28:	2200      	movs	r2, #0
 8005f2a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005f2c:	f107 0308 	add.w	r3, r7, #8
 8005f30:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	3304      	adds	r3, #4
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	88fb      	ldrh	r3, [r7, #6]
 8005f44:	f7fc fed0 	bl	8002ce8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005f48:	2300      	movs	r3, #0
 8005f4a:	613b      	str	r3, [r7, #16]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	613b      	str	r3, [r7, #16]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	613b      	str	r3, [r7, #16]
 8005f5c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	330c      	adds	r3, #12
 8005f6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f70:	e853 3f00 	ldrex	r3, [r3]
 8005f74:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	330c      	adds	r3, #12
 8005f84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f86:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005f88:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005f8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f8e:	e841 2300 	strex	r3, r2, [r1]
 8005f92:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005f94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1e5      	bne.n	8005f66 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	3314      	adds	r3, #20
 8005fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa4:	e853 3f00 	ldrex	r3, [r3]
 8005fa8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fac:	f043 0301 	orr.w	r3, r3, #1
 8005fb0:	657b      	str	r3, [r7, #84]	; 0x54
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	3314      	adds	r3, #20
 8005fb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005fba:	63ba      	str	r2, [r7, #56]	; 0x38
 8005fbc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fbe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005fc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fc2:	e841 2300 	strex	r3, r2, [r1]
 8005fc6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1e5      	bne.n	8005f9a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	3314      	adds	r3, #20
 8005fd4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	e853 3f00 	ldrex	r3, [r3]
 8005fdc:	617b      	str	r3, [r7, #20]
   return(result);
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fe4:	653b      	str	r3, [r7, #80]	; 0x50
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	3314      	adds	r3, #20
 8005fec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005fee:	627a      	str	r2, [r7, #36]	; 0x24
 8005ff0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff2:	6a39      	ldr	r1, [r7, #32]
 8005ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ff6:	e841 2300 	strex	r3, r2, [r1]
 8005ffa:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1e5      	bne.n	8005fce <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3760      	adds	r7, #96	; 0x60
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	08005cf3 	.word	0x08005cf3
 8006010:	08005e19 	.word	0x08005e19
 8006014:	08005e4f 	.word	0x08005e4f

08006018 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006018:	b480      	push	{r7}
 800601a:	b089      	sub	sp, #36	; 0x24
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	330c      	adds	r3, #12
 8006026:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	e853 3f00 	ldrex	r3, [r3]
 800602e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006036:	61fb      	str	r3, [r7, #28]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	330c      	adds	r3, #12
 800603e:	69fa      	ldr	r2, [r7, #28]
 8006040:	61ba      	str	r2, [r7, #24]
 8006042:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006044:	6979      	ldr	r1, [r7, #20]
 8006046:	69ba      	ldr	r2, [r7, #24]
 8006048:	e841 2300 	strex	r3, r2, [r1]
 800604c:	613b      	str	r3, [r7, #16]
   return(result);
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1e5      	bne.n	8006020 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2220      	movs	r2, #32
 8006058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800605c:	bf00      	nop
 800605e:	3724      	adds	r7, #36	; 0x24
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006068:	b480      	push	{r7}
 800606a:	b095      	sub	sp, #84	; 0x54
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	330c      	adds	r3, #12
 8006076:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800607a:	e853 3f00 	ldrex	r3, [r3]
 800607e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006082:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006086:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	330c      	adds	r3, #12
 800608e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006090:	643a      	str	r2, [r7, #64]	; 0x40
 8006092:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006094:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006096:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006098:	e841 2300 	strex	r3, r2, [r1]
 800609c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800609e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1e5      	bne.n	8006070 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	3314      	adds	r3, #20
 80060aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ac:	6a3b      	ldr	r3, [r7, #32]
 80060ae:	e853 3f00 	ldrex	r3, [r3]
 80060b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	f023 0301 	bic.w	r3, r3, #1
 80060ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	3314      	adds	r3, #20
 80060c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060cc:	e841 2300 	strex	r3, r2, [r1]
 80060d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d1e5      	bne.n	80060a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d119      	bne.n	8006114 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	330c      	adds	r3, #12
 80060e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	e853 3f00 	ldrex	r3, [r3]
 80060ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	f023 0310 	bic.w	r3, r3, #16
 80060f6:	647b      	str	r3, [r7, #68]	; 0x44
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	330c      	adds	r3, #12
 80060fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006100:	61ba      	str	r2, [r7, #24]
 8006102:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006104:	6979      	ldr	r1, [r7, #20]
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	e841 2300 	strex	r3, r2, [r1]
 800610c:	613b      	str	r3, [r7, #16]
   return(result);
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d1e5      	bne.n	80060e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2220      	movs	r2, #32
 8006118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006122:	bf00      	nop
 8006124:	3754      	adds	r7, #84	; 0x54
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b084      	sub	sp, #16
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f7ff fd61 	bl	8005c10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800614e:	bf00      	nop
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006156:	b480      	push	{r7}
 8006158:	b085      	sub	sp, #20
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006164:	b2db      	uxtb	r3, r3
 8006166:	2b21      	cmp	r3, #33	; 0x21
 8006168:	d13e      	bne.n	80061e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006172:	d114      	bne.n	800619e <UART_Transmit_IT+0x48>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d110      	bne.n	800619e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a1b      	ldr	r3, [r3, #32]
 8006180:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	881b      	ldrh	r3, [r3, #0]
 8006186:	461a      	mov	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006190:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a1b      	ldr	r3, [r3, #32]
 8006196:	1c9a      	adds	r2, r3, #2
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	621a      	str	r2, [r3, #32]
 800619c:	e008      	b.n	80061b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	1c59      	adds	r1, r3, #1
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	6211      	str	r1, [r2, #32]
 80061a8:	781a      	ldrb	r2, [r3, #0]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	3b01      	subs	r3, #1
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	4619      	mov	r1, r3
 80061be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d10f      	bne.n	80061e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68da      	ldr	r2, [r3, #12]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68da      	ldr	r2, [r3, #12]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80061e4:	2300      	movs	r3, #0
 80061e6:	e000      	b.n	80061ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80061e8:	2302      	movs	r3, #2
  }
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3714      	adds	r7, #20
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr

080061f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b082      	sub	sp, #8
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68da      	ldr	r2, [r3, #12]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800620c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2220      	movs	r2, #32
 8006212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f7fb fff6 	bl	8002208 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3708      	adds	r7, #8
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b08c      	sub	sp, #48	; 0x30
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b22      	cmp	r3, #34	; 0x22
 8006238:	f040 80ab 	bne.w	8006392 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006244:	d117      	bne.n	8006276 <UART_Receive_IT+0x50>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d113      	bne.n	8006276 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800624e:	2300      	movs	r3, #0
 8006250:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006256:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	b29b      	uxth	r3, r3
 8006260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006264:	b29a      	uxth	r2, r3
 8006266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006268:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800626e:	1c9a      	adds	r2, r3, #2
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	629a      	str	r2, [r3, #40]	; 0x28
 8006274:	e026      	b.n	80062c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800627a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800627c:	2300      	movs	r3, #0
 800627e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006288:	d007      	beq.n	800629a <UART_Receive_IT+0x74>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10a      	bne.n	80062a8 <UART_Receive_IT+0x82>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d106      	bne.n	80062a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	b2da      	uxtb	r2, r3
 80062a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a4:	701a      	strb	r2, [r3, #0]
 80062a6:	e008      	b.n	80062ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062b4:	b2da      	uxtb	r2, r3
 80062b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062be:	1c5a      	adds	r2, r3, #1
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	3b01      	subs	r3, #1
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	4619      	mov	r1, r3
 80062d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d15a      	bne.n	800638e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68da      	ldr	r2, [r3, #12]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f022 0220 	bic.w	r2, r2, #32
 80062e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68da      	ldr	r2, [r3, #12]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	695a      	ldr	r2, [r3, #20]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f022 0201 	bic.w	r2, r2, #1
 8006306:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2220      	movs	r2, #32
 800630c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006314:	2b01      	cmp	r3, #1
 8006316:	d135      	bne.n	8006384 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	330c      	adds	r3, #12
 8006324:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	e853 3f00 	ldrex	r3, [r3]
 800632c:	613b      	str	r3, [r7, #16]
   return(result);
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	f023 0310 	bic.w	r3, r3, #16
 8006334:	627b      	str	r3, [r7, #36]	; 0x24
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	330c      	adds	r3, #12
 800633c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800633e:	623a      	str	r2, [r7, #32]
 8006340:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006342:	69f9      	ldr	r1, [r7, #28]
 8006344:	6a3a      	ldr	r2, [r7, #32]
 8006346:	e841 2300 	strex	r3, r2, [r1]
 800634a:	61bb      	str	r3, [r7, #24]
   return(result);
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1e5      	bne.n	800631e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0310 	and.w	r3, r3, #16
 800635c:	2b10      	cmp	r3, #16
 800635e:	d10a      	bne.n	8006376 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006360:	2300      	movs	r3, #0
 8006362:	60fb      	str	r3, [r7, #12]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	60fb      	str	r3, [r7, #12]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	60fb      	str	r3, [r7, #12]
 8006374:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800637a:	4619      	mov	r1, r3
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f7ff fc51 	bl	8005c24 <HAL_UARTEx_RxEventCallback>
 8006382:	e002      	b.n	800638a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f7ff fc2f 	bl	8005be8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800638a:	2300      	movs	r3, #0
 800638c:	e002      	b.n	8006394 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800638e:	2300      	movs	r3, #0
 8006390:	e000      	b.n	8006394 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006392:	2302      	movs	r3, #2
  }
}
 8006394:	4618      	mov	r0, r3
 8006396:	3730      	adds	r7, #48	; 0x30
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800639c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063a0:	b09f      	sub	sp, #124	; 0x7c
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80063b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063b2:	68d9      	ldr	r1, [r3, #12]
 80063b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	ea40 0301 	orr.w	r3, r0, r1
 80063bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80063be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063c0:	689a      	ldr	r2, [r3, #8]
 80063c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	431a      	orrs	r2, r3
 80063c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ca:	695b      	ldr	r3, [r3, #20]
 80063cc:	431a      	orrs	r2, r3
 80063ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063d0:	69db      	ldr	r3, [r3, #28]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80063d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80063e0:	f021 010c 	bic.w	r1, r1, #12
 80063e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063ea:	430b      	orrs	r3, r1
 80063ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80063f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063fa:	6999      	ldr	r1, [r3, #24]
 80063fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	ea40 0301 	orr.w	r3, r0, r1
 8006404:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	4bc5      	ldr	r3, [pc, #788]	; (8006720 <UART_SetConfig+0x384>)
 800640c:	429a      	cmp	r2, r3
 800640e:	d004      	beq.n	800641a <UART_SetConfig+0x7e>
 8006410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	4bc3      	ldr	r3, [pc, #780]	; (8006724 <UART_SetConfig+0x388>)
 8006416:	429a      	cmp	r2, r3
 8006418:	d103      	bne.n	8006422 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800641a:	f7fd fda3 	bl	8003f64 <HAL_RCC_GetPCLK2Freq>
 800641e:	6778      	str	r0, [r7, #116]	; 0x74
 8006420:	e002      	b.n	8006428 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006422:	f7fd fd8b 	bl	8003f3c <HAL_RCC_GetPCLK1Freq>
 8006426:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800642a:	69db      	ldr	r3, [r3, #28]
 800642c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006430:	f040 80b6 	bne.w	80065a0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006434:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006436:	461c      	mov	r4, r3
 8006438:	f04f 0500 	mov.w	r5, #0
 800643c:	4622      	mov	r2, r4
 800643e:	462b      	mov	r3, r5
 8006440:	1891      	adds	r1, r2, r2
 8006442:	6439      	str	r1, [r7, #64]	; 0x40
 8006444:	415b      	adcs	r3, r3
 8006446:	647b      	str	r3, [r7, #68]	; 0x44
 8006448:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800644c:	1912      	adds	r2, r2, r4
 800644e:	eb45 0303 	adc.w	r3, r5, r3
 8006452:	f04f 0000 	mov.w	r0, #0
 8006456:	f04f 0100 	mov.w	r1, #0
 800645a:	00d9      	lsls	r1, r3, #3
 800645c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006460:	00d0      	lsls	r0, r2, #3
 8006462:	4602      	mov	r2, r0
 8006464:	460b      	mov	r3, r1
 8006466:	1911      	adds	r1, r2, r4
 8006468:	6639      	str	r1, [r7, #96]	; 0x60
 800646a:	416b      	adcs	r3, r5
 800646c:	667b      	str	r3, [r7, #100]	; 0x64
 800646e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	461a      	mov	r2, r3
 8006474:	f04f 0300 	mov.w	r3, #0
 8006478:	1891      	adds	r1, r2, r2
 800647a:	63b9      	str	r1, [r7, #56]	; 0x38
 800647c:	415b      	adcs	r3, r3
 800647e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006480:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006484:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006488:	f7f9 fe9e 	bl	80001c8 <__aeabi_uldivmod>
 800648c:	4602      	mov	r2, r0
 800648e:	460b      	mov	r3, r1
 8006490:	4ba5      	ldr	r3, [pc, #660]	; (8006728 <UART_SetConfig+0x38c>)
 8006492:	fba3 2302 	umull	r2, r3, r3, r2
 8006496:	095b      	lsrs	r3, r3, #5
 8006498:	011e      	lsls	r6, r3, #4
 800649a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800649c:	461c      	mov	r4, r3
 800649e:	f04f 0500 	mov.w	r5, #0
 80064a2:	4622      	mov	r2, r4
 80064a4:	462b      	mov	r3, r5
 80064a6:	1891      	adds	r1, r2, r2
 80064a8:	6339      	str	r1, [r7, #48]	; 0x30
 80064aa:	415b      	adcs	r3, r3
 80064ac:	637b      	str	r3, [r7, #52]	; 0x34
 80064ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80064b2:	1912      	adds	r2, r2, r4
 80064b4:	eb45 0303 	adc.w	r3, r5, r3
 80064b8:	f04f 0000 	mov.w	r0, #0
 80064bc:	f04f 0100 	mov.w	r1, #0
 80064c0:	00d9      	lsls	r1, r3, #3
 80064c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80064c6:	00d0      	lsls	r0, r2, #3
 80064c8:	4602      	mov	r2, r0
 80064ca:	460b      	mov	r3, r1
 80064cc:	1911      	adds	r1, r2, r4
 80064ce:	65b9      	str	r1, [r7, #88]	; 0x58
 80064d0:	416b      	adcs	r3, r5
 80064d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	461a      	mov	r2, r3
 80064da:	f04f 0300 	mov.w	r3, #0
 80064de:	1891      	adds	r1, r2, r2
 80064e0:	62b9      	str	r1, [r7, #40]	; 0x28
 80064e2:	415b      	adcs	r3, r3
 80064e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064ea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80064ee:	f7f9 fe6b 	bl	80001c8 <__aeabi_uldivmod>
 80064f2:	4602      	mov	r2, r0
 80064f4:	460b      	mov	r3, r1
 80064f6:	4b8c      	ldr	r3, [pc, #560]	; (8006728 <UART_SetConfig+0x38c>)
 80064f8:	fba3 1302 	umull	r1, r3, r3, r2
 80064fc:	095b      	lsrs	r3, r3, #5
 80064fe:	2164      	movs	r1, #100	; 0x64
 8006500:	fb01 f303 	mul.w	r3, r1, r3
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	00db      	lsls	r3, r3, #3
 8006508:	3332      	adds	r3, #50	; 0x32
 800650a:	4a87      	ldr	r2, [pc, #540]	; (8006728 <UART_SetConfig+0x38c>)
 800650c:	fba2 2303 	umull	r2, r3, r2, r3
 8006510:	095b      	lsrs	r3, r3, #5
 8006512:	005b      	lsls	r3, r3, #1
 8006514:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006518:	441e      	add	r6, r3
 800651a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800651c:	4618      	mov	r0, r3
 800651e:	f04f 0100 	mov.w	r1, #0
 8006522:	4602      	mov	r2, r0
 8006524:	460b      	mov	r3, r1
 8006526:	1894      	adds	r4, r2, r2
 8006528:	623c      	str	r4, [r7, #32]
 800652a:	415b      	adcs	r3, r3
 800652c:	627b      	str	r3, [r7, #36]	; 0x24
 800652e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006532:	1812      	adds	r2, r2, r0
 8006534:	eb41 0303 	adc.w	r3, r1, r3
 8006538:	f04f 0400 	mov.w	r4, #0
 800653c:	f04f 0500 	mov.w	r5, #0
 8006540:	00dd      	lsls	r5, r3, #3
 8006542:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006546:	00d4      	lsls	r4, r2, #3
 8006548:	4622      	mov	r2, r4
 800654a:	462b      	mov	r3, r5
 800654c:	1814      	adds	r4, r2, r0
 800654e:	653c      	str	r4, [r7, #80]	; 0x50
 8006550:	414b      	adcs	r3, r1
 8006552:	657b      	str	r3, [r7, #84]	; 0x54
 8006554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	461a      	mov	r2, r3
 800655a:	f04f 0300 	mov.w	r3, #0
 800655e:	1891      	adds	r1, r2, r2
 8006560:	61b9      	str	r1, [r7, #24]
 8006562:	415b      	adcs	r3, r3
 8006564:	61fb      	str	r3, [r7, #28]
 8006566:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800656a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800656e:	f7f9 fe2b 	bl	80001c8 <__aeabi_uldivmod>
 8006572:	4602      	mov	r2, r0
 8006574:	460b      	mov	r3, r1
 8006576:	4b6c      	ldr	r3, [pc, #432]	; (8006728 <UART_SetConfig+0x38c>)
 8006578:	fba3 1302 	umull	r1, r3, r3, r2
 800657c:	095b      	lsrs	r3, r3, #5
 800657e:	2164      	movs	r1, #100	; 0x64
 8006580:	fb01 f303 	mul.w	r3, r1, r3
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	00db      	lsls	r3, r3, #3
 8006588:	3332      	adds	r3, #50	; 0x32
 800658a:	4a67      	ldr	r2, [pc, #412]	; (8006728 <UART_SetConfig+0x38c>)
 800658c:	fba2 2303 	umull	r2, r3, r2, r3
 8006590:	095b      	lsrs	r3, r3, #5
 8006592:	f003 0207 	and.w	r2, r3, #7
 8006596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4432      	add	r2, r6
 800659c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800659e:	e0b9      	b.n	8006714 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065a2:	461c      	mov	r4, r3
 80065a4:	f04f 0500 	mov.w	r5, #0
 80065a8:	4622      	mov	r2, r4
 80065aa:	462b      	mov	r3, r5
 80065ac:	1891      	adds	r1, r2, r2
 80065ae:	6139      	str	r1, [r7, #16]
 80065b0:	415b      	adcs	r3, r3
 80065b2:	617b      	str	r3, [r7, #20]
 80065b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80065b8:	1912      	adds	r2, r2, r4
 80065ba:	eb45 0303 	adc.w	r3, r5, r3
 80065be:	f04f 0000 	mov.w	r0, #0
 80065c2:	f04f 0100 	mov.w	r1, #0
 80065c6:	00d9      	lsls	r1, r3, #3
 80065c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80065cc:	00d0      	lsls	r0, r2, #3
 80065ce:	4602      	mov	r2, r0
 80065d0:	460b      	mov	r3, r1
 80065d2:	eb12 0804 	adds.w	r8, r2, r4
 80065d6:	eb43 0905 	adc.w	r9, r3, r5
 80065da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	4618      	mov	r0, r3
 80065e0:	f04f 0100 	mov.w	r1, #0
 80065e4:	f04f 0200 	mov.w	r2, #0
 80065e8:	f04f 0300 	mov.w	r3, #0
 80065ec:	008b      	lsls	r3, r1, #2
 80065ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80065f2:	0082      	lsls	r2, r0, #2
 80065f4:	4640      	mov	r0, r8
 80065f6:	4649      	mov	r1, r9
 80065f8:	f7f9 fde6 	bl	80001c8 <__aeabi_uldivmod>
 80065fc:	4602      	mov	r2, r0
 80065fe:	460b      	mov	r3, r1
 8006600:	4b49      	ldr	r3, [pc, #292]	; (8006728 <UART_SetConfig+0x38c>)
 8006602:	fba3 2302 	umull	r2, r3, r3, r2
 8006606:	095b      	lsrs	r3, r3, #5
 8006608:	011e      	lsls	r6, r3, #4
 800660a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800660c:	4618      	mov	r0, r3
 800660e:	f04f 0100 	mov.w	r1, #0
 8006612:	4602      	mov	r2, r0
 8006614:	460b      	mov	r3, r1
 8006616:	1894      	adds	r4, r2, r2
 8006618:	60bc      	str	r4, [r7, #8]
 800661a:	415b      	adcs	r3, r3
 800661c:	60fb      	str	r3, [r7, #12]
 800661e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006622:	1812      	adds	r2, r2, r0
 8006624:	eb41 0303 	adc.w	r3, r1, r3
 8006628:	f04f 0400 	mov.w	r4, #0
 800662c:	f04f 0500 	mov.w	r5, #0
 8006630:	00dd      	lsls	r5, r3, #3
 8006632:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006636:	00d4      	lsls	r4, r2, #3
 8006638:	4622      	mov	r2, r4
 800663a:	462b      	mov	r3, r5
 800663c:	1814      	adds	r4, r2, r0
 800663e:	64bc      	str	r4, [r7, #72]	; 0x48
 8006640:	414b      	adcs	r3, r1
 8006642:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	4618      	mov	r0, r3
 800664a:	f04f 0100 	mov.w	r1, #0
 800664e:	f04f 0200 	mov.w	r2, #0
 8006652:	f04f 0300 	mov.w	r3, #0
 8006656:	008b      	lsls	r3, r1, #2
 8006658:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800665c:	0082      	lsls	r2, r0, #2
 800665e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006662:	f7f9 fdb1 	bl	80001c8 <__aeabi_uldivmod>
 8006666:	4602      	mov	r2, r0
 8006668:	460b      	mov	r3, r1
 800666a:	4b2f      	ldr	r3, [pc, #188]	; (8006728 <UART_SetConfig+0x38c>)
 800666c:	fba3 1302 	umull	r1, r3, r3, r2
 8006670:	095b      	lsrs	r3, r3, #5
 8006672:	2164      	movs	r1, #100	; 0x64
 8006674:	fb01 f303 	mul.w	r3, r1, r3
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	011b      	lsls	r3, r3, #4
 800667c:	3332      	adds	r3, #50	; 0x32
 800667e:	4a2a      	ldr	r2, [pc, #168]	; (8006728 <UART_SetConfig+0x38c>)
 8006680:	fba2 2303 	umull	r2, r3, r2, r3
 8006684:	095b      	lsrs	r3, r3, #5
 8006686:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800668a:	441e      	add	r6, r3
 800668c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800668e:	4618      	mov	r0, r3
 8006690:	f04f 0100 	mov.w	r1, #0
 8006694:	4602      	mov	r2, r0
 8006696:	460b      	mov	r3, r1
 8006698:	1894      	adds	r4, r2, r2
 800669a:	603c      	str	r4, [r7, #0]
 800669c:	415b      	adcs	r3, r3
 800669e:	607b      	str	r3, [r7, #4]
 80066a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066a4:	1812      	adds	r2, r2, r0
 80066a6:	eb41 0303 	adc.w	r3, r1, r3
 80066aa:	f04f 0400 	mov.w	r4, #0
 80066ae:	f04f 0500 	mov.w	r5, #0
 80066b2:	00dd      	lsls	r5, r3, #3
 80066b4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80066b8:	00d4      	lsls	r4, r2, #3
 80066ba:	4622      	mov	r2, r4
 80066bc:	462b      	mov	r3, r5
 80066be:	eb12 0a00 	adds.w	sl, r2, r0
 80066c2:	eb43 0b01 	adc.w	fp, r3, r1
 80066c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	4618      	mov	r0, r3
 80066cc:	f04f 0100 	mov.w	r1, #0
 80066d0:	f04f 0200 	mov.w	r2, #0
 80066d4:	f04f 0300 	mov.w	r3, #0
 80066d8:	008b      	lsls	r3, r1, #2
 80066da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80066de:	0082      	lsls	r2, r0, #2
 80066e0:	4650      	mov	r0, sl
 80066e2:	4659      	mov	r1, fp
 80066e4:	f7f9 fd70 	bl	80001c8 <__aeabi_uldivmod>
 80066e8:	4602      	mov	r2, r0
 80066ea:	460b      	mov	r3, r1
 80066ec:	4b0e      	ldr	r3, [pc, #56]	; (8006728 <UART_SetConfig+0x38c>)
 80066ee:	fba3 1302 	umull	r1, r3, r3, r2
 80066f2:	095b      	lsrs	r3, r3, #5
 80066f4:	2164      	movs	r1, #100	; 0x64
 80066f6:	fb01 f303 	mul.w	r3, r1, r3
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	011b      	lsls	r3, r3, #4
 80066fe:	3332      	adds	r3, #50	; 0x32
 8006700:	4a09      	ldr	r2, [pc, #36]	; (8006728 <UART_SetConfig+0x38c>)
 8006702:	fba2 2303 	umull	r2, r3, r2, r3
 8006706:	095b      	lsrs	r3, r3, #5
 8006708:	f003 020f 	and.w	r2, r3, #15
 800670c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4432      	add	r2, r6
 8006712:	609a      	str	r2, [r3, #8]
}
 8006714:	bf00      	nop
 8006716:	377c      	adds	r7, #124	; 0x7c
 8006718:	46bd      	mov	sp, r7
 800671a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800671e:	bf00      	nop
 8006720:	40011000 	.word	0x40011000
 8006724:	40011400 	.word	0x40011400
 8006728:	51eb851f 	.word	0x51eb851f

0800672c <__libc_init_array>:
 800672c:	b570      	push	{r4, r5, r6, lr}
 800672e:	4d0d      	ldr	r5, [pc, #52]	; (8006764 <__libc_init_array+0x38>)
 8006730:	4c0d      	ldr	r4, [pc, #52]	; (8006768 <__libc_init_array+0x3c>)
 8006732:	1b64      	subs	r4, r4, r5
 8006734:	10a4      	asrs	r4, r4, #2
 8006736:	2600      	movs	r6, #0
 8006738:	42a6      	cmp	r6, r4
 800673a:	d109      	bne.n	8006750 <__libc_init_array+0x24>
 800673c:	4d0b      	ldr	r5, [pc, #44]	; (800676c <__libc_init_array+0x40>)
 800673e:	4c0c      	ldr	r4, [pc, #48]	; (8006770 <__libc_init_array+0x44>)
 8006740:	f000 f848 	bl	80067d4 <_init>
 8006744:	1b64      	subs	r4, r4, r5
 8006746:	10a4      	asrs	r4, r4, #2
 8006748:	2600      	movs	r6, #0
 800674a:	42a6      	cmp	r6, r4
 800674c:	d105      	bne.n	800675a <__libc_init_array+0x2e>
 800674e:	bd70      	pop	{r4, r5, r6, pc}
 8006750:	f855 3b04 	ldr.w	r3, [r5], #4
 8006754:	4798      	blx	r3
 8006756:	3601      	adds	r6, #1
 8006758:	e7ee      	b.n	8006738 <__libc_init_array+0xc>
 800675a:	f855 3b04 	ldr.w	r3, [r5], #4
 800675e:	4798      	blx	r3
 8006760:	3601      	adds	r6, #1
 8006762:	e7f2      	b.n	800674a <__libc_init_array+0x1e>
 8006764:	08006854 	.word	0x08006854
 8006768:	08006854 	.word	0x08006854
 800676c:	08006854 	.word	0x08006854
 8006770:	08006858 	.word	0x08006858

08006774 <memcpy>:
 8006774:	440a      	add	r2, r1
 8006776:	4291      	cmp	r1, r2
 8006778:	f100 33ff 	add.w	r3, r0, #4294967295
 800677c:	d100      	bne.n	8006780 <memcpy+0xc>
 800677e:	4770      	bx	lr
 8006780:	b510      	push	{r4, lr}
 8006782:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006786:	f803 4f01 	strb.w	r4, [r3, #1]!
 800678a:	4291      	cmp	r1, r2
 800678c:	d1f9      	bne.n	8006782 <memcpy+0xe>
 800678e:	bd10      	pop	{r4, pc}

08006790 <memmove>:
 8006790:	4288      	cmp	r0, r1
 8006792:	b510      	push	{r4, lr}
 8006794:	eb01 0402 	add.w	r4, r1, r2
 8006798:	d902      	bls.n	80067a0 <memmove+0x10>
 800679a:	4284      	cmp	r4, r0
 800679c:	4623      	mov	r3, r4
 800679e:	d807      	bhi.n	80067b0 <memmove+0x20>
 80067a0:	1e43      	subs	r3, r0, #1
 80067a2:	42a1      	cmp	r1, r4
 80067a4:	d008      	beq.n	80067b8 <memmove+0x28>
 80067a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80067ae:	e7f8      	b.n	80067a2 <memmove+0x12>
 80067b0:	4402      	add	r2, r0
 80067b2:	4601      	mov	r1, r0
 80067b4:	428a      	cmp	r2, r1
 80067b6:	d100      	bne.n	80067ba <memmove+0x2a>
 80067b8:	bd10      	pop	{r4, pc}
 80067ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80067be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80067c2:	e7f7      	b.n	80067b4 <memmove+0x24>

080067c4 <memset>:
 80067c4:	4402      	add	r2, r0
 80067c6:	4603      	mov	r3, r0
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d100      	bne.n	80067ce <memset+0xa>
 80067cc:	4770      	bx	lr
 80067ce:	f803 1b01 	strb.w	r1, [r3], #1
 80067d2:	e7f9      	b.n	80067c8 <memset+0x4>

080067d4 <_init>:
 80067d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067d6:	bf00      	nop
 80067d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067da:	bc08      	pop	{r3}
 80067dc:	469e      	mov	lr, r3
 80067de:	4770      	bx	lr

080067e0 <_fini>:
 80067e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067e2:	bf00      	nop
 80067e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067e6:	bc08      	pop	{r3}
 80067e8:	469e      	mov	lr, r3
 80067ea:	4770      	bx	lr
