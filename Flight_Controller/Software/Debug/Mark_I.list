
Mark_I.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ff0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007178  08007178  00017178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071d8  080071d8  0002037c  2**0
                  CONTENTS
  4 .ARM          00000008  080071d8  080071d8  000171d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071e0  080071e0  0002037c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071e0  080071e0  000171e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071e4  080071e4  000171e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000037c  20000000  080071e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002037c  2**0
                  CONTENTS
 10 .bss          00000d50  2000037c  2000037c  0002037c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200010cc  200010cc  0002037c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002037c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b39f  00000000  00000000  000203ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a91  00000000  00000000  0003b74b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001278  00000000  00000000  0003f1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001108  00000000  00000000  00040458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022985  00000000  00000000  00041560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a5ac  00000000  00000000  00063ee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c45b9  00000000  00000000  0007e491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00142a4a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b64  00000000  00000000  00142aa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000037c 	.word	0x2000037c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007160 	.word	0x08007160

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000380 	.word	0x20000380
 80001c4:	08007160 	.word	0x08007160

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <DATA_LOGGER_Init>:
/*
 * @brief Declare every data
 * @param mark1_ pointer to a system_t structure
 */
void DATA_LOGGER_Init(system_t * mark1_)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	mark1 = mark1_;
 80004c8:	4a2e      	ldr	r2, [pc, #184]	; (8000584 <DATA_LOGGER_Init+0xc4>)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	6013      	str	r3, [r2, #0]
	/* -------------- Outputs ----------------- */
	DEFINE_DATA(data_id_eMCU_LOAD,
 80004ce:	4b2e      	ldr	r3, [pc, #184]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 80004d0:	2203      	movs	r2, #3
 80004d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80004d6:	4b2b      	ldr	r3, [pc, #172]	; (8000584 <DATA_LOGGER_Init+0xc4>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	461a      	mov	r2, r3
 80004dc:	4b2a      	ldr	r3, [pc, #168]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 80004de:	641a      	str	r2, [r3, #64]	; 0x40
 80004e0:	4b29      	ldr	r3, [pc, #164]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 80004e2:	222a      	movs	r2, #42	; 0x2a
 80004e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80004e8:	4b27      	ldr	r3, [pc, #156]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 80004ea:	4a28      	ldr	r2, [pc, #160]	; (800058c <DATA_LOGGER_Init+0xcc>)
 80004ec:	649a      	str	r2, [r3, #72]	; 0x48
 80004ee:	4b26      	ldr	r3, [pc, #152]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 80004f0:	2208      	movs	r2, #8
 80004f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 80004f6:	4b24      	ldr	r3, [pc, #144]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				(void*)&mark1->software.cpu_load,
				data_format_e16B_FLOAT_2D,
				"Mcu Load",
				use_format_eAS_OUTPUT);
	/* -------------- Inputs ----------------- */
	DEFINE_DATA(data_id_eCONFIG_REQUEST,
 80004fe:	4b22      	ldr	r3, [pc, #136]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 8000500:	2200      	movs	r2, #0
 8000502:	721a      	strb	r2, [r3, #8]
 8000504:	4b20      	ldr	r3, [pc, #128]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 8000506:	2200      	movs	r2, #0
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	4b1f      	ldr	r3, [pc, #124]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 800050c:	2200      	movs	r2, #0
 800050e:	725a      	strb	r2, [r3, #9]
 8000510:	4b1d      	ldr	r3, [pc, #116]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 8000512:	4a1f      	ldr	r2, [pc, #124]	; (8000590 <DATA_LOGGER_Init+0xd0>)
 8000514:	60da      	str	r2, [r3, #12]
 8000516:	4b1c      	ldr	r3, [pc, #112]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 8000518:	2212      	movs	r2, #18
 800051a:	741a      	strb	r2, [r3, #16]
 800051c:	4b1a      	ldr	r3, [pc, #104]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 800051e:	2202      	movs	r2, #2
 8000520:	745a      	strb	r2, [r3, #17]
				NULL,
				data_format_e0B_BUTTON,
				"Send Configuration",
				use_format_eAS_INPUT);
	DEFINE_DATA(data_id_eSTART_TRANSFER,
 8000522:	4b19      	ldr	r3, [pc, #100]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 8000524:	2201      	movs	r2, #1
 8000526:	771a      	strb	r2, [r3, #28]
 8000528:	4b17      	ldr	r3, [pc, #92]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 800052a:	2200      	movs	r2, #0
 800052c:	619a      	str	r2, [r3, #24]
 800052e:	4b16      	ldr	r3, [pc, #88]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 8000530:	2200      	movs	r2, #0
 8000532:	775a      	strb	r2, [r3, #29]
 8000534:	4b14      	ldr	r3, [pc, #80]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 8000536:	4a17      	ldr	r2, [pc, #92]	; (8000594 <DATA_LOGGER_Init+0xd4>)
 8000538:	621a      	str	r2, [r3, #32]
 800053a:	4b13      	ldr	r3, [pc, #76]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 800053c:	220e      	movs	r2, #14
 800053e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000542:	4b11      	ldr	r3, [pc, #68]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 8000544:	2202      	movs	r2, #2
 8000546:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				NULL,
				data_format_e0B_BUTTON,
				"Start Transfer",
				use_format_eAS_INPUT);
	DEFINE_DATA(data_id_eSTOP_TRANSFER,
 800054a:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 800054c:	2202      	movs	r2, #2
 800054e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8000552:	4b0d      	ldr	r3, [pc, #52]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 8000554:	2200      	movs	r2, #0
 8000556:	62da      	str	r2, [r3, #44]	; 0x2c
 8000558:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 800055a:	2200      	movs	r2, #0
 800055c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8000560:	4b09      	ldr	r3, [pc, #36]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 8000562:	4a0d      	ldr	r2, [pc, #52]	; (8000598 <DATA_LOGGER_Init+0xd8>)
 8000564:	635a      	str	r2, [r3, #52]	; 0x34
 8000566:	4b08      	ldr	r3, [pc, #32]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 8000568:	220d      	movs	r2, #13
 800056a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800056e:	4b06      	ldr	r3, [pc, #24]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 8000570:	2202      	movs	r2, #2
 8000572:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
				NULL,
				data_format_e0B_BUTTON,
				"Stop Transfer",
				use_format_eAS_INPUT);
}
 8000576:	bf00      	nop
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	20000398 	.word	0x20000398
 8000588:	2000039c 	.word	0x2000039c
 800058c:	08007178 	.word	0x08007178
 8000590:	08007184 	.word	0x08007184
 8000594:	08007198 	.word	0x08007198
 8000598:	080071a8 	.word	0x080071a8

0800059c <DATA_LOGGER_Start>:
/*
 * @brief Request to start logging data
 */
void DATA_LOGGER_Start()
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
	start_flag = TRUE;
 80005a0:	4b03      	ldr	r3, [pc, #12]	; (80005b0 <DATA_LOGGER_Start+0x14>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	701a      	strb	r2, [r3, #0]
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	200003ec 	.word	0x200003ec

080005b4 <DATA_LOGGER_Stop>:
/*
 * @brief Request to stop logging data
 */
void DATA_LOGGER_Stop()
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
	stop_flag = TRUE;
 80005b8:	4b03      	ldr	r3, [pc, #12]	; (80005c8 <DATA_LOGGER_Stop+0x14>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	701a      	strb	r2, [r3, #0]
}
 80005be:	bf00      	nop
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	200003ee 	.word	0x200003ee

080005cc <DATA_LOGGER_Main>:

/*
 * @brief Call the state machine and the uart parser
 */
void DATA_LOGGER_Main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	state_machine();
 80005d0:	f000 fab0 	bl	8000b34 <state_machine>
	parse_uart();
 80005d4:	f000 fbb4 	bl	8000d40 <parse_uart>
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}

080005dc <DATA_LOGGER_Reception>:
/*
 * @brief Parse input data
 * @param input_buffer Buffer to use to parse the data
 */
void DATA_LOGGER_Reception(uint8_t * input_buffer)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	uint8_t id = input_buffer[0];
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp_uint_16 = 0 ;
 80005ea:	2300      	movs	r3, #0
 80005ec:	81bb      	strh	r3, [r7, #12]
	int16_t tmp_int_16 = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	817b      	strh	r3, [r7, #10]
	switch(data_list[id].format)
 80005f2:	7bfa      	ldrb	r2, [r7, #15]
 80005f4:	4954      	ldr	r1, [pc, #336]	; (8000748 <DATA_LOGGER_Reception+0x16c>)
 80005f6:	4613      	mov	r3, r2
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	4413      	add	r3, r2
 80005fc:	009b      	lsls	r3, r3, #2
 80005fe:	440b      	add	r3, r1
 8000600:	3309      	adds	r3, #9
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b2d      	cmp	r3, #45	; 0x2d
 8000606:	f200 809a 	bhi.w	800073e <DATA_LOGGER_Reception+0x162>
 800060a:	a201      	add	r2, pc, #4	; (adr r2, 8000610 <DATA_LOGGER_Reception+0x34>)
 800060c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000610:	080006c9 	.word	0x080006c9
 8000614:	0800073f 	.word	0x0800073f
 8000618:	0800073f 	.word	0x0800073f
 800061c:	0800073f 	.word	0x0800073f
 8000620:	0800073f 	.word	0x0800073f
 8000624:	0800073f 	.word	0x0800073f
 8000628:	0800073f 	.word	0x0800073f
 800062c:	0800073f 	.word	0x0800073f
 8000630:	0800073f 	.word	0x0800073f
 8000634:	0800073f 	.word	0x0800073f
 8000638:	0800073f 	.word	0x0800073f
 800063c:	0800073f 	.word	0x0800073f
 8000640:	0800073f 	.word	0x0800073f
 8000644:	0800073f 	.word	0x0800073f
 8000648:	0800073f 	.word	0x0800073f
 800064c:	0800073f 	.word	0x0800073f
 8000650:	0800073f 	.word	0x0800073f
 8000654:	0800073f 	.word	0x0800073f
 8000658:	0800073f 	.word	0x0800073f
 800065c:	0800073f 	.word	0x0800073f
 8000660:	0800073f 	.word	0x0800073f
 8000664:	080006f5 	.word	0x080006f5
 8000668:	0800073f 	.word	0x0800073f
 800066c:	0800073f 	.word	0x0800073f
 8000670:	0800073f 	.word	0x0800073f
 8000674:	0800073f 	.word	0x0800073f
 8000678:	0800073f 	.word	0x0800073f
 800067c:	0800073f 	.word	0x0800073f
 8000680:	0800073f 	.word	0x0800073f
 8000684:	0800073f 	.word	0x0800073f
 8000688:	0800073f 	.word	0x0800073f
 800068c:	0800073f 	.word	0x0800073f
 8000690:	0800073f 	.word	0x0800073f
 8000694:	0800073f 	.word	0x0800073f
 8000698:	0800073f 	.word	0x0800073f
 800069c:	0800073f 	.word	0x0800073f
 80006a0:	0800073f 	.word	0x0800073f
 80006a4:	0800073f 	.word	0x0800073f
 80006a8:	0800073f 	.word	0x0800073f
 80006ac:	0800073f 	.word	0x0800073f
 80006b0:	0800073f 	.word	0x0800073f
 80006b4:	0800073f 	.word	0x0800073f
 80006b8:	0800073f 	.word	0x0800073f
 80006bc:	0800073f 	.word	0x0800073f
 80006c0:	08000721 	.word	0x08000721
 80006c4:	08000703 	.word	0x08000703
	{
		case data_format_e0B_BUTTON:
			/* Link an action to each id */
			switch(id)
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
 80006ca:	2b02      	cmp	r3, #2
 80006cc:	d00d      	beq.n	80006ea <DATA_LOGGER_Reception+0x10e>
 80006ce:	2b02      	cmp	r3, #2
 80006d0:	dc0e      	bgt.n	80006f0 <DATA_LOGGER_Reception+0x114>
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d002      	beq.n	80006dc <DATA_LOGGER_Reception+0x100>
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d004      	beq.n	80006e4 <DATA_LOGGER_Reception+0x108>
			{
				default:
					break;
 80006da:	e009      	b.n	80006f0 <DATA_LOGGER_Reception+0x114>
				case data_id_eCONFIG_REQUEST:
					send_config_flag = TRUE;
 80006dc:	4b1b      	ldr	r3, [pc, #108]	; (800074c <DATA_LOGGER_Reception+0x170>)
 80006de:	2201      	movs	r2, #1
 80006e0:	701a      	strb	r2, [r3, #0]
					break;
 80006e2:	e006      	b.n	80006f2 <DATA_LOGGER_Reception+0x116>
				case data_id_eSTART_TRANSFER:
					DATA_LOGGER_Start();
 80006e4:	f7ff ff5a 	bl	800059c <DATA_LOGGER_Start>
					break;
 80006e8:	e003      	b.n	80006f2 <DATA_LOGGER_Reception+0x116>
				case data_id_eSTOP_TRANSFER:
					DATA_LOGGER_Stop();
 80006ea:	f7ff ff63 	bl	80005b4 <DATA_LOGGER_Stop>
					break;
 80006ee:	e000      	b.n	80006f2 <DATA_LOGGER_Reception+0x116>
					break;
 80006f0:	bf00      	nop
			}
			break;
 80006f2:	e025      	b.n	8000740 <DATA_LOGGER_Reception+0x164>
		case data_format_e8B_FLOAT_0D:
			break;
		case data_format_e8B_FLOAT_1D:
			break;
		case data_format_e8B_PWM:
			tmp_uint_16 = 4*input_buffer[1];
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	3301      	adds	r3, #1
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	81bb      	strh	r3, [r7, #12]
			break;
 8000700:	e01e      	b.n	8000740 <DATA_LOGGER_Reception+0x164>
		case data_format_e16B_INT16:
			tmp_int_16 = (int16_t)input_buffer[1] << 8;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	3301      	adds	r3, #1
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	021b      	lsls	r3, r3, #8
 800070a:	817b      	strh	r3, [r7, #10]
			tmp_int_16 += (int16_t)input_buffer[2];
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	3302      	adds	r3, #2
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	b29a      	uxth	r2, r3
 8000714:	897b      	ldrh	r3, [r7, #10]
 8000716:	4413      	add	r3, r2
 8000718:	b29b      	uxth	r3, r3
 800071a:	817b      	strh	r3, [r7, #10]
			switch(id)
			{
				default:
					break;
 800071c:	bf00      	nop
			}

			break;
 800071e:	e00f      	b.n	8000740 <DATA_LOGGER_Reception+0x164>
		case data_format_e16B_UINT16:
			tmp_uint_16 = (uint16_t)input_buffer[1] << 8;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	3301      	adds	r3, #1
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	b29b      	uxth	r3, r3
 8000728:	021b      	lsls	r3, r3, #8
 800072a:	81bb      	strh	r3, [r7, #12]
			tmp_uint_16 += (uint16_t)input_buffer[2];
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3302      	adds	r3, #2
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	b29a      	uxth	r2, r3
 8000734:	89bb      	ldrh	r3, [r7, #12]
 8000736:	4413      	add	r3, r2
 8000738:	81bb      	strh	r3, [r7, #12]
			switch(id)
			{
				default:
					break;
 800073a:	bf00      	nop
			}

		case data_format_e16B_FLOAT_1D:
			break;
 800073c:	e000      	b.n	8000740 <DATA_LOGGER_Reception+0x164>
		default:
			break;
 800073e:	bf00      	nop

	}
}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	2000039c 	.word	0x2000039c
 800074c:	200003ed 	.word	0x200003ed

08000750 <DATA_LOGGER_Get_Data_Value>:
 * @param id Id of the data
 * @param buffer Buffer array
 * @return Number of bytes written
 */
uint8_t DATA_LOGGER_Get_Data_Value(data_id_e id, uint8_t * buffer)
{
 8000750:	b480      	push	{r7}
 8000752:	b087      	sub	sp, #28
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	73fb      	strb	r3, [r7, #15]

	/* Local temporary variables */
	int16_t tmp_16 = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	82fb      	strh	r3, [r7, #22]
	float tmp_float = 0;
 8000760:	f04f 0300 	mov.w	r3, #0
 8000764:	613b      	str	r3, [r7, #16]

	/* First byte is reserved for the id */
	buffer[0] = id ;
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	7bfa      	ldrb	r2, [r7, #15]
 800076a:	701a      	strb	r2, [r3, #0]
	switch(data_list[id].format)
 800076c:	7bfa      	ldrb	r2, [r7, #15]
 800076e:	498f      	ldr	r1, [pc, #572]	; (80009ac <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000770:	4613      	mov	r3, r2
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	4413      	add	r3, r2
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	440b      	add	r3, r1
 800077a:	3309      	adds	r3, #9
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	3b14      	subs	r3, #20
 8000780:	2b19      	cmp	r3, #25
 8000782:	f200 80fb 	bhi.w	800097c <DATA_LOGGER_Get_Data_Value+0x22c>
 8000786:	a201      	add	r2, pc, #4	; (adr r2, 800078c <DATA_LOGGER_Get_Data_Value+0x3c>)
 8000788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800078c:	080007f5 	.word	0x080007f5
 8000790:	0800097d 	.word	0x0800097d
 8000794:	0800097d 	.word	0x0800097d
 8000798:	08000811 	.word	0x08000811
 800079c:	0800097d 	.word	0x0800097d
 80007a0:	0800097d 	.word	0x0800097d
 80007a4:	0800097d 	.word	0x0800097d
 80007a8:	0800097d 	.word	0x0800097d
 80007ac:	0800097d 	.word	0x0800097d
 80007b0:	0800097d 	.word	0x0800097d
 80007b4:	0800097d 	.word	0x0800097d
 80007b8:	0800097d 	.word	0x0800097d
 80007bc:	0800097d 	.word	0x0800097d
 80007c0:	0800097d 	.word	0x0800097d
 80007c4:	0800097d 	.word	0x0800097d
 80007c8:	0800097d 	.word	0x0800097d
 80007cc:	0800097d 	.word	0x0800097d
 80007d0:	0800097d 	.word	0x0800097d
 80007d4:	0800097d 	.word	0x0800097d
 80007d8:	0800097d 	.word	0x0800097d
 80007dc:	0800097d 	.word	0x0800097d
 80007e0:	08000841 	.word	0x08000841
 80007e4:	08000889 	.word	0x08000889
 80007e8:	080008d1 	.word	0x080008d1
 80007ec:	08000919 	.word	0x08000919
 80007f0:	0800094b 	.word	0x0800094b
	{
		case data_format_e8B:
			buffer[1] = *(uint8_t*)data_list[id].data ;
 80007f4:	7bfa      	ldrb	r2, [r7, #15]
 80007f6:	496d      	ldr	r1, [pc, #436]	; (80009ac <DATA_LOGGER_Get_Data_Value+0x25c>)
 80007f8:	4613      	mov	r3, r2
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	4413      	add	r3, r2
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	440b      	add	r3, r1
 8000802:	3304      	adds	r3, #4
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	3301      	adds	r3, #1
 800080a:	7812      	ldrb	r2, [r2, #0]
 800080c:	701a      	strb	r2, [r3, #0]
			break;
 800080e:	e0b6      	b.n	800097e <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e8B_PWM:
			break;
		case data_format_e8B_FLOAT_0D:
			tmp_float = *(float*)data_list[id].data ;
 8000810:	7bfa      	ldrb	r2, [r7, #15]
 8000812:	4966      	ldr	r1, [pc, #408]	; (80009ac <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000814:	4613      	mov	r3, r2
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	4413      	add	r3, r2
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	440b      	add	r3, r1
 800081e:	3304      	adds	r3, #4
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	613b      	str	r3, [r7, #16]
			buffer[1] = (int8_t)tmp_float;
 8000826:	edd7 7a04 	vldr	s15, [r7, #16]
 800082a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800082e:	edc7 7a01 	vstr	s15, [r7, #4]
 8000832:	793b      	ldrb	r3, [r7, #4]
 8000834:	b25a      	sxtb	r2, r3
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	3301      	adds	r3, #1
 800083a:	b2d2      	uxtb	r2, r2
 800083c:	701a      	strb	r2, [r3, #0]
			break;
 800083e:	e09e      	b.n	800097e <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e8B_FLOAT_1D:
			break;
		case data_format_e16B:
			break;
		case data_format_e16B_FLOAT_1D:
			tmp_float = *(float*)data_list[id].data;
 8000840:	7bfa      	ldrb	r2, [r7, #15]
 8000842:	495a      	ldr	r1, [pc, #360]	; (80009ac <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000844:	4613      	mov	r3, r2
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	4413      	add	r3, r2
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	440b      	add	r3, r1
 800084e:	3304      	adds	r3, #4
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 10;
 8000856:	edd7 7a04 	vldr	s15, [r7, #16]
 800085a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800085e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000862:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000866:	ee17 3a90 	vmov	r3, s15
 800086a:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 800086c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000870:	121b      	asrs	r3, r3, #8
 8000872:	b21a      	sxth	r2, r3
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	3301      	adds	r3, #1
 8000878:	b2d2      	uxtb	r2, r2
 800087a:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	3302      	adds	r3, #2
 8000880:	8afa      	ldrh	r2, [r7, #22]
 8000882:	b2d2      	uxtb	r2, r2
 8000884:	701a      	strb	r2, [r3, #0]
			break;
 8000886:	e07a      	b.n	800097e <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e16B_FLOAT_2D:
			tmp_float = *(float*)data_list[id].data;
 8000888:	7bfa      	ldrb	r2, [r7, #15]
 800088a:	4948      	ldr	r1, [pc, #288]	; (80009ac <DATA_LOGGER_Get_Data_Value+0x25c>)
 800088c:	4613      	mov	r3, r2
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	4413      	add	r3, r2
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	440b      	add	r3, r1
 8000896:	3304      	adds	r3, #4
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 100;
 800089e:	edd7 7a04 	vldr	s15, [r7, #16]
 80008a2:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80009b0 <DATA_LOGGER_Get_Data_Value+0x260>
 80008a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008ae:	ee17 3a90 	vmov	r3, s15
 80008b2:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 80008b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80008b8:	121b      	asrs	r3, r3, #8
 80008ba:	b21a      	sxth	r2, r3
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	3301      	adds	r3, #1
 80008c0:	b2d2      	uxtb	r2, r2
 80008c2:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	3302      	adds	r3, #2
 80008c8:	8afa      	ldrh	r2, [r7, #22]
 80008ca:	b2d2      	uxtb	r2, r2
 80008cc:	701a      	strb	r2, [r3, #0]
			break;
 80008ce:	e056      	b.n	800097e <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e16B_FLOAT_3D:
			tmp_float = *(float*)data_list[id].data;
 80008d0:	7bfa      	ldrb	r2, [r7, #15]
 80008d2:	4936      	ldr	r1, [pc, #216]	; (80009ac <DATA_LOGGER_Get_Data_Value+0x25c>)
 80008d4:	4613      	mov	r3, r2
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	4413      	add	r3, r2
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	440b      	add	r3, r1
 80008de:	3304      	adds	r3, #4
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 1000;
 80008e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80008ea:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80009b4 <DATA_LOGGER_Get_Data_Value+0x264>
 80008ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008f6:	ee17 3a90 	vmov	r3, s15
 80008fa:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 80008fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000900:	121b      	asrs	r3, r3, #8
 8000902:	b21a      	sxth	r2, r3
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	3301      	adds	r3, #1
 8000908:	b2d2      	uxtb	r2, r2
 800090a:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	3302      	adds	r3, #2
 8000910:	8afa      	ldrh	r2, [r7, #22]
 8000912:	b2d2      	uxtb	r2, r2
 8000914:	701a      	strb	r2, [r3, #0]
			break;
 8000916:	e032      	b.n	800097e <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e16B_UINT16:
			tmp_16 = *(uint16_t*)data_list[id].data ;
 8000918:	7bfa      	ldrb	r2, [r7, #15]
 800091a:	4924      	ldr	r1, [pc, #144]	; (80009ac <DATA_LOGGER_Get_Data_Value+0x25c>)
 800091c:	4613      	mov	r3, r2
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	4413      	add	r3, r2
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	440b      	add	r3, r1
 8000926:	3304      	adds	r3, #4
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	881b      	ldrh	r3, [r3, #0]
 800092c:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 800092e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000932:	121b      	asrs	r3, r3, #8
 8000934:	b21a      	sxth	r2, r3
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	3301      	adds	r3, #1
 800093a:	b2d2      	uxtb	r2, r2
 800093c:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	3302      	adds	r3, #2
 8000942:	8afa      	ldrh	r2, [r7, #22]
 8000944:	b2d2      	uxtb	r2, r2
 8000946:	701a      	strb	r2, [r3, #0]
			break;
 8000948:	e019      	b.n	800097e <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e16B_INT16:
			tmp_16 = *(int16_t*)data_list[id].data ;
 800094a:	7bfa      	ldrb	r2, [r7, #15]
 800094c:	4917      	ldr	r1, [pc, #92]	; (80009ac <DATA_LOGGER_Get_Data_Value+0x25c>)
 800094e:	4613      	mov	r3, r2
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	4413      	add	r3, r2
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	440b      	add	r3, r1
 8000958:	3304      	adds	r3, #4
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	881b      	ldrh	r3, [r3, #0]
 800095e:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8000960:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000964:	121b      	asrs	r3, r3, #8
 8000966:	b21a      	sxth	r2, r3
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	3301      	adds	r3, #1
 800096c:	b2d2      	uxtb	r2, r2
 800096e:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	3302      	adds	r3, #2
 8000974:	8afa      	ldrh	r2, [r7, #22]
 8000976:	b2d2      	uxtb	r2, r2
 8000978:	701a      	strb	r2, [r3, #0]
			break;
 800097a:	e000      	b.n	800097e <DATA_LOGGER_Get_Data_Value+0x22e>
		default:
			break;
 800097c:	bf00      	nop
	}
	/* Length of the data array */
	return (data_list[id].format / 20) + 1;
 800097e:	7bfa      	ldrb	r2, [r7, #15]
 8000980:	490a      	ldr	r1, [pc, #40]	; (80009ac <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000982:	4613      	mov	r3, r2
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	4413      	add	r3, r2
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	440b      	add	r3, r1
 800098c:	3309      	adds	r3, #9
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	4a09      	ldr	r2, [pc, #36]	; (80009b8 <DATA_LOGGER_Get_Data_Value+0x268>)
 8000992:	fba2 2303 	umull	r2, r3, r2, r3
 8000996:	091b      	lsrs	r3, r3, #4
 8000998:	b2db      	uxtb	r3, r3
 800099a:	3301      	adds	r3, #1
 800099c:	b2db      	uxtb	r3, r3
}
 800099e:	4618      	mov	r0, r3
 80009a0:	371c      	adds	r7, #28
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	2000039c 	.word	0x2000039c
 80009b0:	42c80000 	.word	0x42c80000
 80009b4:	447a0000 	.word	0x447a0000
 80009b8:	cccccccd 	.word	0xcccccccd

080009bc <DATA_LOGGER_Get_Data_Config>:
 * @param id Id of the data
 * @param buffer Buffer array to write the configuration into
 * @return Number of bytes we wrote in the buffer
 */
uint8_t DATA_LOGGER_Get_Data_Config(data_id_e id, uint8_t * buffer)
{
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	6039      	str	r1, [r7, #0]
 80009c6:	71fb      	strb	r3, [r7, #7]
	/* We send a configuration so it must start with 0xFF */
	buffer[0] = 0xFF;
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	22ff      	movs	r2, #255	; 0xff
 80009cc:	701a      	strb	r2, [r3, #0]
	/* Then we put the length of the name */
	buffer[1] = data_list[id].len_name;
 80009ce:	79fa      	ldrb	r2, [r7, #7]
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	1c59      	adds	r1, r3, #1
 80009d4:	4828      	ldr	r0, [pc, #160]	; (8000a78 <DATA_LOGGER_Get_Data_Config+0xbc>)
 80009d6:	4613      	mov	r3, r2
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	4413      	add	r3, r2
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	4403      	add	r3, r0
 80009e0:	3310      	adds	r3, #16
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	700b      	strb	r3, [r1, #0]
	/* Then we write the data format */
	buffer[2] = data_list[id].format;
 80009e6:	79fa      	ldrb	r2, [r7, #7]
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	1c99      	adds	r1, r3, #2
 80009ec:	4822      	ldr	r0, [pc, #136]	; (8000a78 <DATA_LOGGER_Get_Data_Config+0xbc>)
 80009ee:	4613      	mov	r3, r2
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	4413      	add	r3, r2
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	4403      	add	r3, r0
 80009f8:	3309      	adds	r3, #9
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	700b      	strb	r3, [r1, #0]
	/* Then the id of the data */
	buffer[3] = id;
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	3303      	adds	r3, #3
 8000a02:	79fa      	ldrb	r2, [r7, #7]
 8000a04:	701a      	strb	r2, [r3, #0]
	/* When the data is used as output, we add 128 to the id */
	if(data_list[id].use_format == use_format_eAS_INPUT)
 8000a06:	79fa      	ldrb	r2, [r7, #7]
 8000a08:	491b      	ldr	r1, [pc, #108]	; (8000a78 <DATA_LOGGER_Get_Data_Config+0xbc>)
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	4413      	add	r3, r2
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	440b      	add	r3, r1
 8000a14:	3311      	adds	r3, #17
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	d107      	bne.n	8000a2c <DATA_LOGGER_Get_Data_Config+0x70>
	{
		buffer[3] += 128 ;
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	3303      	adds	r3, #3
 8000a20:	781a      	ldrb	r2, [r3, #0]
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	3303      	adds	r3, #3
 8000a26:	3a80      	subs	r2, #128	; 0x80
 8000a28:	b2d2      	uxtb	r2, r2
 8000a2a:	701a      	strb	r2, [r3, #0]
	}
	/* Finally we write the name */
	memcpy(&buffer[4], data_list[id].name, data_list[id].len_name);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	1d18      	adds	r0, r3, #4
 8000a30:	79fa      	ldrb	r2, [r7, #7]
 8000a32:	4911      	ldr	r1, [pc, #68]	; (8000a78 <DATA_LOGGER_Get_Data_Config+0xbc>)
 8000a34:	4613      	mov	r3, r2
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	4413      	add	r3, r2
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	440b      	add	r3, r1
 8000a3e:	330c      	adds	r3, #12
 8000a40:	6819      	ldr	r1, [r3, #0]
 8000a42:	79fa      	ldrb	r2, [r7, #7]
 8000a44:	4c0c      	ldr	r4, [pc, #48]	; (8000a78 <DATA_LOGGER_Get_Data_Config+0xbc>)
 8000a46:	4613      	mov	r3, r2
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	4413      	add	r3, r2
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	4423      	add	r3, r4
 8000a50:	3310      	adds	r3, #16
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	461a      	mov	r2, r3
 8000a56:	f006 fb53 	bl	8007100 <memcpy>

	return 4 + data_list[id].len_name ;
 8000a5a:	79fa      	ldrb	r2, [r7, #7]
 8000a5c:	4906      	ldr	r1, [pc, #24]	; (8000a78 <DATA_LOGGER_Get_Data_Config+0xbc>)
 8000a5e:	4613      	mov	r3, r2
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	4413      	add	r3, r2
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	440b      	add	r3, r1
 8000a68:	3310      	adds	r3, #16
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	3304      	adds	r3, #4
 8000a6e:	b2db      	uxtb	r3, r3
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd90      	pop	{r4, r7, pc}
 8000a78:	2000039c 	.word	0x2000039c

08000a7c <DATA_LOGGER_Get_Data>:
 * @brief Get data
 * @param id Id of the data
 * @return pointer to the data structure with the corresponding ID
 */
data_t * DATA_LOGGER_Get_Data(data_id_e id)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]
	return &data_list[id];
 8000a86:	79fa      	ldrb	r2, [r7, #7]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	4413      	add	r3, r2
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	4a03      	ldr	r2, [pc, #12]	; (8000aa0 <DATA_LOGGER_Get_Data+0x24>)
 8000a92:	4413      	add	r3, r2
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	2000039c 	.word	0x2000039c

08000aa4 <push_data_to_uart>:
 * @brief Add the start byte and checksum to a message
 * @param buffer Data array to send
 * @param len Number of bytes to send
 */
void push_data_to_uart(uint8_t * buffer, uint8_t len)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b090      	sub	sp, #64	; 0x40
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	460b      	mov	r3, r1
 8000aae:	70fb      	strb	r3, [r7, #3]
	uint8_t buffer_new[50];
	uint32_t checksum = 0 ;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
	buffer_new[0] = '$';
 8000ab4:	2324      	movs	r3, #36	; 0x24
 8000ab6:	723b      	strb	r3, [r7, #8]
	for(uint8_t b = 0; b < len; b++)
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8000abe:	e01d      	b.n	8000afc <push_data_to_uart+0x58>
	{
		buffer_new[1 + b] = buffer[b];
 8000ac0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	441a      	add	r2, r3
 8000ac8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000acc:	3301      	adds	r3, #1
 8000ace:	7812      	ldrb	r2, [r2, #0]
 8000ad0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000ad4:	440b      	add	r3, r1
 8000ad6:	f803 2c38 	strb.w	r2, [r3, #-56]
		checksum += (uint32_t)buffer_new[1 + b];
 8000ada:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000ade:	3301      	adds	r3, #1
 8000ae0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000ae4:	4413      	add	r3, r2
 8000ae6:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8000aea:	461a      	mov	r2, r3
 8000aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000aee:	4413      	add	r3, r2
 8000af0:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(uint8_t b = 0; b < len; b++)
 8000af2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000af6:	3301      	adds	r3, #1
 8000af8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8000afc:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8000b00:	78fb      	ldrb	r3, [r7, #3]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d3dc      	bcc.n	8000ac0 <push_data_to_uart+0x1c>
	}
	buffer_new[1 + len] = (uint8_t)(checksum % 256) ;
 8000b06:	78fb      	ldrb	r3, [r7, #3]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000b0c:	b2d2      	uxtb	r2, r2
 8000b0e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000b12:	440b      	add	r3, r1
 8000b14:	f803 2c38 	strb.w	r2, [r3, #-56]
	UART_Transmit(uart_eTELEMETRY, buffer_new, len+2);
 8000b18:	78fb      	ldrb	r3, [r7, #3]
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	3302      	adds	r3, #2
 8000b1e:	b29a      	uxth	r2, r3
 8000b20:	f107 0308 	add.w	r3, r7, #8
 8000b24:	4619      	mov	r1, r3
 8000b26:	2000      	movs	r0, #0
 8000b28:	f000 ffd6 	bl	8001ad8 <UART_Transmit>
}
 8000b2c:	bf00      	nop
 8000b2e:	3740      	adds	r7, #64	; 0x40
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <state_machine>:

/*
 * @brief data logger state machine
 */
static void state_machine(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
	static data_logger_state_e state = data_logger_state_eIDLE;
	static data_logger_state_e previous_state = data_logger_state_eTRANSMIT_CONFIG ;
	bool_e entrance = previous_state != state ;
 8000b3a:	4b74      	ldr	r3, [pc, #464]	; (8000d0c <state_machine+0x1d8>)
 8000b3c:	781a      	ldrb	r2, [r3, #0]
 8000b3e:	4b74      	ldr	r3, [pc, #464]	; (8000d10 <state_machine+0x1dc>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	bf14      	ite	ne
 8000b46:	2301      	movne	r3, #1
 8000b48:	2300      	moveq	r3, #0
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	71bb      	strb	r3, [r7, #6]
	previous_state = state ;
 8000b4e:	4b70      	ldr	r3, [pc, #448]	; (8000d10 <state_machine+0x1dc>)
 8000b50:	781a      	ldrb	r2, [r3, #0]
 8000b52:	4b6e      	ldr	r3, [pc, #440]	; (8000d0c <state_machine+0x1d8>)
 8000b54:	701a      	strb	r2, [r3, #0]
	switch(state)
 8000b56:	4b6e      	ldr	r3, [pc, #440]	; (8000d10 <state_machine+0x1dc>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b02      	cmp	r3, #2
 8000b5c:	f000 8092 	beq.w	8000c84 <state_machine+0x150>
 8000b60:	2b02      	cmp	r3, #2
 8000b62:	f300 80ce 	bgt.w	8000d02 <state_machine+0x1ce>
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d002      	beq.n	8000b70 <state_machine+0x3c>
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d043      	beq.n	8000bf6 <state_machine+0xc2>
					push_data_to_uart(tmp, tmp_len);
				}
			}
			break;
	}
}
 8000b6e:	e0c8      	b.n	8000d02 <state_machine+0x1ce>
			if(entrance)
 8000b70:	79bb      	ldrb	r3, [r7, #6]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d003      	beq.n	8000b7e <state_machine+0x4a>
				SCHEDULER_reschedule_task(task_ids_eDATA_LOGGER, PERIODE_PING);
 8000b76:	4967      	ldr	r1, [pc, #412]	; (8000d14 <state_machine+0x1e0>)
 8000b78:	2002      	movs	r0, #2
 8000b7a:	f000 fb25 	bl	80011c8 <SCHEDULER_reschedule_task>
			tmp_len = DATA_LOGGER_Get_Data_Config(data_id_eCONFIG_REQUEST, tmp);
 8000b7e:	4966      	ldr	r1, [pc, #408]	; (8000d18 <state_machine+0x1e4>)
 8000b80:	2000      	movs	r0, #0
 8000b82:	f7ff ff1b 	bl	80009bc <DATA_LOGGER_Get_Data_Config>
 8000b86:	4603      	mov	r3, r0
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b64      	ldr	r3, [pc, #400]	; (8000d1c <state_machine+0x1e8>)
 8000b8c:	701a      	strb	r2, [r3, #0]
			push_data_to_uart(tmp, tmp_len);
 8000b8e:	4b63      	ldr	r3, [pc, #396]	; (8000d1c <state_machine+0x1e8>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	4619      	mov	r1, r3
 8000b94:	4860      	ldr	r0, [pc, #384]	; (8000d18 <state_machine+0x1e4>)
 8000b96:	f7ff ff85 	bl	8000aa4 <push_data_to_uart>
			if(send_config_flag)
 8000b9a:	4b61      	ldr	r3, [pc, #388]	; (8000d20 <state_machine+0x1ec>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d01a      	beq.n	8000bd8 <state_machine+0xa4>
				start_flag = FALSE;
 8000ba2:	4b60      	ldr	r3, [pc, #384]	; (8000d24 <state_machine+0x1f0>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	701a      	strb	r2, [r3, #0]
				stop_flag = FALSE;
 8000ba8:	4b5f      	ldr	r3, [pc, #380]	; (8000d28 <state_machine+0x1f4>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	701a      	strb	r2, [r3, #0]
				send_config_flag = FALSE;
 8000bae:	4b5c      	ldr	r3, [pc, #368]	; (8000d20 <state_machine+0x1ec>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	701a      	strb	r2, [r3, #0]
				if(config_not_sent)
 8000bb4:	4b5d      	ldr	r3, [pc, #372]	; (8000d2c <state_machine+0x1f8>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d009      	beq.n	8000bd0 <state_machine+0x9c>
					id_init_counter = 0;
 8000bbc:	4b5c      	ldr	r3, [pc, #368]	; (8000d30 <state_machine+0x1fc>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
					is_any_data_used = FALSE;
 8000bc2:	4b5c      	ldr	r3, [pc, #368]	; (8000d34 <state_machine+0x200>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
					state = data_logger_state_eTRANSMIT_CONFIG;
 8000bc8:	4b51      	ldr	r3, [pc, #324]	; (8000d10 <state_machine+0x1dc>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	701a      	strb	r2, [r3, #0]
			break;
 8000bce:	e097      	b.n	8000d00 <state_machine+0x1cc>
					state = data_logger_state_eLOG;
 8000bd0:	4b4f      	ldr	r3, [pc, #316]	; (8000d10 <state_machine+0x1dc>)
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	701a      	strb	r2, [r3, #0]
			break;
 8000bd6:	e093      	b.n	8000d00 <state_machine+0x1cc>
			else if(start_flag)
 8000bd8:	4b52      	ldr	r3, [pc, #328]	; (8000d24 <state_machine+0x1f0>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	f000 808f 	beq.w	8000d00 <state_machine+0x1cc>
				start_flag = FALSE;
 8000be2:	4b50      	ldr	r3, [pc, #320]	; (8000d24 <state_machine+0x1f0>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	701a      	strb	r2, [r3, #0]
				stop_flag = FALSE;
 8000be8:	4b4f      	ldr	r3, [pc, #316]	; (8000d28 <state_machine+0x1f4>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	701a      	strb	r2, [r3, #0]
				state = data_logger_state_eLOG;
 8000bee:	4b48      	ldr	r3, [pc, #288]	; (8000d10 <state_machine+0x1dc>)
 8000bf0:	2202      	movs	r2, #2
 8000bf2:	701a      	strb	r2, [r3, #0]
			break;
 8000bf4:	e084      	b.n	8000d00 <state_machine+0x1cc>
			if(entrance)
 8000bf6:	79bb      	ldrb	r3, [r7, #6]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d00a      	beq.n	8000c12 <state_machine+0xde>
				SCHEDULER_reschedule_task(task_ids_eDATA_LOGGER, PERIODE_CONFIG_SEND);
 8000bfc:	494e      	ldr	r1, [pc, #312]	; (8000d38 <state_machine+0x204>)
 8000bfe:	2002      	movs	r0, #2
 8000c00:	f000 fae2 	bl	80011c8 <SCHEDULER_reschedule_task>
			while(data_list[id_init_counter].use_format == use_format_eNOT_USED && id_init_counter < data_id_eCOUNT)
 8000c04:	e005      	b.n	8000c12 <state_machine+0xde>
				id_init_counter ++ ;
 8000c06:	4b4a      	ldr	r3, [pc, #296]	; (8000d30 <state_machine+0x1fc>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	4b48      	ldr	r3, [pc, #288]	; (8000d30 <state_machine+0x1fc>)
 8000c10:	701a      	strb	r2, [r3, #0]
			while(data_list[id_init_counter].use_format == use_format_eNOT_USED && id_init_counter < data_id_eCOUNT)
 8000c12:	4b47      	ldr	r3, [pc, #284]	; (8000d30 <state_machine+0x1fc>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	4619      	mov	r1, r3
 8000c18:	4a48      	ldr	r2, [pc, #288]	; (8000d3c <state_machine+0x208>)
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	440b      	add	r3, r1
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	4413      	add	r3, r2
 8000c24:	3311      	adds	r3, #17
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d103      	bne.n	8000c34 <state_machine+0x100>
 8000c2c:	4b40      	ldr	r3, [pc, #256]	; (8000d30 <state_machine+0x1fc>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b03      	cmp	r3, #3
 8000c32:	d9e8      	bls.n	8000c06 <state_machine+0xd2>
			if(id_init_counter < data_id_eCOUNT)
 8000c34:	4b3e      	ldr	r3, [pc, #248]	; (8000d30 <state_machine+0x1fc>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b03      	cmp	r3, #3
 8000c3a:	d817      	bhi.n	8000c6c <state_machine+0x138>
				is_any_data_used = TRUE;
 8000c3c:	4b3d      	ldr	r3, [pc, #244]	; (8000d34 <state_machine+0x200>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	701a      	strb	r2, [r3, #0]
				tmp_len = DATA_LOGGER_Get_Data_Config(id_init_counter++, tmp);
 8000c42:	4b3b      	ldr	r3, [pc, #236]	; (8000d30 <state_machine+0x1fc>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	1c5a      	adds	r2, r3, #1
 8000c48:	b2d1      	uxtb	r1, r2
 8000c4a:	4a39      	ldr	r2, [pc, #228]	; (8000d30 <state_machine+0x1fc>)
 8000c4c:	7011      	strb	r1, [r2, #0]
 8000c4e:	4932      	ldr	r1, [pc, #200]	; (8000d18 <state_machine+0x1e4>)
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff feb3 	bl	80009bc <DATA_LOGGER_Get_Data_Config>
 8000c56:	4603      	mov	r3, r0
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4b30      	ldr	r3, [pc, #192]	; (8000d1c <state_machine+0x1e8>)
 8000c5c:	701a      	strb	r2, [r3, #0]
				push_data_to_uart(tmp, tmp_len);
 8000c5e:	4b2f      	ldr	r3, [pc, #188]	; (8000d1c <state_machine+0x1e8>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	4619      	mov	r1, r3
 8000c64:	482c      	ldr	r0, [pc, #176]	; (8000d18 <state_machine+0x1e4>)
 8000c66:	f7ff ff1d 	bl	8000aa4 <push_data_to_uart>
			break;
 8000c6a:	e04a      	b.n	8000d02 <state_machine+0x1ce>
				if(is_any_data_used)
 8000c6c:	4b31      	ldr	r3, [pc, #196]	; (8000d34 <state_machine+0x200>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d003      	beq.n	8000c7c <state_machine+0x148>
					state = data_logger_state_eLOG ;
 8000c74:	4b26      	ldr	r3, [pc, #152]	; (8000d10 <state_machine+0x1dc>)
 8000c76:	2202      	movs	r2, #2
 8000c78:	701a      	strb	r2, [r3, #0]
			break;
 8000c7a:	e042      	b.n	8000d02 <state_machine+0x1ce>
					state = data_logger_state_eIDLE ;
 8000c7c:	4b24      	ldr	r3, [pc, #144]	; (8000d10 <state_machine+0x1dc>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	701a      	strb	r2, [r3, #0]
			break;
 8000c82:	e03e      	b.n	8000d02 <state_machine+0x1ce>
			if(entrance)
 8000c84:	79bb      	ldrb	r3, [r7, #6]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d004      	beq.n	8000c94 <state_machine+0x160>
				SCHEDULER_reschedule_task(task_ids_eDATA_LOGGER, PERIODE_SEND);
 8000c8a:	f242 7110 	movw	r1, #10000	; 0x2710
 8000c8e:	2002      	movs	r0, #2
 8000c90:	f000 fa9a 	bl	80011c8 <SCHEDULER_reschedule_task>
			if(stop_flag)
 8000c94:	4b24      	ldr	r3, [pc, #144]	; (8000d28 <state_machine+0x1f4>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d002      	beq.n	8000ca2 <state_machine+0x16e>
				state = data_logger_state_eIDLE;
 8000c9c:	4b1c      	ldr	r3, [pc, #112]	; (8000d10 <state_machine+0x1dc>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	701a      	strb	r2, [r3, #0]
			for(uint8_t d = 0; d < data_id_eCOUNT; d++)
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	71fb      	strb	r3, [r7, #7]
 8000ca6:	e027      	b.n	8000cf8 <state_machine+0x1c4>
				if(data_list[d].use_format == use_format_eAS_OUTPUT && (data_list[d].data != NULL))
 8000ca8:	79fa      	ldrb	r2, [r7, #7]
 8000caa:	4924      	ldr	r1, [pc, #144]	; (8000d3c <state_machine+0x208>)
 8000cac:	4613      	mov	r3, r2
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	4413      	add	r3, r2
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	440b      	add	r3, r1
 8000cb6:	3311      	adds	r3, #17
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d119      	bne.n	8000cf2 <state_machine+0x1be>
 8000cbe:	79fa      	ldrb	r2, [r7, #7]
 8000cc0:	491e      	ldr	r1, [pc, #120]	; (8000d3c <state_machine+0x208>)
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	4413      	add	r3, r2
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	440b      	add	r3, r1
 8000ccc:	3304      	adds	r3, #4
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d00e      	beq.n	8000cf2 <state_machine+0x1be>
					tmp_len = DATA_LOGGER_Get_Data_Value(d, tmp);
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	4910      	ldr	r1, [pc, #64]	; (8000d18 <state_machine+0x1e4>)
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fd39 	bl	8000750 <DATA_LOGGER_Get_Data_Value>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <state_machine+0x1e8>)
 8000ce4:	701a      	strb	r2, [r3, #0]
					push_data_to_uart(tmp, tmp_len);
 8000ce6:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <state_machine+0x1e8>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	4619      	mov	r1, r3
 8000cec:	480a      	ldr	r0, [pc, #40]	; (8000d18 <state_machine+0x1e4>)
 8000cee:	f7ff fed9 	bl	8000aa4 <push_data_to_uart>
			for(uint8_t d = 0; d < data_id_eCOUNT; d++)
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	71fb      	strb	r3, [r7, #7]
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	2b03      	cmp	r3, #3
 8000cfc:	d9d4      	bls.n	8000ca8 <state_machine+0x174>
			break;
 8000cfe:	e000      	b.n	8000d02 <state_machine+0x1ce>
			break;
 8000d00:	bf00      	nop
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000001 	.word	0x20000001
 8000d10:	20000425 	.word	0x20000425
 8000d14:	0007a120 	.word	0x0007a120
 8000d18:	200003f0 	.word	0x200003f0
 8000d1c:	20000422 	.word	0x20000422
 8000d20:	200003ed 	.word	0x200003ed
 8000d24:	200003ec 	.word	0x200003ec
 8000d28:	200003ee 	.word	0x200003ee
 8000d2c:	20000000 	.word	0x20000000
 8000d30:	20000423 	.word	0x20000423
 8000d34:	20000424 	.word	0x20000424
 8000d38:	000186a0 	.word	0x000186a0
 8000d3c:	2000039c 	.word	0x2000039c

08000d40 <parse_uart>:

/*
 * @brief Parse incoming bytes
 */
static void parse_uart(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
	static uint8_t trame[20] = { 0 };
	static uint8_t nb_byte_to_buffer = 0;
	static uint8_t buffer_counter = 0;
	static uint16_t checksum = 0;
	/* Check for available data */
	if(UART_Availables(uart_eTELEMETRY))
 8000d46:	2000      	movs	r0, #0
 8000d48:	f000 fe22 	bl	8001990 <UART_Availables>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d06c      	beq.n	8000e2c <parse_uart+0xec>
	{
		uint8_t c;
		UART_Get(uart_eTELEMETRY, &c);
 8000d52:	1dfb      	adds	r3, r7, #7
 8000d54:	4619      	mov	r1, r3
 8000d56:	2000      	movs	r0, #0
 8000d58:	f000 fe28 	bl	80019ac <UART_Get>
		switch(state)
 8000d5c:	4b35      	ldr	r3, [pc, #212]	; (8000e34 <parse_uart+0xf4>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b03      	cmp	r3, #3
 8000d62:	d863      	bhi.n	8000e2c <parse_uart+0xec>
 8000d64:	a201      	add	r2, pc, #4	; (adr r2, 8000d6c <parse_uart+0x2c>)
 8000d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d6a:	bf00      	nop
 8000d6c:	08000d7d 	.word	0x08000d7d
 8000d70:	08000d8b 	.word	0x08000d8b
 8000d74:	08000dd1 	.word	0x08000dd1
 8000d78:	08000e09 	.word	0x08000e09
		{
			case parser_state_eSTART_BYTE:
				if(c == '$')
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	2b24      	cmp	r3, #36	; 0x24
 8000d80:	d14f      	bne.n	8000e22 <parse_uart+0xe2>
				{
					state = parser_state_eID;
 8000d82:	4b2c      	ldr	r3, [pc, #176]	; (8000e34 <parse_uart+0xf4>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000d88:	e04b      	b.n	8000e22 <parse_uart+0xe2>

			case parser_state_eID:
				if(c < data_id_eCOUNT)
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	2b03      	cmp	r3, #3
 8000d8e:	d84a      	bhi.n	8000e26 <parse_uart+0xe6>
				{
					/* Store the id for later use */
					trame[0] = c;
 8000d90:	79fa      	ldrb	r2, [r7, #7]
 8000d92:	4b29      	ldr	r3, [pc, #164]	; (8000e38 <parse_uart+0xf8>)
 8000d94:	701a      	strb	r2, [r3, #0]
					/* Reset the checksum */
					checksum = c;
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	4b28      	ldr	r3, [pc, #160]	; (8000e3c <parse_uart+0xfc>)
 8000d9c:	801a      	strh	r2, [r3, #0]
					/* Get the data length according to the data format */
					nb_byte_to_buffer = (DATA_LOGGER_Get_Data(c)->format / 20);
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fe6b 	bl	8000a7c <DATA_LOGGER_Get_Data>
 8000da6:	4603      	mov	r3, r0
 8000da8:	7a5b      	ldrb	r3, [r3, #9]
 8000daa:	4a25      	ldr	r2, [pc, #148]	; (8000e40 <parse_uart+0x100>)
 8000dac:	fba2 2303 	umull	r2, r3, r2, r3
 8000db0:	091b      	lsrs	r3, r3, #4
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	4b23      	ldr	r3, [pc, #140]	; (8000e44 <parse_uart+0x104>)
 8000db6:	701a      	strb	r2, [r3, #0]
					if(nb_byte_to_buffer)
 8000db8:	4b22      	ldr	r3, [pc, #136]	; (8000e44 <parse_uart+0x104>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d003      	beq.n	8000dc8 <parse_uart+0x88>
					{
						state = parser_state_eDATA;
 8000dc0:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <parse_uart+0xf4>)
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	701a      	strb	r2, [r3, #0]
					else
					{
						state = parser_state_eCHECKSUM;
					}
				}
				break;
 8000dc6:	e02e      	b.n	8000e26 <parse_uart+0xe6>
						state = parser_state_eCHECKSUM;
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <parse_uart+0xf4>)
 8000dca:	2203      	movs	r2, #3
 8000dcc:	701a      	strb	r2, [r3, #0]
				break;
 8000dce:	e02a      	b.n	8000e26 <parse_uart+0xe6>
			case parser_state_eDATA:
				trame[1+buffer_counter++] = c;
 8000dd0:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <parse_uart+0x108>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	1c5a      	adds	r2, r3, #1
 8000dd6:	b2d1      	uxtb	r1, r2
 8000dd8:	4a1b      	ldr	r2, [pc, #108]	; (8000e48 <parse_uart+0x108>)
 8000dda:	7011      	strb	r1, [r2, #0]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	79f9      	ldrb	r1, [r7, #7]
 8000de0:	4a15      	ldr	r2, [pc, #84]	; (8000e38 <parse_uart+0xf8>)
 8000de2:	54d1      	strb	r1, [r2, r3]
				checksum += c;
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <parse_uart+0xfc>)
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	4413      	add	r3, r2
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <parse_uart+0xfc>)
 8000df2:	801a      	strh	r2, [r3, #0]
				if(buffer_counter == nb_byte_to_buffer)
 8000df4:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <parse_uart+0x108>)
 8000df6:	781a      	ldrb	r2, [r3, #0]
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <parse_uart+0x104>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d114      	bne.n	8000e2a <parse_uart+0xea>
				{
					state = parser_state_eCHECKSUM;
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <parse_uart+0xf4>)
 8000e02:	2203      	movs	r2, #3
 8000e04:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000e06:	e010      	b.n	8000e2a <parse_uart+0xea>
			case parser_state_eCHECKSUM:
				if(checksum == c)
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <parse_uart+0xfc>)
 8000e0e:	881b      	ldrh	r3, [r3, #0]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d102      	bne.n	8000e1a <parse_uart+0xda>
				{
					DATA_LOGGER_Reception(trame);
 8000e14:	4808      	ldr	r0, [pc, #32]	; (8000e38 <parse_uart+0xf8>)
 8000e16:	f7ff fbe1 	bl	80005dc <DATA_LOGGER_Reception>
				}
				state = parser_state_eSTART_BYTE;
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <parse_uart+0xf4>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	701a      	strb	r2, [r3, #0]
				break;
 8000e20:	e004      	b.n	8000e2c <parse_uart+0xec>
				break;
 8000e22:	bf00      	nop
 8000e24:	e002      	b.n	8000e2c <parse_uart+0xec>
				break;
 8000e26:	bf00      	nop
 8000e28:	e000      	b.n	8000e2c <parse_uart+0xec>
				break;
 8000e2a:	bf00      	nop


		}
	}

}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000426 	.word	0x20000426
 8000e38:	20000428 	.word	0x20000428
 8000e3c:	2000043c 	.word	0x2000043c
 8000e40:	cccccccd 	.word	0xcccccccd
 8000e44:	2000043e 	.word	0x2000043e
 8000e48:	2000043f 	.word	0x2000043f

08000e4c <EVENT_process>:

/*
 * @brief check if any event has been triggered
 * @param test_all False to test only low level events
 */
void EVENT_process(bool_e test_all){
 8000e4c:	b590      	push	{r4, r7, lr}
 8000e4e:	b087      	sub	sp, #28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	71fb      	strb	r3, [r7, #7]
	if(new_flag)
 8000e56:	4b42      	ldr	r3, [pc, #264]	; (8000f60 <EVENT_process+0x114>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d07a      	beq.n	8000f56 <EVENT_process+0x10a>
	{
		new_flag = FALSE;
 8000e60:	4b3f      	ldr	r3, [pc, #252]	; (8000f60 <EVENT_process+0x114>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	701a      	strb	r2, [r3, #0]
		/* Number of events to test */
		uint8_t max = EVENT_LOW_LVL_COUNT ;
 8000e66:	2300      	movs	r3, #0
 8000e68:	75fb      	strb	r3, [r7, #23]
		if(test_all)
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <EVENT_process+0x28>
		{
			max = EVENT_COUNT ;
 8000e70:	2301      	movs	r3, #1
 8000e72:	75fb      	strb	r3, [r7, #23]
		}

		/* For each events */
		for(uint32_t e = 0; e < max; e ++)
 8000e74:	2300      	movs	r3, #0
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	e069      	b.n	8000f4e <EVENT_process+0x102>
		{

			uint32_t m = 0 ;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
			bool_e function_did_run_once = FALSE ;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	72fb      	strb	r3, [r7, #11]

			/* For each masks */
			while(m < events_main[e].nb_mask && !function_did_run_once && events_main[e].state == event_state_eENABLED)
 8000e82:	e049      	b.n	8000f18 <EVENT_process+0xcc>
			{
				if(Mask_test_and(events_main[e].mask_and[m], flags))			/* Mask "and" test */
 8000e84:	4837      	ldr	r0, [pc, #220]	; (8000f64 <EVENT_process+0x118>)
 8000e86:	4938      	ldr	r1, [pc, #224]	; (8000f68 <EVENT_process+0x11c>)
 8000e88:	68fa      	ldr	r2, [r7, #12]
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	00d2      	lsls	r2, r2, #3
 8000e8e:	24b4      	movs	r4, #180	; 0xb4
 8000e90:	fb04 f303 	mul.w	r3, r4, r3
 8000e94:	4413      	add	r3, r2
 8000e96:	4419      	add	r1, r3
 8000e98:	e890 000c 	ldmia.w	r0, {r2, r3}
 8000e9c:	c903      	ldmia	r1, {r0, r1}
 8000e9e:	f000 f865 	bl	8000f6c <Mask_test_and>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d034      	beq.n	8000f12 <EVENT_process+0xc6>
				{
					if(Mask_test_or(events_main[e].mask_or[m], flags))			/* Mask "or" test */
 8000ea8:	482e      	ldr	r0, [pc, #184]	; (8000f64 <EVENT_process+0x118>)
 8000eaa:	492f      	ldr	r1, [pc, #188]	; (8000f68 <EVENT_process+0x11c>)
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	1dda      	adds	r2, r3, #7
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	00d2      	lsls	r2, r2, #3
 8000eb4:	24b4      	movs	r4, #180	; 0xb4
 8000eb6:	fb04 f303 	mul.w	r3, r4, r3
 8000eba:	4413      	add	r3, r2
 8000ebc:	4419      	add	r1, r3
 8000ebe:	e890 000c 	ldmia.w	r0, {r2, r3}
 8000ec2:	c903      	ldmia	r1, {r0, r1}
 8000ec4:	f000 f885 	bl	8000fd2 <Mask_test_or>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d021      	beq.n	8000f12 <EVENT_process+0xc6>
					{
						if(!Mask_test_or(events_main[e].mask_not[m], flags))	/* Mask "not" test */
 8000ece:	4825      	ldr	r0, [pc, #148]	; (8000f64 <EVENT_process+0x118>)
 8000ed0:	4925      	ldr	r1, [pc, #148]	; (8000f68 <EVENT_process+0x11c>)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f103 020e 	add.w	r2, r3, #14
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	00d2      	lsls	r2, r2, #3
 8000edc:	24b4      	movs	r4, #180	; 0xb4
 8000ede:	fb04 f303 	mul.w	r3, r4, r3
 8000ee2:	4413      	add	r3, r2
 8000ee4:	4419      	add	r1, r3
 8000ee6:	e890 000c 	ldmia.w	r0, {r2, r3}
 8000eea:	c903      	ldmia	r1, {r0, r1}
 8000eec:	f000 f871 	bl	8000fd2 <Mask_test_or>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d10d      	bne.n	8000f12 <EVENT_process+0xc6>
						{
							events_main[e].function(m);
 8000ef6:	4a1c      	ldr	r2, [pc, #112]	; (8000f68 <EVENT_process+0x11c>)
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	21b4      	movs	r1, #180	; 0xb4
 8000efc:	fb01 f303 	mul.w	r3, r1, r3
 8000f00:	4413      	add	r3, r2
 8000f02:	33b0      	adds	r3, #176	; 0xb0
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	4610      	mov	r0, r2
 8000f0c:	4798      	blx	r3
							function_did_run_once = TRUE ;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	72fb      	strb	r3, [r7, #11]
						}
					}
				}
				m++ ;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	3301      	adds	r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
			while(m < events_main[e].nb_mask && !function_did_run_once && events_main[e].state == event_state_eENABLED)
 8000f18:	4a13      	ldr	r2, [pc, #76]	; (8000f68 <EVENT_process+0x11c>)
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	21b4      	movs	r1, #180	; 0xb4
 8000f1e:	fb01 f303 	mul.w	r3, r1, r3
 8000f22:	4413      	add	r3, r2
 8000f24:	33a8      	adds	r3, #168	; 0xa8
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	68fa      	ldr	r2, [r7, #12]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d20c      	bcs.n	8000f48 <EVENT_process+0xfc>
 8000f2e:	7afb      	ldrb	r3, [r7, #11]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d109      	bne.n	8000f48 <EVENT_process+0xfc>
 8000f34:	4a0c      	ldr	r2, [pc, #48]	; (8000f68 <EVENT_process+0x11c>)
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	21b4      	movs	r1, #180	; 0xb4
 8000f3a:	fb01 f303 	mul.w	r3, r1, r3
 8000f3e:	4413      	add	r3, r2
 8000f40:	33ac      	adds	r3, #172	; 0xac
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d09d      	beq.n	8000e84 <EVENT_process+0x38>
		for(uint32_t e = 0; e < max; e ++)
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	613b      	str	r3, [r7, #16]
 8000f4e:	7dfb      	ldrb	r3, [r7, #23]
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d391      	bcc.n	8000e7a <EVENT_process+0x2e>
			}
		}
	}
}
 8000f56:	bf00      	nop
 8000f58:	371c      	adds	r7, #28
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd90      	pop	{r4, r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000448 	.word	0x20000448
 8000f64:	20000440 	.word	0x20000440
 8000f68:	2000044c 	.word	0x2000044c

08000f6c <Mask_test_and>:
 * @param mask_test The test mask
 * @param mask_ref The ref mask
 * @return True ...
 */
bool_e Mask_test_and(Mask_t mask_test, Mask_t mask_ref)
{
 8000f6c:	b490      	push	{r4, r7}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	f107 0408 	add.w	r4, r7, #8
 8000f76:	e884 0003 	stmia.w	r4, {r0, r1}
 8000f7a:	4639      	mov	r1, r7
 8000f7c:	e881 000c 	stmia.w	r1, {r2, r3}
	for(uint32_t m = 0; m < NB_ARRAY_MASK; m++)
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	e01c      	b.n	8000fc0 <Mask_test_and+0x54>
	{
		if((mask_test.array[m] & mask_ref.array[m]) != mask_test.array[m])
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	f107 0218 	add.w	r2, r7, #24
 8000f8e:	4413      	add	r3, r2
 8000f90:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	f107 0118 	add.w	r1, r7, #24
 8000f9c:	440b      	add	r3, r1
 8000f9e:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	f107 0118 	add.w	r1, r7, #24
 8000fac:	440b      	add	r3, r1
 8000fae:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d001      	beq.n	8000fba <Mask_test_and+0x4e>
		{
			return FALSE ;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e006      	b.n	8000fc8 <Mask_test_and+0x5c>
	for(uint32_t m = 0; m < NB_ARRAY_MASK; m++)
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d9df      	bls.n	8000f86 <Mask_test_and+0x1a>
		}
	}
	return TRUE ;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc90      	pop	{r4, r7}
 8000fd0:	4770      	bx	lr

08000fd2 <Mask_test_or>:
 * @brief Check if one of the bit in the ref_mask is in the test_mask
 * @param mask_test The test mask
 * @param mask_ref The ref mask
 * @return True if we found one corresponding bit
 */
bool_e Mask_test_or(Mask_t mask_test, Mask_t mask_ref){
 8000fd2:	b490      	push	{r4, r7}
 8000fd4:	b086      	sub	sp, #24
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	f107 0408 	add.w	r4, r7, #8
 8000fdc:	e884 0003 	stmia.w	r4, {r0, r1}
 8000fe0:	4639      	mov	r1, r7
 8000fe2:	e881 000c 	stmia.w	r1, {r2, r3}
	bool_e to_return = FALSE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	75fb      	strb	r3, [r7, #23]
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	e015      	b.n	800101c <Mask_test_or+0x4a>
	{
		if(mask_test.array[m] & mask_ref.array[m])
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	f107 0218 	add.w	r2, r7, #24
 8000ff8:	4413      	add	r3, r2
 8000ffa:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	f107 0118 	add.w	r1, r7, #24
 8001006:	440b      	add	r3, r1
 8001008:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800100c:	4013      	ands	r3, r2
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <Mask_test_or+0x44>
		{
			to_return = TRUE;
 8001012:	2301      	movs	r3, #1
 8001014:	75fb      	strb	r3, [r7, #23]
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	3301      	adds	r3, #1
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	2b01      	cmp	r3, #1
 8001020:	dde6      	ble.n	8000ff0 <Mask_test_or+0x1e>
		}
	}
	return to_return ;
 8001022:	7dfb      	ldrb	r3, [r7, #23]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bc90      	pop	{r4, r7}
 800102c:	4770      	bx	lr
	...

08001030 <SCHEDULER_init>:
/*
 * @brief Must be called after TASK_init function
 * 	      Store the pointer to the scheduler and event task to buy time
 */
void SCHEDULER_init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	task_scheduler = TASK_get_task(task_ids_eSCHEDULER);
 8001034:	2000      	movs	r0, #0
 8001036:	f000 fb05 	bl	8001644 <TASK_get_task>
 800103a:	4603      	mov	r3, r0
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <SCHEDULER_init+0x20>)
 800103e:	6013      	str	r3, [r2, #0]
	task_event = TASK_get_task(task_ids_eEVENTS);
 8001040:	2001      	movs	r0, #1
 8001042:	f000 faff 	bl	8001644 <TASK_get_task>
 8001046:	4603      	mov	r3, r0
 8001048:	4a02      	ldr	r2, [pc, #8]	; (8001054 <SCHEDULER_init+0x24>)
 800104a:	6013      	str	r3, [r2, #0]
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000530 	.word	0x20000530
 8001054:	20000534 	.word	0x20000534

08001058 <SCHEDULER_run>:

/*
 * @brief It calls tasks one after another according to their priorities and current modes
 */
void SCHEDULER_run(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
	uint32_t current_time_us = TIME_us();
 800105e:	f000 fb05 	bl	800166c <TIME_us>
 8001062:	60f8      	str	r0, [r7, #12]
	task_t * task = get_first_task();
 8001064:	f000 f8c2 	bl	80011ec <get_first_task>
 8001068:	60b8      	str	r0, [r7, #8]
	bool_e task_executed = FALSE ;
 800106a:	2300      	movs	r3, #0
 800106c:	71fb      	strb	r3, [r7, #7]
	while(task_queu_position < task_queu_size && task != NULL)
 800106e:	e04d      	b.n	800110c <SCHEDULER_run+0xb4>
	{

		switch(task->mode)
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	789b      	ldrb	r3, [r3, #2]
 8001074:	2b03      	cmp	r3, #3
 8001076:	d006      	beq.n	8001086 <SCHEDULER_run+0x2e>
 8001078:	2b03      	cmp	r3, #3
 800107a:	dc32      	bgt.n	80010e2 <SCHEDULER_run+0x8a>
 800107c:	2b01      	cmp	r3, #1
 800107e:	d00a      	beq.n	8001096 <SCHEDULER_run+0x3e>
 8001080:	2b02      	cmp	r3, #2
 8001082:	d023      	beq.n	80010cc <SCHEDULER_run+0x74>
				task->mode = task_mode_eWAIT ;
				break;
			case task_mode_eTIMMER :
			case task_mode_eWAIT:
			default:
				break;
 8001084:	e02d      	b.n	80010e2 <SCHEDULER_run+0x8a>
				current_time_us = task_process(task, current_time_us);
 8001086:	68f9      	ldr	r1, [r7, #12]
 8001088:	68b8      	ldr	r0, [r7, #8]
 800108a:	f000 f8d5 	bl	8001238 <task_process>
 800108e:	60f8      	str	r0, [r7, #12]
				task_executed = TRUE ;
 8001090:	2301      	movs	r3, #1
 8001092:	71fb      	strb	r3, [r7, #7]
				break;
 8001094:	e028      	b.n	80010e8 <SCHEDULER_run+0x90>
				if(current_time_us >= task->desired_next_start_us){
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	6a1b      	ldr	r3, [r3, #32]
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	429a      	cmp	r2, r3
 800109e:	d322      	bcc.n	80010e6 <SCHEDULER_run+0x8e>
					current_time_us = task_process(task, current_time_us);
 80010a0:	68f9      	ldr	r1, [r7, #12]
 80010a2:	68b8      	ldr	r0, [r7, #8]
 80010a4:	f000 f8c8 	bl	8001238 <task_process>
 80010a8:	60f8      	str	r0, [r7, #12]
					task->desired_next_start_us = task->desired_period_us - (int32_t)task->lag_average + current_time_us ;
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	edd2 7a02 	vldr	s15, [r2, #8]
 80010b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010b8:	ee17 2a90 	vmov	r2, s15
 80010bc:	1a9a      	subs	r2, r3, r2
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	441a      	add	r2, r3
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	621a      	str	r2, [r3, #32]
					task_executed = TRUE ;
 80010c6:	2301      	movs	r3, #1
 80010c8:	71fb      	strb	r3, [r7, #7]
				break;
 80010ca:	e00c      	b.n	80010e6 <SCHEDULER_run+0x8e>
				current_time_us = task_process(task, current_time_us);
 80010cc:	68f9      	ldr	r1, [r7, #12]
 80010ce:	68b8      	ldr	r0, [r7, #8]
 80010d0:	f000 f8b2 	bl	8001238 <task_process>
 80010d4:	60f8      	str	r0, [r7, #12]
				task_executed = TRUE ;
 80010d6:	2301      	movs	r3, #1
 80010d8:	71fb      	strb	r3, [r7, #7]
				task->mode = task_mode_eWAIT ;
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	2200      	movs	r2, #0
 80010de:	709a      	strb	r2, [r3, #2]
				break;
 80010e0:	e002      	b.n	80010e8 <SCHEDULER_run+0x90>
				break;
 80010e2:	bf00      	nop
 80010e4:	e000      	b.n	80010e8 <SCHEDULER_run+0x90>
				break;
 80010e6:	bf00      	nop
		}
		/* Stop the while loop when once a task gets executed */
		if(task_executed && (task != task_scheduler) && (task != task_event))
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d009      	beq.n	8001102 <SCHEDULER_run+0xaa>
 80010ee:	4b0f      	ldr	r3, [pc, #60]	; (800112c <SCHEDULER_run+0xd4>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d004      	beq.n	8001102 <SCHEDULER_run+0xaa>
 80010f8:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <SCHEDULER_run+0xd8>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	68ba      	ldr	r2, [r7, #8]
 80010fe:	429a      	cmp	r2, r3
 8001100:	d10e      	bne.n	8001120 <SCHEDULER_run+0xc8>
		{
			break;
		}
		task_executed = FALSE ;
 8001102:	2300      	movs	r3, #0
 8001104:	71fb      	strb	r3, [r7, #7]
		task = get_next_task();
 8001106:	f000 f881 	bl	800120c <get_next_task>
 800110a:	60b8      	str	r0, [r7, #8]
	while(task_queu_position < task_queu_size && task != NULL)
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <SCHEDULER_run+0xdc>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <SCHEDULER_run+0xe0>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	429a      	cmp	r2, r3
 8001116:	d204      	bcs.n	8001122 <SCHEDULER_run+0xca>
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1a8      	bne.n	8001070 <SCHEDULER_run+0x18>
	}
}
 800111e:	e000      	b.n	8001122 <SCHEDULER_run+0xca>
			break;
 8001120:	bf00      	nop
}
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000530 	.word	0x20000530
 8001130:	20000534 	.word	0x20000534
 8001134:	20000514 	.word	0x20000514
 8001138:	20000510 	.word	0x20000510

0800113c <SCHEDULER_task>:

/*
 * @brief Check for some tasks that requires to change of mode
 */
void SCHEDULER_task(void)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
	for(uint8_t t = 0; t < task_to_moove_counter; t++)
 8001142:	2300      	movs	r3, #0
 8001144:	71fb      	strb	r3, [r7, #7]
 8001146:	e00a      	b.n	800115e <SCHEDULER_task+0x22>
	{
		task_to_change[t]->mode = change_mode[t] ;
 8001148:	79fa      	ldrb	r2, [r7, #7]
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	490b      	ldr	r1, [pc, #44]	; (800117c <SCHEDULER_task+0x40>)
 800114e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001152:	490b      	ldr	r1, [pc, #44]	; (8001180 <SCHEDULER_task+0x44>)
 8001154:	5c8a      	ldrb	r2, [r1, r2]
 8001156:	709a      	strb	r2, [r3, #2]
	for(uint8_t t = 0; t < task_to_moove_counter; t++)
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	3301      	adds	r3, #1
 800115c:	71fb      	strb	r3, [r7, #7]
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <SCHEDULER_task+0x48>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	79fa      	ldrb	r2, [r7, #7]
 8001164:	429a      	cmp	r2, r3
 8001166:	d3ef      	bcc.n	8001148 <SCHEDULER_task+0xc>
	}
	task_to_moove_counter = 0 ;
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <SCHEDULER_task+0x48>)
 800116a:	2200      	movs	r2, #0
 800116c:	701a      	strb	r2, [r3, #0]
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20000518 	.word	0x20000518
 8001180:	20000528 	.word	0x20000528
 8001184:	2000052c 	.word	0x2000052c

08001188 <SCHEDULER_enable_task>:
 * @brief Add or remove a task to / from the queue
 * @param id The id of the task
 * @param enable Enable (Add) or disable (remove) a task
 */
void SCHEDULER_enable_task(task_ids_e id, bool_e enable)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	460a      	mov	r2, r1
 8001192:	71fb      	strb	r3, [r7, #7]
 8001194:	4613      	mov	r3, r2
 8001196:	71bb      	strb	r3, [r7, #6]
	if(enable)
 8001198:	79bb      	ldrb	r3, [r7, #6]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d008      	beq.n	80011b0 <SCHEDULER_enable_task+0x28>
	{
		queu_add(TASK_get_task(id));
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 fa4f 	bl	8001644 <TASK_get_task>
 80011a6:	4603      	mov	r3, r0
 80011a8:	4618      	mov	r0, r3
 80011aa:	f000 f963 	bl	8001474 <queu_add>
	}
	else
	{
		queu_remove(TASK_get_task(id));
	}
}
 80011ae:	e007      	b.n	80011c0 <SCHEDULER_enable_task+0x38>
		queu_remove(TASK_get_task(id));
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 fa46 	bl	8001644 <TASK_get_task>
 80011b8:	4603      	mov	r3, r0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 f9b8 	bl	8001530 <queu_remove>
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <SCHEDULER_reschedule_task>:
 * @brief Change the execution period of a task
 * @param id The id of the task
 * @param new_period_us The new desired period
 */
void SCHEDULER_reschedule_task(task_ids_e id, uint32_t new_period_us)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	71fb      	strb	r3, [r7, #7]
	task_t * task = TASK_get_task(id);
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 fa34 	bl	8001644 <TASK_get_task>
 80011dc:	60f8      	str	r0, [r7, #12]
	task->desired_period_us = new_period_us ;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	615a      	str	r2, [r3, #20]
}
 80011e4:	bf00      	nop
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <get_first_task>:

/*
 * @brief get the first task of the queue
 */
static task_t * get_first_task(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
	task_queu_position = 0 ;
 80011f0:	4b04      	ldr	r3, [pc, #16]	; (8001204 <get_first_task+0x18>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
	return task_queu[0] ;
 80011f6:	4b04      	ldr	r3, [pc, #16]	; (8001208 <get_first_task+0x1c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	20000514 	.word	0x20000514
 8001208:	20000500 	.word	0x20000500

0800120c <get_next_task>:
/*
 * @brief get the next task in the queue
 * @return the next task
 */
static task_t * get_next_task(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
	return task_queu[++task_queu_position];
 8001210:	4b07      	ldr	r3, [pc, #28]	; (8001230 <get_next_task+0x24>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	3301      	adds	r3, #1
 8001216:	4a06      	ldr	r2, [pc, #24]	; (8001230 <get_next_task+0x24>)
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	4b05      	ldr	r3, [pc, #20]	; (8001230 <get_next_task+0x24>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a05      	ldr	r2, [pc, #20]	; (8001234 <get_next_task+0x28>)
 8001220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001224:	4618      	mov	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20000514 	.word	0x20000514
 8001234:	20000500 	.word	0x20000500

08001238 <task_process>:

static uint32_t task_process(task_t * task, uint32_t current_time_us){
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]

	/* If the task has no process associated, we just stop here before making a mistake .. */
	if(task->process == NULL)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <task_process+0x16>
	{
		return current_time_us ;
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	e0e4      	b.n	8001418 <task_process+0x1e0>
	}

	/* Compute the real period using the moving average */
	task->real_period_us_average_sum -= task->real_period_us_average_array[task->average_index];
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001258:	6879      	ldr	r1, [r7, #4]
 800125a:	3308      	adds	r3, #8
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	440b      	add	r3, r1
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	1ad2      	subs	r2, r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	675a      	str	r2, [r3, #116]	; 0x74
	task->real_period_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69da      	ldr	r2, [r3, #28]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001272:	6839      	ldr	r1, [r7, #0]
 8001274:	1a8a      	subs	r2, r1, r2
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	3308      	adds	r3, #8
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	440b      	add	r3, r1
 800127e:	605a      	str	r2, [r3, #4]
	task->real_period_us_average_sum += task->real_period_us_average_array[task->average_index] ;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	3308      	adds	r3, #8
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	440b      	add	r3, r1
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	441a      	add	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	675a      	str	r2, [r3, #116]	; 0x74
	task->real_period_us = task->real_period_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800129e:	4a60      	ldr	r2, [pc, #384]	; (8001420 <task_process+0x1e8>)
 80012a0:	fba2 2303 	umull	r2, r3, r2, r3
 80012a4:	091a      	lsrs	r2, r3, #4
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	619a      	str	r2, [r3, #24]

	/* Lag compensation */
	if(task->mode == task_mode_eTIME)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	789b      	ldrb	r3, [r3, #2]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d142      	bne.n	8001338 <task_process+0x100>
	{
		if(task->real_period_us_average_array[task->average_index] > task->desired_period_us)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	3308      	adds	r3, #8
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	4413      	add	r3, r2
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d91b      	bls.n	8001302 <task_process+0xca>
		{
			task->lag_average += (float)(task->real_period_us_average_array[task->average_index] - task->desired_period_us) * 0.5f ;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	ed93 7a02 	vldr	s14, [r3, #8]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	3308      	adds	r3, #8
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	4413      	add	r3, r2
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	ee07 3a90 	vmov	s15, r3
 80012ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012ee:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80012f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80012f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	edc3 7a02 	vstr	s15, [r3, #8]
 8001300:	e01a      	b.n	8001338 <task_process+0x100>
		}

		else
		{
			task->lag_average -= (float)(task->desired_period_us - task->real_period_us_average_array[task->average_index]) * 0.5f ;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	ed93 7a02 	vldr	s14, [r3, #8]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	695a      	ldr	r2, [r3, #20]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	3308      	adds	r3, #8
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	440b      	add	r3, r1
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	ee07 3a90 	vmov	s15, r3
 8001322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001326:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800132a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800132e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	edc3 7a02 	vstr	s15, [r3, #8]
		}
	}
	task->last_execution_us = current_time_us ;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	61da      	str	r2, [r3, #28]
	task->process(current_time_us);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	6838      	ldr	r0, [r7, #0]
 8001344:	4798      	blx	r3
	current_time_us = TIME_us();
 8001346:	f000 f991 	bl	800166c <TIME_us>
 800134a:	6038      	str	r0, [r7, #0]
	/* Compute the "burst time" with the moving average */
	task->duration_us_average_sum -= task->duration_us_average_array[task->average_index];
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	311e      	adds	r1, #30
 800135c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001360:	1ad2      	subs	r2, r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	task->duration_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	69db      	ldr	r3, [r3, #28]
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	f8d2 20cc 	ldr.w	r2, [r2, #204]	; 0xcc
 8001372:	6839      	ldr	r1, [r7, #0]
 8001374:	1ac9      	subs	r1, r1, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	321e      	adds	r2, #30
 800137a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	task->duration_us_worst = MAX(task->duration_us_average_array[task->average_index] , task->duration_us_worst);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	691a      	ldr	r2, [r3, #16]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	311e      	adds	r1, #30
 800138c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001390:	429a      	cmp	r2, r3
 8001392:	bf38      	it	cc
 8001394:	461a      	movcc	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	611a      	str	r2, [r3, #16]
	task->duration_us_average_sum += task->duration_us_average_array[task->average_index];
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	311e      	adds	r1, #30
 80013aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80013ae:	441a      	add	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	task->duration_us = task->duration_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80013bc:	4a18      	ldr	r2, [pc, #96]	; (8001420 <task_process+0x1e8>)
 80013be:	fba2 2303 	umull	r2, r3, r2, r3
 80013c2:	091a      	lsrs	r2, r3, #4
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	60da      	str	r2, [r3, #12]

	if(task->duration_us_average_array[task->average_index] > 1000)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	321e      	adds	r2, #30
 80013d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013da:	d90c      	bls.n	80013f6 <task_process+0x1be>
		task->duration_us_average_array[task->average_index] ++ ;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	f103 011e 	add.w	r1, r3, #30
 80013e8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80013ec:	1c51      	adds	r1, r2, #1
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	331e      	adds	r3, #30
 80013f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if(++task->average_index == TASK_STAT_AVERAGE_OVER)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80013fc:	1c5a      	adds	r2, r3, #1
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800140a:	2b14      	cmp	r3, #20
 800140c:	d103      	bne.n	8001416 <task_process+0x1de>
		task->average_index = 0 ;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	return current_time_us ;
 8001416:	683b      	ldr	r3, [r7, #0]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	cccccccd 	.word	0xcccccccd

08001424 <queu_contains>:
 * @brief Check if the given task is currently in the queue
 * @param task pointer to a task
 * @return true when it does contains the task, false otherwise
 */
static bool_e queu_contains(task_t * task)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	if(task == NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <queu_contains+0x12>
	{
		return FALSE ;
 8001432:	2300      	movs	r3, #0
 8001434:	e014      	b.n	8001460 <queu_contains+0x3c>
	}
	for(uint32_t t = 0; t < task_queu_size; t++)
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	e00b      	b.n	8001454 <queu_contains+0x30>
	{
		if(task_queu[t] == task)
 800143c:	4a0b      	ldr	r2, [pc, #44]	; (800146c <queu_contains+0x48>)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	429a      	cmp	r2, r3
 8001448:	d101      	bne.n	800144e <queu_contains+0x2a>
			{
				return TRUE ;
 800144a:	2301      	movs	r3, #1
 800144c:	e008      	b.n	8001460 <queu_contains+0x3c>
	for(uint32_t t = 0; t < task_queu_size; t++)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	3301      	adds	r3, #1
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <queu_contains+0x4c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	429a      	cmp	r2, r3
 800145c:	d3ee      	bcc.n	800143c <queu_contains+0x18>
			}
	}

	return FALSE ;
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	20000500 	.word	0x20000500
 8001470:	20000510 	.word	0x20000510

08001474 <queu_add>:
 * @brief Add a task to the queue
 * @param task pointer to the task to add
 * @return true when added, false otherwise
 */
static bool_e queu_add(task_t * task)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]

	if(queu_contains(task) || task_queu_size >= task_ids_eCOUNT || task == NULL)
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff ffd1 	bl	8001424 <queu_contains>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d106      	bne.n	8001496 <queu_add+0x22>
 8001488:	4b27      	ldr	r3, [pc, #156]	; (8001528 <queu_add+0xb4>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b03      	cmp	r3, #3
 800148e:	d802      	bhi.n	8001496 <queu_add+0x22>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d101      	bne.n	800149a <queu_add+0x26>
	{
		return FALSE ;
 8001496:	2300      	movs	r3, #0
 8001498:	e041      	b.n	800151e <queu_add+0xaa>
	}
	uint32_t t = 0 ;
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
	while(t < task_ids_eCOUNT)
 800149e:	e03a      	b.n	8001516 <queu_add+0xa2>
	{
		if(task_queu[t] == NULL)
 80014a0:	4a22      	ldr	r2, [pc, #136]	; (800152c <queu_add+0xb8>)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d10b      	bne.n	80014c4 <queu_add+0x50>
		{
			task_queu[t] = task ;
 80014ac:	491f      	ldr	r1, [pc, #124]	; (800152c <queu_add+0xb8>)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			task_queu_size ++ ;
 80014b6:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <queu_add+0xb4>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	3301      	adds	r3, #1
 80014bc:	4a1a      	ldr	r2, [pc, #104]	; (8001528 <queu_add+0xb4>)
 80014be:	6013      	str	r3, [r2, #0]
			return TRUE;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e02c      	b.n	800151e <queu_add+0xaa>
		}
		else if(task->static_priority > task_queu[t]->static_priority){
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	781a      	ldrb	r2, [r3, #0]
 80014c8:	4918      	ldr	r1, [pc, #96]	; (800152c <queu_add+0xb8>)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d91c      	bls.n	8001510 <queu_add+0x9c>
			memmove(&task_queu[t+1], &task_queu[t], sizeof(task) * (task_queu_size - t));
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	3301      	adds	r3, #1
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4a13      	ldr	r2, [pc, #76]	; (800152c <queu_add+0xb8>)
 80014de:	1898      	adds	r0, r3, r2
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4a11      	ldr	r2, [pc, #68]	; (800152c <queu_add+0xb8>)
 80014e6:	1899      	adds	r1, r3, r2
 80014e8:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <queu_add+0xb4>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	461a      	mov	r2, r3
 80014f4:	f005 fe12 	bl	800711c <memmove>
			task_queu[t] = task ;
 80014f8:	490c      	ldr	r1, [pc, #48]	; (800152c <queu_add+0xb8>)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			task_queu_size ++ ;
 8001502:	4b09      	ldr	r3, [pc, #36]	; (8001528 <queu_add+0xb4>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	3301      	adds	r3, #1
 8001508:	4a07      	ldr	r2, [pc, #28]	; (8001528 <queu_add+0xb4>)
 800150a:	6013      	str	r3, [r2, #0]
			return TRUE ;
 800150c:	2301      	movs	r3, #1
 800150e:	e006      	b.n	800151e <queu_add+0xaa>
		}
		t++;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	3301      	adds	r3, #1
 8001514:	60fb      	str	r3, [r7, #12]
	while(t < task_ids_eCOUNT)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2b03      	cmp	r3, #3
 800151a:	d9c1      	bls.n	80014a0 <queu_add+0x2c>
	}
	return FALSE ;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000510 	.word	0x20000510
 800152c:	20000500 	.word	0x20000500

08001530 <queu_remove>:
 * @brief remove a task from the queue
 * @param task pointer to the task to remove
 * @return true if the task was removed, false otherwise
 */
static bool_e queu_remove(task_t * task)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	if(!queu_contains(task) || task == NULL)
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff ff73 	bl	8001424 <queu_contains>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d002      	beq.n	800154a <queu_remove+0x1a>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <queu_remove+0x1e>
	{
		return FALSE ;
 800154a:	2300      	movs	r3, #0
 800154c:	e02a      	b.n	80015a4 <queu_remove+0x74>
	}
	for(uint32_t t = 0; t < task_queu_size; t ++)
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	e021      	b.n	8001598 <queu_remove+0x68>
	{
		if(task == task_queu[t])
 8001554:	4a15      	ldr	r2, [pc, #84]	; (80015ac <queu_remove+0x7c>)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	429a      	cmp	r2, r3
 8001560:	d117      	bne.n	8001592 <queu_remove+0x62>
		{
			memmove(&task_queu[t], &task_queu[t+1], sizeof(task) * (task_queu_size - t));
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4a11      	ldr	r2, [pc, #68]	; (80015ac <queu_remove+0x7c>)
 8001568:	1898      	adds	r0, r3, r2
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	3301      	adds	r3, #1
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4a0e      	ldr	r2, [pc, #56]	; (80015ac <queu_remove+0x7c>)
 8001572:	1899      	adds	r1, r3, r2
 8001574:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <queu_remove+0x80>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	461a      	mov	r2, r3
 8001580:	f005 fdcc 	bl	800711c <memmove>
			task_queu_size -- ;
 8001584:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <queu_remove+0x80>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	3b01      	subs	r3, #1
 800158a:	4a09      	ldr	r2, [pc, #36]	; (80015b0 <queu_remove+0x80>)
 800158c:	6013      	str	r3, [r2, #0]
			return TRUE ;
 800158e:	2301      	movs	r3, #1
 8001590:	e008      	b.n	80015a4 <queu_remove+0x74>
	for(uint32_t t = 0; t < task_queu_size; t ++)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	3301      	adds	r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <queu_remove+0x80>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d3d8      	bcc.n	8001554 <queu_remove+0x24>
		}
	}
	return FALSE ;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000500 	.word	0x20000500
 80015b0:	20000510 	.word	0x20000510

080015b4 <TASK_Init>:
/*
 * @brief Initialization of every task
 * @param mark1_ pointer to a system_t structure
 */
void TASK_Init(system_t * mark1_)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	mark1 = mark1_;
 80015bc:	4a0b      	ldr	r2, [pc, #44]	; (80015ec <TASK_Init+0x38>)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6013      	str	r3, [r2, #0]
	SCHEDULER_enable_task(task_ids_eEVENTS, TRUE);
 80015c2:	2101      	movs	r1, #1
 80015c4:	2001      	movs	r0, #1
 80015c6:	f7ff fddf 	bl	8001188 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(task_ids_eSCHEDULER, TRUE);
 80015ca:	2101      	movs	r1, #1
 80015cc:	2000      	movs	r0, #0
 80015ce:	f7ff fddb 	bl	8001188 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(task_ids_eGYRO_UPDATE, TRUE);
 80015d2:	2101      	movs	r1, #1
 80015d4:	2003      	movs	r0, #3
 80015d6:	f7ff fdd7 	bl	8001188 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(task_ids_eDATA_LOGGER, TRUE);
 80015da:	2101      	movs	r1, #1
 80015dc:	2002      	movs	r0, #2
 80015de:	f7ff fdd3 	bl	8001188 <SCHEDULER_enable_task>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000538 	.word	0x20000538

080015f0 <process_scheduler>:

/*
 * @brief Call the scheduler main function
 */
static void process_scheduler(uint32_t current_time_us)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	SCHEDULER_task();
 80015f8:	f7ff fda0 	bl	800113c <SCHEDULER_task>
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <process_events>:

/*
 * @brief Call the scheduler main function
 */
static void process_events(uint32_t current_time_us)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	UNUSED(current_time_us);
	EVENT_process(FALSE);
 800160c:	2000      	movs	r0, #0
 800160e:	f7ff fc1d 	bl	8000e4c <EVENT_process>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <process_data_logger>:

/*
 * @brief Call the data logger main function
 */
static void process_data_logger(uint32_t current_time_us)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
	UNUSED(current_time_us);
	DATA_LOGGER_Main();
 8001622:	f7fe ffd3 	bl	80005cc <DATA_LOGGER_Main>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <process_gyro_update>:

/*
 * @brief Measure new data from the gyro
 */
static void process_gyro_update(uint32_t current_time_us)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
	MPU_Read_All();
 8001636:	f000 fc2d 	bl	8001e94 <MPU_Read_All>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <TASK_get_task>:
 * @brief Return a pointer to a task for a given task id
 * @param id Id of the task
 * @return Pointer to the task
 */
task_t * TASK_get_task(task_ids_e id)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
	return &tasks[id];
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	22d0      	movs	r2, #208	; 0xd0
 8001652:	fb02 f303 	mul.w	r3, r2, r3
 8001656:	4a04      	ldr	r2, [pc, #16]	; (8001668 <TASK_get_task+0x24>)
 8001658:	4413      	add	r3, r2
}
 800165a:	4618      	mov	r0, r3
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	20000004 	.word	0x20000004

0800166c <TIME_us>:

#include "time.h"


uint32_t TIME_us(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001672:	b672      	cpsid	i
}
 8001674:	bf00      	nop

	uint32_t t_us;
	static uint32_t previous_t_us = 0;
	__disable_irq();
	t_us = HAL_GetTick() * 1000 + 1000 - SysTick->VAL / 168;
 8001676:	f001 fa61 	bl	8002b3c <HAL_GetTick>
 800167a:	4603      	mov	r3, r0
 800167c:	3301      	adds	r3, #1
 800167e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001682:	fb02 f203 	mul.w	r2, r2, r3
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <TIME_us+0x54>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	08db      	lsrs	r3, r3, #3
 800168c:	490d      	ldr	r1, [pc, #52]	; (80016c4 <TIME_us+0x58>)
 800168e:	fba1 1303 	umull	r1, r3, r1, r3
 8001692:	085b      	lsrs	r3, r3, #1
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8001698:	b662      	cpsie	i
}
 800169a:	bf00      	nop
	__enable_irq();

	if(previous_t_us > t_us)
 800169c:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <TIME_us+0x5c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d203      	bcs.n	80016ae <TIME_us+0x42>
		t_us += 1000;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80016ac:	607b      	str	r3, [r7, #4]
	previous_t_us = t_us ;
 80016ae:	4a06      	ldr	r2, [pc, #24]	; (80016c8 <TIME_us+0x5c>)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6013      	str	r3, [r2, #0]

	return t_us;
 80016b4:	687b      	ldr	r3, [r7, #4]
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	e000e010 	.word	0xe000e010
 80016c4:	18618619 	.word	0x18618619
 80016c8:	2000053c 	.word	0x2000053c

080016cc <I2C_Mem_Write>:

void I2C_Init(void)
{
}
void I2C_Mem_Write(i2c_e i2c_id, uint8_t device_address, uint8_t mem_address, uint8_t * data, uint8_t size)
{
 80016cc:	b590      	push	{r4, r7, lr}
 80016ce:	b087      	sub	sp, #28
 80016d0:	af04      	add	r7, sp, #16
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	4603      	mov	r3, r0
 80016d6:	71fb      	strb	r3, [r7, #7]
 80016d8:	460b      	mov	r3, r1
 80016da:	71bb      	strb	r3, [r7, #6]
 80016dc:	4613      	mov	r3, r2
 80016de:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(i2c[i2c_id].hi2c, device_address, mem_address, I2C_MEMADD_SIZE_8BIT, data, size, I2C_OPERATION_TIMEOUT);
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	4a0a      	ldr	r2, [pc, #40]	; (800170c <I2C_Mem_Write+0x40>)
 80016e4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80016e8:	79bb      	ldrb	r3, [r7, #6]
 80016ea:	b299      	uxth	r1, r3
 80016ec:	797b      	ldrb	r3, [r7, #5]
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	7e3b      	ldrb	r3, [r7, #24]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	240a      	movs	r4, #10
 80016f6:	9402      	str	r4, [sp, #8]
 80016f8:	9301      	str	r3, [sp, #4]
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	2301      	movs	r3, #1
 8001700:	f002 fa5a 	bl	8003bb8 <HAL_I2C_Mem_Write>
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	bd90      	pop	{r4, r7, pc}
 800170c:	20000344 	.word	0x20000344

08001710 <I2C_Mem_Read>:

void I2C_Mem_Read(i2c_e i2c_id, uint8_t device_address, uint8_t mem_address, uint8_t * data, uint8_t size)
{
 8001710:	b590      	push	{r4, r7, lr}
 8001712:	b087      	sub	sp, #28
 8001714:	af04      	add	r7, sp, #16
 8001716:	603b      	str	r3, [r7, #0]
 8001718:	4603      	mov	r3, r0
 800171a:	71fb      	strb	r3, [r7, #7]
 800171c:	460b      	mov	r3, r1
 800171e:	71bb      	strb	r3, [r7, #6]
 8001720:	4613      	mov	r3, r2
 8001722:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(i2c[i2c_id].hi2c, device_address, mem_address, I2C_MEMADD_SIZE_8BIT, data, size, I2C_OPERATION_TIMEOUT);
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	4a0a      	ldr	r2, [pc, #40]	; (8001750 <I2C_Mem_Read+0x40>)
 8001728:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800172c:	79bb      	ldrb	r3, [r7, #6]
 800172e:	b299      	uxth	r1, r3
 8001730:	797b      	ldrb	r3, [r7, #5]
 8001732:	b29a      	uxth	r2, r3
 8001734:	7e3b      	ldrb	r3, [r7, #24]
 8001736:	b29b      	uxth	r3, r3
 8001738:	240a      	movs	r4, #10
 800173a:	9402      	str	r4, [sp, #8]
 800173c:	9301      	str	r3, [sp, #4]
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	2301      	movs	r3, #1
 8001744:	f002 fb32 	bl	8003dac <HAL_I2C_Mem_Read>
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	bd90      	pop	{r4, r7, pc}
 8001750:	20000344 	.word	0x20000344

08001754 <TIMER_Start_All_Channels>:
/*
 * @brief Start all channels of a timer
 * @param timer_id id of the timer
 */
void TIMER_Start_All_Channels(timer_e timer_id)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
	HAL_TIM_PWM_Start(timer[timer_id].htim, TIM_CHANNEL_1);
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	4a11      	ldr	r2, [pc, #68]	; (80017a8 <TIMER_Start_All_Channels+0x54>)
 8001762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001766:	2100      	movs	r1, #0
 8001768:	4618      	mov	r0, r3
 800176a:	f003 fd91 	bl	8005290 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer[timer_id].htim, TIM_CHANNEL_2);
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	4a0d      	ldr	r2, [pc, #52]	; (80017a8 <TIMER_Start_All_Channels+0x54>)
 8001772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001776:	2104      	movs	r1, #4
 8001778:	4618      	mov	r0, r3
 800177a:	f003 fd89 	bl	8005290 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer[timer_id].htim, TIM_CHANNEL_3);
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	4a09      	ldr	r2, [pc, #36]	; (80017a8 <TIMER_Start_All_Channels+0x54>)
 8001782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001786:	2108      	movs	r1, #8
 8001788:	4618      	mov	r0, r3
 800178a:	f003 fd81 	bl	8005290 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer[timer_id].htim, TIM_CHANNEL_4);
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	4a05      	ldr	r2, [pc, #20]	; (80017a8 <TIMER_Start_All_Channels+0x54>)
 8001792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001796:	210c      	movs	r1, #12
 8001798:	4618      	mov	r0, r3
 800179a:	f003 fd79 	bl	8005290 <HAL_TIM_PWM_Start>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000348 	.word	0x20000348

080017ac <UART_Idle_Line_Callback>:
/* -------------------------- Public callback functions -------------------------- */
/*
 * @brief Update the read index when the idle flag is raised
 */
void UART_Idle_Line_Callback(uart_e id)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
	if(__HAL_UART_GET_FLAG(uart[id].huart, UART_FLAG_IDLE))
 80017b6:	79fa      	ldrb	r2, [r7, #7]
 80017b8:	4922      	ldr	r1, [pc, #136]	; (8001844 <UART_Idle_Line_Callback+0x98>)
 80017ba:	4613      	mov	r3, r2
 80017bc:	019b      	lsls	r3, r3, #6
 80017be:	4413      	add	r3, r2
 80017c0:	011b      	lsls	r3, r3, #4
 80017c2:	440b      	add	r3, r1
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0310 	and.w	r3, r3, #16
 80017ce:	2b10      	cmp	r3, #16
 80017d0:	d132      	bne.n	8001838 <UART_Idle_Line_Callback+0x8c>
	{
		uart[id].index_write_rx = LEN_BUFFER - uart[id].huart->hdmarx->Instance->NDTR ;
 80017d2:	79fa      	ldrb	r2, [r7, #7]
 80017d4:	491b      	ldr	r1, [pc, #108]	; (8001844 <UART_Idle_Line_Callback+0x98>)
 80017d6:	4613      	mov	r3, r2
 80017d8:	019b      	lsls	r3, r3, #6
 80017da:	4413      	add	r3, r2
 80017dc:	011b      	lsls	r3, r3, #4
 80017de:	440b      	add	r3, r1
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	79fa      	ldrb	r2, [r7, #7]
 80017ec:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80017f0:	b298      	uxth	r0, r3
 80017f2:	4914      	ldr	r1, [pc, #80]	; (8001844 <UART_Idle_Line_Callback+0x98>)
 80017f4:	4613      	mov	r3, r2
 80017f6:	019b      	lsls	r3, r3, #6
 80017f8:	4413      	add	r3, r2
 80017fa:	011b      	lsls	r3, r3, #4
 80017fc:	440b      	add	r3, r1
 80017fe:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8001802:	4602      	mov	r2, r0
 8001804:	801a      	strh	r2, [r3, #0]
	  __HAL_UART_CLEAR_IDLEFLAG(uart[id].huart);
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	79fa      	ldrb	r2, [r7, #7]
 800180c:	490d      	ldr	r1, [pc, #52]	; (8001844 <UART_Idle_Line_Callback+0x98>)
 800180e:	4613      	mov	r3, r2
 8001810:	019b      	lsls	r3, r3, #6
 8001812:	4413      	add	r3, r2
 8001814:	011b      	lsls	r3, r3, #4
 8001816:	440b      	add	r3, r1
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	79fa      	ldrb	r2, [r7, #7]
 8001822:	4908      	ldr	r1, [pc, #32]	; (8001844 <UART_Idle_Line_Callback+0x98>)
 8001824:	4613      	mov	r3, r2
 8001826:	019b      	lsls	r3, r3, #6
 8001828:	4413      	add	r3, r2
 800182a:	011b      	lsls	r3, r3, #4
 800182c:	440b      	add	r3, r1
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]
	}
}
 8001838:	bf00      	nop
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	20000540 	.word	0x20000540

08001848 <UART_Transfer_Complete_Callback>:

/*
 * @brief Re start the dma transfer if there is data to send or reset the transmission state to idle
 */
void UART_Transfer_Complete_Callback(uart_e id)
{
 8001848:	b590      	push	{r4, r7, lr}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	71fb      	strb	r3, [r7, #7]
	if(uart[id].index_write_tx != uart[id].index_read_tx)
 8001852:	79fa      	ldrb	r2, [r7, #7]
 8001854:	494d      	ldr	r1, [pc, #308]	; (800198c <UART_Transfer_Complete_Callback+0x144>)
 8001856:	4613      	mov	r3, r2
 8001858:	019b      	lsls	r3, r3, #6
 800185a:	4413      	add	r3, r2
 800185c:	011b      	lsls	r3, r3, #4
 800185e:	440b      	add	r3, r1
 8001860:	f203 2306 	addw	r3, r3, #518	; 0x206
 8001864:	8819      	ldrh	r1, [r3, #0]
 8001866:	79fa      	ldrb	r2, [r7, #7]
 8001868:	4848      	ldr	r0, [pc, #288]	; (800198c <UART_Transfer_Complete_Callback+0x144>)
 800186a:	4613      	mov	r3, r2
 800186c:	019b      	lsls	r3, r3, #6
 800186e:	4413      	add	r3, r2
 8001870:	011b      	lsls	r3, r3, #4
 8001872:	4403      	add	r3, r0
 8001874:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	4299      	cmp	r1, r3
 800187c:	d077      	beq.n	800196e <UART_Transfer_Complete_Callback+0x126>
	{
		uint16_t nb_bytes_to_read = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	81fb      	strh	r3, [r7, #14]
		if(uart[id].index_write_tx > uart[id].index_read_rx)
 8001882:	79fa      	ldrb	r2, [r7, #7]
 8001884:	4941      	ldr	r1, [pc, #260]	; (800198c <UART_Transfer_Complete_Callback+0x144>)
 8001886:	4613      	mov	r3, r2
 8001888:	019b      	lsls	r3, r3, #6
 800188a:	4413      	add	r3, r2
 800188c:	011b      	lsls	r3, r3, #4
 800188e:	440b      	add	r3, r1
 8001890:	f203 2306 	addw	r3, r3, #518	; 0x206
 8001894:	8819      	ldrh	r1, [r3, #0]
 8001896:	79fa      	ldrb	r2, [r7, #7]
 8001898:	483c      	ldr	r0, [pc, #240]	; (800198c <UART_Transfer_Complete_Callback+0x144>)
 800189a:	4613      	mov	r3, r2
 800189c:	019b      	lsls	r3, r3, #6
 800189e:	4413      	add	r3, r2
 80018a0:	011b      	lsls	r3, r3, #4
 80018a2:	4403      	add	r3, r0
 80018a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80018a8:	881b      	ldrh	r3, [r3, #0]
 80018aa:	4299      	cmp	r1, r3
 80018ac:	d916      	bls.n	80018dc <UART_Transfer_Complete_Callback+0x94>
		{
			nb_bytes_to_read = uart[id].index_write_tx - uart[id].index_read_tx;
 80018ae:	79fa      	ldrb	r2, [r7, #7]
 80018b0:	4936      	ldr	r1, [pc, #216]	; (800198c <UART_Transfer_Complete_Callback+0x144>)
 80018b2:	4613      	mov	r3, r2
 80018b4:	019b      	lsls	r3, r3, #6
 80018b6:	4413      	add	r3, r2
 80018b8:	011b      	lsls	r3, r3, #4
 80018ba:	440b      	add	r3, r1
 80018bc:	f203 2306 	addw	r3, r3, #518	; 0x206
 80018c0:	8819      	ldrh	r1, [r3, #0]
 80018c2:	79fa      	ldrb	r2, [r7, #7]
 80018c4:	4831      	ldr	r0, [pc, #196]	; (800198c <UART_Transfer_Complete_Callback+0x144>)
 80018c6:	4613      	mov	r3, r2
 80018c8:	019b      	lsls	r3, r3, #6
 80018ca:	4413      	add	r3, r2
 80018cc:	011b      	lsls	r3, r3, #4
 80018ce:	4403      	add	r3, r0
 80018d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	1acb      	subs	r3, r1, r3
 80018d8:	81fb      	strh	r3, [r7, #14]
 80018da:	e00c      	b.n	80018f6 <UART_Transfer_Complete_Callback+0xae>
		}
		else
		{
			nb_bytes_to_read = LEN_BUFFER - uart[id].index_read_tx;
 80018dc:	79fa      	ldrb	r2, [r7, #7]
 80018de:	492b      	ldr	r1, [pc, #172]	; (800198c <UART_Transfer_Complete_Callback+0x144>)
 80018e0:	4613      	mov	r3, r2
 80018e2:	019b      	lsls	r3, r3, #6
 80018e4:	4413      	add	r3, r2
 80018e6:	011b      	lsls	r3, r3, #4
 80018e8:	440b      	add	r3, r1
 80018ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80018f4:	81fb      	strh	r3, [r7, #14]
		}
		HAL_UART_Transmit_DMA(uart[id].huart, &uart[id].buffer_tx[uart[id].index_read_tx], nb_bytes_to_read);
 80018f6:	79fa      	ldrb	r2, [r7, #7]
 80018f8:	4924      	ldr	r1, [pc, #144]	; (800198c <UART_Transfer_Complete_Callback+0x144>)
 80018fa:	4613      	mov	r3, r2
 80018fc:	019b      	lsls	r3, r3, #6
 80018fe:	4413      	add	r3, r2
 8001900:	011b      	lsls	r3, r3, #4
 8001902:	440b      	add	r3, r1
 8001904:	6818      	ldr	r0, [r3, #0]
 8001906:	79fa      	ldrb	r2, [r7, #7]
 8001908:	79f9      	ldrb	r1, [r7, #7]
 800190a:	4c20      	ldr	r4, [pc, #128]	; (800198c <UART_Transfer_Complete_Callback+0x144>)
 800190c:	460b      	mov	r3, r1
 800190e:	019b      	lsls	r3, r3, #6
 8001910:	440b      	add	r3, r1
 8001912:	011b      	lsls	r3, r3, #4
 8001914:	4423      	add	r3, r4
 8001916:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800191a:	881b      	ldrh	r3, [r3, #0]
 800191c:	4619      	mov	r1, r3
 800191e:	4613      	mov	r3, r2
 8001920:	019b      	lsls	r3, r3, #6
 8001922:	4413      	add	r3, r2
 8001924:	011b      	lsls	r3, r3, #4
 8001926:	440b      	add	r3, r1
 8001928:	4a18      	ldr	r2, [pc, #96]	; (800198c <UART_Transfer_Complete_Callback+0x144>)
 800192a:	4413      	add	r3, r2
 800192c:	3306      	adds	r3, #6
 800192e:	89fa      	ldrh	r2, [r7, #14]
 8001930:	4619      	mov	r1, r3
 8001932:	f004 fad9 	bl	8005ee8 <HAL_UART_Transmit_DMA>
		uart[id].index_read_tx = (uart[id].index_read_tx + nb_bytes_to_read) % LEN_BUFFER;
 8001936:	79fa      	ldrb	r2, [r7, #7]
 8001938:	4914      	ldr	r1, [pc, #80]	; (800198c <UART_Transfer_Complete_Callback+0x144>)
 800193a:	4613      	mov	r3, r2
 800193c:	019b      	lsls	r3, r3, #6
 800193e:	4413      	add	r3, r2
 8001940:	011b      	lsls	r3, r3, #4
 8001942:	440b      	add	r3, r1
 8001944:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001948:	881a      	ldrh	r2, [r3, #0]
 800194a:	89fb      	ldrh	r3, [r7, #14]
 800194c:	4413      	add	r3, r2
 800194e:	b29b      	uxth	r3, r3
 8001950:	79fa      	ldrb	r2, [r7, #7]
 8001952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001956:	b298      	uxth	r0, r3
 8001958:	490c      	ldr	r1, [pc, #48]	; (800198c <UART_Transfer_Complete_Callback+0x144>)
 800195a:	4613      	mov	r3, r2
 800195c:	019b      	lsls	r3, r3, #6
 800195e:	4413      	add	r3, r2
 8001960:	011b      	lsls	r3, r3, #4
 8001962:	440b      	add	r3, r1
 8001964:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001968:	4602      	mov	r2, r0
 800196a:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		uart[id].transmission_state = transmission_state_eIDLE;
	}
}
 800196c:	e009      	b.n	8001982 <UART_Transfer_Complete_Callback+0x13a>
		uart[id].transmission_state = transmission_state_eIDLE;
 800196e:	79fa      	ldrb	r2, [r7, #7]
 8001970:	4906      	ldr	r1, [pc, #24]	; (800198c <UART_Transfer_Complete_Callback+0x144>)
 8001972:	4613      	mov	r3, r2
 8001974:	019b      	lsls	r3, r3, #6
 8001976:	4413      	add	r3, r2
 8001978:	011b      	lsls	r3, r3, #4
 800197a:	440b      	add	r3, r1
 800197c:	3305      	adds	r3, #5
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
}
 8001982:	bf00      	nop
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	bd90      	pop	{r4, r7, pc}
 800198a:	bf00      	nop
 800198c:	20000540 	.word	0x20000540

08001990 <UART_Availables>:
 * @brief Number of byte available in the RX buffer
 * @param id Id of the uart we are interested in
 * @return Number of bytes
 */
uint16_t UART_Availables(uart_e id)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	71fb      	strb	r3, [r7, #7]
	return get_nb_bytes_available(id);
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	4618      	mov	r0, r3
 800199e:	f000 f94f 	bl	8001c40 <get_nb_bytes_available>
 80019a2:	4603      	mov	r3, r0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <UART_Get>:
 * 		  Does nothing if there are no characters available
 * @param id Id of the uart
 * @param c Buffer to write the character into
 */
void UART_Get(uart_e id, uint8_t * c)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	6039      	str	r1, [r7, #0]
 80019b6:	71fb      	strb	r3, [r7, #7]
	if(get_nb_bytes_available(id))
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f000 f940 	bl	8001c40 <get_nb_bytes_available>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d035      	beq.n	8001a32 <UART_Get+0x86>
	{
		*c = uart[id].buffer_rx[uart[id].index_read_rx];
 80019c6:	79fa      	ldrb	r2, [r7, #7]
 80019c8:	79f9      	ldrb	r1, [r7, #7]
 80019ca:	481c      	ldr	r0, [pc, #112]	; (8001a3c <UART_Get+0x90>)
 80019cc:	460b      	mov	r3, r1
 80019ce:	019b      	lsls	r3, r3, #6
 80019d0:	440b      	add	r3, r1
 80019d2:	011b      	lsls	r3, r3, #4
 80019d4:	4403      	add	r3, r0
 80019d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	4917      	ldr	r1, [pc, #92]	; (8001a3c <UART_Get+0x90>)
 80019e0:	4613      	mov	r3, r2
 80019e2:	019b      	lsls	r3, r3, #6
 80019e4:	4413      	add	r3, r2
 80019e6:	011b      	lsls	r3, r3, #4
 80019e8:	440b      	add	r3, r1
 80019ea:	4403      	add	r3, r0
 80019ec:	f203 230a 	addw	r3, r3, #522	; 0x20a
 80019f0:	781a      	ldrb	r2, [r3, #0]
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	701a      	strb	r2, [r3, #0]
		uart[id].index_read_rx = (uart[id].index_read_rx + 1) % LEN_BUFFER;
 80019f6:	79fa      	ldrb	r2, [r7, #7]
 80019f8:	4910      	ldr	r1, [pc, #64]	; (8001a3c <UART_Get+0x90>)
 80019fa:	4613      	mov	r3, r2
 80019fc:	019b      	lsls	r3, r3, #6
 80019fe:	4413      	add	r3, r2
 8001a00:	011b      	lsls	r3, r3, #4
 8001a02:	440b      	add	r3, r1
 8001a04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	425a      	negs	r2, r3
 8001a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a16:	bf58      	it	pl
 8001a18:	4253      	negpl	r3, r2
 8001a1a:	79fa      	ldrb	r2, [r7, #7]
 8001a1c:	b298      	uxth	r0, r3
 8001a1e:	4907      	ldr	r1, [pc, #28]	; (8001a3c <UART_Get+0x90>)
 8001a20:	4613      	mov	r3, r2
 8001a22:	019b      	lsls	r3, r3, #6
 8001a24:	4413      	add	r3, r2
 8001a26:	011b      	lsls	r3, r3, #4
 8001a28:	440b      	add	r3, r1
 8001a2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001a2e:	4602      	mov	r2, r0
 8001a30:	801a      	strh	r2, [r3, #0]
	}
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000540 	.word	0x20000540

08001a40 <UART_Init>:

/*
 * @brief Initialize every uarts and start dma reception
 */
void UART_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
	/* Link  huarts to the right uarts structures */
	uart[uart_e1].huart = &huart1;
 8001a46:	4b21      	ldr	r3, [pc, #132]	; (8001acc <UART_Init+0x8c>)
 8001a48:	4a21      	ldr	r2, [pc, #132]	; (8001ad0 <UART_Init+0x90>)
 8001a4a:	601a      	str	r2, [r3, #0]
	uart[uart_e4].huart = &huart4;
 8001a4c:	4b1f      	ldr	r3, [pc, #124]	; (8001acc <UART_Init+0x8c>)
 8001a4e:	4a21      	ldr	r2, [pc, #132]	; (8001ad4 <UART_Init+0x94>)
 8001a50:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410

	/* Initialization */
	for(uint8_t u = 0; u < uart_eCOUNT; u ++)
 8001a54:	2300      	movs	r3, #0
 8001a56:	71fb      	strb	r3, [r7, #7]
 8001a58:	e02f      	b.n	8001aba <UART_Init+0x7a>
	{
		__HAL_UART_ENABLE_IT(uart[u].huart, UART_IT_IDLE);
 8001a5a:	79fa      	ldrb	r2, [r7, #7]
 8001a5c:	491b      	ldr	r1, [pc, #108]	; (8001acc <UART_Init+0x8c>)
 8001a5e:	4613      	mov	r3, r2
 8001a60:	019b      	lsls	r3, r3, #6
 8001a62:	4413      	add	r3, r2
 8001a64:	011b      	lsls	r3, r3, #4
 8001a66:	440b      	add	r3, r1
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68d9      	ldr	r1, [r3, #12]
 8001a6e:	79fa      	ldrb	r2, [r7, #7]
 8001a70:	4816      	ldr	r0, [pc, #88]	; (8001acc <UART_Init+0x8c>)
 8001a72:	4613      	mov	r3, r2
 8001a74:	019b      	lsls	r3, r3, #6
 8001a76:	4413      	add	r3, r2
 8001a78:	011b      	lsls	r3, r3, #4
 8001a7a:	4403      	add	r3, r0
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f041 0210 	orr.w	r2, r1, #16
 8001a84:	60da      	str	r2, [r3, #12]
		HAL_UART_Receive_DMA(uart[u].huart, uart[u].buffer_rx, LEN_BUFFER);
 8001a86:	79fa      	ldrb	r2, [r7, #7]
 8001a88:	4910      	ldr	r1, [pc, #64]	; (8001acc <UART_Init+0x8c>)
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	019b      	lsls	r3, r3, #6
 8001a8e:	4413      	add	r3, r2
 8001a90:	011b      	lsls	r3, r3, #4
 8001a92:	440b      	add	r3, r1
 8001a94:	6818      	ldr	r0, [r3, #0]
 8001a96:	79fa      	ldrb	r2, [r7, #7]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	019b      	lsls	r3, r3, #6
 8001a9c:	4413      	add	r3, r2
 8001a9e:	011b      	lsls	r3, r3, #4
 8001aa0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001aa4:	4a09      	ldr	r2, [pc, #36]	; (8001acc <UART_Init+0x8c>)
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3302      	adds	r3, #2
 8001aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aae:	4619      	mov	r1, r3
 8001ab0:	f004 fa98 	bl	8005fe4 <HAL_UART_Receive_DMA>
	for(uint8_t u = 0; u < uart_eCOUNT; u ++)
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	71fb      	strb	r3, [r7, #7]
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d9cc      	bls.n	8001a5a <UART_Init+0x1a>
	}
}
 8001ac0:	bf00      	nop
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000540 	.word	0x20000540
 8001ad0:	20000fe0 	.word	0x20000fe0
 8001ad4:	20001024 	.word	0x20001024

08001ad8 <UART_Transmit>:
 * @param id Id of the uart to use
 * @param data Array with the data
 * @param len Length of the data array
 */
void UART_Transmit(uart_e id, uint8_t * data, uint16_t len)
{
 8001ad8:	b590      	push	{r4, r7, lr}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	6039      	str	r1, [r7, #0]
 8001ae2:	71fb      	strb	r3, [r7, #7]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	80bb      	strh	r3, [r7, #4]
	for(uint16_t c = 0; c < len; c ++)
 8001ae8:	2300      	movs	r3, #0
 8001aea:	81fb      	strh	r3, [r7, #14]
 8001aec:	e020      	b.n	8001b30 <UART_Transmit+0x58>
	{
		uart[id].buffer_tx[(uart[id].index_write_tx + c) % LEN_BUFFER] = data[c];
 8001aee:	89fb      	ldrh	r3, [r7, #14]
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	18d0      	adds	r0, r2, r3
 8001af4:	79fa      	ldrb	r2, [r7, #7]
 8001af6:	79f9      	ldrb	r1, [r7, #7]
 8001af8:	4c50      	ldr	r4, [pc, #320]	; (8001c3c <UART_Transmit+0x164>)
 8001afa:	460b      	mov	r3, r1
 8001afc:	019b      	lsls	r3, r3, #6
 8001afe:	440b      	add	r3, r1
 8001b00:	011b      	lsls	r3, r3, #4
 8001b02:	4423      	add	r3, r4
 8001b04:	f203 2306 	addw	r3, r3, #518	; 0x206
 8001b08:	8819      	ldrh	r1, [r3, #0]
 8001b0a:	89fb      	ldrh	r3, [r7, #14]
 8001b0c:	440b      	add	r3, r1
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8001b14:	7804      	ldrb	r4, [r0, #0]
 8001b16:	4849      	ldr	r0, [pc, #292]	; (8001c3c <UART_Transmit+0x164>)
 8001b18:	4613      	mov	r3, r2
 8001b1a:	019b      	lsls	r3, r3, #6
 8001b1c:	4413      	add	r3, r2
 8001b1e:	011b      	lsls	r3, r3, #4
 8001b20:	4403      	add	r3, r0
 8001b22:	440b      	add	r3, r1
 8001b24:	3306      	adds	r3, #6
 8001b26:	4622      	mov	r2, r4
 8001b28:	701a      	strb	r2, [r3, #0]
	for(uint16_t c = 0; c < len; c ++)
 8001b2a:	89fb      	ldrh	r3, [r7, #14]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	81fb      	strh	r3, [r7, #14]
 8001b30:	89fa      	ldrh	r2, [r7, #14]
 8001b32:	88bb      	ldrh	r3, [r7, #4]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d3da      	bcc.n	8001aee <UART_Transmit+0x16>
	}
	uart[id].index_write_tx = (uart[id].index_write_tx + len) % LEN_BUFFER;
 8001b38:	79fa      	ldrb	r2, [r7, #7]
 8001b3a:	4940      	ldr	r1, [pc, #256]	; (8001c3c <UART_Transmit+0x164>)
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	019b      	lsls	r3, r3, #6
 8001b40:	4413      	add	r3, r2
 8001b42:	011b      	lsls	r3, r3, #4
 8001b44:	440b      	add	r3, r1
 8001b46:	f203 2306 	addw	r3, r3, #518	; 0x206
 8001b4a:	881a      	ldrh	r2, [r3, #0]
 8001b4c:	88bb      	ldrh	r3, [r7, #4]
 8001b4e:	4413      	add	r3, r2
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	79fa      	ldrb	r2, [r7, #7]
 8001b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b58:	b298      	uxth	r0, r3
 8001b5a:	4938      	ldr	r1, [pc, #224]	; (8001c3c <UART_Transmit+0x164>)
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	019b      	lsls	r3, r3, #6
 8001b60:	4413      	add	r3, r2
 8001b62:	011b      	lsls	r3, r3, #4
 8001b64:	440b      	add	r3, r1
 8001b66:	f203 2306 	addw	r3, r3, #518	; 0x206
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	801a      	strh	r2, [r3, #0]
	if(uart[id].transmission_state == transmission_state_eIDLE)
 8001b6e:	79fa      	ldrb	r2, [r7, #7]
 8001b70:	4932      	ldr	r1, [pc, #200]	; (8001c3c <UART_Transmit+0x164>)
 8001b72:	4613      	mov	r3, r2
 8001b74:	019b      	lsls	r3, r3, #6
 8001b76:	4413      	add	r3, r2
 8001b78:	011b      	lsls	r3, r3, #4
 8001b7a:	440b      	add	r3, r1
 8001b7c:	3305      	adds	r3, #5
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d157      	bne.n	8001c34 <UART_Transmit+0x15c>
	{
		uart[id].transmission_state = transmission_state_eIN_PROGRESS;
 8001b84:	79fa      	ldrb	r2, [r7, #7]
 8001b86:	492d      	ldr	r1, [pc, #180]	; (8001c3c <UART_Transmit+0x164>)
 8001b88:	4613      	mov	r3, r2
 8001b8a:	019b      	lsls	r3, r3, #6
 8001b8c:	4413      	add	r3, r2
 8001b8e:	011b      	lsls	r3, r3, #4
 8001b90:	440b      	add	r3, r1
 8001b92:	3305      	adds	r3, #5
 8001b94:	2201      	movs	r2, #1
 8001b96:	701a      	strb	r2, [r3, #0]
		uint16_t nb_bytes_before_end_of_buffer = LEN_BUFFER - uart[id].index_read_tx;
 8001b98:	79fa      	ldrb	r2, [r7, #7]
 8001b9a:	4928      	ldr	r1, [pc, #160]	; (8001c3c <UART_Transmit+0x164>)
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	019b      	lsls	r3, r3, #6
 8001ba0:	4413      	add	r3, r2
 8001ba2:	011b      	lsls	r3, r3, #4
 8001ba4:	440b      	add	r3, r1
 8001ba6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001bb0:	81bb      	strh	r3, [r7, #12]
		len = MIN(len, nb_bytes_before_end_of_buffer);
 8001bb2:	88ba      	ldrh	r2, [r7, #4]
 8001bb4:	89bb      	ldrh	r3, [r7, #12]
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	bf28      	it	cs
 8001bba:	4613      	movcs	r3, r2
 8001bbc:	80bb      	strh	r3, [r7, #4]
		HAL_UART_Transmit_DMA(uart[id].huart, &uart[id].buffer_tx[uart[id].index_read_tx], len);
 8001bbe:	79fa      	ldrb	r2, [r7, #7]
 8001bc0:	491e      	ldr	r1, [pc, #120]	; (8001c3c <UART_Transmit+0x164>)
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	019b      	lsls	r3, r3, #6
 8001bc6:	4413      	add	r3, r2
 8001bc8:	011b      	lsls	r3, r3, #4
 8001bca:	440b      	add	r3, r1
 8001bcc:	6818      	ldr	r0, [r3, #0]
 8001bce:	79fa      	ldrb	r2, [r7, #7]
 8001bd0:	79f9      	ldrb	r1, [r7, #7]
 8001bd2:	4c1a      	ldr	r4, [pc, #104]	; (8001c3c <UART_Transmit+0x164>)
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	019b      	lsls	r3, r3, #6
 8001bd8:	440b      	add	r3, r1
 8001bda:	011b      	lsls	r3, r3, #4
 8001bdc:	4423      	add	r3, r4
 8001bde:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	4619      	mov	r1, r3
 8001be6:	4613      	mov	r3, r2
 8001be8:	019b      	lsls	r3, r3, #6
 8001bea:	4413      	add	r3, r2
 8001bec:	011b      	lsls	r3, r3, #4
 8001bee:	440b      	add	r3, r1
 8001bf0:	4a12      	ldr	r2, [pc, #72]	; (8001c3c <UART_Transmit+0x164>)
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3306      	adds	r3, #6
 8001bf6:	88ba      	ldrh	r2, [r7, #4]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f004 f975 	bl	8005ee8 <HAL_UART_Transmit_DMA>
		uart[id].index_read_tx = (uart[id].index_read_tx + len) % LEN_BUFFER;
 8001bfe:	79fa      	ldrb	r2, [r7, #7]
 8001c00:	490e      	ldr	r1, [pc, #56]	; (8001c3c <UART_Transmit+0x164>)
 8001c02:	4613      	mov	r3, r2
 8001c04:	019b      	lsls	r3, r3, #6
 8001c06:	4413      	add	r3, r2
 8001c08:	011b      	lsls	r3, r3, #4
 8001c0a:	440b      	add	r3, r1
 8001c0c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c10:	881a      	ldrh	r2, [r3, #0]
 8001c12:	88bb      	ldrh	r3, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	79fa      	ldrb	r2, [r7, #7]
 8001c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c1e:	b298      	uxth	r0, r3
 8001c20:	4906      	ldr	r1, [pc, #24]	; (8001c3c <UART_Transmit+0x164>)
 8001c22:	4613      	mov	r3, r2
 8001c24:	019b      	lsls	r3, r3, #6
 8001c26:	4413      	add	r3, r2
 8001c28:	011b      	lsls	r3, r3, #4
 8001c2a:	440b      	add	r3, r1
 8001c2c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c30:	4602      	mov	r2, r0
 8001c32:	801a      	strh	r2, [r3, #0]
	}
}
 8001c34:	bf00      	nop
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd90      	pop	{r4, r7, pc}
 8001c3c:	20000540 	.word	0x20000540

08001c40 <get_nb_bytes_available>:
 * @brief Compute the numbers of byte available in the buffer
 * @param id Id of the uart
 * @return nb of bytes available
 */
uint16_t get_nb_bytes_available(uart_e id)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	71fb      	strb	r3, [r7, #7]
	uint16_t nb = 0 ;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	81fb      	strh	r3, [r7, #14]
	if(uart[id].index_write_rx > uart[id].index_read_rx)
 8001c4e:	79fa      	ldrb	r2, [r7, #7]
 8001c50:	4932      	ldr	r1, [pc, #200]	; (8001d1c <get_nb_bytes_available+0xdc>)
 8001c52:	4613      	mov	r3, r2
 8001c54:	019b      	lsls	r3, r3, #6
 8001c56:	4413      	add	r3, r2
 8001c58:	011b      	lsls	r3, r3, #4
 8001c5a:	440b      	add	r3, r1
 8001c5c:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	b299      	uxth	r1, r3
 8001c64:	79fa      	ldrb	r2, [r7, #7]
 8001c66:	482d      	ldr	r0, [pc, #180]	; (8001d1c <get_nb_bytes_available+0xdc>)
 8001c68:	4613      	mov	r3, r2
 8001c6a:	019b      	lsls	r3, r3, #6
 8001c6c:	4413      	add	r3, r2
 8001c6e:	011b      	lsls	r3, r3, #4
 8001c70:	4403      	add	r3, r0
 8001c72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	4299      	cmp	r1, r3
 8001c7a:	d917      	bls.n	8001cac <get_nb_bytes_available+0x6c>
	{
		nb = uart[id].index_write_rx - uart[id].index_read_rx ;
 8001c7c:	79fa      	ldrb	r2, [r7, #7]
 8001c7e:	4927      	ldr	r1, [pc, #156]	; (8001d1c <get_nb_bytes_available+0xdc>)
 8001c80:	4613      	mov	r3, r2
 8001c82:	019b      	lsls	r3, r3, #6
 8001c84:	4413      	add	r3, r2
 8001c86:	011b      	lsls	r3, r3, #4
 8001c88:	440b      	add	r3, r1
 8001c8a:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	b299      	uxth	r1, r3
 8001c92:	79fa      	ldrb	r2, [r7, #7]
 8001c94:	4821      	ldr	r0, [pc, #132]	; (8001d1c <get_nb_bytes_available+0xdc>)
 8001c96:	4613      	mov	r3, r2
 8001c98:	019b      	lsls	r3, r3, #6
 8001c9a:	4413      	add	r3, r2
 8001c9c:	011b      	lsls	r3, r3, #4
 8001c9e:	4403      	add	r3, r0
 8001ca0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	1acb      	subs	r3, r1, r3
 8001ca8:	81fb      	strh	r3, [r7, #14]
 8001caa:	e030      	b.n	8001d0e <get_nb_bytes_available+0xce>
	}
	else if(uart[id].index_write_rx < uart[id].index_read_rx)
 8001cac:	79fa      	ldrb	r2, [r7, #7]
 8001cae:	491b      	ldr	r1, [pc, #108]	; (8001d1c <get_nb_bytes_available+0xdc>)
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	019b      	lsls	r3, r3, #6
 8001cb4:	4413      	add	r3, r2
 8001cb6:	011b      	lsls	r3, r3, #4
 8001cb8:	440b      	add	r3, r1
 8001cba:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	b299      	uxth	r1, r3
 8001cc2:	79fa      	ldrb	r2, [r7, #7]
 8001cc4:	4815      	ldr	r0, [pc, #84]	; (8001d1c <get_nb_bytes_available+0xdc>)
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	019b      	lsls	r3, r3, #6
 8001cca:	4413      	add	r3, r2
 8001ccc:	011b      	lsls	r3, r3, #4
 8001cce:	4403      	add	r3, r0
 8001cd0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	4299      	cmp	r1, r3
 8001cd8:	d219      	bcs.n	8001d0e <get_nb_bytes_available+0xce>
	{
		nb = LEN_BUFFER - uart[id].index_read_rx + uart[id].index_write_rx ;
 8001cda:	79fa      	ldrb	r2, [r7, #7]
 8001cdc:	490f      	ldr	r1, [pc, #60]	; (8001d1c <get_nb_bytes_available+0xdc>)
 8001cde:	4613      	mov	r3, r2
 8001ce0:	019b      	lsls	r3, r3, #6
 8001ce2:	4413      	add	r3, r2
 8001ce4:	011b      	lsls	r3, r3, #4
 8001ce6:	440b      	add	r3, r1
 8001ce8:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8001cec:	881b      	ldrh	r3, [r3, #0]
 8001cee:	b299      	uxth	r1, r3
 8001cf0:	79fa      	ldrb	r2, [r7, #7]
 8001cf2:	480a      	ldr	r0, [pc, #40]	; (8001d1c <get_nb_bytes_available+0xdc>)
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	019b      	lsls	r3, r3, #6
 8001cf8:	4413      	add	r3, r2
 8001cfa:	011b      	lsls	r3, r3, #4
 8001cfc:	4403      	add	r3, r0
 8001cfe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	1acb      	subs	r3, r1, r3
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001d0c:	81fb      	strh	r3, [r7, #14]
	}
	return nb;
 8001d0e:	89fb      	ldrh	r3, [r7, #14]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	20000540 	.word	0x20000540

08001d20 <MPU_Init>:
/*
 * @brief Wake up the MPU6000
 *		  Configure the Gyroscope and the Accelerometer
 */
void MPU_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af02      	add	r7, sp, #8
	/* Set the Gyroscope and Accelerometer data buffer */
	mpu.gyro_data = &mpu.data[8];
 8001d26:	4b53      	ldr	r3, [pc, #332]	; (8001e74 <MPU_Init+0x154>)
 8001d28:	4a53      	ldr	r2, [pc, #332]	; (8001e78 <MPU_Init+0x158>)
 8001d2a:	611a      	str	r2, [r3, #16]
	mpu.acc_data = &mpu.data[0];
 8001d2c:	4b51      	ldr	r3, [pc, #324]	; (8001e74 <MPU_Init+0x154>)
 8001d2e:	4a53      	ldr	r2, [pc, #332]	; (8001e7c <MPU_Init+0x15c>)
 8001d30:	619a      	str	r2, [r3, #24]
	/* Disable I2C */
	SPI_Transmit(SPI_MPU, CS_MPU, mpu_disable_i2c, 2);
	HAL_Delay(150);
#else
	/* Power up the mpu an wait for it to start */
	HAL_GPIO_WritePin(MPU_POWER_GPIO_Port, MPU_POWER_Pin, GPIO_PIN_SET);
 8001d32:	2201      	movs	r2, #1
 8001d34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d38:	4851      	ldr	r0, [pc, #324]	; (8001e80 <MPU_Init+0x160>)
 8001d3a:	f001 fddf 	bl	80038fc <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001d3e:	20c8      	movs	r0, #200	; 0xc8
 8001d40:	f000 ff08 	bl	8002b54 <HAL_Delay>
	/* Wake up the mpu */
	uint8_t wakeup_data = 0x80;
 8001d44:	2380      	movs	r3, #128	; 0x80
 8001d46:	71fb      	strb	r3, [r7, #7]
	I2C_Mem_Write(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_PWR_MGMT_1, &wakeup_data, 1);
 8001d48:	1dfb      	adds	r3, r7, #7
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	9200      	str	r2, [sp, #0]
 8001d4e:	226b      	movs	r2, #107	; 0x6b
 8001d50:	21d0      	movs	r1, #208	; 0xd0
 8001d52:	2000      	movs	r0, #0
 8001d54:	f7ff fcba 	bl	80016cc <I2C_Mem_Write>
	HAL_Delay(15);
 8001d58:	200f      	movs	r0, #15
 8001d5a:	f000 fefb 	bl	8002b54 <HAL_Delay>
	/* Select the clock */
	uint8_t clock_select = 0x03;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	71bb      	strb	r3, [r7, #6]
	I2C_Mem_Write(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_PWR_MGMT_1, &clock_select, 1);
 8001d62:	1dbb      	adds	r3, r7, #6
 8001d64:	2201      	movs	r2, #1
 8001d66:	9200      	str	r2, [sp, #0]
 8001d68:	226b      	movs	r2, #107	; 0x6b
 8001d6a:	21d0      	movs	r1, #208	; 0xd0
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	f7ff fcad 	bl	80016cc <I2C_Mem_Write>
	SPI_Transmit(SPI_MPU, CS_MPU, temp_write, 2);
	HAL_Delay(150);
#else
	/* Sensitivity configuration */
	uint8_t temp;
	I2C_Mem_Read(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_GYRO_CONFIG, &temp, 1);
 8001d72:	1d7b      	adds	r3, r7, #5
 8001d74:	2201      	movs	r2, #1
 8001d76:	9200      	str	r2, [sp, #0]
 8001d78:	221b      	movs	r2, #27
 8001d7a:	21d0      	movs	r1, #208	; 0xd0
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f7ff fcc7 	bl	8001710 <I2C_Mem_Read>
	temp = (temp & 0xE7) | (uint8_t)mpu.gyro_range << 3;
 8001d82:	797b      	ldrb	r3, [r7, #5]
 8001d84:	b25b      	sxtb	r3, r3
 8001d86:	f023 0318 	bic.w	r3, r3, #24
 8001d8a:	b25a      	sxtb	r2, r3
 8001d8c:	4b39      	ldr	r3, [pc, #228]	; (8001e74 <MPU_Init+0x154>)
 8001d8e:	7bdb      	ldrb	r3, [r3, #15]
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	b25b      	sxtb	r3, r3
 8001d94:	4313      	orrs	r3, r2
 8001d96:	b25b      	sxtb	r3, r3
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	717b      	strb	r3, [r7, #5]
	I2C_Mem_Write(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_GYRO_CONFIG, &temp, 1);
 8001d9c:	1d7b      	adds	r3, r7, #5
 8001d9e:	2201      	movs	r2, #1
 8001da0:	9200      	str	r2, [sp, #0]
 8001da2:	221b      	movs	r2, #27
 8001da4:	21d0      	movs	r1, #208	; 0xd0
 8001da6:	2000      	movs	r0, #0
 8001da8:	f7ff fc90 	bl	80016cc <I2C_Mem_Write>
#endif
	switch(mpu.gyro_range)
 8001dac:	4b31      	ldr	r3, [pc, #196]	; (8001e74 <MPU_Init+0x154>)
 8001dae:	7bdb      	ldrb	r3, [r3, #15]
 8001db0:	2b03      	cmp	r3, #3
 8001db2:	d81b      	bhi.n	8001dec <MPU_Init+0xcc>
 8001db4:	a201      	add	r2, pc, #4	; (adr r2, 8001dbc <MPU_Init+0x9c>)
 8001db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dba:	bf00      	nop
 8001dbc:	08001dcd 	.word	0x08001dcd
 8001dc0:	08001dd5 	.word	0x08001dd5
 8001dc4:	08001ddd 	.word	0x08001ddd
 8001dc8:	08001de5 	.word	0x08001de5
	{
		case MPU_GYRO_250s :
			mpu.gyro_conversion = (float)1 / MPU6050_GYRO_SENS_250 ;
 8001dcc:	4b29      	ldr	r3, [pc, #164]	; (8001e74 <MPU_Init+0x154>)
 8001dce:	4a2d      	ldr	r2, [pc, #180]	; (8001e84 <MPU_Init+0x164>)
 8001dd0:	615a      	str	r2, [r3, #20]
			break;
 8001dd2:	e00b      	b.n	8001dec <MPU_Init+0xcc>
		case MPU_GYRO_500s :
			mpu.gyro_conversion = (float)1 / MPU6050_GYRO_SENS_500 ;
 8001dd4:	4b27      	ldr	r3, [pc, #156]	; (8001e74 <MPU_Init+0x154>)
 8001dd6:	4a2c      	ldr	r2, [pc, #176]	; (8001e88 <MPU_Init+0x168>)
 8001dd8:	615a      	str	r2, [r3, #20]
			break;
 8001dda:	e007      	b.n	8001dec <MPU_Init+0xcc>
		case MPU_GYRO_1000s :
			mpu.gyro_conversion = (float)1 / MPU6050_GYRO_SENS_1000 ;
 8001ddc:	4b25      	ldr	r3, [pc, #148]	; (8001e74 <MPU_Init+0x154>)
 8001dde:	4a2b      	ldr	r2, [pc, #172]	; (8001e8c <MPU_Init+0x16c>)
 8001de0:	615a      	str	r2, [r3, #20]
			break;
 8001de2:	e003      	b.n	8001dec <MPU_Init+0xcc>
		case MPU_GYRO_2000s :
			mpu.gyro_conversion = (float)1 / MPU6050_GYRO_SENS_2000 ;
 8001de4:	4b23      	ldr	r3, [pc, #140]	; (8001e74 <MPU_Init+0x154>)
 8001de6:	4a2a      	ldr	r2, [pc, #168]	; (8001e90 <MPU_Init+0x170>)
 8001de8:	615a      	str	r2, [r3, #20]
			break;
 8001dea:	bf00      	nop
	temp_write[1] = (temp_read[1] & 0xE7) | (uint8_t)mpu.acc_range << 3;
	SPI_Transmit(SPI_MPU, CS_MPU, temp_write, 2);
	HAL_Delay(150);
#else
	/* Sensitivity configuration */
	I2C_Mem_Read(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_ACCEL_CONFIG, &temp, 1);
 8001dec:	1d7b      	adds	r3, r7, #5
 8001dee:	2201      	movs	r2, #1
 8001df0:	9200      	str	r2, [sp, #0]
 8001df2:	221c      	movs	r2, #28
 8001df4:	21d0      	movs	r1, #208	; 0xd0
 8001df6:	2000      	movs	r0, #0
 8001df8:	f7ff fc8a 	bl	8001710 <I2C_Mem_Read>
	temp = (temp & 0xE7) | (uint8_t)mpu.acc_range << 3;
 8001dfc:	797b      	ldrb	r3, [r7, #5]
 8001dfe:	b25b      	sxtb	r3, r3
 8001e00:	f023 0318 	bic.w	r3, r3, #24
 8001e04:	b25a      	sxtb	r2, r3
 8001e06:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <MPU_Init+0x154>)
 8001e08:	7f1b      	ldrb	r3, [r3, #28]
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	b25b      	sxtb	r3, r3
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	b25b      	sxtb	r3, r3
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	717b      	strb	r3, [r7, #5]
	I2C_Mem_Write(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_ACCEL_CONFIG, &temp, 1);
 8001e16:	1d7b      	adds	r3, r7, #5
 8001e18:	2201      	movs	r2, #1
 8001e1a:	9200      	str	r2, [sp, #0]
 8001e1c:	221c      	movs	r2, #28
 8001e1e:	21d0      	movs	r1, #208	; 0xd0
 8001e20:	2000      	movs	r0, #0
 8001e22:	f7ff fc53 	bl	80016cc <I2C_Mem_Write>
#endif
	switch(mpu.acc_range)
 8001e26:	4b13      	ldr	r3, [pc, #76]	; (8001e74 <MPU_Init+0x154>)
 8001e28:	7f1b      	ldrb	r3, [r3, #28]
 8001e2a:	2b03      	cmp	r3, #3
 8001e2c:	d81e      	bhi.n	8001e6c <MPU_Init+0x14c>
 8001e2e:	a201      	add	r2, pc, #4	; (adr r2, 8001e34 <MPU_Init+0x114>)
 8001e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e34:	08001e45 	.word	0x08001e45
 8001e38:	08001e4f 	.word	0x08001e4f
 8001e3c:	08001e59 	.word	0x08001e59
 8001e40:	08001e63 	.word	0x08001e63
	{
		case MPU_ACC_2G :
			mpu.acc_conversion = (float)1 / MPU6050_ACCE_SENS_2 ;
 8001e44:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <MPU_Init+0x154>)
 8001e46:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8001e4a:	621a      	str	r2, [r3, #32]
			break;
 8001e4c:	e00e      	b.n	8001e6c <MPU_Init+0x14c>
		case MPU_ACC_4G :
			mpu.acc_conversion = (float)1 / MPU6050_ACCE_SENS_4 ;
 8001e4e:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <MPU_Init+0x154>)
 8001e50:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001e54:	621a      	str	r2, [r3, #32]
			break;
 8001e56:	e009      	b.n	8001e6c <MPU_Init+0x14c>
		case MPU_ACC_8G :
			mpu.acc_conversion = (float)1 / MPU6050_ACCE_SENS_8 ;
 8001e58:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <MPU_Init+0x154>)
 8001e5a:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8001e5e:	621a      	str	r2, [r3, #32]
			break;
 8001e60:	e004      	b.n	8001e6c <MPU_Init+0x14c>
		case MPU_ACC_16G :
			mpu.acc_conversion = (float)1 / MPU6050_ACCE_SENS_16 ;
 8001e62:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <MPU_Init+0x154>)
 8001e64:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001e68:	621a      	str	r2, [r3, #32]
			break;
 8001e6a:	bf00      	nop
	}
}
 8001e6c:	bf00      	nop
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	2000034c 	.word	0x2000034c
 8001e78:	20000355 	.word	0x20000355
 8001e7c:	2000034d 	.word	0x2000034d
 8001e80:	40020800 	.word	0x40020800
 8001e84:	3bfa232d 	.word	0x3bfa232d
 8001e88:	3c7a232d 	.word	0x3c7a232d
 8001e8c:	3cf9c190 	.word	0x3cf9c190
 8001e90:	3d79c190 	.word	0x3d79c190

08001e94 <MPU_Read_All>:
void MPU_Read_All(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af02      	add	r7, sp, #8
#if USE_SPI
	uint8_t registers [14] = {MPU6050_ACCEL_XOUT_H | MPU6050_READ};
	SPI_Transmit_Receive(SPI_MPU, CS_MPU, registers, mpu.data, 14);
#else
	I2C_Mem_Read(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_ACCEL_XOUT_H, mpu.data, 14);
 8001e9a:	230e      	movs	r3, #14
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <MPU_Read_All+0x1c>)
 8001ea0:	223b      	movs	r2, #59	; 0x3b
 8001ea2:	21d0      	movs	r1, #208	; 0xd0
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	f7ff fc33 	bl	8001710 <I2C_Mem_Read>
#endif
}
 8001eaa:	bf00      	nop
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	2000034d 	.word	0x2000034d

08001eb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	607b      	str	r3, [r7, #4]
 8001ebe:	4b27      	ldr	r3, [pc, #156]	; (8001f5c <MX_DMA_Init+0xa8>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	4a26      	ldr	r2, [pc, #152]	; (8001f5c <MX_DMA_Init+0xa8>)
 8001ec4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eca:	4b24      	ldr	r3, [pc, #144]	; (8001f5c <MX_DMA_Init+0xa8>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ed2:	607b      	str	r3, [r7, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	603b      	str	r3, [r7, #0]
 8001eda:	4b20      	ldr	r3, [pc, #128]	; (8001f5c <MX_DMA_Init+0xa8>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	4a1f      	ldr	r2, [pc, #124]	; (8001f5c <MX_DMA_Init+0xa8>)
 8001ee0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee6:	4b1d      	ldr	r3, [pc, #116]	; (8001f5c <MX_DMA_Init+0xa8>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eee:	603b      	str	r3, [r7, #0]
 8001ef0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	200b      	movs	r0, #11
 8001ef8:	f000 ff2b 	bl	8002d52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001efc:	200b      	movs	r0, #11
 8001efe:	f000 ff44 	bl	8002d8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001f02:	2200      	movs	r2, #0
 8001f04:	2100      	movs	r1, #0
 8001f06:	200d      	movs	r0, #13
 8001f08:	f000 ff23 	bl	8002d52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001f0c:	200d      	movs	r0, #13
 8001f0e:	f000 ff3c 	bl	8002d8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001f12:	2200      	movs	r2, #0
 8001f14:	2100      	movs	r1, #0
 8001f16:	200f      	movs	r0, #15
 8001f18:	f000 ff1b 	bl	8002d52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001f1c:	200f      	movs	r0, #15
 8001f1e:	f000 ff34 	bl	8002d8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001f22:	2200      	movs	r2, #0
 8001f24:	2100      	movs	r1, #0
 8001f26:	2011      	movs	r0, #17
 8001f28:	f000 ff13 	bl	8002d52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001f2c:	2011      	movs	r0, #17
 8001f2e:	f000 ff2c 	bl	8002d8a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001f32:	2200      	movs	r2, #0
 8001f34:	2100      	movs	r1, #0
 8001f36:	203a      	movs	r0, #58	; 0x3a
 8001f38:	f000 ff0b 	bl	8002d52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001f3c:	203a      	movs	r0, #58	; 0x3a
 8001f3e:	f000 ff24 	bl	8002d8a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001f42:	2200      	movs	r2, #0
 8001f44:	2100      	movs	r1, #0
 8001f46:	2046      	movs	r0, #70	; 0x46
 8001f48:	f000 ff03 	bl	8002d52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001f4c:	2046      	movs	r0, #70	; 0x46
 8001f4e:	f000 ff1c 	bl	8002d8a <HAL_NVIC_EnableIRQ>

}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40023800 	.word	0x40023800

08001f60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b088      	sub	sp, #32
 8001f64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f66:	f107 030c 	add.w	r3, r7, #12
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	605a      	str	r2, [r3, #4]
 8001f70:	609a      	str	r2, [r3, #8]
 8001f72:	60da      	str	r2, [r3, #12]
 8001f74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	4b20      	ldr	r3, [pc, #128]	; (8001ffc <MX_GPIO_Init+0x9c>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a1f      	ldr	r2, [pc, #124]	; (8001ffc <MX_GPIO_Init+0x9c>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <MX_GPIO_Init+0x9c>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	60bb      	str	r3, [r7, #8]
 8001f90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	607b      	str	r3, [r7, #4]
 8001f96:	4b19      	ldr	r3, [pc, #100]	; (8001ffc <MX_GPIO_Init+0x9c>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4a18      	ldr	r2, [pc, #96]	; (8001ffc <MX_GPIO_Init+0x9c>)
 8001f9c:	f043 0302 	orr.w	r3, r3, #2
 8001fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa2:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <MX_GPIO_Init+0x9c>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	607b      	str	r3, [r7, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	603b      	str	r3, [r7, #0]
 8001fb2:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <MX_GPIO_Init+0x9c>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	4a11      	ldr	r2, [pc, #68]	; (8001ffc <MX_GPIO_Init+0x9c>)
 8001fb8:	f043 0304 	orr.w	r3, r3, #4
 8001fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fbe:	4b0f      	ldr	r3, [pc, #60]	; (8001ffc <MX_GPIO_Init+0x9c>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	f003 0304 	and.w	r3, r3, #4
 8001fc6:	603b      	str	r3, [r7, #0]
 8001fc8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MPU_POWER_GPIO_Port, MPU_POWER_Pin, GPIO_PIN_RESET);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fd0:	480b      	ldr	r0, [pc, #44]	; (8002000 <MX_GPIO_Init+0xa0>)
 8001fd2:	f001 fc93 	bl	80038fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MPU_POWER_Pin;
 8001fd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MPU_POWER_GPIO_Port, &GPIO_InitStruct);
 8001fe8:	f107 030c 	add.w	r3, r7, #12
 8001fec:	4619      	mov	r1, r3
 8001fee:	4804      	ldr	r0, [pc, #16]	; (8002000 <MX_GPIO_Init+0xa0>)
 8001ff0:	f001 fae8 	bl	80035c4 <HAL_GPIO_Init>

}
 8001ff4:	bf00      	nop
 8001ff6:	3720      	adds	r7, #32
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40020800 	.word	0x40020800

08002004 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002008:	4b12      	ldr	r3, [pc, #72]	; (8002054 <MX_I2C1_Init+0x50>)
 800200a:	4a13      	ldr	r2, [pc, #76]	; (8002058 <MX_I2C1_Init+0x54>)
 800200c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800200e:	4b11      	ldr	r3, [pc, #68]	; (8002054 <MX_I2C1_Init+0x50>)
 8002010:	4a12      	ldr	r2, [pc, #72]	; (800205c <MX_I2C1_Init+0x58>)
 8002012:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002014:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <MX_I2C1_Init+0x50>)
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800201a:	4b0e      	ldr	r3, [pc, #56]	; (8002054 <MX_I2C1_Init+0x50>)
 800201c:	2200      	movs	r2, #0
 800201e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002020:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <MX_I2C1_Init+0x50>)
 8002022:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002026:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002028:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <MX_I2C1_Init+0x50>)
 800202a:	2200      	movs	r2, #0
 800202c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800202e:	4b09      	ldr	r3, [pc, #36]	; (8002054 <MX_I2C1_Init+0x50>)
 8002030:	2200      	movs	r2, #0
 8002032:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002034:	4b07      	ldr	r3, [pc, #28]	; (8002054 <MX_I2C1_Init+0x50>)
 8002036:	2200      	movs	r2, #0
 8002038:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800203a:	4b06      	ldr	r3, [pc, #24]	; (8002054 <MX_I2C1_Init+0x50>)
 800203c:	2200      	movs	r2, #0
 800203e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002040:	4804      	ldr	r0, [pc, #16]	; (8002054 <MX_I2C1_Init+0x50>)
 8002042:	f001 fc75 	bl	8003930 <HAL_I2C_Init>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800204c:	f000 f94a 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002050:	bf00      	nop
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20000dc4 	.word	0x20000dc4
 8002058:	40005400 	.word	0x40005400
 800205c:	00061a80 	.word	0x00061a80

08002060 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b08a      	sub	sp, #40	; 0x28
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002068:	f107 0314 	add.w	r3, r7, #20
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a48      	ldr	r2, [pc, #288]	; (80021a0 <HAL_I2C_MspInit+0x140>)
 800207e:	4293      	cmp	r3, r2
 8002080:	f040 8089 	bne.w	8002196 <HAL_I2C_MspInit+0x136>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002084:	2300      	movs	r3, #0
 8002086:	613b      	str	r3, [r7, #16]
 8002088:	4b46      	ldr	r3, [pc, #280]	; (80021a4 <HAL_I2C_MspInit+0x144>)
 800208a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208c:	4a45      	ldr	r2, [pc, #276]	; (80021a4 <HAL_I2C_MspInit+0x144>)
 800208e:	f043 0302 	orr.w	r3, r3, #2
 8002092:	6313      	str	r3, [r2, #48]	; 0x30
 8002094:	4b43      	ldr	r3, [pc, #268]	; (80021a4 <HAL_I2C_MspInit+0x144>)
 8002096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	4b3f      	ldr	r3, [pc, #252]	; (80021a4 <HAL_I2C_MspInit+0x144>)
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	4a3e      	ldr	r2, [pc, #248]	; (80021a4 <HAL_I2C_MspInit+0x144>)
 80020aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020ae:	6413      	str	r3, [r2, #64]	; 0x40
 80020b0:	4b3c      	ldr	r3, [pc, #240]	; (80021a4 <HAL_I2C_MspInit+0x144>)
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020c2:	2312      	movs	r3, #18
 80020c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ca:	2303      	movs	r3, #3
 80020cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020ce:	2304      	movs	r3, #4
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d2:	f107 0314 	add.w	r3, r7, #20
 80020d6:	4619      	mov	r1, r3
 80020d8:	4833      	ldr	r0, [pc, #204]	; (80021a8 <HAL_I2C_MspInit+0x148>)
 80020da:	f001 fa73 	bl	80035c4 <HAL_GPIO_Init>

    /* I2C1 clock enable */

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80020de:	4b33      	ldr	r3, [pc, #204]	; (80021ac <HAL_I2C_MspInit+0x14c>)
 80020e0:	4a33      	ldr	r2, [pc, #204]	; (80021b0 <HAL_I2C_MspInit+0x150>)
 80020e2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80020e4:	4b31      	ldr	r3, [pc, #196]	; (80021ac <HAL_I2C_MspInit+0x14c>)
 80020e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020ea:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020ec:	4b2f      	ldr	r3, [pc, #188]	; (80021ac <HAL_I2C_MspInit+0x14c>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020f2:	4b2e      	ldr	r3, [pc, #184]	; (80021ac <HAL_I2C_MspInit+0x14c>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020f8:	4b2c      	ldr	r3, [pc, #176]	; (80021ac <HAL_I2C_MspInit+0x14c>)
 80020fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020fe:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002100:	4b2a      	ldr	r3, [pc, #168]	; (80021ac <HAL_I2C_MspInit+0x14c>)
 8002102:	2200      	movs	r2, #0
 8002104:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002106:	4b29      	ldr	r3, [pc, #164]	; (80021ac <HAL_I2C_MspInit+0x14c>)
 8002108:	2200      	movs	r2, #0
 800210a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800210c:	4b27      	ldr	r3, [pc, #156]	; (80021ac <HAL_I2C_MspInit+0x14c>)
 800210e:	2200      	movs	r2, #0
 8002110:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002112:	4b26      	ldr	r3, [pc, #152]	; (80021ac <HAL_I2C_MspInit+0x14c>)
 8002114:	2200      	movs	r2, #0
 8002116:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002118:	4b24      	ldr	r3, [pc, #144]	; (80021ac <HAL_I2C_MspInit+0x14c>)
 800211a:	2200      	movs	r2, #0
 800211c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800211e:	4823      	ldr	r0, [pc, #140]	; (80021ac <HAL_I2C_MspInit+0x14c>)
 8002120:	f000 fe4e 	bl	8002dc0 <HAL_DMA_Init>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 800212a:	f000 f8db 	bl	80022e4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a1e      	ldr	r2, [pc, #120]	; (80021ac <HAL_I2C_MspInit+0x14c>)
 8002132:	639a      	str	r2, [r3, #56]	; 0x38
 8002134:	4a1d      	ldr	r2, [pc, #116]	; (80021ac <HAL_I2C_MspInit+0x14c>)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800213a:	4b1e      	ldr	r3, [pc, #120]	; (80021b4 <HAL_I2C_MspInit+0x154>)
 800213c:	4a1e      	ldr	r2, [pc, #120]	; (80021b8 <HAL_I2C_MspInit+0x158>)
 800213e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8002140:	4b1c      	ldr	r3, [pc, #112]	; (80021b4 <HAL_I2C_MspInit+0x154>)
 8002142:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002146:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002148:	4b1a      	ldr	r3, [pc, #104]	; (80021b4 <HAL_I2C_MspInit+0x154>)
 800214a:	2240      	movs	r2, #64	; 0x40
 800214c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800214e:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <HAL_I2C_MspInit+0x154>)
 8002150:	2200      	movs	r2, #0
 8002152:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002154:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <HAL_I2C_MspInit+0x154>)
 8002156:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800215a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800215c:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <HAL_I2C_MspInit+0x154>)
 800215e:	2200      	movs	r2, #0
 8002160:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002162:	4b14      	ldr	r3, [pc, #80]	; (80021b4 <HAL_I2C_MspInit+0x154>)
 8002164:	2200      	movs	r2, #0
 8002166:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002168:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <HAL_I2C_MspInit+0x154>)
 800216a:	2200      	movs	r2, #0
 800216c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800216e:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <HAL_I2C_MspInit+0x154>)
 8002170:	2200      	movs	r2, #0
 8002172:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002174:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <HAL_I2C_MspInit+0x154>)
 8002176:	2200      	movs	r2, #0
 8002178:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800217a:	480e      	ldr	r0, [pc, #56]	; (80021b4 <HAL_I2C_MspInit+0x154>)
 800217c:	f000 fe20 	bl	8002dc0 <HAL_DMA_Init>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8002186:	f000 f8ad 	bl	80022e4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a09      	ldr	r2, [pc, #36]	; (80021b4 <HAL_I2C_MspInit+0x154>)
 800218e:	635a      	str	r2, [r3, #52]	; 0x34
 8002190:	4a08      	ldr	r2, [pc, #32]	; (80021b4 <HAL_I2C_MspInit+0x154>)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002196:	bf00      	nop
 8002198:	3728      	adds	r7, #40	; 0x28
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	40005400 	.word	0x40005400
 80021a4:	40023800 	.word	0x40023800
 80021a8:	40020400 	.word	0x40020400
 80021ac:	20000e18 	.word	0x20000e18
 80021b0:	40026010 	.word	0x40026010
 80021b4:	20000d64 	.word	0x20000d64
 80021b8:	400260a0 	.word	0x400260a0

080021bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021c0:	f000 fc56 	bl	8002a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021c4:	f000 f824 	bl	8002210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021c8:	f7ff feca 	bl	8001f60 <MX_GPIO_Init>
  MX_DMA_Init();
 80021cc:	f7ff fe72 	bl	8001eb4 <MX_DMA_Init>
  MX_UART4_Init();
 80021d0:	f000 fa76 	bl	80026c0 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80021d4:	f000 fa9e 	bl	8002714 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80021d8:	f000 f95e 	bl	8002498 <MX_TIM3_Init>
  MX_I2C1_Init();
 80021dc:	f7ff ff12 	bl	8002004 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* Peripherals initialization */
  UART_Init();
 80021e0:	f7ff fc2e 	bl	8001a40 <UART_Init>
  /* Sensors initialization */
  HAL_Delay(100);
 80021e4:	2064      	movs	r0, #100	; 0x64
 80021e6:	f000 fcb5 	bl	8002b54 <HAL_Delay>
  MPU_Init();
 80021ea:	f7ff fd99 	bl	8001d20 <MPU_Init>

  /* System initialization */
  DATA_LOGGER_Init(&mark1);
 80021ee:	4807      	ldr	r0, [pc, #28]	; (800220c <main+0x50>)
 80021f0:	f7fe f966 	bl	80004c0 <DATA_LOGGER_Init>
  TASK_Init(&mark1);
 80021f4:	4805      	ldr	r0, [pc, #20]	; (800220c <main+0x50>)
 80021f6:	f7ff f9dd 	bl	80015b4 <TASK_Init>
  SCHEDULER_init();
 80021fa:	f7fe ff19 	bl	8001030 <SCHEDULER_init>
  TIMER_Start_All_Channels(timer_eMOTORS);
 80021fe:	2000      	movs	r0, #0
 8002200:	f7ff faa8 	bl	8001754 <TIMER_Start_All_Channels>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCHEDULER_run();
 8002204:	f7fe ff28 	bl	8001058 <SCHEDULER_run>
 8002208:	e7fc      	b.n	8002204 <main+0x48>
 800220a:	bf00      	nop
 800220c:	20000d60 	.word	0x20000d60

08002210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b094      	sub	sp, #80	; 0x50
 8002214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002216:	f107 0320 	add.w	r3, r7, #32
 800221a:	2230      	movs	r2, #48	; 0x30
 800221c:	2100      	movs	r1, #0
 800221e:	4618      	mov	r0, r3
 8002220:	f004 ff96 	bl	8007150 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002224:	f107 030c 	add.w	r3, r7, #12
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002234:	2300      	movs	r3, #0
 8002236:	60bb      	str	r3, [r7, #8]
 8002238:	4b28      	ldr	r3, [pc, #160]	; (80022dc <SystemClock_Config+0xcc>)
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	4a27      	ldr	r2, [pc, #156]	; (80022dc <SystemClock_Config+0xcc>)
 800223e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002242:	6413      	str	r3, [r2, #64]	; 0x40
 8002244:	4b25      	ldr	r3, [pc, #148]	; (80022dc <SystemClock_Config+0xcc>)
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002250:	2300      	movs	r3, #0
 8002252:	607b      	str	r3, [r7, #4]
 8002254:	4b22      	ldr	r3, [pc, #136]	; (80022e0 <SystemClock_Config+0xd0>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a21      	ldr	r2, [pc, #132]	; (80022e0 <SystemClock_Config+0xd0>)
 800225a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	4b1f      	ldr	r3, [pc, #124]	; (80022e0 <SystemClock_Config+0xd0>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002268:	607b      	str	r3, [r7, #4]
 800226a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800226c:	2302      	movs	r3, #2
 800226e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002270:	2301      	movs	r3, #1
 8002272:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002274:	2310      	movs	r3, #16
 8002276:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002278:	2302      	movs	r3, #2
 800227a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800227c:	2300      	movs	r3, #0
 800227e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002280:	2308      	movs	r3, #8
 8002282:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002284:	23a8      	movs	r3, #168	; 0xa8
 8002286:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002288:	2302      	movs	r3, #2
 800228a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800228c:	2304      	movs	r3, #4
 800228e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002290:	f107 0320 	add.w	r3, r7, #32
 8002294:	4618      	mov	r0, r3
 8002296:	f002 fb0b 	bl	80048b0 <HAL_RCC_OscConfig>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80022a0:	f000 f820 	bl	80022e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022a4:	230f      	movs	r3, #15
 80022a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022a8:	2302      	movs	r3, #2
 80022aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80022b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80022b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80022bc:	f107 030c 	add.w	r3, r7, #12
 80022c0:	2105      	movs	r1, #5
 80022c2:	4618      	mov	r0, r3
 80022c4:	f002 fd6c 	bl	8004da0 <HAL_RCC_ClockConfig>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80022ce:	f000 f809 	bl	80022e4 <Error_Handler>
  }
}
 80022d2:	bf00      	nop
 80022d4:	3750      	adds	r7, #80	; 0x50
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40023800 	.word	0x40023800
 80022e0:	40007000 	.word	0x40007000

080022e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80022e8:	b672      	cpsid	i
}
 80022ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022ec:	e7fe      	b.n	80022ec <Error_Handler+0x8>
	...

080022f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	607b      	str	r3, [r7, #4]
 80022fa:	4b10      	ldr	r3, [pc, #64]	; (800233c <HAL_MspInit+0x4c>)
 80022fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fe:	4a0f      	ldr	r2, [pc, #60]	; (800233c <HAL_MspInit+0x4c>)
 8002300:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002304:	6453      	str	r3, [r2, #68]	; 0x44
 8002306:	4b0d      	ldr	r3, [pc, #52]	; (800233c <HAL_MspInit+0x4c>)
 8002308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800230e:	607b      	str	r3, [r7, #4]
 8002310:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	603b      	str	r3, [r7, #0]
 8002316:	4b09      	ldr	r3, [pc, #36]	; (800233c <HAL_MspInit+0x4c>)
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	4a08      	ldr	r2, [pc, #32]	; (800233c <HAL_MspInit+0x4c>)
 800231c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002320:	6413      	str	r3, [r2, #64]	; 0x40
 8002322:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_MspInit+0x4c>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232a:	603b      	str	r3, [r7, #0]
 800232c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	40023800 	.word	0x40023800

08002340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002344:	e7fe      	b.n	8002344 <NMI_Handler+0x4>

08002346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800234a:	e7fe      	b.n	800234a <HardFault_Handler+0x4>

0800234c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002350:	e7fe      	b.n	8002350 <MemManage_Handler+0x4>

08002352 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002352:	b480      	push	{r7}
 8002354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002356:	e7fe      	b.n	8002356 <BusFault_Handler+0x4>

08002358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800235c:	e7fe      	b.n	800235c <UsageFault_Handler+0x4>

0800235e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800235e:	b480      	push	{r7}
 8002360:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002370:	bf00      	nop
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800237a:	b480      	push	{r7}
 800237c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800238c:	f000 fbc2 	bl	8002b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002390:	bf00      	nop
 8002392:	bd80      	pop	{r7, pc}

08002394 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002398:	4802      	ldr	r0, [pc, #8]	; (80023a4 <DMA1_Stream0_IRQHandler+0x10>)
 800239a:	f000 fea9 	bl	80030f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000e18 	.word	0x20000e18

080023a8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80023ac:	4802      	ldr	r0, [pc, #8]	; (80023b8 <DMA1_Stream2_IRQHandler+0x10>)
 80023ae:	f000 fe9f 	bl	80030f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000ec0 	.word	0x20000ec0

080023bc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80023c0:	4802      	ldr	r0, [pc, #8]	; (80023cc <DMA1_Stream4_IRQHandler+0x10>)
 80023c2:	f000 fe95 	bl	80030f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20001068 	.word	0x20001068

080023d0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80023d4:	4802      	ldr	r0, [pc, #8]	; (80023e0 <DMA1_Stream6_IRQHandler+0x10>)
 80023d6:	f000 fe8b 	bl	80030f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	20000d64 	.word	0x20000d64

080023e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023e8:	4803      	ldr	r0, [pc, #12]	; (80023f8 <USART1_IRQHandler+0x14>)
 80023ea:	f003 fe2b 	bl	8006044 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  UART_Idle_Line_Callback(uart_e1);
 80023ee:	2000      	movs	r0, #0
 80023f0:	f7ff f9dc 	bl	80017ac <UART_Idle_Line_Callback>
  /* USER CODE END USART1_IRQn 1 */
}
 80023f4:	bf00      	nop
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20000fe0 	.word	0x20000fe0

080023fc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002400:	4803      	ldr	r0, [pc, #12]	; (8002410 <UART4_IRQHandler+0x14>)
 8002402:	f003 fe1f 	bl	8006044 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  UART_Idle_Line_Callback(uart_e4);
 8002406:	2001      	movs	r0, #1
 8002408:	f7ff f9d0 	bl	80017ac <UART_Idle_Line_Callback>
  /* USER CODE END UART4_IRQn 1 */
}
 800240c:	bf00      	nop
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20001024 	.word	0x20001024

08002414 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002418:	4802      	ldr	r0, [pc, #8]	; (8002424 <DMA2_Stream2_IRQHandler+0x10>)
 800241a:	f000 fe69 	bl	80030f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20000f80 	.word	0x20000f80

08002428 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800242c:	4802      	ldr	r0, [pc, #8]	; (8002438 <DMA2_Stream7_IRQHandler+0x10>)
 800242e:	f000 fe5f 	bl	80030f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20000f20 	.word	0x20000f20

0800243c <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
	if(huart == &huart4)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a09      	ldr	r2, [pc, #36]	; (800246c <HAL_UART_TxCpltCallback+0x30>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d103      	bne.n	8002454 <HAL_UART_TxCpltCallback+0x18>
	{
		UART_Transfer_Complete_Callback(uart_e4);
 800244c:	2001      	movs	r0, #1
 800244e:	f7ff f9fb 	bl	8001848 <UART_Transfer_Complete_Callback>
	}
	else if(huart == &huart1)
	{
		UART_Transfer_Complete_Callback(uart_e1 );
	}
}
 8002452:	e006      	b.n	8002462 <HAL_UART_TxCpltCallback+0x26>
	else if(huart == &huart1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a06      	ldr	r2, [pc, #24]	; (8002470 <HAL_UART_TxCpltCallback+0x34>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d102      	bne.n	8002462 <HAL_UART_TxCpltCallback+0x26>
		UART_Transfer_Complete_Callback(uart_e1 );
 800245c:	2000      	movs	r0, #0
 800245e:	f7ff f9f3 	bl	8001848 <UART_Transfer_Complete_Callback>
}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20001024 	.word	0x20001024
 8002470:	20000fe0 	.word	0x20000fe0

08002474 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002478:	4b06      	ldr	r3, [pc, #24]	; (8002494 <SystemInit+0x20>)
 800247a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247e:	4a05      	ldr	r2, [pc, #20]	; (8002494 <SystemInit+0x20>)
 8002480:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002484:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	e000ed00 	.word	0xe000ed00

08002498 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b08e      	sub	sp, #56	; 0x38
 800249c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800249e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	605a      	str	r2, [r3, #4]
 80024a8:	609a      	str	r2, [r3, #8]
 80024aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024ac:	f107 0320 	add.w	r3, r7, #32
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024b6:	1d3b      	adds	r3, r7, #4
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	60da      	str	r2, [r3, #12]
 80024c2:	611a      	str	r2, [r3, #16]
 80024c4:	615a      	str	r2, [r3, #20]
 80024c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024c8:	4b3d      	ldr	r3, [pc, #244]	; (80025c0 <MX_TIM3_Init+0x128>)
 80024ca:	4a3e      	ldr	r2, [pc, #248]	; (80025c4 <MX_TIM3_Init+0x12c>)
 80024cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 80024ce:	4b3c      	ldr	r3, [pc, #240]	; (80025c0 <MX_TIM3_Init+0x128>)
 80024d0:	2253      	movs	r2, #83	; 0x53
 80024d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d4:	4b3a      	ldr	r3, [pc, #232]	; (80025c0 <MX_TIM3_Init+0x128>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3999;
 80024da:	4b39      	ldr	r3, [pc, #228]	; (80025c0 <MX_TIM3_Init+0x128>)
 80024dc:	f640 729f 	movw	r2, #3999	; 0xf9f
 80024e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024e2:	4b37      	ldr	r3, [pc, #220]	; (80025c0 <MX_TIM3_Init+0x128>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024e8:	4b35      	ldr	r3, [pc, #212]	; (80025c0 <MX_TIM3_Init+0x128>)
 80024ea:	2280      	movs	r2, #128	; 0x80
 80024ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80024ee:	4834      	ldr	r0, [pc, #208]	; (80025c0 <MX_TIM3_Init+0x128>)
 80024f0:	f002 fe26 	bl	8005140 <HAL_TIM_Base_Init>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80024fa:	f7ff fef3 	bl	80022e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002502:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002504:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002508:	4619      	mov	r1, r3
 800250a:	482d      	ldr	r0, [pc, #180]	; (80025c0 <MX_TIM3_Init+0x128>)
 800250c:	f003 f84a 	bl	80055a4 <HAL_TIM_ConfigClockSource>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002516:	f7ff fee5 	bl	80022e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800251a:	4829      	ldr	r0, [pc, #164]	; (80025c0 <MX_TIM3_Init+0x128>)
 800251c:	f002 fe5f 	bl	80051de <HAL_TIM_PWM_Init>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002526:	f7ff fedd 	bl	80022e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800252a:	2300      	movs	r3, #0
 800252c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800252e:	2300      	movs	r3, #0
 8002530:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002532:	f107 0320 	add.w	r3, r7, #32
 8002536:	4619      	mov	r1, r3
 8002538:	4821      	ldr	r0, [pc, #132]	; (80025c0 <MX_TIM3_Init+0x128>)
 800253a:	f003 fc0b 	bl	8005d54 <HAL_TIMEx_MasterConfigSynchronization>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002544:	f7ff fece 	bl	80022e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002548:	2360      	movs	r3, #96	; 0x60
 800254a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 999;
 800254c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002550:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800255a:	1d3b      	adds	r3, r7, #4
 800255c:	2200      	movs	r2, #0
 800255e:	4619      	mov	r1, r3
 8002560:	4817      	ldr	r0, [pc, #92]	; (80025c0 <MX_TIM3_Init+0x128>)
 8002562:	f002 ff5d 	bl	8005420 <HAL_TIM_PWM_ConfigChannel>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800256c:	f7ff feba 	bl	80022e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002570:	1d3b      	adds	r3, r7, #4
 8002572:	2204      	movs	r2, #4
 8002574:	4619      	mov	r1, r3
 8002576:	4812      	ldr	r0, [pc, #72]	; (80025c0 <MX_TIM3_Init+0x128>)
 8002578:	f002 ff52 	bl	8005420 <HAL_TIM_PWM_ConfigChannel>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002582:	f7ff feaf 	bl	80022e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002586:	1d3b      	adds	r3, r7, #4
 8002588:	2208      	movs	r2, #8
 800258a:	4619      	mov	r1, r3
 800258c:	480c      	ldr	r0, [pc, #48]	; (80025c0 <MX_TIM3_Init+0x128>)
 800258e:	f002 ff47 	bl	8005420 <HAL_TIM_PWM_ConfigChannel>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8002598:	f7ff fea4 	bl	80022e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800259c:	1d3b      	adds	r3, r7, #4
 800259e:	220c      	movs	r2, #12
 80025a0:	4619      	mov	r1, r3
 80025a2:	4807      	ldr	r0, [pc, #28]	; (80025c0 <MX_TIM3_Init+0x128>)
 80025a4:	f002 ff3c 	bl	8005420 <HAL_TIM_PWM_ConfigChannel>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 80025ae:	f7ff fe99 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80025b2:	4803      	ldr	r0, [pc, #12]	; (80025c0 <MX_TIM3_Init+0x128>)
 80025b4:	f000 f82a 	bl	800260c <HAL_TIM_MspPostInit>

}
 80025b8:	bf00      	nop
 80025ba:	3738      	adds	r7, #56	; 0x38
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	20000e78 	.word	0x20000e78
 80025c4:	40000400 	.word	0x40000400

080025c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a0b      	ldr	r2, [pc, #44]	; (8002604 <HAL_TIM_Base_MspInit+0x3c>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d10d      	bne.n	80025f6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <HAL_TIM_Base_MspInit+0x40>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	4a09      	ldr	r2, [pc, #36]	; (8002608 <HAL_TIM_Base_MspInit+0x40>)
 80025e4:	f043 0302 	orr.w	r3, r3, #2
 80025e8:	6413      	str	r3, [r2, #64]	; 0x40
 80025ea:	4b07      	ldr	r3, [pc, #28]	; (8002608 <HAL_TIM_Base_MspInit+0x40>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80025f6:	bf00      	nop
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	40000400 	.word	0x40000400
 8002608:	40023800 	.word	0x40023800

0800260c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b08a      	sub	sp, #40	; 0x28
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002614:	f107 0314 	add.w	r3, r7, #20
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a21      	ldr	r2, [pc, #132]	; (80026b0 <HAL_TIM_MspPostInit+0xa4>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d13b      	bne.n	80026a6 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	4b20      	ldr	r3, [pc, #128]	; (80026b4 <HAL_TIM_MspPostInit+0xa8>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	4a1f      	ldr	r2, [pc, #124]	; (80026b4 <HAL_TIM_MspPostInit+0xa8>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	6313      	str	r3, [r2, #48]	; 0x30
 800263e:	4b1d      	ldr	r3, [pc, #116]	; (80026b4 <HAL_TIM_MspPostInit+0xa8>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	613b      	str	r3, [r7, #16]
 8002648:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	4b19      	ldr	r3, [pc, #100]	; (80026b4 <HAL_TIM_MspPostInit+0xa8>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	4a18      	ldr	r2, [pc, #96]	; (80026b4 <HAL_TIM_MspPostInit+0xa8>)
 8002654:	f043 0302 	orr.w	r3, r3, #2
 8002658:	6313      	str	r3, [r2, #48]	; 0x30
 800265a:	4b16      	ldr	r3, [pc, #88]	; (80026b4 <HAL_TIM_MspPostInit+0xa8>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002666:	23c0      	movs	r3, #192	; 0xc0
 8002668:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266a:	2302      	movs	r3, #2
 800266c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266e:	2300      	movs	r3, #0
 8002670:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002672:	2300      	movs	r3, #0
 8002674:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002676:	2302      	movs	r3, #2
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267a:	f107 0314 	add.w	r3, r7, #20
 800267e:	4619      	mov	r1, r3
 8002680:	480d      	ldr	r0, [pc, #52]	; (80026b8 <HAL_TIM_MspPostInit+0xac>)
 8002682:	f000 ff9f 	bl	80035c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002686:	2303      	movs	r3, #3
 8002688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268a:	2302      	movs	r3, #2
 800268c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268e:	2300      	movs	r3, #0
 8002690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002692:	2300      	movs	r3, #0
 8002694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002696:	2302      	movs	r3, #2
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800269a:	f107 0314 	add.w	r3, r7, #20
 800269e:	4619      	mov	r1, r3
 80026a0:	4806      	ldr	r0, [pc, #24]	; (80026bc <HAL_TIM_MspPostInit+0xb0>)
 80026a2:	f000 ff8f 	bl	80035c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80026a6:	bf00      	nop
 80026a8:	3728      	adds	r7, #40	; 0x28
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40000400 	.word	0x40000400
 80026b4:	40023800 	.word	0x40023800
 80026b8:	40020000 	.word	0x40020000
 80026bc:	40020400 	.word	0x40020400

080026c0 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart1_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80026c4:	4b11      	ldr	r3, [pc, #68]	; (800270c <MX_UART4_Init+0x4c>)
 80026c6:	4a12      	ldr	r2, [pc, #72]	; (8002710 <MX_UART4_Init+0x50>)
 80026c8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 230400;
 80026ca:	4b10      	ldr	r3, [pc, #64]	; (800270c <MX_UART4_Init+0x4c>)
 80026cc:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80026d0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80026d2:	4b0e      	ldr	r3, [pc, #56]	; (800270c <MX_UART4_Init+0x4c>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80026d8:	4b0c      	ldr	r3, [pc, #48]	; (800270c <MX_UART4_Init+0x4c>)
 80026da:	2200      	movs	r2, #0
 80026dc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80026de:	4b0b      	ldr	r3, [pc, #44]	; (800270c <MX_UART4_Init+0x4c>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80026e4:	4b09      	ldr	r3, [pc, #36]	; (800270c <MX_UART4_Init+0x4c>)
 80026e6:	220c      	movs	r2, #12
 80026e8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ea:	4b08      	ldr	r3, [pc, #32]	; (800270c <MX_UART4_Init+0x4c>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80026f0:	4b06      	ldr	r3, [pc, #24]	; (800270c <MX_UART4_Init+0x4c>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80026f6:	4805      	ldr	r0, [pc, #20]	; (800270c <MX_UART4_Init+0x4c>)
 80026f8:	f003 fba8 	bl	8005e4c <HAL_UART_Init>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002702:	f7ff fdef 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	20001024 	.word	0x20001024
 8002710:	40004c00 	.word	0x40004c00

08002714 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002718:	4b11      	ldr	r3, [pc, #68]	; (8002760 <MX_USART1_UART_Init+0x4c>)
 800271a:	4a12      	ldr	r2, [pc, #72]	; (8002764 <MX_USART1_UART_Init+0x50>)
 800271c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 800271e:	4b10      	ldr	r3, [pc, #64]	; (8002760 <MX_USART1_UART_Init+0x4c>)
 8002720:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8002724:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002726:	4b0e      	ldr	r3, [pc, #56]	; (8002760 <MX_USART1_UART_Init+0x4c>)
 8002728:	2200      	movs	r2, #0
 800272a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800272c:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <MX_USART1_UART_Init+0x4c>)
 800272e:	2200      	movs	r2, #0
 8002730:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002732:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <MX_USART1_UART_Init+0x4c>)
 8002734:	2200      	movs	r2, #0
 8002736:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002738:	4b09      	ldr	r3, [pc, #36]	; (8002760 <MX_USART1_UART_Init+0x4c>)
 800273a:	220c      	movs	r2, #12
 800273c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800273e:	4b08      	ldr	r3, [pc, #32]	; (8002760 <MX_USART1_UART_Init+0x4c>)
 8002740:	2200      	movs	r2, #0
 8002742:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002744:	4b06      	ldr	r3, [pc, #24]	; (8002760 <MX_USART1_UART_Init+0x4c>)
 8002746:	2200      	movs	r2, #0
 8002748:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800274a:	4805      	ldr	r0, [pc, #20]	; (8002760 <MX_USART1_UART_Init+0x4c>)
 800274c:	f003 fb7e 	bl	8005e4c <HAL_UART_Init>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002756:	f7ff fdc5 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20000fe0 	.word	0x20000fe0
 8002764:	40011000 	.word	0x40011000

08002768 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b08c      	sub	sp, #48	; 0x30
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002770:	f107 031c 	add.w	r3, r7, #28
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	60da      	str	r2, [r3, #12]
 800277e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a98      	ldr	r2, [pc, #608]	; (80029e8 <HAL_UART_MspInit+0x280>)
 8002786:	4293      	cmp	r3, r2
 8002788:	f040 8092 	bne.w	80028b0 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800278c:	2300      	movs	r3, #0
 800278e:	61bb      	str	r3, [r7, #24]
 8002790:	4b96      	ldr	r3, [pc, #600]	; (80029ec <HAL_UART_MspInit+0x284>)
 8002792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002794:	4a95      	ldr	r2, [pc, #596]	; (80029ec <HAL_UART_MspInit+0x284>)
 8002796:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800279a:	6413      	str	r3, [r2, #64]	; 0x40
 800279c:	4b93      	ldr	r3, [pc, #588]	; (80029ec <HAL_UART_MspInit+0x284>)
 800279e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027a4:	61bb      	str	r3, [r7, #24]
 80027a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	4b8f      	ldr	r3, [pc, #572]	; (80029ec <HAL_UART_MspInit+0x284>)
 80027ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b0:	4a8e      	ldr	r2, [pc, #568]	; (80029ec <HAL_UART_MspInit+0x284>)
 80027b2:	f043 0301 	orr.w	r3, r3, #1
 80027b6:	6313      	str	r3, [r2, #48]	; 0x30
 80027b8:	4b8c      	ldr	r3, [pc, #560]	; (80029ec <HAL_UART_MspInit+0x284>)
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80027c4:	2303      	movs	r3, #3
 80027c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c8:	2302      	movs	r3, #2
 80027ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d0:	2303      	movs	r3, #3
 80027d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80027d4:	2308      	movs	r3, #8
 80027d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d8:	f107 031c 	add.w	r3, r7, #28
 80027dc:	4619      	mov	r1, r3
 80027de:	4884      	ldr	r0, [pc, #528]	; (80029f0 <HAL_UART_MspInit+0x288>)
 80027e0:	f000 fef0 	bl	80035c4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80027e4:	4b83      	ldr	r3, [pc, #524]	; (80029f4 <HAL_UART_MspInit+0x28c>)
 80027e6:	4a84      	ldr	r2, [pc, #528]	; (80029f8 <HAL_UART_MspInit+0x290>)
 80027e8:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80027ea:	4b82      	ldr	r3, [pc, #520]	; (80029f4 <HAL_UART_MspInit+0x28c>)
 80027ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027f0:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027f2:	4b80      	ldr	r3, [pc, #512]	; (80029f4 <HAL_UART_MspInit+0x28c>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027f8:	4b7e      	ldr	r3, [pc, #504]	; (80029f4 <HAL_UART_MspInit+0x28c>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027fe:	4b7d      	ldr	r3, [pc, #500]	; (80029f4 <HAL_UART_MspInit+0x28c>)
 8002800:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002804:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002806:	4b7b      	ldr	r3, [pc, #492]	; (80029f4 <HAL_UART_MspInit+0x28c>)
 8002808:	2200      	movs	r2, #0
 800280a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800280c:	4b79      	ldr	r3, [pc, #484]	; (80029f4 <HAL_UART_MspInit+0x28c>)
 800280e:	2200      	movs	r2, #0
 8002810:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8002812:	4b78      	ldr	r3, [pc, #480]	; (80029f4 <HAL_UART_MspInit+0x28c>)
 8002814:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002818:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800281a:	4b76      	ldr	r3, [pc, #472]	; (80029f4 <HAL_UART_MspInit+0x28c>)
 800281c:	2200      	movs	r2, #0
 800281e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002820:	4b74      	ldr	r3, [pc, #464]	; (80029f4 <HAL_UART_MspInit+0x28c>)
 8002822:	2200      	movs	r2, #0
 8002824:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002826:	4873      	ldr	r0, [pc, #460]	; (80029f4 <HAL_UART_MspInit+0x28c>)
 8002828:	f000 faca 	bl	8002dc0 <HAL_DMA_Init>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002832:	f7ff fd57 	bl	80022e4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a6e      	ldr	r2, [pc, #440]	; (80029f4 <HAL_UART_MspInit+0x28c>)
 800283a:	639a      	str	r2, [r3, #56]	; 0x38
 800283c:	4a6d      	ldr	r2, [pc, #436]	; (80029f4 <HAL_UART_MspInit+0x28c>)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8002842:	4b6e      	ldr	r3, [pc, #440]	; (80029fc <HAL_UART_MspInit+0x294>)
 8002844:	4a6e      	ldr	r2, [pc, #440]	; (8002a00 <HAL_UART_MspInit+0x298>)
 8002846:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8002848:	4b6c      	ldr	r3, [pc, #432]	; (80029fc <HAL_UART_MspInit+0x294>)
 800284a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800284e:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002850:	4b6a      	ldr	r3, [pc, #424]	; (80029fc <HAL_UART_MspInit+0x294>)
 8002852:	2240      	movs	r2, #64	; 0x40
 8002854:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002856:	4b69      	ldr	r3, [pc, #420]	; (80029fc <HAL_UART_MspInit+0x294>)
 8002858:	2200      	movs	r2, #0
 800285a:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800285c:	4b67      	ldr	r3, [pc, #412]	; (80029fc <HAL_UART_MspInit+0x294>)
 800285e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002862:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002864:	4b65      	ldr	r3, [pc, #404]	; (80029fc <HAL_UART_MspInit+0x294>)
 8002866:	2200      	movs	r2, #0
 8002868:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800286a:	4b64      	ldr	r3, [pc, #400]	; (80029fc <HAL_UART_MspInit+0x294>)
 800286c:	2200      	movs	r2, #0
 800286e:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8002870:	4b62      	ldr	r3, [pc, #392]	; (80029fc <HAL_UART_MspInit+0x294>)
 8002872:	2200      	movs	r2, #0
 8002874:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002876:	4b61      	ldr	r3, [pc, #388]	; (80029fc <HAL_UART_MspInit+0x294>)
 8002878:	2200      	movs	r2, #0
 800287a:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800287c:	4b5f      	ldr	r3, [pc, #380]	; (80029fc <HAL_UART_MspInit+0x294>)
 800287e:	2200      	movs	r2, #0
 8002880:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8002882:	485e      	ldr	r0, [pc, #376]	; (80029fc <HAL_UART_MspInit+0x294>)
 8002884:	f000 fa9c 	bl	8002dc0 <HAL_DMA_Init>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800288e:	f7ff fd29 	bl	80022e4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a59      	ldr	r2, [pc, #356]	; (80029fc <HAL_UART_MspInit+0x294>)
 8002896:	635a      	str	r2, [r3, #52]	; 0x34
 8002898:	4a58      	ldr	r2, [pc, #352]	; (80029fc <HAL_UART_MspInit+0x294>)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800289e:	2200      	movs	r2, #0
 80028a0:	2100      	movs	r1, #0
 80028a2:	2034      	movs	r0, #52	; 0x34
 80028a4:	f000 fa55 	bl	8002d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80028a8:	2034      	movs	r0, #52	; 0x34
 80028aa:	f000 fa6e 	bl	8002d8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80028ae:	e096      	b.n	80029de <HAL_UART_MspInit+0x276>
  else if(uartHandle->Instance==USART1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a53      	ldr	r2, [pc, #332]	; (8002a04 <HAL_UART_MspInit+0x29c>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	f040 8091 	bne.w	80029de <HAL_UART_MspInit+0x276>
    __HAL_RCC_USART1_CLK_ENABLE();
 80028bc:	2300      	movs	r3, #0
 80028be:	613b      	str	r3, [r7, #16]
 80028c0:	4b4a      	ldr	r3, [pc, #296]	; (80029ec <HAL_UART_MspInit+0x284>)
 80028c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c4:	4a49      	ldr	r2, [pc, #292]	; (80029ec <HAL_UART_MspInit+0x284>)
 80028c6:	f043 0310 	orr.w	r3, r3, #16
 80028ca:	6453      	str	r3, [r2, #68]	; 0x44
 80028cc:	4b47      	ldr	r3, [pc, #284]	; (80029ec <HAL_UART_MspInit+0x284>)
 80028ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d0:	f003 0310 	and.w	r3, r3, #16
 80028d4:	613b      	str	r3, [r7, #16]
 80028d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028d8:	2300      	movs	r3, #0
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	4b43      	ldr	r3, [pc, #268]	; (80029ec <HAL_UART_MspInit+0x284>)
 80028de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e0:	4a42      	ldr	r2, [pc, #264]	; (80029ec <HAL_UART_MspInit+0x284>)
 80028e2:	f043 0302 	orr.w	r3, r3, #2
 80028e6:	6313      	str	r3, [r2, #48]	; 0x30
 80028e8:	4b40      	ldr	r3, [pc, #256]	; (80029ec <HAL_UART_MspInit+0x284>)
 80028ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028f4:	23c0      	movs	r3, #192	; 0xc0
 80028f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f8:	2302      	movs	r3, #2
 80028fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fc:	2300      	movs	r3, #0
 80028fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002900:	2303      	movs	r3, #3
 8002902:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002904:	2307      	movs	r3, #7
 8002906:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002908:	f107 031c 	add.w	r3, r7, #28
 800290c:	4619      	mov	r1, r3
 800290e:	483e      	ldr	r0, [pc, #248]	; (8002a08 <HAL_UART_MspInit+0x2a0>)
 8002910:	f000 fe58 	bl	80035c4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002914:	4b3d      	ldr	r3, [pc, #244]	; (8002a0c <HAL_UART_MspInit+0x2a4>)
 8002916:	4a3e      	ldr	r2, [pc, #248]	; (8002a10 <HAL_UART_MspInit+0x2a8>)
 8002918:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800291a:	4b3c      	ldr	r3, [pc, #240]	; (8002a0c <HAL_UART_MspInit+0x2a4>)
 800291c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002920:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002922:	4b3a      	ldr	r3, [pc, #232]	; (8002a0c <HAL_UART_MspInit+0x2a4>)
 8002924:	2200      	movs	r2, #0
 8002926:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002928:	4b38      	ldr	r3, [pc, #224]	; (8002a0c <HAL_UART_MspInit+0x2a4>)
 800292a:	2200      	movs	r2, #0
 800292c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800292e:	4b37      	ldr	r3, [pc, #220]	; (8002a0c <HAL_UART_MspInit+0x2a4>)
 8002930:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002934:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002936:	4b35      	ldr	r3, [pc, #212]	; (8002a0c <HAL_UART_MspInit+0x2a4>)
 8002938:	2200      	movs	r2, #0
 800293a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800293c:	4b33      	ldr	r3, [pc, #204]	; (8002a0c <HAL_UART_MspInit+0x2a4>)
 800293e:	2200      	movs	r2, #0
 8002940:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002942:	4b32      	ldr	r3, [pc, #200]	; (8002a0c <HAL_UART_MspInit+0x2a4>)
 8002944:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002948:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800294a:	4b30      	ldr	r3, [pc, #192]	; (8002a0c <HAL_UART_MspInit+0x2a4>)
 800294c:	2200      	movs	r2, #0
 800294e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002950:	4b2e      	ldr	r3, [pc, #184]	; (8002a0c <HAL_UART_MspInit+0x2a4>)
 8002952:	2200      	movs	r2, #0
 8002954:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002956:	482d      	ldr	r0, [pc, #180]	; (8002a0c <HAL_UART_MspInit+0x2a4>)
 8002958:	f000 fa32 	bl	8002dc0 <HAL_DMA_Init>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <HAL_UART_MspInit+0x1fe>
      Error_Handler();
 8002962:	f7ff fcbf 	bl	80022e4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a28      	ldr	r2, [pc, #160]	; (8002a0c <HAL_UART_MspInit+0x2a4>)
 800296a:	639a      	str	r2, [r3, #56]	; 0x38
 800296c:	4a27      	ldr	r2, [pc, #156]	; (8002a0c <HAL_UART_MspInit+0x2a4>)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002972:	4b28      	ldr	r3, [pc, #160]	; (8002a14 <HAL_UART_MspInit+0x2ac>)
 8002974:	4a28      	ldr	r2, [pc, #160]	; (8002a18 <HAL_UART_MspInit+0x2b0>)
 8002976:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002978:	4b26      	ldr	r3, [pc, #152]	; (8002a14 <HAL_UART_MspInit+0x2ac>)
 800297a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800297e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002980:	4b24      	ldr	r3, [pc, #144]	; (8002a14 <HAL_UART_MspInit+0x2ac>)
 8002982:	2240      	movs	r2, #64	; 0x40
 8002984:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002986:	4b23      	ldr	r3, [pc, #140]	; (8002a14 <HAL_UART_MspInit+0x2ac>)
 8002988:	2200      	movs	r2, #0
 800298a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800298c:	4b21      	ldr	r3, [pc, #132]	; (8002a14 <HAL_UART_MspInit+0x2ac>)
 800298e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002992:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002994:	4b1f      	ldr	r3, [pc, #124]	; (8002a14 <HAL_UART_MspInit+0x2ac>)
 8002996:	2200      	movs	r2, #0
 8002998:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800299a:	4b1e      	ldr	r3, [pc, #120]	; (8002a14 <HAL_UART_MspInit+0x2ac>)
 800299c:	2200      	movs	r2, #0
 800299e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80029a0:	4b1c      	ldr	r3, [pc, #112]	; (8002a14 <HAL_UART_MspInit+0x2ac>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029a6:	4b1b      	ldr	r3, [pc, #108]	; (8002a14 <HAL_UART_MspInit+0x2ac>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029ac:	4b19      	ldr	r3, [pc, #100]	; (8002a14 <HAL_UART_MspInit+0x2ac>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80029b2:	4818      	ldr	r0, [pc, #96]	; (8002a14 <HAL_UART_MspInit+0x2ac>)
 80029b4:	f000 fa04 	bl	8002dc0 <HAL_DMA_Init>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_UART_MspInit+0x25a>
      Error_Handler();
 80029be:	f7ff fc91 	bl	80022e4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a13      	ldr	r2, [pc, #76]	; (8002a14 <HAL_UART_MspInit+0x2ac>)
 80029c6:	635a      	str	r2, [r3, #52]	; 0x34
 80029c8:	4a12      	ldr	r2, [pc, #72]	; (8002a14 <HAL_UART_MspInit+0x2ac>)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80029ce:	2200      	movs	r2, #0
 80029d0:	2100      	movs	r1, #0
 80029d2:	2025      	movs	r0, #37	; 0x25
 80029d4:	f000 f9bd 	bl	8002d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80029d8:	2025      	movs	r0, #37	; 0x25
 80029da:	f000 f9d6 	bl	8002d8a <HAL_NVIC_EnableIRQ>
}
 80029de:	bf00      	nop
 80029e0:	3730      	adds	r7, #48	; 0x30
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40004c00 	.word	0x40004c00
 80029ec:	40023800 	.word	0x40023800
 80029f0:	40020000 	.word	0x40020000
 80029f4:	20000ec0 	.word	0x20000ec0
 80029f8:	40026040 	.word	0x40026040
 80029fc:	20001068 	.word	0x20001068
 8002a00:	40026070 	.word	0x40026070
 8002a04:	40011000 	.word	0x40011000
 8002a08:	40020400 	.word	0x40020400
 8002a0c:	20000f80 	.word	0x20000f80
 8002a10:	40026440 	.word	0x40026440
 8002a14:	20000f20 	.word	0x20000f20
 8002a18:	400264b8 	.word	0x400264b8

08002a1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002a1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a20:	480d      	ldr	r0, [pc, #52]	; (8002a58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a22:	490e      	ldr	r1, [pc, #56]	; (8002a5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a24:	4a0e      	ldr	r2, [pc, #56]	; (8002a60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a28:	e002      	b.n	8002a30 <LoopCopyDataInit>

08002a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a2e:	3304      	adds	r3, #4

08002a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a34:	d3f9      	bcc.n	8002a2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a36:	4a0b      	ldr	r2, [pc, #44]	; (8002a64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a38:	4c0b      	ldr	r4, [pc, #44]	; (8002a68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a3c:	e001      	b.n	8002a42 <LoopFillZerobss>

08002a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a40:	3204      	adds	r2, #4

08002a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a44:	d3fb      	bcc.n	8002a3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a46:	f7ff fd15 	bl	8002474 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a4a:	f004 fb35 	bl	80070b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a4e:	f7ff fbb5 	bl	80021bc <main>
  bx  lr    
 8002a52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a5c:	2000037c 	.word	0x2000037c
  ldr r2, =_sidata
 8002a60:	080071e8 	.word	0x080071e8
  ldr r2, =_sbss
 8002a64:	2000037c 	.word	0x2000037c
  ldr r4, =_ebss
 8002a68:	200010cc 	.word	0x200010cc

08002a6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a6c:	e7fe      	b.n	8002a6c <ADC_IRQHandler>
	...

08002a70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a74:	4b0e      	ldr	r3, [pc, #56]	; (8002ab0 <HAL_Init+0x40>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a0d      	ldr	r2, [pc, #52]	; (8002ab0 <HAL_Init+0x40>)
 8002a7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a80:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <HAL_Init+0x40>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a0a      	ldr	r2, [pc, #40]	; (8002ab0 <HAL_Init+0x40>)
 8002a86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a8c:	4b08      	ldr	r3, [pc, #32]	; (8002ab0 <HAL_Init+0x40>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a07      	ldr	r2, [pc, #28]	; (8002ab0 <HAL_Init+0x40>)
 8002a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a98:	2003      	movs	r0, #3
 8002a9a:	f000 f94f 	bl	8002d3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a9e:	200f      	movs	r0, #15
 8002aa0:	f000 f808 	bl	8002ab4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002aa4:	f7ff fc24 	bl	80022f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40023c00 	.word	0x40023c00

08002ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002abc:	4b12      	ldr	r3, [pc, #72]	; (8002b08 <HAL_InitTick+0x54>)
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	4b12      	ldr	r3, [pc, #72]	; (8002b0c <HAL_InitTick+0x58>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aca:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 f967 	bl	8002da6 <HAL_SYSTICK_Config>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e00e      	b.n	8002b00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b0f      	cmp	r3, #15
 8002ae6:	d80a      	bhi.n	8002afe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ae8:	2200      	movs	r2, #0
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	f04f 30ff 	mov.w	r0, #4294967295
 8002af0:	f000 f92f 	bl	8002d52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002af4:	4a06      	ldr	r2, [pc, #24]	; (8002b10 <HAL_InitTick+0x5c>)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
 8002afc:	e000      	b.n	8002b00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	20000370 	.word	0x20000370
 8002b0c:	20000378 	.word	0x20000378
 8002b10:	20000374 	.word	0x20000374

08002b14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b18:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <HAL_IncTick+0x20>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <HAL_IncTick+0x24>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4413      	add	r3, r2
 8002b24:	4a04      	ldr	r2, [pc, #16]	; (8002b38 <HAL_IncTick+0x24>)
 8002b26:	6013      	str	r3, [r2, #0]
}
 8002b28:	bf00      	nop
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	20000378 	.word	0x20000378
 8002b38:	200010c8 	.word	0x200010c8

08002b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b40:	4b03      	ldr	r3, [pc, #12]	; (8002b50 <HAL_GetTick+0x14>)
 8002b42:	681b      	ldr	r3, [r3, #0]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	200010c8 	.word	0x200010c8

08002b54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b5c:	f7ff ffee 	bl	8002b3c <HAL_GetTick>
 8002b60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b6c:	d005      	beq.n	8002b7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b6e:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <HAL_Delay+0x44>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	461a      	mov	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4413      	add	r3, r2
 8002b78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b7a:	bf00      	nop
 8002b7c:	f7ff ffde 	bl	8002b3c <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d8f7      	bhi.n	8002b7c <HAL_Delay+0x28>
  {
  }
}
 8002b8c:	bf00      	nop
 8002b8e:	bf00      	nop
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20000378 	.word	0x20000378

08002b9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bac:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <__NVIC_SetPriorityGrouping+0x44>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bb8:	4013      	ands	r3, r2
 8002bba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bce:	4a04      	ldr	r2, [pc, #16]	; (8002be0 <__NVIC_SetPriorityGrouping+0x44>)
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	60d3      	str	r3, [r2, #12]
}
 8002bd4:	bf00      	nop
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	e000ed00 	.word	0xe000ed00

08002be4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002be8:	4b04      	ldr	r3, [pc, #16]	; (8002bfc <__NVIC_GetPriorityGrouping+0x18>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	0a1b      	lsrs	r3, r3, #8
 8002bee:	f003 0307 	and.w	r3, r3, #7
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	e000ed00 	.word	0xe000ed00

08002c00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	db0b      	blt.n	8002c2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c12:	79fb      	ldrb	r3, [r7, #7]
 8002c14:	f003 021f 	and.w	r2, r3, #31
 8002c18:	4907      	ldr	r1, [pc, #28]	; (8002c38 <__NVIC_EnableIRQ+0x38>)
 8002c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1e:	095b      	lsrs	r3, r3, #5
 8002c20:	2001      	movs	r0, #1
 8002c22:	fa00 f202 	lsl.w	r2, r0, r2
 8002c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	e000e100 	.word	0xe000e100

08002c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	6039      	str	r1, [r7, #0]
 8002c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	db0a      	blt.n	8002c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	b2da      	uxtb	r2, r3
 8002c54:	490c      	ldr	r1, [pc, #48]	; (8002c88 <__NVIC_SetPriority+0x4c>)
 8002c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5a:	0112      	lsls	r2, r2, #4
 8002c5c:	b2d2      	uxtb	r2, r2
 8002c5e:	440b      	add	r3, r1
 8002c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c64:	e00a      	b.n	8002c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	4908      	ldr	r1, [pc, #32]	; (8002c8c <__NVIC_SetPriority+0x50>)
 8002c6c:	79fb      	ldrb	r3, [r7, #7]
 8002c6e:	f003 030f 	and.w	r3, r3, #15
 8002c72:	3b04      	subs	r3, #4
 8002c74:	0112      	lsls	r2, r2, #4
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	440b      	add	r3, r1
 8002c7a:	761a      	strb	r2, [r3, #24]
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	e000e100 	.word	0xe000e100
 8002c8c:	e000ed00 	.word	0xe000ed00

08002c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b089      	sub	sp, #36	; 0x24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	f1c3 0307 	rsb	r3, r3, #7
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	bf28      	it	cs
 8002cae:	2304      	movcs	r3, #4
 8002cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	2b06      	cmp	r3, #6
 8002cb8:	d902      	bls.n	8002cc0 <NVIC_EncodePriority+0x30>
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	3b03      	subs	r3, #3
 8002cbe:	e000      	b.n	8002cc2 <NVIC_EncodePriority+0x32>
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	43da      	mvns	r2, r3
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	401a      	ands	r2, r3
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce2:	43d9      	mvns	r1, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce8:	4313      	orrs	r3, r2
         );
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3724      	adds	r7, #36	; 0x24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
	...

08002cf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3b01      	subs	r3, #1
 8002d04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d08:	d301      	bcc.n	8002d0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e00f      	b.n	8002d2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d0e:	4a0a      	ldr	r2, [pc, #40]	; (8002d38 <SysTick_Config+0x40>)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3b01      	subs	r3, #1
 8002d14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d16:	210f      	movs	r1, #15
 8002d18:	f04f 30ff 	mov.w	r0, #4294967295
 8002d1c:	f7ff ff8e 	bl	8002c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d20:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <SysTick_Config+0x40>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d26:	4b04      	ldr	r3, [pc, #16]	; (8002d38 <SysTick_Config+0x40>)
 8002d28:	2207      	movs	r2, #7
 8002d2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	e000e010 	.word	0xe000e010

08002d3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f7ff ff29 	bl	8002b9c <__NVIC_SetPriorityGrouping>
}
 8002d4a:	bf00      	nop
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b086      	sub	sp, #24
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	4603      	mov	r3, r0
 8002d5a:	60b9      	str	r1, [r7, #8]
 8002d5c:	607a      	str	r2, [r7, #4]
 8002d5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d60:	2300      	movs	r3, #0
 8002d62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d64:	f7ff ff3e 	bl	8002be4 <__NVIC_GetPriorityGrouping>
 8002d68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	68b9      	ldr	r1, [r7, #8]
 8002d6e:	6978      	ldr	r0, [r7, #20]
 8002d70:	f7ff ff8e 	bl	8002c90 <NVIC_EncodePriority>
 8002d74:	4602      	mov	r2, r0
 8002d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d7a:	4611      	mov	r1, r2
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff ff5d 	bl	8002c3c <__NVIC_SetPriority>
}
 8002d82:	bf00      	nop
 8002d84:	3718      	adds	r7, #24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b082      	sub	sp, #8
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	4603      	mov	r3, r0
 8002d92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff ff31 	bl	8002c00 <__NVIC_EnableIRQ>
}
 8002d9e:	bf00      	nop
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b082      	sub	sp, #8
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7ff ffa2 	bl	8002cf8 <SysTick_Config>
 8002db4:	4603      	mov	r3, r0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
	...

08002dc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002dcc:	f7ff feb6 	bl	8002b3c <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e099      	b.n	8002f10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2202      	movs	r2, #2
 8002de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0201 	bic.w	r2, r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dfc:	e00f      	b.n	8002e1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dfe:	f7ff fe9d 	bl	8002b3c <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b05      	cmp	r3, #5
 8002e0a:	d908      	bls.n	8002e1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2203      	movs	r2, #3
 8002e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e078      	b.n	8002f10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1e8      	bne.n	8002dfe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	4b38      	ldr	r3, [pc, #224]	; (8002f18 <HAL_DMA_Init+0x158>)
 8002e38:	4013      	ands	r3, r2
 8002e3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	2b04      	cmp	r3, #4
 8002e76:	d107      	bne.n	8002e88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e80:	4313      	orrs	r3, r2
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	f023 0307 	bic.w	r3, r3, #7
 8002e9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	d117      	bne.n	8002ee2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00e      	beq.n	8002ee2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 fb01 	bl	80034cc <DMA_CheckFifoParam>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d008      	beq.n	8002ee2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2240      	movs	r2, #64	; 0x40
 8002ed4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e016      	b.n	8002f10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fab8 	bl	8003460 <DMA_CalcBaseAndBitshift>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef8:	223f      	movs	r2, #63	; 0x3f
 8002efa:	409a      	lsls	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	f010803f 	.word	0xf010803f

08002f1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
 8002f28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d101      	bne.n	8002f42 <HAL_DMA_Start_IT+0x26>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	e040      	b.n	8002fc4 <HAL_DMA_Start_IT+0xa8>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d12f      	bne.n	8002fb6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2202      	movs	r2, #2
 8002f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	68b9      	ldr	r1, [r7, #8]
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 fa4a 	bl	8003404 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f74:	223f      	movs	r2, #63	; 0x3f
 8002f76:	409a      	lsls	r2, r3
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0216 	orr.w	r2, r2, #22
 8002f8a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d007      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 0208 	orr.w	r2, r2, #8
 8002fa2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f042 0201 	orr.w	r2, r2, #1
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	e005      	b.n	8002fc2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002fda:	f7ff fdaf 	bl	8002b3c <HAL_GetTick>
 8002fde:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d008      	beq.n	8002ffe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2280      	movs	r2, #128	; 0x80
 8002ff0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e052      	b.n	80030a4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0216 	bic.w	r2, r2, #22
 800300c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	695a      	ldr	r2, [r3, #20]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800301c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	2b00      	cmp	r3, #0
 8003024:	d103      	bne.n	800302e <HAL_DMA_Abort+0x62>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800302a:	2b00      	cmp	r3, #0
 800302c:	d007      	beq.n	800303e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0208 	bic.w	r2, r2, #8
 800303c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 0201 	bic.w	r2, r2, #1
 800304c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800304e:	e013      	b.n	8003078 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003050:	f7ff fd74 	bl	8002b3c <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b05      	cmp	r3, #5
 800305c:	d90c      	bls.n	8003078 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2220      	movs	r2, #32
 8003062:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2203      	movs	r2, #3
 8003068:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e015      	b.n	80030a4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1e4      	bne.n	8003050 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308a:	223f      	movs	r2, #63	; 0x3f
 800308c:	409a      	lsls	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d004      	beq.n	80030ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2280      	movs	r2, #128	; 0x80
 80030c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e00c      	b.n	80030e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2205      	movs	r2, #5
 80030ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0201 	bic.w	r2, r2, #1
 80030e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030fc:	4b92      	ldr	r3, [pc, #584]	; (8003348 <HAL_DMA_IRQHandler+0x258>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a92      	ldr	r2, [pc, #584]	; (800334c <HAL_DMA_IRQHandler+0x25c>)
 8003102:	fba2 2303 	umull	r2, r3, r2, r3
 8003106:	0a9b      	lsrs	r3, r3, #10
 8003108:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311a:	2208      	movs	r2, #8
 800311c:	409a      	lsls	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	4013      	ands	r3, r2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d01a      	beq.n	800315c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	d013      	beq.n	800315c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0204 	bic.w	r2, r2, #4
 8003142:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003148:	2208      	movs	r2, #8
 800314a:	409a      	lsls	r2, r3
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003154:	f043 0201 	orr.w	r2, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003160:	2201      	movs	r2, #1
 8003162:	409a      	lsls	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4013      	ands	r3, r2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d012      	beq.n	8003192 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00b      	beq.n	8003192 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317e:	2201      	movs	r2, #1
 8003180:	409a      	lsls	r2, r3
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318a:	f043 0202 	orr.w	r2, r3, #2
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003196:	2204      	movs	r2, #4
 8003198:	409a      	lsls	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	4013      	ands	r3, r2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d012      	beq.n	80031c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00b      	beq.n	80031c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b4:	2204      	movs	r2, #4
 80031b6:	409a      	lsls	r2, r3
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c0:	f043 0204 	orr.w	r2, r3, #4
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031cc:	2210      	movs	r2, #16
 80031ce:	409a      	lsls	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4013      	ands	r3, r2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d043      	beq.n	8003260 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d03c      	beq.n	8003260 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ea:	2210      	movs	r2, #16
 80031ec:	409a      	lsls	r2, r3
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d018      	beq.n	8003232 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d108      	bne.n	8003220 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	2b00      	cmp	r3, #0
 8003214:	d024      	beq.n	8003260 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	4798      	blx	r3
 800321e:	e01f      	b.n	8003260 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003224:	2b00      	cmp	r3, #0
 8003226:	d01b      	beq.n	8003260 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	4798      	blx	r3
 8003230:	e016      	b.n	8003260 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323c:	2b00      	cmp	r3, #0
 800323e:	d107      	bne.n	8003250 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0208 	bic.w	r2, r2, #8
 800324e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003264:	2220      	movs	r2, #32
 8003266:	409a      	lsls	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4013      	ands	r3, r2
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 808e 	beq.w	800338e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0310 	and.w	r3, r3, #16
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 8086 	beq.w	800338e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003286:	2220      	movs	r2, #32
 8003288:	409a      	lsls	r2, r3
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b05      	cmp	r3, #5
 8003298:	d136      	bne.n	8003308 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0216 	bic.w	r2, r2, #22
 80032a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	695a      	ldr	r2, [r3, #20]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d103      	bne.n	80032ca <HAL_DMA_IRQHandler+0x1da>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d007      	beq.n	80032da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 0208 	bic.w	r2, r2, #8
 80032d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032de:	223f      	movs	r2, #63	; 0x3f
 80032e0:	409a      	lsls	r2, r3
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d07d      	beq.n	80033fa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	4798      	blx	r3
        }
        return;
 8003306:	e078      	b.n	80033fa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d01c      	beq.n	8003350 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d108      	bne.n	8003336 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003328:	2b00      	cmp	r3, #0
 800332a:	d030      	beq.n	800338e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	4798      	blx	r3
 8003334:	e02b      	b.n	800338e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800333a:	2b00      	cmp	r3, #0
 800333c:	d027      	beq.n	800338e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	4798      	blx	r3
 8003346:	e022      	b.n	800338e <HAL_DMA_IRQHandler+0x29e>
 8003348:	20000370 	.word	0x20000370
 800334c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10f      	bne.n	800337e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 0210 	bic.w	r2, r2, #16
 800336c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003392:	2b00      	cmp	r3, #0
 8003394:	d032      	beq.n	80033fc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d022      	beq.n	80033e8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2205      	movs	r2, #5
 80033a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 0201 	bic.w	r2, r2, #1
 80033b8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	3301      	adds	r3, #1
 80033be:	60bb      	str	r3, [r7, #8]
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d307      	bcc.n	80033d6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1f2      	bne.n	80033ba <HAL_DMA_IRQHandler+0x2ca>
 80033d4:	e000      	b.n	80033d8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80033d6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d005      	beq.n	80033fc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	4798      	blx	r3
 80033f8:	e000      	b.n	80033fc <HAL_DMA_IRQHandler+0x30c>
        return;
 80033fa:	bf00      	nop
    }
  }
}
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop

08003404 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
 8003410:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003420:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	2b40      	cmp	r3, #64	; 0x40
 8003430:	d108      	bne.n	8003444 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003442:	e007      	b.n	8003454 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	60da      	str	r2, [r3, #12]
}
 8003454:	bf00      	nop
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	b2db      	uxtb	r3, r3
 800346e:	3b10      	subs	r3, #16
 8003470:	4a14      	ldr	r2, [pc, #80]	; (80034c4 <DMA_CalcBaseAndBitshift+0x64>)
 8003472:	fba2 2303 	umull	r2, r3, r2, r3
 8003476:	091b      	lsrs	r3, r3, #4
 8003478:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800347a:	4a13      	ldr	r2, [pc, #76]	; (80034c8 <DMA_CalcBaseAndBitshift+0x68>)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4413      	add	r3, r2
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	461a      	mov	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2b03      	cmp	r3, #3
 800348c:	d909      	bls.n	80034a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003496:	f023 0303 	bic.w	r3, r3, #3
 800349a:	1d1a      	adds	r2, r3, #4
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	659a      	str	r2, [r3, #88]	; 0x58
 80034a0:	e007      	b.n	80034b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034aa:	f023 0303 	bic.w	r3, r3, #3
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	aaaaaaab 	.word	0xaaaaaaab
 80034c8:	080071d0 	.word	0x080071d0

080034cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034d4:	2300      	movs	r3, #0
 80034d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d11f      	bne.n	8003526 <DMA_CheckFifoParam+0x5a>
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2b03      	cmp	r3, #3
 80034ea:	d856      	bhi.n	800359a <DMA_CheckFifoParam+0xce>
 80034ec:	a201      	add	r2, pc, #4	; (adr r2, 80034f4 <DMA_CheckFifoParam+0x28>)
 80034ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f2:	bf00      	nop
 80034f4:	08003505 	.word	0x08003505
 80034f8:	08003517 	.word	0x08003517
 80034fc:	08003505 	.word	0x08003505
 8003500:	0800359b 	.word	0x0800359b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003508:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d046      	beq.n	800359e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003514:	e043      	b.n	800359e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800351e:	d140      	bne.n	80035a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003524:	e03d      	b.n	80035a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800352e:	d121      	bne.n	8003574 <DMA_CheckFifoParam+0xa8>
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2b03      	cmp	r3, #3
 8003534:	d837      	bhi.n	80035a6 <DMA_CheckFifoParam+0xda>
 8003536:	a201      	add	r2, pc, #4	; (adr r2, 800353c <DMA_CheckFifoParam+0x70>)
 8003538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353c:	0800354d 	.word	0x0800354d
 8003540:	08003553 	.word	0x08003553
 8003544:	0800354d 	.word	0x0800354d
 8003548:	08003565 	.word	0x08003565
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	73fb      	strb	r3, [r7, #15]
      break;
 8003550:	e030      	b.n	80035b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003556:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d025      	beq.n	80035aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003562:	e022      	b.n	80035aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003568:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800356c:	d11f      	bne.n	80035ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003572:	e01c      	b.n	80035ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	2b02      	cmp	r3, #2
 8003578:	d903      	bls.n	8003582 <DMA_CheckFifoParam+0xb6>
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	2b03      	cmp	r3, #3
 800357e:	d003      	beq.n	8003588 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003580:	e018      	b.n	80035b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	73fb      	strb	r3, [r7, #15]
      break;
 8003586:	e015      	b.n	80035b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00e      	beq.n	80035b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	73fb      	strb	r3, [r7, #15]
      break;
 8003598:	e00b      	b.n	80035b2 <DMA_CheckFifoParam+0xe6>
      break;
 800359a:	bf00      	nop
 800359c:	e00a      	b.n	80035b4 <DMA_CheckFifoParam+0xe8>
      break;
 800359e:	bf00      	nop
 80035a0:	e008      	b.n	80035b4 <DMA_CheckFifoParam+0xe8>
      break;
 80035a2:	bf00      	nop
 80035a4:	e006      	b.n	80035b4 <DMA_CheckFifoParam+0xe8>
      break;
 80035a6:	bf00      	nop
 80035a8:	e004      	b.n	80035b4 <DMA_CheckFifoParam+0xe8>
      break;
 80035aa:	bf00      	nop
 80035ac:	e002      	b.n	80035b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80035ae:	bf00      	nop
 80035b0:	e000      	b.n	80035b4 <DMA_CheckFifoParam+0xe8>
      break;
 80035b2:	bf00      	nop
    }
  } 
  
  return status; 
 80035b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop

080035c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b089      	sub	sp, #36	; 0x24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035d2:	2300      	movs	r3, #0
 80035d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035d6:	2300      	movs	r3, #0
 80035d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035da:	2300      	movs	r3, #0
 80035dc:	61fb      	str	r3, [r7, #28]
 80035de:	e16b      	b.n	80038b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035e0:	2201      	movs	r2, #1
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	4013      	ands	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	f040 815a 	bne.w	80038b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f003 0303 	and.w	r3, r3, #3
 8003606:	2b01      	cmp	r3, #1
 8003608:	d005      	beq.n	8003616 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003612:	2b02      	cmp	r3, #2
 8003614:	d130      	bne.n	8003678 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	2203      	movs	r2, #3
 8003622:	fa02 f303 	lsl.w	r3, r2, r3
 8003626:	43db      	mvns	r3, r3
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4013      	ands	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	68da      	ldr	r2, [r3, #12]
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	fa02 f303 	lsl.w	r3, r2, r3
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	4313      	orrs	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800364c:	2201      	movs	r2, #1
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	43db      	mvns	r3, r3
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	4013      	ands	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	091b      	lsrs	r3, r3, #4
 8003662:	f003 0201 	and.w	r2, r3, #1
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	4313      	orrs	r3, r2
 8003670:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f003 0303 	and.w	r3, r3, #3
 8003680:	2b03      	cmp	r3, #3
 8003682:	d017      	beq.n	80036b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	2203      	movs	r2, #3
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	43db      	mvns	r3, r3
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	4013      	ands	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f003 0303 	and.w	r3, r3, #3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d123      	bne.n	8003708 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	08da      	lsrs	r2, r3, #3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3208      	adds	r2, #8
 80036c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	220f      	movs	r2, #15
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	43db      	mvns	r3, r3
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	4013      	ands	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	691a      	ldr	r2, [r3, #16]
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	08da      	lsrs	r2, r3, #3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	3208      	adds	r2, #8
 8003702:	69b9      	ldr	r1, [r7, #24]
 8003704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	2203      	movs	r2, #3
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	43db      	mvns	r3, r3
 800371a:	69ba      	ldr	r2, [r7, #24]
 800371c:	4013      	ands	r3, r2
 800371e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f003 0203 	and.w	r2, r3, #3
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	4313      	orrs	r3, r2
 8003734:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 80b4 	beq.w	80038b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800374a:	2300      	movs	r3, #0
 800374c:	60fb      	str	r3, [r7, #12]
 800374e:	4b60      	ldr	r3, [pc, #384]	; (80038d0 <HAL_GPIO_Init+0x30c>)
 8003750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003752:	4a5f      	ldr	r2, [pc, #380]	; (80038d0 <HAL_GPIO_Init+0x30c>)
 8003754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003758:	6453      	str	r3, [r2, #68]	; 0x44
 800375a:	4b5d      	ldr	r3, [pc, #372]	; (80038d0 <HAL_GPIO_Init+0x30c>)
 800375c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003766:	4a5b      	ldr	r2, [pc, #364]	; (80038d4 <HAL_GPIO_Init+0x310>)
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	089b      	lsrs	r3, r3, #2
 800376c:	3302      	adds	r3, #2
 800376e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003772:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	220f      	movs	r2, #15
 800377e:	fa02 f303 	lsl.w	r3, r2, r3
 8003782:	43db      	mvns	r3, r3
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	4013      	ands	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a52      	ldr	r2, [pc, #328]	; (80038d8 <HAL_GPIO_Init+0x314>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d02b      	beq.n	80037ea <HAL_GPIO_Init+0x226>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a51      	ldr	r2, [pc, #324]	; (80038dc <HAL_GPIO_Init+0x318>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d025      	beq.n	80037e6 <HAL_GPIO_Init+0x222>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a50      	ldr	r2, [pc, #320]	; (80038e0 <HAL_GPIO_Init+0x31c>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d01f      	beq.n	80037e2 <HAL_GPIO_Init+0x21e>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a4f      	ldr	r2, [pc, #316]	; (80038e4 <HAL_GPIO_Init+0x320>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d019      	beq.n	80037de <HAL_GPIO_Init+0x21a>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a4e      	ldr	r2, [pc, #312]	; (80038e8 <HAL_GPIO_Init+0x324>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d013      	beq.n	80037da <HAL_GPIO_Init+0x216>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a4d      	ldr	r2, [pc, #308]	; (80038ec <HAL_GPIO_Init+0x328>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d00d      	beq.n	80037d6 <HAL_GPIO_Init+0x212>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a4c      	ldr	r2, [pc, #304]	; (80038f0 <HAL_GPIO_Init+0x32c>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d007      	beq.n	80037d2 <HAL_GPIO_Init+0x20e>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a4b      	ldr	r2, [pc, #300]	; (80038f4 <HAL_GPIO_Init+0x330>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d101      	bne.n	80037ce <HAL_GPIO_Init+0x20a>
 80037ca:	2307      	movs	r3, #7
 80037cc:	e00e      	b.n	80037ec <HAL_GPIO_Init+0x228>
 80037ce:	2308      	movs	r3, #8
 80037d0:	e00c      	b.n	80037ec <HAL_GPIO_Init+0x228>
 80037d2:	2306      	movs	r3, #6
 80037d4:	e00a      	b.n	80037ec <HAL_GPIO_Init+0x228>
 80037d6:	2305      	movs	r3, #5
 80037d8:	e008      	b.n	80037ec <HAL_GPIO_Init+0x228>
 80037da:	2304      	movs	r3, #4
 80037dc:	e006      	b.n	80037ec <HAL_GPIO_Init+0x228>
 80037de:	2303      	movs	r3, #3
 80037e0:	e004      	b.n	80037ec <HAL_GPIO_Init+0x228>
 80037e2:	2302      	movs	r3, #2
 80037e4:	e002      	b.n	80037ec <HAL_GPIO_Init+0x228>
 80037e6:	2301      	movs	r3, #1
 80037e8:	e000      	b.n	80037ec <HAL_GPIO_Init+0x228>
 80037ea:	2300      	movs	r3, #0
 80037ec:	69fa      	ldr	r2, [r7, #28]
 80037ee:	f002 0203 	and.w	r2, r2, #3
 80037f2:	0092      	lsls	r2, r2, #2
 80037f4:	4093      	lsls	r3, r2
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037fc:	4935      	ldr	r1, [pc, #212]	; (80038d4 <HAL_GPIO_Init+0x310>)
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	089b      	lsrs	r3, r3, #2
 8003802:	3302      	adds	r3, #2
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800380a:	4b3b      	ldr	r3, [pc, #236]	; (80038f8 <HAL_GPIO_Init+0x334>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	43db      	mvns	r3, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4013      	ands	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	4313      	orrs	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800382e:	4a32      	ldr	r2, [pc, #200]	; (80038f8 <HAL_GPIO_Init+0x334>)
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003834:	4b30      	ldr	r3, [pc, #192]	; (80038f8 <HAL_GPIO_Init+0x334>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	43db      	mvns	r3, r3
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	4013      	ands	r3, r2
 8003842:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d003      	beq.n	8003858 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	4313      	orrs	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003858:	4a27      	ldr	r2, [pc, #156]	; (80038f8 <HAL_GPIO_Init+0x334>)
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800385e:	4b26      	ldr	r3, [pc, #152]	; (80038f8 <HAL_GPIO_Init+0x334>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	43db      	mvns	r3, r3
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	4013      	ands	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	4313      	orrs	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003882:	4a1d      	ldr	r2, [pc, #116]	; (80038f8 <HAL_GPIO_Init+0x334>)
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003888:	4b1b      	ldr	r3, [pc, #108]	; (80038f8 <HAL_GPIO_Init+0x334>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	43db      	mvns	r3, r3
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	4013      	ands	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038ac:	4a12      	ldr	r2, [pc, #72]	; (80038f8 <HAL_GPIO_Init+0x334>)
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	3301      	adds	r3, #1
 80038b6:	61fb      	str	r3, [r7, #28]
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	2b0f      	cmp	r3, #15
 80038bc:	f67f ae90 	bls.w	80035e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038c0:	bf00      	nop
 80038c2:	bf00      	nop
 80038c4:	3724      	adds	r7, #36	; 0x24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	40023800 	.word	0x40023800
 80038d4:	40013800 	.word	0x40013800
 80038d8:	40020000 	.word	0x40020000
 80038dc:	40020400 	.word	0x40020400
 80038e0:	40020800 	.word	0x40020800
 80038e4:	40020c00 	.word	0x40020c00
 80038e8:	40021000 	.word	0x40021000
 80038ec:	40021400 	.word	0x40021400
 80038f0:	40021800 	.word	0x40021800
 80038f4:	40021c00 	.word	0x40021c00
 80038f8:	40013c00 	.word	0x40013c00

080038fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	460b      	mov	r3, r1
 8003906:	807b      	strh	r3, [r7, #2]
 8003908:	4613      	mov	r3, r2
 800390a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800390c:	787b      	ldrb	r3, [r7, #1]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003912:	887a      	ldrh	r2, [r7, #2]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003918:	e003      	b.n	8003922 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800391a:	887b      	ldrh	r3, [r7, #2]
 800391c:	041a      	lsls	r2, r3, #16
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	619a      	str	r2, [r3, #24]
}
 8003922:	bf00      	nop
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
	...

08003930 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e12b      	b.n	8003b9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d106      	bne.n	800395c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7fe fb82 	bl	8002060 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2224      	movs	r2, #36	; 0x24
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0201 	bic.w	r2, r2, #1
 8003972:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003982:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003992:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003994:	f001 fbac 	bl	80050f0 <HAL_RCC_GetPCLK1Freq>
 8003998:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	4a81      	ldr	r2, [pc, #516]	; (8003ba4 <HAL_I2C_Init+0x274>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d807      	bhi.n	80039b4 <HAL_I2C_Init+0x84>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4a80      	ldr	r2, [pc, #512]	; (8003ba8 <HAL_I2C_Init+0x278>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	bf94      	ite	ls
 80039ac:	2301      	movls	r3, #1
 80039ae:	2300      	movhi	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	e006      	b.n	80039c2 <HAL_I2C_Init+0x92>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4a7d      	ldr	r2, [pc, #500]	; (8003bac <HAL_I2C_Init+0x27c>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	bf94      	ite	ls
 80039bc:	2301      	movls	r3, #1
 80039be:	2300      	movhi	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e0e7      	b.n	8003b9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4a78      	ldr	r2, [pc, #480]	; (8003bb0 <HAL_I2C_Init+0x280>)
 80039ce:	fba2 2303 	umull	r2, r3, r2, r3
 80039d2:	0c9b      	lsrs	r3, r3, #18
 80039d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	4a6a      	ldr	r2, [pc, #424]	; (8003ba4 <HAL_I2C_Init+0x274>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d802      	bhi.n	8003a04 <HAL_I2C_Init+0xd4>
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	3301      	adds	r3, #1
 8003a02:	e009      	b.n	8003a18 <HAL_I2C_Init+0xe8>
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a0a:	fb02 f303 	mul.w	r3, r2, r3
 8003a0e:	4a69      	ldr	r2, [pc, #420]	; (8003bb4 <HAL_I2C_Init+0x284>)
 8003a10:	fba2 2303 	umull	r2, r3, r2, r3
 8003a14:	099b      	lsrs	r3, r3, #6
 8003a16:	3301      	adds	r3, #1
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6812      	ldr	r2, [r2, #0]
 8003a1c:	430b      	orrs	r3, r1
 8003a1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	495c      	ldr	r1, [pc, #368]	; (8003ba4 <HAL_I2C_Init+0x274>)
 8003a34:	428b      	cmp	r3, r1
 8003a36:	d819      	bhi.n	8003a6c <HAL_I2C_Init+0x13c>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	1e59      	subs	r1, r3, #1
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a46:	1c59      	adds	r1, r3, #1
 8003a48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a4c:	400b      	ands	r3, r1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00a      	beq.n	8003a68 <HAL_I2C_Init+0x138>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	1e59      	subs	r1, r3, #1
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a60:	3301      	adds	r3, #1
 8003a62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a66:	e051      	b.n	8003b0c <HAL_I2C_Init+0x1dc>
 8003a68:	2304      	movs	r3, #4
 8003a6a:	e04f      	b.n	8003b0c <HAL_I2C_Init+0x1dc>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d111      	bne.n	8003a98 <HAL_I2C_Init+0x168>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	1e58      	subs	r0, r3, #1
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6859      	ldr	r1, [r3, #4]
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	440b      	add	r3, r1
 8003a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a86:	3301      	adds	r3, #1
 8003a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	bf0c      	ite	eq
 8003a90:	2301      	moveq	r3, #1
 8003a92:	2300      	movne	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	e012      	b.n	8003abe <HAL_I2C_Init+0x18e>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	1e58      	subs	r0, r3, #1
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6859      	ldr	r1, [r3, #4]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	0099      	lsls	r1, r3, #2
 8003aa8:	440b      	add	r3, r1
 8003aaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aae:	3301      	adds	r3, #1
 8003ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	bf0c      	ite	eq
 8003ab8:	2301      	moveq	r3, #1
 8003aba:	2300      	movne	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <HAL_I2C_Init+0x196>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e022      	b.n	8003b0c <HAL_I2C_Init+0x1dc>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10e      	bne.n	8003aec <HAL_I2C_Init+0x1bc>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	1e58      	subs	r0, r3, #1
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6859      	ldr	r1, [r3, #4]
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	440b      	add	r3, r1
 8003adc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aea:	e00f      	b.n	8003b0c <HAL_I2C_Init+0x1dc>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	1e58      	subs	r0, r3, #1
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6859      	ldr	r1, [r3, #4]
 8003af4:	460b      	mov	r3, r1
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	440b      	add	r3, r1
 8003afa:	0099      	lsls	r1, r3, #2
 8003afc:	440b      	add	r3, r1
 8003afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b02:	3301      	adds	r3, #1
 8003b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	6809      	ldr	r1, [r1, #0]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	69da      	ldr	r2, [r3, #28]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	6911      	ldr	r1, [r2, #16]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	68d2      	ldr	r2, [r2, #12]
 8003b46:	4311      	orrs	r1, r2
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6812      	ldr	r2, [r2, #0]
 8003b4c:	430b      	orrs	r3, r1
 8003b4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695a      	ldr	r2, [r3, #20]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0201 	orr.w	r2, r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2220      	movs	r2, #32
 8003b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	000186a0 	.word	0x000186a0
 8003ba8:	001e847f 	.word	0x001e847f
 8003bac:	003d08ff 	.word	0x003d08ff
 8003bb0:	431bde83 	.word	0x431bde83
 8003bb4:	10624dd3 	.word	0x10624dd3

08003bb8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b088      	sub	sp, #32
 8003bbc:	af02      	add	r7, sp, #8
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	4608      	mov	r0, r1
 8003bc2:	4611      	mov	r1, r2
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	817b      	strh	r3, [r7, #10]
 8003bca:	460b      	mov	r3, r1
 8003bcc:	813b      	strh	r3, [r7, #8]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bd2:	f7fe ffb3 	bl	8002b3c <HAL_GetTick>
 8003bd6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b20      	cmp	r3, #32
 8003be2:	f040 80d9 	bne.w	8003d98 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	2319      	movs	r3, #25
 8003bec:	2201      	movs	r2, #1
 8003bee:	496d      	ldr	r1, [pc, #436]	; (8003da4 <HAL_I2C_Mem_Write+0x1ec>)
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f000 fc7f 	bl	80044f4 <I2C_WaitOnFlagUntilTimeout>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e0cc      	b.n	8003d9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d101      	bne.n	8003c0e <HAL_I2C_Mem_Write+0x56>
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	e0c5      	b.n	8003d9a <HAL_I2C_Mem_Write+0x1e2>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d007      	beq.n	8003c34 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f042 0201 	orr.w	r2, r2, #1
 8003c32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2221      	movs	r2, #33	; 0x21
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2240      	movs	r2, #64	; 0x40
 8003c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6a3a      	ldr	r2, [r7, #32]
 8003c5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4a4d      	ldr	r2, [pc, #308]	; (8003da8 <HAL_I2C_Mem_Write+0x1f0>)
 8003c74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c76:	88f8      	ldrh	r0, [r7, #6]
 8003c78:	893a      	ldrh	r2, [r7, #8]
 8003c7a:	8979      	ldrh	r1, [r7, #10]
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	9301      	str	r3, [sp, #4]
 8003c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	4603      	mov	r3, r0
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f000 fab6 	bl	80041f8 <I2C_RequestMemoryWrite>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d052      	beq.n	8003d38 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e081      	b.n	8003d9a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f000 fd00 	bl	80046a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00d      	beq.n	8003cc2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d107      	bne.n	8003cbe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cbc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e06b      	b.n	8003d9a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	781a      	ldrb	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	1c5a      	adds	r2, r3, #1
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	3b01      	subs	r3, #1
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	d11b      	bne.n	8003d38 <HAL_I2C_Mem_Write+0x180>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d017      	beq.n	8003d38 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	781a      	ldrb	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d22:	3b01      	subs	r3, #1
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	3b01      	subs	r3, #1
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1aa      	bne.n	8003c96 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 fcec 	bl	8004722 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00d      	beq.n	8003d6c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d54:	2b04      	cmp	r3, #4
 8003d56:	d107      	bne.n	8003d68 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d66:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e016      	b.n	8003d9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d94:	2300      	movs	r3, #0
 8003d96:	e000      	b.n	8003d9a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d98:	2302      	movs	r3, #2
  }
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	00100002 	.word	0x00100002
 8003da8:	ffff0000 	.word	0xffff0000

08003dac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b08c      	sub	sp, #48	; 0x30
 8003db0:	af02      	add	r7, sp, #8
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	4608      	mov	r0, r1
 8003db6:	4611      	mov	r1, r2
 8003db8:	461a      	mov	r2, r3
 8003dba:	4603      	mov	r3, r0
 8003dbc:	817b      	strh	r3, [r7, #10]
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	813b      	strh	r3, [r7, #8]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003dc6:	f7fe feb9 	bl	8002b3c <HAL_GetTick>
 8003dca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b20      	cmp	r3, #32
 8003dd6:	f040 8208 	bne.w	80041ea <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	2319      	movs	r3, #25
 8003de0:	2201      	movs	r2, #1
 8003de2:	497b      	ldr	r1, [pc, #492]	; (8003fd0 <HAL_I2C_Mem_Read+0x224>)
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 fb85 	bl	80044f4 <I2C_WaitOnFlagUntilTimeout>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003df0:	2302      	movs	r3, #2
 8003df2:	e1fb      	b.n	80041ec <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d101      	bne.n	8003e02 <HAL_I2C_Mem_Read+0x56>
 8003dfe:	2302      	movs	r3, #2
 8003e00:	e1f4      	b.n	80041ec <HAL_I2C_Mem_Read+0x440>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d007      	beq.n	8003e28 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f042 0201 	orr.w	r2, r2, #1
 8003e26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2222      	movs	r2, #34	; 0x22
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2240      	movs	r2, #64	; 0x40
 8003e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003e58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4a5b      	ldr	r2, [pc, #364]	; (8003fd4 <HAL_I2C_Mem_Read+0x228>)
 8003e68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e6a:	88f8      	ldrh	r0, [r7, #6]
 8003e6c:	893a      	ldrh	r2, [r7, #8]
 8003e6e:	8979      	ldrh	r1, [r7, #10]
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	9301      	str	r3, [sp, #4]
 8003e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	4603      	mov	r3, r0
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 fa52 	bl	8004324 <I2C_RequestMemoryRead>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e1b0      	b.n	80041ec <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d113      	bne.n	8003eba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e92:	2300      	movs	r3, #0
 8003e94:	623b      	str	r3, [r7, #32]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	623b      	str	r3, [r7, #32]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	623b      	str	r3, [r7, #32]
 8003ea6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	e184      	b.n	80041c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d11b      	bne.n	8003efa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ed0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	61fb      	str	r3, [r7, #28]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	61fb      	str	r3, [r7, #28]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	61fb      	str	r3, [r7, #28]
 8003ee6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ef6:	601a      	str	r2, [r3, #0]
 8003ef8:	e164      	b.n	80041c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d11b      	bne.n	8003f3a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f10:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f22:	2300      	movs	r3, #0
 8003f24:	61bb      	str	r3, [r7, #24]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	61bb      	str	r3, [r7, #24]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	61bb      	str	r3, [r7, #24]
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	e144      	b.n	80041c4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	617b      	str	r3, [r7, #20]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	617b      	str	r3, [r7, #20]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	617b      	str	r3, [r7, #20]
 8003f4e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003f50:	e138      	b.n	80041c4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f56:	2b03      	cmp	r3, #3
 8003f58:	f200 80f1 	bhi.w	800413e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d123      	bne.n	8003fac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 fc1b 	bl	80047a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e139      	b.n	80041ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	691a      	ldr	r2, [r3, #16]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	1c5a      	adds	r2, r3, #1
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003faa:	e10b      	b.n	80041c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d14e      	bne.n	8004052 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fba:	2200      	movs	r2, #0
 8003fbc:	4906      	ldr	r1, [pc, #24]	; (8003fd8 <HAL_I2C_Mem_Read+0x22c>)
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 fa98 	bl	80044f4 <I2C_WaitOnFlagUntilTimeout>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d008      	beq.n	8003fdc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e10e      	b.n	80041ec <HAL_I2C_Mem_Read+0x440>
 8003fce:	bf00      	nop
 8003fd0:	00100002 	.word	0x00100002
 8003fd4:	ffff0000 	.word	0xffff0000
 8003fd8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	691a      	ldr	r2, [r3, #16]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	1c5a      	adds	r2, r3, #1
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004008:	3b01      	subs	r3, #1
 800400a:	b29a      	uxth	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004014:	b29b      	uxth	r3, r3
 8004016:	3b01      	subs	r3, #1
 8004018:	b29a      	uxth	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	691a      	ldr	r2, [r3, #16]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	b2d2      	uxtb	r2, r2
 800402a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	1c5a      	adds	r2, r3, #1
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800403a:	3b01      	subs	r3, #1
 800403c:	b29a      	uxth	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004046:	b29b      	uxth	r3, r3
 8004048:	3b01      	subs	r3, #1
 800404a:	b29a      	uxth	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004050:	e0b8      	b.n	80041c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	9300      	str	r3, [sp, #0]
 8004056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004058:	2200      	movs	r2, #0
 800405a:	4966      	ldr	r1, [pc, #408]	; (80041f4 <HAL_I2C_Mem_Read+0x448>)
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f000 fa49 	bl	80044f4 <I2C_WaitOnFlagUntilTimeout>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e0bf      	b.n	80041ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800407a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	691a      	ldr	r2, [r3, #16]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	b2d2      	uxtb	r2, r2
 8004088:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	1c5a      	adds	r2, r3, #1
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004098:	3b01      	subs	r3, #1
 800409a:	b29a      	uxth	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	3b01      	subs	r3, #1
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b4:	2200      	movs	r2, #0
 80040b6:	494f      	ldr	r1, [pc, #316]	; (80041f4 <HAL_I2C_Mem_Read+0x448>)
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 fa1b 	bl	80044f4 <I2C_WaitOnFlagUntilTimeout>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e091      	b.n	80041ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	691a      	ldr	r2, [r3, #16]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	b2d2      	uxtb	r2, r2
 80040e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	1c5a      	adds	r2, r3, #1
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004100:	b29b      	uxth	r3, r3
 8004102:	3b01      	subs	r3, #1
 8004104:	b29a      	uxth	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	691a      	ldr	r2, [r3, #16]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	b2d2      	uxtb	r2, r2
 8004116:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	1c5a      	adds	r2, r3, #1
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004126:	3b01      	subs	r3, #1
 8004128:	b29a      	uxth	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004132:	b29b      	uxth	r3, r3
 8004134:	3b01      	subs	r3, #1
 8004136:	b29a      	uxth	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800413c:	e042      	b.n	80041c4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800413e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004140:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f000 fb2e 	bl	80047a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e04c      	b.n	80041ec <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	691a      	ldr	r2, [r3, #16]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	b2d2      	uxtb	r2, r2
 800415e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	1c5a      	adds	r2, r3, #1
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416e:	3b01      	subs	r3, #1
 8004170:	b29a      	uxth	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800417a:	b29b      	uxth	r3, r3
 800417c:	3b01      	subs	r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	f003 0304 	and.w	r3, r3, #4
 800418e:	2b04      	cmp	r3, #4
 8004190:	d118      	bne.n	80041c4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	691a      	ldr	r2, [r3, #16]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419c:	b2d2      	uxtb	r2, r2
 800419e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	1c5a      	adds	r2, r3, #1
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ae:	3b01      	subs	r3, #1
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	3b01      	subs	r3, #1
 80041be:	b29a      	uxth	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f47f aec2 	bne.w	8003f52 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2220      	movs	r2, #32
 80041d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041e6:	2300      	movs	r3, #0
 80041e8:	e000      	b.n	80041ec <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80041ea:	2302      	movs	r3, #2
  }
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3728      	adds	r7, #40	; 0x28
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	00010004 	.word	0x00010004

080041f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b088      	sub	sp, #32
 80041fc:	af02      	add	r7, sp, #8
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	4608      	mov	r0, r1
 8004202:	4611      	mov	r1, r2
 8004204:	461a      	mov	r2, r3
 8004206:	4603      	mov	r3, r0
 8004208:	817b      	strh	r3, [r7, #10]
 800420a:	460b      	mov	r3, r1
 800420c:	813b      	strh	r3, [r7, #8]
 800420e:	4613      	mov	r3, r2
 8004210:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004220:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	6a3b      	ldr	r3, [r7, #32]
 8004228:	2200      	movs	r2, #0
 800422a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 f960 	bl	80044f4 <I2C_WaitOnFlagUntilTimeout>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00d      	beq.n	8004256 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004244:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004248:	d103      	bne.n	8004252 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004250:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e05f      	b.n	8004316 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004256:	897b      	ldrh	r3, [r7, #10]
 8004258:	b2db      	uxtb	r3, r3
 800425a:	461a      	mov	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004264:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	6a3a      	ldr	r2, [r7, #32]
 800426a:	492d      	ldr	r1, [pc, #180]	; (8004320 <I2C_RequestMemoryWrite+0x128>)
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f000 f998 	bl	80045a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e04c      	b.n	8004316 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800427c:	2300      	movs	r3, #0
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	617b      	str	r3, [r7, #20]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004294:	6a39      	ldr	r1, [r7, #32]
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 fa02 	bl	80046a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00d      	beq.n	80042be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	2b04      	cmp	r3, #4
 80042a8:	d107      	bne.n	80042ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e02b      	b.n	8004316 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042be:	88fb      	ldrh	r3, [r7, #6]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d105      	bne.n	80042d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042c4:	893b      	ldrh	r3, [r7, #8]
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	611a      	str	r2, [r3, #16]
 80042ce:	e021      	b.n	8004314 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80042d0:	893b      	ldrh	r3, [r7, #8]
 80042d2:	0a1b      	lsrs	r3, r3, #8
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e0:	6a39      	ldr	r1, [r7, #32]
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f000 f9dc 	bl	80046a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00d      	beq.n	800430a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	2b04      	cmp	r3, #4
 80042f4:	d107      	bne.n	8004306 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004304:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e005      	b.n	8004316 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800430a:	893b      	ldrh	r3, [r7, #8]
 800430c:	b2da      	uxtb	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3718      	adds	r7, #24
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	00010002 	.word	0x00010002

08004324 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b088      	sub	sp, #32
 8004328:	af02      	add	r7, sp, #8
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	4608      	mov	r0, r1
 800432e:	4611      	mov	r1, r2
 8004330:	461a      	mov	r2, r3
 8004332:	4603      	mov	r3, r0
 8004334:	817b      	strh	r3, [r7, #10]
 8004336:	460b      	mov	r3, r1
 8004338:	813b      	strh	r3, [r7, #8]
 800433a:	4613      	mov	r3, r2
 800433c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800434c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800435c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	2200      	movs	r2, #0
 8004366:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f000 f8c2 	bl	80044f4 <I2C_WaitOnFlagUntilTimeout>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00d      	beq.n	8004392 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004384:	d103      	bne.n	800438e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f44f 7200 	mov.w	r2, #512	; 0x200
 800438c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e0aa      	b.n	80044e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004392:	897b      	ldrh	r3, [r7, #10]
 8004394:	b2db      	uxtb	r3, r3
 8004396:	461a      	mov	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	6a3a      	ldr	r2, [r7, #32]
 80043a6:	4952      	ldr	r1, [pc, #328]	; (80044f0 <I2C_RequestMemoryRead+0x1cc>)
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 f8fa 	bl	80045a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e097      	b.n	80044e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043b8:	2300      	movs	r3, #0
 80043ba:	617b      	str	r3, [r7, #20]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	617b      	str	r3, [r7, #20]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	617b      	str	r3, [r7, #20]
 80043cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d0:	6a39      	ldr	r1, [r7, #32]
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 f964 	bl	80046a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00d      	beq.n	80043fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	d107      	bne.n	80043f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e076      	b.n	80044e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043fa:	88fb      	ldrh	r3, [r7, #6]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d105      	bne.n	800440c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004400:	893b      	ldrh	r3, [r7, #8]
 8004402:	b2da      	uxtb	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	611a      	str	r2, [r3, #16]
 800440a:	e021      	b.n	8004450 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800440c:	893b      	ldrh	r3, [r7, #8]
 800440e:	0a1b      	lsrs	r3, r3, #8
 8004410:	b29b      	uxth	r3, r3
 8004412:	b2da      	uxtb	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800441a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800441c:	6a39      	ldr	r1, [r7, #32]
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 f93e 	bl	80046a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00d      	beq.n	8004446 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	2b04      	cmp	r3, #4
 8004430:	d107      	bne.n	8004442 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004440:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e050      	b.n	80044e8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004446:	893b      	ldrh	r3, [r7, #8]
 8004448:	b2da      	uxtb	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004452:	6a39      	ldr	r1, [r7, #32]
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f000 f923 	bl	80046a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00d      	beq.n	800447c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004464:	2b04      	cmp	r3, #4
 8004466:	d107      	bne.n	8004478 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004476:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e035      	b.n	80044e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800448a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	6a3b      	ldr	r3, [r7, #32]
 8004492:	2200      	movs	r2, #0
 8004494:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 f82b 	bl	80044f4 <I2C_WaitOnFlagUntilTimeout>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00d      	beq.n	80044c0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044b2:	d103      	bne.n	80044bc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e013      	b.n	80044e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80044c0:	897b      	ldrh	r3, [r7, #10]
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	f043 0301 	orr.w	r3, r3, #1
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	6a3a      	ldr	r2, [r7, #32]
 80044d4:	4906      	ldr	r1, [pc, #24]	; (80044f0 <I2C_RequestMemoryRead+0x1cc>)
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 f863 	bl	80045a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e000      	b.n	80044e8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3718      	adds	r7, #24
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	00010002 	.word	0x00010002

080044f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	603b      	str	r3, [r7, #0]
 8004500:	4613      	mov	r3, r2
 8004502:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004504:	e025      	b.n	8004552 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800450c:	d021      	beq.n	8004552 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800450e:	f7fe fb15 	bl	8002b3c <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	429a      	cmp	r2, r3
 800451c:	d302      	bcc.n	8004524 <I2C_WaitOnFlagUntilTimeout+0x30>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d116      	bne.n	8004552 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2220      	movs	r2, #32
 800452e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453e:	f043 0220 	orr.w	r2, r3, #32
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e023      	b.n	800459a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	0c1b      	lsrs	r3, r3, #16
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b01      	cmp	r3, #1
 800455a:	d10d      	bne.n	8004578 <I2C_WaitOnFlagUntilTimeout+0x84>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	43da      	mvns	r2, r3
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	4013      	ands	r3, r2
 8004568:	b29b      	uxth	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	bf0c      	ite	eq
 800456e:	2301      	moveq	r3, #1
 8004570:	2300      	movne	r3, #0
 8004572:	b2db      	uxtb	r3, r3
 8004574:	461a      	mov	r2, r3
 8004576:	e00c      	b.n	8004592 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	43da      	mvns	r2, r3
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	4013      	ands	r3, r2
 8004584:	b29b      	uxth	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	bf0c      	ite	eq
 800458a:	2301      	moveq	r3, #1
 800458c:	2300      	movne	r3, #0
 800458e:	b2db      	uxtb	r3, r3
 8004590:	461a      	mov	r2, r3
 8004592:	79fb      	ldrb	r3, [r7, #7]
 8004594:	429a      	cmp	r2, r3
 8004596:	d0b6      	beq.n	8004506 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b084      	sub	sp, #16
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	60f8      	str	r0, [r7, #12]
 80045aa:	60b9      	str	r1, [r7, #8]
 80045ac:	607a      	str	r2, [r7, #4]
 80045ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045b0:	e051      	b.n	8004656 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045c0:	d123      	bne.n	800460a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2220      	movs	r2, #32
 80045e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	f043 0204 	orr.w	r2, r3, #4
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e046      	b.n	8004698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004610:	d021      	beq.n	8004656 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004612:	f7fe fa93 	bl	8002b3c <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	429a      	cmp	r2, r3
 8004620:	d302      	bcc.n	8004628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d116      	bne.n	8004656 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2220      	movs	r2, #32
 8004632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	f043 0220 	orr.w	r2, r3, #32
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e020      	b.n	8004698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	0c1b      	lsrs	r3, r3, #16
 800465a:	b2db      	uxtb	r3, r3
 800465c:	2b01      	cmp	r3, #1
 800465e:	d10c      	bne.n	800467a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	43da      	mvns	r2, r3
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	4013      	ands	r3, r2
 800466c:	b29b      	uxth	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	bf14      	ite	ne
 8004672:	2301      	movne	r3, #1
 8004674:	2300      	moveq	r3, #0
 8004676:	b2db      	uxtb	r3, r3
 8004678:	e00b      	b.n	8004692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	43da      	mvns	r2, r3
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	4013      	ands	r3, r2
 8004686:	b29b      	uxth	r3, r3
 8004688:	2b00      	cmp	r3, #0
 800468a:	bf14      	ite	ne
 800468c:	2301      	movne	r3, #1
 800468e:	2300      	moveq	r3, #0
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d18d      	bne.n	80045b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046ac:	e02d      	b.n	800470a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 f8ce 	bl	8004850 <I2C_IsAcknowledgeFailed>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e02d      	b.n	800471a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c4:	d021      	beq.n	800470a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046c6:	f7fe fa39 	bl	8002b3c <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d302      	bcc.n	80046dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d116      	bne.n	800470a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2220      	movs	r2, #32
 80046e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	f043 0220 	orr.w	r2, r3, #32
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e007      	b.n	800471a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004714:	2b80      	cmp	r3, #128	; 0x80
 8004716:	d1ca      	bne.n	80046ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b084      	sub	sp, #16
 8004726:	af00      	add	r7, sp, #0
 8004728:	60f8      	str	r0, [r7, #12]
 800472a:	60b9      	str	r1, [r7, #8]
 800472c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800472e:	e02d      	b.n	800478c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f000 f88d 	bl	8004850 <I2C_IsAcknowledgeFailed>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e02d      	b.n	800479c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004746:	d021      	beq.n	800478c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004748:	f7fe f9f8 	bl	8002b3c <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	429a      	cmp	r2, r3
 8004756:	d302      	bcc.n	800475e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d116      	bne.n	800478c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2220      	movs	r2, #32
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004778:	f043 0220 	orr.w	r2, r3, #32
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e007      	b.n	800479c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	f003 0304 	and.w	r3, r3, #4
 8004796:	2b04      	cmp	r3, #4
 8004798:	d1ca      	bne.n	8004730 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3710      	adds	r7, #16
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047b0:	e042      	b.n	8004838 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	f003 0310 	and.w	r3, r3, #16
 80047bc:	2b10      	cmp	r3, #16
 80047be:	d119      	bne.n	80047f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f06f 0210 	mvn.w	r2, #16
 80047c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2220      	movs	r2, #32
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e029      	b.n	8004848 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047f4:	f7fe f9a2 	bl	8002b3c <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	429a      	cmp	r2, r3
 8004802:	d302      	bcc.n	800480a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d116      	bne.n	8004838 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2220      	movs	r2, #32
 8004814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004824:	f043 0220 	orr.w	r2, r3, #32
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e007      	b.n	8004848 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004842:	2b40      	cmp	r3, #64	; 0x40
 8004844:	d1b5      	bne.n	80047b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004866:	d11b      	bne.n	80048a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004870:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2220      	movs	r2, #32
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488c:	f043 0204 	orr.w	r2, r3, #4
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e000      	b.n	80048a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
	...

080048b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e264      	b.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d075      	beq.n	80049ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048ce:	4ba3      	ldr	r3, [pc, #652]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 030c 	and.w	r3, r3, #12
 80048d6:	2b04      	cmp	r3, #4
 80048d8:	d00c      	beq.n	80048f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048da:	4ba0      	ldr	r3, [pc, #640]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048e2:	2b08      	cmp	r3, #8
 80048e4:	d112      	bne.n	800490c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048e6:	4b9d      	ldr	r3, [pc, #628]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048f2:	d10b      	bne.n	800490c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048f4:	4b99      	ldr	r3, [pc, #612]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d05b      	beq.n	80049b8 <HAL_RCC_OscConfig+0x108>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d157      	bne.n	80049b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e23f      	b.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004914:	d106      	bne.n	8004924 <HAL_RCC_OscConfig+0x74>
 8004916:	4b91      	ldr	r3, [pc, #580]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a90      	ldr	r2, [pc, #576]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 800491c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004920:	6013      	str	r3, [r2, #0]
 8004922:	e01d      	b.n	8004960 <HAL_RCC_OscConfig+0xb0>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800492c:	d10c      	bne.n	8004948 <HAL_RCC_OscConfig+0x98>
 800492e:	4b8b      	ldr	r3, [pc, #556]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a8a      	ldr	r2, [pc, #552]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 8004934:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004938:	6013      	str	r3, [r2, #0]
 800493a:	4b88      	ldr	r3, [pc, #544]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a87      	ldr	r2, [pc, #540]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 8004940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004944:	6013      	str	r3, [r2, #0]
 8004946:	e00b      	b.n	8004960 <HAL_RCC_OscConfig+0xb0>
 8004948:	4b84      	ldr	r3, [pc, #528]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a83      	ldr	r2, [pc, #524]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 800494e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004952:	6013      	str	r3, [r2, #0]
 8004954:	4b81      	ldr	r3, [pc, #516]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a80      	ldr	r2, [pc, #512]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 800495a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800495e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d013      	beq.n	8004990 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004968:	f7fe f8e8 	bl	8002b3c <HAL_GetTick>
 800496c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800496e:	e008      	b.n	8004982 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004970:	f7fe f8e4 	bl	8002b3c <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b64      	cmp	r3, #100	; 0x64
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e204      	b.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004982:	4b76      	ldr	r3, [pc, #472]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d0f0      	beq.n	8004970 <HAL_RCC_OscConfig+0xc0>
 800498e:	e014      	b.n	80049ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004990:	f7fe f8d4 	bl	8002b3c <HAL_GetTick>
 8004994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004996:	e008      	b.n	80049aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004998:	f7fe f8d0 	bl	8002b3c <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b64      	cmp	r3, #100	; 0x64
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e1f0      	b.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049aa:	4b6c      	ldr	r3, [pc, #432]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1f0      	bne.n	8004998 <HAL_RCC_OscConfig+0xe8>
 80049b6:	e000      	b.n	80049ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d063      	beq.n	8004a8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049c6:	4b65      	ldr	r3, [pc, #404]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f003 030c 	and.w	r3, r3, #12
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00b      	beq.n	80049ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049d2:	4b62      	ldr	r3, [pc, #392]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049da:	2b08      	cmp	r3, #8
 80049dc:	d11c      	bne.n	8004a18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049de:	4b5f      	ldr	r3, [pc, #380]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d116      	bne.n	8004a18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ea:	4b5c      	ldr	r3, [pc, #368]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d005      	beq.n	8004a02 <HAL_RCC_OscConfig+0x152>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d001      	beq.n	8004a02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e1c4      	b.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a02:	4b56      	ldr	r3, [pc, #344]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	4952      	ldr	r1, [pc, #328]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a16:	e03a      	b.n	8004a8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d020      	beq.n	8004a62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a20:	4b4f      	ldr	r3, [pc, #316]	; (8004b60 <HAL_RCC_OscConfig+0x2b0>)
 8004a22:	2201      	movs	r2, #1
 8004a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a26:	f7fe f889 	bl	8002b3c <HAL_GetTick>
 8004a2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a2c:	e008      	b.n	8004a40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a2e:	f7fe f885 	bl	8002b3c <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d901      	bls.n	8004a40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e1a5      	b.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a40:	4b46      	ldr	r3, [pc, #280]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d0f0      	beq.n	8004a2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a4c:	4b43      	ldr	r3, [pc, #268]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	00db      	lsls	r3, r3, #3
 8004a5a:	4940      	ldr	r1, [pc, #256]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	600b      	str	r3, [r1, #0]
 8004a60:	e015      	b.n	8004a8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a62:	4b3f      	ldr	r3, [pc, #252]	; (8004b60 <HAL_RCC_OscConfig+0x2b0>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a68:	f7fe f868 	bl	8002b3c <HAL_GetTick>
 8004a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a6e:	e008      	b.n	8004a82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a70:	f7fe f864 	bl	8002b3c <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e184      	b.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a82:	4b36      	ldr	r3, [pc, #216]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1f0      	bne.n	8004a70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0308 	and.w	r3, r3, #8
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d030      	beq.n	8004afc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d016      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aa2:	4b30      	ldr	r3, [pc, #192]	; (8004b64 <HAL_RCC_OscConfig+0x2b4>)
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa8:	f7fe f848 	bl	8002b3c <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ab0:	f7fe f844 	bl	8002b3c <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e164      	b.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ac2:	4b26      	ldr	r3, [pc, #152]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 8004ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0f0      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x200>
 8004ace:	e015      	b.n	8004afc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ad0:	4b24      	ldr	r3, [pc, #144]	; (8004b64 <HAL_RCC_OscConfig+0x2b4>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ad6:	f7fe f831 	bl	8002b3c <HAL_GetTick>
 8004ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004adc:	e008      	b.n	8004af0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ade:	f7fe f82d 	bl	8002b3c <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e14d      	b.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004af0:	4b1a      	ldr	r3, [pc, #104]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 8004af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004af4:	f003 0302 	and.w	r3, r3, #2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1f0      	bne.n	8004ade <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0304 	and.w	r3, r3, #4
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f000 80a0 	beq.w	8004c4a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b0e:	4b13      	ldr	r3, [pc, #76]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10f      	bne.n	8004b3a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60bb      	str	r3, [r7, #8]
 8004b1e:	4b0f      	ldr	r3, [pc, #60]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	4a0e      	ldr	r2, [pc, #56]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 8004b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b28:	6413      	str	r3, [r2, #64]	; 0x40
 8004b2a:	4b0c      	ldr	r3, [pc, #48]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b32:	60bb      	str	r3, [r7, #8]
 8004b34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b36:	2301      	movs	r3, #1
 8004b38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b3a:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <HAL_RCC_OscConfig+0x2b8>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d121      	bne.n	8004b8a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b46:	4b08      	ldr	r3, [pc, #32]	; (8004b68 <HAL_RCC_OscConfig+0x2b8>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a07      	ldr	r2, [pc, #28]	; (8004b68 <HAL_RCC_OscConfig+0x2b8>)
 8004b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b52:	f7fd fff3 	bl	8002b3c <HAL_GetTick>
 8004b56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b58:	e011      	b.n	8004b7e <HAL_RCC_OscConfig+0x2ce>
 8004b5a:	bf00      	nop
 8004b5c:	40023800 	.word	0x40023800
 8004b60:	42470000 	.word	0x42470000
 8004b64:	42470e80 	.word	0x42470e80
 8004b68:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b6c:	f7fd ffe6 	bl	8002b3c <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e106      	b.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b7e:	4b85      	ldr	r3, [pc, #532]	; (8004d94 <HAL_RCC_OscConfig+0x4e4>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d0f0      	beq.n	8004b6c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d106      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x2f0>
 8004b92:	4b81      	ldr	r3, [pc, #516]	; (8004d98 <HAL_RCC_OscConfig+0x4e8>)
 8004b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b96:	4a80      	ldr	r2, [pc, #512]	; (8004d98 <HAL_RCC_OscConfig+0x4e8>)
 8004b98:	f043 0301 	orr.w	r3, r3, #1
 8004b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b9e:	e01c      	b.n	8004bda <HAL_RCC_OscConfig+0x32a>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	2b05      	cmp	r3, #5
 8004ba6:	d10c      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x312>
 8004ba8:	4b7b      	ldr	r3, [pc, #492]	; (8004d98 <HAL_RCC_OscConfig+0x4e8>)
 8004baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bac:	4a7a      	ldr	r2, [pc, #488]	; (8004d98 <HAL_RCC_OscConfig+0x4e8>)
 8004bae:	f043 0304 	orr.w	r3, r3, #4
 8004bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8004bb4:	4b78      	ldr	r3, [pc, #480]	; (8004d98 <HAL_RCC_OscConfig+0x4e8>)
 8004bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb8:	4a77      	ldr	r2, [pc, #476]	; (8004d98 <HAL_RCC_OscConfig+0x4e8>)
 8004bba:	f043 0301 	orr.w	r3, r3, #1
 8004bbe:	6713      	str	r3, [r2, #112]	; 0x70
 8004bc0:	e00b      	b.n	8004bda <HAL_RCC_OscConfig+0x32a>
 8004bc2:	4b75      	ldr	r3, [pc, #468]	; (8004d98 <HAL_RCC_OscConfig+0x4e8>)
 8004bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc6:	4a74      	ldr	r2, [pc, #464]	; (8004d98 <HAL_RCC_OscConfig+0x4e8>)
 8004bc8:	f023 0301 	bic.w	r3, r3, #1
 8004bcc:	6713      	str	r3, [r2, #112]	; 0x70
 8004bce:	4b72      	ldr	r3, [pc, #456]	; (8004d98 <HAL_RCC_OscConfig+0x4e8>)
 8004bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd2:	4a71      	ldr	r2, [pc, #452]	; (8004d98 <HAL_RCC_OscConfig+0x4e8>)
 8004bd4:	f023 0304 	bic.w	r3, r3, #4
 8004bd8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d015      	beq.n	8004c0e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be2:	f7fd ffab 	bl	8002b3c <HAL_GetTick>
 8004be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be8:	e00a      	b.n	8004c00 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bea:	f7fd ffa7 	bl	8002b3c <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d901      	bls.n	8004c00 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e0c5      	b.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c00:	4b65      	ldr	r3, [pc, #404]	; (8004d98 <HAL_RCC_OscConfig+0x4e8>)
 8004c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d0ee      	beq.n	8004bea <HAL_RCC_OscConfig+0x33a>
 8004c0c:	e014      	b.n	8004c38 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c0e:	f7fd ff95 	bl	8002b3c <HAL_GetTick>
 8004c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c14:	e00a      	b.n	8004c2c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c16:	f7fd ff91 	bl	8002b3c <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d901      	bls.n	8004c2c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e0af      	b.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c2c:	4b5a      	ldr	r3, [pc, #360]	; (8004d98 <HAL_RCC_OscConfig+0x4e8>)
 8004c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1ee      	bne.n	8004c16 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c38:	7dfb      	ldrb	r3, [r7, #23]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d105      	bne.n	8004c4a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c3e:	4b56      	ldr	r3, [pc, #344]	; (8004d98 <HAL_RCC_OscConfig+0x4e8>)
 8004c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c42:	4a55      	ldr	r2, [pc, #340]	; (8004d98 <HAL_RCC_OscConfig+0x4e8>)
 8004c44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 809b 	beq.w	8004d8a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c54:	4b50      	ldr	r3, [pc, #320]	; (8004d98 <HAL_RCC_OscConfig+0x4e8>)
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f003 030c 	and.w	r3, r3, #12
 8004c5c:	2b08      	cmp	r3, #8
 8004c5e:	d05c      	beq.n	8004d1a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d141      	bne.n	8004cec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c68:	4b4c      	ldr	r3, [pc, #304]	; (8004d9c <HAL_RCC_OscConfig+0x4ec>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c6e:	f7fd ff65 	bl	8002b3c <HAL_GetTick>
 8004c72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c74:	e008      	b.n	8004c88 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c76:	f7fd ff61 	bl	8002b3c <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d901      	bls.n	8004c88 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e081      	b.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c88:	4b43      	ldr	r3, [pc, #268]	; (8004d98 <HAL_RCC_OscConfig+0x4e8>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1f0      	bne.n	8004c76 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	69da      	ldr	r2, [r3, #28]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a1b      	ldr	r3, [r3, #32]
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	019b      	lsls	r3, r3, #6
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004caa:	085b      	lsrs	r3, r3, #1
 8004cac:	3b01      	subs	r3, #1
 8004cae:	041b      	lsls	r3, r3, #16
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb6:	061b      	lsls	r3, r3, #24
 8004cb8:	4937      	ldr	r1, [pc, #220]	; (8004d98 <HAL_RCC_OscConfig+0x4e8>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cbe:	4b37      	ldr	r3, [pc, #220]	; (8004d9c <HAL_RCC_OscConfig+0x4ec>)
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc4:	f7fd ff3a 	bl	8002b3c <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ccc:	f7fd ff36 	bl	8002b3c <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e056      	b.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cde:	4b2e      	ldr	r3, [pc, #184]	; (8004d98 <HAL_RCC_OscConfig+0x4e8>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0f0      	beq.n	8004ccc <HAL_RCC_OscConfig+0x41c>
 8004cea:	e04e      	b.n	8004d8a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cec:	4b2b      	ldr	r3, [pc, #172]	; (8004d9c <HAL_RCC_OscConfig+0x4ec>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf2:	f7fd ff23 	bl	8002b3c <HAL_GetTick>
 8004cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cf8:	e008      	b.n	8004d0c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cfa:	f7fd ff1f 	bl	8002b3c <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d901      	bls.n	8004d0c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e03f      	b.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d0c:	4b22      	ldr	r3, [pc, #136]	; (8004d98 <HAL_RCC_OscConfig+0x4e8>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1f0      	bne.n	8004cfa <HAL_RCC_OscConfig+0x44a>
 8004d18:	e037      	b.n	8004d8a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d101      	bne.n	8004d26 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e032      	b.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d26:	4b1c      	ldr	r3, [pc, #112]	; (8004d98 <HAL_RCC_OscConfig+0x4e8>)
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d028      	beq.n	8004d86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d121      	bne.n	8004d86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d11a      	bne.n	8004d86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d56:	4013      	ands	r3, r2
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d5c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d111      	bne.n	8004d86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6c:	085b      	lsrs	r3, r3, #1
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d107      	bne.n	8004d86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d80:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d001      	beq.n	8004d8a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e000      	b.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3718      	adds	r7, #24
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	40007000 	.word	0x40007000
 8004d98:	40023800 	.word	0x40023800
 8004d9c:	42470060 	.word	0x42470060

08004da0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e0cc      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004db4:	4b68      	ldr	r3, [pc, #416]	; (8004f58 <HAL_RCC_ClockConfig+0x1b8>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0307 	and.w	r3, r3, #7
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d90c      	bls.n	8004ddc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dc2:	4b65      	ldr	r3, [pc, #404]	; (8004f58 <HAL_RCC_ClockConfig+0x1b8>)
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	b2d2      	uxtb	r2, r2
 8004dc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dca:	4b63      	ldr	r3, [pc, #396]	; (8004f58 <HAL_RCC_ClockConfig+0x1b8>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0307 	and.w	r3, r3, #7
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d001      	beq.n	8004ddc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e0b8      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0302 	and.w	r3, r3, #2
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d020      	beq.n	8004e2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d005      	beq.n	8004e00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004df4:	4b59      	ldr	r3, [pc, #356]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	4a58      	ldr	r2, [pc, #352]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004dfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004dfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0308 	and.w	r3, r3, #8
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d005      	beq.n	8004e18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e0c:	4b53      	ldr	r3, [pc, #332]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	4a52      	ldr	r2, [pc, #328]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e18:	4b50      	ldr	r3, [pc, #320]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	494d      	ldr	r1, [pc, #308]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d044      	beq.n	8004ec0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d107      	bne.n	8004e4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e3e:	4b47      	ldr	r3, [pc, #284]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d119      	bne.n	8004e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e07f      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d003      	beq.n	8004e5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e5a:	2b03      	cmp	r3, #3
 8004e5c:	d107      	bne.n	8004e6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e5e:	4b3f      	ldr	r3, [pc, #252]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d109      	bne.n	8004e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e06f      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e6e:	4b3b      	ldr	r3, [pc, #236]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e067      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e7e:	4b37      	ldr	r3, [pc, #220]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f023 0203 	bic.w	r2, r3, #3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	4934      	ldr	r1, [pc, #208]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e90:	f7fd fe54 	bl	8002b3c <HAL_GetTick>
 8004e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e96:	e00a      	b.n	8004eae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e98:	f7fd fe50 	bl	8002b3c <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e04f      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eae:	4b2b      	ldr	r3, [pc, #172]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f003 020c 	and.w	r2, r3, #12
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d1eb      	bne.n	8004e98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ec0:	4b25      	ldr	r3, [pc, #148]	; (8004f58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0307 	and.w	r3, r3, #7
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d20c      	bcs.n	8004ee8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ece:	4b22      	ldr	r3, [pc, #136]	; (8004f58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ed0:	683a      	ldr	r2, [r7, #0]
 8004ed2:	b2d2      	uxtb	r2, r2
 8004ed4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ed6:	4b20      	ldr	r3, [pc, #128]	; (8004f58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0307 	and.w	r3, r3, #7
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d001      	beq.n	8004ee8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e032      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d008      	beq.n	8004f06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ef4:	4b19      	ldr	r3, [pc, #100]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	4916      	ldr	r1, [pc, #88]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0308 	and.w	r3, r3, #8
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d009      	beq.n	8004f26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f12:	4b12      	ldr	r3, [pc, #72]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	490e      	ldr	r1, [pc, #56]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f26:	f000 f821 	bl	8004f6c <HAL_RCC_GetSysClockFreq>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	4b0b      	ldr	r3, [pc, #44]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	091b      	lsrs	r3, r3, #4
 8004f32:	f003 030f 	and.w	r3, r3, #15
 8004f36:	490a      	ldr	r1, [pc, #40]	; (8004f60 <HAL_RCC_ClockConfig+0x1c0>)
 8004f38:	5ccb      	ldrb	r3, [r1, r3]
 8004f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f3e:	4a09      	ldr	r2, [pc, #36]	; (8004f64 <HAL_RCC_ClockConfig+0x1c4>)
 8004f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f42:	4b09      	ldr	r3, [pc, #36]	; (8004f68 <HAL_RCC_ClockConfig+0x1c8>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fd fdb4 	bl	8002ab4 <HAL_InitTick>

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	40023c00 	.word	0x40023c00
 8004f5c:	40023800 	.word	0x40023800
 8004f60:	080071b8 	.word	0x080071b8
 8004f64:	20000370 	.word	0x20000370
 8004f68:	20000374 	.word	0x20000374

08004f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f6c:	b5b0      	push	{r4, r5, r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f72:	2100      	movs	r1, #0
 8004f74:	6079      	str	r1, [r7, #4]
 8004f76:	2100      	movs	r1, #0
 8004f78:	60f9      	str	r1, [r7, #12]
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004f7e:	2100      	movs	r1, #0
 8004f80:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f82:	4952      	ldr	r1, [pc, #328]	; (80050cc <HAL_RCC_GetSysClockFreq+0x160>)
 8004f84:	6889      	ldr	r1, [r1, #8]
 8004f86:	f001 010c 	and.w	r1, r1, #12
 8004f8a:	2908      	cmp	r1, #8
 8004f8c:	d00d      	beq.n	8004faa <HAL_RCC_GetSysClockFreq+0x3e>
 8004f8e:	2908      	cmp	r1, #8
 8004f90:	f200 8094 	bhi.w	80050bc <HAL_RCC_GetSysClockFreq+0x150>
 8004f94:	2900      	cmp	r1, #0
 8004f96:	d002      	beq.n	8004f9e <HAL_RCC_GetSysClockFreq+0x32>
 8004f98:	2904      	cmp	r1, #4
 8004f9a:	d003      	beq.n	8004fa4 <HAL_RCC_GetSysClockFreq+0x38>
 8004f9c:	e08e      	b.n	80050bc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f9e:	4b4c      	ldr	r3, [pc, #304]	; (80050d0 <HAL_RCC_GetSysClockFreq+0x164>)
 8004fa0:	60bb      	str	r3, [r7, #8]
       break;
 8004fa2:	e08e      	b.n	80050c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fa4:	4b4b      	ldr	r3, [pc, #300]	; (80050d4 <HAL_RCC_GetSysClockFreq+0x168>)
 8004fa6:	60bb      	str	r3, [r7, #8]
      break;
 8004fa8:	e08b      	b.n	80050c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004faa:	4948      	ldr	r1, [pc, #288]	; (80050cc <HAL_RCC_GetSysClockFreq+0x160>)
 8004fac:	6849      	ldr	r1, [r1, #4]
 8004fae:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004fb2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fb4:	4945      	ldr	r1, [pc, #276]	; (80050cc <HAL_RCC_GetSysClockFreq+0x160>)
 8004fb6:	6849      	ldr	r1, [r1, #4]
 8004fb8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004fbc:	2900      	cmp	r1, #0
 8004fbe:	d024      	beq.n	800500a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fc0:	4942      	ldr	r1, [pc, #264]	; (80050cc <HAL_RCC_GetSysClockFreq+0x160>)
 8004fc2:	6849      	ldr	r1, [r1, #4]
 8004fc4:	0989      	lsrs	r1, r1, #6
 8004fc6:	4608      	mov	r0, r1
 8004fc8:	f04f 0100 	mov.w	r1, #0
 8004fcc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004fd0:	f04f 0500 	mov.w	r5, #0
 8004fd4:	ea00 0204 	and.w	r2, r0, r4
 8004fd8:	ea01 0305 	and.w	r3, r1, r5
 8004fdc:	493d      	ldr	r1, [pc, #244]	; (80050d4 <HAL_RCC_GetSysClockFreq+0x168>)
 8004fde:	fb01 f003 	mul.w	r0, r1, r3
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	fb01 f102 	mul.w	r1, r1, r2
 8004fe8:	1844      	adds	r4, r0, r1
 8004fea:	493a      	ldr	r1, [pc, #232]	; (80050d4 <HAL_RCC_GetSysClockFreq+0x168>)
 8004fec:	fba2 0101 	umull	r0, r1, r2, r1
 8004ff0:	1863      	adds	r3, r4, r1
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	f04f 0300 	mov.w	r3, #0
 8004ffc:	f7fb f8e4 	bl	80001c8 <__aeabi_uldivmod>
 8005000:	4602      	mov	r2, r0
 8005002:	460b      	mov	r3, r1
 8005004:	4613      	mov	r3, r2
 8005006:	60fb      	str	r3, [r7, #12]
 8005008:	e04a      	b.n	80050a0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800500a:	4b30      	ldr	r3, [pc, #192]	; (80050cc <HAL_RCC_GetSysClockFreq+0x160>)
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	099b      	lsrs	r3, r3, #6
 8005010:	461a      	mov	r2, r3
 8005012:	f04f 0300 	mov.w	r3, #0
 8005016:	f240 10ff 	movw	r0, #511	; 0x1ff
 800501a:	f04f 0100 	mov.w	r1, #0
 800501e:	ea02 0400 	and.w	r4, r2, r0
 8005022:	ea03 0501 	and.w	r5, r3, r1
 8005026:	4620      	mov	r0, r4
 8005028:	4629      	mov	r1, r5
 800502a:	f04f 0200 	mov.w	r2, #0
 800502e:	f04f 0300 	mov.w	r3, #0
 8005032:	014b      	lsls	r3, r1, #5
 8005034:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005038:	0142      	lsls	r2, r0, #5
 800503a:	4610      	mov	r0, r2
 800503c:	4619      	mov	r1, r3
 800503e:	1b00      	subs	r0, r0, r4
 8005040:	eb61 0105 	sbc.w	r1, r1, r5
 8005044:	f04f 0200 	mov.w	r2, #0
 8005048:	f04f 0300 	mov.w	r3, #0
 800504c:	018b      	lsls	r3, r1, #6
 800504e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005052:	0182      	lsls	r2, r0, #6
 8005054:	1a12      	subs	r2, r2, r0
 8005056:	eb63 0301 	sbc.w	r3, r3, r1
 800505a:	f04f 0000 	mov.w	r0, #0
 800505e:	f04f 0100 	mov.w	r1, #0
 8005062:	00d9      	lsls	r1, r3, #3
 8005064:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005068:	00d0      	lsls	r0, r2, #3
 800506a:	4602      	mov	r2, r0
 800506c:	460b      	mov	r3, r1
 800506e:	1912      	adds	r2, r2, r4
 8005070:	eb45 0303 	adc.w	r3, r5, r3
 8005074:	f04f 0000 	mov.w	r0, #0
 8005078:	f04f 0100 	mov.w	r1, #0
 800507c:	0299      	lsls	r1, r3, #10
 800507e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005082:	0290      	lsls	r0, r2, #10
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	4610      	mov	r0, r2
 800508a:	4619      	mov	r1, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	461a      	mov	r2, r3
 8005090:	f04f 0300 	mov.w	r3, #0
 8005094:	f7fb f898 	bl	80001c8 <__aeabi_uldivmod>
 8005098:	4602      	mov	r2, r0
 800509a:	460b      	mov	r3, r1
 800509c:	4613      	mov	r3, r2
 800509e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050a0:	4b0a      	ldr	r3, [pc, #40]	; (80050cc <HAL_RCC_GetSysClockFreq+0x160>)
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	0c1b      	lsrs	r3, r3, #16
 80050a6:	f003 0303 	and.w	r3, r3, #3
 80050aa:	3301      	adds	r3, #1
 80050ac:	005b      	lsls	r3, r3, #1
 80050ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b8:	60bb      	str	r3, [r7, #8]
      break;
 80050ba:	e002      	b.n	80050c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050bc:	4b04      	ldr	r3, [pc, #16]	; (80050d0 <HAL_RCC_GetSysClockFreq+0x164>)
 80050be:	60bb      	str	r3, [r7, #8]
      break;
 80050c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050c2:	68bb      	ldr	r3, [r7, #8]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bdb0      	pop	{r4, r5, r7, pc}
 80050cc:	40023800 	.word	0x40023800
 80050d0:	00f42400 	.word	0x00f42400
 80050d4:	017d7840 	.word	0x017d7840

080050d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050d8:	b480      	push	{r7}
 80050da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050dc:	4b03      	ldr	r3, [pc, #12]	; (80050ec <HAL_RCC_GetHCLKFreq+0x14>)
 80050de:	681b      	ldr	r3, [r3, #0]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	20000370 	.word	0x20000370

080050f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050f4:	f7ff fff0 	bl	80050d8 <HAL_RCC_GetHCLKFreq>
 80050f8:	4602      	mov	r2, r0
 80050fa:	4b05      	ldr	r3, [pc, #20]	; (8005110 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	0a9b      	lsrs	r3, r3, #10
 8005100:	f003 0307 	and.w	r3, r3, #7
 8005104:	4903      	ldr	r1, [pc, #12]	; (8005114 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005106:	5ccb      	ldrb	r3, [r1, r3]
 8005108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800510c:	4618      	mov	r0, r3
 800510e:	bd80      	pop	{r7, pc}
 8005110:	40023800 	.word	0x40023800
 8005114:	080071c8 	.word	0x080071c8

08005118 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800511c:	f7ff ffdc 	bl	80050d8 <HAL_RCC_GetHCLKFreq>
 8005120:	4602      	mov	r2, r0
 8005122:	4b05      	ldr	r3, [pc, #20]	; (8005138 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	0b5b      	lsrs	r3, r3, #13
 8005128:	f003 0307 	and.w	r3, r3, #7
 800512c:	4903      	ldr	r1, [pc, #12]	; (800513c <HAL_RCC_GetPCLK2Freq+0x24>)
 800512e:	5ccb      	ldrb	r3, [r1, r3]
 8005130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005134:	4618      	mov	r0, r3
 8005136:	bd80      	pop	{r7, pc}
 8005138:	40023800 	.word	0x40023800
 800513c:	080071c8 	.word	0x080071c8

08005140 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e041      	b.n	80051d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d106      	bne.n	800516c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7fd fa2e 	bl	80025c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	3304      	adds	r3, #4
 800517c:	4619      	mov	r1, r3
 800517e:	4610      	mov	r0, r2
 8005180:	f000 fad8 	bl	8005734 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b082      	sub	sp, #8
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d101      	bne.n	80051f0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e041      	b.n	8005274 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d106      	bne.n	800520a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f839 	bl	800527c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2202      	movs	r2, #2
 800520e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	3304      	adds	r3, #4
 800521a:	4619      	mov	r1, r3
 800521c:	4610      	mov	r0, r2
 800521e:	f000 fa89 	bl	8005734 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3708      	adds	r7, #8
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d109      	bne.n	80052b4 <HAL_TIM_PWM_Start+0x24>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	bf14      	ite	ne
 80052ac:	2301      	movne	r3, #1
 80052ae:	2300      	moveq	r3, #0
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	e022      	b.n	80052fa <HAL_TIM_PWM_Start+0x6a>
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	d109      	bne.n	80052ce <HAL_TIM_PWM_Start+0x3e>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	bf14      	ite	ne
 80052c6:	2301      	movne	r3, #1
 80052c8:	2300      	moveq	r3, #0
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	e015      	b.n	80052fa <HAL_TIM_PWM_Start+0x6a>
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2b08      	cmp	r3, #8
 80052d2:	d109      	bne.n	80052e8 <HAL_TIM_PWM_Start+0x58>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b01      	cmp	r3, #1
 80052de:	bf14      	ite	ne
 80052e0:	2301      	movne	r3, #1
 80052e2:	2300      	moveq	r3, #0
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	e008      	b.n	80052fa <HAL_TIM_PWM_Start+0x6a>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	bf14      	ite	ne
 80052f4:	2301      	movne	r3, #1
 80052f6:	2300      	moveq	r3, #0
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e07c      	b.n	80053fc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d104      	bne.n	8005312 <HAL_TIM_PWM_Start+0x82>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005310:	e013      	b.n	800533a <HAL_TIM_PWM_Start+0xaa>
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2b04      	cmp	r3, #4
 8005316:	d104      	bne.n	8005322 <HAL_TIM_PWM_Start+0x92>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2202      	movs	r2, #2
 800531c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005320:	e00b      	b.n	800533a <HAL_TIM_PWM_Start+0xaa>
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2b08      	cmp	r3, #8
 8005326:	d104      	bne.n	8005332 <HAL_TIM_PWM_Start+0xa2>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005330:	e003      	b.n	800533a <HAL_TIM_PWM_Start+0xaa>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2202      	movs	r2, #2
 8005336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2201      	movs	r2, #1
 8005340:	6839      	ldr	r1, [r7, #0]
 8005342:	4618      	mov	r0, r3
 8005344:	f000 fce0 	bl	8005d08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a2d      	ldr	r2, [pc, #180]	; (8005404 <HAL_TIM_PWM_Start+0x174>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d004      	beq.n	800535c <HAL_TIM_PWM_Start+0xcc>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a2c      	ldr	r2, [pc, #176]	; (8005408 <HAL_TIM_PWM_Start+0x178>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d101      	bne.n	8005360 <HAL_TIM_PWM_Start+0xd0>
 800535c:	2301      	movs	r3, #1
 800535e:	e000      	b.n	8005362 <HAL_TIM_PWM_Start+0xd2>
 8005360:	2300      	movs	r3, #0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d007      	beq.n	8005376 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005374:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a22      	ldr	r2, [pc, #136]	; (8005404 <HAL_TIM_PWM_Start+0x174>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d022      	beq.n	80053c6 <HAL_TIM_PWM_Start+0x136>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005388:	d01d      	beq.n	80053c6 <HAL_TIM_PWM_Start+0x136>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a1f      	ldr	r2, [pc, #124]	; (800540c <HAL_TIM_PWM_Start+0x17c>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d018      	beq.n	80053c6 <HAL_TIM_PWM_Start+0x136>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a1d      	ldr	r2, [pc, #116]	; (8005410 <HAL_TIM_PWM_Start+0x180>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d013      	beq.n	80053c6 <HAL_TIM_PWM_Start+0x136>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a1c      	ldr	r2, [pc, #112]	; (8005414 <HAL_TIM_PWM_Start+0x184>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d00e      	beq.n	80053c6 <HAL_TIM_PWM_Start+0x136>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a16      	ldr	r2, [pc, #88]	; (8005408 <HAL_TIM_PWM_Start+0x178>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d009      	beq.n	80053c6 <HAL_TIM_PWM_Start+0x136>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a18      	ldr	r2, [pc, #96]	; (8005418 <HAL_TIM_PWM_Start+0x188>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d004      	beq.n	80053c6 <HAL_TIM_PWM_Start+0x136>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a16      	ldr	r2, [pc, #88]	; (800541c <HAL_TIM_PWM_Start+0x18c>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d111      	bne.n	80053ea <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f003 0307 	and.w	r3, r3, #7
 80053d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2b06      	cmp	r3, #6
 80053d6:	d010      	beq.n	80053fa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f042 0201 	orr.w	r2, r2, #1
 80053e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e8:	e007      	b.n	80053fa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f042 0201 	orr.w	r2, r2, #1
 80053f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	40010000 	.word	0x40010000
 8005408:	40010400 	.word	0x40010400
 800540c:	40000400 	.word	0x40000400
 8005410:	40000800 	.word	0x40000800
 8005414:	40000c00 	.word	0x40000c00
 8005418:	40014000 	.word	0x40014000
 800541c:	40001800 	.word	0x40001800

08005420 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800542c:	2300      	movs	r3, #0
 800542e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005436:	2b01      	cmp	r3, #1
 8005438:	d101      	bne.n	800543e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800543a:	2302      	movs	r3, #2
 800543c:	e0ae      	b.n	800559c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2b0c      	cmp	r3, #12
 800544a:	f200 809f 	bhi.w	800558c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800544e:	a201      	add	r2, pc, #4	; (adr r2, 8005454 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005454:	08005489 	.word	0x08005489
 8005458:	0800558d 	.word	0x0800558d
 800545c:	0800558d 	.word	0x0800558d
 8005460:	0800558d 	.word	0x0800558d
 8005464:	080054c9 	.word	0x080054c9
 8005468:	0800558d 	.word	0x0800558d
 800546c:	0800558d 	.word	0x0800558d
 8005470:	0800558d 	.word	0x0800558d
 8005474:	0800550b 	.word	0x0800550b
 8005478:	0800558d 	.word	0x0800558d
 800547c:	0800558d 	.word	0x0800558d
 8005480:	0800558d 	.word	0x0800558d
 8005484:	0800554b 	.word	0x0800554b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68b9      	ldr	r1, [r7, #8]
 800548e:	4618      	mov	r0, r3
 8005490:	f000 f9f0 	bl	8005874 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	699a      	ldr	r2, [r3, #24]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f042 0208 	orr.w	r2, r2, #8
 80054a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	699a      	ldr	r2, [r3, #24]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f022 0204 	bic.w	r2, r2, #4
 80054b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6999      	ldr	r1, [r3, #24]
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	691a      	ldr	r2, [r3, #16]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	619a      	str	r2, [r3, #24]
      break;
 80054c6:	e064      	b.n	8005592 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68b9      	ldr	r1, [r7, #8]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 fa40 	bl	8005954 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	699a      	ldr	r2, [r3, #24]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	699a      	ldr	r2, [r3, #24]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6999      	ldr	r1, [r3, #24]
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	021a      	lsls	r2, r3, #8
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	430a      	orrs	r2, r1
 8005506:	619a      	str	r2, [r3, #24]
      break;
 8005508:	e043      	b.n	8005592 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68b9      	ldr	r1, [r7, #8]
 8005510:	4618      	mov	r0, r3
 8005512:	f000 fa95 	bl	8005a40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	69da      	ldr	r2, [r3, #28]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f042 0208 	orr.w	r2, r2, #8
 8005524:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	69da      	ldr	r2, [r3, #28]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f022 0204 	bic.w	r2, r2, #4
 8005534:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	69d9      	ldr	r1, [r3, #28]
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	691a      	ldr	r2, [r3, #16]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	430a      	orrs	r2, r1
 8005546:	61da      	str	r2, [r3, #28]
      break;
 8005548:	e023      	b.n	8005592 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68b9      	ldr	r1, [r7, #8]
 8005550:	4618      	mov	r0, r3
 8005552:	f000 fae9 	bl	8005b28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	69da      	ldr	r2, [r3, #28]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005564:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	69da      	ldr	r2, [r3, #28]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005574:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	69d9      	ldr	r1, [r3, #28]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	021a      	lsls	r2, r3, #8
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	430a      	orrs	r2, r1
 8005588:	61da      	str	r2, [r3, #28]
      break;
 800558a:	e002      	b.n	8005592 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	75fb      	strb	r3, [r7, #23]
      break;
 8005590:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800559a:	7dfb      	ldrb	r3, [r7, #23]
}
 800559c:	4618      	mov	r0, r3
 800559e:	3718      	adds	r7, #24
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055ae:	2300      	movs	r3, #0
 80055b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d101      	bne.n	80055c0 <HAL_TIM_ConfigClockSource+0x1c>
 80055bc:	2302      	movs	r3, #2
 80055be:	e0b4      	b.n	800572a <HAL_TIM_ConfigClockSource+0x186>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80055de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055f8:	d03e      	beq.n	8005678 <HAL_TIM_ConfigClockSource+0xd4>
 80055fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055fe:	f200 8087 	bhi.w	8005710 <HAL_TIM_ConfigClockSource+0x16c>
 8005602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005606:	f000 8086 	beq.w	8005716 <HAL_TIM_ConfigClockSource+0x172>
 800560a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800560e:	d87f      	bhi.n	8005710 <HAL_TIM_ConfigClockSource+0x16c>
 8005610:	2b70      	cmp	r3, #112	; 0x70
 8005612:	d01a      	beq.n	800564a <HAL_TIM_ConfigClockSource+0xa6>
 8005614:	2b70      	cmp	r3, #112	; 0x70
 8005616:	d87b      	bhi.n	8005710 <HAL_TIM_ConfigClockSource+0x16c>
 8005618:	2b60      	cmp	r3, #96	; 0x60
 800561a:	d050      	beq.n	80056be <HAL_TIM_ConfigClockSource+0x11a>
 800561c:	2b60      	cmp	r3, #96	; 0x60
 800561e:	d877      	bhi.n	8005710 <HAL_TIM_ConfigClockSource+0x16c>
 8005620:	2b50      	cmp	r3, #80	; 0x50
 8005622:	d03c      	beq.n	800569e <HAL_TIM_ConfigClockSource+0xfa>
 8005624:	2b50      	cmp	r3, #80	; 0x50
 8005626:	d873      	bhi.n	8005710 <HAL_TIM_ConfigClockSource+0x16c>
 8005628:	2b40      	cmp	r3, #64	; 0x40
 800562a:	d058      	beq.n	80056de <HAL_TIM_ConfigClockSource+0x13a>
 800562c:	2b40      	cmp	r3, #64	; 0x40
 800562e:	d86f      	bhi.n	8005710 <HAL_TIM_ConfigClockSource+0x16c>
 8005630:	2b30      	cmp	r3, #48	; 0x30
 8005632:	d064      	beq.n	80056fe <HAL_TIM_ConfigClockSource+0x15a>
 8005634:	2b30      	cmp	r3, #48	; 0x30
 8005636:	d86b      	bhi.n	8005710 <HAL_TIM_ConfigClockSource+0x16c>
 8005638:	2b20      	cmp	r3, #32
 800563a:	d060      	beq.n	80056fe <HAL_TIM_ConfigClockSource+0x15a>
 800563c:	2b20      	cmp	r3, #32
 800563e:	d867      	bhi.n	8005710 <HAL_TIM_ConfigClockSource+0x16c>
 8005640:	2b00      	cmp	r3, #0
 8005642:	d05c      	beq.n	80056fe <HAL_TIM_ConfigClockSource+0x15a>
 8005644:	2b10      	cmp	r3, #16
 8005646:	d05a      	beq.n	80056fe <HAL_TIM_ConfigClockSource+0x15a>
 8005648:	e062      	b.n	8005710 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6818      	ldr	r0, [r3, #0]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	6899      	ldr	r1, [r3, #8]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	f000 fb35 	bl	8005cc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800566c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68ba      	ldr	r2, [r7, #8]
 8005674:	609a      	str	r2, [r3, #8]
      break;
 8005676:	e04f      	b.n	8005718 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6818      	ldr	r0, [r3, #0]
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	6899      	ldr	r1, [r3, #8]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f000 fb1e 	bl	8005cc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689a      	ldr	r2, [r3, #8]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800569a:	609a      	str	r2, [r3, #8]
      break;
 800569c:	e03c      	b.n	8005718 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6818      	ldr	r0, [r3, #0]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	6859      	ldr	r1, [r3, #4]
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	461a      	mov	r2, r3
 80056ac:	f000 fa92 	bl	8005bd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2150      	movs	r1, #80	; 0x50
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 faeb 	bl	8005c92 <TIM_ITRx_SetConfig>
      break;
 80056bc:	e02c      	b.n	8005718 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6818      	ldr	r0, [r3, #0]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	6859      	ldr	r1, [r3, #4]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	461a      	mov	r2, r3
 80056cc:	f000 fab1 	bl	8005c32 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2160      	movs	r1, #96	; 0x60
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 fadb 	bl	8005c92 <TIM_ITRx_SetConfig>
      break;
 80056dc:	e01c      	b.n	8005718 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6818      	ldr	r0, [r3, #0]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	6859      	ldr	r1, [r3, #4]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	461a      	mov	r2, r3
 80056ec:	f000 fa72 	bl	8005bd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2140      	movs	r1, #64	; 0x40
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 facb 	bl	8005c92 <TIM_ITRx_SetConfig>
      break;
 80056fc:	e00c      	b.n	8005718 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4619      	mov	r1, r3
 8005708:	4610      	mov	r0, r2
 800570a:	f000 fac2 	bl	8005c92 <TIM_ITRx_SetConfig>
      break;
 800570e:	e003      	b.n	8005718 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	73fb      	strb	r3, [r7, #15]
      break;
 8005714:	e000      	b.n	8005718 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005716:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005728:	7bfb      	ldrb	r3, [r7, #15]
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
	...

08005734 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a40      	ldr	r2, [pc, #256]	; (8005848 <TIM_Base_SetConfig+0x114>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d013      	beq.n	8005774 <TIM_Base_SetConfig+0x40>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005752:	d00f      	beq.n	8005774 <TIM_Base_SetConfig+0x40>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a3d      	ldr	r2, [pc, #244]	; (800584c <TIM_Base_SetConfig+0x118>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d00b      	beq.n	8005774 <TIM_Base_SetConfig+0x40>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a3c      	ldr	r2, [pc, #240]	; (8005850 <TIM_Base_SetConfig+0x11c>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d007      	beq.n	8005774 <TIM_Base_SetConfig+0x40>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a3b      	ldr	r2, [pc, #236]	; (8005854 <TIM_Base_SetConfig+0x120>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d003      	beq.n	8005774 <TIM_Base_SetConfig+0x40>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a3a      	ldr	r2, [pc, #232]	; (8005858 <TIM_Base_SetConfig+0x124>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d108      	bne.n	8005786 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800577a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	4313      	orrs	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a2f      	ldr	r2, [pc, #188]	; (8005848 <TIM_Base_SetConfig+0x114>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d02b      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005794:	d027      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a2c      	ldr	r2, [pc, #176]	; (800584c <TIM_Base_SetConfig+0x118>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d023      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a2b      	ldr	r2, [pc, #172]	; (8005850 <TIM_Base_SetConfig+0x11c>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d01f      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a2a      	ldr	r2, [pc, #168]	; (8005854 <TIM_Base_SetConfig+0x120>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d01b      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a29      	ldr	r2, [pc, #164]	; (8005858 <TIM_Base_SetConfig+0x124>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d017      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a28      	ldr	r2, [pc, #160]	; (800585c <TIM_Base_SetConfig+0x128>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d013      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a27      	ldr	r2, [pc, #156]	; (8005860 <TIM_Base_SetConfig+0x12c>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d00f      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a26      	ldr	r2, [pc, #152]	; (8005864 <TIM_Base_SetConfig+0x130>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d00b      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a25      	ldr	r2, [pc, #148]	; (8005868 <TIM_Base_SetConfig+0x134>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d007      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a24      	ldr	r2, [pc, #144]	; (800586c <TIM_Base_SetConfig+0x138>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d003      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a23      	ldr	r2, [pc, #140]	; (8005870 <TIM_Base_SetConfig+0x13c>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d108      	bne.n	80057f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	4313      	orrs	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	689a      	ldr	r2, [r3, #8]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a0a      	ldr	r2, [pc, #40]	; (8005848 <TIM_Base_SetConfig+0x114>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d003      	beq.n	800582c <TIM_Base_SetConfig+0xf8>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a0c      	ldr	r2, [pc, #48]	; (8005858 <TIM_Base_SetConfig+0x124>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d103      	bne.n	8005834 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	691a      	ldr	r2, [r3, #16]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	615a      	str	r2, [r3, #20]
}
 800583a:	bf00      	nop
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	40010000 	.word	0x40010000
 800584c:	40000400 	.word	0x40000400
 8005850:	40000800 	.word	0x40000800
 8005854:	40000c00 	.word	0x40000c00
 8005858:	40010400 	.word	0x40010400
 800585c:	40014000 	.word	0x40014000
 8005860:	40014400 	.word	0x40014400
 8005864:	40014800 	.word	0x40014800
 8005868:	40001800 	.word	0x40001800
 800586c:	40001c00 	.word	0x40001c00
 8005870:	40002000 	.word	0x40002000

08005874 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005874:	b480      	push	{r7}
 8005876:	b087      	sub	sp, #28
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	f023 0201 	bic.w	r2, r3, #1
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f023 0303 	bic.w	r3, r3, #3
 80058aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f023 0302 	bic.w	r3, r3, #2
 80058bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a20      	ldr	r2, [pc, #128]	; (800594c <TIM_OC1_SetConfig+0xd8>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d003      	beq.n	80058d8 <TIM_OC1_SetConfig+0x64>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a1f      	ldr	r2, [pc, #124]	; (8005950 <TIM_OC1_SetConfig+0xdc>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d10c      	bne.n	80058f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	f023 0308 	bic.w	r3, r3, #8
 80058de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f023 0304 	bic.w	r3, r3, #4
 80058f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a15      	ldr	r2, [pc, #84]	; (800594c <TIM_OC1_SetConfig+0xd8>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d003      	beq.n	8005902 <TIM_OC1_SetConfig+0x8e>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a14      	ldr	r2, [pc, #80]	; (8005950 <TIM_OC1_SetConfig+0xdc>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d111      	bne.n	8005926 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	4313      	orrs	r3, r2
 800591a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	4313      	orrs	r3, r2
 8005924:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	621a      	str	r2, [r3, #32]
}
 8005940:	bf00      	nop
 8005942:	371c      	adds	r7, #28
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	40010000 	.word	0x40010000
 8005950:	40010400 	.word	0x40010400

08005954 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005954:	b480      	push	{r7}
 8005956:	b087      	sub	sp, #28
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	f023 0210 	bic.w	r2, r3, #16
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800598a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	021b      	lsls	r3, r3, #8
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	4313      	orrs	r3, r2
 8005996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f023 0320 	bic.w	r3, r3, #32
 800599e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	011b      	lsls	r3, r3, #4
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a22      	ldr	r2, [pc, #136]	; (8005a38 <TIM_OC2_SetConfig+0xe4>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d003      	beq.n	80059bc <TIM_OC2_SetConfig+0x68>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a21      	ldr	r2, [pc, #132]	; (8005a3c <TIM_OC2_SetConfig+0xe8>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d10d      	bne.n	80059d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	011b      	lsls	r3, r3, #4
 80059ca:	697a      	ldr	r2, [r7, #20]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a17      	ldr	r2, [pc, #92]	; (8005a38 <TIM_OC2_SetConfig+0xe4>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d003      	beq.n	80059e8 <TIM_OC2_SetConfig+0x94>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a16      	ldr	r2, [pc, #88]	; (8005a3c <TIM_OC2_SetConfig+0xe8>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d113      	bne.n	8005a10 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	621a      	str	r2, [r3, #32]
}
 8005a2a:	bf00      	nop
 8005a2c:	371c      	adds	r7, #28
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	40010000 	.word	0x40010000
 8005a3c:	40010400 	.word	0x40010400

08005a40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f023 0303 	bic.w	r3, r3, #3
 8005a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	021b      	lsls	r3, r3, #8
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a21      	ldr	r2, [pc, #132]	; (8005b20 <TIM_OC3_SetConfig+0xe0>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d003      	beq.n	8005aa6 <TIM_OC3_SetConfig+0x66>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a20      	ldr	r2, [pc, #128]	; (8005b24 <TIM_OC3_SetConfig+0xe4>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d10d      	bne.n	8005ac2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005aac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	021b      	lsls	r3, r3, #8
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ac0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a16      	ldr	r2, [pc, #88]	; (8005b20 <TIM_OC3_SetConfig+0xe0>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d003      	beq.n	8005ad2 <TIM_OC3_SetConfig+0x92>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a15      	ldr	r2, [pc, #84]	; (8005b24 <TIM_OC3_SetConfig+0xe4>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d113      	bne.n	8005afa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ad8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	011b      	lsls	r3, r3, #4
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	011b      	lsls	r3, r3, #4
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	621a      	str	r2, [r3, #32]
}
 8005b14:	bf00      	nop
 8005b16:	371c      	adds	r7, #28
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr
 8005b20:	40010000 	.word	0x40010000
 8005b24:	40010400 	.word	0x40010400

08005b28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b087      	sub	sp, #28
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	69db      	ldr	r3, [r3, #28]
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	021b      	lsls	r3, r3, #8
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	031b      	lsls	r3, r3, #12
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a12      	ldr	r2, [pc, #72]	; (8005bcc <TIM_OC4_SetConfig+0xa4>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d003      	beq.n	8005b90 <TIM_OC4_SetConfig+0x68>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a11      	ldr	r2, [pc, #68]	; (8005bd0 <TIM_OC4_SetConfig+0xa8>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d109      	bne.n	8005ba4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	019b      	lsls	r3, r3, #6
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	621a      	str	r2, [r3, #32]
}
 8005bbe:	bf00      	nop
 8005bc0:	371c      	adds	r7, #28
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	40010000 	.word	0x40010000
 8005bd0:	40010400 	.word	0x40010400

08005bd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	f023 0201 	bic.w	r2, r3, #1
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	011b      	lsls	r3, r3, #4
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f023 030a 	bic.w	r3, r3, #10
 8005c10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	621a      	str	r2, [r3, #32]
}
 8005c26:	bf00      	nop
 8005c28:	371c      	adds	r7, #28
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b087      	sub	sp, #28
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	60f8      	str	r0, [r7, #12]
 8005c3a:	60b9      	str	r1, [r7, #8]
 8005c3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	f023 0210 	bic.w	r2, r3, #16
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6a1b      	ldr	r3, [r3, #32]
 8005c54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	031b      	lsls	r3, r3, #12
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	011b      	lsls	r3, r3, #4
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	621a      	str	r2, [r3, #32]
}
 8005c86:	bf00      	nop
 8005c88:	371c      	adds	r7, #28
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b085      	sub	sp, #20
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
 8005c9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005caa:	683a      	ldr	r2, [r7, #0]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	f043 0307 	orr.w	r3, r3, #7
 8005cb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	609a      	str	r2, [r3, #8]
}
 8005cbc:	bf00      	nop
 8005cbe:	3714      	adds	r7, #20
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b087      	sub	sp, #28
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
 8005cd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ce2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	021a      	lsls	r2, r3, #8
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	431a      	orrs	r2, r3
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	609a      	str	r2, [r3, #8]
}
 8005cfc:	bf00      	nop
 8005cfe:	371c      	adds	r7, #28
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b087      	sub	sp, #28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	f003 031f 	and.w	r3, r3, #31
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6a1a      	ldr	r2, [r3, #32]
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	43db      	mvns	r3, r3
 8005d2a:	401a      	ands	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6a1a      	ldr	r2, [r3, #32]
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	f003 031f 	and.w	r3, r3, #31
 8005d3a:	6879      	ldr	r1, [r7, #4]
 8005d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d40:	431a      	orrs	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	621a      	str	r2, [r3, #32]
}
 8005d46:	bf00      	nop
 8005d48:	371c      	adds	r7, #28
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
	...

08005d54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d101      	bne.n	8005d6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d68:	2302      	movs	r3, #2
 8005d6a:	e05a      	b.n	8005e22 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2202      	movs	r2, #2
 8005d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a21      	ldr	r2, [pc, #132]	; (8005e30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d022      	beq.n	8005df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db8:	d01d      	beq.n	8005df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a1d      	ldr	r2, [pc, #116]	; (8005e34 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d018      	beq.n	8005df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a1b      	ldr	r2, [pc, #108]	; (8005e38 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d013      	beq.n	8005df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a1a      	ldr	r2, [pc, #104]	; (8005e3c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d00e      	beq.n	8005df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a18      	ldr	r2, [pc, #96]	; (8005e40 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d009      	beq.n	8005df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a17      	ldr	r2, [pc, #92]	; (8005e44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d004      	beq.n	8005df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a15      	ldr	r2, [pc, #84]	; (8005e48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d10c      	bne.n	8005e10 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	40010000 	.word	0x40010000
 8005e34:	40000400 	.word	0x40000400
 8005e38:	40000800 	.word	0x40000800
 8005e3c:	40000c00 	.word	0x40000c00
 8005e40:	40010400 	.word	0x40010400
 8005e44:	40014000 	.word	0x40014000
 8005e48:	40001800 	.word	0x40001800

08005e4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e03f      	b.n	8005ede <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d106      	bne.n	8005e78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f7fc fc78 	bl	8002768 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2224      	movs	r2, #36	; 0x24
 8005e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68da      	ldr	r2, [r3, #12]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 ff49 	bl	8006d28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	691a      	ldr	r2, [r3, #16]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ea4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	695a      	ldr	r2, [r3, #20]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005eb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68da      	ldr	r2, [r3, #12]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ec4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2220      	movs	r2, #32
 8005ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
	...

08005ee8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b08c      	sub	sp, #48	; 0x30
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b20      	cmp	r3, #32
 8005f00:	d165      	bne.n	8005fce <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d002      	beq.n	8005f0e <HAL_UART_Transmit_DMA+0x26>
 8005f08:	88fb      	ldrh	r3, [r7, #6]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e05e      	b.n	8005fd0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d101      	bne.n	8005f20 <HAL_UART_Transmit_DMA+0x38>
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	e057      	b.n	8005fd0 <HAL_UART_Transmit_DMA+0xe8>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	88fa      	ldrh	r2, [r7, #6]
 8005f32:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	88fa      	ldrh	r2, [r7, #6]
 8005f38:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2221      	movs	r2, #33	; 0x21
 8005f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f4c:	4a22      	ldr	r2, [pc, #136]	; (8005fd8 <HAL_UART_Transmit_DMA+0xf0>)
 8005f4e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f54:	4a21      	ldr	r2, [pc, #132]	; (8005fdc <HAL_UART_Transmit_DMA+0xf4>)
 8005f56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f5c:	4a20      	ldr	r2, [pc, #128]	; (8005fe0 <HAL_UART_Transmit_DMA+0xf8>)
 8005f5e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f64:	2200      	movs	r2, #0
 8005f66:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8005f68:	f107 0308 	add.w	r3, r7, #8
 8005f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f74:	6819      	ldr	r1, [r3, #0]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	3304      	adds	r3, #4
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	88fb      	ldrh	r3, [r7, #6]
 8005f80:	f7fc ffcc 	bl	8002f1c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f8c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	3314      	adds	r3, #20
 8005f9c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	e853 3f00 	ldrex	r3, [r3]
 8005fa4:	617b      	str	r3, [r7, #20]
   return(result);
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fac:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	3314      	adds	r3, #20
 8005fb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fb6:	627a      	str	r2, [r7, #36]	; 0x24
 8005fb8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fba:	6a39      	ldr	r1, [r7, #32]
 8005fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fbe:	e841 2300 	strex	r3, r2, [r1]
 8005fc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1e5      	bne.n	8005f96 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	e000      	b.n	8005fd0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8005fce:	2302      	movs	r3, #2
  }
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3730      	adds	r7, #48	; 0x30
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	080065c9 	.word	0x080065c9
 8005fdc:	08006663 	.word	0x08006663
 8005fe0:	080067db 	.word	0x080067db

08005fe4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	4613      	mov	r3, r2
 8005ff0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b20      	cmp	r3, #32
 8005ffc:	d11d      	bne.n	800603a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d002      	beq.n	800600a <HAL_UART_Receive_DMA+0x26>
 8006004:	88fb      	ldrh	r3, [r7, #6]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d101      	bne.n	800600e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e016      	b.n	800603c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006014:	2b01      	cmp	r3, #1
 8006016:	d101      	bne.n	800601c <HAL_UART_Receive_DMA+0x38>
 8006018:	2302      	movs	r3, #2
 800601a:	e00f      	b.n	800603c <HAL_UART_Receive_DMA+0x58>
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2200      	movs	r2, #0
 8006028:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800602a:	88fb      	ldrh	r3, [r7, #6]
 800602c:	461a      	mov	r2, r3
 800602e:	68b9      	ldr	r1, [r7, #8]
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f000 fc1d 	bl	8006870 <UART_Start_Receive_DMA>
 8006036:	4603      	mov	r3, r0
 8006038:	e000      	b.n	800603c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800603a:	2302      	movs	r3, #2
  }
}
 800603c:	4618      	mov	r0, r3
 800603e:	3710      	adds	r7, #16
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b0ba      	sub	sp, #232	; 0xe8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800606a:	2300      	movs	r3, #0
 800606c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006070:	2300      	movs	r3, #0
 8006072:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800607a:	f003 030f 	and.w	r3, r3, #15
 800607e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006082:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10f      	bne.n	80060aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800608a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800608e:	f003 0320 	and.w	r3, r3, #32
 8006092:	2b00      	cmp	r3, #0
 8006094:	d009      	beq.n	80060aa <HAL_UART_IRQHandler+0x66>
 8006096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800609a:	f003 0320 	and.w	r3, r3, #32
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d003      	beq.n	80060aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 fd85 	bl	8006bb2 <UART_Receive_IT>
      return;
 80060a8:	e256      	b.n	8006558 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80060aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f000 80de 	beq.w	8006270 <HAL_UART_IRQHandler+0x22c>
 80060b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d106      	bne.n	80060ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80060c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f000 80d1 	beq.w	8006270 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80060ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00b      	beq.n	80060f2 <HAL_UART_IRQHandler+0xae>
 80060da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d005      	beq.n	80060f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ea:	f043 0201 	orr.w	r2, r3, #1
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060f6:	f003 0304 	and.w	r3, r3, #4
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00b      	beq.n	8006116 <HAL_UART_IRQHandler+0xd2>
 80060fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006102:	f003 0301 	and.w	r3, r3, #1
 8006106:	2b00      	cmp	r3, #0
 8006108:	d005      	beq.n	8006116 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610e:	f043 0202 	orr.w	r2, r3, #2
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800611a:	f003 0302 	and.w	r3, r3, #2
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00b      	beq.n	800613a <HAL_UART_IRQHandler+0xf6>
 8006122:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006126:	f003 0301 	and.w	r3, r3, #1
 800612a:	2b00      	cmp	r3, #0
 800612c:	d005      	beq.n	800613a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006132:	f043 0204 	orr.w	r2, r3, #4
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800613a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800613e:	f003 0308 	and.w	r3, r3, #8
 8006142:	2b00      	cmp	r3, #0
 8006144:	d011      	beq.n	800616a <HAL_UART_IRQHandler+0x126>
 8006146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800614a:	f003 0320 	and.w	r3, r3, #32
 800614e:	2b00      	cmp	r3, #0
 8006150:	d105      	bne.n	800615e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006152:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	2b00      	cmp	r3, #0
 800615c:	d005      	beq.n	800616a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006162:	f043 0208 	orr.w	r2, r3, #8
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616e:	2b00      	cmp	r3, #0
 8006170:	f000 81ed 	beq.w	800654e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006178:	f003 0320 	and.w	r3, r3, #32
 800617c:	2b00      	cmp	r3, #0
 800617e:	d008      	beq.n	8006192 <HAL_UART_IRQHandler+0x14e>
 8006180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006184:	f003 0320 	and.w	r3, r3, #32
 8006188:	2b00      	cmp	r3, #0
 800618a:	d002      	beq.n	8006192 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 fd10 	bl	8006bb2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	695b      	ldr	r3, [r3, #20]
 8006198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619c:	2b40      	cmp	r3, #64	; 0x40
 800619e:	bf0c      	ite	eq
 80061a0:	2301      	moveq	r3, #1
 80061a2:	2300      	movne	r3, #0
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	f003 0308 	and.w	r3, r3, #8
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d103      	bne.n	80061be <HAL_UART_IRQHandler+0x17a>
 80061b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d04f      	beq.n	800625e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 fc18 	bl	80069f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ce:	2b40      	cmp	r3, #64	; 0x40
 80061d0:	d141      	bne.n	8006256 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	3314      	adds	r3, #20
 80061d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061e0:	e853 3f00 	ldrex	r3, [r3]
 80061e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80061e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	3314      	adds	r3, #20
 80061fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80061fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006202:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006206:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800620a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800620e:	e841 2300 	strex	r3, r2, [r1]
 8006212:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006216:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1d9      	bne.n	80061d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006222:	2b00      	cmp	r3, #0
 8006224:	d013      	beq.n	800624e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622a:	4a7d      	ldr	r2, [pc, #500]	; (8006420 <HAL_UART_IRQHandler+0x3dc>)
 800622c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006232:	4618      	mov	r0, r3
 8006234:	f7fc ff3a 	bl	80030ac <HAL_DMA_Abort_IT>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d016      	beq.n	800626c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006248:	4610      	mov	r0, r2
 800624a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800624c:	e00e      	b.n	800626c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f9a4 	bl	800659c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006254:	e00a      	b.n	800626c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 f9a0 	bl	800659c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800625c:	e006      	b.n	800626c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f99c 	bl	800659c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800626a:	e170      	b.n	800654e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800626c:	bf00      	nop
    return;
 800626e:	e16e      	b.n	800654e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006274:	2b01      	cmp	r3, #1
 8006276:	f040 814a 	bne.w	800650e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800627a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800627e:	f003 0310 	and.w	r3, r3, #16
 8006282:	2b00      	cmp	r3, #0
 8006284:	f000 8143 	beq.w	800650e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800628c:	f003 0310 	and.w	r3, r3, #16
 8006290:	2b00      	cmp	r3, #0
 8006292:	f000 813c 	beq.w	800650e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006296:	2300      	movs	r3, #0
 8006298:	60bb      	str	r3, [r7, #8]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	60bb      	str	r3, [r7, #8]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	60bb      	str	r3, [r7, #8]
 80062aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b6:	2b40      	cmp	r3, #64	; 0x40
 80062b8:	f040 80b4 	bne.w	8006424 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80062c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f000 8140 	beq.w	8006552 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062da:	429a      	cmp	r2, r3
 80062dc:	f080 8139 	bcs.w	8006552 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ec:	69db      	ldr	r3, [r3, #28]
 80062ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062f2:	f000 8088 	beq.w	8006406 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	330c      	adds	r3, #12
 80062fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006300:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006304:	e853 3f00 	ldrex	r3, [r3]
 8006308:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800630c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006314:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	330c      	adds	r3, #12
 800631e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006322:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006326:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800632e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006332:	e841 2300 	strex	r3, r2, [r1]
 8006336:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800633a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1d9      	bne.n	80062f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	3314      	adds	r3, #20
 8006348:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800634c:	e853 3f00 	ldrex	r3, [r3]
 8006350:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006352:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006354:	f023 0301 	bic.w	r3, r3, #1
 8006358:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	3314      	adds	r3, #20
 8006362:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006366:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800636a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800636e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006372:	e841 2300 	strex	r3, r2, [r1]
 8006376:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006378:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1e1      	bne.n	8006342 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	3314      	adds	r3, #20
 8006384:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006386:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006388:	e853 3f00 	ldrex	r3, [r3]
 800638c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800638e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006390:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006394:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	3314      	adds	r3, #20
 800639e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80063a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80063a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80063a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80063aa:	e841 2300 	strex	r3, r2, [r1]
 80063ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80063b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1e3      	bne.n	800637e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2220      	movs	r2, #32
 80063ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	330c      	adds	r3, #12
 80063ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063ce:	e853 3f00 	ldrex	r3, [r3]
 80063d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80063d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063d6:	f023 0310 	bic.w	r3, r3, #16
 80063da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	330c      	adds	r3, #12
 80063e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80063e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80063ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80063ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063f0:	e841 2300 	strex	r3, r2, [r1]
 80063f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80063f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1e3      	bne.n	80063c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006400:	4618      	mov	r0, r3
 8006402:	f7fc fde3 	bl	8002fcc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800640e:	b29b      	uxth	r3, r3
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	b29b      	uxth	r3, r3
 8006414:	4619      	mov	r1, r3
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f8ca 	bl	80065b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800641c:	e099      	b.n	8006552 <HAL_UART_IRQHandler+0x50e>
 800641e:	bf00      	nop
 8006420:	08006abb 	.word	0x08006abb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800642c:	b29b      	uxth	r3, r3
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006438:	b29b      	uxth	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	f000 808b 	beq.w	8006556 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006440:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006444:	2b00      	cmp	r3, #0
 8006446:	f000 8086 	beq.w	8006556 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	330c      	adds	r3, #12
 8006450:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006454:	e853 3f00 	ldrex	r3, [r3]
 8006458:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800645a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800645c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006460:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	330c      	adds	r3, #12
 800646a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800646e:	647a      	str	r2, [r7, #68]	; 0x44
 8006470:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006472:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006474:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006476:	e841 2300 	strex	r3, r2, [r1]
 800647a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800647c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1e3      	bne.n	800644a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	3314      	adds	r3, #20
 8006488:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648c:	e853 3f00 	ldrex	r3, [r3]
 8006490:	623b      	str	r3, [r7, #32]
   return(result);
 8006492:	6a3b      	ldr	r3, [r7, #32]
 8006494:	f023 0301 	bic.w	r3, r3, #1
 8006498:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	3314      	adds	r3, #20
 80064a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80064a6:	633a      	str	r2, [r7, #48]	; 0x30
 80064a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064ae:	e841 2300 	strex	r3, r2, [r1]
 80064b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1e3      	bne.n	8006482 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2220      	movs	r2, #32
 80064be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	330c      	adds	r3, #12
 80064ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	e853 3f00 	ldrex	r3, [r3]
 80064d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f023 0310 	bic.w	r3, r3, #16
 80064de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	330c      	adds	r3, #12
 80064e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80064ec:	61fa      	str	r2, [r7, #28]
 80064ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f0:	69b9      	ldr	r1, [r7, #24]
 80064f2:	69fa      	ldr	r2, [r7, #28]
 80064f4:	e841 2300 	strex	r3, r2, [r1]
 80064f8:	617b      	str	r3, [r7, #20]
   return(result);
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d1e3      	bne.n	80064c8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006500:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006504:	4619      	mov	r1, r3
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f852 	bl	80065b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800650c:	e023      	b.n	8006556 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800650e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006516:	2b00      	cmp	r3, #0
 8006518:	d009      	beq.n	800652e <HAL_UART_IRQHandler+0x4ea>
 800651a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800651e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006522:	2b00      	cmp	r3, #0
 8006524:	d003      	beq.n	800652e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 fadb 	bl	8006ae2 <UART_Transmit_IT>
    return;
 800652c:	e014      	b.n	8006558 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800652e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00e      	beq.n	8006558 <HAL_UART_IRQHandler+0x514>
 800653a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800653e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006542:	2b00      	cmp	r3, #0
 8006544:	d008      	beq.n	8006558 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 fb1b 	bl	8006b82 <UART_EndTransmit_IT>
    return;
 800654c:	e004      	b.n	8006558 <HAL_UART_IRQHandler+0x514>
    return;
 800654e:	bf00      	nop
 8006550:	e002      	b.n	8006558 <HAL_UART_IRQHandler+0x514>
      return;
 8006552:	bf00      	nop
 8006554:	e000      	b.n	8006558 <HAL_UART_IRQHandler+0x514>
      return;
 8006556:	bf00      	nop
  }
}
 8006558:	37e8      	adds	r7, #232	; 0xe8
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop

08006560 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	460b      	mov	r3, r1
 80065ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80065bc:	bf00      	nop
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b090      	sub	sp, #64	; 0x40
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d137      	bne.n	8006654 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80065e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e6:	2200      	movs	r2, #0
 80065e8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80065ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	3314      	adds	r3, #20
 80065f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f4:	e853 3f00 	ldrex	r3, [r3]
 80065f8:	623b      	str	r3, [r7, #32]
   return(result);
 80065fa:	6a3b      	ldr	r3, [r7, #32]
 80065fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006600:	63bb      	str	r3, [r7, #56]	; 0x38
 8006602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	3314      	adds	r3, #20
 8006608:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800660a:	633a      	str	r2, [r7, #48]	; 0x30
 800660c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006612:	e841 2300 	strex	r3, r2, [r1]
 8006616:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1e5      	bne.n	80065ea <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800661e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	330c      	adds	r3, #12
 8006624:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	e853 3f00 	ldrex	r3, [r3]
 800662c:	60fb      	str	r3, [r7, #12]
   return(result);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006634:	637b      	str	r3, [r7, #52]	; 0x34
 8006636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	330c      	adds	r3, #12
 800663c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800663e:	61fa      	str	r2, [r7, #28]
 8006640:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006642:	69b9      	ldr	r1, [r7, #24]
 8006644:	69fa      	ldr	r2, [r7, #28]
 8006646:	e841 2300 	strex	r3, r2, [r1]
 800664a:	617b      	str	r3, [r7, #20]
   return(result);
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1e5      	bne.n	800661e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006652:	e002      	b.n	800665a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006654:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006656:	f7fb fef1 	bl	800243c <HAL_UART_TxCpltCallback>
}
 800665a:	bf00      	nop
 800665c:	3740      	adds	r7, #64	; 0x40
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b084      	sub	sp, #16
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f7ff ff75 	bl	8006560 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006676:	bf00      	nop
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b09c      	sub	sp, #112	; 0x70
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006696:	2b00      	cmp	r3, #0
 8006698:	d172      	bne.n	8006780 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800669a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800669c:	2200      	movs	r2, #0
 800669e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	330c      	adds	r3, #12
 80066a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066aa:	e853 3f00 	ldrex	r3, [r3]
 80066ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80066b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80066b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	330c      	adds	r3, #12
 80066be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80066c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80066c2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80066c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066c8:	e841 2300 	strex	r3, r2, [r1]
 80066cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80066ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d1e5      	bne.n	80066a0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	3314      	adds	r3, #20
 80066da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066de:	e853 3f00 	ldrex	r3, [r3]
 80066e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066e6:	f023 0301 	bic.w	r3, r3, #1
 80066ea:	667b      	str	r3, [r7, #100]	; 0x64
 80066ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	3314      	adds	r3, #20
 80066f2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80066f4:	647a      	str	r2, [r7, #68]	; 0x44
 80066f6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80066fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066fc:	e841 2300 	strex	r3, r2, [r1]
 8006700:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1e5      	bne.n	80066d4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	3314      	adds	r3, #20
 800670e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006712:	e853 3f00 	ldrex	r3, [r3]
 8006716:	623b      	str	r3, [r7, #32]
   return(result);
 8006718:	6a3b      	ldr	r3, [r7, #32]
 800671a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800671e:	663b      	str	r3, [r7, #96]	; 0x60
 8006720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	3314      	adds	r3, #20
 8006726:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006728:	633a      	str	r2, [r7, #48]	; 0x30
 800672a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800672e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006730:	e841 2300 	strex	r3, r2, [r1]
 8006734:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1e5      	bne.n	8006708 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800673c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800673e:	2220      	movs	r2, #32
 8006740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006748:	2b01      	cmp	r3, #1
 800674a:	d119      	bne.n	8006780 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800674c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	330c      	adds	r3, #12
 8006752:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	e853 3f00 	ldrex	r3, [r3]
 800675a:	60fb      	str	r3, [r7, #12]
   return(result);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f023 0310 	bic.w	r3, r3, #16
 8006762:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	330c      	adds	r3, #12
 800676a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800676c:	61fa      	str	r2, [r7, #28]
 800676e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006770:	69b9      	ldr	r1, [r7, #24]
 8006772:	69fa      	ldr	r2, [r7, #28]
 8006774:	e841 2300 	strex	r3, r2, [r1]
 8006778:	617b      	str	r3, [r7, #20]
   return(result);
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d1e5      	bne.n	800674c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006784:	2b01      	cmp	r3, #1
 8006786:	d106      	bne.n	8006796 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800678a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800678c:	4619      	mov	r1, r3
 800678e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006790:	f7ff ff0e 	bl	80065b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006794:	e002      	b.n	800679c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006796:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006798:	f7ff feec 	bl	8006574 <HAL_UART_RxCpltCallback>
}
 800679c:	bf00      	nop
 800679e:	3770      	adds	r7, #112	; 0x70
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d108      	bne.n	80067cc <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80067be:	085b      	lsrs	r3, r3, #1
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	4619      	mov	r1, r3
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f7ff fef3 	bl	80065b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80067ca:	e002      	b.n	80067d2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f7ff fedb 	bl	8006588 <HAL_UART_RxHalfCpltCallback>
}
 80067d2:	bf00      	nop
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b084      	sub	sp, #16
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80067e2:	2300      	movs	r3, #0
 80067e4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ea:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f6:	2b80      	cmp	r3, #128	; 0x80
 80067f8:	bf0c      	ite	eq
 80067fa:	2301      	moveq	r3, #1
 80067fc:	2300      	movne	r3, #0
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b21      	cmp	r3, #33	; 0x21
 800680c:	d108      	bne.n	8006820 <UART_DMAError+0x46>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d005      	beq.n	8006820 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	2200      	movs	r2, #0
 8006818:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800681a:	68b8      	ldr	r0, [r7, #8]
 800681c:	f000 f8c2 	bl	80069a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800682a:	2b40      	cmp	r3, #64	; 0x40
 800682c:	bf0c      	ite	eq
 800682e:	2301      	moveq	r3, #1
 8006830:	2300      	movne	r3, #0
 8006832:	b2db      	uxtb	r3, r3
 8006834:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b22      	cmp	r3, #34	; 0x22
 8006840:	d108      	bne.n	8006854 <UART_DMAError+0x7a>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d005      	beq.n	8006854 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	2200      	movs	r2, #0
 800684c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800684e:	68b8      	ldr	r0, [r7, #8]
 8006850:	f000 f8d0 	bl	80069f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006858:	f043 0210 	orr.w	r2, r3, #16
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006860:	68b8      	ldr	r0, [r7, #8]
 8006862:	f7ff fe9b 	bl	800659c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006866:	bf00      	nop
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
	...

08006870 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b098      	sub	sp, #96	; 0x60
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	4613      	mov	r3, r2
 800687c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800687e:	68ba      	ldr	r2, [r7, #8]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	88fa      	ldrh	r2, [r7, #6]
 8006888:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2222      	movs	r2, #34	; 0x22
 8006894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689c:	4a3e      	ldr	r2, [pc, #248]	; (8006998 <UART_Start_Receive_DMA+0x128>)
 800689e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a4:	4a3d      	ldr	r2, [pc, #244]	; (800699c <UART_Start_Receive_DMA+0x12c>)
 80068a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ac:	4a3c      	ldr	r2, [pc, #240]	; (80069a0 <UART_Start_Receive_DMA+0x130>)
 80068ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b4:	2200      	movs	r2, #0
 80068b6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80068b8:	f107 0308 	add.w	r3, r7, #8
 80068bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	3304      	adds	r3, #4
 80068c8:	4619      	mov	r1, r3
 80068ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	88fb      	ldrh	r3, [r7, #6]
 80068d0:	f7fc fb24 	bl	8002f1c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80068d4:	2300      	movs	r3, #0
 80068d6:	613b      	str	r3, [r7, #16]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	613b      	str	r3, [r7, #16]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	613b      	str	r3, [r7, #16]
 80068e8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	330c      	adds	r3, #12
 80068f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068fc:	e853 3f00 	ldrex	r3, [r3]
 8006900:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006908:	65bb      	str	r3, [r7, #88]	; 0x58
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	330c      	adds	r3, #12
 8006910:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006912:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006914:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006916:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006918:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800691a:	e841 2300 	strex	r3, r2, [r1]
 800691e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1e5      	bne.n	80068f2 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	3314      	adds	r3, #20
 800692c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006930:	e853 3f00 	ldrex	r3, [r3]
 8006934:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006938:	f043 0301 	orr.w	r3, r3, #1
 800693c:	657b      	str	r3, [r7, #84]	; 0x54
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	3314      	adds	r3, #20
 8006944:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006946:	63ba      	str	r2, [r7, #56]	; 0x38
 8006948:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800694c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800694e:	e841 2300 	strex	r3, r2, [r1]
 8006952:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1e5      	bne.n	8006926 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	3314      	adds	r3, #20
 8006960:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	e853 3f00 	ldrex	r3, [r3]
 8006968:	617b      	str	r3, [r7, #20]
   return(result);
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006970:	653b      	str	r3, [r7, #80]	; 0x50
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3314      	adds	r3, #20
 8006978:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800697a:	627a      	str	r2, [r7, #36]	; 0x24
 800697c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697e:	6a39      	ldr	r1, [r7, #32]
 8006980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006982:	e841 2300 	strex	r3, r2, [r1]
 8006986:	61fb      	str	r3, [r7, #28]
   return(result);
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1e5      	bne.n	800695a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3760      	adds	r7, #96	; 0x60
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	0800667f 	.word	0x0800667f
 800699c:	080067a5 	.word	0x080067a5
 80069a0:	080067db 	.word	0x080067db

080069a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b089      	sub	sp, #36	; 0x24
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	330c      	adds	r3, #12
 80069b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	e853 3f00 	ldrex	r3, [r3]
 80069ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80069c2:	61fb      	str	r3, [r7, #28]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	330c      	adds	r3, #12
 80069ca:	69fa      	ldr	r2, [r7, #28]
 80069cc:	61ba      	str	r2, [r7, #24]
 80069ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d0:	6979      	ldr	r1, [r7, #20]
 80069d2:	69ba      	ldr	r2, [r7, #24]
 80069d4:	e841 2300 	strex	r3, r2, [r1]
 80069d8:	613b      	str	r3, [r7, #16]
   return(result);
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1e5      	bne.n	80069ac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2220      	movs	r2, #32
 80069e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80069e8:	bf00      	nop
 80069ea:	3724      	adds	r7, #36	; 0x24
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b095      	sub	sp, #84	; 0x54
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	330c      	adds	r3, #12
 8006a02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a06:	e853 3f00 	ldrex	r3, [r3]
 8006a0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	330c      	adds	r3, #12
 8006a1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a1c:	643a      	str	r2, [r7, #64]	; 0x40
 8006a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a24:	e841 2300 	strex	r3, r2, [r1]
 8006a28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1e5      	bne.n	80069fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	3314      	adds	r3, #20
 8006a36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a38:	6a3b      	ldr	r3, [r7, #32]
 8006a3a:	e853 3f00 	ldrex	r3, [r3]
 8006a3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	f023 0301 	bic.w	r3, r3, #1
 8006a46:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	3314      	adds	r3, #20
 8006a4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a58:	e841 2300 	strex	r3, r2, [r1]
 8006a5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1e5      	bne.n	8006a30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d119      	bne.n	8006aa0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	330c      	adds	r3, #12
 8006a72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	e853 3f00 	ldrex	r3, [r3]
 8006a7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	f023 0310 	bic.w	r3, r3, #16
 8006a82:	647b      	str	r3, [r7, #68]	; 0x44
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	330c      	adds	r3, #12
 8006a8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a8c:	61ba      	str	r2, [r7, #24]
 8006a8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a90:	6979      	ldr	r1, [r7, #20]
 8006a92:	69ba      	ldr	r2, [r7, #24]
 8006a94:	e841 2300 	strex	r3, r2, [r1]
 8006a98:	613b      	str	r3, [r7, #16]
   return(result);
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1e5      	bne.n	8006a6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006aae:	bf00      	nop
 8006ab0:	3754      	adds	r7, #84	; 0x54
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr

08006aba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b084      	sub	sp, #16
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f7ff fd61 	bl	800659c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ada:	bf00      	nop
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b085      	sub	sp, #20
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	2b21      	cmp	r3, #33	; 0x21
 8006af4:	d13e      	bne.n	8006b74 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006afe:	d114      	bne.n	8006b2a <UART_Transmit_IT+0x48>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d110      	bne.n	8006b2a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6a1b      	ldr	r3, [r3, #32]
 8006b0c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	881b      	ldrh	r3, [r3, #0]
 8006b12:	461a      	mov	r2, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b1c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	1c9a      	adds	r2, r3, #2
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	621a      	str	r2, [r3, #32]
 8006b28:	e008      	b.n	8006b3c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	1c59      	adds	r1, r3, #1
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	6211      	str	r1, [r2, #32]
 8006b34:	781a      	ldrb	r2, [r3, #0]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	3b01      	subs	r3, #1
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	4619      	mov	r1, r3
 8006b4a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d10f      	bne.n	8006b70 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	68da      	ldr	r2, [r3, #12]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b5e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68da      	ldr	r2, [r3, #12]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b6e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006b70:	2300      	movs	r3, #0
 8006b72:	e000      	b.n	8006b76 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006b74:	2302      	movs	r3, #2
  }
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b082      	sub	sp, #8
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68da      	ldr	r2, [r3, #12]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b98:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2220      	movs	r2, #32
 8006b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f7fb fc4a 	bl	800243c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3708      	adds	r7, #8
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b08c      	sub	sp, #48	; 0x30
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	2b22      	cmp	r3, #34	; 0x22
 8006bc4:	f040 80ab 	bne.w	8006d1e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bd0:	d117      	bne.n	8006c02 <UART_Receive_IT+0x50>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d113      	bne.n	8006c02 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfa:	1c9a      	adds	r2, r3, #2
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	629a      	str	r2, [r3, #40]	; 0x28
 8006c00:	e026      	b.n	8006c50 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c06:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c14:	d007      	beq.n	8006c26 <UART_Receive_IT+0x74>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10a      	bne.n	8006c34 <UART_Receive_IT+0x82>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d106      	bne.n	8006c34 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	b2da      	uxtb	r2, r3
 8006c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c30:	701a      	strb	r2, [r3, #0]
 8006c32:	e008      	b.n	8006c46 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c40:	b2da      	uxtb	r2, r3
 8006c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c44:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c4a:	1c5a      	adds	r2, r3, #1
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	3b01      	subs	r3, #1
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d15a      	bne.n	8006d1a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68da      	ldr	r2, [r3, #12]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f022 0220 	bic.w	r2, r2, #32
 8006c72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68da      	ldr	r2, [r3, #12]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	695a      	ldr	r2, [r3, #20]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f022 0201 	bic.w	r2, r2, #1
 8006c92:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2220      	movs	r2, #32
 8006c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d135      	bne.n	8006d10 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	330c      	adds	r3, #12
 8006cb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	e853 3f00 	ldrex	r3, [r3]
 8006cb8:	613b      	str	r3, [r7, #16]
   return(result);
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	f023 0310 	bic.w	r3, r3, #16
 8006cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	330c      	adds	r3, #12
 8006cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cca:	623a      	str	r2, [r7, #32]
 8006ccc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cce:	69f9      	ldr	r1, [r7, #28]
 8006cd0:	6a3a      	ldr	r2, [r7, #32]
 8006cd2:	e841 2300 	strex	r3, r2, [r1]
 8006cd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1e5      	bne.n	8006caa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 0310 	and.w	r3, r3, #16
 8006ce8:	2b10      	cmp	r3, #16
 8006cea:	d10a      	bne.n	8006d02 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006cec:	2300      	movs	r3, #0
 8006cee:	60fb      	str	r3, [r7, #12]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	60fb      	str	r3, [r7, #12]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	60fb      	str	r3, [r7, #12]
 8006d00:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d06:	4619      	mov	r1, r3
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f7ff fc51 	bl	80065b0 <HAL_UARTEx_RxEventCallback>
 8006d0e:	e002      	b.n	8006d16 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f7ff fc2f 	bl	8006574 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006d16:	2300      	movs	r3, #0
 8006d18:	e002      	b.n	8006d20 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	e000      	b.n	8006d20 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006d1e:	2302      	movs	r3, #2
  }
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3730      	adds	r7, #48	; 0x30
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d2c:	b09f      	sub	sp, #124	; 0x7c
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d3e:	68d9      	ldr	r1, [r3, #12]
 8006d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	ea40 0301 	orr.w	r3, r0, r1
 8006d48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d4c:	689a      	ldr	r2, [r3, #8]
 8006d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	431a      	orrs	r2, r3
 8006d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d56:	695b      	ldr	r3, [r3, #20]
 8006d58:	431a      	orrs	r2, r3
 8006d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d5c:	69db      	ldr	r3, [r3, #28]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006d6c:	f021 010c 	bic.w	r1, r1, #12
 8006d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d76:	430b      	orrs	r3, r1
 8006d78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	695b      	ldr	r3, [r3, #20]
 8006d80:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d86:	6999      	ldr	r1, [r3, #24]
 8006d88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	ea40 0301 	orr.w	r3, r0, r1
 8006d90:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	4bc5      	ldr	r3, [pc, #788]	; (80070ac <UART_SetConfig+0x384>)
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d004      	beq.n	8006da6 <UART_SetConfig+0x7e>
 8006d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	4bc3      	ldr	r3, [pc, #780]	; (80070b0 <UART_SetConfig+0x388>)
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d103      	bne.n	8006dae <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006da6:	f7fe f9b7 	bl	8005118 <HAL_RCC_GetPCLK2Freq>
 8006daa:	6778      	str	r0, [r7, #116]	; 0x74
 8006dac:	e002      	b.n	8006db4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006dae:	f7fe f99f 	bl	80050f0 <HAL_RCC_GetPCLK1Freq>
 8006db2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006db6:	69db      	ldr	r3, [r3, #28]
 8006db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dbc:	f040 80b6 	bne.w	8006f2c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006dc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dc2:	461c      	mov	r4, r3
 8006dc4:	f04f 0500 	mov.w	r5, #0
 8006dc8:	4622      	mov	r2, r4
 8006dca:	462b      	mov	r3, r5
 8006dcc:	1891      	adds	r1, r2, r2
 8006dce:	6439      	str	r1, [r7, #64]	; 0x40
 8006dd0:	415b      	adcs	r3, r3
 8006dd2:	647b      	str	r3, [r7, #68]	; 0x44
 8006dd4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006dd8:	1912      	adds	r2, r2, r4
 8006dda:	eb45 0303 	adc.w	r3, r5, r3
 8006dde:	f04f 0000 	mov.w	r0, #0
 8006de2:	f04f 0100 	mov.w	r1, #0
 8006de6:	00d9      	lsls	r1, r3, #3
 8006de8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006dec:	00d0      	lsls	r0, r2, #3
 8006dee:	4602      	mov	r2, r0
 8006df0:	460b      	mov	r3, r1
 8006df2:	1911      	adds	r1, r2, r4
 8006df4:	6639      	str	r1, [r7, #96]	; 0x60
 8006df6:	416b      	adcs	r3, r5
 8006df8:	667b      	str	r3, [r7, #100]	; 0x64
 8006dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	461a      	mov	r2, r3
 8006e00:	f04f 0300 	mov.w	r3, #0
 8006e04:	1891      	adds	r1, r2, r2
 8006e06:	63b9      	str	r1, [r7, #56]	; 0x38
 8006e08:	415b      	adcs	r3, r3
 8006e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006e10:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006e14:	f7f9 f9d8 	bl	80001c8 <__aeabi_uldivmod>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	4ba5      	ldr	r3, [pc, #660]	; (80070b4 <UART_SetConfig+0x38c>)
 8006e1e:	fba3 2302 	umull	r2, r3, r3, r2
 8006e22:	095b      	lsrs	r3, r3, #5
 8006e24:	011e      	lsls	r6, r3, #4
 8006e26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e28:	461c      	mov	r4, r3
 8006e2a:	f04f 0500 	mov.w	r5, #0
 8006e2e:	4622      	mov	r2, r4
 8006e30:	462b      	mov	r3, r5
 8006e32:	1891      	adds	r1, r2, r2
 8006e34:	6339      	str	r1, [r7, #48]	; 0x30
 8006e36:	415b      	adcs	r3, r3
 8006e38:	637b      	str	r3, [r7, #52]	; 0x34
 8006e3a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006e3e:	1912      	adds	r2, r2, r4
 8006e40:	eb45 0303 	adc.w	r3, r5, r3
 8006e44:	f04f 0000 	mov.w	r0, #0
 8006e48:	f04f 0100 	mov.w	r1, #0
 8006e4c:	00d9      	lsls	r1, r3, #3
 8006e4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e52:	00d0      	lsls	r0, r2, #3
 8006e54:	4602      	mov	r2, r0
 8006e56:	460b      	mov	r3, r1
 8006e58:	1911      	adds	r1, r2, r4
 8006e5a:	65b9      	str	r1, [r7, #88]	; 0x58
 8006e5c:	416b      	adcs	r3, r5
 8006e5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	461a      	mov	r2, r3
 8006e66:	f04f 0300 	mov.w	r3, #0
 8006e6a:	1891      	adds	r1, r2, r2
 8006e6c:	62b9      	str	r1, [r7, #40]	; 0x28
 8006e6e:	415b      	adcs	r3, r3
 8006e70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e76:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006e7a:	f7f9 f9a5 	bl	80001c8 <__aeabi_uldivmod>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	460b      	mov	r3, r1
 8006e82:	4b8c      	ldr	r3, [pc, #560]	; (80070b4 <UART_SetConfig+0x38c>)
 8006e84:	fba3 1302 	umull	r1, r3, r3, r2
 8006e88:	095b      	lsrs	r3, r3, #5
 8006e8a:	2164      	movs	r1, #100	; 0x64
 8006e8c:	fb01 f303 	mul.w	r3, r1, r3
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	00db      	lsls	r3, r3, #3
 8006e94:	3332      	adds	r3, #50	; 0x32
 8006e96:	4a87      	ldr	r2, [pc, #540]	; (80070b4 <UART_SetConfig+0x38c>)
 8006e98:	fba2 2303 	umull	r2, r3, r2, r3
 8006e9c:	095b      	lsrs	r3, r3, #5
 8006e9e:	005b      	lsls	r3, r3, #1
 8006ea0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006ea4:	441e      	add	r6, r3
 8006ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f04f 0100 	mov.w	r1, #0
 8006eae:	4602      	mov	r2, r0
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	1894      	adds	r4, r2, r2
 8006eb4:	623c      	str	r4, [r7, #32]
 8006eb6:	415b      	adcs	r3, r3
 8006eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8006eba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006ebe:	1812      	adds	r2, r2, r0
 8006ec0:	eb41 0303 	adc.w	r3, r1, r3
 8006ec4:	f04f 0400 	mov.w	r4, #0
 8006ec8:	f04f 0500 	mov.w	r5, #0
 8006ecc:	00dd      	lsls	r5, r3, #3
 8006ece:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006ed2:	00d4      	lsls	r4, r2, #3
 8006ed4:	4622      	mov	r2, r4
 8006ed6:	462b      	mov	r3, r5
 8006ed8:	1814      	adds	r4, r2, r0
 8006eda:	653c      	str	r4, [r7, #80]	; 0x50
 8006edc:	414b      	adcs	r3, r1
 8006ede:	657b      	str	r3, [r7, #84]	; 0x54
 8006ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	f04f 0300 	mov.w	r3, #0
 8006eea:	1891      	adds	r1, r2, r2
 8006eec:	61b9      	str	r1, [r7, #24]
 8006eee:	415b      	adcs	r3, r3
 8006ef0:	61fb      	str	r3, [r7, #28]
 8006ef2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ef6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006efa:	f7f9 f965 	bl	80001c8 <__aeabi_uldivmod>
 8006efe:	4602      	mov	r2, r0
 8006f00:	460b      	mov	r3, r1
 8006f02:	4b6c      	ldr	r3, [pc, #432]	; (80070b4 <UART_SetConfig+0x38c>)
 8006f04:	fba3 1302 	umull	r1, r3, r3, r2
 8006f08:	095b      	lsrs	r3, r3, #5
 8006f0a:	2164      	movs	r1, #100	; 0x64
 8006f0c:	fb01 f303 	mul.w	r3, r1, r3
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	00db      	lsls	r3, r3, #3
 8006f14:	3332      	adds	r3, #50	; 0x32
 8006f16:	4a67      	ldr	r2, [pc, #412]	; (80070b4 <UART_SetConfig+0x38c>)
 8006f18:	fba2 2303 	umull	r2, r3, r2, r3
 8006f1c:	095b      	lsrs	r3, r3, #5
 8006f1e:	f003 0207 	and.w	r2, r3, #7
 8006f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4432      	add	r2, r6
 8006f28:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f2a:	e0b9      	b.n	80070a0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f2e:	461c      	mov	r4, r3
 8006f30:	f04f 0500 	mov.w	r5, #0
 8006f34:	4622      	mov	r2, r4
 8006f36:	462b      	mov	r3, r5
 8006f38:	1891      	adds	r1, r2, r2
 8006f3a:	6139      	str	r1, [r7, #16]
 8006f3c:	415b      	adcs	r3, r3
 8006f3e:	617b      	str	r3, [r7, #20]
 8006f40:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006f44:	1912      	adds	r2, r2, r4
 8006f46:	eb45 0303 	adc.w	r3, r5, r3
 8006f4a:	f04f 0000 	mov.w	r0, #0
 8006f4e:	f04f 0100 	mov.w	r1, #0
 8006f52:	00d9      	lsls	r1, r3, #3
 8006f54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f58:	00d0      	lsls	r0, r2, #3
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	eb12 0804 	adds.w	r8, r2, r4
 8006f62:	eb43 0905 	adc.w	r9, r3, r5
 8006f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f04f 0100 	mov.w	r1, #0
 8006f70:	f04f 0200 	mov.w	r2, #0
 8006f74:	f04f 0300 	mov.w	r3, #0
 8006f78:	008b      	lsls	r3, r1, #2
 8006f7a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006f7e:	0082      	lsls	r2, r0, #2
 8006f80:	4640      	mov	r0, r8
 8006f82:	4649      	mov	r1, r9
 8006f84:	f7f9 f920 	bl	80001c8 <__aeabi_uldivmod>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	4b49      	ldr	r3, [pc, #292]	; (80070b4 <UART_SetConfig+0x38c>)
 8006f8e:	fba3 2302 	umull	r2, r3, r3, r2
 8006f92:	095b      	lsrs	r3, r3, #5
 8006f94:	011e      	lsls	r6, r3, #4
 8006f96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f04f 0100 	mov.w	r1, #0
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	1894      	adds	r4, r2, r2
 8006fa4:	60bc      	str	r4, [r7, #8]
 8006fa6:	415b      	adcs	r3, r3
 8006fa8:	60fb      	str	r3, [r7, #12]
 8006faa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006fae:	1812      	adds	r2, r2, r0
 8006fb0:	eb41 0303 	adc.w	r3, r1, r3
 8006fb4:	f04f 0400 	mov.w	r4, #0
 8006fb8:	f04f 0500 	mov.w	r5, #0
 8006fbc:	00dd      	lsls	r5, r3, #3
 8006fbe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006fc2:	00d4      	lsls	r4, r2, #3
 8006fc4:	4622      	mov	r2, r4
 8006fc6:	462b      	mov	r3, r5
 8006fc8:	1814      	adds	r4, r2, r0
 8006fca:	64bc      	str	r4, [r7, #72]	; 0x48
 8006fcc:	414b      	adcs	r3, r1
 8006fce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f04f 0100 	mov.w	r1, #0
 8006fda:	f04f 0200 	mov.w	r2, #0
 8006fde:	f04f 0300 	mov.w	r3, #0
 8006fe2:	008b      	lsls	r3, r1, #2
 8006fe4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006fe8:	0082      	lsls	r2, r0, #2
 8006fea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006fee:	f7f9 f8eb 	bl	80001c8 <__aeabi_uldivmod>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	4b2f      	ldr	r3, [pc, #188]	; (80070b4 <UART_SetConfig+0x38c>)
 8006ff8:	fba3 1302 	umull	r1, r3, r3, r2
 8006ffc:	095b      	lsrs	r3, r3, #5
 8006ffe:	2164      	movs	r1, #100	; 0x64
 8007000:	fb01 f303 	mul.w	r3, r1, r3
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	011b      	lsls	r3, r3, #4
 8007008:	3332      	adds	r3, #50	; 0x32
 800700a:	4a2a      	ldr	r2, [pc, #168]	; (80070b4 <UART_SetConfig+0x38c>)
 800700c:	fba2 2303 	umull	r2, r3, r2, r3
 8007010:	095b      	lsrs	r3, r3, #5
 8007012:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007016:	441e      	add	r6, r3
 8007018:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800701a:	4618      	mov	r0, r3
 800701c:	f04f 0100 	mov.w	r1, #0
 8007020:	4602      	mov	r2, r0
 8007022:	460b      	mov	r3, r1
 8007024:	1894      	adds	r4, r2, r2
 8007026:	603c      	str	r4, [r7, #0]
 8007028:	415b      	adcs	r3, r3
 800702a:	607b      	str	r3, [r7, #4]
 800702c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007030:	1812      	adds	r2, r2, r0
 8007032:	eb41 0303 	adc.w	r3, r1, r3
 8007036:	f04f 0400 	mov.w	r4, #0
 800703a:	f04f 0500 	mov.w	r5, #0
 800703e:	00dd      	lsls	r5, r3, #3
 8007040:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007044:	00d4      	lsls	r4, r2, #3
 8007046:	4622      	mov	r2, r4
 8007048:	462b      	mov	r3, r5
 800704a:	eb12 0a00 	adds.w	sl, r2, r0
 800704e:	eb43 0b01 	adc.w	fp, r3, r1
 8007052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	4618      	mov	r0, r3
 8007058:	f04f 0100 	mov.w	r1, #0
 800705c:	f04f 0200 	mov.w	r2, #0
 8007060:	f04f 0300 	mov.w	r3, #0
 8007064:	008b      	lsls	r3, r1, #2
 8007066:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800706a:	0082      	lsls	r2, r0, #2
 800706c:	4650      	mov	r0, sl
 800706e:	4659      	mov	r1, fp
 8007070:	f7f9 f8aa 	bl	80001c8 <__aeabi_uldivmod>
 8007074:	4602      	mov	r2, r0
 8007076:	460b      	mov	r3, r1
 8007078:	4b0e      	ldr	r3, [pc, #56]	; (80070b4 <UART_SetConfig+0x38c>)
 800707a:	fba3 1302 	umull	r1, r3, r3, r2
 800707e:	095b      	lsrs	r3, r3, #5
 8007080:	2164      	movs	r1, #100	; 0x64
 8007082:	fb01 f303 	mul.w	r3, r1, r3
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	011b      	lsls	r3, r3, #4
 800708a:	3332      	adds	r3, #50	; 0x32
 800708c:	4a09      	ldr	r2, [pc, #36]	; (80070b4 <UART_SetConfig+0x38c>)
 800708e:	fba2 2303 	umull	r2, r3, r2, r3
 8007092:	095b      	lsrs	r3, r3, #5
 8007094:	f003 020f 	and.w	r2, r3, #15
 8007098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4432      	add	r2, r6
 800709e:	609a      	str	r2, [r3, #8]
}
 80070a0:	bf00      	nop
 80070a2:	377c      	adds	r7, #124	; 0x7c
 80070a4:	46bd      	mov	sp, r7
 80070a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070aa:	bf00      	nop
 80070ac:	40011000 	.word	0x40011000
 80070b0:	40011400 	.word	0x40011400
 80070b4:	51eb851f 	.word	0x51eb851f

080070b8 <__libc_init_array>:
 80070b8:	b570      	push	{r4, r5, r6, lr}
 80070ba:	4d0d      	ldr	r5, [pc, #52]	; (80070f0 <__libc_init_array+0x38>)
 80070bc:	4c0d      	ldr	r4, [pc, #52]	; (80070f4 <__libc_init_array+0x3c>)
 80070be:	1b64      	subs	r4, r4, r5
 80070c0:	10a4      	asrs	r4, r4, #2
 80070c2:	2600      	movs	r6, #0
 80070c4:	42a6      	cmp	r6, r4
 80070c6:	d109      	bne.n	80070dc <__libc_init_array+0x24>
 80070c8:	4d0b      	ldr	r5, [pc, #44]	; (80070f8 <__libc_init_array+0x40>)
 80070ca:	4c0c      	ldr	r4, [pc, #48]	; (80070fc <__libc_init_array+0x44>)
 80070cc:	f000 f848 	bl	8007160 <_init>
 80070d0:	1b64      	subs	r4, r4, r5
 80070d2:	10a4      	asrs	r4, r4, #2
 80070d4:	2600      	movs	r6, #0
 80070d6:	42a6      	cmp	r6, r4
 80070d8:	d105      	bne.n	80070e6 <__libc_init_array+0x2e>
 80070da:	bd70      	pop	{r4, r5, r6, pc}
 80070dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80070e0:	4798      	blx	r3
 80070e2:	3601      	adds	r6, #1
 80070e4:	e7ee      	b.n	80070c4 <__libc_init_array+0xc>
 80070e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80070ea:	4798      	blx	r3
 80070ec:	3601      	adds	r6, #1
 80070ee:	e7f2      	b.n	80070d6 <__libc_init_array+0x1e>
 80070f0:	080071e0 	.word	0x080071e0
 80070f4:	080071e0 	.word	0x080071e0
 80070f8:	080071e0 	.word	0x080071e0
 80070fc:	080071e4 	.word	0x080071e4

08007100 <memcpy>:
 8007100:	440a      	add	r2, r1
 8007102:	4291      	cmp	r1, r2
 8007104:	f100 33ff 	add.w	r3, r0, #4294967295
 8007108:	d100      	bne.n	800710c <memcpy+0xc>
 800710a:	4770      	bx	lr
 800710c:	b510      	push	{r4, lr}
 800710e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007112:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007116:	4291      	cmp	r1, r2
 8007118:	d1f9      	bne.n	800710e <memcpy+0xe>
 800711a:	bd10      	pop	{r4, pc}

0800711c <memmove>:
 800711c:	4288      	cmp	r0, r1
 800711e:	b510      	push	{r4, lr}
 8007120:	eb01 0402 	add.w	r4, r1, r2
 8007124:	d902      	bls.n	800712c <memmove+0x10>
 8007126:	4284      	cmp	r4, r0
 8007128:	4623      	mov	r3, r4
 800712a:	d807      	bhi.n	800713c <memmove+0x20>
 800712c:	1e43      	subs	r3, r0, #1
 800712e:	42a1      	cmp	r1, r4
 8007130:	d008      	beq.n	8007144 <memmove+0x28>
 8007132:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007136:	f803 2f01 	strb.w	r2, [r3, #1]!
 800713a:	e7f8      	b.n	800712e <memmove+0x12>
 800713c:	4402      	add	r2, r0
 800713e:	4601      	mov	r1, r0
 8007140:	428a      	cmp	r2, r1
 8007142:	d100      	bne.n	8007146 <memmove+0x2a>
 8007144:	bd10      	pop	{r4, pc}
 8007146:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800714a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800714e:	e7f7      	b.n	8007140 <memmove+0x24>

08007150 <memset>:
 8007150:	4402      	add	r2, r0
 8007152:	4603      	mov	r3, r0
 8007154:	4293      	cmp	r3, r2
 8007156:	d100      	bne.n	800715a <memset+0xa>
 8007158:	4770      	bx	lr
 800715a:	f803 1b01 	strb.w	r1, [r3], #1
 800715e:	e7f9      	b.n	8007154 <memset+0x4>

08007160 <_init>:
 8007160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007162:	bf00      	nop
 8007164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007166:	bc08      	pop	{r3}
 8007168:	469e      	mov	lr, r3
 800716a:	4770      	bx	lr

0800716c <_fini>:
 800716c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800716e:	bf00      	nop
 8007170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007172:	bc08      	pop	{r3}
 8007174:	469e      	mov	lr, r3
 8007176:	4770      	bx	lr
