
Mark_I.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4c8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  0800b650  0800b650  0001b650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbac  0800bbac  0002017c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bbac  0800bbac  0001bbac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bbb4  0800bbb4  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbb4  0800bbb4  0001bbb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bbb8  0800bbb8  0001bbb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800bbbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002017c  2**0
                  CONTENTS
 10 .bss          00002354  2000017c  2000017c  0002017c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200024d0  200024d0  0002017c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000240eb  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000048b4  00000000  00000000  00044297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a8  00000000  00000000  00048b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011d8  00000000  00000000  00049ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024788  00000000  00000000  0004b0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fb84  00000000  00000000  0006f858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c579b  00000000  00000000  0008f3dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00154b77  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005024  00000000  00000000  00154bcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000017c 	.word	0x2000017c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b638 	.word	0x0800b638

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000180 	.word	0x20000180
 80001c4:	0800b638 	.word	0x0800b638

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <COMPLEMENTARY_FILTER_Init>:

/* Static function prototype */
static void angle_180(float * x);

void COMPLEMENTARY_FILTER_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	filter.gyro = MPU_Get_Gyro_Ptr();
 80004c4:	f002 fb02 	bl	8002acc <MPU_Get_Gyro_Ptr>
 80004c8:	4603      	mov	r3, r0
 80004ca:	4a09      	ldr	r2, [pc, #36]	; (80004f0 <COMPLEMENTARY_FILTER_Init+0x30>)
 80004cc:	6013      	str	r3, [r2, #0]
	filter.gyro_raw = NULL;
 80004ce:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <COMPLEMENTARY_FILTER_Init+0x30>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	605a      	str	r2, [r3, #4]
	filter.acc = MPU_Get_Acc_Ptr();
 80004d4:	f002 fb0e 	bl	8002af4 <MPU_Get_Acc_Ptr>
 80004d8:	4603      	mov	r3, r0
 80004da:	4a05      	ldr	r2, [pc, #20]	; (80004f0 <COMPLEMENTARY_FILTER_Init+0x30>)
 80004dc:	6093      	str	r3, [r2, #8]
	filter.alpha_gyro = ALPHA;
 80004de:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <COMPLEMENTARY_FILTER_Init+0x30>)
 80004e0:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <COMPLEMENTARY_FILTER_Init+0x34>)
 80004e2:	62da      	str	r2, [r3, #44]	; 0x2c
	filter.alpha_acc = 1.0f - ALPHA;
 80004e4:	4b02      	ldr	r3, [pc, #8]	; (80004f0 <COMPLEMENTARY_FILTER_Init+0x30>)
 80004e6:	4a04      	ldr	r2, [pc, #16]	; (80004f8 <COMPLEMENTARY_FILTER_Init+0x38>)
 80004e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	20000000 	.word	0x20000000
 80004f4:	3f7f7cee 	.word	0x3f7f7cee
 80004f8:	3b031200 	.word	0x3b031200

080004fc <COMPLEMENTARY_FILTER_Process>:

void COMPLEMENTARY_FILTER_Process(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af00      	add	r7, sp, #0
	/* Total acceleration */
	float acc_total = filter.acc[0] * filter.acc[0];
 8000502:	4baf      	ldr	r3, [pc, #700]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000504:	689b      	ldr	r3, [r3, #8]
 8000506:	ed93 7a00 	vldr	s14, [r3]
 800050a:	4bad      	ldr	r3, [pc, #692]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800050c:	689b      	ldr	r3, [r3, #8]
 800050e:	edd3 7a00 	vldr	s15, [r3]
 8000512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000516:	edc7 7a05 	vstr	s15, [r7, #20]
	acc_total += filter.acc[1] * filter.acc[1];
 800051a:	4ba9      	ldr	r3, [pc, #676]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800051c:	689b      	ldr	r3, [r3, #8]
 800051e:	3304      	adds	r3, #4
 8000520:	ed93 7a00 	vldr	s14, [r3]
 8000524:	4ba6      	ldr	r3, [pc, #664]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000526:	689b      	ldr	r3, [r3, #8]
 8000528:	3304      	adds	r3, #4
 800052a:	edd3 7a00 	vldr	s15, [r3]
 800052e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000532:	ed97 7a05 	vldr	s14, [r7, #20]
 8000536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800053a:	edc7 7a05 	vstr	s15, [r7, #20]
	acc_total += filter.acc[2] * filter.acc[2];
 800053e:	4ba0      	ldr	r3, [pc, #640]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000540:	689b      	ldr	r3, [r3, #8]
 8000542:	3308      	adds	r3, #8
 8000544:	ed93 7a00 	vldr	s14, [r3]
 8000548:	4b9d      	ldr	r3, [pc, #628]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	3308      	adds	r3, #8
 800054e:	edd3 7a00 	vldr	s15, [r3]
 8000552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000556:	ed97 7a05 	vldr	s14, [r7, #20]
 800055a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800055e:	edc7 7a05 	vstr	s15, [r7, #20]
	acc_total = sqrtf(acc_total);
 8000562:	ed97 0a05 	vldr	s0, [r7, #20]
 8000566:	f00a fa27 	bl	800a9b8 <sqrtf>
 800056a:	ed87 0a05 	vstr	s0, [r7, #20]

	/* Guess the angles according to the accelerometer and some trigonometry */
	if(acc_total)
 800056e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000572:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800057a:	d06c      	beq.n	8000656 <COMPLEMENTARY_FILTER_Process+0x15a>
	{
		float inv_acc_total = 1.0f / acc_total;
 800057c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000580:	ed97 7a05 	vldr	s14, [r7, #20]
 8000584:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000588:	edc7 7a04 	vstr	s15, [r7, #16]
		if(absolute(filter.acc[axe_eROLL]) < acc_total)
 800058c:	4b8c      	ldr	r3, [pc, #560]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	edd3 7a00 	vldr	s15, [r3]
 8000594:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800059c:	db04      	blt.n	80005a8 <COMPLEMENTARY_FILTER_Process+0xac>
 800059e:	4b88      	ldr	r3, [pc, #544]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80005a0:	689b      	ldr	r3, [r3, #8]
 80005a2:	edd3 7a00 	vldr	s15, [r3]
 80005a6:	e005      	b.n	80005b4 <COMPLEMENTARY_FILTER_Process+0xb8>
 80005a8:	4b85      	ldr	r3, [pc, #532]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	edd3 7a00 	vldr	s15, [r3]
 80005b0:	eef1 7a67 	vneg.f32	s15, s15
 80005b4:	ed97 7a05 	vldr	s14, [r7, #20]
 80005b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005c0:	d516      	bpl.n	80005f0 <COMPLEMENTARY_FILTER_Process+0xf4>
		{
			filter.angle_acc[axe_ePITCH] = 	-asinf(filter.acc[axe_eROLL] * inv_acc_total) * RAD_TO_DEG;
 80005c2:	4b7f      	ldr	r3, [pc, #508]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80005c4:	689b      	ldr	r3, [r3, #8]
 80005c6:	ed93 7a00 	vldr	s14, [r3]
 80005ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80005ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005d2:	eeb0 0a67 	vmov.f32	s0, s15
 80005d6:	f00a f9bd 	bl	800a954 <asinf>
 80005da:	eef0 7a40 	vmov.f32	s15, s0
 80005de:	eef1 7a67 	vneg.f32	s15, s15
 80005e2:	ed9f 7a78 	vldr	s14, [pc, #480]	; 80007c4 <COMPLEMENTARY_FILTER_Process+0x2c8>
 80005e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005ea:	4b75      	ldr	r3, [pc, #468]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80005ec:	edc3 7a07 	vstr	s15, [r3, #28]
		}
		if(absolute(filter.acc[axe_ePITCH]) < acc_total)
 80005f0:	4b73      	ldr	r3, [pc, #460]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	3304      	adds	r3, #4
 80005f6:	edd3 7a00 	vldr	s15, [r3]
 80005fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80005fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000602:	db04      	blt.n	800060e <COMPLEMENTARY_FILTER_Process+0x112>
 8000604:	4b6e      	ldr	r3, [pc, #440]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	edd3 7a01 	vldr	s15, [r3, #4]
 800060c:	e006      	b.n	800061c <COMPLEMENTARY_FILTER_Process+0x120>
 800060e:	4b6c      	ldr	r3, [pc, #432]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000610:	689b      	ldr	r3, [r3, #8]
 8000612:	3304      	adds	r3, #4
 8000614:	edd3 7a00 	vldr	s15, [r3]
 8000618:	eef1 7a67 	vneg.f32	s15, s15
 800061c:	ed97 7a05 	vldr	s14, [r7, #20]
 8000620:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000628:	d515      	bpl.n	8000656 <COMPLEMENTARY_FILTER_Process+0x15a>
		{
			filter.angle_acc[axe_eROLL] = 	asinf(filter.acc[axe_ePITCH] * inv_acc_total) * RAD_TO_DEG;
 800062a:	4b65      	ldr	r3, [pc, #404]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800062c:	689b      	ldr	r3, [r3, #8]
 800062e:	3304      	adds	r3, #4
 8000630:	ed93 7a00 	vldr	s14, [r3]
 8000634:	edd7 7a04 	vldr	s15, [r7, #16]
 8000638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800063c:	eeb0 0a67 	vmov.f32	s0, s15
 8000640:	f00a f988 	bl	800a954 <asinf>
 8000644:	eef0 7a40 	vmov.f32	s15, s0
 8000648:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80007c4 <COMPLEMENTARY_FILTER_Process+0x2c8>
 800064c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000650:	4b5b      	ldr	r3, [pc, #364]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000652:	edc3 7a06 	vstr	s15, [r3, #24]
		}
	}

	if(!filter.used_once)
 8000656:	4b5a      	ldr	r3, [pc, #360]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000658:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800065c:	2b00      	cmp	r3, #0
 800065e:	d110      	bne.n	8000682 <COMPLEMENTARY_FILTER_Process+0x186>
	{
		filter.used_once = TRUE;
 8000660:	4b57      	ldr	r3, [pc, #348]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000662:	2201      	movs	r2, #1
 8000664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		filter.angle[axe_eROLL] = filter.angle_acc[axe_eROLL];
 8000668:	4b55      	ldr	r3, [pc, #340]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	4a54      	ldr	r2, [pc, #336]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800066e:	60d3      	str	r3, [r2, #12]
		filter.angle[axe_ePITCH] = filter.angle_acc[axe_ePITCH];
 8000670:	4b53      	ldr	r3, [pc, #332]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000672:	69db      	ldr	r3, [r3, #28]
 8000674:	4a52      	ldr	r2, [pc, #328]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000676:	6113      	str	r3, [r2, #16]
		filter.angle[axe_eYAW] = 0;
 8000678:	4b51      	ldr	r3, [pc, #324]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800067a:	f04f 0200 	mov.w	r2, #0
 800067e:	615a      	str	r2, [r3, #20]
		/* Finally, the complementary filter */
		filter.angle[axe_eROLL] = filter.alpha_gyro * filter.angle[axe_eROLL] + filter.alpha_acc * filter.angle_acc[axe_eROLL];
		filter.angle[axe_ePITCH] = filter.alpha_gyro * filter.angle[axe_ePITCH] + filter.alpha_acc * filter.angle_acc[axe_ePITCH];
	}

}
 8000680:	e09a      	b.n	80007b8 <COMPLEMENTARY_FILTER_Process+0x2bc>
		float dx = filter.gyro[axe_eROLL] * filter.period;
 8000682:	4b4f      	ldr	r3, [pc, #316]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	ed93 7a00 	vldr	s14, [r3]
 800068a:	4b4d      	ldr	r3, [pc, #308]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800068c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000694:	edc7 7a03 	vstr	s15, [r7, #12]
		float dy = filter.gyro[axe_ePITCH] * filter.period;
 8000698:	4b49      	ldr	r3, [pc, #292]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	3304      	adds	r3, #4
 800069e:	ed93 7a00 	vldr	s14, [r3]
 80006a2:	4b47      	ldr	r3, [pc, #284]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006a4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80006a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006ac:	edc7 7a02 	vstr	s15, [r7, #8]
		float dz = filter.gyro[axe_eYAW] * filter.period;
 80006b0:	4b43      	ldr	r3, [pc, #268]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	3308      	adds	r3, #8
 80006b6:	ed93 7a00 	vldr	s14, [r3]
 80006ba:	4b41      	ldr	r3, [pc, #260]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006bc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80006c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006c4:	edc7 7a01 	vstr	s15, [r7, #4]
		filter.angle[axe_eROLL] += dx;
 80006c8:	4b3d      	ldr	r3, [pc, #244]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006ca:	ed93 7a03 	vldr	s14, [r3, #12]
 80006ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80006d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006d6:	4b3a      	ldr	r3, [pc, #232]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006d8:	edc3 7a03 	vstr	s15, [r3, #12]
		filter.angle[axe_ePITCH] += dy;
 80006dc:	4b38      	ldr	r3, [pc, #224]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006de:	ed93 7a04 	vldr	s14, [r3, #16]
 80006e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80006e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006ea:	4b35      	ldr	r3, [pc, #212]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006ec:	edc3 7a04 	vstr	s15, [r3, #16]
		filter.angle[axe_eYAW] += dz;
 80006f0:	4b33      	ldr	r3, [pc, #204]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80006f2:	ed93 7a05 	vldr	s14, [r3, #20]
 80006f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80006fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006fe:	4b30      	ldr	r3, [pc, #192]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000700:	edc3 7a05 	vstr	s15, [r3, #20]
		float sin_dz = sinf(DEG_TO_RAD * dz);
 8000704:	edd7 7a01 	vldr	s15, [r7, #4]
 8000708:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80007c8 <COMPLEMENTARY_FILTER_Process+0x2cc>
 800070c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000710:	eeb0 0a67 	vmov.f32	s0, s15
 8000714:	f00a f8dc 	bl	800a8d0 <sinf>
 8000718:	ed87 0a00 	vstr	s0, [r7]
		filter.angle[axe_eROLL] += sin_dz * filter.angle[axe_ePITCH];
 800071c:	4b28      	ldr	r3, [pc, #160]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800071e:	ed93 7a03 	vldr	s14, [r3, #12]
 8000722:	4b27      	ldr	r3, [pc, #156]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000724:	edd3 6a04 	vldr	s13, [r3, #16]
 8000728:	edd7 7a00 	vldr	s15, [r7]
 800072c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000734:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000736:	edc3 7a03 	vstr	s15, [r3, #12]
		filter.angle[axe_ePITCH] -= sin_dz * filter.angle[axe_eROLL];
 800073a:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800073c:	ed93 7a04 	vldr	s14, [r3, #16]
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000742:	edd3 6a03 	vldr	s13, [r3, #12]
 8000746:	edd7 7a00 	vldr	s15, [r7]
 800074a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800074e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000752:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000754:	edc3 7a04 	vstr	s15, [r3, #16]
		angle_180(&filter.angle[axe_eROLL]);
 8000758:	481c      	ldr	r0, [pc, #112]	; (80007cc <COMPLEMENTARY_FILTER_Process+0x2d0>)
 800075a:	f000 f845 	bl	80007e8 <angle_180>
		angle_180(&filter.angle[axe_ePITCH]);
 800075e:	481c      	ldr	r0, [pc, #112]	; (80007d0 <COMPLEMENTARY_FILTER_Process+0x2d4>)
 8000760:	f000 f842 	bl	80007e8 <angle_180>
		filter.angle[axe_eROLL] = filter.alpha_gyro * filter.angle[axe_eROLL] + filter.alpha_acc * filter.angle_acc[axe_eROLL];
 8000764:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000766:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800076c:	edd3 7a03 	vldr	s15, [r3, #12]
 8000770:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000776:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800077c:	edd3 7a06 	vldr	s15, [r3, #24]
 8000780:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000784:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000788:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 800078a:	edc3 7a03 	vstr	s15, [r3, #12]
		filter.angle[axe_ePITCH] = filter.alpha_gyro * filter.angle[axe_ePITCH] + filter.alpha_acc * filter.angle_acc[axe_ePITCH];
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000790:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000794:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 8000796:	edd3 7a04 	vldr	s15, [r3, #16]
 800079a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80007a0:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80007a6:	edd3 7a07 	vldr	s15, [r3, #28]
 80007aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007b2:	4b03      	ldr	r3, [pc, #12]	; (80007c0 <COMPLEMENTARY_FILTER_Process+0x2c4>)
 80007b4:	edc3 7a04 	vstr	s15, [r3, #16]
}
 80007b8:	bf00      	nop
 80007ba:	3718      	adds	r7, #24
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000000 	.word	0x20000000
 80007c4:	42652ee1 	.word	0x42652ee1
 80007c8:	3c8efa34 	.word	0x3c8efa34
 80007cc:	2000000c 	.word	0x2000000c
 80007d0:	20000010 	.word	0x20000010

080007d4 <COMPLEMENTARY_FILTER_Get_Angles>:

float * COMPLEMENTARY_FILTER_Get_Angles(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
	return filter.angle;
 80007d8:	4b02      	ldr	r3, [pc, #8]	; (80007e4 <COMPLEMENTARY_FILTER_Get_Angles+0x10>)
}
 80007da:	4618      	mov	r0, r3
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	2000000c 	.word	0x2000000c

080007e8 <angle_180>:
{
	return filter.angle_acc;
}

static void angle_180(float * x)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	if(*x > 180)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	edd3 7a00 	vldr	s15, [r3]
 80007f6:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000850 <angle_180+0x68>
 80007fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000802:	dd0a      	ble.n	800081a <angle_180+0x32>
	{
		*x -= 360;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	edd3 7a00 	vldr	s15, [r3]
 800080a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000854 <angle_180+0x6c>
 800080e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	edc3 7a00 	vstr	s15, [r3]
	}
	else if( *x < -180)
	{
		*x += 360 ;
	}
}
 8000818:	e014      	b.n	8000844 <angle_180+0x5c>
	else if( *x < -180)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	edd3 7a00 	vldr	s15, [r3]
 8000820:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000858 <angle_180+0x70>
 8000824:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800082c:	d400      	bmi.n	8000830 <angle_180+0x48>
}
 800082e:	e009      	b.n	8000844 <angle_180+0x5c>
		*x += 360 ;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	edd3 7a00 	vldr	s15, [r3]
 8000836:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000854 <angle_180+0x6c>
 800083a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	edc3 7a00 	vstr	s15, [r3]
}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	43340000 	.word	0x43340000
 8000854:	43b40000 	.word	0x43b40000
 8000858:	c3340000 	.word	0xc3340000

0800085c <CONTROLLER_Init>:
		.angle_kp = 			{4.0f, 		4.0f, 		0},
		.angle_speed_kp = 		{0.8f, 		0.8f, 		1.2f},
};

void CONTROLLER_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	controller.angle = COMPLEMENTARY_FILTER_Get_Angles();
 8000860:	f7ff ffb8 	bl	80007d4 <COMPLEMENTARY_FILTER_Get_Angles>
 8000864:	4603      	mov	r3, r0
 8000866:	4a09      	ldr	r2, [pc, #36]	; (800088c <CONTROLLER_Init+0x30>)
 8000868:	6013      	str	r3, [r2, #0]
	controller.angle_speed = MPU_Get_Gyro_Ptr();
 800086a:	f002 f92f 	bl	8002acc <MPU_Get_Gyro_Ptr>
 800086e:	4603      	mov	r3, r0
 8000870:	4a06      	ldr	r2, [pc, #24]	; (800088c <CONTROLLER_Init+0x30>)
 8000872:	6293      	str	r3, [r2, #40]	; 0x28
	controller.output = MOTOR_MIXER_Get_Angle_Input_Ptr();
 8000874:	f001 f994 	bl	8001ba0 <MOTOR_MIXER_Get_Angle_Input_Ptr>
 8000878:	4603      	mov	r3, r0
 800087a:	4a04      	ldr	r2, [pc, #16]	; (800088c <CONTROLLER_Init+0x30>)
 800087c:	6513      	str	r3, [r2, #80]	; 0x50

	controller.state = controller_state_eDISABLED;
 800087e:	4b03      	ldr	r3, [pc, #12]	; (800088c <CONTROLLER_Init+0x30>)
 8000880:	2200      	movs	r2, #0
 8000882:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000038 	.word	0x20000038

08000890 <CONTROLLER_Process>:

void CONTROLLER_Process(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
	if(controller.new_state != controller.state)
 8000894:	4b55      	ldr	r3, [pc, #340]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000896:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 800089a:	4b54      	ldr	r3, [pc, #336]	; (80009ec <CONTROLLER_Process+0x15c>)
 800089c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d005      	beq.n	80008b0 <CONTROLLER_Process+0x20>
	{
		controller.state = controller.new_state;
 80008a4:	4b51      	ldr	r3, [pc, #324]	; (80009ec <CONTROLLER_Process+0x15c>)
 80008a6:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 80008aa:	4b50      	ldr	r3, [pc, #320]	; (80009ec <CONTROLLER_Process+0x15c>)
 80008ac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	}
	if(controller.state)
 80008b0:	4b4e      	ldr	r3, [pc, #312]	; (80009ec <CONTROLLER_Process+0x15c>)
 80008b2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	f000 8081 	beq.w	80009be <CONTROLLER_Process+0x12e>
	{
		/* A first PID to correct angle errors when we are in angle mode */
		if(controller.state == controller_state_eANGLE)
 80008bc:	4b4b      	ldr	r3, [pc, #300]	; (80009ec <CONTROLLER_Process+0x15c>)
 80008be:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80008c2:	2b02      	cmp	r3, #2
 80008c4:	d12e      	bne.n	8000924 <CONTROLLER_Process+0x94>
		{
			/* Compute angle errors */
			controller.angle_error[axe_eROLL] = controller.target_angle[axe_eROLL] - controller.angle[axe_eROLL];
 80008c6:	4b49      	ldr	r3, [pc, #292]	; (80009ec <CONTROLLER_Process+0x15c>)
 80008c8:	ed93 7a01 	vldr	s14, [r3, #4]
 80008cc:	4b47      	ldr	r3, [pc, #284]	; (80009ec <CONTROLLER_Process+0x15c>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	edd3 7a00 	vldr	s15, [r3]
 80008d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008d8:	4b44      	ldr	r3, [pc, #272]	; (80009ec <CONTROLLER_Process+0x15c>)
 80008da:	edc3 7a04 	vstr	s15, [r3, #16]
			controller.angle_error[axe_ePITCH] = controller.target_angle[axe_ePITCH] - controller.angle[axe_ePITCH];
 80008de:	4b43      	ldr	r3, [pc, #268]	; (80009ec <CONTROLLER_Process+0x15c>)
 80008e0:	ed93 7a02 	vldr	s14, [r3, #8]
 80008e4:	4b41      	ldr	r3, [pc, #260]	; (80009ec <CONTROLLER_Process+0x15c>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	3304      	adds	r3, #4
 80008ea:	edd3 7a00 	vldr	s15, [r3]
 80008ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008f2:	4b3e      	ldr	r3, [pc, #248]	; (80009ec <CONTROLLER_Process+0x15c>)
 80008f4:	edc3 7a05 	vstr	s15, [r3, #20]
			/* Handle angle continuity at -PI and + PI */
			//TODO ASAP
			/* Compute PID on angles */
			controller.target_angle_speed[axe_eROLL] = controller.angle_kp[axe_eROLL] * controller.angle_error[axe_eROLL];
 80008f8:	4b3c      	ldr	r3, [pc, #240]	; (80009ec <CONTROLLER_Process+0x15c>)
 80008fa:	ed93 7a07 	vldr	s14, [r3, #28]
 80008fe:	4b3b      	ldr	r3, [pc, #236]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000900:	edd3 7a04 	vldr	s15, [r3, #16]
 8000904:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000908:	4b38      	ldr	r3, [pc, #224]	; (80009ec <CONTROLLER_Process+0x15c>)
 800090a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			controller.target_angle_speed[axe_ePITCH] = controller.angle_kp[axe_ePITCH] * controller.angle_error[axe_ePITCH];
 800090e:	4b37      	ldr	r3, [pc, #220]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000910:	ed93 7a08 	vldr	s14, [r3, #32]
 8000914:	4b35      	ldr	r3, [pc, #212]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000916:	edd3 7a05 	vldr	s15, [r3, #20]
 800091a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800091e:	4b33      	ldr	r3, [pc, #204]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000920:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		}
		/* Angular speed regulation */
		/* First thing first, errors */
		controller.angle_speed_error[axe_eROLL] = controller.target_angle_speed[axe_eROLL] - controller.angle_speed[axe_eROLL];
 8000924:	4b31      	ldr	r3, [pc, #196]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000926:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800092a:	4b30      	ldr	r3, [pc, #192]	; (80009ec <CONTROLLER_Process+0x15c>)
 800092c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800092e:	edd3 7a00 	vldr	s15, [r3]
 8000932:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000936:	4b2d      	ldr	r3, [pc, #180]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000938:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		controller.angle_speed_error[axe_ePITCH] = controller.target_angle_speed[axe_ePITCH] - controller.angle_speed[axe_ePITCH];
 800093c:	4b2b      	ldr	r3, [pc, #172]	; (80009ec <CONTROLLER_Process+0x15c>)
 800093e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000942:	4b2a      	ldr	r3, [pc, #168]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000946:	3304      	adds	r3, #4
 8000948:	edd3 7a00 	vldr	s15, [r3]
 800094c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000950:	4b26      	ldr	r3, [pc, #152]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000952:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		controller.angle_speed_error[axe_eYAW] = controller.target_angle_speed[axe_eYAW] - controller.angle_speed[axe_eYAW];
 8000956:	4b25      	ldr	r3, [pc, #148]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000958:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800095c:	4b23      	ldr	r3, [pc, #140]	; (80009ec <CONTROLLER_Process+0x15c>)
 800095e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000960:	3308      	adds	r3, #8
 8000962:	edd3 7a00 	vldr	s15, [r3]
 8000966:	ee77 7a67 	vsub.f32	s15, s14, s15
 800096a:	4b20      	ldr	r3, [pc, #128]	; (80009ec <CONTROLLER_Process+0x15c>)
 800096c:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

		/* Now, PID's time ! */
		controller.output[axe_eROLL] = controller.angle_speed_error[axe_eROLL] * controller.angle_speed_kp[axe_eROLL];
 8000970:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000972:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8000976:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000978:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800097c:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <CONTROLLER_Process+0x15c>)
 800097e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000980:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000984:	edc3 7a00 	vstr	s15, [r3]
		controller.output[axe_ePITCH] = controller.angle_speed_error[axe_ePITCH] * controller.angle_speed_kp[axe_ePITCH];
 8000988:	4b18      	ldr	r3, [pc, #96]	; (80009ec <CONTROLLER_Process+0x15c>)
 800098a:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800098e:	4b17      	ldr	r3, [pc, #92]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000990:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8000994:	4b15      	ldr	r3, [pc, #84]	; (80009ec <CONTROLLER_Process+0x15c>)
 8000996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000998:	3304      	adds	r3, #4
 800099a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800099e:	edc3 7a00 	vstr	s15, [r3]
		controller.output[axe_eYAW] = controller.angle_speed_error[axe_eYAW] * controller.angle_speed_kp[axe_eYAW];
 80009a2:	4b12      	ldr	r3, [pc, #72]	; (80009ec <CONTROLLER_Process+0x15c>)
 80009a4:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80009a8:	4b10      	ldr	r3, [pc, #64]	; (80009ec <CONTROLLER_Process+0x15c>)
 80009aa:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80009ae:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <CONTROLLER_Process+0x15c>)
 80009b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009b2:	3308      	adds	r3, #8
 80009b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009b8:	edc3 7a00 	vstr	s15, [r3]
	{
		controller.output[axe_eROLL] = 0;
		controller.output[axe_ePITCH] = 0;
		controller.output[axe_eYAW] = 0;
	}
}
 80009bc:	e010      	b.n	80009e0 <CONTROLLER_Process+0x150>
		controller.output[axe_eROLL] = 0;
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <CONTROLLER_Process+0x15c>)
 80009c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009c2:	f04f 0200 	mov.w	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
		controller.output[axe_ePITCH] = 0;
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <CONTROLLER_Process+0x15c>)
 80009ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009cc:	3304      	adds	r3, #4
 80009ce:	f04f 0200 	mov.w	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
		controller.output[axe_eYAW] = 0;
 80009d4:	4b05      	ldr	r3, [pc, #20]	; (80009ec <CONTROLLER_Process+0x15c>)
 80009d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009d8:	3308      	adds	r3, #8
 80009da:	f04f 0200 	mov.w	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	20000038 	.word	0x20000038

080009f0 <CONTROLLER_Set_State>:

void CONTROLLER_Set_State(controller_state_e new_state)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	71fb      	strb	r3, [r7, #7]
	controller.new_state = new_state;
 80009fa:	4a05      	ldr	r2, [pc, #20]	; (8000a10 <CONTROLLER_Set_State+0x20>)
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	20000038 	.word	0x20000038

08000a14 <CONTROLLER_Get_Angle_Target>:

float * CONTROLLER_Get_Angle_Target(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
	return controller.target_angle;
 8000a18:	4b02      	ldr	r3, [pc, #8]	; (8000a24 <CONTROLLER_Get_Angle_Target+0x10>)
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	2000003c 	.word	0x2000003c

08000a28 <CONTROLLER_Get_Angle_Speed_Target>:

float * CONTROLLER_Get_Angle_Speed_Target(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
	return controller.target_angle_speed;
 8000a2c:	4b02      	ldr	r3, [pc, #8]	; (8000a38 <CONTROLLER_Get_Angle_Speed_Target+0x10>)
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	20000064 	.word	0x20000064

08000a3c <DATA_LOGGER_Init>:
/*
 * @brief Declare every data
 * @param mark1_ pointer to a system_t structure
 */
void DATA_LOGGER_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
	/* Retrieve structure from modules */
	float * gyro = MPU_Get_Gyro_Ptr();
 8000a42:	f002 f843 	bl	8002acc <MPU_Get_Gyro_Ptr>
 8000a46:	6178      	str	r0, [r7, #20]
	float * gyro_raw = MPU_Get_Gyro_Raw_Ptr();
 8000a48:	f002 f84a 	bl	8002ae0 <MPU_Get_Gyro_Raw_Ptr>
 8000a4c:	6138      	str	r0, [r7, #16]
	float * acc = MPU_Get_Acc_Ptr();
 8000a4e:	f002 f851 	bl	8002af4 <MPU_Get_Acc_Ptr>
 8000a52:	60f8      	str	r0, [r7, #12]
	float * acc_raw = MPU_Get_Acc_Raw_Ptr();
 8000a54:	f002 f858 	bl	8002b08 <MPU_Get_Acc_Raw_Ptr>
 8000a58:	60b8      	str	r0, [r7, #8]
	float * angle = COMPLEMENTARY_FILTER_Get_Angles();
 8000a5a:	f7ff febb 	bl	80007d4 <COMPLEMENTARY_FILTER_Get_Angles>
 8000a5e:	6078      	str	r0, [r7, #4]

	/* -------------- Outputs ----------------- */
	DEFINE_DATA(data_id_eANGLE_ROLL,			(void*)&angle[axe_eROLL],			data_format_e16B_FLOAT_2D,		"Angle Roll",		use_format_eAS_OUTPUT);
 8000a60:	4bba      	ldr	r3, [pc, #744]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000a62:	2203      	movs	r2, #3
 8000a64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000a68:	4ab8      	ldr	r2, [pc, #736]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6e:	4bb7      	ldr	r3, [pc, #732]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000a70:	222a      	movs	r2, #42	; 0x2a
 8000a72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000a76:	4bb5      	ldr	r3, [pc, #724]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000a78:	4ab5      	ldr	r2, [pc, #724]	; (8000d50 <DATA_LOGGER_Init+0x314>)
 8000a7a:	649a      	str	r2, [r3, #72]	; 0x48
 8000a7c:	4bb3      	ldr	r3, [pc, #716]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000a7e:	220a      	movs	r2, #10
 8000a80:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8000a84:	4bb1      	ldr	r3, [pc, #708]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	DEFINE_DATA(data_id_eANGLE_PITCH,			(void*)&angle[axe_ePITCH],			data_format_e16B_FLOAT_2D,		"Angle Pitch",		use_format_eAS_OUTPUT);
 8000a8c:	4baf      	ldr	r3, [pc, #700]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000a8e:	2204      	movs	r2, #4
 8000a90:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3304      	adds	r3, #4
 8000a98:	4aac      	ldr	r2, [pc, #688]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000a9a:	6553      	str	r3, [r2, #84]	; 0x54
 8000a9c:	4bab      	ldr	r3, [pc, #684]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000a9e:	222a      	movs	r2, #42	; 0x2a
 8000aa0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8000aa4:	4ba9      	ldr	r3, [pc, #676]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000aa6:	4aab      	ldr	r2, [pc, #684]	; (8000d54 <DATA_LOGGER_Init+0x318>)
 8000aa8:	65da      	str	r2, [r3, #92]	; 0x5c
 8000aaa:	4ba8      	ldr	r3, [pc, #672]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000aac:	220b      	movs	r2, #11
 8000aae:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8000ab2:	4ba6      	ldr	r3, [pc, #664]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	DEFINE_DATA(data_id_eANGLE_YAW,				(void*)&angle[axe_eYAW],			data_format_e16B_FLOAT_2D,		"Angle Yaw",		use_format_eAS_OUTPUT);
 8000aba:	4ba4      	ldr	r3, [pc, #656]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000abc:	2205      	movs	r2, #5
 8000abe:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	3308      	adds	r3, #8
 8000ac6:	4aa1      	ldr	r2, [pc, #644]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000ac8:	6693      	str	r3, [r2, #104]	; 0x68
 8000aca:	4ba0      	ldr	r3, [pc, #640]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000acc:	222a      	movs	r2, #42	; 0x2a
 8000ace:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
 8000ad2:	4b9e      	ldr	r3, [pc, #632]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000ad4:	4aa0      	ldr	r2, [pc, #640]	; (8000d58 <DATA_LOGGER_Init+0x31c>)
 8000ad6:	671a      	str	r2, [r3, #112]	; 0x70
 8000ad8:	4b9c      	ldr	r3, [pc, #624]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000ada:	2209      	movs	r2, #9
 8000adc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8000ae0:	4b9a      	ldr	r3, [pc, #616]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75

	DEFINE_DATA(data_id_eGYRO_ROLL,				(void*)&gyro[axe_eROLL],			data_format_e16B_FLOAT_2D,		"Gyro Roll",		use_format_eNOT_USED);
 8000ae8:	4b98      	ldr	r3, [pc, #608]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000aea:	2206      	movs	r2, #6
 8000aec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8000af0:	4a96      	ldr	r2, [pc, #600]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	67d3      	str	r3, [r2, #124]	; 0x7c
 8000af6:	4b95      	ldr	r3, [pc, #596]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000af8:	222a      	movs	r2, #42	; 0x2a
 8000afa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 8000afe:	4b93      	ldr	r3, [pc, #588]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000b00:	4a96      	ldr	r2, [pc, #600]	; (8000d5c <DATA_LOGGER_Init+0x320>)
 8000b02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8000b06:	4b91      	ldr	r3, [pc, #580]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000b08:	2209      	movs	r2, #9
 8000b0a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8000b0e:	4b8f      	ldr	r3, [pc, #572]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
	DEFINE_DATA(data_id_eGYRO_PITCH,			(void*)&gyro[axe_ePITCH],			data_format_e16B_FLOAT_2D,		"Gyro Pitch",		use_format_eNOT_USED);
 8000b16:	4b8d      	ldr	r3, [pc, #564]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000b18:	2207      	movs	r2, #7
 8000b1a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	3304      	adds	r3, #4
 8000b22:	4a8a      	ldr	r2, [pc, #552]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000b24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000b28:	4b88      	ldr	r3, [pc, #544]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000b2a:	222a      	movs	r2, #42	; 0x2a
 8000b2c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8000b30:	4b86      	ldr	r3, [pc, #536]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000b32:	4a8b      	ldr	r2, [pc, #556]	; (8000d60 <DATA_LOGGER_Init+0x324>)
 8000b34:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8000b38:	4b84      	ldr	r3, [pc, #528]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000b3a:	220a      	movs	r2, #10
 8000b3c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8000b40:	4b82      	ldr	r3, [pc, #520]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	DEFINE_DATA(data_id_eGYRO_YAW,				(void*)&gyro[axe_eYAW],				data_format_e16B_FLOAT_2D,		"Gyro Yaw",			use_format_eNOT_USED);
 8000b48:	4b80      	ldr	r3, [pc, #512]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000b4a:	2208      	movs	r2, #8
 8000b4c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	3308      	adds	r3, #8
 8000b54:	4a7d      	ldr	r2, [pc, #500]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000b56:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000b5a:	4b7c      	ldr	r3, [pc, #496]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000b5c:	222a      	movs	r2, #42	; 0x2a
 8000b5e:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 8000b62:	4b7a      	ldr	r3, [pc, #488]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000b64:	4a7f      	ldr	r2, [pc, #508]	; (8000d64 <DATA_LOGGER_Init+0x328>)
 8000b66:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8000b6a:	4b78      	ldr	r3, [pc, #480]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000b6c:	2208      	movs	r2, #8
 8000b6e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 8000b72:	4b76      	ldr	r3, [pc, #472]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	DEFINE_DATA(data_id_eGYRO_RAW_ROLL,			(void*)&gyro_raw[axe_eROLL],		data_format_e16B_FLOAT_2D,		"Gyro Roll Raw",	use_format_eNOT_USED);
 8000b7a:	4b74      	ldr	r3, [pc, #464]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000b7c:	2209      	movs	r2, #9
 8000b7e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
 8000b82:	4a72      	ldr	r2, [pc, #456]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
 8000b8a:	4b70      	ldr	r3, [pc, #448]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000b8c:	222a      	movs	r2, #42	; 0x2a
 8000b8e:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
 8000b92:	4b6e      	ldr	r3, [pc, #440]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000b94:	4a74      	ldr	r2, [pc, #464]	; (8000d68 <DATA_LOGGER_Init+0x32c>)
 8000b96:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8000b9a:	4b6c      	ldr	r3, [pc, #432]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000b9c:	220d      	movs	r2, #13
 8000b9e:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
 8000ba2:	4b6a      	ldr	r3, [pc, #424]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
	DEFINE_DATA(data_id_eGYRO_RAW_PITCH,		(void*)&gyro_raw[axe_ePITCH],		data_format_e16B_FLOAT_2D,		"Gyro Pitch Raw",	use_format_eNOT_USED);
 8000baa:	4b68      	ldr	r3, [pc, #416]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000bac:	220a      	movs	r2, #10
 8000bae:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	4a65      	ldr	r2, [pc, #404]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000bb8:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
 8000bbc:	4b63      	ldr	r3, [pc, #396]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000bbe:	222a      	movs	r2, #42	; 0x2a
 8000bc0:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
 8000bc4:	4b61      	ldr	r3, [pc, #388]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000bc6:	4a69      	ldr	r2, [pc, #420]	; (8000d6c <DATA_LOGGER_Init+0x330>)
 8000bc8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8000bcc:	4b5f      	ldr	r3, [pc, #380]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000bce:	220e      	movs	r2, #14
 8000bd0:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
 8000bd4:	4b5d      	ldr	r3, [pc, #372]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	DEFINE_DATA(data_id_eGYRO_RAW_YAW,			(void*)&gyro_raw[axe_eYAW],			data_format_e16B_FLOAT_2D,		"Gyro Yaw Raw",		use_format_eAS_OUTPUT);
 8000bdc:	4b5b      	ldr	r3, [pc, #364]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000bde:	220b      	movs	r2, #11
 8000be0:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	3308      	adds	r3, #8
 8000be8:	4a58      	ldr	r2, [pc, #352]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000bea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bee:	4b57      	ldr	r3, [pc, #348]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000bf0:	222a      	movs	r2, #42	; 0x2a
 8000bf2:	f883 20e5 	strb.w	r2, [r3, #229]	; 0xe5
 8000bf6:	4b55      	ldr	r3, [pc, #340]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000bf8:	4a5d      	ldr	r2, [pc, #372]	; (8000d70 <DATA_LOGGER_Init+0x334>)
 8000bfa:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8000bfe:	4b53      	ldr	r3, [pc, #332]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000c00:	220c      	movs	r2, #12
 8000c02:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8000c06:	4b51      	ldr	r3, [pc, #324]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed

	DEFINE_DATA(data_id_eACC_ROLL,				(void*)&acc[axe_eROLL],				data_format_e16B_FLOAT_2D,		"Acc Roll",			use_format_eNOT_USED);
 8000c0e:	4b4f      	ldr	r3, [pc, #316]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000c10:	220c      	movs	r2, #12
 8000c12:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
 8000c16:	4a4d      	ldr	r2, [pc, #308]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c1e:	4b4b      	ldr	r3, [pc, #300]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000c20:	222a      	movs	r2, #42	; 0x2a
 8000c22:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
 8000c26:	4b49      	ldr	r3, [pc, #292]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000c28:	4a52      	ldr	r2, [pc, #328]	; (8000d74 <DATA_LOGGER_Init+0x338>)
 8000c2a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 8000c2e:	4b47      	ldr	r3, [pc, #284]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000c30:	2208      	movs	r2, #8
 8000c32:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8000c36:	4b45      	ldr	r3, [pc, #276]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
	DEFINE_DATA(data_id_eACC_PITCH,				(void*)&acc[axe_ePITCH],			data_format_e16B_FLOAT_2D,		"Acc Pitch",		use_format_eNOT_USED);
 8000c3e:	4b43      	ldr	r3, [pc, #268]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000c40:	220d      	movs	r2, #13
 8000c42:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	4a40      	ldr	r2, [pc, #256]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000c4c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
 8000c50:	4b3e      	ldr	r3, [pc, #248]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000c52:	222a      	movs	r2, #42	; 0x2a
 8000c54:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
 8000c58:	4b3c      	ldr	r3, [pc, #240]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000c5a:	4a47      	ldr	r2, [pc, #284]	; (8000d78 <DATA_LOGGER_Init+0x33c>)
 8000c5c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8000c60:	4b3a      	ldr	r3, [pc, #232]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000c62:	2209      	movs	r2, #9
 8000c64:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 8000c68:	4b38      	ldr	r3, [pc, #224]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
	DEFINE_DATA(data_id_eACC_YAW,				(void*)&acc[axe_eYAW],				data_format_e16B_FLOAT_2D,		"Acc Yaw",			use_format_eNOT_USED);
 8000c70:	4b36      	ldr	r3, [pc, #216]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000c72:	220e      	movs	r2, #14
 8000c74:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	3308      	adds	r3, #8
 8000c7c:	4a33      	ldr	r2, [pc, #204]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000c7e:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
 8000c82:	4b32      	ldr	r3, [pc, #200]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000c84:	222a      	movs	r2, #42	; 0x2a
 8000c86:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
 8000c8a:	4b30      	ldr	r3, [pc, #192]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000c8c:	4a3b      	ldr	r2, [pc, #236]	; (8000d7c <DATA_LOGGER_Init+0x340>)
 8000c8e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 8000c92:	4b2e      	ldr	r3, [pc, #184]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000c94:	2207      	movs	r2, #7
 8000c96:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 8000c9a:	4b2c      	ldr	r3, [pc, #176]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
	DEFINE_DATA(data_id_eACC_RAW_ROLL,			(void*)&acc_raw[axe_eROLL],			data_format_e16B_FLOAT_2D,		"Acc Roll Raw",		use_format_eNOT_USED);
 8000ca2:	4b2a      	ldr	r3, [pc, #168]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000ca4:	220f      	movs	r2, #15
 8000ca6:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
 8000caa:	4a28      	ldr	r2, [pc, #160]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
 8000cb2:	4b26      	ldr	r3, [pc, #152]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000cb4:	222a      	movs	r2, #42	; 0x2a
 8000cb6:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
 8000cba:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000cbc:	4a30      	ldr	r2, [pc, #192]	; (8000d80 <DATA_LOGGER_Init+0x344>)
 8000cbe:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8000cc2:	4b22      	ldr	r3, [pc, #136]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000cc4:	220c      	movs	r2, #12
 8000cc6:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
 8000cca:	4b20      	ldr	r3, [pc, #128]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	DEFINE_DATA(data_id_eACC_RAW_PITCH,			(void*)&acc_raw[axe_ePITCH],		data_format_e16B_FLOAT_2D,		"Acc Pitch Raw",	use_format_eNOT_USED);
 8000cd2:	4b1e      	ldr	r3, [pc, #120]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000cd4:	2210      	movs	r2, #16
 8000cd6:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	3304      	adds	r3, #4
 8000cde:	4a1b      	ldr	r2, [pc, #108]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000ce0:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 8000ce4:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000ce6:	222a      	movs	r2, #42	; 0x2a
 8000ce8:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000cee:	4a25      	ldr	r2, [pc, #148]	; (8000d84 <DATA_LOGGER_Init+0x348>)
 8000cf0:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 8000cf4:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000cf6:	220d      	movs	r2, #13
 8000cf8:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
 8000cfc:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	DEFINE_DATA(data_id_eACC_RAW_YAW,			(void*)&acc_raw[axe_eYAW],			data_format_e16B_FLOAT_2D,		"Acc Yaw Raw",		use_format_eNOT_USED);
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000d06:	2211      	movs	r2, #17
 8000d08:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	3308      	adds	r3, #8
 8000d10:	4a0e      	ldr	r2, [pc, #56]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000d12:	f8c2 3158 	str.w	r3, [r2, #344]	; 0x158
 8000d16:	4b0d      	ldr	r3, [pc, #52]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000d18:	222a      	movs	r2, #42	; 0x2a
 8000d1a:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000d20:	4a19      	ldr	r2, [pc, #100]	; (8000d88 <DATA_LOGGER_Init+0x34c>)
 8000d22:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000d28:	220b      	movs	r2, #11
 8000d2a:	f883 2164 	strb.w	r2, [r3, #356]	; 0x164
 8000d2e:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	f883 2165 	strb.w	r2, [r3, #357]	; 0x165

	/* -------------- Inputs ----------------- */
	DEFINE_DATA(data_id_eCONFIG_REQUEST,		NULL,	data_format_e0B_BUTTON,		"Send Configuration",	use_format_eAS_INPUT);
 8000d36:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	721a      	strb	r2, [r3, #8]
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	4b02      	ldr	r3, [pc, #8]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	725a      	strb	r2, [r3, #9]
 8000d48:	4b00      	ldr	r3, [pc, #0]	; (8000d4c <DATA_LOGGER_Init+0x310>)
 8000d4a:	e01f      	b.n	8000d8c <DATA_LOGGER_Init+0x350>
 8000d4c:	20000198 	.word	0x20000198
 8000d50:	0800b650 	.word	0x0800b650
 8000d54:	0800b65c 	.word	0x0800b65c
 8000d58:	0800b668 	.word	0x0800b668
 8000d5c:	0800b674 	.word	0x0800b674
 8000d60:	0800b680 	.word	0x0800b680
 8000d64:	0800b68c 	.word	0x0800b68c
 8000d68:	0800b698 	.word	0x0800b698
 8000d6c:	0800b6a8 	.word	0x0800b6a8
 8000d70:	0800b6b8 	.word	0x0800b6b8
 8000d74:	0800b6c8 	.word	0x0800b6c8
 8000d78:	0800b6d4 	.word	0x0800b6d4
 8000d7c:	0800b6e0 	.word	0x0800b6e0
 8000d80:	0800b6e8 	.word	0x0800b6e8
 8000d84:	0800b6f8 	.word	0x0800b6f8
 8000d88:	0800b708 	.word	0x0800b708
 8000d8c:	4a1a      	ldr	r2, [pc, #104]	; (8000df8 <DATA_LOGGER_Init+0x3bc>)
 8000d8e:	60da      	str	r2, [r3, #12]
 8000d90:	4b1a      	ldr	r3, [pc, #104]	; (8000dfc <DATA_LOGGER_Init+0x3c0>)
 8000d92:	2212      	movs	r2, #18
 8000d94:	741a      	strb	r2, [r3, #16]
 8000d96:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <DATA_LOGGER_Init+0x3c0>)
 8000d98:	2202      	movs	r2, #2
 8000d9a:	745a      	strb	r2, [r3, #17]
	DEFINE_DATA(data_id_eSTART_TRANSFER,		NULL,	data_format_e0B_BUTTON,		"Start Transfer",		use_format_eAS_INPUT);
 8000d9c:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <DATA_LOGGER_Init+0x3c0>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	771a      	strb	r2, [r3, #28]
 8000da2:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <DATA_LOGGER_Init+0x3c0>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <DATA_LOGGER_Init+0x3c0>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	775a      	strb	r2, [r3, #29]
 8000dae:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <DATA_LOGGER_Init+0x3c0>)
 8000db0:	4a13      	ldr	r2, [pc, #76]	; (8000e00 <DATA_LOGGER_Init+0x3c4>)
 8000db2:	621a      	str	r2, [r3, #32]
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <DATA_LOGGER_Init+0x3c0>)
 8000db6:	220e      	movs	r2, #14
 8000db8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <DATA_LOGGER_Init+0x3c0>)
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	DEFINE_DATA(data_id_eSTOP_TRANSFER,			NULL,	data_format_e0B_BUTTON,		"Stop Transfer",		use_format_eAS_INPUT);
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <DATA_LOGGER_Init+0x3c0>)
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <DATA_LOGGER_Init+0x3c0>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <DATA_LOGGER_Init+0x3c0>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <DATA_LOGGER_Init+0x3c0>)
 8000ddc:	4a09      	ldr	r2, [pc, #36]	; (8000e04 <DATA_LOGGER_Init+0x3c8>)
 8000dde:	635a      	str	r2, [r3, #52]	; 0x34
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <DATA_LOGGER_Init+0x3c0>)
 8000de2:	220d      	movs	r2, #13
 8000de4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8000de8:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <DATA_LOGGER_Init+0x3c0>)
 8000dea:	2202      	movs	r2, #2
 8000dec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8000df0:	bf00      	nop
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	0800b714 	.word	0x0800b714
 8000dfc:	20000198 	.word	0x20000198
 8000e00:	0800b728 	.word	0x0800b728
 8000e04:	0800b738 	.word	0x0800b738

08000e08 <DATA_LOGGER_Start>:
/*
 * @brief Request to start logging data
 */
void DATA_LOGGER_Start()
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
	start_flag = TRUE;
 8000e0c:	4b03      	ldr	r3, [pc, #12]	; (8000e1c <DATA_LOGGER_Start+0x14>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	701a      	strb	r2, [r3, #0]
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	20000300 	.word	0x20000300

08000e20 <DATA_LOGGER_Stop>:
/*
 * @brief Request to stop logging data
 */
void DATA_LOGGER_Stop()
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
	stop_flag = TRUE;
 8000e24:	4b03      	ldr	r3, [pc, #12]	; (8000e34 <DATA_LOGGER_Stop+0x14>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	701a      	strb	r2, [r3, #0]
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	20000302 	.word	0x20000302

08000e38 <DATA_LOGGER_Main>:

/*
 * @brief Call the state machine and the uart parser
 */
void DATA_LOGGER_Main(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
	state_machine();
 8000e3c:	f000 fab0 	bl	80013a0 <state_machine>
	parse_uart();
 8000e40:	f000 fbc0 	bl	80015c4 <parse_uart>
}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <DATA_LOGGER_Reception>:
/*
 * @brief Parse input data
 * @param input_buffer Buffer to use to parse the data
 */
void DATA_LOGGER_Reception(uint8_t * input_buffer)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
	uint8_t id = input_buffer[0];
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp_uint_16 = 0 ;
 8000e56:	2300      	movs	r3, #0
 8000e58:	81bb      	strh	r3, [r7, #12]
	int16_t tmp_int_16 = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	817b      	strh	r3, [r7, #10]
	switch(data_list[id].format)
 8000e5e:	7bfa      	ldrb	r2, [r7, #15]
 8000e60:	4954      	ldr	r1, [pc, #336]	; (8000fb4 <DATA_LOGGER_Reception+0x16c>)
 8000e62:	4613      	mov	r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	4413      	add	r3, r2
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	440b      	add	r3, r1
 8000e6c:	3309      	adds	r3, #9
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b2d      	cmp	r3, #45	; 0x2d
 8000e72:	f200 809a 	bhi.w	8000faa <DATA_LOGGER_Reception+0x162>
 8000e76:	a201      	add	r2, pc, #4	; (adr r2, 8000e7c <DATA_LOGGER_Reception+0x34>)
 8000e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e7c:	08000f35 	.word	0x08000f35
 8000e80:	08000fab 	.word	0x08000fab
 8000e84:	08000fab 	.word	0x08000fab
 8000e88:	08000fab 	.word	0x08000fab
 8000e8c:	08000fab 	.word	0x08000fab
 8000e90:	08000fab 	.word	0x08000fab
 8000e94:	08000fab 	.word	0x08000fab
 8000e98:	08000fab 	.word	0x08000fab
 8000e9c:	08000fab 	.word	0x08000fab
 8000ea0:	08000fab 	.word	0x08000fab
 8000ea4:	08000fab 	.word	0x08000fab
 8000ea8:	08000fab 	.word	0x08000fab
 8000eac:	08000fab 	.word	0x08000fab
 8000eb0:	08000fab 	.word	0x08000fab
 8000eb4:	08000fab 	.word	0x08000fab
 8000eb8:	08000fab 	.word	0x08000fab
 8000ebc:	08000fab 	.word	0x08000fab
 8000ec0:	08000fab 	.word	0x08000fab
 8000ec4:	08000fab 	.word	0x08000fab
 8000ec8:	08000fab 	.word	0x08000fab
 8000ecc:	08000fab 	.word	0x08000fab
 8000ed0:	08000f61 	.word	0x08000f61
 8000ed4:	08000fab 	.word	0x08000fab
 8000ed8:	08000fab 	.word	0x08000fab
 8000edc:	08000fab 	.word	0x08000fab
 8000ee0:	08000fab 	.word	0x08000fab
 8000ee4:	08000fab 	.word	0x08000fab
 8000ee8:	08000fab 	.word	0x08000fab
 8000eec:	08000fab 	.word	0x08000fab
 8000ef0:	08000fab 	.word	0x08000fab
 8000ef4:	08000fab 	.word	0x08000fab
 8000ef8:	08000fab 	.word	0x08000fab
 8000efc:	08000fab 	.word	0x08000fab
 8000f00:	08000fab 	.word	0x08000fab
 8000f04:	08000fab 	.word	0x08000fab
 8000f08:	08000fab 	.word	0x08000fab
 8000f0c:	08000fab 	.word	0x08000fab
 8000f10:	08000fab 	.word	0x08000fab
 8000f14:	08000fab 	.word	0x08000fab
 8000f18:	08000fab 	.word	0x08000fab
 8000f1c:	08000fab 	.word	0x08000fab
 8000f20:	08000fab 	.word	0x08000fab
 8000f24:	08000fab 	.word	0x08000fab
 8000f28:	08000fab 	.word	0x08000fab
 8000f2c:	08000f8d 	.word	0x08000f8d
 8000f30:	08000f6f 	.word	0x08000f6f
	{
		case data_format_e0B_BUTTON:
			/* Link an action to each id */
			switch(id)
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d00d      	beq.n	8000f56 <DATA_LOGGER_Reception+0x10e>
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	dc0e      	bgt.n	8000f5c <DATA_LOGGER_Reception+0x114>
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d002      	beq.n	8000f48 <DATA_LOGGER_Reception+0x100>
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d004      	beq.n	8000f50 <DATA_LOGGER_Reception+0x108>
			{
				default:
					break;
 8000f46:	e009      	b.n	8000f5c <DATA_LOGGER_Reception+0x114>
				case data_id_eCONFIG_REQUEST:
					send_config_flag = TRUE;
 8000f48:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <DATA_LOGGER_Reception+0x170>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	701a      	strb	r2, [r3, #0]
					break;
 8000f4e:	e006      	b.n	8000f5e <DATA_LOGGER_Reception+0x116>
				case data_id_eSTART_TRANSFER:
					DATA_LOGGER_Start();
 8000f50:	f7ff ff5a 	bl	8000e08 <DATA_LOGGER_Start>
					break;
 8000f54:	e003      	b.n	8000f5e <DATA_LOGGER_Reception+0x116>
				case data_id_eSTOP_TRANSFER:
					DATA_LOGGER_Stop();
 8000f56:	f7ff ff63 	bl	8000e20 <DATA_LOGGER_Stop>
					break;
 8000f5a:	e000      	b.n	8000f5e <DATA_LOGGER_Reception+0x116>
					break;
 8000f5c:	bf00      	nop
			}
			break;
 8000f5e:	e025      	b.n	8000fac <DATA_LOGGER_Reception+0x164>
		case data_format_e8B_FLOAT_0D:
			break;
		case data_format_e8B_FLOAT_1D:
			break;
		case data_format_e8B_PWM:
			tmp_uint_16 = 4*input_buffer[1];
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3301      	adds	r3, #1
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	81bb      	strh	r3, [r7, #12]
			break;
 8000f6c:	e01e      	b.n	8000fac <DATA_LOGGER_Reception+0x164>
		case data_format_e16B_INT16:
			tmp_int_16 = (int16_t)input_buffer[1] << 8;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3301      	adds	r3, #1
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	021b      	lsls	r3, r3, #8
 8000f76:	817b      	strh	r3, [r7, #10]
			tmp_int_16 += (int16_t)input_buffer[2];
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3302      	adds	r3, #2
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	897b      	ldrh	r3, [r7, #10]
 8000f82:	4413      	add	r3, r2
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	817b      	strh	r3, [r7, #10]
			switch(id)
			{
				default:
					break;
 8000f88:	bf00      	nop
			}

			break;
 8000f8a:	e00f      	b.n	8000fac <DATA_LOGGER_Reception+0x164>
		case data_format_e16B_UINT16:
			tmp_uint_16 = (uint16_t)input_buffer[1] << 8;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	021b      	lsls	r3, r3, #8
 8000f96:	81bb      	strh	r3, [r7, #12]
			tmp_uint_16 += (uint16_t)input_buffer[2];
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3302      	adds	r3, #2
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	89bb      	ldrh	r3, [r7, #12]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	81bb      	strh	r3, [r7, #12]
			switch(id)
			{
				default:
					break;
 8000fa6:	bf00      	nop
			}

		case data_format_e16B_FLOAT_1D:
			break;
 8000fa8:	e000      	b.n	8000fac <DATA_LOGGER_Reception+0x164>
		default:
			break;
 8000faa:	bf00      	nop

	}
}
 8000fac:	bf00      	nop
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000198 	.word	0x20000198
 8000fb8:	20000301 	.word	0x20000301

08000fbc <DATA_LOGGER_Get_Data_Value>:
 * @param id Id of the data
 * @param buffer Buffer array
 * @return Number of bytes written
 */
uint8_t DATA_LOGGER_Get_Data_Value(data_id_e id, uint8_t * buffer)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b087      	sub	sp, #28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	73fb      	strb	r3, [r7, #15]

	/* Local temporary variables */
	int16_t tmp_16 = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	82fb      	strh	r3, [r7, #22]
	float tmp_float = 0;
 8000fcc:	f04f 0300 	mov.w	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]

	/* First byte is reserved for the id */
	buffer[0] = id ;
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	7bfa      	ldrb	r2, [r7, #15]
 8000fd6:	701a      	strb	r2, [r3, #0]
	switch(data_list[id].format)
 8000fd8:	7bfa      	ldrb	r2, [r7, #15]
 8000fda:	498f      	ldr	r1, [pc, #572]	; (8001218 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000fdc:	4613      	mov	r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	4413      	add	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	3309      	adds	r3, #9
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	3b14      	subs	r3, #20
 8000fec:	2b19      	cmp	r3, #25
 8000fee:	f200 80fb 	bhi.w	80011e8 <DATA_LOGGER_Get_Data_Value+0x22c>
 8000ff2:	a201      	add	r2, pc, #4	; (adr r2, 8000ff8 <DATA_LOGGER_Get_Data_Value+0x3c>)
 8000ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff8:	08001061 	.word	0x08001061
 8000ffc:	080011e9 	.word	0x080011e9
 8001000:	080011e9 	.word	0x080011e9
 8001004:	0800107d 	.word	0x0800107d
 8001008:	080011e9 	.word	0x080011e9
 800100c:	080011e9 	.word	0x080011e9
 8001010:	080011e9 	.word	0x080011e9
 8001014:	080011e9 	.word	0x080011e9
 8001018:	080011e9 	.word	0x080011e9
 800101c:	080011e9 	.word	0x080011e9
 8001020:	080011e9 	.word	0x080011e9
 8001024:	080011e9 	.word	0x080011e9
 8001028:	080011e9 	.word	0x080011e9
 800102c:	080011e9 	.word	0x080011e9
 8001030:	080011e9 	.word	0x080011e9
 8001034:	080011e9 	.word	0x080011e9
 8001038:	080011e9 	.word	0x080011e9
 800103c:	080011e9 	.word	0x080011e9
 8001040:	080011e9 	.word	0x080011e9
 8001044:	080011e9 	.word	0x080011e9
 8001048:	080011e9 	.word	0x080011e9
 800104c:	080010ad 	.word	0x080010ad
 8001050:	080010f5 	.word	0x080010f5
 8001054:	0800113d 	.word	0x0800113d
 8001058:	08001185 	.word	0x08001185
 800105c:	080011b7 	.word	0x080011b7
	{
		case data_format_e8B:
			buffer[1] = *(uint8_t*)data_list[id].data ;
 8001060:	7bfa      	ldrb	r2, [r7, #15]
 8001062:	496d      	ldr	r1, [pc, #436]	; (8001218 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8001064:	4613      	mov	r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4413      	add	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	440b      	add	r3, r1
 800106e:	3304      	adds	r3, #4
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	3301      	adds	r3, #1
 8001076:	7812      	ldrb	r2, [r2, #0]
 8001078:	701a      	strb	r2, [r3, #0]
			break;
 800107a:	e0b6      	b.n	80011ea <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e8B_PWM:
			break;
		case data_format_e8B_FLOAT_0D:
			tmp_float = *(float*)data_list[id].data ;
 800107c:	7bfa      	ldrb	r2, [r7, #15]
 800107e:	4966      	ldr	r1, [pc, #408]	; (8001218 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8001080:	4613      	mov	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4413      	add	r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	440b      	add	r3, r1
 800108a:	3304      	adds	r3, #4
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	613b      	str	r3, [r7, #16]
			buffer[1] = (int8_t)tmp_float;
 8001092:	edd7 7a04 	vldr	s15, [r7, #16]
 8001096:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800109a:	edc7 7a01 	vstr	s15, [r7, #4]
 800109e:	793b      	ldrb	r3, [r7, #4]
 80010a0:	b25a      	sxtb	r2, r3
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	3301      	adds	r3, #1
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	701a      	strb	r2, [r3, #0]
			break;
 80010aa:	e09e      	b.n	80011ea <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e8B_FLOAT_1D:
			break;
		case data_format_e16B:
			break;
		case data_format_e16B_FLOAT_1D:
			tmp_float = *(float*)data_list[id].data;
 80010ac:	7bfa      	ldrb	r2, [r7, #15]
 80010ae:	495a      	ldr	r1, [pc, #360]	; (8001218 <DATA_LOGGER_Get_Data_Value+0x25c>)
 80010b0:	4613      	mov	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	4413      	add	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	3304      	adds	r3, #4
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 10;
 80010c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80010c6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80010ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010d2:	ee17 3a90 	vmov	r3, s15
 80010d6:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 80010d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010dc:	121b      	asrs	r3, r3, #8
 80010de:	b21a      	sxth	r2, r3
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	3301      	adds	r3, #1
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	3302      	adds	r3, #2
 80010ec:	8afa      	ldrh	r2, [r7, #22]
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	701a      	strb	r2, [r3, #0]
			break;
 80010f2:	e07a      	b.n	80011ea <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e16B_FLOAT_2D:
			tmp_float = *(float*)data_list[id].data;
 80010f4:	7bfa      	ldrb	r2, [r7, #15]
 80010f6:	4948      	ldr	r1, [pc, #288]	; (8001218 <DATA_LOGGER_Get_Data_Value+0x25c>)
 80010f8:	4613      	mov	r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	440b      	add	r3, r1
 8001102:	3304      	adds	r3, #4
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 100;
 800110a:	edd7 7a04 	vldr	s15, [r7, #16]
 800110e:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800121c <DATA_LOGGER_Get_Data_Value+0x260>
 8001112:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001116:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800111a:	ee17 3a90 	vmov	r3, s15
 800111e:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8001120:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001124:	121b      	asrs	r3, r3, #8
 8001126:	b21a      	sxth	r2, r3
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	3301      	adds	r3, #1
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	3302      	adds	r3, #2
 8001134:	8afa      	ldrh	r2, [r7, #22]
 8001136:	b2d2      	uxtb	r2, r2
 8001138:	701a      	strb	r2, [r3, #0]
			break;
 800113a:	e056      	b.n	80011ea <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e16B_FLOAT_3D:
			tmp_float = *(float*)data_list[id].data;
 800113c:	7bfa      	ldrb	r2, [r7, #15]
 800113e:	4936      	ldr	r1, [pc, #216]	; (8001218 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8001140:	4613      	mov	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	440b      	add	r3, r1
 800114a:	3304      	adds	r3, #4
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 1000;
 8001152:	edd7 7a04 	vldr	s15, [r7, #16]
 8001156:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001220 <DATA_LOGGER_Get_Data_Value+0x264>
 800115a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800115e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001162:	ee17 3a90 	vmov	r3, s15
 8001166:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8001168:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800116c:	121b      	asrs	r3, r3, #8
 800116e:	b21a      	sxth	r2, r3
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	3301      	adds	r3, #1
 8001174:	b2d2      	uxtb	r2, r2
 8001176:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	3302      	adds	r3, #2
 800117c:	8afa      	ldrh	r2, [r7, #22]
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	701a      	strb	r2, [r3, #0]
			break;
 8001182:	e032      	b.n	80011ea <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e16B_UINT16:
			tmp_16 = *(uint16_t*)data_list[id].data ;
 8001184:	7bfa      	ldrb	r2, [r7, #15]
 8001186:	4924      	ldr	r1, [pc, #144]	; (8001218 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8001188:	4613      	mov	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4413      	add	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	440b      	add	r3, r1
 8001192:	3304      	adds	r3, #4
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 800119a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800119e:	121b      	asrs	r3, r3, #8
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	3301      	adds	r3, #1
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	3302      	adds	r3, #2
 80011ae:	8afa      	ldrh	r2, [r7, #22]
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	701a      	strb	r2, [r3, #0]
			break;
 80011b4:	e019      	b.n	80011ea <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e16B_INT16:
			tmp_16 = *(int16_t*)data_list[id].data ;
 80011b6:	7bfa      	ldrb	r2, [r7, #15]
 80011b8:	4917      	ldr	r1, [pc, #92]	; (8001218 <DATA_LOGGER_Get_Data_Value+0x25c>)
 80011ba:	4613      	mov	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	440b      	add	r3, r1
 80011c4:	3304      	adds	r3, #4
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 80011cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011d0:	121b      	asrs	r3, r3, #8
 80011d2:	b21a      	sxth	r2, r3
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	3301      	adds	r3, #1
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	3302      	adds	r3, #2
 80011e0:	8afa      	ldrh	r2, [r7, #22]
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	701a      	strb	r2, [r3, #0]
			break;
 80011e6:	e000      	b.n	80011ea <DATA_LOGGER_Get_Data_Value+0x22e>
		default:
			break;
 80011e8:	bf00      	nop
	}
	/* Length of the data array */
	return (data_list[id].format / 20) + 1;
 80011ea:	7bfa      	ldrb	r2, [r7, #15]
 80011ec:	490a      	ldr	r1, [pc, #40]	; (8001218 <DATA_LOGGER_Get_Data_Value+0x25c>)
 80011ee:	4613      	mov	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4413      	add	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	440b      	add	r3, r1
 80011f8:	3309      	adds	r3, #9
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4a09      	ldr	r2, [pc, #36]	; (8001224 <DATA_LOGGER_Get_Data_Value+0x268>)
 80011fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001202:	091b      	lsrs	r3, r3, #4
 8001204:	b2db      	uxtb	r3, r3
 8001206:	3301      	adds	r3, #1
 8001208:	b2db      	uxtb	r3, r3
}
 800120a:	4618      	mov	r0, r3
 800120c:	371c      	adds	r7, #28
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20000198 	.word	0x20000198
 800121c:	42c80000 	.word	0x42c80000
 8001220:	447a0000 	.word	0x447a0000
 8001224:	cccccccd 	.word	0xcccccccd

08001228 <DATA_LOGGER_Get_Data_Config>:
 * @param id Id of the data
 * @param buffer Buffer array to write the configuration into
 * @return Number of bytes we wrote in the buffer
 */
uint8_t DATA_LOGGER_Get_Data_Config(data_id_e id, uint8_t * buffer)
{
 8001228:	b590      	push	{r4, r7, lr}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	6039      	str	r1, [r7, #0]
 8001232:	71fb      	strb	r3, [r7, #7]
	/* We send a configuration so it must start with 0xFF */
	buffer[0] = 0xFF;
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	22ff      	movs	r2, #255	; 0xff
 8001238:	701a      	strb	r2, [r3, #0]
	/* Then we put the length of the name */
	buffer[1] = data_list[id].len_name;
 800123a:	79fa      	ldrb	r2, [r7, #7]
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	1c59      	adds	r1, r3, #1
 8001240:	4828      	ldr	r0, [pc, #160]	; (80012e4 <DATA_LOGGER_Get_Data_Config+0xbc>)
 8001242:	4613      	mov	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4403      	add	r3, r0
 800124c:	3310      	adds	r3, #16
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	700b      	strb	r3, [r1, #0]
	/* Then we write the data format */
	buffer[2] = data_list[id].format;
 8001252:	79fa      	ldrb	r2, [r7, #7]
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	1c99      	adds	r1, r3, #2
 8001258:	4822      	ldr	r0, [pc, #136]	; (80012e4 <DATA_LOGGER_Get_Data_Config+0xbc>)
 800125a:	4613      	mov	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4403      	add	r3, r0
 8001264:	3309      	adds	r3, #9
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	700b      	strb	r3, [r1, #0]
	/* Then the id of the data */
	buffer[3] = id;
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	3303      	adds	r3, #3
 800126e:	79fa      	ldrb	r2, [r7, #7]
 8001270:	701a      	strb	r2, [r3, #0]
	/* When the data is used as output, we add 128 to the id */
	if(data_list[id].use_format == use_format_eAS_INPUT)
 8001272:	79fa      	ldrb	r2, [r7, #7]
 8001274:	491b      	ldr	r1, [pc, #108]	; (80012e4 <DATA_LOGGER_Get_Data_Config+0xbc>)
 8001276:	4613      	mov	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	440b      	add	r3, r1
 8001280:	3311      	adds	r3, #17
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b02      	cmp	r3, #2
 8001286:	d107      	bne.n	8001298 <DATA_LOGGER_Get_Data_Config+0x70>
	{
		buffer[3] += 128 ;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	3303      	adds	r3, #3
 800128c:	781a      	ldrb	r2, [r3, #0]
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	3303      	adds	r3, #3
 8001292:	3a80      	subs	r2, #128	; 0x80
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	701a      	strb	r2, [r3, #0]
	}
	/* Finally we write the name */
	memcpy(&buffer[4], data_list[id].name, data_list[id].len_name);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	1d18      	adds	r0, r3, #4
 800129c:	79fa      	ldrb	r2, [r7, #7]
 800129e:	4911      	ldr	r1, [pc, #68]	; (80012e4 <DATA_LOGGER_Get_Data_Config+0xbc>)
 80012a0:	4613      	mov	r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	440b      	add	r3, r1
 80012aa:	330c      	adds	r3, #12
 80012ac:	6819      	ldr	r1, [r3, #0]
 80012ae:	79fa      	ldrb	r2, [r7, #7]
 80012b0:	4c0c      	ldr	r4, [pc, #48]	; (80012e4 <DATA_LOGGER_Get_Data_Config+0xbc>)
 80012b2:	4613      	mov	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4423      	add	r3, r4
 80012bc:	3310      	adds	r3, #16
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	461a      	mov	r2, r3
 80012c2:	f009 faef 	bl	800a8a4 <memcpy>

	return 4 + data_list[id].len_name ;
 80012c6:	79fa      	ldrb	r2, [r7, #7]
 80012c8:	4906      	ldr	r1, [pc, #24]	; (80012e4 <DATA_LOGGER_Get_Data_Config+0xbc>)
 80012ca:	4613      	mov	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	440b      	add	r3, r1
 80012d4:	3310      	adds	r3, #16
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	3304      	adds	r3, #4
 80012da:	b2db      	uxtb	r3, r3
}
 80012dc:	4618      	mov	r0, r3
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd90      	pop	{r4, r7, pc}
 80012e4:	20000198 	.word	0x20000198

080012e8 <DATA_LOGGER_Get_Data>:
 * @brief Get data
 * @param id Id of the data
 * @return pointer to the data structure with the corresponding ID
 */
data_t * DATA_LOGGER_Get_Data(data_id_e id)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
	return &data_list[id];
 80012f2:	79fa      	ldrb	r2, [r7, #7]
 80012f4:	4613      	mov	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4a03      	ldr	r2, [pc, #12]	; (800130c <DATA_LOGGER_Get_Data+0x24>)
 80012fe:	4413      	add	r3, r2
}
 8001300:	4618      	mov	r0, r3
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	20000198 	.word	0x20000198

08001310 <push_data_to_uart>:
 * @brief Add the start byte and checksum to a message
 * @param buffer Data array to send
 * @param len Number of bytes to send
 */
void push_data_to_uart(uint8_t * buffer, uint8_t len)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b098      	sub	sp, #96	; 0x60
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	70fb      	strb	r3, [r7, #3]
	uint8_t buffer_new[80];
	uint32_t checksum = 0 ;
 800131c:	2300      	movs	r3, #0
 800131e:	65fb      	str	r3, [r7, #92]	; 0x5c
	buffer_new[0] = '$';
 8001320:	2324      	movs	r3, #36	; 0x24
 8001322:	723b      	strb	r3, [r7, #8]
	for(uint8_t b = 0; b < len; b++)
 8001324:	2300      	movs	r3, #0
 8001326:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800132a:	e01d      	b.n	8001368 <push_data_to_uart+0x58>
	{
		buffer_new[1 + b] = buffer[b];
 800132c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	441a      	add	r2, r3
 8001334:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001338:	3301      	adds	r3, #1
 800133a:	7812      	ldrb	r2, [r2, #0]
 800133c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001340:	440b      	add	r3, r1
 8001342:	f803 2c58 	strb.w	r2, [r3, #-88]
		checksum += (uint32_t)buffer_new[1 + b];
 8001346:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800134a:	3301      	adds	r3, #1
 800134c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001350:	4413      	add	r3, r2
 8001352:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8001356:	461a      	mov	r2, r3
 8001358:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800135a:	4413      	add	r3, r2
 800135c:	65fb      	str	r3, [r7, #92]	; 0x5c
	for(uint8_t b = 0; b < len; b++)
 800135e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001362:	3301      	adds	r3, #1
 8001364:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8001368:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800136c:	78fb      	ldrb	r3, [r7, #3]
 800136e:	429a      	cmp	r2, r3
 8001370:	d3dc      	bcc.n	800132c <push_data_to_uart+0x1c>
	}
	buffer_new[1 + len] = (uint8_t)(checksum % 256) ;
 8001372:	78fb      	ldrb	r3, [r7, #3]
 8001374:	3301      	adds	r3, #1
 8001376:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800137e:	440b      	add	r3, r1
 8001380:	f803 2c58 	strb.w	r2, [r3, #-88]
	UART_Transmit(UART_TELEMETRY, buffer_new, len+2);
 8001384:	78fb      	ldrb	r3, [r7, #3]
 8001386:	b29b      	uxth	r3, r3
 8001388:	3302      	adds	r3, #2
 800138a:	b29a      	uxth	r2, r3
 800138c:	f107 0308 	add.w	r3, r7, #8
 8001390:	4619      	mov	r1, r3
 8001392:	2000      	movs	r0, #0
 8001394:	f001 f89a 	bl	80024cc <UART_Transmit>
}
 8001398:	bf00      	nop
 800139a:	3760      	adds	r7, #96	; 0x60
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <state_machine>:

/*
 * @brief data logger state machine
 */
static void state_machine(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
	/* Time management for periodic transmissions */
	static uint32_t next_time_state_machine = 0;
	static uint32_t current_period = PERIODE_PING;
	uint32_t time_ms = HAL_GetTick();
 80013a6:	f002 fe71 	bl	800408c <HAL_GetTick>
 80013aa:	60b8      	str	r0, [r7, #8]
	if(time_ms < next_time_state_machine)
 80013ac:	4b78      	ldr	r3, [pc, #480]	; (8001590 <state_machine+0x1f0>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	68ba      	ldr	r2, [r7, #8]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	f0c0 80e6 	bcc.w	8001584 <state_machine+0x1e4>
	{
		return;
	}
	next_time_state_machine = time_ms + current_period;
 80013b8:	4b76      	ldr	r3, [pc, #472]	; (8001594 <state_machine+0x1f4>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	4413      	add	r3, r2
 80013c0:	4a73      	ldr	r2, [pc, #460]	; (8001590 <state_machine+0x1f0>)
 80013c2:	6013      	str	r3, [r2, #0]

	/* State machine variables */
	static data_logger_state_e state = data_logger_state_eIDLE;
	static data_logger_state_e previous_state = data_logger_state_eTRANSMIT_CONFIG ;
	bool_e entrance = previous_state != state ;
 80013c4:	4b74      	ldr	r3, [pc, #464]	; (8001598 <state_machine+0x1f8>)
 80013c6:	781a      	ldrb	r2, [r3, #0]
 80013c8:	4b74      	ldr	r3, [pc, #464]	; (800159c <state_machine+0x1fc>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	bf14      	ite	ne
 80013d0:	2301      	movne	r3, #1
 80013d2:	2300      	moveq	r3, #0
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	71fb      	strb	r3, [r7, #7]
	previous_state = state ;
 80013d8:	4b70      	ldr	r3, [pc, #448]	; (800159c <state_machine+0x1fc>)
 80013da:	781a      	ldrb	r2, [r3, #0]
 80013dc:	4b6e      	ldr	r3, [pc, #440]	; (8001598 <state_machine+0x1f8>)
 80013de:	701a      	strb	r2, [r3, #0]
	switch(state)
 80013e0:	4b6e      	ldr	r3, [pc, #440]	; (800159c <state_machine+0x1fc>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	f000 8091 	beq.w	800150c <state_machine+0x16c>
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	f300 80cd 	bgt.w	800158a <state_machine+0x1ea>
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d002      	beq.n	80013fa <state_machine+0x5a>
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d043      	beq.n	8001480 <state_machine+0xe0>
 80013f8:	e0c7      	b.n	800158a <state_machine+0x1ea>
	{
		case data_logger_state_eIDLE :
			if(entrance)
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <state_machine+0x68>
			{
				/* When we are in the idle mode, we just ping the device at PERIODE_PING µs interval */
				current_period = PERIODE_PING;
 8001400:	4b64      	ldr	r3, [pc, #400]	; (8001594 <state_machine+0x1f4>)
 8001402:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001406:	601a      	str	r2, [r3, #0]
			}

			tmp_len = DATA_LOGGER_Get_Data_Config(data_id_eCONFIG_REQUEST, tmp);
 8001408:	4965      	ldr	r1, [pc, #404]	; (80015a0 <state_machine+0x200>)
 800140a:	2000      	movs	r0, #0
 800140c:	f7ff ff0c 	bl	8001228 <DATA_LOGGER_Get_Data_Config>
 8001410:	4603      	mov	r3, r0
 8001412:	461a      	mov	r2, r3
 8001414:	4b63      	ldr	r3, [pc, #396]	; (80015a4 <state_machine+0x204>)
 8001416:	701a      	strb	r2, [r3, #0]
			push_data_to_uart(tmp, tmp_len);
 8001418:	4b62      	ldr	r3, [pc, #392]	; (80015a4 <state_machine+0x204>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	4619      	mov	r1, r3
 800141e:	4860      	ldr	r0, [pc, #384]	; (80015a0 <state_machine+0x200>)
 8001420:	f7ff ff76 	bl	8001310 <push_data_to_uart>

			/* If we receive a configuration request, we change the state */
			if(send_config_flag)
 8001424:	4b60      	ldr	r3, [pc, #384]	; (80015a8 <state_machine+0x208>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d01a      	beq.n	8001462 <state_machine+0xc2>
			{
				/* Reset flags */
				start_flag = FALSE;
 800142c:	4b5f      	ldr	r3, [pc, #380]	; (80015ac <state_machine+0x20c>)
 800142e:	2200      	movs	r2, #0
 8001430:	701a      	strb	r2, [r3, #0]
				stop_flag = FALSE;
 8001432:	4b5f      	ldr	r3, [pc, #380]	; (80015b0 <state_machine+0x210>)
 8001434:	2200      	movs	r2, #0
 8001436:	701a      	strb	r2, [r3, #0]
				send_config_flag = FALSE;
 8001438:	4b5b      	ldr	r3, [pc, #364]	; (80015a8 <state_machine+0x208>)
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]
				/* Change the state */
				/* We send the configuration only if we did not send it before */
				if(config_not_sent)
 800143e:	4b5d      	ldr	r3, [pc, #372]	; (80015b4 <state_machine+0x214>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d009      	beq.n	800145a <state_machine+0xba>
				{
					id_init_counter = 0;
 8001446:	4b5c      	ldr	r3, [pc, #368]	; (80015b8 <state_machine+0x218>)
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]
					is_any_data_used = FALSE;
 800144c:	4b5b      	ldr	r3, [pc, #364]	; (80015bc <state_machine+0x21c>)
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]
					state = data_logger_state_eTRANSMIT_CONFIG;
 8001452:	4b52      	ldr	r3, [pc, #328]	; (800159c <state_machine+0x1fc>)
 8001454:	2201      	movs	r2, #1
 8001456:	701a      	strb	r2, [r3, #0]
			{
				start_flag = FALSE;
				stop_flag = FALSE;
				state = data_logger_state_eLOG;
			}
			break;
 8001458:	e096      	b.n	8001588 <state_machine+0x1e8>
					state = data_logger_state_eLOG;
 800145a:	4b50      	ldr	r3, [pc, #320]	; (800159c <state_machine+0x1fc>)
 800145c:	2202      	movs	r2, #2
 800145e:	701a      	strb	r2, [r3, #0]
			break;
 8001460:	e092      	b.n	8001588 <state_machine+0x1e8>
			else if(start_flag)
 8001462:	4b52      	ldr	r3, [pc, #328]	; (80015ac <state_machine+0x20c>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	f000 808e 	beq.w	8001588 <state_machine+0x1e8>
				start_flag = FALSE;
 800146c:	4b4f      	ldr	r3, [pc, #316]	; (80015ac <state_machine+0x20c>)
 800146e:	2200      	movs	r2, #0
 8001470:	701a      	strb	r2, [r3, #0]
				stop_flag = FALSE;
 8001472:	4b4f      	ldr	r3, [pc, #316]	; (80015b0 <state_machine+0x210>)
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]
				state = data_logger_state_eLOG;
 8001478:	4b48      	ldr	r3, [pc, #288]	; (800159c <state_machine+0x1fc>)
 800147a:	2202      	movs	r2, #2
 800147c:	701a      	strb	r2, [r3, #0]
			break;
 800147e:	e083      	b.n	8001588 <state_machine+0x1e8>

		case data_logger_state_eTRANSMIT_CONFIG :
			/* Change the data logger task period to send configuration slowly */
			if(entrance)
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d009      	beq.n	800149a <state_machine+0xfa>
			{
				current_period = PERIODE_CONFIG_SEND;
 8001486:	4b43      	ldr	r3, [pc, #268]	; (8001594 <state_machine+0x1f4>)
 8001488:	220a      	movs	r2, #10
 800148a:	601a      	str	r2, [r3, #0]
			}
			while(data_list[id_init_counter].use_format == use_format_eNOT_USED && id_init_counter < data_id_eCOUNT)
 800148c:	e005      	b.n	800149a <state_machine+0xfa>
			{
				id_init_counter ++ ;
 800148e:	4b4a      	ldr	r3, [pc, #296]	; (80015b8 <state_machine+0x218>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	3301      	adds	r3, #1
 8001494:	b2da      	uxtb	r2, r3
 8001496:	4b48      	ldr	r3, [pc, #288]	; (80015b8 <state_machine+0x218>)
 8001498:	701a      	strb	r2, [r3, #0]
			while(data_list[id_init_counter].use_format == use_format_eNOT_USED && id_init_counter < data_id_eCOUNT)
 800149a:	4b47      	ldr	r3, [pc, #284]	; (80015b8 <state_machine+0x218>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	4619      	mov	r1, r3
 80014a0:	4a47      	ldr	r2, [pc, #284]	; (80015c0 <state_machine+0x220>)
 80014a2:	460b      	mov	r3, r1
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	440b      	add	r3, r1
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	3311      	adds	r3, #17
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d103      	bne.n	80014bc <state_machine+0x11c>
 80014b4:	4b40      	ldr	r3, [pc, #256]	; (80015b8 <state_machine+0x218>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b11      	cmp	r3, #17
 80014ba:	d9e8      	bls.n	800148e <state_machine+0xee>
			}
			if(id_init_counter < data_id_eCOUNT)
 80014bc:	4b3e      	ldr	r3, [pc, #248]	; (80015b8 <state_machine+0x218>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b11      	cmp	r3, #17
 80014c2:	d817      	bhi.n	80014f4 <state_machine+0x154>
			{
				is_any_data_used = TRUE;
 80014c4:	4b3d      	ldr	r3, [pc, #244]	; (80015bc <state_machine+0x21c>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	701a      	strb	r2, [r3, #0]
				/* Get data configuration */
				tmp_len = DATA_LOGGER_Get_Data_Config(id_init_counter++, tmp);
 80014ca:	4b3b      	ldr	r3, [pc, #236]	; (80015b8 <state_machine+0x218>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	1c5a      	adds	r2, r3, #1
 80014d0:	b2d1      	uxtb	r1, r2
 80014d2:	4a39      	ldr	r2, [pc, #228]	; (80015b8 <state_machine+0x218>)
 80014d4:	7011      	strb	r1, [r2, #0]
 80014d6:	4932      	ldr	r1, [pc, #200]	; (80015a0 <state_machine+0x200>)
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fea5 	bl	8001228 <DATA_LOGGER_Get_Data_Config>
 80014de:	4603      	mov	r3, r0
 80014e0:	461a      	mov	r2, r3
 80014e2:	4b30      	ldr	r3, [pc, #192]	; (80015a4 <state_machine+0x204>)
 80014e4:	701a      	strb	r2, [r3, #0]
				/* Send the configuration */
				push_data_to_uart(tmp, tmp_len);
 80014e6:	4b2f      	ldr	r3, [pc, #188]	; (80015a4 <state_machine+0x204>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	4619      	mov	r1, r3
 80014ec:	482c      	ldr	r0, [pc, #176]	; (80015a0 <state_machine+0x200>)
 80014ee:	f7ff ff0f 	bl	8001310 <push_data_to_uart>
				else
				{
					state = data_logger_state_eIDLE ;
				}
			}
			break;
 80014f2:	e04a      	b.n	800158a <state_machine+0x1ea>
				if(is_any_data_used)
 80014f4:	4b31      	ldr	r3, [pc, #196]	; (80015bc <state_machine+0x21c>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <state_machine+0x164>
					state = data_logger_state_eLOG ;
 80014fc:	4b27      	ldr	r3, [pc, #156]	; (800159c <state_machine+0x1fc>)
 80014fe:	2202      	movs	r2, #2
 8001500:	701a      	strb	r2, [r3, #0]
			break;
 8001502:	e042      	b.n	800158a <state_machine+0x1ea>
					state = data_logger_state_eIDLE ;
 8001504:	4b25      	ldr	r3, [pc, #148]	; (800159c <state_machine+0x1fc>)
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]
			break;
 800150a:	e03e      	b.n	800158a <state_machine+0x1ea>

		case data_logger_state_eLOG:
			if(entrance)
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d002      	beq.n	8001518 <state_machine+0x178>
			{
				current_period = PERIODE_SEND;
 8001512:	4b20      	ldr	r3, [pc, #128]	; (8001594 <state_machine+0x1f4>)
 8001514:	220a      	movs	r2, #10
 8001516:	601a      	str	r2, [r3, #0]
			}
			if(stop_flag)
 8001518:	4b25      	ldr	r3, [pc, #148]	; (80015b0 <state_machine+0x210>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d002      	beq.n	8001526 <state_machine+0x186>
			{
				state = data_logger_state_eIDLE;
 8001520:	4b1e      	ldr	r3, [pc, #120]	; (800159c <state_machine+0x1fc>)
 8001522:	2200      	movs	r2, #0
 8001524:	701a      	strb	r2, [r3, #0]
			}
			for(uint8_t d = 0; d < data_id_eCOUNT; d++)
 8001526:	2300      	movs	r3, #0
 8001528:	73fb      	strb	r3, [r7, #15]
 800152a:	e027      	b.n	800157c <state_machine+0x1dc>
			{
				if(data_list[d].use_format == use_format_eAS_OUTPUT && (data_list[d].data != NULL))
 800152c:	7bfa      	ldrb	r2, [r7, #15]
 800152e:	4924      	ldr	r1, [pc, #144]	; (80015c0 <state_machine+0x220>)
 8001530:	4613      	mov	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	440b      	add	r3, r1
 800153a:	3311      	adds	r3, #17
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d119      	bne.n	8001576 <state_machine+0x1d6>
 8001542:	7bfa      	ldrb	r2, [r7, #15]
 8001544:	491e      	ldr	r1, [pc, #120]	; (80015c0 <state_machine+0x220>)
 8001546:	4613      	mov	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4413      	add	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	440b      	add	r3, r1
 8001550:	3304      	adds	r3, #4
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d00e      	beq.n	8001576 <state_machine+0x1d6>
				{
					tmp_len = DATA_LOGGER_Get_Data_Value(d, tmp);
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	4911      	ldr	r1, [pc, #68]	; (80015a0 <state_machine+0x200>)
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fd2d 	bl	8000fbc <DATA_LOGGER_Get_Data_Value>
 8001562:	4603      	mov	r3, r0
 8001564:	461a      	mov	r2, r3
 8001566:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <state_machine+0x204>)
 8001568:	701a      	strb	r2, [r3, #0]
					push_data_to_uart(tmp, tmp_len);
 800156a:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <state_machine+0x204>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	4619      	mov	r1, r3
 8001570:	480b      	ldr	r0, [pc, #44]	; (80015a0 <state_machine+0x200>)
 8001572:	f7ff fecd 	bl	8001310 <push_data_to_uart>
			for(uint8_t d = 0; d < data_id_eCOUNT; d++)
 8001576:	7bfb      	ldrb	r3, [r7, #15]
 8001578:	3301      	adds	r3, #1
 800157a:	73fb      	strb	r3, [r7, #15]
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	2b11      	cmp	r3, #17
 8001580:	d9d4      	bls.n	800152c <state_machine+0x18c>
				}
			}
			break;
 8001582:	e002      	b.n	800158a <state_machine+0x1ea>
		return;
 8001584:	bf00      	nop
 8001586:	e000      	b.n	800158a <state_machine+0x1ea>
			break;
 8001588:	bf00      	nop
	}
}
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	2000033c 	.word	0x2000033c
 8001594:	20000094 	.word	0x20000094
 8001598:	20000098 	.word	0x20000098
 800159c:	20000340 	.word	0x20000340
 80015a0:	20000304 	.word	0x20000304
 80015a4:	20000336 	.word	0x20000336
 80015a8:	20000301 	.word	0x20000301
 80015ac:	20000300 	.word	0x20000300
 80015b0:	20000302 	.word	0x20000302
 80015b4:	20000090 	.word	0x20000090
 80015b8:	20000337 	.word	0x20000337
 80015bc:	20000338 	.word	0x20000338
 80015c0:	20000198 	.word	0x20000198

080015c4 <parse_uart>:

/*
 * @brief Parse incoming bytes
 */
static void parse_uart(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
	static uint8_t trame[20] = { 0 };
	static uint8_t nb_byte_to_buffer = 0;
	static uint8_t buffer_counter = 0;
	static uint16_t checksum = 0;
	/* Check for available data */
	if(UART_Availables(UART_TELEMETRY))
 80015ca:	2000      	movs	r0, #0
 80015cc:	f000 fed4 	bl	8002378 <UART_Availables>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d06e      	beq.n	80016b4 <parse_uart+0xf0>
	{
		uint8_t c;
		UART_Get(UART_TELEMETRY, &c);
 80015d6:	1dfb      	adds	r3, r7, #7
 80015d8:	4619      	mov	r1, r3
 80015da:	2000      	movs	r0, #0
 80015dc:	f000 feda 	bl	8002394 <UART_Get>
		switch(state)
 80015e0:	4b36      	ldr	r3, [pc, #216]	; (80016bc <parse_uart+0xf8>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b03      	cmp	r3, #3
 80015e6:	d865      	bhi.n	80016b4 <parse_uart+0xf0>
 80015e8:	a201      	add	r2, pc, #4	; (adr r2, 80015f0 <parse_uart+0x2c>)
 80015ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ee:	bf00      	nop
 80015f0:	08001601 	.word	0x08001601
 80015f4:	0800160f 	.word	0x0800160f
 80015f8:	0800165d 	.word	0x0800165d
 80015fc:	08001695 	.word	0x08001695
		{
			case parser_state_eSTART_BYTE:
				if(c == '$')
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	2b24      	cmp	r3, #36	; 0x24
 8001604:	d153      	bne.n	80016ae <parse_uart+0xea>
				{
					state = parser_state_eID;
 8001606:	4b2d      	ldr	r3, [pc, #180]	; (80016bc <parse_uart+0xf8>)
 8001608:	2201      	movs	r2, #1
 800160a:	701a      	strb	r2, [r3, #0]
				}
				break;
 800160c:	e04f      	b.n	80016ae <parse_uart+0xea>

			case parser_state_eID:
				if(c < data_id_eCOUNT)
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	2b11      	cmp	r3, #17
 8001612:	d81f      	bhi.n	8001654 <parse_uart+0x90>
				{
					/* Store the id for later use */
					trame[0] = c;
 8001614:	79fa      	ldrb	r2, [r7, #7]
 8001616:	4b2a      	ldr	r3, [pc, #168]	; (80016c0 <parse_uart+0xfc>)
 8001618:	701a      	strb	r2, [r3, #0]
					/* Reset the checksum */
					checksum = c;
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	b29a      	uxth	r2, r3
 800161e:	4b29      	ldr	r3, [pc, #164]	; (80016c4 <parse_uart+0x100>)
 8001620:	801a      	strh	r2, [r3, #0]
					/* Get the data length according to the data format */
					nb_byte_to_buffer = (DATA_LOGGER_Get_Data(c)->format / 20);
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fe5f 	bl	80012e8 <DATA_LOGGER_Get_Data>
 800162a:	4603      	mov	r3, r0
 800162c:	7a5b      	ldrb	r3, [r3, #9]
 800162e:	4a26      	ldr	r2, [pc, #152]	; (80016c8 <parse_uart+0x104>)
 8001630:	fba2 2303 	umull	r2, r3, r2, r3
 8001634:	091b      	lsrs	r3, r3, #4
 8001636:	b2da      	uxtb	r2, r3
 8001638:	4b24      	ldr	r3, [pc, #144]	; (80016cc <parse_uart+0x108>)
 800163a:	701a      	strb	r2, [r3, #0]
					if(nb_byte_to_buffer)
 800163c:	4b23      	ldr	r3, [pc, #140]	; (80016cc <parse_uart+0x108>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <parse_uart+0x88>
					{
						state = parser_state_eDATA;
 8001644:	4b1d      	ldr	r3, [pc, #116]	; (80016bc <parse_uart+0xf8>)
 8001646:	2202      	movs	r2, #2
 8001648:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					state = parser_state_eSTART_BYTE;
				}
				break;
 800164a:	e033      	b.n	80016b4 <parse_uart+0xf0>
						state = parser_state_eCHECKSUM;
 800164c:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <parse_uart+0xf8>)
 800164e:	2203      	movs	r2, #3
 8001650:	701a      	strb	r2, [r3, #0]
				break;
 8001652:	e02f      	b.n	80016b4 <parse_uart+0xf0>
					state = parser_state_eSTART_BYTE;
 8001654:	4b19      	ldr	r3, [pc, #100]	; (80016bc <parse_uart+0xf8>)
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]
				break;
 800165a:	e02b      	b.n	80016b4 <parse_uart+0xf0>
			case parser_state_eDATA:
				trame[1+buffer_counter++] = c;
 800165c:	4b1c      	ldr	r3, [pc, #112]	; (80016d0 <parse_uart+0x10c>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	1c5a      	adds	r2, r3, #1
 8001662:	b2d1      	uxtb	r1, r2
 8001664:	4a1a      	ldr	r2, [pc, #104]	; (80016d0 <parse_uart+0x10c>)
 8001666:	7011      	strb	r1, [r2, #0]
 8001668:	3301      	adds	r3, #1
 800166a:	79f9      	ldrb	r1, [r7, #7]
 800166c:	4a14      	ldr	r2, [pc, #80]	; (80016c0 <parse_uart+0xfc>)
 800166e:	54d1      	strb	r1, [r2, r3]
				checksum += c;
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	b29a      	uxth	r2, r3
 8001674:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <parse_uart+0x100>)
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	4413      	add	r3, r2
 800167a:	b29a      	uxth	r2, r3
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <parse_uart+0x100>)
 800167e:	801a      	strh	r2, [r3, #0]
				if(buffer_counter == nb_byte_to_buffer)
 8001680:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <parse_uart+0x10c>)
 8001682:	781a      	ldrb	r2, [r3, #0]
 8001684:	4b11      	ldr	r3, [pc, #68]	; (80016cc <parse_uart+0x108>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	429a      	cmp	r2, r3
 800168a:	d112      	bne.n	80016b2 <parse_uart+0xee>
				{
					state = parser_state_eCHECKSUM;
 800168c:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <parse_uart+0xf8>)
 800168e:	2203      	movs	r2, #3
 8001690:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001692:	e00e      	b.n	80016b2 <parse_uart+0xee>
			case parser_state_eCHECKSUM:
				if(checksum == c)
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	b29a      	uxth	r2, r3
 8001698:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <parse_uart+0x100>)
 800169a:	881b      	ldrh	r3, [r3, #0]
 800169c:	429a      	cmp	r2, r3
 800169e:	d102      	bne.n	80016a6 <parse_uart+0xe2>
				{
					DATA_LOGGER_Reception(trame);
 80016a0:	4807      	ldr	r0, [pc, #28]	; (80016c0 <parse_uart+0xfc>)
 80016a2:	f7ff fbd1 	bl	8000e48 <DATA_LOGGER_Reception>
				}
				state = parser_state_eSTART_BYTE;
 80016a6:	4b05      	ldr	r3, [pc, #20]	; (80016bc <parse_uart+0xf8>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
				break;
 80016ac:	e002      	b.n	80016b4 <parse_uart+0xf0>
				break;
 80016ae:	bf00      	nop
 80016b0:	e000      	b.n	80016b4 <parse_uart+0xf0>
				break;
 80016b2:	bf00      	nop


		}
	}

}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000341 	.word	0x20000341
 80016c0:	20000344 	.word	0x20000344
 80016c4:	20000358 	.word	0x20000358
 80016c8:	cccccccd 	.word	0xcccccccd
 80016cc:	2000035a 	.word	0x2000035a
 80016d0:	2000035b 	.word	0x2000035b

080016d4 <HIGH_LEVEL_Init>:
#define RADIO_TO_ANGLE_RATE_YAW	((float)0.7f)

static high_level_t high_level = { 0 };

void HIGH_LEVEL_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
	high_level.radio = RADIO_Get_Channel();
 80016d8:	f001 f928 	bl	800292c <RADIO_Get_Channel>
 80016dc:	4603      	mov	r3, r0
 80016de:	4a0c      	ldr	r2, [pc, #48]	; (8001710 <HIGH_LEVEL_Init+0x3c>)
 80016e0:	6053      	str	r3, [r2, #4]
	high_level.target_angle = CONTROLLER_Get_Angle_Target();
 80016e2:	f7ff f997 	bl	8000a14 <CONTROLLER_Get_Angle_Target>
 80016e6:	4603      	mov	r3, r0
 80016e8:	4a09      	ldr	r2, [pc, #36]	; (8001710 <HIGH_LEVEL_Init+0x3c>)
 80016ea:	60d3      	str	r3, [r2, #12]
	high_level.target_angle_speed = CONTROLLER_Get_Angle_Speed_Target();
 80016ec:	f7ff f99c 	bl	8000a28 <CONTROLLER_Get_Angle_Speed_Target>
 80016f0:	4603      	mov	r3, r0
 80016f2:	4a07      	ldr	r2, [pc, #28]	; (8001710 <HIGH_LEVEL_Init+0x3c>)
 80016f4:	6113      	str	r3, [r2, #16]
	high_level.power = MOTOR_MIXER_Get_Power_Input_Ptr();
 80016f6:	f000 fa5d 	bl	8001bb4 <MOTOR_MIXER_Get_Power_Input_Ptr>
 80016fa:	4603      	mov	r3, r0
 80016fc:	4a04      	ldr	r2, [pc, #16]	; (8001710 <HIGH_LEVEL_Init+0x3c>)
 80016fe:	6093      	str	r3, [r2, #8]
	high_level.state = high_level_eGROUND;
 8001700:	4b03      	ldr	r3, [pc, #12]	; (8001710 <HIGH_LEVEL_Init+0x3c>)
 8001702:	2200      	movs	r2, #0
 8001704:	701a      	strb	r2, [r3, #0]
	high_level.previous_state = high_level_eACCRO;
 8001706:	4b02      	ldr	r3, [pc, #8]	; (8001710 <HIGH_LEVEL_Init+0x3c>)
 8001708:	2201      	movs	r2, #1
 800170a:	705a      	strb	r2, [r3, #1]
}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}
 8001710:	2000035c 	.word	0x2000035c

08001714 <HIGH_LEVEL_Process_Main>:

void HIGH_LEVEL_Process_Main(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
	/* entrance is used to know if we changed of state */
	bool_e entrance = high_level.state == high_level.previous_state;
 800171a:	4b9c      	ldr	r3, [pc, #624]	; (800198c <HIGH_LEVEL_Process_Main+0x278>)
 800171c:	781a      	ldrb	r2, [r3, #0]
 800171e:	4b9b      	ldr	r3, [pc, #620]	; (800198c <HIGH_LEVEL_Process_Main+0x278>)
 8001720:	785b      	ldrb	r3, [r3, #1]
 8001722:	429a      	cmp	r2, r3
 8001724:	bf0c      	ite	eq
 8001726:	2301      	moveq	r3, #1
 8001728:	2300      	movne	r3, #0
 800172a:	b2db      	uxtb	r3, r3
 800172c:	71fb      	strb	r3, [r7, #7]
	high_level.previous_state = high_level.state;
 800172e:	4b97      	ldr	r3, [pc, #604]	; (800198c <HIGH_LEVEL_Process_Main+0x278>)
 8001730:	781a      	ldrb	r2, [r3, #0]
 8001732:	4b96      	ldr	r3, [pc, #600]	; (800198c <HIGH_LEVEL_Process_Main+0x278>)
 8001734:	705a      	strb	r2, [r3, #1]
	/* state machine */
	bool_e is_fly_allowed = MPU_Is_Ok();						/* We need the gyro to fly */
 8001736:	f001 fb37 	bl	8002da8 <MPU_Is_Ok>
 800173a:	4603      	mov	r3, r0
 800173c:	71bb      	strb	r3, [r7, #6]
	is_fly_allowed &= high_level.radio[4] > 1500;				/* And the "Arm" switch */
 800173e:	4b93      	ldr	r3, [pc, #588]	; (800198c <HIGH_LEVEL_Process_Main+0x278>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	3308      	adds	r3, #8
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800174a:	4293      	cmp	r3, r2
 800174c:	bf8c      	ite	hi
 800174e:	2301      	movhi	r3, #1
 8001750:	2300      	movls	r3, #0
 8001752:	b2db      	uxtb	r3, r3
 8001754:	b25a      	sxtb	r2, r3
 8001756:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800175a:	4013      	ands	r3, r2
 800175c:	b25b      	sxtb	r3, r3
 800175e:	71bb      	strb	r3, [r7, #6]
	is_fly_allowed &= (RADIO_Get_State() == radio_state_eOK);	/* We also need a working radio so it doesn't fly away */
 8001760:	f001 f8d8 	bl	8002914 <RADIO_Get_State>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	bf0c      	ite	eq
 800176a:	2301      	moveq	r3, #1
 800176c:	2300      	movne	r3, #0
 800176e:	b2db      	uxtb	r3, r3
 8001770:	b25a      	sxtb	r2, r3
 8001772:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001776:	4013      	ands	r3, r2
 8001778:	b25b      	sxtb	r3, r3
 800177a:	71bb      	strb	r3, [r7, #6]
	switch(high_level.state)
 800177c:	4b83      	ldr	r3, [pc, #524]	; (800198c <HIGH_LEVEL_Process_Main+0x278>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b02      	cmp	r3, #2
 8001782:	d039      	beq.n	80017f8 <HIGH_LEVEL_Process_Main+0xe4>
 8001784:	2b02      	cmp	r3, #2
 8001786:	f300 80fc 	bgt.w	8001982 <HIGH_LEVEL_Process_Main+0x26e>
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HIGH_LEVEL_Process_Main+0x82>
 800178e:	2b01      	cmp	r3, #1
 8001790:	f000 8092 	beq.w	80018b8 <HIGH_LEVEL_Process_Main+0x1a4>
			{
				high_level.state = high_level_eANGLE;
			}
			break;
	}
}
 8001794:	e0f5      	b.n	8001982 <HIGH_LEVEL_Process_Main+0x26e>
			if(entrance)
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d007      	beq.n	80017ac <HIGH_LEVEL_Process_Main+0x98>
				CONTROLLER_Set_State(controller_state_eDISABLED);
 800179c:	2000      	movs	r0, #0
 800179e:	f7ff f927 	bl	80009f0 <CONTROLLER_Set_State>
				*high_level.power = 0;
 80017a2:	4b7a      	ldr	r3, [pc, #488]	; (800198c <HIGH_LEVEL_Process_Main+0x278>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
			if(is_fly_allowed && high_level.radio[2] < 1050)
 80017ac:	79bb      	ldrb	r3, [r7, #6]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f000 80e2 	beq.w	8001978 <HIGH_LEVEL_Process_Main+0x264>
 80017b4:	4b75      	ldr	r3, [pc, #468]	; (800198c <HIGH_LEVEL_Process_Main+0x278>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	3304      	adds	r3, #4
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	f240 4219 	movw	r2, #1049	; 0x419
 80017c0:	4293      	cmp	r3, r2
 80017c2:	f200 80d9 	bhi.w	8001978 <HIGH_LEVEL_Process_Main+0x264>
				if(high_level.radio[5] < 1300)
 80017c6:	4b71      	ldr	r3, [pc, #452]	; (800198c <HIGH_LEVEL_Process_Main+0x278>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	330a      	adds	r3, #10
 80017cc:	881b      	ldrh	r3, [r3, #0]
 80017ce:	f240 5213 	movw	r2, #1299	; 0x513
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d803      	bhi.n	80017de <HIGH_LEVEL_Process_Main+0xca>
					high_level.state = high_level_eANGLE;
 80017d6:	4b6d      	ldr	r3, [pc, #436]	; (800198c <HIGH_LEVEL_Process_Main+0x278>)
 80017d8:	2202      	movs	r2, #2
 80017da:	701a      	strb	r2, [r3, #0]
			break;
 80017dc:	e0cc      	b.n	8001978 <HIGH_LEVEL_Process_Main+0x264>
				else if(high_level.radio[5] > 1300)
 80017de:	4b6b      	ldr	r3, [pc, #428]	; (800198c <HIGH_LEVEL_Process_Main+0x278>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	330a      	adds	r3, #10
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	f240 5214 	movw	r2, #1300	; 0x514
 80017ea:	4293      	cmp	r3, r2
 80017ec:	f240 80c4 	bls.w	8001978 <HIGH_LEVEL_Process_Main+0x264>
					high_level.state = high_level_eACCRO;
 80017f0:	4b66      	ldr	r3, [pc, #408]	; (800198c <HIGH_LEVEL_Process_Main+0x278>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	701a      	strb	r2, [r3, #0]
			break;
 80017f6:	e0bf      	b.n	8001978 <HIGH_LEVEL_Process_Main+0x264>
			if(entrance)
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d002      	beq.n	8001804 <HIGH_LEVEL_Process_Main+0xf0>
				CONTROLLER_Set_State(controller_state_eANGLE);
 80017fe:	2002      	movs	r0, #2
 8001800:	f7ff f8f6 	bl	80009f0 <CONTROLLER_Set_State>
			high_level.target_angle[axe_eROLL] = (float)(high_level.radio[0]-1500) * RADIO_TO_ANGLE;
 8001804:	4b61      	ldr	r3, [pc, #388]	; (800198c <HIGH_LEVEL_Process_Main+0x278>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800180e:	ee07 3a90 	vmov	s15, r3
 8001812:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001816:	4b5d      	ldr	r3, [pc, #372]	; (800198c <HIGH_LEVEL_Process_Main+0x278>)
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001990 <HIGH_LEVEL_Process_Main+0x27c>
 800181e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001822:	edc3 7a00 	vstr	s15, [r3]
			high_level.target_angle[axe_ePITCH] = (float)(high_level.radio[1]-1500) * RADIO_TO_ANGLE;
 8001826:	4b59      	ldr	r3, [pc, #356]	; (800198c <HIGH_LEVEL_Process_Main+0x278>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	3302      	adds	r3, #2
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8001832:	ee07 3a90 	vmov	s15, r3
 8001836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800183a:	4b54      	ldr	r3, [pc, #336]	; (800198c <HIGH_LEVEL_Process_Main+0x278>)
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	3304      	adds	r3, #4
 8001840:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001990 <HIGH_LEVEL_Process_Main+0x27c>
 8001844:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001848:	edc3 7a00 	vstr	s15, [r3]
			high_level.target_angle_speed[axe_eYAW] = -(float)(high_level.radio[3]-1500) * RADIO_TO_ANGLE_RATE_YAW;
 800184c:	4b4f      	ldr	r3, [pc, #316]	; (800198c <HIGH_LEVEL_Process_Main+0x278>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	3306      	adds	r3, #6
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8001858:	ee07 3a90 	vmov	s15, r3
 800185c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001860:	eef1 7a67 	vneg.f32	s15, s15
 8001864:	4b49      	ldr	r3, [pc, #292]	; (800198c <HIGH_LEVEL_Process_Main+0x278>)
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	3308      	adds	r3, #8
 800186a:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001994 <HIGH_LEVEL_Process_Main+0x280>
 800186e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001872:	edc3 7a00 	vstr	s15, [r3]
			*high_level.power = high_level.radio[2]-1000;
 8001876:	4b45      	ldr	r3, [pc, #276]	; (800198c <HIGH_LEVEL_Process_Main+0x278>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	3304      	adds	r3, #4
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8001882:	4b42      	ldr	r3, [pc, #264]	; (800198c <HIGH_LEVEL_Process_Main+0x278>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	ee07 2a90 	vmov	s15, r2
 800188a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800188e:	edc3 7a00 	vstr	s15, [r3]
			if(!is_fly_allowed)
 8001892:	79bb      	ldrb	r3, [r7, #6]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d103      	bne.n	80018a0 <HIGH_LEVEL_Process_Main+0x18c>
				high_level.state = high_level_eGROUND;
 8001898:	4b3c      	ldr	r3, [pc, #240]	; (800198c <HIGH_LEVEL_Process_Main+0x278>)
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
			break;
 800189e:	e06d      	b.n	800197c <HIGH_LEVEL_Process_Main+0x268>
			else if(high_level.radio[5] > 1300)
 80018a0:	4b3a      	ldr	r3, [pc, #232]	; (800198c <HIGH_LEVEL_Process_Main+0x278>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	330a      	adds	r3, #10
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	f240 5214 	movw	r2, #1300	; 0x514
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d965      	bls.n	800197c <HIGH_LEVEL_Process_Main+0x268>
				high_level.state = high_level_eACCRO;
 80018b0:	4b36      	ldr	r3, [pc, #216]	; (800198c <HIGH_LEVEL_Process_Main+0x278>)
 80018b2:	2201      	movs	r2, #1
 80018b4:	701a      	strb	r2, [r3, #0]
			break;
 80018b6:	e061      	b.n	800197c <HIGH_LEVEL_Process_Main+0x268>
			if(entrance)
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d002      	beq.n	80018c4 <HIGH_LEVEL_Process_Main+0x1b0>
				CONTROLLER_Set_State(controller_state_eSPEED);
 80018be:	2001      	movs	r0, #1
 80018c0:	f7ff f896 	bl	80009f0 <CONTROLLER_Set_State>
			high_level.target_angle_speed[axe_eROLL] = (float)(high_level.radio[0]-1500) * RADIO_TO_ANGLE_RATE;
 80018c4:	4b31      	ldr	r3, [pc, #196]	; (800198c <HIGH_LEVEL_Process_Main+0x278>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	881b      	ldrh	r3, [r3, #0]
 80018ca:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80018ce:	ee07 3a90 	vmov	s15, r3
 80018d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018d6:	4b2d      	ldr	r3, [pc, #180]	; (800198c <HIGH_LEVEL_Process_Main+0x278>)
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80018de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018e2:	edc3 7a00 	vstr	s15, [r3]
			high_level.target_angle_speed[axe_ePITCH] = (float)(high_level.radio[1]-1500) * RADIO_TO_ANGLE_RATE;
 80018e6:	4b29      	ldr	r3, [pc, #164]	; (800198c <HIGH_LEVEL_Process_Main+0x278>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	3302      	adds	r3, #2
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80018f2:	ee07 3a90 	vmov	s15, r3
 80018f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018fa:	4b24      	ldr	r3, [pc, #144]	; (800198c <HIGH_LEVEL_Process_Main+0x278>)
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	3304      	adds	r3, #4
 8001900:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001904:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001908:	edc3 7a00 	vstr	s15, [r3]
			high_level.target_angle_speed[axe_eYAW] = -(float)(high_level.radio[3]-1500) * RADIO_TO_ANGLE_RATE_YAW;
 800190c:	4b1f      	ldr	r3, [pc, #124]	; (800198c <HIGH_LEVEL_Process_Main+0x278>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	3306      	adds	r3, #6
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8001918:	ee07 3a90 	vmov	s15, r3
 800191c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001920:	eef1 7a67 	vneg.f32	s15, s15
 8001924:	4b19      	ldr	r3, [pc, #100]	; (800198c <HIGH_LEVEL_Process_Main+0x278>)
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	3308      	adds	r3, #8
 800192a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001994 <HIGH_LEVEL_Process_Main+0x280>
 800192e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001932:	edc3 7a00 	vstr	s15, [r3]
			*high_level.power = high_level.radio[2]-1000;
 8001936:	4b15      	ldr	r3, [pc, #84]	; (800198c <HIGH_LEVEL_Process_Main+0x278>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	3304      	adds	r3, #4
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8001942:	4b12      	ldr	r3, [pc, #72]	; (800198c <HIGH_LEVEL_Process_Main+0x278>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	ee07 2a90 	vmov	s15, r2
 800194a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800194e:	edc3 7a00 	vstr	s15, [r3]
			if(!is_fly_allowed)
 8001952:	79bb      	ldrb	r3, [r7, #6]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d103      	bne.n	8001960 <HIGH_LEVEL_Process_Main+0x24c>
				high_level.state = high_level_eGROUND;
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <HIGH_LEVEL_Process_Main+0x278>)
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
			break;
 800195e:	e00f      	b.n	8001980 <HIGH_LEVEL_Process_Main+0x26c>
			else if(high_level.radio[5] < 1300)
 8001960:	4b0a      	ldr	r3, [pc, #40]	; (800198c <HIGH_LEVEL_Process_Main+0x278>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	330a      	adds	r3, #10
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	f240 5213 	movw	r2, #1299	; 0x513
 800196c:	4293      	cmp	r3, r2
 800196e:	d807      	bhi.n	8001980 <HIGH_LEVEL_Process_Main+0x26c>
				high_level.state = high_level_eANGLE;
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <HIGH_LEVEL_Process_Main+0x278>)
 8001972:	2202      	movs	r2, #2
 8001974:	701a      	strb	r2, [r3, #0]
			break;
 8001976:	e003      	b.n	8001980 <HIGH_LEVEL_Process_Main+0x26c>
			break;
 8001978:	bf00      	nop
 800197a:	e002      	b.n	8001982 <HIGH_LEVEL_Process_Main+0x26e>
			break;
 800197c:	bf00      	nop
 800197e:	e000      	b.n	8001982 <HIGH_LEVEL_Process_Main+0x26e>
			break;
 8001980:	bf00      	nop
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	2000035c 	.word	0x2000035c
 8001990:	3dcccccd 	.word	0x3dcccccd
 8001994:	3f333333 	.word	0x3f333333

08001998 <Led_main_ms>:

/*
 * @brief called by main_ms, turn the led on or off to follow the sequence
 */
void Led_main_ms(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
	for (uint8_t led = 0; led < led_eCOUNT; led++)
 800199e:	2300      	movs	r3, #0
 80019a0:	71fb      	strb	r3, [r7, #7]
 80019a2:	e043      	b.n	8001a2c <Led_main_ms+0x94>
	{
		if (current_sequence[led] != led_sequence_eSEQUENCE_DISABLED)
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	4a25      	ldr	r2, [pc, #148]	; (8001a3c <Led_main_ms+0xa4>)
 80019a8:	5cd3      	ldrb	r3, [r2, r3]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d03b      	beq.n	8001a26 <Led_main_ms+0x8e>
		{
			counter[led]++;
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	4a23      	ldr	r2, [pc, #140]	; (8001a40 <Led_main_ms+0xa8>)
 80019b2:	5cd2      	ldrb	r2, [r2, r3]
 80019b4:	3201      	adds	r2, #1
 80019b6:	b2d1      	uxtb	r1, r2
 80019b8:	4a21      	ldr	r2, [pc, #132]	; (8001a40 <Led_main_ms+0xa8>)
 80019ba:	54d1      	strb	r1, [r2, r3]
			if (counter[led] == LED_PERIOD)
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	4a20      	ldr	r2, [pc, #128]	; (8001a40 <Led_main_ms+0xa8>)
 80019c0:	5cd3      	ldrb	r3, [r2, r3]
 80019c2:	2bc8      	cmp	r3, #200	; 0xc8
 80019c4:	d12f      	bne.n	8001a26 <Led_main_ms+0x8e>
			{
				uint8_t current_bit = 1	<< ((SEQUENCE_LENGTH - 1) - sequence_index[led]);
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	4a1e      	ldr	r2, [pc, #120]	; (8001a44 <Led_main_ms+0xac>)
 80019ca:	5cd3      	ldrb	r3, [r2, r3]
 80019cc:	f1c3 0307 	rsb	r3, r3, #7
 80019d0:	2201      	movs	r2, #1
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	71bb      	strb	r3, [r7, #6]
				if (current_sequence[led] & current_bit)
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	4a18      	ldr	r2, [pc, #96]	; (8001a3c <Led_main_ms+0xa4>)
 80019dc:	5cd2      	ldrb	r2, [r2, r3]
 80019de:	79bb      	ldrb	r3, [r7, #6]
 80019e0:	4013      	ands	r3, r2
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d005      	beq.n	80019f4 <Led_main_ms+0x5c>
				{
					Led_Set(led, LED_HIGH);
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	2101      	movs	r1, #1
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 f82b 	bl	8001a48 <Led_Set>
 80019f2:	e004      	b.n	80019fe <Led_main_ms+0x66>
				}
				else
				{
					Led_Set(led, LED_LOW);
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	2100      	movs	r1, #0
 80019f8:	4618      	mov	r0, r3
 80019fa:	f000 f825 	bl	8001a48 <Led_Set>
				}
				sequence_index[led]++;
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	4a10      	ldr	r2, [pc, #64]	; (8001a44 <Led_main_ms+0xac>)
 8001a02:	5cd2      	ldrb	r2, [r2, r3]
 8001a04:	3201      	adds	r2, #1
 8001a06:	b2d1      	uxtb	r1, r2
 8001a08:	4a0e      	ldr	r2, [pc, #56]	; (8001a44 <Led_main_ms+0xac>)
 8001a0a:	54d1      	strb	r1, [r2, r3]
				counter[led] = 0;
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	4a0c      	ldr	r2, [pc, #48]	; (8001a40 <Led_main_ms+0xa8>)
 8001a10:	2100      	movs	r1, #0
 8001a12:	54d1      	strb	r1, [r2, r3]
				if (sequence_index[led] == 8)
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	4a0b      	ldr	r2, [pc, #44]	; (8001a44 <Led_main_ms+0xac>)
 8001a18:	5cd3      	ldrb	r3, [r2, r3]
 8001a1a:	2b08      	cmp	r3, #8
 8001a1c:	d103      	bne.n	8001a26 <Led_main_ms+0x8e>
				{
					sequence_index[led] = 0;
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	4a08      	ldr	r2, [pc, #32]	; (8001a44 <Led_main_ms+0xac>)
 8001a22:	2100      	movs	r1, #0
 8001a24:	54d1      	strb	r1, [r2, r3]
	for (uint8_t led = 0; led < led_eCOUNT; led++)
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	71fb      	strb	r3, [r7, #7]
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d9b8      	bls.n	80019a4 <Led_main_ms+0xc>
				}
			}
		}
	}
}
 8001a32:	bf00      	nop
 8001a34:	bf00      	nop
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20000370 	.word	0x20000370
 8001a40:	20000378 	.word	0x20000378
 8001a44:	20000374 	.word	0x20000374

08001a48 <Led_Set>:
/*
 * @brief Set the state of the led
 * @param state State of the led to set
 */
void Led_Set(led_t led, LED_state_e state)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	460a      	mov	r2, r1
 8001a52:	71fb      	strb	r3, [r7, #7]
 8001a54:	4613      	mov	r3, r2
 8001a56:	71bb      	strb	r3, [r7, #6]
	switch (led)
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d002      	beq.n	8001a64 <Led_Set+0x1c>
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d008      	beq.n	8001a74 <Led_Set+0x2c>
			break;
		case led_eSTATE2:
			GPIO_Write_Pin(LED_STATE2_GPIO_Port, LED_STATE2_Pin, (GPIO_state_e) state);
			break;
		default:
			break;
 8001a62:	e00f      	b.n	8001a84 <Led_Set+0x3c>
			GPIO_Write_Pin(LED_STATE_GPIO_Port, LED_STATE_Pin, (GPIO_state_e) state);
 8001a64:	79bb      	ldrb	r3, [r7, #6]
 8001a66:	461a      	mov	r2, r3
 8001a68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a6c:	4807      	ldr	r0, [pc, #28]	; (8001a8c <Led_Set+0x44>)
 8001a6e:	f000 fa6d 	bl	8001f4c <GPIO_Write_Pin>
			break;
 8001a72:	e007      	b.n	8001a84 <Led_Set+0x3c>
			GPIO_Write_Pin(LED_STATE2_GPIO_Port, LED_STATE2_Pin, (GPIO_state_e) state);
 8001a74:	79bb      	ldrb	r3, [r7, #6]
 8001a76:	461a      	mov	r2, r3
 8001a78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a7c:	4803      	ldr	r0, [pc, #12]	; (8001a8c <Led_Set+0x44>)
 8001a7e:	f000 fa65 	bl	8001f4c <GPIO_Write_Pin>
			break;
 8001a82:	bf00      	nop
	}
}
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40020800 	.word	0x40020800

08001a90 <Led_Set_Sequence>:
/*
 * @brief Set the current led sequence
 * @param sequence The new sequence
 */
void Led_Set_Sequence(led_t led, led_sequence_e sequence)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	460a      	mov	r2, r1
 8001a9a:	71fb      	strb	r3, [r7, #7]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	71bb      	strb	r3, [r7, #6]
	if(current_sequence[led] == sequence)
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	4a0c      	ldr	r2, [pc, #48]	; (8001ad4 <Led_Set_Sequence+0x44>)
 8001aa4:	5cd3      	ldrb	r3, [r2, r3]
 8001aa6:	79ba      	ldrb	r2, [r7, #6]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d00c      	beq.n	8001ac6 <Led_Set_Sequence+0x36>
	{
		return;
	}
	/* Change the current led sequence */
	current_sequence[led] = sequence;
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	4909      	ldr	r1, [pc, #36]	; (8001ad4 <Led_Set_Sequence+0x44>)
 8001ab0:	79ba      	ldrb	r2, [r7, #6]
 8001ab2:	54ca      	strb	r2, [r1, r3]
	/* Reset counters to start from the beginning of the sequence */
	counter[led] = 0;
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	4a08      	ldr	r2, [pc, #32]	; (8001ad8 <Led_Set_Sequence+0x48>)
 8001ab8:	2100      	movs	r1, #0
 8001aba:	54d1      	strb	r1, [r2, r3]
	sequence_index[led] = 0;
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	4a07      	ldr	r2, [pc, #28]	; (8001adc <Led_Set_Sequence+0x4c>)
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	54d1      	strb	r1, [r2, r3]
 8001ac4:	e000      	b.n	8001ac8 <Led_Set_Sequence+0x38>
		return;
 8001ac6:	bf00      	nop
}
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	20000370 	.word	0x20000370
 8001ad8:	20000378 	.word	0x20000378
 8001adc:	20000374 	.word	0x20000374

08001ae0 <MOTOR_MIXER_Process>:
#include "Motor_Mixer.h"

static motor_mixer_t motor_mixer = { 0 };

void MOTOR_MIXER_Process(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
	motor_mixer.output[motor_eFRONT_LEFT] = 	motor_mixer.input_power + motor_mixer.input_angle[axe_eROLL] - motor_mixer.input_angle[axe_ePITCH] - motor_mixer.input_angle[axe_eYAW];
 8001ae4:	4b2c      	ldr	r3, [pc, #176]	; (8001b98 <MOTOR_MIXER_Process+0xb8>)
 8001ae6:	ed93 7a03 	vldr	s14, [r3, #12]
 8001aea:	4b2b      	ldr	r3, [pc, #172]	; (8001b98 <MOTOR_MIXER_Process+0xb8>)
 8001aec:	edd3 7a00 	vldr	s15, [r3]
 8001af0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001af4:	4b28      	ldr	r3, [pc, #160]	; (8001b98 <MOTOR_MIXER_Process+0xb8>)
 8001af6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001afa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001afe:	4b26      	ldr	r3, [pc, #152]	; (8001b98 <MOTOR_MIXER_Process+0xb8>)
 8001b00:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b08:	4b23      	ldr	r3, [pc, #140]	; (8001b98 <MOTOR_MIXER_Process+0xb8>)
 8001b0a:	edc3 7a07 	vstr	s15, [r3, #28]
	motor_mixer.output[motor_eFRONT_RIGHT] = 	motor_mixer.input_power - motor_mixer.input_angle[axe_eROLL] - motor_mixer.input_angle[axe_ePITCH] + motor_mixer.input_angle[axe_eYAW];
 8001b0e:	4b22      	ldr	r3, [pc, #136]	; (8001b98 <MOTOR_MIXER_Process+0xb8>)
 8001b10:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b14:	4b20      	ldr	r3, [pc, #128]	; (8001b98 <MOTOR_MIXER_Process+0xb8>)
 8001b16:	edd3 7a00 	vldr	s15, [r3]
 8001b1a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b1e:	4b1e      	ldr	r3, [pc, #120]	; (8001b98 <MOTOR_MIXER_Process+0xb8>)
 8001b20:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b24:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b28:	4b1b      	ldr	r3, [pc, #108]	; (8001b98 <MOTOR_MIXER_Process+0xb8>)
 8001b2a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b32:	4b19      	ldr	r3, [pc, #100]	; (8001b98 <MOTOR_MIXER_Process+0xb8>)
 8001b34:	edc3 7a05 	vstr	s15, [r3, #20]
	motor_mixer.output[motor_eBACK_RIGHT] = 	motor_mixer.input_power - motor_mixer.input_angle[axe_eROLL] + motor_mixer.input_angle[axe_ePITCH] - motor_mixer.input_angle[axe_eYAW];
 8001b38:	4b17      	ldr	r3, [pc, #92]	; (8001b98 <MOTOR_MIXER_Process+0xb8>)
 8001b3a:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b3e:	4b16      	ldr	r3, [pc, #88]	; (8001b98 <MOTOR_MIXER_Process+0xb8>)
 8001b40:	edd3 7a00 	vldr	s15, [r3]
 8001b44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b48:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <MOTOR_MIXER_Process+0xb8>)
 8001b4a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b52:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <MOTOR_MIXER_Process+0xb8>)
 8001b54:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b5c:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <MOTOR_MIXER_Process+0xb8>)
 8001b5e:	edc3 7a04 	vstr	s15, [r3, #16]
	motor_mixer.output[motor_eBACK_LEFT] = 		motor_mixer.input_power + motor_mixer.input_angle[axe_eROLL] + motor_mixer.input_angle[axe_ePITCH] + motor_mixer.input_angle[axe_eYAW];
 8001b62:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <MOTOR_MIXER_Process+0xb8>)
 8001b64:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b68:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <MOTOR_MIXER_Process+0xb8>)
 8001b6a:	edd3 7a00 	vldr	s15, [r3]
 8001b6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b72:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <MOTOR_MIXER_Process+0xb8>)
 8001b74:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b7c:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <MOTOR_MIXER_Process+0xb8>)
 8001b7e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b86:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <MOTOR_MIXER_Process+0xb8>)
 8001b88:	edc3 7a06 	vstr	s15, [r3, #24]

	MOTOR_Set(motor_mixer.output);
 8001b8c:	4803      	ldr	r0, [pc, #12]	; (8001b9c <MOTOR_MIXER_Process+0xbc>)
 8001b8e:	f000 f863 	bl	8001c58 <MOTOR_Set>
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	2000037c 	.word	0x2000037c
 8001b9c:	2000038c 	.word	0x2000038c

08001ba0 <MOTOR_MIXER_Get_Angle_Input_Ptr>:
float * MOTOR_MIXER_Get_Angle_Input_Ptr(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
	return motor_mixer.input_angle;
 8001ba4:	4b02      	ldr	r3, [pc, #8]	; (8001bb0 <MOTOR_MIXER_Get_Angle_Input_Ptr+0x10>)
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	2000037c 	.word	0x2000037c

08001bb4 <MOTOR_MIXER_Get_Power_Input_Ptr>:
float * MOTOR_MIXER_Get_Power_Input_Ptr(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
	return &motor_mixer.input_power;
 8001bb8:	4b02      	ldr	r3, [pc, #8]	; (8001bc4 <MOTOR_MIXER_Get_Power_Input_Ptr+0x10>)
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	20000388 	.word	0x20000388

08001bc8 <MOTOR_Init>:
static bool_e flag_stop = FALSE;



void MOTOR_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
	 TIMER_Start_All_Channels(TIMER_MOTOR);
 8001bcc:	2000      	movs	r0, #0
 8001bce:	f000 fa53 	bl	8002078 <TIMER_Start_All_Channels>
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <MOTOR_Process>:

void MOTOR_Process(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
	if(flag_stop)
 8001bdc:	4b1a      	ldr	r3, [pc, #104]	; (8001c48 <MOTOR_Process+0x70>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d009      	beq.n	8001bf8 <MOTOR_Process+0x20>
	{
		/* Clear flag */
		flag_stop = FALSE;
 8001be4:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <MOTOR_Process+0x70>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
		/* Stop pwm on every channel */
		TIMER_Stop_All_Channels(TIMER_MOTOR);
 8001bea:	2000      	movs	r0, #0
 8001bec:	f000 fa70 	bl	80020d0 <TIMER_Stop_All_Channels>
		motor.is_enabled = FALSE;
 8001bf0:	4b16      	ldr	r3, [pc, #88]	; (8001c4c <MOTOR_Process+0x74>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	701a      	strb	r2, [r3, #0]
 8001bf6:	e01c      	b.n	8001c32 <MOTOR_Process+0x5a>
	}
	else if(flag_start)
 8001bf8:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <MOTOR_Process+0x78>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d018      	beq.n	8001c32 <MOTOR_Process+0x5a>
	{
		/* Clear flag */
		flag_start = FALSE;
 8001c00:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <MOTOR_Process+0x78>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	701a      	strb	r2, [r3, #0]
		/* Reset target to 0 */
		motor.output[0] = 1000;
 8001c06:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <MOTOR_Process+0x74>)
 8001c08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c0c:	805a      	strh	r2, [r3, #2]
		motor.output[1] = 1000;
 8001c0e:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <MOTOR_Process+0x74>)
 8001c10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c14:	809a      	strh	r2, [r3, #4]
		motor.output[2] = 1000;
 8001c16:	4b0d      	ldr	r3, [pc, #52]	; (8001c4c <MOTOR_Process+0x74>)
 8001c18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c1c:	80da      	strh	r2, [r3, #6]
		motor.output[3] = 1000;
 8001c1e:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <MOTOR_Process+0x74>)
 8001c20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c24:	811a      	strh	r2, [r3, #8]
		/* Start the pwm */
		TIMER_Start_All_Channels(TIMER_MOTOR);
 8001c26:	2000      	movs	r0, #0
 8001c28:	f000 fa26 	bl	8002078 <TIMER_Start_All_Channels>
		motor.is_enabled = TRUE;
 8001c2c:	4b07      	ldr	r3, [pc, #28]	; (8001c4c <MOTOR_Process+0x74>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	701a      	strb	r2, [r3, #0]
	}
	if(motor.is_enabled)
 8001c32:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <MOTOR_Process+0x74>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <MOTOR_Process+0x6a>
	{
		TIMER_Set_All_CCR(TIMER_MOTOR, motor.output);
 8001c3a:	4906      	ldr	r1, [pc, #24]	; (8001c54 <MOTOR_Process+0x7c>)
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	f000 fa73 	bl	8002128 <TIMER_Set_All_CCR>
	}
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	200003a6 	.word	0x200003a6
 8001c4c:	2000039c 	.word	0x2000039c
 8001c50:	20000099 	.word	0x20000099
 8001c54:	2000039e 	.word	0x2000039e

08001c58 <MOTOR_Set>:
/*
 * @brief update motor target values
 * @param array of new float values
 */
void MOTOR_Set(float * target)
{
 8001c58:	b590      	push	{r4, r7, lr}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
	target[0] = (uint16_t)MAX(target[0], 0);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	edd3 7a00 	vldr	s15, [r3]
 8001c66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6e:	dd0c      	ble.n	8001c8a <MOTOR_Set+0x32>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	edd3 7a00 	vldr	s15, [r3]
 8001c76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c7a:	ee17 3a90 	vmov	r3, s15
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	ee07 3a90 	vmov	s15, r3
 8001c84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c88:	e001      	b.n	8001c8e <MOTOR_Set+0x36>
 8001c8a:	eddf 7aac 	vldr	s15, [pc, #688]	; 8001f3c <MOTOR_Set+0x2e4>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	edc3 7a00 	vstr	s15, [r3]
	target[1] = (uint16_t)MAX(target[1], 0);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3304      	adds	r3, #4
 8001c98:	edd3 7a00 	vldr	s15, [r3]
 8001c9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca4:	dd0d      	ble.n	8001cc2 <MOTOR_Set+0x6a>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	edd3 7a00 	vldr	s15, [r3]
 8001cae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cb2:	ee17 3a90 	vmov	r3, s15
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	ee07 3a90 	vmov	s15, r3
 8001cbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cc0:	e001      	b.n	8001cc6 <MOTOR_Set+0x6e>
 8001cc2:	eddf 7a9e 	vldr	s15, [pc, #632]	; 8001f3c <MOTOR_Set+0x2e4>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	3304      	adds	r3, #4
 8001cca:	edc3 7a00 	vstr	s15, [r3]
	target[2] = (uint16_t)MAX(target[2], 0);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3308      	adds	r3, #8
 8001cd2:	edd3 7a00 	vldr	s15, [r3]
 8001cd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cde:	dd0d      	ble.n	8001cfc <MOTOR_Set+0xa4>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3308      	adds	r3, #8
 8001ce4:	edd3 7a00 	vldr	s15, [r3]
 8001ce8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cec:	ee17 3a90 	vmov	r3, s15
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	ee07 3a90 	vmov	s15, r3
 8001cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cfa:	e001      	b.n	8001d00 <MOTOR_Set+0xa8>
 8001cfc:	eddf 7a8f 	vldr	s15, [pc, #572]	; 8001f3c <MOTOR_Set+0x2e4>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3308      	adds	r3, #8
 8001d04:	edc3 7a00 	vstr	s15, [r3]
	target[3] = (uint16_t)MAX(target[3], 0);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	330c      	adds	r3, #12
 8001d0c:	edd3 7a00 	vldr	s15, [r3]
 8001d10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d18:	dd0d      	ble.n	8001d36 <MOTOR_Set+0xde>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	330c      	adds	r3, #12
 8001d1e:	edd3 7a00 	vldr	s15, [r3]
 8001d22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d26:	ee17 3a90 	vmov	r3, s15
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	ee07 3a90 	vmov	s15, r3
 8001d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d34:	e001      	b.n	8001d3a <MOTOR_Set+0xe2>
 8001d36:	eddf 7a81 	vldr	s15, [pc, #516]	; 8001f3c <MOTOR_Set+0x2e4>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	330c      	adds	r3, #12
 8001d3e:	edc3 7a00 	vstr	s15, [r3]

	target[0] = (uint16_t)MIN(target[0], MOTOR_SIGNAL_MAX);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	edd3 7a00 	vldr	s15, [r3]
 8001d48:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8001f40 <MOTOR_Set+0x2e8>
 8001d4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d54:	dd02      	ble.n	8001d5c <MOTOR_Set+0x104>
 8001d56:	eddf 7a7a 	vldr	s15, [pc, #488]	; 8001f40 <MOTOR_Set+0x2e8>
 8001d5a:	e00b      	b.n	8001d74 <MOTOR_Set+0x11c>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	edd3 7a00 	vldr	s15, [r3]
 8001d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d66:	ee17 3a90 	vmov	r3, s15
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	ee07 3a90 	vmov	s15, r3
 8001d70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	edc3 7a00 	vstr	s15, [r3]
	target[1] = (uint16_t)MIN(target[1], MOTOR_SIGNAL_MAX);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	edd3 7a00 	vldr	s15, [r3]
 8001d82:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8001f40 <MOTOR_Set+0x2e8>
 8001d86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8e:	dd02      	ble.n	8001d96 <MOTOR_Set+0x13e>
 8001d90:	eddf 7a6b 	vldr	s15, [pc, #428]	; 8001f40 <MOTOR_Set+0x2e8>
 8001d94:	e00c      	b.n	8001db0 <MOTOR_Set+0x158>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	3304      	adds	r3, #4
 8001d9a:	edd3 7a00 	vldr	s15, [r3]
 8001d9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001da2:	ee17 3a90 	vmov	r3, s15
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	ee07 3a90 	vmov	s15, r3
 8001dac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3304      	adds	r3, #4
 8001db4:	edc3 7a00 	vstr	s15, [r3]
	target[2] = (uint16_t)MIN(target[2], MOTOR_SIGNAL_MAX);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3308      	adds	r3, #8
 8001dbc:	edd3 7a00 	vldr	s15, [r3]
 8001dc0:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001f40 <MOTOR_Set+0x2e8>
 8001dc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dcc:	dd02      	ble.n	8001dd4 <MOTOR_Set+0x17c>
 8001dce:	eddf 7a5c 	vldr	s15, [pc, #368]	; 8001f40 <MOTOR_Set+0x2e8>
 8001dd2:	e00c      	b.n	8001dee <MOTOR_Set+0x196>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3308      	adds	r3, #8
 8001dd8:	edd3 7a00 	vldr	s15, [r3]
 8001ddc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001de0:	ee17 3a90 	vmov	r3, s15
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	ee07 3a90 	vmov	s15, r3
 8001dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	3308      	adds	r3, #8
 8001df2:	edc3 7a00 	vstr	s15, [r3]
	target[3] = (uint16_t)MIN(target[3], MOTOR_SIGNAL_MAX);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	330c      	adds	r3, #12
 8001dfa:	edd3 7a00 	vldr	s15, [r3]
 8001dfe:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8001f40 <MOTOR_Set+0x2e8>
 8001e02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0a:	dd02      	ble.n	8001e12 <MOTOR_Set+0x1ba>
 8001e0c:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8001f40 <MOTOR_Set+0x2e8>
 8001e10:	e00c      	b.n	8001e2c <MOTOR_Set+0x1d4>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	330c      	adds	r3, #12
 8001e16:	edd3 7a00 	vldr	s15, [r3]
 8001e1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e1e:	ee17 3a90 	vmov	r3, s15
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	ee07 3a90 	vmov	s15, r3
 8001e28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	330c      	adds	r3, #12
 8001e30:	edc3 7a00 	vstr	s15, [r3]

	target[0] = sqrtf(1000*target[0]);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	edd3 7a00 	vldr	s15, [r3]
 8001e3a:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001f44 <MOTOR_Set+0x2ec>
 8001e3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e42:	eeb0 0a67 	vmov.f32	s0, s15
 8001e46:	f008 fdb7 	bl	800a9b8 <sqrtf>
 8001e4a:	eef0 7a40 	vmov.f32	s15, s0
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	edc3 7a00 	vstr	s15, [r3]
	target[1] = sqrtf(1000*target[1]);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3304      	adds	r3, #4
 8001e58:	edd3 7a00 	vldr	s15, [r3]
 8001e5c:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001f44 <MOTOR_Set+0x2ec>
 8001e60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	1d1c      	adds	r4, r3, #4
 8001e68:	eeb0 0a67 	vmov.f32	s0, s15
 8001e6c:	f008 fda4 	bl	800a9b8 <sqrtf>
 8001e70:	eef0 7a40 	vmov.f32	s15, s0
 8001e74:	edc4 7a00 	vstr	s15, [r4]
	target[2] = sqrtf(1000*target[2]);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3308      	adds	r3, #8
 8001e7c:	edd3 7a00 	vldr	s15, [r3]
 8001e80:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001f44 <MOTOR_Set+0x2ec>
 8001e84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f103 0408 	add.w	r4, r3, #8
 8001e8e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e92:	f008 fd91 	bl	800a9b8 <sqrtf>
 8001e96:	eef0 7a40 	vmov.f32	s15, s0
 8001e9a:	edc4 7a00 	vstr	s15, [r4]
	target[3] = sqrtf(1000*target[3]);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	330c      	adds	r3, #12
 8001ea2:	edd3 7a00 	vldr	s15, [r3]
 8001ea6:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001f44 <MOTOR_Set+0x2ec>
 8001eaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f103 040c 	add.w	r4, r3, #12
 8001eb4:	eeb0 0a67 	vmov.f32	s0, s15
 8001eb8:	f008 fd7e 	bl	800a9b8 <sqrtf>
 8001ebc:	eef0 7a40 	vmov.f32	s15, s0
 8001ec0:	edc4 7a00 	vstr	s15, [r4]

	motor.output[0] = (uint16_t)target[0]+999;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	edd3 7a00 	vldr	s15, [r3]
 8001eca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ece:	ee17 3a90 	vmov	r3, s15
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	4b1b      	ldr	r3, [pc, #108]	; (8001f48 <MOTOR_Set+0x2f0>)
 8001edc:	805a      	strh	r2, [r3, #2]
	motor.output[1] = (uint16_t)target[1]+999;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	edd3 7a00 	vldr	s15, [r3]
 8001ee6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eea:	ee17 3a90 	vmov	r3, s15
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <MOTOR_Set+0x2f0>)
 8001ef8:	809a      	strh	r2, [r3, #4]
	motor.output[2] = (uint16_t)target[2]+999;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3308      	adds	r3, #8
 8001efe:	edd3 7a00 	vldr	s15, [r3]
 8001f02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f06:	ee17 3a90 	vmov	r3, s15
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	4b0d      	ldr	r3, [pc, #52]	; (8001f48 <MOTOR_Set+0x2f0>)
 8001f14:	80da      	strh	r2, [r3, #6]
	motor.output[3] = (uint16_t)target[3]+999;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	330c      	adds	r3, #12
 8001f1a:	edd3 7a00 	vldr	s15, [r3]
 8001f1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f22:	ee17 3a90 	vmov	r3, s15
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <MOTOR_Set+0x2f0>)
 8001f30:	811a      	strh	r2, [r3, #8]
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd90      	pop	{r4, r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	00000000 	.word	0x00000000
 8001f40:	442f0000 	.word	0x442f0000
 8001f44:	447a0000 	.word	0x447a0000
 8001f48:	2000039c 	.word	0x2000039c

08001f4c <GPIO_Write_Pin>:
 * @param GPIOx pointer to an hal gpio handler structure
 * @param GPIO_Pin Number of the pin
 * @param state State to write to the pin
 */
void GPIO_Write_Pin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_state_e state)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	807b      	strh	r3, [r7, #2]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	707b      	strb	r3, [r7, #1]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, state);
 8001f5c:	787a      	ldrb	r2, [r7, #1]
 8001f5e:	887b      	ldrh	r3, [r7, #2]
 8001f60:	4619      	mov	r1, r3
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f002 ff8c 	bl	8004e80 <HAL_GPIO_WritePin>
}
 8001f68:	bf00      	nop
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <I2C_Mem_Write>:

void I2C_Init(void)
{
}
HAL_StatusTypeDef I2C_Mem_Write(i2c_e i2c_id, uint8_t device_address, uint8_t mem_address, uint8_t * data, uint8_t size)
{
 8001f70:	b590      	push	{r4, r7, lr}
 8001f72:	b087      	sub	sp, #28
 8001f74:	af04      	add	r7, sp, #16
 8001f76:	603b      	str	r3, [r7, #0]
 8001f78:	4603      	mov	r3, r0
 8001f7a:	71fb      	strb	r3, [r7, #7]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	71bb      	strb	r3, [r7, #6]
 8001f80:	4613      	mov	r3, r2
 8001f82:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Write(i2c[i2c_id].hi2c, device_address, mem_address, I2C_MEMADD_SIZE_8BIT, data, size, I2C_OPERATION_TIMEOUT);
 8001f84:	79fb      	ldrb	r3, [r7, #7]
 8001f86:	4a0b      	ldr	r2, [pc, #44]	; (8001fb4 <I2C_Mem_Write+0x44>)
 8001f88:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001f8c:	79bb      	ldrb	r3, [r7, #6]
 8001f8e:	b299      	uxth	r1, r3
 8001f90:	797b      	ldrb	r3, [r7, #5]
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	7e3b      	ldrb	r3, [r7, #24]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	240a      	movs	r4, #10
 8001f9a:	9402      	str	r4, [sp, #8]
 8001f9c:	9301      	str	r3, [sp, #4]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	f003 f8ca 	bl	800513c <HAL_I2C_Mem_Write>
 8001fa8:	4603      	mov	r3, r0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd90      	pop	{r4, r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	2000009c 	.word	0x2000009c

08001fb8 <I2C_Mem_Read>:

HAL_StatusTypeDef I2C_Mem_Read(i2c_e i2c_id, uint8_t device_address, uint8_t mem_address, uint8_t * data, uint8_t size)
{
 8001fb8:	b590      	push	{r4, r7, lr}
 8001fba:	b087      	sub	sp, #28
 8001fbc:	af04      	add	r7, sp, #16
 8001fbe:	603b      	str	r3, [r7, #0]
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	71fb      	strb	r3, [r7, #7]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	71bb      	strb	r3, [r7, #6]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Read(i2c[i2c_id].hi2c, device_address, mem_address, I2C_MEMADD_SIZE_8BIT, data, size, I2C_OPERATION_TIMEOUT);
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	4a0b      	ldr	r2, [pc, #44]	; (8001ffc <I2C_Mem_Read+0x44>)
 8001fd0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001fd4:	79bb      	ldrb	r3, [r7, #6]
 8001fd6:	b299      	uxth	r1, r3
 8001fd8:	797b      	ldrb	r3, [r7, #5]
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	7e3b      	ldrb	r3, [r7, #24]
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	240a      	movs	r4, #10
 8001fe2:	9402      	str	r4, [sp, #8]
 8001fe4:	9301      	str	r3, [sp, #4]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	2301      	movs	r3, #1
 8001fec:	f003 f9a0 	bl	8005330 <HAL_I2C_Mem_Read>
 8001ff0:	4603      	mov	r3, r0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd90      	pop	{r4, r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	2000009c 	.word	0x2000009c

08002000 <I2C_Mem_Read_Dma>:

HAL_StatusTypeDef I2C_Mem_Read_Dma(i2c_e i2c_id, uint8_t device_address, uint8_t mem_address, uint8_t * data, uint8_t size)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af02      	add	r7, sp, #8
 8002006:	603b      	str	r3, [r7, #0]
 8002008:	4603      	mov	r3, r0
 800200a:	71fb      	strb	r3, [r7, #7]
 800200c:	460b      	mov	r3, r1
 800200e:	71bb      	strb	r3, [r7, #6]
 8002010:	4613      	mov	r3, r2
 8002012:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Read_DMA(i2c[i2c_id].hi2c, device_address, mem_address, I2C_MEMADD_SIZE_8BIT, data, size);
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	4a0a      	ldr	r2, [pc, #40]	; (8002040 <I2C_Mem_Read_Dma+0x40>)
 8002018:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800201c:	79bb      	ldrb	r3, [r7, #6]
 800201e:	b299      	uxth	r1, r3
 8002020:	797b      	ldrb	r3, [r7, #5]
 8002022:	b29a      	uxth	r2, r3
 8002024:	7c3b      	ldrb	r3, [r7, #16]
 8002026:	b29b      	uxth	r3, r3
 8002028:	9301      	str	r3, [sp, #4]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	2301      	movs	r3, #1
 8002030:	f003 fba4 	bl	800577c <HAL_I2C_Mem_Read_DMA>
 8002034:	4603      	mov	r3, r0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	2000009c 	.word	0x2000009c

08002044 <I2C_Is_Device_Ready>:

HAL_StatusTypeDef I2C_Is_Device_Ready(i2c_e i2c_id, uint8_t device_address)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	460a      	mov	r2, r1
 800204e:	71fb      	strb	r3, [r7, #7]
 8002050:	4613      	mov	r3, r2
 8002052:	71bb      	strb	r3, [r7, #6]
	return HAL_I2C_IsDeviceReady(i2c[i2c_id].hi2c, device_address, 10, 10);
 8002054:	79fb      	ldrb	r3, [r7, #7]
 8002056:	4a07      	ldr	r2, [pc, #28]	; (8002074 <I2C_Is_Device_Ready+0x30>)
 8002058:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800205c:	79bb      	ldrb	r3, [r7, #6]
 800205e:	b299      	uxth	r1, r3
 8002060:	230a      	movs	r3, #10
 8002062:	220a      	movs	r2, #10
 8002064:	f003 fd1e 	bl	8005aa4 <HAL_I2C_IsDeviceReady>
 8002068:	4603      	mov	r3, r0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	2000009c 	.word	0x2000009c

08002078 <TIMER_Start_All_Channels>:
/*
 * @brief Start all channels of a timer
 * @param timer_id id of the timer
 */
void TIMER_Start_All_Channels(timer_e timer_id)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]
	HAL_TIM_PWM_Start(timer[timer_id].htim, TIM_CHANNEL_1);
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	4a11      	ldr	r2, [pc, #68]	; (80020cc <TIMER_Start_All_Channels+0x54>)
 8002086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800208a:	2100      	movs	r1, #0
 800208c:	4618      	mov	r0, r3
 800208e:	f006 fc5b 	bl	8008948 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer[timer_id].htim, TIM_CHANNEL_2);
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	4a0d      	ldr	r2, [pc, #52]	; (80020cc <TIMER_Start_All_Channels+0x54>)
 8002096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800209a:	2104      	movs	r1, #4
 800209c:	4618      	mov	r0, r3
 800209e:	f006 fc53 	bl	8008948 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer[timer_id].htim, TIM_CHANNEL_3);
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	4a09      	ldr	r2, [pc, #36]	; (80020cc <TIMER_Start_All_Channels+0x54>)
 80020a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020aa:	2108      	movs	r1, #8
 80020ac:	4618      	mov	r0, r3
 80020ae:	f006 fc4b 	bl	8008948 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer[timer_id].htim, TIM_CHANNEL_4);
 80020b2:	79fb      	ldrb	r3, [r7, #7]
 80020b4:	4a05      	ldr	r2, [pc, #20]	; (80020cc <TIMER_Start_All_Channels+0x54>)
 80020b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ba:	210c      	movs	r1, #12
 80020bc:	4618      	mov	r0, r3
 80020be:	f006 fc43 	bl	8008948 <HAL_TIM_PWM_Start>
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	200000a0 	.word	0x200000a0

080020d0 <TIMER_Stop_All_Channels>:
/*
 * @brief Stop all channels of a timer
 * @param timer_id id of the timer
 */
void TIMER_Stop_All_Channels(timer_e timer_id)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
	HAL_TIM_PWM_Stop(timer[timer_id].htim, TIM_CHANNEL_1);
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	4a11      	ldr	r2, [pc, #68]	; (8002124 <TIMER_Stop_All_Channels+0x54>)
 80020de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e2:	2100      	movs	r1, #0
 80020e4:	4618      	mov	r0, r3
 80020e6:	f006 fcf7 	bl	8008ad8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(timer[timer_id].htim, TIM_CHANNEL_2);
 80020ea:	79fb      	ldrb	r3, [r7, #7]
 80020ec:	4a0d      	ldr	r2, [pc, #52]	; (8002124 <TIMER_Stop_All_Channels+0x54>)
 80020ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f2:	2104      	movs	r1, #4
 80020f4:	4618      	mov	r0, r3
 80020f6:	f006 fcef 	bl	8008ad8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(timer[timer_id].htim, TIM_CHANNEL_3);
 80020fa:	79fb      	ldrb	r3, [r7, #7]
 80020fc:	4a09      	ldr	r2, [pc, #36]	; (8002124 <TIMER_Stop_All_Channels+0x54>)
 80020fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002102:	2108      	movs	r1, #8
 8002104:	4618      	mov	r0, r3
 8002106:	f006 fce7 	bl	8008ad8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(timer[timer_id].htim, TIM_CHANNEL_4);
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	4a05      	ldr	r2, [pc, #20]	; (8002124 <TIMER_Stop_All_Channels+0x54>)
 800210e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002112:	210c      	movs	r1, #12
 8002114:	4618      	mov	r0, r3
 8002116:	f006 fcdf 	bl	8008ad8 <HAL_TIM_PWM_Stop>
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	200000a0 	.word	0x200000a0

08002128 <TIMER_Set_All_CCR>:
 * @brief Set new capture compare values
 * @param tiemr_id The timer to use
 * @param values The new values
 */
void TIMER_Set_All_CCR(timer_e timer_id, uint16_t * values)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	6039      	str	r1, [r7, #0]
 8002132:	71fb      	strb	r3, [r7, #7]
	timer[timer_id].htim->Instance->CCR1 = values[0];
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	8819      	ldrh	r1, [r3, #0]
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	4a15      	ldr	r2, [pc, #84]	; (8002190 <TIMER_Set_All_CCR+0x68>)
 800213c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	460a      	mov	r2, r1
 8002144:	635a      	str	r2, [r3, #52]	; 0x34
	timer[timer_id].htim->Instance->CCR2 = values[1];
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	3302      	adds	r3, #2
 800214a:	8819      	ldrh	r1, [r3, #0]
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	4a10      	ldr	r2, [pc, #64]	; (8002190 <TIMER_Set_All_CCR+0x68>)
 8002150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	460a      	mov	r2, r1
 8002158:	639a      	str	r2, [r3, #56]	; 0x38
	timer[timer_id].htim->Instance->CCR3 = values[2];
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	3304      	adds	r3, #4
 800215e:	8819      	ldrh	r1, [r3, #0]
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	4a0b      	ldr	r2, [pc, #44]	; (8002190 <TIMER_Set_All_CCR+0x68>)
 8002164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	460a      	mov	r2, r1
 800216c:	63da      	str	r2, [r3, #60]	; 0x3c
	timer[timer_id].htim->Instance->CCR4 = values[3];
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	3306      	adds	r3, #6
 8002172:	8819      	ldrh	r1, [r3, #0]
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	4a06      	ldr	r2, [pc, #24]	; (8002190 <TIMER_Set_All_CCR+0x68>)
 8002178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	460a      	mov	r2, r1
 8002180:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	200000a0 	.word	0x200000a0

08002194 <UART_Idle_Line_Callback>:
/* -------------------------- Public callback functions -------------------------- */
/*
 * @brief Update the read index when the idle flag is raised
 */
void UART_Idle_Line_Callback(uart_e id)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	71fb      	strb	r3, [r7, #7]
	if(__HAL_UART_GET_FLAG(uart[id].huart, UART_FLAG_IDLE))
 800219e:	79fa      	ldrb	r2, [r7, #7]
 80021a0:	4922      	ldr	r1, [pc, #136]	; (800222c <UART_Idle_Line_Callback+0x98>)
 80021a2:	4613      	mov	r3, r2
 80021a4:	01db      	lsls	r3, r3, #7
 80021a6:	4413      	add	r3, r2
 80021a8:	011b      	lsls	r3, r3, #4
 80021aa:	440b      	add	r3, r1
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0310 	and.w	r3, r3, #16
 80021b6:	2b10      	cmp	r3, #16
 80021b8:	d132      	bne.n	8002220 <UART_Idle_Line_Callback+0x8c>
	{
		uart[id].index_write_rx = LEN_BUFFER - uart[id].huart->hdmarx->Instance->NDTR ;
 80021ba:	79fa      	ldrb	r2, [r7, #7]
 80021bc:	491b      	ldr	r1, [pc, #108]	; (800222c <UART_Idle_Line_Callback+0x98>)
 80021be:	4613      	mov	r3, r2
 80021c0:	01db      	lsls	r3, r3, #7
 80021c2:	4413      	add	r3, r2
 80021c4:	011b      	lsls	r3, r3, #4
 80021c6:	440b      	add	r3, r1
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	79fa      	ldrb	r2, [r7, #7]
 80021d4:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80021d8:	b298      	uxth	r0, r3
 80021da:	4914      	ldr	r1, [pc, #80]	; (800222c <UART_Idle_Line_Callback+0x98>)
 80021dc:	4613      	mov	r3, r2
 80021de:	01db      	lsls	r3, r3, #7
 80021e0:	4413      	add	r3, r2
 80021e2:	011b      	lsls	r3, r3, #4
 80021e4:	440b      	add	r3, r1
 80021e6:	f603 030a 	addw	r3, r3, #2058	; 0x80a
 80021ea:	4602      	mov	r2, r0
 80021ec:	801a      	strh	r2, [r3, #0]
	  __HAL_UART_CLEAR_IDLEFLAG(uart[id].huart);
 80021ee:	2300      	movs	r3, #0
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	79fa      	ldrb	r2, [r7, #7]
 80021f4:	490d      	ldr	r1, [pc, #52]	; (800222c <UART_Idle_Line_Callback+0x98>)
 80021f6:	4613      	mov	r3, r2
 80021f8:	01db      	lsls	r3, r3, #7
 80021fa:	4413      	add	r3, r2
 80021fc:	011b      	lsls	r3, r3, #4
 80021fe:	440b      	add	r3, r1
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	79fa      	ldrb	r2, [r7, #7]
 800220a:	4908      	ldr	r1, [pc, #32]	; (800222c <UART_Idle_Line_Callback+0x98>)
 800220c:	4613      	mov	r3, r2
 800220e:	01db      	lsls	r3, r3, #7
 8002210:	4413      	add	r3, r2
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	440b      	add	r3, r1
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	68fb      	ldr	r3, [r7, #12]
	}
}
 8002220:	bf00      	nop
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	200003a8 	.word	0x200003a8

08002230 <UART_Transfer_Complete_Callback>:

/*
 * @brief Re start the dma transfer if there is data to send or reset the transmission state to idle
 */
void UART_Transfer_Complete_Callback(uart_e id)
{
 8002230:	b590      	push	{r4, r7, lr}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	71fb      	strb	r3, [r7, #7]
	if(uart[id].index_write_tx != uart[id].index_read_tx)
 800223a:	79fa      	ldrb	r2, [r7, #7]
 800223c:	494d      	ldr	r1, [pc, #308]	; (8002374 <UART_Transfer_Complete_Callback+0x144>)
 800223e:	4613      	mov	r3, r2
 8002240:	01db      	lsls	r3, r3, #7
 8002242:	4413      	add	r3, r2
 8002244:	011b      	lsls	r3, r3, #4
 8002246:	440b      	add	r3, r1
 8002248:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800224c:	8819      	ldrh	r1, [r3, #0]
 800224e:	79fa      	ldrb	r2, [r7, #7]
 8002250:	4848      	ldr	r0, [pc, #288]	; (8002374 <UART_Transfer_Complete_Callback+0x144>)
 8002252:	4613      	mov	r3, r2
 8002254:	01db      	lsls	r3, r3, #7
 8002256:	4413      	add	r3, r2
 8002258:	011b      	lsls	r3, r3, #4
 800225a:	4403      	add	r3, r0
 800225c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	4299      	cmp	r1, r3
 8002264:	d077      	beq.n	8002356 <UART_Transfer_Complete_Callback+0x126>
	{
		uint16_t nb_bytes_to_read = 0;
 8002266:	2300      	movs	r3, #0
 8002268:	81fb      	strh	r3, [r7, #14]
		if(uart[id].index_write_tx > uart[id].index_read_tx)
 800226a:	79fa      	ldrb	r2, [r7, #7]
 800226c:	4941      	ldr	r1, [pc, #260]	; (8002374 <UART_Transfer_Complete_Callback+0x144>)
 800226e:	4613      	mov	r3, r2
 8002270:	01db      	lsls	r3, r3, #7
 8002272:	4413      	add	r3, r2
 8002274:	011b      	lsls	r3, r3, #4
 8002276:	440b      	add	r3, r1
 8002278:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800227c:	8819      	ldrh	r1, [r3, #0]
 800227e:	79fa      	ldrb	r2, [r7, #7]
 8002280:	483c      	ldr	r0, [pc, #240]	; (8002374 <UART_Transfer_Complete_Callback+0x144>)
 8002282:	4613      	mov	r3, r2
 8002284:	01db      	lsls	r3, r3, #7
 8002286:	4413      	add	r3, r2
 8002288:	011b      	lsls	r3, r3, #4
 800228a:	4403      	add	r3, r0
 800228c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002290:	881b      	ldrh	r3, [r3, #0]
 8002292:	4299      	cmp	r1, r3
 8002294:	d916      	bls.n	80022c4 <UART_Transfer_Complete_Callback+0x94>
		{
			nb_bytes_to_read = uart[id].index_write_tx - uart[id].index_read_tx;
 8002296:	79fa      	ldrb	r2, [r7, #7]
 8002298:	4936      	ldr	r1, [pc, #216]	; (8002374 <UART_Transfer_Complete_Callback+0x144>)
 800229a:	4613      	mov	r3, r2
 800229c:	01db      	lsls	r3, r3, #7
 800229e:	4413      	add	r3, r2
 80022a0:	011b      	lsls	r3, r3, #4
 80022a2:	440b      	add	r3, r1
 80022a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80022a8:	8819      	ldrh	r1, [r3, #0]
 80022aa:	79fa      	ldrb	r2, [r7, #7]
 80022ac:	4831      	ldr	r0, [pc, #196]	; (8002374 <UART_Transfer_Complete_Callback+0x144>)
 80022ae:	4613      	mov	r3, r2
 80022b0:	01db      	lsls	r3, r3, #7
 80022b2:	4413      	add	r3, r2
 80022b4:	011b      	lsls	r3, r3, #4
 80022b6:	4403      	add	r3, r0
 80022b8:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	1acb      	subs	r3, r1, r3
 80022c0:	81fb      	strh	r3, [r7, #14]
 80022c2:	e00c      	b.n	80022de <UART_Transfer_Complete_Callback+0xae>
		}
		else
		{
			nb_bytes_to_read = LEN_BUFFER - uart[id].index_read_tx;
 80022c4:	79fa      	ldrb	r2, [r7, #7]
 80022c6:	492b      	ldr	r1, [pc, #172]	; (8002374 <UART_Transfer_Complete_Callback+0x144>)
 80022c8:	4613      	mov	r3, r2
 80022ca:	01db      	lsls	r3, r3, #7
 80022cc:	4413      	add	r3, r2
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	440b      	add	r3, r1
 80022d2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80022d6:	881b      	ldrh	r3, [r3, #0]
 80022d8:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80022dc:	81fb      	strh	r3, [r7, #14]
		}
		HAL_UART_Transmit_DMA(uart[id].huart, &uart[id].buffer_tx[uart[id].index_read_tx], nb_bytes_to_read);
 80022de:	79fa      	ldrb	r2, [r7, #7]
 80022e0:	4924      	ldr	r1, [pc, #144]	; (8002374 <UART_Transfer_Complete_Callback+0x144>)
 80022e2:	4613      	mov	r3, r2
 80022e4:	01db      	lsls	r3, r3, #7
 80022e6:	4413      	add	r3, r2
 80022e8:	011b      	lsls	r3, r3, #4
 80022ea:	440b      	add	r3, r1
 80022ec:	6818      	ldr	r0, [r3, #0]
 80022ee:	79fa      	ldrb	r2, [r7, #7]
 80022f0:	79f9      	ldrb	r1, [r7, #7]
 80022f2:	4c20      	ldr	r4, [pc, #128]	; (8002374 <UART_Transfer_Complete_Callback+0x144>)
 80022f4:	460b      	mov	r3, r1
 80022f6:	01db      	lsls	r3, r3, #7
 80022f8:	440b      	add	r3, r1
 80022fa:	011b      	lsls	r3, r3, #4
 80022fc:	4423      	add	r3, r4
 80022fe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	4619      	mov	r1, r3
 8002306:	4613      	mov	r3, r2
 8002308:	01db      	lsls	r3, r3, #7
 800230a:	4413      	add	r3, r2
 800230c:	011b      	lsls	r3, r3, #4
 800230e:	440b      	add	r3, r1
 8002310:	4a18      	ldr	r2, [pc, #96]	; (8002374 <UART_Transfer_Complete_Callback+0x144>)
 8002312:	4413      	add	r3, r2
 8002314:	3306      	adds	r3, #6
 8002316:	89fa      	ldrh	r2, [r7, #14]
 8002318:	4619      	mov	r1, r3
 800231a:	f007 f9b1 	bl	8009680 <HAL_UART_Transmit_DMA>
		uart[id].index_read_tx = (uart[id].index_read_tx + nb_bytes_to_read) % LEN_BUFFER;
 800231e:	79fa      	ldrb	r2, [r7, #7]
 8002320:	4914      	ldr	r1, [pc, #80]	; (8002374 <UART_Transfer_Complete_Callback+0x144>)
 8002322:	4613      	mov	r3, r2
 8002324:	01db      	lsls	r3, r3, #7
 8002326:	4413      	add	r3, r2
 8002328:	011b      	lsls	r3, r3, #4
 800232a:	440b      	add	r3, r1
 800232c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002330:	881a      	ldrh	r2, [r3, #0]
 8002332:	89fb      	ldrh	r3, [r7, #14]
 8002334:	4413      	add	r3, r2
 8002336:	b29b      	uxth	r3, r3
 8002338:	79fa      	ldrb	r2, [r7, #7]
 800233a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800233e:	b298      	uxth	r0, r3
 8002340:	490c      	ldr	r1, [pc, #48]	; (8002374 <UART_Transfer_Complete_Callback+0x144>)
 8002342:	4613      	mov	r3, r2
 8002344:	01db      	lsls	r3, r3, #7
 8002346:	4413      	add	r3, r2
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	440b      	add	r3, r1
 800234c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002350:	4602      	mov	r2, r0
 8002352:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		uart[id].transmission_state = transmission_state_eIDLE;
	}
}
 8002354:	e009      	b.n	800236a <UART_Transfer_Complete_Callback+0x13a>
		uart[id].transmission_state = transmission_state_eIDLE;
 8002356:	79fa      	ldrb	r2, [r7, #7]
 8002358:	4906      	ldr	r1, [pc, #24]	; (8002374 <UART_Transfer_Complete_Callback+0x144>)
 800235a:	4613      	mov	r3, r2
 800235c:	01db      	lsls	r3, r3, #7
 800235e:	4413      	add	r3, r2
 8002360:	011b      	lsls	r3, r3, #4
 8002362:	440b      	add	r3, r1
 8002364:	3305      	adds	r3, #5
 8002366:	2200      	movs	r2, #0
 8002368:	701a      	strb	r2, [r3, #0]
}
 800236a:	bf00      	nop
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	bd90      	pop	{r4, r7, pc}
 8002372:	bf00      	nop
 8002374:	200003a8 	.word	0x200003a8

08002378 <UART_Availables>:
 * @brief Number of byte available in the RX buffer
 * @param id Id of the uart we are interested in
 * @return Number of bytes
 */
uint16_t UART_Availables(uart_e id)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	71fb      	strb	r3, [r7, #7]
	return get_nb_bytes_available(id);
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	4618      	mov	r0, r3
 8002386:	f000 f955 	bl	8002634 <get_nb_bytes_available>
 800238a:	4603      	mov	r3, r0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <UART_Get>:
 * 		  Does nothing if there are no characters available
 * @param id Id of the uart
 * @param c Buffer to write the character into
 */
void UART_Get(uart_e id, uint8_t * c)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	6039      	str	r1, [r7, #0]
 800239e:	71fb      	strb	r3, [r7, #7]
	if(get_nb_bytes_available(id))
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 f946 	bl	8002634 <get_nb_bytes_available>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d035      	beq.n	800241a <UART_Get+0x86>
	{
		*c = uart[id].buffer_rx[uart[id].index_read_rx];
 80023ae:	79fa      	ldrb	r2, [r7, #7]
 80023b0:	79f9      	ldrb	r1, [r7, #7]
 80023b2:	481c      	ldr	r0, [pc, #112]	; (8002424 <UART_Get+0x90>)
 80023b4:	460b      	mov	r3, r1
 80023b6:	01db      	lsls	r3, r3, #7
 80023b8:	440b      	add	r3, r1
 80023ba:	011b      	lsls	r3, r3, #4
 80023bc:	4403      	add	r3, r0
 80023be:	f603 030c 	addw	r3, r3, #2060	; 0x80c
 80023c2:	881b      	ldrh	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	4917      	ldr	r1, [pc, #92]	; (8002424 <UART_Get+0x90>)
 80023c8:	4613      	mov	r3, r2
 80023ca:	01db      	lsls	r3, r3, #7
 80023cc:	4413      	add	r3, r2
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	440b      	add	r3, r1
 80023d2:	4403      	add	r3, r0
 80023d4:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 80023d8:	781a      	ldrb	r2, [r3, #0]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	701a      	strb	r2, [r3, #0]
		uart[id].index_read_rx = (uart[id].index_read_rx + 1) % LEN_BUFFER;
 80023de:	79fa      	ldrb	r2, [r7, #7]
 80023e0:	4910      	ldr	r1, [pc, #64]	; (8002424 <UART_Get+0x90>)
 80023e2:	4613      	mov	r3, r2
 80023e4:	01db      	lsls	r3, r3, #7
 80023e6:	4413      	add	r3, r2
 80023e8:	011b      	lsls	r3, r3, #4
 80023ea:	440b      	add	r3, r1
 80023ec:	f603 030c 	addw	r3, r3, #2060	; 0x80c
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	3301      	adds	r3, #1
 80023f4:	425a      	negs	r2, r3
 80023f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023fa:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80023fe:	bf58      	it	pl
 8002400:	4253      	negpl	r3, r2
 8002402:	79fa      	ldrb	r2, [r7, #7]
 8002404:	b298      	uxth	r0, r3
 8002406:	4907      	ldr	r1, [pc, #28]	; (8002424 <UART_Get+0x90>)
 8002408:	4613      	mov	r3, r2
 800240a:	01db      	lsls	r3, r3, #7
 800240c:	4413      	add	r3, r2
 800240e:	011b      	lsls	r3, r3, #4
 8002410:	440b      	add	r3, r1
 8002412:	f603 030c 	addw	r3, r3, #2060	; 0x80c
 8002416:	4602      	mov	r2, r0
 8002418:	801a      	strh	r2, [r3, #0]
	}
}
 800241a:	bf00      	nop
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	200003a8 	.word	0x200003a8

08002428 <UART_Init>:

/*
 * @brief Initialize every uarts and start dma reception
 */
void UART_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
	/* Link  huarts to the right uarts structures */
	uart[uart_e1].huart = &huart1;
 800242e:	4b23      	ldr	r3, [pc, #140]	; (80024bc <UART_Init+0x94>)
 8002430:	4a23      	ldr	r2, [pc, #140]	; (80024c0 <UART_Init+0x98>)
 8002432:	601a      	str	r2, [r3, #0]
	uart[uart_e3].huart = &huart3;
 8002434:	4b21      	ldr	r3, [pc, #132]	; (80024bc <UART_Init+0x94>)
 8002436:	4a23      	ldr	r2, [pc, #140]	; (80024c4 <UART_Init+0x9c>)
 8002438:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
	uart[uart_e4].huart = &huart4;
 800243c:	4b1f      	ldr	r3, [pc, #124]	; (80024bc <UART_Init+0x94>)
 800243e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8002442:	4a21      	ldr	r2, [pc, #132]	; (80024c8 <UART_Init+0xa0>)
 8002444:	601a      	str	r2, [r3, #0]

	/* Initialization */
	for(uint8_t u = 0; u < uart_eCOUNT; u ++)
 8002446:	2300      	movs	r3, #0
 8002448:	71fb      	strb	r3, [r7, #7]
 800244a:	e02f      	b.n	80024ac <UART_Init+0x84>
	{
		__HAL_UART_ENABLE_IT(uart[u].huart, UART_IT_IDLE);
 800244c:	79fa      	ldrb	r2, [r7, #7]
 800244e:	491b      	ldr	r1, [pc, #108]	; (80024bc <UART_Init+0x94>)
 8002450:	4613      	mov	r3, r2
 8002452:	01db      	lsls	r3, r3, #7
 8002454:	4413      	add	r3, r2
 8002456:	011b      	lsls	r3, r3, #4
 8002458:	440b      	add	r3, r1
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68d9      	ldr	r1, [r3, #12]
 8002460:	79fa      	ldrb	r2, [r7, #7]
 8002462:	4816      	ldr	r0, [pc, #88]	; (80024bc <UART_Init+0x94>)
 8002464:	4613      	mov	r3, r2
 8002466:	01db      	lsls	r3, r3, #7
 8002468:	4413      	add	r3, r2
 800246a:	011b      	lsls	r3, r3, #4
 800246c:	4403      	add	r3, r0
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f041 0210 	orr.w	r2, r1, #16
 8002476:	60da      	str	r2, [r3, #12]
		HAL_UART_Receive_DMA(uart[u].huart, uart[u].buffer_rx, LEN_BUFFER);
 8002478:	79fa      	ldrb	r2, [r7, #7]
 800247a:	4910      	ldr	r1, [pc, #64]	; (80024bc <UART_Init+0x94>)
 800247c:	4613      	mov	r3, r2
 800247e:	01db      	lsls	r3, r3, #7
 8002480:	4413      	add	r3, r2
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	440b      	add	r3, r1
 8002486:	6818      	ldr	r0, [r3, #0]
 8002488:	79fa      	ldrb	r2, [r7, #7]
 800248a:	4613      	mov	r3, r2
 800248c:	01db      	lsls	r3, r3, #7
 800248e:	4413      	add	r3, r2
 8002490:	011b      	lsls	r3, r3, #4
 8002492:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002496:	4a09      	ldr	r2, [pc, #36]	; (80024bc <UART_Init+0x94>)
 8002498:	4413      	add	r3, r2
 800249a:	3302      	adds	r3, #2
 800249c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024a0:	4619      	mov	r1, r3
 80024a2:	f007 f96b 	bl	800977c <HAL_UART_Receive_DMA>
	for(uint8_t u = 0; u < uart_eCOUNT; u ++)
 80024a6:	79fb      	ldrb	r3, [r7, #7]
 80024a8:	3301      	adds	r3, #1
 80024aa:	71fb      	strb	r3, [r7, #7]
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d9cc      	bls.n	800244c <UART_Init+0x24>
	}
}
 80024b2:	bf00      	nop
 80024b4:	bf00      	nop
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	200003a8 	.word	0x200003a8
 80024c0:	200023e4 	.word	0x200023e4
 80024c4:	20002280 	.word	0x20002280
 80024c8:	20002428 	.word	0x20002428

080024cc <UART_Transmit>:
 * @param id Id of the uart to use
 * @param data Array with the data
 * @param len Length of the data array
 */
void UART_Transmit(uart_e id, uint8_t * data, uint16_t len)
{
 80024cc:	b590      	push	{r4, r7, lr}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	6039      	str	r1, [r7, #0]
 80024d6:	71fb      	strb	r3, [r7, #7]
 80024d8:	4613      	mov	r3, r2
 80024da:	80bb      	strh	r3, [r7, #4]
	for(uint16_t c = 0; c < len; c ++)
 80024dc:	2300      	movs	r3, #0
 80024de:	81fb      	strh	r3, [r7, #14]
 80024e0:	e020      	b.n	8002524 <UART_Transmit+0x58>
	{
		uart[id].buffer_tx[(uart[id].index_write_tx + c) % LEN_BUFFER] = data[c];
 80024e2:	89fb      	ldrh	r3, [r7, #14]
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	18d0      	adds	r0, r2, r3
 80024e8:	79fa      	ldrb	r2, [r7, #7]
 80024ea:	79f9      	ldrb	r1, [r7, #7]
 80024ec:	4c50      	ldr	r4, [pc, #320]	; (8002630 <UART_Transmit+0x164>)
 80024ee:	460b      	mov	r3, r1
 80024f0:	01db      	lsls	r3, r3, #7
 80024f2:	440b      	add	r3, r1
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	4423      	add	r3, r4
 80024f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024fc:	8819      	ldrh	r1, [r3, #0]
 80024fe:	89fb      	ldrh	r3, [r7, #14]
 8002500:	440b      	add	r3, r1
 8002502:	b29b      	uxth	r3, r3
 8002504:	f3c3 0109 	ubfx	r1, r3, #0, #10
 8002508:	7804      	ldrb	r4, [r0, #0]
 800250a:	4849      	ldr	r0, [pc, #292]	; (8002630 <UART_Transmit+0x164>)
 800250c:	4613      	mov	r3, r2
 800250e:	01db      	lsls	r3, r3, #7
 8002510:	4413      	add	r3, r2
 8002512:	011b      	lsls	r3, r3, #4
 8002514:	4403      	add	r3, r0
 8002516:	440b      	add	r3, r1
 8002518:	3306      	adds	r3, #6
 800251a:	4622      	mov	r2, r4
 800251c:	701a      	strb	r2, [r3, #0]
	for(uint16_t c = 0; c < len; c ++)
 800251e:	89fb      	ldrh	r3, [r7, #14]
 8002520:	3301      	adds	r3, #1
 8002522:	81fb      	strh	r3, [r7, #14]
 8002524:	89fa      	ldrh	r2, [r7, #14]
 8002526:	88bb      	ldrh	r3, [r7, #4]
 8002528:	429a      	cmp	r2, r3
 800252a:	d3da      	bcc.n	80024e2 <UART_Transmit+0x16>
	}
	uart[id].index_write_tx = (uart[id].index_write_tx + len) % LEN_BUFFER;
 800252c:	79fa      	ldrb	r2, [r7, #7]
 800252e:	4940      	ldr	r1, [pc, #256]	; (8002630 <UART_Transmit+0x164>)
 8002530:	4613      	mov	r3, r2
 8002532:	01db      	lsls	r3, r3, #7
 8002534:	4413      	add	r3, r2
 8002536:	011b      	lsls	r3, r3, #4
 8002538:	440b      	add	r3, r1
 800253a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800253e:	881a      	ldrh	r2, [r3, #0]
 8002540:	88bb      	ldrh	r3, [r7, #4]
 8002542:	4413      	add	r3, r2
 8002544:	b29b      	uxth	r3, r3
 8002546:	79fa      	ldrb	r2, [r7, #7]
 8002548:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800254c:	b298      	uxth	r0, r3
 800254e:	4938      	ldr	r1, [pc, #224]	; (8002630 <UART_Transmit+0x164>)
 8002550:	4613      	mov	r3, r2
 8002552:	01db      	lsls	r3, r3, #7
 8002554:	4413      	add	r3, r2
 8002556:	011b      	lsls	r3, r3, #4
 8002558:	440b      	add	r3, r1
 800255a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800255e:	4602      	mov	r2, r0
 8002560:	801a      	strh	r2, [r3, #0]
	if(uart[id].transmission_state == transmission_state_eIDLE)
 8002562:	79fa      	ldrb	r2, [r7, #7]
 8002564:	4932      	ldr	r1, [pc, #200]	; (8002630 <UART_Transmit+0x164>)
 8002566:	4613      	mov	r3, r2
 8002568:	01db      	lsls	r3, r3, #7
 800256a:	4413      	add	r3, r2
 800256c:	011b      	lsls	r3, r3, #4
 800256e:	440b      	add	r3, r1
 8002570:	3305      	adds	r3, #5
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d157      	bne.n	8002628 <UART_Transmit+0x15c>
	{
		uart[id].transmission_state = transmission_state_eIN_PROGRESS;
 8002578:	79fa      	ldrb	r2, [r7, #7]
 800257a:	492d      	ldr	r1, [pc, #180]	; (8002630 <UART_Transmit+0x164>)
 800257c:	4613      	mov	r3, r2
 800257e:	01db      	lsls	r3, r3, #7
 8002580:	4413      	add	r3, r2
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	440b      	add	r3, r1
 8002586:	3305      	adds	r3, #5
 8002588:	2201      	movs	r2, #1
 800258a:	701a      	strb	r2, [r3, #0]
		uint16_t nb_bytes_before_end_of_buffer = LEN_BUFFER - uart[id].index_read_tx;
 800258c:	79fa      	ldrb	r2, [r7, #7]
 800258e:	4928      	ldr	r1, [pc, #160]	; (8002630 <UART_Transmit+0x164>)
 8002590:	4613      	mov	r3, r2
 8002592:	01db      	lsls	r3, r3, #7
 8002594:	4413      	add	r3, r2
 8002596:	011b      	lsls	r3, r3, #4
 8002598:	440b      	add	r3, r1
 800259a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80025a4:	81bb      	strh	r3, [r7, #12]
		len = MIN(len, nb_bytes_before_end_of_buffer);
 80025a6:	88ba      	ldrh	r2, [r7, #4]
 80025a8:	89bb      	ldrh	r3, [r7, #12]
 80025aa:	4293      	cmp	r3, r2
 80025ac:	bf28      	it	cs
 80025ae:	4613      	movcs	r3, r2
 80025b0:	80bb      	strh	r3, [r7, #4]
		HAL_UART_Transmit_DMA(uart[id].huart, &uart[id].buffer_tx[uart[id].index_read_tx], len);
 80025b2:	79fa      	ldrb	r2, [r7, #7]
 80025b4:	491e      	ldr	r1, [pc, #120]	; (8002630 <UART_Transmit+0x164>)
 80025b6:	4613      	mov	r3, r2
 80025b8:	01db      	lsls	r3, r3, #7
 80025ba:	4413      	add	r3, r2
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	440b      	add	r3, r1
 80025c0:	6818      	ldr	r0, [r3, #0]
 80025c2:	79fa      	ldrb	r2, [r7, #7]
 80025c4:	79f9      	ldrb	r1, [r7, #7]
 80025c6:	4c1a      	ldr	r4, [pc, #104]	; (8002630 <UART_Transmit+0x164>)
 80025c8:	460b      	mov	r3, r1
 80025ca:	01db      	lsls	r3, r3, #7
 80025cc:	440b      	add	r3, r1
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	4423      	add	r3, r4
 80025d2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80025d6:	881b      	ldrh	r3, [r3, #0]
 80025d8:	4619      	mov	r1, r3
 80025da:	4613      	mov	r3, r2
 80025dc:	01db      	lsls	r3, r3, #7
 80025de:	4413      	add	r3, r2
 80025e0:	011b      	lsls	r3, r3, #4
 80025e2:	440b      	add	r3, r1
 80025e4:	4a12      	ldr	r2, [pc, #72]	; (8002630 <UART_Transmit+0x164>)
 80025e6:	4413      	add	r3, r2
 80025e8:	3306      	adds	r3, #6
 80025ea:	88ba      	ldrh	r2, [r7, #4]
 80025ec:	4619      	mov	r1, r3
 80025ee:	f007 f847 	bl	8009680 <HAL_UART_Transmit_DMA>
		uart[id].index_read_tx = (uart[id].index_read_tx + len) % LEN_BUFFER;
 80025f2:	79fa      	ldrb	r2, [r7, #7]
 80025f4:	490e      	ldr	r1, [pc, #56]	; (8002630 <UART_Transmit+0x164>)
 80025f6:	4613      	mov	r3, r2
 80025f8:	01db      	lsls	r3, r3, #7
 80025fa:	4413      	add	r3, r2
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	440b      	add	r3, r1
 8002600:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002604:	881a      	ldrh	r2, [r3, #0]
 8002606:	88bb      	ldrh	r3, [r7, #4]
 8002608:	4413      	add	r3, r2
 800260a:	b29b      	uxth	r3, r3
 800260c:	79fa      	ldrb	r2, [r7, #7]
 800260e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002612:	b298      	uxth	r0, r3
 8002614:	4906      	ldr	r1, [pc, #24]	; (8002630 <UART_Transmit+0x164>)
 8002616:	4613      	mov	r3, r2
 8002618:	01db      	lsls	r3, r3, #7
 800261a:	4413      	add	r3, r2
 800261c:	011b      	lsls	r3, r3, #4
 800261e:	440b      	add	r3, r1
 8002620:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002624:	4602      	mov	r2, r0
 8002626:	801a      	strh	r2, [r3, #0]
	}
}
 8002628:	bf00      	nop
 800262a:	3714      	adds	r7, #20
 800262c:	46bd      	mov	sp, r7
 800262e:	bd90      	pop	{r4, r7, pc}
 8002630:	200003a8 	.word	0x200003a8

08002634 <get_nb_bytes_available>:
 * @brief Compute the numbers of byte available in the buffer
 * @param id Id of the uart
 * @return nb of bytes available
 */
uint16_t get_nb_bytes_available(uart_e id)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	71fb      	strb	r3, [r7, #7]
	uint16_t nb = 0 ;
 800263e:	2300      	movs	r3, #0
 8002640:	81fb      	strh	r3, [r7, #14]
	if(uart[id].index_write_rx > uart[id].index_read_rx)
 8002642:	79fa      	ldrb	r2, [r7, #7]
 8002644:	4932      	ldr	r1, [pc, #200]	; (8002710 <get_nb_bytes_available+0xdc>)
 8002646:	4613      	mov	r3, r2
 8002648:	01db      	lsls	r3, r3, #7
 800264a:	4413      	add	r3, r2
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	440b      	add	r3, r1
 8002650:	f603 030a 	addw	r3, r3, #2058	; 0x80a
 8002654:	881b      	ldrh	r3, [r3, #0]
 8002656:	b299      	uxth	r1, r3
 8002658:	79fa      	ldrb	r2, [r7, #7]
 800265a:	482d      	ldr	r0, [pc, #180]	; (8002710 <get_nb_bytes_available+0xdc>)
 800265c:	4613      	mov	r3, r2
 800265e:	01db      	lsls	r3, r3, #7
 8002660:	4413      	add	r3, r2
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	4403      	add	r3, r0
 8002666:	f603 030c 	addw	r3, r3, #2060	; 0x80c
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	4299      	cmp	r1, r3
 800266e:	d917      	bls.n	80026a0 <get_nb_bytes_available+0x6c>
	{
		nb = uart[id].index_write_rx - uart[id].index_read_rx ;
 8002670:	79fa      	ldrb	r2, [r7, #7]
 8002672:	4927      	ldr	r1, [pc, #156]	; (8002710 <get_nb_bytes_available+0xdc>)
 8002674:	4613      	mov	r3, r2
 8002676:	01db      	lsls	r3, r3, #7
 8002678:	4413      	add	r3, r2
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	440b      	add	r3, r1
 800267e:	f603 030a 	addw	r3, r3, #2058	; 0x80a
 8002682:	881b      	ldrh	r3, [r3, #0]
 8002684:	b299      	uxth	r1, r3
 8002686:	79fa      	ldrb	r2, [r7, #7]
 8002688:	4821      	ldr	r0, [pc, #132]	; (8002710 <get_nb_bytes_available+0xdc>)
 800268a:	4613      	mov	r3, r2
 800268c:	01db      	lsls	r3, r3, #7
 800268e:	4413      	add	r3, r2
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	4403      	add	r3, r0
 8002694:	f603 030c 	addw	r3, r3, #2060	; 0x80c
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	1acb      	subs	r3, r1, r3
 800269c:	81fb      	strh	r3, [r7, #14]
 800269e:	e030      	b.n	8002702 <get_nb_bytes_available+0xce>
	}
	else if(uart[id].index_write_rx < uart[id].index_read_rx)
 80026a0:	79fa      	ldrb	r2, [r7, #7]
 80026a2:	491b      	ldr	r1, [pc, #108]	; (8002710 <get_nb_bytes_available+0xdc>)
 80026a4:	4613      	mov	r3, r2
 80026a6:	01db      	lsls	r3, r3, #7
 80026a8:	4413      	add	r3, r2
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	440b      	add	r3, r1
 80026ae:	f603 030a 	addw	r3, r3, #2058	; 0x80a
 80026b2:	881b      	ldrh	r3, [r3, #0]
 80026b4:	b299      	uxth	r1, r3
 80026b6:	79fa      	ldrb	r2, [r7, #7]
 80026b8:	4815      	ldr	r0, [pc, #84]	; (8002710 <get_nb_bytes_available+0xdc>)
 80026ba:	4613      	mov	r3, r2
 80026bc:	01db      	lsls	r3, r3, #7
 80026be:	4413      	add	r3, r2
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	4403      	add	r3, r0
 80026c4:	f603 030c 	addw	r3, r3, #2060	; 0x80c
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	4299      	cmp	r1, r3
 80026cc:	d219      	bcs.n	8002702 <get_nb_bytes_available+0xce>
	{
		nb = LEN_BUFFER - uart[id].index_read_rx + uart[id].index_write_rx ;
 80026ce:	79fa      	ldrb	r2, [r7, #7]
 80026d0:	490f      	ldr	r1, [pc, #60]	; (8002710 <get_nb_bytes_available+0xdc>)
 80026d2:	4613      	mov	r3, r2
 80026d4:	01db      	lsls	r3, r3, #7
 80026d6:	4413      	add	r3, r2
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	440b      	add	r3, r1
 80026dc:	f603 030a 	addw	r3, r3, #2058	; 0x80a
 80026e0:	881b      	ldrh	r3, [r3, #0]
 80026e2:	b299      	uxth	r1, r3
 80026e4:	79fa      	ldrb	r2, [r7, #7]
 80026e6:	480a      	ldr	r0, [pc, #40]	; (8002710 <get_nb_bytes_available+0xdc>)
 80026e8:	4613      	mov	r3, r2
 80026ea:	01db      	lsls	r3, r3, #7
 80026ec:	4413      	add	r3, r2
 80026ee:	011b      	lsls	r3, r3, #4
 80026f0:	4403      	add	r3, r0
 80026f2:	f603 030c 	addw	r3, r3, #2060	; 0x80c
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	1acb      	subs	r3, r1, r3
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002700:	81fb      	strh	r3, [r7, #14]
	}
	return nb;
 8002702:	89fb      	ldrh	r3, [r7, #14]
}
 8002704:	4618      	mov	r0, r3
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	200003a8 	.word	0x200003a8

08002714 <IBUS_Init>:
#define NB_BYTE_MAX_PER_PROCESS		50

static ibus_t ibus = { 0 };

void IBUS_Init(uint16_t * channels)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
	ibus.channels = channels;
 800271c:	4a04      	ldr	r2, [pc, #16]	; (8002730 <IBUS_Init+0x1c>)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6013      	str	r3, [r2, #0]
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	20001bd8 	.word	0x20001bd8

08002734 <IBUS_Process>:
/*
 * @brief Check for new data on the uart and update channels array
 * @return True when a new have been successfully read
 */
bool_e IBUS_Process(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
	uint16_t nb_to_read = UART_Availables(UART_IBUS);
 800273a:	2001      	movs	r0, #1
 800273c:	f7ff fe1c 	bl	8002378 <UART_Availables>
 8002740:	4603      	mov	r3, r0
 8002742:	81fb      	strh	r3, [r7, #14]
	if(!nb_to_read)
 8002744:	89fb      	ldrh	r3, [r7, #14]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <IBUS_Process+0x1a>
	{
		return FALSE;
 800274a:	2300      	movs	r3, #0
 800274c:	e092      	b.n	8002874 <IBUS_Process+0x140>
	}
	nb_to_read = MIN(nb_to_read, NB_BYTE_MAX_PER_PROCESS);
 800274e:	89fb      	ldrh	r3, [r7, #14]
 8002750:	2b32      	cmp	r3, #50	; 0x32
 8002752:	bf28      	it	cs
 8002754:	2332      	movcs	r3, #50	; 0x32
 8002756:	81fb      	strh	r3, [r7, #14]
	bool_e to_return = FALSE;
 8002758:	2300      	movs	r3, #0
 800275a:	737b      	strb	r3, [r7, #13]
	uint8_t c = 0;
 800275c:	2300      	movs	r3, #0
 800275e:	70fb      	strb	r3, [r7, #3]
	while(nb_to_read)
 8002760:	e083      	b.n	800286a <IBUS_Process+0x136>
	{
		UART_Get(UART_IBUS, &c);
 8002762:	1cfb      	adds	r3, r7, #3
 8002764:	4619      	mov	r1, r3
 8002766:	2001      	movs	r0, #1
 8002768:	f7ff fe14 	bl	8002394 <UART_Get>
		switch(ibus.state)
 800276c:	4b43      	ldr	r3, [pc, #268]	; (800287c <IBUS_Process+0x148>)
 800276e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002772:	2b02      	cmp	r3, #2
 8002774:	d027      	beq.n	80027c6 <IBUS_Process+0x92>
 8002776:	2b02      	cmp	r3, #2
 8002778:	dc74      	bgt.n	8002864 <IBUS_Process+0x130>
 800277a:	2b00      	cmp	r3, #0
 800277c:	d002      	beq.n	8002784 <IBUS_Process+0x50>
 800277e:	2b01      	cmp	r3, #1
 8002780:	d00b      	beq.n	800279a <IBUS_Process+0x66>
 8002782:	e06f      	b.n	8002864 <IBUS_Process+0x130>
		{
			case STATE_IBUS_LENGTH :
				if(c == 0x20)
 8002784:	78fb      	ldrb	r3, [r7, #3]
 8002786:	2b20      	cmp	r3, #32
 8002788:	d167      	bne.n	800285a <IBUS_Process+0x126>
				{
					ibus.state = STATE_IBUS_COMMAND ;
 800278a:	4b3c      	ldr	r3, [pc, #240]	; (800287c <IBUS_Process+0x148>)
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
					ibus.buffer[0] = c ;
 8002792:	78fa      	ldrb	r2, [r7, #3]
 8002794:	4b39      	ldr	r3, [pc, #228]	; (800287c <IBUS_Process+0x148>)
 8002796:	711a      	strb	r2, [r3, #4]
				}
				break;
 8002798:	e05f      	b.n	800285a <IBUS_Process+0x126>
			case STATE_IBUS_COMMAND :
				if(c == 0x40)
 800279a:	78fb      	ldrb	r3, [r7, #3]
 800279c:	2b40      	cmp	r3, #64	; 0x40
 800279e:	d10a      	bne.n	80027b6 <IBUS_Process+0x82>
				{
					ibus.state = STATE_IBUS_CHANNELS ;
 80027a0:	4b36      	ldr	r3, [pc, #216]	; (800287c <IBUS_Process+0x148>)
 80027a2:	2202      	movs	r2, #2
 80027a4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
					ibus.buffer[1] = c ;
 80027a8:	78fa      	ldrb	r2, [r7, #3]
 80027aa:	4b34      	ldr	r3, [pc, #208]	; (800287c <IBUS_Process+0x148>)
 80027ac:	715a      	strb	r2, [r3, #5]
					ibus.compteur = 2 ;
 80027ae:	4b33      	ldr	r3, [pc, #204]	; (800287c <IBUS_Process+0x148>)
 80027b0:	2202      	movs	r2, #2
 80027b2:	849a      	strh	r2, [r3, #36]	; 0x24
				}
				else if(c != 0x20)
				{
					ibus.state = STATE_IBUS_LENGTH ;
				}
				break ;
 80027b4:	e053      	b.n	800285e <IBUS_Process+0x12a>
				else if(c != 0x20)
 80027b6:	78fb      	ldrb	r3, [r7, #3]
 80027b8:	2b20      	cmp	r3, #32
 80027ba:	d050      	beq.n	800285e <IBUS_Process+0x12a>
					ibus.state = STATE_IBUS_LENGTH ;
 80027bc:	4b2f      	ldr	r3, [pc, #188]	; (800287c <IBUS_Process+0x148>)
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				break ;
 80027c4:	e04b      	b.n	800285e <IBUS_Process+0x12a>

			case STATE_IBUS_CHANNELS :
				ibus.buffer[ibus.compteur++] = c ;
 80027c6:	4b2d      	ldr	r3, [pc, #180]	; (800287c <IBUS_Process+0x148>)
 80027c8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80027ca:	1c5a      	adds	r2, r3, #1
 80027cc:	b291      	uxth	r1, r2
 80027ce:	4a2b      	ldr	r2, [pc, #172]	; (800287c <IBUS_Process+0x148>)
 80027d0:	8491      	strh	r1, [r2, #36]	; 0x24
 80027d2:	4619      	mov	r1, r3
 80027d4:	78fa      	ldrb	r2, [r7, #3]
 80027d6:	4b29      	ldr	r3, [pc, #164]	; (800287c <IBUS_Process+0x148>)
 80027d8:	440b      	add	r3, r1
 80027da:	711a      	strb	r2, [r3, #4]
				if(ibus.compteur == 32)
 80027dc:	4b27      	ldr	r3, [pc, #156]	; (800287c <IBUS_Process+0x148>)
 80027de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80027e0:	2b20      	cmp	r3, #32
 80027e2:	d13e      	bne.n	8002862 <IBUS_Process+0x12e>
				{
					uint32_t cs = (uint32_t)(ibus.buffer[30] | (ibus.buffer[31] << 8)) ;
 80027e4:	4b25      	ldr	r3, [pc, #148]	; (800287c <IBUS_Process+0x148>)
 80027e6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80027ea:	461a      	mov	r2, r3
 80027ec:	4b23      	ldr	r3, [pc, #140]	; (800287c <IBUS_Process+0x148>)
 80027ee:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80027f2:	021b      	lsls	r3, r3, #8
 80027f4:	4313      	orrs	r3, r2
 80027f6:	607b      	str	r3, [r7, #4]
					if(0xFFFF - check_sum_f(ibus.buffer)== cs)
 80027f8:	4821      	ldr	r0, [pc, #132]	; (8002880 <IBUS_Process+0x14c>)
 80027fa:	f000 f843 	bl	8002884 <check_sum_f>
 80027fe:	4603      	mov	r3, r0
 8002800:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002804:	33ff      	adds	r3, #255	; 0xff
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	429a      	cmp	r2, r3
 800280a:	d121      	bne.n	8002850 <IBUS_Process+0x11c>
					{
						for(uint32_t radio = 0; radio < 28; radio +=2)
 800280c:	2300      	movs	r3, #0
 800280e:	60bb      	str	r3, [r7, #8]
 8002810:	e019      	b.n	8002846 <IBUS_Process+0x112>
						{
							ibus.channels[radio / 2] = (int32_t)(ibus.buffer[radio+2] | (ibus.buffer[radio + 3] << 8));
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	3302      	adds	r3, #2
 8002816:	4a19      	ldr	r2, [pc, #100]	; (800287c <IBUS_Process+0x148>)
 8002818:	4413      	add	r3, r2
 800281a:	791b      	ldrb	r3, [r3, #4]
 800281c:	b21a      	sxth	r2, r3
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	3303      	adds	r3, #3
 8002822:	4916      	ldr	r1, [pc, #88]	; (800287c <IBUS_Process+0x148>)
 8002824:	440b      	add	r3, r1
 8002826:	791b      	ldrb	r3, [r3, #4]
 8002828:	021b      	lsls	r3, r3, #8
 800282a:	b21b      	sxth	r3, r3
 800282c:	4313      	orrs	r3, r2
 800282e:	b219      	sxth	r1, r3
 8002830:	4b12      	ldr	r3, [pc, #72]	; (800287c <IBUS_Process+0x148>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	f023 0301 	bic.w	r3, r3, #1
 800283a:	4413      	add	r3, r2
 800283c:	b28a      	uxth	r2, r1
 800283e:	801a      	strh	r2, [r3, #0]
						for(uint32_t radio = 0; radio < 28; radio +=2)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	3302      	adds	r3, #2
 8002844:	60bb      	str	r3, [r7, #8]
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	2b1b      	cmp	r3, #27
 800284a:	d9e2      	bls.n	8002812 <IBUS_Process+0xde>
						}
						to_return = TRUE;
 800284c:	2301      	movs	r3, #1
 800284e:	737b      	strb	r3, [r7, #13]
					}
					ibus.state = STATE_IBUS_LENGTH ;
 8002850:	4b0a      	ldr	r3, [pc, #40]	; (800287c <IBUS_Process+0x148>)
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				}
				break;
 8002858:	e003      	b.n	8002862 <IBUS_Process+0x12e>
				break;
 800285a:	bf00      	nop
 800285c:	e002      	b.n	8002864 <IBUS_Process+0x130>
				break ;
 800285e:	bf00      	nop
 8002860:	e000      	b.n	8002864 <IBUS_Process+0x130>
				break;
 8002862:	bf00      	nop
		}
		nb_to_read --;
 8002864:	89fb      	ldrh	r3, [r7, #14]
 8002866:	3b01      	subs	r3, #1
 8002868:	81fb      	strh	r3, [r7, #14]
	while(nb_to_read)
 800286a:	89fb      	ldrh	r3, [r7, #14]
 800286c:	2b00      	cmp	r3, #0
 800286e:	f47f af78 	bne.w	8002762 <IBUS_Process+0x2e>
	}

	return to_return;
 8002872:	7b7b      	ldrb	r3, [r7, #13]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	20001bd8 	.word	0x20001bd8
 8002880:	20001bdc 	.word	0x20001bdc

08002884 <check_sum_f>:

uint32_t check_sum_f(uint8_t * buffer)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
	uint32_t sum = 0 ;
 800288c:	2300      	movs	r3, #0
 800288e:	60fb      	str	r3, [r7, #12]
	for(uint8_t b=0; b <30; b++)
 8002890:	2300      	movs	r3, #0
 8002892:	72fb      	strb	r3, [r7, #11]
 8002894:	e00a      	b.n	80028ac <check_sum_f+0x28>
		sum += (uint32_t)buffer[b];
 8002896:	7afb      	ldrb	r3, [r7, #11]
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	4413      	add	r3, r2
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	461a      	mov	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4413      	add	r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]
	for(uint8_t b=0; b <30; b++)
 80028a6:	7afb      	ldrb	r3, [r7, #11]
 80028a8:	3301      	adds	r3, #1
 80028aa:	72fb      	strb	r3, [r7, #11]
 80028ac:	7afb      	ldrb	r3, [r7, #11]
 80028ae:	2b1d      	cmp	r3, #29
 80028b0:	d9f1      	bls.n	8002896 <check_sum_f+0x12>
	return sum ;
 80028b2:	68fb      	ldr	r3, [r7, #12]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <RADIO_Process_Init>:
#define TIMEOUT_RADIO_MS	50

static radio_t radio = { 0 };

void RADIO_Process_Init(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
#if USE_IBUS
	IBUS_Init(radio.channels);
 80028c4:	4802      	ldr	r0, [pc, #8]	; (80028d0 <RADIO_Process_Init+0x10>)
 80028c6:	f7ff ff25 	bl	8002714 <IBUS_Init>
#endif
}
 80028ca:	bf00      	nop
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	20001c04 	.word	0x20001c04

080028d4 <RADIO_Process_Main>:

void RADIO_Process_Main(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0

#if USE_IBUS
	if(IBUS_Process())
 80028d8:	f7ff ff2c 	bl	8002734 <IBUS_Process>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d009      	beq.n	80028f6 <RADIO_Process_Main+0x22>
	{
		radio.next_update = HAL_GetTick() + TIMEOUT_RADIO_MS;
 80028e2:	f001 fbd3 	bl	800408c <HAL_GetTick>
 80028e6:	4603      	mov	r3, r0
 80028e8:	3332      	adds	r3, #50	; 0x32
 80028ea:	4a09      	ldr	r2, [pc, #36]	; (8002910 <RADIO_Process_Main+0x3c>)
 80028ec:	6213      	str	r3, [r2, #32]
		radio.state = radio_state_eOK;
 80028ee:	4b08      	ldr	r3, [pc, #32]	; (8002910 <RADIO_Process_Main+0x3c>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	771a      	strb	r2, [r3, #28]
	else if(HAL_GetTick() > radio.next_update)
	{
		radio.state = radio_state_eTIMEOUT;
	}
#endif
}
 80028f4:	e009      	b.n	800290a <RADIO_Process_Main+0x36>
	else if(HAL_GetTick() > radio.next_update)
 80028f6:	f001 fbc9 	bl	800408c <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	4b04      	ldr	r3, [pc, #16]	; (8002910 <RADIO_Process_Main+0x3c>)
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	429a      	cmp	r2, r3
 8002902:	d902      	bls.n	800290a <RADIO_Process_Main+0x36>
		radio.state = radio_state_eTIMEOUT;
 8002904:	4b02      	ldr	r3, [pc, #8]	; (8002910 <RADIO_Process_Main+0x3c>)
 8002906:	2201      	movs	r2, #1
 8002908:	771a      	strb	r2, [r3, #28]
}
 800290a:	bf00      	nop
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	20001c04 	.word	0x20001c04

08002914 <RADIO_Get_State>:

radio_state_e RADIO_Get_State(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
	return radio.state;
 8002918:	4b03      	ldr	r3, [pc, #12]	; (8002928 <RADIO_Get_State+0x14>)
 800291a:	7f1b      	ldrb	r3, [r3, #28]
}
 800291c:	4618      	mov	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	20001c04 	.word	0x20001c04

0800292c <RADIO_Get_Channel>:

uint16_t * RADIO_Get_Channel(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
	return radio.channels;
 8002930:	4b02      	ldr	r3, [pc, #8]	; (800293c <RADIO_Get_Channel+0x10>)
}
 8002932:	4618      	mov	r0, r3
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	20001c04 	.word	0x20001c04

08002940 <MPU_Init>:
/*
 * @brief Wake up the MPU6000
 *		  Configure the Gyroscope and the Accelerometer
 */
void MPU_Init(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af02      	add	r7, sp, #8
	/* Set the Gyroscope and Accelerometer data buffer */
	mpu.gyro_data = &mpu.data[8];
 8002946:	4b59      	ldr	r3, [pc, #356]	; (8002aac <MPU_Init+0x16c>)
 8002948:	4a59      	ldr	r2, [pc, #356]	; (8002ab0 <MPU_Init+0x170>)
 800294a:	611a      	str	r2, [r3, #16]
	mpu.acc_data = &mpu.data[0];
 800294c:	4b57      	ldr	r3, [pc, #348]	; (8002aac <MPU_Init+0x16c>)
 800294e:	4a59      	ldr	r2, [pc, #356]	; (8002ab4 <MPU_Init+0x174>)
 8002950:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Disable I2C */
	SPI_Transmit(SPI_MPU, CS_MPU, mpu_disable_i2c, 2);
	HAL_Delay(150);
#else
	/* Check is the mpu responds */
	if(I2C_Is_Device_Ready(I2C_MPU, MPU6050_I2C_ADDR))
 8002952:	21d0      	movs	r1, #208	; 0xd0
 8002954:	2000      	movs	r0, #0
 8002956:	f7ff fb75 	bl	8002044 <I2C_Is_Device_Ready>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <MPU_Init+0x28>
	{
		mpu.state = mpu_state_eERROR;
 8002960:	4b52      	ldr	r3, [pc, #328]	; (8002aac <MPU_Init+0x16c>)
 8002962:	2201      	movs	r2, #1
 8002964:	701a      	strb	r2, [r3, #0]
 8002966:	e09d      	b.n	8002aa4 <MPU_Init+0x164>
		return;
	}
	/* Power up the mpu an wait for it to start */
	HAL_GPIO_WritePin(MPU_POWER_GPIO_Port, MPU_POWER_Pin, GPIO_PIN_SET);
 8002968:	2201      	movs	r2, #1
 800296a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800296e:	4852      	ldr	r0, [pc, #328]	; (8002ab8 <MPU_Init+0x178>)
 8002970:	f002 fa86 	bl	8004e80 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8002974:	20c8      	movs	r0, #200	; 0xc8
 8002976:	f001 fb95 	bl	80040a4 <HAL_Delay>
	/* Wake up the mpu */
	uint8_t wakeup_data = 0x80;
 800297a:	2380      	movs	r3, #128	; 0x80
 800297c:	71fb      	strb	r3, [r7, #7]
	I2C_Mem_Write(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_PWR_MGMT_1, &wakeup_data, 1);
 800297e:	1dfb      	adds	r3, r7, #7
 8002980:	2201      	movs	r2, #1
 8002982:	9200      	str	r2, [sp, #0]
 8002984:	226b      	movs	r2, #107	; 0x6b
 8002986:	21d0      	movs	r1, #208	; 0xd0
 8002988:	2000      	movs	r0, #0
 800298a:	f7ff faf1 	bl	8001f70 <I2C_Mem_Write>
	HAL_Delay(15);
 800298e:	200f      	movs	r0, #15
 8002990:	f001 fb88 	bl	80040a4 <HAL_Delay>
	/* Select the clock */
	uint8_t clock_select = 0x03;
 8002994:	2303      	movs	r3, #3
 8002996:	71bb      	strb	r3, [r7, #6]
	I2C_Mem_Write(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_PWR_MGMT_1, &clock_select, 1);
 8002998:	1dbb      	adds	r3, r7, #6
 800299a:	2201      	movs	r2, #1
 800299c:	9200      	str	r2, [sp, #0]
 800299e:	226b      	movs	r2, #107	; 0x6b
 80029a0:	21d0      	movs	r1, #208	; 0xd0
 80029a2:	2000      	movs	r0, #0
 80029a4:	f7ff fae4 	bl	8001f70 <I2C_Mem_Write>
	SPI_Transmit(SPI_MPU, CS_MPU, temp_write, 2);
	HAL_Delay(150);
#else
	/* Sensitivity configuration */
	uint8_t temp;
	I2C_Mem_Read(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_GYRO_CONFIG, &temp, 1);
 80029a8:	1d7b      	adds	r3, r7, #5
 80029aa:	2201      	movs	r2, #1
 80029ac:	9200      	str	r2, [sp, #0]
 80029ae:	221b      	movs	r2, #27
 80029b0:	21d0      	movs	r1, #208	; 0xd0
 80029b2:	2000      	movs	r0, #0
 80029b4:	f7ff fb00 	bl	8001fb8 <I2C_Mem_Read>
	temp = (temp & 0xE7) | (uint8_t)mpu.gyro_range << 3;
 80029b8:	797b      	ldrb	r3, [r7, #5]
 80029ba:	b25b      	sxtb	r3, r3
 80029bc:	f023 0318 	bic.w	r3, r3, #24
 80029c0:	b25a      	sxtb	r2, r3
 80029c2:	4b3a      	ldr	r3, [pc, #232]	; (8002aac <MPU_Init+0x16c>)
 80029c4:	7bdb      	ldrb	r3, [r3, #15]
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	b25b      	sxtb	r3, r3
 80029ca:	4313      	orrs	r3, r2
 80029cc:	b25b      	sxtb	r3, r3
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	717b      	strb	r3, [r7, #5]
	I2C_Mem_Write(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_GYRO_CONFIG, &temp, 1);
 80029d2:	1d7b      	adds	r3, r7, #5
 80029d4:	2201      	movs	r2, #1
 80029d6:	9200      	str	r2, [sp, #0]
 80029d8:	221b      	movs	r2, #27
 80029da:	21d0      	movs	r1, #208	; 0xd0
 80029dc:	2000      	movs	r0, #0
 80029de:	f7ff fac7 	bl	8001f70 <I2C_Mem_Write>
#endif
	switch(mpu.gyro_range)
 80029e2:	4b32      	ldr	r3, [pc, #200]	; (8002aac <MPU_Init+0x16c>)
 80029e4:	7bdb      	ldrb	r3, [r3, #15]
 80029e6:	2b03      	cmp	r3, #3
 80029e8:	d81a      	bhi.n	8002a20 <MPU_Init+0xe0>
 80029ea:	a201      	add	r2, pc, #4	; (adr r2, 80029f0 <MPU_Init+0xb0>)
 80029ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f0:	08002a01 	.word	0x08002a01
 80029f4:	08002a09 	.word	0x08002a09
 80029f8:	08002a11 	.word	0x08002a11
 80029fc:	08002a19 	.word	0x08002a19
	{
		case MPU_GYRO_250s :
			mpu.gyro_conversion = (float)1 / MPU6050_GYRO_SENS_250 ;
 8002a00:	4b2a      	ldr	r3, [pc, #168]	; (8002aac <MPU_Init+0x16c>)
 8002a02:	4a2e      	ldr	r2, [pc, #184]	; (8002abc <MPU_Init+0x17c>)
 8002a04:	615a      	str	r2, [r3, #20]
			break;
 8002a06:	e00b      	b.n	8002a20 <MPU_Init+0xe0>
		case MPU_GYRO_500s :
			mpu.gyro_conversion = (float)1 / MPU6050_GYRO_SENS_500 ;
 8002a08:	4b28      	ldr	r3, [pc, #160]	; (8002aac <MPU_Init+0x16c>)
 8002a0a:	4a2d      	ldr	r2, [pc, #180]	; (8002ac0 <MPU_Init+0x180>)
 8002a0c:	615a      	str	r2, [r3, #20]
			break;
 8002a0e:	e007      	b.n	8002a20 <MPU_Init+0xe0>
		case MPU_GYRO_1000s :
			mpu.gyro_conversion = (float)1 / MPU6050_GYRO_SENS_1000 ;
 8002a10:	4b26      	ldr	r3, [pc, #152]	; (8002aac <MPU_Init+0x16c>)
 8002a12:	4a2c      	ldr	r2, [pc, #176]	; (8002ac4 <MPU_Init+0x184>)
 8002a14:	615a      	str	r2, [r3, #20]
			break;
 8002a16:	e003      	b.n	8002a20 <MPU_Init+0xe0>
		case MPU_GYRO_2000s :
			mpu.gyro_conversion = (float)1 / MPU6050_GYRO_SENS_2000 ;
 8002a18:	4b24      	ldr	r3, [pc, #144]	; (8002aac <MPU_Init+0x16c>)
 8002a1a:	4a2b      	ldr	r2, [pc, #172]	; (8002ac8 <MPU_Init+0x188>)
 8002a1c:	615a      	str	r2, [r3, #20]
			break;
 8002a1e:	bf00      	nop
	temp_write[1] = (temp_read[1] & 0xE7) | (uint8_t)mpu.acc_range << 3;
	SPI_Transmit(SPI_MPU, CS_MPU, temp_write, 2);
	HAL_Delay(150);
#else
	/* Sensitivity configuration */
	I2C_Mem_Read(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_ACCEL_CONFIG, &temp, 1);
 8002a20:	1d7b      	adds	r3, r7, #5
 8002a22:	2201      	movs	r2, #1
 8002a24:	9200      	str	r2, [sp, #0]
 8002a26:	221c      	movs	r2, #28
 8002a28:	21d0      	movs	r1, #208	; 0xd0
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	f7ff fac4 	bl	8001fb8 <I2C_Mem_Read>
	temp = (temp & 0xE7) | (uint8_t)mpu.acc_range << 3;
 8002a30:	797b      	ldrb	r3, [r7, #5]
 8002a32:	b25b      	sxtb	r3, r3
 8002a34:	f023 0318 	bic.w	r3, r3, #24
 8002a38:	b25a      	sxtb	r2, r3
 8002a3a:	4b1c      	ldr	r3, [pc, #112]	; (8002aac <MPU_Init+0x16c>)
 8002a3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	b25b      	sxtb	r3, r3
 8002a44:	4313      	orrs	r3, r2
 8002a46:	b25b      	sxtb	r3, r3
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	717b      	strb	r3, [r7, #5]
	I2C_Mem_Write(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_ACCEL_CONFIG, &temp, 1);
 8002a4c:	1d7b      	adds	r3, r7, #5
 8002a4e:	2201      	movs	r2, #1
 8002a50:	9200      	str	r2, [sp, #0]
 8002a52:	221c      	movs	r2, #28
 8002a54:	21d0      	movs	r1, #208	; 0xd0
 8002a56:	2000      	movs	r0, #0
 8002a58:	f7ff fa8a 	bl	8001f70 <I2C_Mem_Write>
#endif
	switch(mpu.acc_range)
 8002a5c:	4b13      	ldr	r3, [pc, #76]	; (8002aac <MPU_Init+0x16c>)
 8002a5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a62:	2b03      	cmp	r3, #3
 8002a64:	d81e      	bhi.n	8002aa4 <MPU_Init+0x164>
 8002a66:	a201      	add	r2, pc, #4	; (adr r2, 8002a6c <MPU_Init+0x12c>)
 8002a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a6c:	08002a7d 	.word	0x08002a7d
 8002a70:	08002a87 	.word	0x08002a87
 8002a74:	08002a91 	.word	0x08002a91
 8002a78:	08002a9b 	.word	0x08002a9b
	{
		case MPU_ACC_2G :
			mpu.acc_conversion = (float)1 / MPU6050_ACCE_SENS_2 ;
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <MPU_Init+0x16c>)
 8002a7e:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8002a82:	645a      	str	r2, [r3, #68]	; 0x44
			break;
 8002a84:	e00e      	b.n	8002aa4 <MPU_Init+0x164>
		case MPU_ACC_4G :
			mpu.acc_conversion = (float)1 / MPU6050_ACCE_SENS_4 ;
 8002a86:	4b09      	ldr	r3, [pc, #36]	; (8002aac <MPU_Init+0x16c>)
 8002a88:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8002a8c:	645a      	str	r2, [r3, #68]	; 0x44
			break;
 8002a8e:	e009      	b.n	8002aa4 <MPU_Init+0x164>
		case MPU_ACC_8G :
			mpu.acc_conversion = (float)1 / MPU6050_ACCE_SENS_8 ;
 8002a90:	4b06      	ldr	r3, [pc, #24]	; (8002aac <MPU_Init+0x16c>)
 8002a92:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8002a96:	645a      	str	r2, [r3, #68]	; 0x44
			break;
 8002a98:	e004      	b.n	8002aa4 <MPU_Init+0x164>
		case MPU_ACC_16G :
			mpu.acc_conversion = (float)1 / MPU6050_ACCE_SENS_16 ;
 8002a9a:	4b04      	ldr	r3, [pc, #16]	; (8002aac <MPU_Init+0x16c>)
 8002a9c:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8002aa0:	645a      	str	r2, [r3, #68]	; 0x44
			break;
 8002aa2:	bf00      	nop
	}
}
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	200000a4 	.word	0x200000a4
 8002ab0:	200000ad 	.word	0x200000ad
 8002ab4:	200000a5 	.word	0x200000a5
 8002ab8:	40020800 	.word	0x40020800
 8002abc:	3bfa232d 	.word	0x3bfa232d
 8002ac0:	3c7a232d 	.word	0x3c7a232d
 8002ac4:	3cf9c190 	.word	0x3cf9c190
 8002ac8:	3d79c190 	.word	0x3d79c190

08002acc <MPU_Get_Gyro_Ptr>:
float * MPU_Get_Gyro_Ptr(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
	return mpu.gyro;
 8002ad0:	4b02      	ldr	r3, [pc, #8]	; (8002adc <MPU_Get_Gyro_Ptr+0x10>)
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	200000bc 	.word	0x200000bc

08002ae0 <MPU_Get_Gyro_Raw_Ptr>:

float * MPU_Get_Gyro_Raw_Ptr(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
	return mpu.gyro_raw;
 8002ae4:	4b02      	ldr	r3, [pc, #8]	; (8002af0 <MPU_Get_Gyro_Raw_Ptr+0x10>)
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	200000c8 	.word	0x200000c8

08002af4 <MPU_Get_Acc_Ptr>:

float * MPU_Get_Acc_Ptr(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
	return mpu.acc;
 8002af8:	4b02      	ldr	r3, [pc, #8]	; (8002b04 <MPU_Get_Acc_Ptr+0x10>)
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	200000ec 	.word	0x200000ec

08002b08 <MPU_Get_Acc_Raw_Ptr>:

float * MPU_Get_Acc_Raw_Ptr(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
	return mpu.acc_raw;
 8002b0c:	4b02      	ldr	r3, [pc, #8]	; (8002b18 <MPU_Get_Acc_Raw_Ptr+0x10>)
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	200000f8 	.word	0x200000f8

08002b1c <MPU_Read_All_Dma>:
	MPU_Convert_Acc_Data();
	MPU_Convert_Gyro_Data();
}

void MPU_Read_All_Dma(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af02      	add	r7, sp, #8
	if(mpu.state == mpu_state_eERROR)
 8002b22:	4b0f      	ldr	r3, [pc, #60]	; (8002b60 <MPU_Read_All_Dma+0x44>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d015      	beq.n	8002b56 <MPU_Read_All_Dma+0x3a>
	}
#if USE_SPI
	uint8_t registers [14] = {MPU6050_ACCEL_XOUT_H | MPU6050_READ};
	SPI_Transmit_Receive(SPI_MPU, CS_MPU, registers, mpu.data, 14);
#else
	HAL_StatusTypeDef state = I2C_Mem_Read_Dma(I2C_MPU, MPU6050_I2C_ADDR, MPU6050_ACCEL_XOUT_H, mpu.data, 14);
 8002b2a:	230e      	movs	r3, #14
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	4b0d      	ldr	r3, [pc, #52]	; (8002b64 <MPU_Read_All_Dma+0x48>)
 8002b30:	223b      	movs	r2, #59	; 0x3b
 8002b32:	21d0      	movs	r1, #208	; 0xd0
 8002b34:	2000      	movs	r0, #0
 8002b36:	f7ff fa63 	bl	8002000 <I2C_Mem_Read_Dma>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	71fb      	strb	r3, [r7, #7]
	if(state)
 8002b3e:	79fb      	ldrb	r3, [r7, #7]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d003      	beq.n	8002b4c <MPU_Read_All_Dma+0x30>
	{
		mpu.state = mpu_state_eERROR;
 8002b44:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <MPU_Read_All_Dma+0x44>)
 8002b46:	2201      	movs	r2, #1
 8002b48:	701a      	strb	r2, [r3, #0]
		return;
 8002b4a:	e005      	b.n	8002b58 <MPU_Read_All_Dma+0x3c>
	}
	mpu.dma_state = dma_state_eIN_PORGRESS_ALL;
 8002b4c:	4b04      	ldr	r3, [pc, #16]	; (8002b60 <MPU_Read_All_Dma+0x44>)
 8002b4e:	2203      	movs	r2, #3
 8002b50:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8002b54:	e000      	b.n	8002b58 <MPU_Read_All_Dma+0x3c>
		return;
 8002b56:	bf00      	nop
#endif
}
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	200000a4 	.word	0x200000a4
 8002b64:	200000a5 	.word	0x200000a5

08002b68 <MPU_Convert_Acc_Data>:

/*
 * @brief Convert acc bytes to measurement
 */
void MPU_Convert_Acc_Data(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
	mpu.acc_raw[0] = ((int16_t)(mpu.acc_data[1] | (mpu.acc_data[0] << 8)) * mpu.acc_conversion);
 8002b6c:	4b43      	ldr	r3, [pc, #268]	; (8002c7c <MPU_Convert_Acc_Data+0x114>)
 8002b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b70:	3301      	adds	r3, #1
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	b21a      	sxth	r2, r3
 8002b76:	4b41      	ldr	r3, [pc, #260]	; (8002c7c <MPU_Convert_Acc_Data+0x114>)
 8002b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	021b      	lsls	r3, r3, #8
 8002b7e:	b21b      	sxth	r3, r3
 8002b80:	4313      	orrs	r3, r2
 8002b82:	b21b      	sxth	r3, r3
 8002b84:	ee07 3a90 	vmov	s15, r3
 8002b88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b8c:	4b3b      	ldr	r3, [pc, #236]	; (8002c7c <MPU_Convert_Acc_Data+0x114>)
 8002b8e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b96:	4b39      	ldr	r3, [pc, #228]	; (8002c7c <MPU_Convert_Acc_Data+0x114>)
 8002b98:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	mpu.acc_raw[1] = ((int16_t)(mpu.acc_data[3] | (mpu.acc_data[2] << 8)) * mpu.acc_conversion);
 8002b9c:	4b37      	ldr	r3, [pc, #220]	; (8002c7c <MPU_Convert_Acc_Data+0x114>)
 8002b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba0:	3303      	adds	r3, #3
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	b21a      	sxth	r2, r3
 8002ba6:	4b35      	ldr	r3, [pc, #212]	; (8002c7c <MPU_Convert_Acc_Data+0x114>)
 8002ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002baa:	3302      	adds	r3, #2
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	021b      	lsls	r3, r3, #8
 8002bb0:	b21b      	sxth	r3, r3
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	b21b      	sxth	r3, r3
 8002bb6:	ee07 3a90 	vmov	s15, r3
 8002bba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bbe:	4b2f      	ldr	r3, [pc, #188]	; (8002c7c <MPU_Convert_Acc_Data+0x114>)
 8002bc0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002bc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bc8:	4b2c      	ldr	r3, [pc, #176]	; (8002c7c <MPU_Convert_Acc_Data+0x114>)
 8002bca:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	mpu.acc_raw[2] = ((int16_t)(mpu.acc_data[5] | (mpu.acc_data[4] << 8)) * mpu.acc_conversion);
 8002bce:	4b2b      	ldr	r3, [pc, #172]	; (8002c7c <MPU_Convert_Acc_Data+0x114>)
 8002bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd2:	3305      	adds	r3, #5
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	b21a      	sxth	r2, r3
 8002bd8:	4b28      	ldr	r3, [pc, #160]	; (8002c7c <MPU_Convert_Acc_Data+0x114>)
 8002bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bdc:	3304      	adds	r3, #4
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	021b      	lsls	r3, r3, #8
 8002be2:	b21b      	sxth	r3, r3
 8002be4:	4313      	orrs	r3, r2
 8002be6:	b21b      	sxth	r3, r3
 8002be8:	ee07 3a90 	vmov	s15, r3
 8002bec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bf0:	4b22      	ldr	r3, [pc, #136]	; (8002c7c <MPU_Convert_Acc_Data+0x114>)
 8002bf2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bfa:	4b20      	ldr	r3, [pc, #128]	; (8002c7c <MPU_Convert_Acc_Data+0x114>)
 8002bfc:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	/* Filtering */
	mpu.acc[0] = (mpu.acc[0] * COEF_ACC_FILTERING) + (mpu.acc_raw[0] * (float)(1-COEF_ACC_FILTERING));
 8002c00:	4b1e      	ldr	r3, [pc, #120]	; (8002c7c <MPU_Convert_Acc_Data+0x114>)
 8002c02:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002c06:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002c80 <MPU_Convert_Acc_Data+0x118>
 8002c0a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c0e:	4b1b      	ldr	r3, [pc, #108]	; (8002c7c <MPU_Convert_Acc_Data+0x114>)
 8002c10:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002c14:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002c84 <MPU_Convert_Acc_Data+0x11c>
 8002c18:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c20:	4b16      	ldr	r3, [pc, #88]	; (8002c7c <MPU_Convert_Acc_Data+0x114>)
 8002c22:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	mpu.acc[1] = (mpu.acc[1] * COEF_ACC_FILTERING) + (mpu.acc_raw[1] * (float)(1-COEF_ACC_FILTERING));
 8002c26:	4b15      	ldr	r3, [pc, #84]	; (8002c7c <MPU_Convert_Acc_Data+0x114>)
 8002c28:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002c2c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002c80 <MPU_Convert_Acc_Data+0x118>
 8002c30:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c34:	4b11      	ldr	r3, [pc, #68]	; (8002c7c <MPU_Convert_Acc_Data+0x114>)
 8002c36:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002c3a:	eddf 6a12 	vldr	s13, [pc, #72]	; 8002c84 <MPU_Convert_Acc_Data+0x11c>
 8002c3e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c46:	4b0d      	ldr	r3, [pc, #52]	; (8002c7c <MPU_Convert_Acc_Data+0x114>)
 8002c48:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	mpu.acc[2] = (mpu.acc[2] * COEF_ACC_FILTERING) + (mpu.acc_raw[2] * (float)(1-COEF_ACC_FILTERING));
 8002c4c:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <MPU_Convert_Acc_Data+0x114>)
 8002c4e:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002c52:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002c80 <MPU_Convert_Acc_Data+0x118>
 8002c56:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c5a:	4b08      	ldr	r3, [pc, #32]	; (8002c7c <MPU_Convert_Acc_Data+0x114>)
 8002c5c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002c60:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002c84 <MPU_Convert_Acc_Data+0x11c>
 8002c64:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c6c:	4b03      	ldr	r3, [pc, #12]	; (8002c7c <MPU_Convert_Acc_Data+0x114>)
 8002c6e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
}
 8002c72:	bf00      	nop
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	200000a4 	.word	0x200000a4
 8002c80:	3f666666 	.word	0x3f666666
 8002c84:	3dccccd0 	.word	0x3dccccd0

08002c88 <MPU_Convert_Gyro_Data>:

/*
 * @brief Convert gyro bytes to measurement
 */
void MPU_Convert_Gyro_Data(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
	/* Data convertion */
	mpu.gyro_raw[0] = (int16_t)(mpu.gyro_data[1] | (mpu.gyro_data[0] << 8)) * mpu.gyro_conversion;
 8002c8c:	4b43      	ldr	r3, [pc, #268]	; (8002d9c <MPU_Convert_Gyro_Data+0x114>)
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	3301      	adds	r3, #1
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	b21a      	sxth	r2, r3
 8002c96:	4b41      	ldr	r3, [pc, #260]	; (8002d9c <MPU_Convert_Gyro_Data+0x114>)
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	021b      	lsls	r3, r3, #8
 8002c9e:	b21b      	sxth	r3, r3
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	b21b      	sxth	r3, r3
 8002ca4:	ee07 3a90 	vmov	s15, r3
 8002ca8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cac:	4b3b      	ldr	r3, [pc, #236]	; (8002d9c <MPU_Convert_Gyro_Data+0x114>)
 8002cae:	edd3 7a05 	vldr	s15, [r3, #20]
 8002cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cb6:	4b39      	ldr	r3, [pc, #228]	; (8002d9c <MPU_Convert_Gyro_Data+0x114>)
 8002cb8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	mpu.gyro_raw[1] = (int16_t)(mpu.gyro_data[3] | (mpu.gyro_data[2] << 8)) * mpu.gyro_conversion;
 8002cbc:	4b37      	ldr	r3, [pc, #220]	; (8002d9c <MPU_Convert_Gyro_Data+0x114>)
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	3303      	adds	r3, #3
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	b21a      	sxth	r2, r3
 8002cc6:	4b35      	ldr	r3, [pc, #212]	; (8002d9c <MPU_Convert_Gyro_Data+0x114>)
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	3302      	adds	r3, #2
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	021b      	lsls	r3, r3, #8
 8002cd0:	b21b      	sxth	r3, r3
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	b21b      	sxth	r3, r3
 8002cd6:	ee07 3a90 	vmov	s15, r3
 8002cda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cde:	4b2f      	ldr	r3, [pc, #188]	; (8002d9c <MPU_Convert_Gyro_Data+0x114>)
 8002ce0:	edd3 7a05 	vldr	s15, [r3, #20]
 8002ce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ce8:	4b2c      	ldr	r3, [pc, #176]	; (8002d9c <MPU_Convert_Gyro_Data+0x114>)
 8002cea:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	mpu.gyro_raw[2] = (int16_t)(mpu.gyro_data[5] | (mpu.gyro_data[4] << 8)) * mpu.gyro_conversion;
 8002cee:	4b2b      	ldr	r3, [pc, #172]	; (8002d9c <MPU_Convert_Gyro_Data+0x114>)
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	3305      	adds	r3, #5
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	b21a      	sxth	r2, r3
 8002cf8:	4b28      	ldr	r3, [pc, #160]	; (8002d9c <MPU_Convert_Gyro_Data+0x114>)
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	021b      	lsls	r3, r3, #8
 8002d02:	b21b      	sxth	r3, r3
 8002d04:	4313      	orrs	r3, r2
 8002d06:	b21b      	sxth	r3, r3
 8002d08:	ee07 3a90 	vmov	s15, r3
 8002d0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d10:	4b22      	ldr	r3, [pc, #136]	; (8002d9c <MPU_Convert_Gyro_Data+0x114>)
 8002d12:	edd3 7a05 	vldr	s15, [r3, #20]
 8002d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d1a:	4b20      	ldr	r3, [pc, #128]	; (8002d9c <MPU_Convert_Gyro_Data+0x114>)
 8002d1c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	/* Filtering */
	mpu.gyro[0] = (mpu.gyro[0] * COEF_GYRO_FILTERING) + (mpu.gyro_raw[0] * (float)(1-COEF_GYRO_FILTERING));
 8002d20:	4b1e      	ldr	r3, [pc, #120]	; (8002d9c <MPU_Convert_Gyro_Data+0x114>)
 8002d22:	edd3 7a06 	vldr	s15, [r3, #24]
 8002d26:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002da0 <MPU_Convert_Gyro_Data+0x118>
 8002d2a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d2e:	4b1b      	ldr	r3, [pc, #108]	; (8002d9c <MPU_Convert_Gyro_Data+0x114>)
 8002d30:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002d34:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002da4 <MPU_Convert_Gyro_Data+0x11c>
 8002d38:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d40:	4b16      	ldr	r3, [pc, #88]	; (8002d9c <MPU_Convert_Gyro_Data+0x114>)
 8002d42:	edc3 7a06 	vstr	s15, [r3, #24]
	mpu.gyro[1] = (mpu.gyro[1] * COEF_GYRO_FILTERING) + (mpu.gyro_raw[1] * (float)(1-COEF_GYRO_FILTERING));
 8002d46:	4b15      	ldr	r3, [pc, #84]	; (8002d9c <MPU_Convert_Gyro_Data+0x114>)
 8002d48:	edd3 7a07 	vldr	s15, [r3, #28]
 8002d4c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002da0 <MPU_Convert_Gyro_Data+0x118>
 8002d50:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d54:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <MPU_Convert_Gyro_Data+0x114>)
 8002d56:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002d5a:	eddf 6a12 	vldr	s13, [pc, #72]	; 8002da4 <MPU_Convert_Gyro_Data+0x11c>
 8002d5e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d66:	4b0d      	ldr	r3, [pc, #52]	; (8002d9c <MPU_Convert_Gyro_Data+0x114>)
 8002d68:	edc3 7a07 	vstr	s15, [r3, #28]
	mpu.gyro[2] = (mpu.gyro[2] * COEF_GYRO_FILTERING) + (mpu.gyro_raw[2] * (float)(1-COEF_GYRO_FILTERING));
 8002d6c:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <MPU_Convert_Gyro_Data+0x114>)
 8002d6e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002d72:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002da0 <MPU_Convert_Gyro_Data+0x118>
 8002d76:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d7a:	4b08      	ldr	r3, [pc, #32]	; (8002d9c <MPU_Convert_Gyro_Data+0x114>)
 8002d7c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002d80:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002da4 <MPU_Convert_Gyro_Data+0x11c>
 8002d84:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d8c:	4b03      	ldr	r3, [pc, #12]	; (8002d9c <MPU_Convert_Gyro_Data+0x114>)
 8002d8e:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8002d92:	bf00      	nop
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	200000a4 	.word	0x200000a4
 8002da0:	3f666666 	.word	0x3f666666
 8002da4:	3dccccd0 	.word	0x3dccccd0

08002da8 <MPU_Is_Ok>:

/*
 * @brief get state of the mpu
 */
bool_e MPU_Is_Ok(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
	return mpu.state == mpu_state_eOK;
 8002dac:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <MPU_Is_Ok+0x1c>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	bf0c      	ite	eq
 8002db4:	2301      	moveq	r3, #1
 8002db6:	2300      	movne	r3, #0
 8002db8:	b2db      	uxtb	r3, r3
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	200000a4 	.word	0x200000a4

08002dc8 <MPU_Rx_Complete_Callback>:

/*
 * @brief Called back on half rx cplt it
 */
bool_e MPU_Rx_Complete_Callback(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
	if(mpu.dma_state)
 8002dcc:	4b12      	ldr	r3, [pc, #72]	; (8002e18 <MPU_Rx_Complete_Callback+0x50>)
 8002dce:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d01d      	beq.n	8002e12 <MPU_Rx_Complete_Callback+0x4a>
	{
		switch(mpu.dma_state)
 8002dd6:	4b10      	ldr	r3, [pc, #64]	; (8002e18 <MPU_Rx_Complete_Callback+0x50>)
 8002dd8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8002ddc:	2b03      	cmp	r3, #3
 8002dde:	d00c      	beq.n	8002dfa <MPU_Rx_Complete_Callback+0x32>
 8002de0:	2b03      	cmp	r3, #3
 8002de2:	dc0f      	bgt.n	8002e04 <MPU_Rx_Complete_Callback+0x3c>
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d002      	beq.n	8002dee <MPU_Rx_Complete_Callback+0x26>
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d003      	beq.n	8002df4 <MPU_Rx_Complete_Callback+0x2c>
			case dma_state_eIN_PORGRESS_ALL:
				MPU_Convert_Acc_Data();
				MPU_Convert_Gyro_Data();
				break;
			default:
				break;
 8002dec:	e00a      	b.n	8002e04 <MPU_Rx_Complete_Callback+0x3c>
				MPU_Convert_Gyro_Data();
 8002dee:	f7ff ff4b 	bl	8002c88 <MPU_Convert_Gyro_Data>
				break;
 8002df2:	e008      	b.n	8002e06 <MPU_Rx_Complete_Callback+0x3e>
				MPU_Convert_Acc_Data();
 8002df4:	f7ff feb8 	bl	8002b68 <MPU_Convert_Acc_Data>
				break;
 8002df8:	e005      	b.n	8002e06 <MPU_Rx_Complete_Callback+0x3e>
				MPU_Convert_Acc_Data();
 8002dfa:	f7ff feb5 	bl	8002b68 <MPU_Convert_Acc_Data>
				MPU_Convert_Gyro_Data();
 8002dfe:	f7ff ff43 	bl	8002c88 <MPU_Convert_Gyro_Data>
				break;
 8002e02:	e000      	b.n	8002e06 <MPU_Rx_Complete_Callback+0x3e>
				break;
 8002e04:	bf00      	nop
		}
		mpu.dma_state = dma_state_eIDLE;
 8002e06:	4b04      	ldr	r3, [pc, #16]	; (8002e18 <MPU_Rx_Complete_Callback+0x50>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		return TRUE;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <MPU_Rx_Complete_Callback+0x4c>
	}
	return FALSE;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	200000a4 	.word	0x200000a4

08002e1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e22:	2300      	movs	r3, #0
 8002e24:	607b      	str	r3, [r7, #4]
 8002e26:	4b2f      	ldr	r3, [pc, #188]	; (8002ee4 <MX_DMA_Init+0xc8>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	4a2e      	ldr	r2, [pc, #184]	; (8002ee4 <MX_DMA_Init+0xc8>)
 8002e2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e30:	6313      	str	r3, [r2, #48]	; 0x30
 8002e32:	4b2c      	ldr	r3, [pc, #176]	; (8002ee4 <MX_DMA_Init+0xc8>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e3a:	607b      	str	r3, [r7, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	603b      	str	r3, [r7, #0]
 8002e42:	4b28      	ldr	r3, [pc, #160]	; (8002ee4 <MX_DMA_Init+0xc8>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	4a27      	ldr	r2, [pc, #156]	; (8002ee4 <MX_DMA_Init+0xc8>)
 8002e48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4e:	4b25      	ldr	r3, [pc, #148]	; (8002ee4 <MX_DMA_Init+0xc8>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e56:	603b      	str	r3, [r7, #0]
 8002e58:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	200b      	movs	r0, #11
 8002e60:	f001 fa1f 	bl	80042a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002e64:	200b      	movs	r0, #11
 8002e66:	f001 fa38 	bl	80042da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	200c      	movs	r0, #12
 8002e70:	f001 fa17 	bl	80042a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002e74:	200c      	movs	r0, #12
 8002e76:	f001 fa30 	bl	80042da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	200d      	movs	r0, #13
 8002e80:	f001 fa0f 	bl	80042a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002e84:	200d      	movs	r0, #13
 8002e86:	f001 fa28 	bl	80042da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	200e      	movs	r0, #14
 8002e90:	f001 fa07 	bl	80042a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002e94:	200e      	movs	r0, #14
 8002e96:	f001 fa20 	bl	80042da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	200f      	movs	r0, #15
 8002ea0:	f001 f9ff 	bl	80042a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002ea4:	200f      	movs	r0, #15
 8002ea6:	f001 fa18 	bl	80042da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002eaa:	2200      	movs	r2, #0
 8002eac:	2100      	movs	r1, #0
 8002eae:	2011      	movs	r0, #17
 8002eb0:	f001 f9f7 	bl	80042a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002eb4:	2011      	movs	r0, #17
 8002eb6:	f001 fa10 	bl	80042da <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002eba:	2200      	movs	r2, #0
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	203a      	movs	r0, #58	; 0x3a
 8002ec0:	f001 f9ef 	bl	80042a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002ec4:	203a      	movs	r0, #58	; 0x3a
 8002ec6:	f001 fa08 	bl	80042da <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002eca:	2200      	movs	r2, #0
 8002ecc:	2100      	movs	r1, #0
 8002ece:	2046      	movs	r0, #70	; 0x46
 8002ed0:	f001 f9e7 	bl	80042a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002ed4:	2046      	movs	r0, #70	; 0x46
 8002ed6:	f001 fa00 	bl	80042da <HAL_NVIC_EnableIRQ>

}
 8002eda:	bf00      	nop
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40023800 	.word	0x40023800

08002ee8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b088      	sub	sp, #32
 8002eec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eee:	f107 030c 	add.w	r3, r7, #12
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	605a      	str	r2, [r3, #4]
 8002ef8:	609a      	str	r2, [r3, #8]
 8002efa:	60da      	str	r2, [r3, #12]
 8002efc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002efe:	2300      	movs	r3, #0
 8002f00:	60bb      	str	r3, [r7, #8]
 8002f02:	4b20      	ldr	r3, [pc, #128]	; (8002f84 <MX_GPIO_Init+0x9c>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	4a1f      	ldr	r2, [pc, #124]	; (8002f84 <MX_GPIO_Init+0x9c>)
 8002f08:	f043 0304 	orr.w	r3, r3, #4
 8002f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f0e:	4b1d      	ldr	r3, [pc, #116]	; (8002f84 <MX_GPIO_Init+0x9c>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	f003 0304 	and.w	r3, r3, #4
 8002f16:	60bb      	str	r3, [r7, #8]
 8002f18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	607b      	str	r3, [r7, #4]
 8002f1e:	4b19      	ldr	r3, [pc, #100]	; (8002f84 <MX_GPIO_Init+0x9c>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	4a18      	ldr	r2, [pc, #96]	; (8002f84 <MX_GPIO_Init+0x9c>)
 8002f24:	f043 0301 	orr.w	r3, r3, #1
 8002f28:	6313      	str	r3, [r2, #48]	; 0x30
 8002f2a:	4b16      	ldr	r3, [pc, #88]	; (8002f84 <MX_GPIO_Init+0x9c>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	607b      	str	r3, [r7, #4]
 8002f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	603b      	str	r3, [r7, #0]
 8002f3a:	4b12      	ldr	r3, [pc, #72]	; (8002f84 <MX_GPIO_Init+0x9c>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	4a11      	ldr	r2, [pc, #68]	; (8002f84 <MX_GPIO_Init+0x9c>)
 8002f40:	f043 0302 	orr.w	r3, r3, #2
 8002f44:	6313      	str	r3, [r2, #48]	; 0x30
 8002f46:	4b0f      	ldr	r3, [pc, #60]	; (8002f84 <MX_GPIO_Init+0x9c>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	603b      	str	r3, [r7, #0]
 8002f50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_STATE_Pin|LED_STATE2_Pin|MPU_POWER_Pin, GPIO_PIN_RESET);
 8002f52:	2200      	movs	r2, #0
 8002f54:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8002f58:	480b      	ldr	r0, [pc, #44]	; (8002f88 <MX_GPIO_Init+0xa0>)
 8002f5a:	f001 ff91 	bl	8004e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_STATE_Pin|LED_STATE2_Pin|MPU_POWER_Pin;
 8002f5e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002f62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f64:	2301      	movs	r3, #1
 8002f66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f70:	f107 030c 	add.w	r3, r7, #12
 8002f74:	4619      	mov	r1, r3
 8002f76:	4804      	ldr	r0, [pc, #16]	; (8002f88 <MX_GPIO_Init+0xa0>)
 8002f78:	f001 fde6 	bl	8004b48 <HAL_GPIO_Init>

}
 8002f7c:	bf00      	nop
 8002f7e:	3720      	adds	r7, #32
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40023800 	.word	0x40023800
 8002f88:	40020800 	.word	0x40020800

08002f8c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f90:	4b12      	ldr	r3, [pc, #72]	; (8002fdc <MX_I2C1_Init+0x50>)
 8002f92:	4a13      	ldr	r2, [pc, #76]	; (8002fe0 <MX_I2C1_Init+0x54>)
 8002f94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002f96:	4b11      	ldr	r3, [pc, #68]	; (8002fdc <MX_I2C1_Init+0x50>)
 8002f98:	4a12      	ldr	r2, [pc, #72]	; (8002fe4 <MX_I2C1_Init+0x58>)
 8002f9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f9c:	4b0f      	ldr	r3, [pc, #60]	; (8002fdc <MX_I2C1_Init+0x50>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002fa2:	4b0e      	ldr	r3, [pc, #56]	; (8002fdc <MX_I2C1_Init+0x50>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002fa8:	4b0c      	ldr	r3, [pc, #48]	; (8002fdc <MX_I2C1_Init+0x50>)
 8002faa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002fae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002fb0:	4b0a      	ldr	r3, [pc, #40]	; (8002fdc <MX_I2C1_Init+0x50>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002fb6:	4b09      	ldr	r3, [pc, #36]	; (8002fdc <MX_I2C1_Init+0x50>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002fbc:	4b07      	ldr	r3, [pc, #28]	; (8002fdc <MX_I2C1_Init+0x50>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fc2:	4b06      	ldr	r3, [pc, #24]	; (8002fdc <MX_I2C1_Init+0x50>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002fc8:	4804      	ldr	r0, [pc, #16]	; (8002fdc <MX_I2C1_Init+0x50>)
 8002fca:	f001 ff73 	bl	8004eb4 <HAL_I2C_Init>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002fd4:	f000 f9d6 	bl	8003384 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002fd8:	bf00      	nop
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	200020c4 	.word	0x200020c4
 8002fe0:	40005400 	.word	0x40005400
 8002fe4:	00061a80 	.word	0x00061a80

08002fe8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08a      	sub	sp, #40	; 0x28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff0:	f107 0314 	add.w	r3, r7, #20
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	605a      	str	r2, [r3, #4]
 8002ffa:	609a      	str	r2, [r3, #8]
 8002ffc:	60da      	str	r2, [r3, #12]
 8002ffe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a50      	ldr	r2, [pc, #320]	; (8003148 <HAL_I2C_MspInit+0x160>)
 8003006:	4293      	cmp	r3, r2
 8003008:	f040 8099 	bne.w	800313e <HAL_I2C_MspInit+0x156>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800300c:	2300      	movs	r3, #0
 800300e:	613b      	str	r3, [r7, #16]
 8003010:	4b4e      	ldr	r3, [pc, #312]	; (800314c <HAL_I2C_MspInit+0x164>)
 8003012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003014:	4a4d      	ldr	r2, [pc, #308]	; (800314c <HAL_I2C_MspInit+0x164>)
 8003016:	f043 0302 	orr.w	r3, r3, #2
 800301a:	6313      	str	r3, [r2, #48]	; 0x30
 800301c:	4b4b      	ldr	r3, [pc, #300]	; (800314c <HAL_I2C_MspInit+0x164>)
 800301e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	613b      	str	r3, [r7, #16]
 8003026:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003028:	f44f 7340 	mov.w	r3, #768	; 0x300
 800302c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800302e:	2312      	movs	r3, #18
 8003030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003032:	2300      	movs	r3, #0
 8003034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003036:	2303      	movs	r3, #3
 8003038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800303a:	2304      	movs	r3, #4
 800303c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800303e:	f107 0314 	add.w	r3, r7, #20
 8003042:	4619      	mov	r1, r3
 8003044:	4842      	ldr	r0, [pc, #264]	; (8003150 <HAL_I2C_MspInit+0x168>)
 8003046:	f001 fd7f 	bl	8004b48 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800304a:	2300      	movs	r3, #0
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	4b3f      	ldr	r3, [pc, #252]	; (800314c <HAL_I2C_MspInit+0x164>)
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	4a3e      	ldr	r2, [pc, #248]	; (800314c <HAL_I2C_MspInit+0x164>)
 8003054:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003058:	6413      	str	r3, [r2, #64]	; 0x40
 800305a:	4b3c      	ldr	r3, [pc, #240]	; (800314c <HAL_I2C_MspInit+0x164>)
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8003066:	4b3b      	ldr	r3, [pc, #236]	; (8003154 <HAL_I2C_MspInit+0x16c>)
 8003068:	4a3b      	ldr	r2, [pc, #236]	; (8003158 <HAL_I2C_MspInit+0x170>)
 800306a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800306c:	4b39      	ldr	r3, [pc, #228]	; (8003154 <HAL_I2C_MspInit+0x16c>)
 800306e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003072:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003074:	4b37      	ldr	r3, [pc, #220]	; (8003154 <HAL_I2C_MspInit+0x16c>)
 8003076:	2200      	movs	r2, #0
 8003078:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800307a:	4b36      	ldr	r3, [pc, #216]	; (8003154 <HAL_I2C_MspInit+0x16c>)
 800307c:	2200      	movs	r2, #0
 800307e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003080:	4b34      	ldr	r3, [pc, #208]	; (8003154 <HAL_I2C_MspInit+0x16c>)
 8003082:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003086:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003088:	4b32      	ldr	r3, [pc, #200]	; (8003154 <HAL_I2C_MspInit+0x16c>)
 800308a:	2200      	movs	r2, #0
 800308c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800308e:	4b31      	ldr	r3, [pc, #196]	; (8003154 <HAL_I2C_MspInit+0x16c>)
 8003090:	2200      	movs	r2, #0
 8003092:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003094:	4b2f      	ldr	r3, [pc, #188]	; (8003154 <HAL_I2C_MspInit+0x16c>)
 8003096:	2200      	movs	r2, #0
 8003098:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800309a:	4b2e      	ldr	r3, [pc, #184]	; (8003154 <HAL_I2C_MspInit+0x16c>)
 800309c:	2200      	movs	r2, #0
 800309e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030a0:	4b2c      	ldr	r3, [pc, #176]	; (8003154 <HAL_I2C_MspInit+0x16c>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80030a6:	482b      	ldr	r0, [pc, #172]	; (8003154 <HAL_I2C_MspInit+0x16c>)
 80030a8:	f001 f932 	bl	8004310 <HAL_DMA_Init>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 80030b2:	f000 f967 	bl	8003384 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a26      	ldr	r2, [pc, #152]	; (8003154 <HAL_I2C_MspInit+0x16c>)
 80030ba:	639a      	str	r2, [r3, #56]	; 0x38
 80030bc:	4a25      	ldr	r2, [pc, #148]	; (8003154 <HAL_I2C_MspInit+0x16c>)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80030c2:	4b26      	ldr	r3, [pc, #152]	; (800315c <HAL_I2C_MspInit+0x174>)
 80030c4:	4a26      	ldr	r2, [pc, #152]	; (8003160 <HAL_I2C_MspInit+0x178>)
 80030c6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80030c8:	4b24      	ldr	r3, [pc, #144]	; (800315c <HAL_I2C_MspInit+0x174>)
 80030ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030ce:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030d0:	4b22      	ldr	r3, [pc, #136]	; (800315c <HAL_I2C_MspInit+0x174>)
 80030d2:	2240      	movs	r2, #64	; 0x40
 80030d4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030d6:	4b21      	ldr	r3, [pc, #132]	; (800315c <HAL_I2C_MspInit+0x174>)
 80030d8:	2200      	movs	r2, #0
 80030da:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030dc:	4b1f      	ldr	r3, [pc, #124]	; (800315c <HAL_I2C_MspInit+0x174>)
 80030de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030e2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030e4:	4b1d      	ldr	r3, [pc, #116]	; (800315c <HAL_I2C_MspInit+0x174>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030ea:	4b1c      	ldr	r3, [pc, #112]	; (800315c <HAL_I2C_MspInit+0x174>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80030f0:	4b1a      	ldr	r3, [pc, #104]	; (800315c <HAL_I2C_MspInit+0x174>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80030f6:	4b19      	ldr	r3, [pc, #100]	; (800315c <HAL_I2C_MspInit+0x174>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030fc:	4b17      	ldr	r3, [pc, #92]	; (800315c <HAL_I2C_MspInit+0x174>)
 80030fe:	2200      	movs	r2, #0
 8003100:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003102:	4816      	ldr	r0, [pc, #88]	; (800315c <HAL_I2C_MspInit+0x174>)
 8003104:	f001 f904 	bl	8004310 <HAL_DMA_Init>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 800310e:	f000 f939 	bl	8003384 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a11      	ldr	r2, [pc, #68]	; (800315c <HAL_I2C_MspInit+0x174>)
 8003116:	635a      	str	r2, [r3, #52]	; 0x34
 8003118:	4a10      	ldr	r2, [pc, #64]	; (800315c <HAL_I2C_MspInit+0x174>)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800311e:	2200      	movs	r2, #0
 8003120:	2100      	movs	r1, #0
 8003122:	201f      	movs	r0, #31
 8003124:	f001 f8bd 	bl	80042a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003128:	201f      	movs	r0, #31
 800312a:	f001 f8d6 	bl	80042da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800312e:	2200      	movs	r2, #0
 8003130:	2100      	movs	r1, #0
 8003132:	2020      	movs	r0, #32
 8003134:	f001 f8b5 	bl	80042a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003138:	2020      	movs	r0, #32
 800313a:	f001 f8ce 	bl	80042da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800313e:	bf00      	nop
 8003140:	3728      	adds	r7, #40	; 0x28
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40005400 	.word	0x40005400
 800314c:	40023800 	.word	0x40023800
 8003150:	40020400 	.word	0x40020400
 8003154:	20002118 	.word	0x20002118
 8003158:	40026010 	.word	0x40026010
 800315c:	20002064 	.word	0x20002064
 8003160:	400260a0 	.word	0x400260a0

08003164 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800316a:	f000 ff29 	bl	8003fc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800316e:	f000 f89f 	bl	80032b0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003172:	f7ff feb9 	bl	8002ee8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003176:	f7ff fe51 	bl	8002e1c <MX_DMA_Init>
  MX_UART4_Init();
 800317a:	f000 fb41 	bl	8003800 <MX_UART4_Init>
  MX_USART1_UART_Init();
 800317e:	f000 fb69 	bl	8003854 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8003182:	f000 fa29 	bl	80035d8 <MX_TIM3_Init>
  MX_I2C1_Init();
 8003186:	f7ff ff01 	bl	8002f8c <MX_I2C1_Init>
  MX_USART3_UART_Init();
 800318a:	f000 fb8d 	bl	80038a8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Wait for everyone to start */
  HAL_Delay(15);
 800318e:	200f      	movs	r0, #15
 8003190:	f000 ff88 	bl	80040a4 <HAL_Delay>
  /* Peripherals initialization */
  UART_Init();
 8003194:	f7ff f948 	bl	8002428 <UART_Init>
  /* Task definition 	Name						Init process					Main process						1ms it process						Gyro data callback process */
  TASK_MANAGER_Add_Task("Gyro", 					MPU_Init, 						NULL, 								MPU_Read_All_Dma,  					NULL);
 8003198:	2300      	movs	r3, #0
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	4b29      	ldr	r3, [pc, #164]	; (8003244 <main+0xe0>)
 800319e:	2200      	movs	r2, #0
 80031a0:	4929      	ldr	r1, [pc, #164]	; (8003248 <main+0xe4>)
 80031a2:	482a      	ldr	r0, [pc, #168]	; (800324c <main+0xe8>)
 80031a4:	f000 feaa 	bl	8003efc <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("Complementary Filter", 	COMPLEMENTARY_FILTER_Init, 		NULL, 								NULL,								COMPLEMENTARY_FILTER_Process);
 80031a8:	4b29      	ldr	r3, [pc, #164]	; (8003250 <main+0xec>)
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	2300      	movs	r3, #0
 80031ae:	2200      	movs	r2, #0
 80031b0:	4928      	ldr	r1, [pc, #160]	; (8003254 <main+0xf0>)
 80031b2:	4829      	ldr	r0, [pc, #164]	; (8003258 <main+0xf4>)
 80031b4:	f000 fea2 	bl	8003efc <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("Controller", 				CONTROLLER_Init, 				NULL, 								NULL, 								CONTROLLER_Process);
 80031b8:	4b28      	ldr	r3, [pc, #160]	; (800325c <main+0xf8>)
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	2300      	movs	r3, #0
 80031be:	2200      	movs	r2, #0
 80031c0:	4927      	ldr	r1, [pc, #156]	; (8003260 <main+0xfc>)
 80031c2:	4828      	ldr	r0, [pc, #160]	; (8003264 <main+0x100>)
 80031c4:	f000 fe9a 	bl	8003efc <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("Motor Mixer", 				NULL, 							NULL, 								MOTOR_MIXER_Process, 				MOTOR_MIXER_Process);
 80031c8:	4b27      	ldr	r3, [pc, #156]	; (8003268 <main+0x104>)
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	4b26      	ldr	r3, [pc, #152]	; (8003268 <main+0x104>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	2100      	movs	r1, #0
 80031d2:	4826      	ldr	r0, [pc, #152]	; (800326c <main+0x108>)
 80031d4:	f000 fe92 	bl	8003efc <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("Motors",					MOTOR_Init, 					NULL, 								NULL, 								MOTOR_Process);
 80031d8:	4b25      	ldr	r3, [pc, #148]	; (8003270 <main+0x10c>)
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	2300      	movs	r3, #0
 80031de:	2200      	movs	r2, #0
 80031e0:	4924      	ldr	r1, [pc, #144]	; (8003274 <main+0x110>)
 80031e2:	4825      	ldr	r0, [pc, #148]	; (8003278 <main+0x114>)
 80031e4:	f000 fe8a 	bl	8003efc <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("Radio", 					RADIO_Process_Init, 			RADIO_Process_Main, 				NULL, 								NULL);
 80031e8:	2300      	movs	r3, #0
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	2300      	movs	r3, #0
 80031ee:	4a23      	ldr	r2, [pc, #140]	; (800327c <main+0x118>)
 80031f0:	4923      	ldr	r1, [pc, #140]	; (8003280 <main+0x11c>)
 80031f2:	4824      	ldr	r0, [pc, #144]	; (8003284 <main+0x120>)
 80031f4:	f000 fe82 	bl	8003efc <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("Data Logger", 				DATA_LOGGER_Init, 				DATA_LOGGER_Main, 					NULL, 								NULL);
 80031f8:	2300      	movs	r3, #0
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	2300      	movs	r3, #0
 80031fe:	4a22      	ldr	r2, [pc, #136]	; (8003288 <main+0x124>)
 8003200:	4922      	ldr	r1, [pc, #136]	; (800328c <main+0x128>)
 8003202:	4823      	ldr	r0, [pc, #140]	; (8003290 <main+0x12c>)
 8003204:	f000 fe7a 	bl	8003efc <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("High Level", 				HIGH_LEVEL_Init, 				HIGH_LEVEL_Process_Main, 			NULL, 								NULL);
 8003208:	2300      	movs	r3, #0
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	2300      	movs	r3, #0
 800320e:	4a21      	ldr	r2, [pc, #132]	; (8003294 <main+0x130>)
 8003210:	4921      	ldr	r1, [pc, #132]	; (8003298 <main+0x134>)
 8003212:	4822      	ldr	r0, [pc, #136]	; (800329c <main+0x138>)
 8003214:	f000 fe72 	bl	8003efc <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("Led", 						NULL, 							NULL, 								Led_main_ms, NULL);
 8003218:	2300      	movs	r3, #0
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	4b20      	ldr	r3, [pc, #128]	; (80032a0 <main+0x13c>)
 800321e:	2200      	movs	r2, #0
 8003220:	2100      	movs	r1, #0
 8003222:	4820      	ldr	r0, [pc, #128]	; (80032a4 <main+0x140>)
 8003224:	f000 fe6a 	bl	8003efc <TASK_MANAGER_Add_Task>
  TASK_MANAGER_Add_Task("Supervisor", 				NULL, 							NULL, 								SUPERVISOR_Process_Ms, NULL);
 8003228:	2300      	movs	r3, #0
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	4b1e      	ldr	r3, [pc, #120]	; (80032a8 <main+0x144>)
 800322e:	2200      	movs	r2, #0
 8003230:	2100      	movs	r1, #0
 8003232:	481e      	ldr	r0, [pc, #120]	; (80032ac <main+0x148>)
 8003234:	f000 fe62 	bl	8003efc <TASK_MANAGER_Add_Task>

  /* System initialization */
  TASK_MANAGER_Init();
 8003238:	f000 fda6 	bl	8003d88 <TASK_MANAGER_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  TASK_MANAGER_Main();
 800323c:	f000 fdd4 	bl	8003de8 <TASK_MANAGER_Main>
 8003240:	e7fc      	b.n	800323c <main+0xd8>
 8003242:	bf00      	nop
 8003244:	08002b1d 	.word	0x08002b1d
 8003248:	08002941 	.word	0x08002941
 800324c:	0800b748 	.word	0x0800b748
 8003250:	080004fd 	.word	0x080004fd
 8003254:	080004c1 	.word	0x080004c1
 8003258:	0800b750 	.word	0x0800b750
 800325c:	08000891 	.word	0x08000891
 8003260:	0800085d 	.word	0x0800085d
 8003264:	0800b768 	.word	0x0800b768
 8003268:	08001ae1 	.word	0x08001ae1
 800326c:	0800b774 	.word	0x0800b774
 8003270:	08001bd9 	.word	0x08001bd9
 8003274:	08001bc9 	.word	0x08001bc9
 8003278:	0800b780 	.word	0x0800b780
 800327c:	080028d5 	.word	0x080028d5
 8003280:	080028c1 	.word	0x080028c1
 8003284:	0800b788 	.word	0x0800b788
 8003288:	08000e39 	.word	0x08000e39
 800328c:	08000a3d 	.word	0x08000a3d
 8003290:	0800b790 	.word	0x0800b790
 8003294:	08001715 	.word	0x08001715
 8003298:	080016d5 	.word	0x080016d5
 800329c:	0800b79c 	.word	0x0800b79c
 80032a0:	08001999 	.word	0x08001999
 80032a4:	0800b7a8 	.word	0x0800b7a8
 80032a8:	08003d4f 	.word	0x08003d4f
 80032ac:	0800b7ac 	.word	0x0800b7ac

080032b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b094      	sub	sp, #80	; 0x50
 80032b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032b6:	f107 0320 	add.w	r3, r7, #32
 80032ba:	2230      	movs	r2, #48	; 0x30
 80032bc:	2100      	movs	r1, #0
 80032be:	4618      	mov	r0, r3
 80032c0:	f007 fafe 	bl	800a8c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032c4:	f107 030c 	add.w	r3, r7, #12
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	605a      	str	r2, [r3, #4]
 80032ce:	609a      	str	r2, [r3, #8]
 80032d0:	60da      	str	r2, [r3, #12]
 80032d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80032d4:	2300      	movs	r3, #0
 80032d6:	60bb      	str	r3, [r7, #8]
 80032d8:	4b28      	ldr	r3, [pc, #160]	; (800337c <SystemClock_Config+0xcc>)
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	4a27      	ldr	r2, [pc, #156]	; (800337c <SystemClock_Config+0xcc>)
 80032de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e2:	6413      	str	r3, [r2, #64]	; 0x40
 80032e4:	4b25      	ldr	r3, [pc, #148]	; (800337c <SystemClock_Config+0xcc>)
 80032e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ec:	60bb      	str	r3, [r7, #8]
 80032ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80032f0:	2300      	movs	r3, #0
 80032f2:	607b      	str	r3, [r7, #4]
 80032f4:	4b22      	ldr	r3, [pc, #136]	; (8003380 <SystemClock_Config+0xd0>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a21      	ldr	r2, [pc, #132]	; (8003380 <SystemClock_Config+0xd0>)
 80032fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032fe:	6013      	str	r3, [r2, #0]
 8003300:	4b1f      	ldr	r3, [pc, #124]	; (8003380 <SystemClock_Config+0xd0>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003308:	607b      	str	r3, [r7, #4]
 800330a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800330c:	2302      	movs	r3, #2
 800330e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003310:	2301      	movs	r3, #1
 8003312:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003314:	2310      	movs	r3, #16
 8003316:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003318:	2302      	movs	r3, #2
 800331a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800331c:	2300      	movs	r3, #0
 800331e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003320:	2308      	movs	r3, #8
 8003322:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003324:	23a8      	movs	r3, #168	; 0xa8
 8003326:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003328:	2302      	movs	r3, #2
 800332a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800332c:	2304      	movs	r3, #4
 800332e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003330:	f107 0320 	add.w	r3, r7, #32
 8003334:	4618      	mov	r0, r3
 8003336:	f004 fe17 	bl	8007f68 <HAL_RCC_OscConfig>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003340:	f000 f820 	bl	8003384 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003344:	230f      	movs	r3, #15
 8003346:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003348:	2302      	movs	r3, #2
 800334a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800334c:	2300      	movs	r3, #0
 800334e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003350:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003354:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003356:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800335a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800335c:	f107 030c 	add.w	r3, r7, #12
 8003360:	2105      	movs	r1, #5
 8003362:	4618      	mov	r0, r3
 8003364:	f005 f878 	bl	8008458 <HAL_RCC_ClockConfig>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800336e:	f000 f809 	bl	8003384 <Error_Handler>
  }
}
 8003372:	bf00      	nop
 8003374:	3750      	adds	r7, #80	; 0x50
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	40023800 	.word	0x40023800
 8003380:	40007000 	.word	0x40007000

08003384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003388:	b672      	cpsid	i
}
 800338a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800338c:	e7fe      	b.n	800338c <Error_Handler+0x8>
	...

08003390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003396:	2300      	movs	r3, #0
 8003398:	607b      	str	r3, [r7, #4]
 800339a:	4b10      	ldr	r3, [pc, #64]	; (80033dc <HAL_MspInit+0x4c>)
 800339c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339e:	4a0f      	ldr	r2, [pc, #60]	; (80033dc <HAL_MspInit+0x4c>)
 80033a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033a4:	6453      	str	r3, [r2, #68]	; 0x44
 80033a6:	4b0d      	ldr	r3, [pc, #52]	; (80033dc <HAL_MspInit+0x4c>)
 80033a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033ae:	607b      	str	r3, [r7, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033b2:	2300      	movs	r3, #0
 80033b4:	603b      	str	r3, [r7, #0]
 80033b6:	4b09      	ldr	r3, [pc, #36]	; (80033dc <HAL_MspInit+0x4c>)
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	4a08      	ldr	r2, [pc, #32]	; (80033dc <HAL_MspInit+0x4c>)
 80033bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c0:	6413      	str	r3, [r2, #64]	; 0x40
 80033c2:	4b06      	ldr	r3, [pc, #24]	; (80033dc <HAL_MspInit+0x4c>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ca:	603b      	str	r3, [r7, #0]
 80033cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	40023800 	.word	0x40023800

080033e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033e4:	e7fe      	b.n	80033e4 <NMI_Handler+0x4>

080033e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033e6:	b480      	push	{r7}
 80033e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033ea:	e7fe      	b.n	80033ea <HardFault_Handler+0x4>

080033ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033f0:	e7fe      	b.n	80033f0 <MemManage_Handler+0x4>

080033f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033f2:	b480      	push	{r7}
 80033f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033f6:	e7fe      	b.n	80033f6 <BusFault_Handler+0x4>

080033f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033fc:	e7fe      	b.n	80033fc <UsageFault_Handler+0x4>

080033fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033fe:	b480      	push	{r7}
 8003400:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003402:	bf00      	nop
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003410:	bf00      	nop
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800341a:	b480      	push	{r7}
 800341c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800341e:	bf00      	nop
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800342c:	f000 fe1a 	bl	8004064 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  TASK_MANAGER_It_ms();
 8003430:	f000 fd06 	bl	8003e40 <TASK_MANAGER_It_ms>
  /* USER CODE END SysTick_IRQn 1 */
}
 8003434:	bf00      	nop
 8003436:	bd80      	pop	{r7, pc}

08003438 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800343c:	4802      	ldr	r0, [pc, #8]	; (8003448 <DMA1_Stream0_IRQHandler+0x10>)
 800343e:	f001 f8ff 	bl	8004640 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003442:	bf00      	nop
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	20002118 	.word	0x20002118

0800344c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003450:	4802      	ldr	r0, [pc, #8]	; (800345c <DMA1_Stream1_IRQHandler+0x10>)
 8003452:	f001 f8f5 	bl	8004640 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003456:	bf00      	nop
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	20002220 	.word	0x20002220

08003460 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003464:	4802      	ldr	r0, [pc, #8]	; (8003470 <DMA1_Stream2_IRQHandler+0x10>)
 8003466:	f001 f8eb 	bl	8004640 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800346a:	bf00      	nop
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	200021c0 	.word	0x200021c0

08003474 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003478:	4802      	ldr	r0, [pc, #8]	; (8003484 <DMA1_Stream3_IRQHandler+0x10>)
 800347a:	f001 f8e1 	bl	8004640 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800347e:	bf00      	nop
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	200022c4 	.word	0x200022c4

08003488 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800348c:	4802      	ldr	r0, [pc, #8]	; (8003498 <DMA1_Stream4_IRQHandler+0x10>)
 800348e:	f001 f8d7 	bl	8004640 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003492:	bf00      	nop
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	2000246c 	.word	0x2000246c

0800349c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80034a0:	4802      	ldr	r0, [pc, #8]	; (80034ac <DMA1_Stream6_IRQHandler+0x10>)
 80034a2:	f001 f8cd 	bl	8004640 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80034a6:	bf00      	nop
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20002064 	.word	0x20002064

080034b0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80034b4:	4802      	ldr	r0, [pc, #8]	; (80034c0 <I2C1_EV_IRQHandler+0x10>)
 80034b6:	f002 fc23 	bl	8005d00 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80034ba:	bf00      	nop
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	200020c4 	.word	0x200020c4

080034c4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80034c8:	4802      	ldr	r0, [pc, #8]	; (80034d4 <I2C1_ER_IRQHandler+0x10>)
 80034ca:	f002 fd8a 	bl	8005fe2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80034ce:	bf00      	nop
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	200020c4 	.word	0x200020c4

080034d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80034dc:	4803      	ldr	r0, [pc, #12]	; (80034ec <USART1_IRQHandler+0x14>)
 80034de:	f006 f97d 	bl	80097dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  UART_Idle_Line_Callback(uart_e1);
 80034e2:	2000      	movs	r0, #0
 80034e4:	f7fe fe56 	bl	8002194 <UART_Idle_Line_Callback>
  /* USER CODE END USART1_IRQn 1 */
}
 80034e8:	bf00      	nop
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	200023e4 	.word	0x200023e4

080034f0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80034f4:	4803      	ldr	r0, [pc, #12]	; (8003504 <USART3_IRQHandler+0x14>)
 80034f6:	f006 f971 	bl	80097dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  UART_Idle_Line_Callback(uart_e3);
 80034fa:	2001      	movs	r0, #1
 80034fc:	f7fe fe4a 	bl	8002194 <UART_Idle_Line_Callback>
  /* USER CODE END USART3_IRQn 1 */
}
 8003500:	bf00      	nop
 8003502:	bd80      	pop	{r7, pc}
 8003504:	20002280 	.word	0x20002280

08003508 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800350c:	4803      	ldr	r0, [pc, #12]	; (800351c <UART4_IRQHandler+0x14>)
 800350e:	f006 f965 	bl	80097dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  UART_Idle_Line_Callback(uart_e4);
 8003512:	2002      	movs	r0, #2
 8003514:	f7fe fe3e 	bl	8002194 <UART_Idle_Line_Callback>
  /* USER CODE END UART4_IRQn 1 */
}
 8003518:	bf00      	nop
 800351a:	bd80      	pop	{r7, pc}
 800351c:	20002428 	.word	0x20002428

08003520 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003524:	4802      	ldr	r0, [pc, #8]	; (8003530 <DMA2_Stream2_IRQHandler+0x10>)
 8003526:	f001 f88b 	bl	8004640 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800352a:	bf00      	nop
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	20002384 	.word	0x20002384

08003534 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003538:	4802      	ldr	r0, [pc, #8]	; (8003544 <DMA2_Stream7_IRQHandler+0x10>)
 800353a:	f001 f881 	bl	8004640 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800353e:	bf00      	nop
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	20002324 	.word	0x20002324

08003548 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
	if(huart == &huart4)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a0d      	ldr	r2, [pc, #52]	; (8003588 <HAL_UART_TxCpltCallback+0x40>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d103      	bne.n	8003560 <HAL_UART_TxCpltCallback+0x18>
	{
		UART_Transfer_Complete_Callback(uart_e4);
 8003558:	2002      	movs	r0, #2
 800355a:	f7fe fe69 	bl	8002230 <UART_Transfer_Complete_Callback>
	}
	else if(huart == &huart3)
	{
		UART_Transfer_Complete_Callback(uart_e3);
	}
}
 800355e:	e00e      	b.n	800357e <HAL_UART_TxCpltCallback+0x36>
	else if(huart == &huart1)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a0a      	ldr	r2, [pc, #40]	; (800358c <HAL_UART_TxCpltCallback+0x44>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d103      	bne.n	8003570 <HAL_UART_TxCpltCallback+0x28>
		UART_Transfer_Complete_Callback(uart_e1);
 8003568:	2000      	movs	r0, #0
 800356a:	f7fe fe61 	bl	8002230 <UART_Transfer_Complete_Callback>
}
 800356e:	e006      	b.n	800357e <HAL_UART_TxCpltCallback+0x36>
	else if(huart == &huart3)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a07      	ldr	r2, [pc, #28]	; (8003590 <HAL_UART_TxCpltCallback+0x48>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d102      	bne.n	800357e <HAL_UART_TxCpltCallback+0x36>
		UART_Transfer_Complete_Callback(uart_e3);
 8003578:	2001      	movs	r0, #1
 800357a:	f7fe fe59 	bl	8002230 <UART_Transfer_Complete_Callback>
}
 800357e:	bf00      	nop
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	20002428 	.word	0x20002428
 800358c:	200023e4 	.word	0x200023e4
 8003590:	20002280 	.word	0x20002280

08003594 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
	if(MPU_Rx_Complete_Callback())
 800359c:	f7ff fc14 	bl	8002dc8 <MPU_Rx_Complete_Callback>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <HAL_I2C_MemRxCpltCallback+0x16>
	{
	  TASK_MANAGER_Gyro_Data_Ready();
 80035a6:	f000 fc7d 	bl	8003ea4 <TASK_MANAGER_Gyro_Data_Ready>
	}
}
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
	...

080035b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035b8:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <SystemInit+0x20>)
 80035ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035be:	4a05      	ldr	r2, [pc, #20]	; (80035d4 <SystemInit+0x20>)
 80035c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035c8:	bf00      	nop
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	e000ed00 	.word	0xe000ed00

080035d8 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b08e      	sub	sp, #56	; 0x38
 80035dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	605a      	str	r2, [r3, #4]
 80035e8:	609a      	str	r2, [r3, #8]
 80035ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035ec:	f107 0320 	add.w	r3, r7, #32
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035f6:	1d3b      	adds	r3, r7, #4
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	605a      	str	r2, [r3, #4]
 80035fe:	609a      	str	r2, [r3, #8]
 8003600:	60da      	str	r2, [r3, #12]
 8003602:	611a      	str	r2, [r3, #16]
 8003604:	615a      	str	r2, [r3, #20]
 8003606:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003608:	4b3d      	ldr	r3, [pc, #244]	; (8003700 <MX_TIM3_Init+0x128>)
 800360a:	4a3e      	ldr	r2, [pc, #248]	; (8003704 <MX_TIM3_Init+0x12c>)
 800360c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 800360e:	4b3c      	ldr	r3, [pc, #240]	; (8003700 <MX_TIM3_Init+0x128>)
 8003610:	2253      	movs	r2, #83	; 0x53
 8003612:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003614:	4b3a      	ldr	r3, [pc, #232]	; (8003700 <MX_TIM3_Init+0x128>)
 8003616:	2200      	movs	r2, #0
 8003618:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3999;
 800361a:	4b39      	ldr	r3, [pc, #228]	; (8003700 <MX_TIM3_Init+0x128>)
 800361c:	f640 729f 	movw	r2, #3999	; 0xf9f
 8003620:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003622:	4b37      	ldr	r3, [pc, #220]	; (8003700 <MX_TIM3_Init+0x128>)
 8003624:	2200      	movs	r2, #0
 8003626:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003628:	4b35      	ldr	r3, [pc, #212]	; (8003700 <MX_TIM3_Init+0x128>)
 800362a:	2280      	movs	r2, #128	; 0x80
 800362c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800362e:	4834      	ldr	r0, [pc, #208]	; (8003700 <MX_TIM3_Init+0x128>)
 8003630:	f005 f8e2 	bl	80087f8 <HAL_TIM_Base_Init>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800363a:	f7ff fea3 	bl	8003384 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800363e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003642:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003644:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003648:	4619      	mov	r1, r3
 800364a:	482d      	ldr	r0, [pc, #180]	; (8003700 <MX_TIM3_Init+0x128>)
 800364c:	f005 fb76 	bl	8008d3c <HAL_TIM_ConfigClockSource>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003656:	f7ff fe95 	bl	8003384 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800365a:	4829      	ldr	r0, [pc, #164]	; (8003700 <MX_TIM3_Init+0x128>)
 800365c:	f005 f91b 	bl	8008896 <HAL_TIM_PWM_Init>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003666:	f7ff fe8d 	bl	8003384 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800366a:	2300      	movs	r3, #0
 800366c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800366e:	2300      	movs	r3, #0
 8003670:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003672:	f107 0320 	add.w	r3, r7, #32
 8003676:	4619      	mov	r1, r3
 8003678:	4821      	ldr	r0, [pc, #132]	; (8003700 <MX_TIM3_Init+0x128>)
 800367a:	f005 ff37 	bl	80094ec <HAL_TIMEx_MasterConfigSynchronization>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003684:	f7ff fe7e 	bl	8003384 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003688:	2360      	movs	r3, #96	; 0x60
 800368a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 999;
 800368c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003690:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003696:	2300      	movs	r3, #0
 8003698:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800369a:	1d3b      	adds	r3, r7, #4
 800369c:	2200      	movs	r2, #0
 800369e:	4619      	mov	r1, r3
 80036a0:	4817      	ldr	r0, [pc, #92]	; (8003700 <MX_TIM3_Init+0x128>)
 80036a2:	f005 fa89 	bl	8008bb8 <HAL_TIM_PWM_ConfigChannel>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80036ac:	f7ff fe6a 	bl	8003384 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80036b0:	1d3b      	adds	r3, r7, #4
 80036b2:	2204      	movs	r2, #4
 80036b4:	4619      	mov	r1, r3
 80036b6:	4812      	ldr	r0, [pc, #72]	; (8003700 <MX_TIM3_Init+0x128>)
 80036b8:	f005 fa7e 	bl	8008bb8 <HAL_TIM_PWM_ConfigChannel>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80036c2:	f7ff fe5f 	bl	8003384 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80036c6:	1d3b      	adds	r3, r7, #4
 80036c8:	2208      	movs	r2, #8
 80036ca:	4619      	mov	r1, r3
 80036cc:	480c      	ldr	r0, [pc, #48]	; (8003700 <MX_TIM3_Init+0x128>)
 80036ce:	f005 fa73 	bl	8008bb8 <HAL_TIM_PWM_ConfigChannel>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80036d8:	f7ff fe54 	bl	8003384 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80036dc:	1d3b      	adds	r3, r7, #4
 80036de:	220c      	movs	r2, #12
 80036e0:	4619      	mov	r1, r3
 80036e2:	4807      	ldr	r0, [pc, #28]	; (8003700 <MX_TIM3_Init+0x128>)
 80036e4:	f005 fa68 	bl	8008bb8 <HAL_TIM_PWM_ConfigChannel>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 80036ee:	f7ff fe49 	bl	8003384 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80036f2:	4803      	ldr	r0, [pc, #12]	; (8003700 <MX_TIM3_Init+0x128>)
 80036f4:	f000 f82a 	bl	800374c <HAL_TIM_MspPostInit>

}
 80036f8:	bf00      	nop
 80036fa:	3738      	adds	r7, #56	; 0x38
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	20002178 	.word	0x20002178
 8003704:	40000400 	.word	0x40000400

08003708 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a0b      	ldr	r2, [pc, #44]	; (8003744 <HAL_TIM_Base_MspInit+0x3c>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d10d      	bne.n	8003736 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800371a:	2300      	movs	r3, #0
 800371c:	60fb      	str	r3, [r7, #12]
 800371e:	4b0a      	ldr	r3, [pc, #40]	; (8003748 <HAL_TIM_Base_MspInit+0x40>)
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	4a09      	ldr	r2, [pc, #36]	; (8003748 <HAL_TIM_Base_MspInit+0x40>)
 8003724:	f043 0302 	orr.w	r3, r3, #2
 8003728:	6413      	str	r3, [r2, #64]	; 0x40
 800372a:	4b07      	ldr	r3, [pc, #28]	; (8003748 <HAL_TIM_Base_MspInit+0x40>)
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003736:	bf00      	nop
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	40000400 	.word	0x40000400
 8003748:	40023800 	.word	0x40023800

0800374c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b08a      	sub	sp, #40	; 0x28
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003754:	f107 0314 	add.w	r3, r7, #20
 8003758:	2200      	movs	r2, #0
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	605a      	str	r2, [r3, #4]
 800375e:	609a      	str	r2, [r3, #8]
 8003760:	60da      	str	r2, [r3, #12]
 8003762:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a21      	ldr	r2, [pc, #132]	; (80037f0 <HAL_TIM_MspPostInit+0xa4>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d13b      	bne.n	80037e6 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800376e:	2300      	movs	r3, #0
 8003770:	613b      	str	r3, [r7, #16]
 8003772:	4b20      	ldr	r3, [pc, #128]	; (80037f4 <HAL_TIM_MspPostInit+0xa8>)
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	4a1f      	ldr	r2, [pc, #124]	; (80037f4 <HAL_TIM_MspPostInit+0xa8>)
 8003778:	f043 0301 	orr.w	r3, r3, #1
 800377c:	6313      	str	r3, [r2, #48]	; 0x30
 800377e:	4b1d      	ldr	r3, [pc, #116]	; (80037f4 <HAL_TIM_MspPostInit+0xa8>)
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	613b      	str	r3, [r7, #16]
 8003788:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800378a:	2300      	movs	r3, #0
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	4b19      	ldr	r3, [pc, #100]	; (80037f4 <HAL_TIM_MspPostInit+0xa8>)
 8003790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003792:	4a18      	ldr	r2, [pc, #96]	; (80037f4 <HAL_TIM_MspPostInit+0xa8>)
 8003794:	f043 0302 	orr.w	r3, r3, #2
 8003798:	6313      	str	r3, [r2, #48]	; 0x30
 800379a:	4b16      	ldr	r3, [pc, #88]	; (80037f4 <HAL_TIM_MspPostInit+0xa8>)
 800379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80037a6:	23c0      	movs	r3, #192	; 0xc0
 80037a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037aa:	2302      	movs	r3, #2
 80037ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ae:	2300      	movs	r3, #0
 80037b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037b2:	2300      	movs	r3, #0
 80037b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80037b6:	2302      	movs	r3, #2
 80037b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ba:	f107 0314 	add.w	r3, r7, #20
 80037be:	4619      	mov	r1, r3
 80037c0:	480d      	ldr	r0, [pc, #52]	; (80037f8 <HAL_TIM_MspPostInit+0xac>)
 80037c2:	f001 f9c1 	bl	8004b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80037c6:	2303      	movs	r3, #3
 80037c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ca:	2302      	movs	r3, #2
 80037cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ce:	2300      	movs	r3, #0
 80037d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037d2:	2300      	movs	r3, #0
 80037d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80037d6:	2302      	movs	r3, #2
 80037d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037da:	f107 0314 	add.w	r3, r7, #20
 80037de:	4619      	mov	r1, r3
 80037e0:	4806      	ldr	r0, [pc, #24]	; (80037fc <HAL_TIM_MspPostInit+0xb0>)
 80037e2:	f001 f9b1 	bl	8004b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80037e6:	bf00      	nop
 80037e8:	3728      	adds	r7, #40	; 0x28
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40000400 	.word	0x40000400
 80037f4:	40023800 	.word	0x40023800
 80037f8:	40020000 	.word	0x40020000
 80037fc:	40020400 	.word	0x40020400

08003800 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003804:	4b11      	ldr	r3, [pc, #68]	; (800384c <MX_UART4_Init+0x4c>)
 8003806:	4a12      	ldr	r2, [pc, #72]	; (8003850 <MX_UART4_Init+0x50>)
 8003808:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800380a:	4b10      	ldr	r3, [pc, #64]	; (800384c <MX_UART4_Init+0x4c>)
 800380c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003810:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003812:	4b0e      	ldr	r3, [pc, #56]	; (800384c <MX_UART4_Init+0x4c>)
 8003814:	2200      	movs	r2, #0
 8003816:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003818:	4b0c      	ldr	r3, [pc, #48]	; (800384c <MX_UART4_Init+0x4c>)
 800381a:	2200      	movs	r2, #0
 800381c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800381e:	4b0b      	ldr	r3, [pc, #44]	; (800384c <MX_UART4_Init+0x4c>)
 8003820:	2200      	movs	r2, #0
 8003822:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003824:	4b09      	ldr	r3, [pc, #36]	; (800384c <MX_UART4_Init+0x4c>)
 8003826:	220c      	movs	r2, #12
 8003828:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800382a:	4b08      	ldr	r3, [pc, #32]	; (800384c <MX_UART4_Init+0x4c>)
 800382c:	2200      	movs	r2, #0
 800382e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003830:	4b06      	ldr	r3, [pc, #24]	; (800384c <MX_UART4_Init+0x4c>)
 8003832:	2200      	movs	r2, #0
 8003834:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003836:	4805      	ldr	r0, [pc, #20]	; (800384c <MX_UART4_Init+0x4c>)
 8003838:	f005 fed4 	bl	80095e4 <HAL_UART_Init>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8003842:	f7ff fd9f 	bl	8003384 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003846:	bf00      	nop
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	20002428 	.word	0x20002428
 8003850:	40004c00 	.word	0x40004c00

08003854 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003858:	4b11      	ldr	r3, [pc, #68]	; (80038a0 <MX_USART1_UART_Init+0x4c>)
 800385a:	4a12      	ldr	r2, [pc, #72]	; (80038a4 <MX_USART1_UART_Init+0x50>)
 800385c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800385e:	4b10      	ldr	r3, [pc, #64]	; (80038a0 <MX_USART1_UART_Init+0x4c>)
 8003860:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003864:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003866:	4b0e      	ldr	r3, [pc, #56]	; (80038a0 <MX_USART1_UART_Init+0x4c>)
 8003868:	2200      	movs	r2, #0
 800386a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800386c:	4b0c      	ldr	r3, [pc, #48]	; (80038a0 <MX_USART1_UART_Init+0x4c>)
 800386e:	2200      	movs	r2, #0
 8003870:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003872:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <MX_USART1_UART_Init+0x4c>)
 8003874:	2200      	movs	r2, #0
 8003876:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003878:	4b09      	ldr	r3, [pc, #36]	; (80038a0 <MX_USART1_UART_Init+0x4c>)
 800387a:	220c      	movs	r2, #12
 800387c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800387e:	4b08      	ldr	r3, [pc, #32]	; (80038a0 <MX_USART1_UART_Init+0x4c>)
 8003880:	2200      	movs	r2, #0
 8003882:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003884:	4b06      	ldr	r3, [pc, #24]	; (80038a0 <MX_USART1_UART_Init+0x4c>)
 8003886:	2200      	movs	r2, #0
 8003888:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800388a:	4805      	ldr	r0, [pc, #20]	; (80038a0 <MX_USART1_UART_Init+0x4c>)
 800388c:	f005 feaa 	bl	80095e4 <HAL_UART_Init>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003896:	f7ff fd75 	bl	8003384 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800389a:	bf00      	nop
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	200023e4 	.word	0x200023e4
 80038a4:	40011000 	.word	0x40011000

080038a8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80038ac:	4b11      	ldr	r3, [pc, #68]	; (80038f4 <MX_USART3_UART_Init+0x4c>)
 80038ae:	4a12      	ldr	r2, [pc, #72]	; (80038f8 <MX_USART3_UART_Init+0x50>)
 80038b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80038b2:	4b10      	ldr	r3, [pc, #64]	; (80038f4 <MX_USART3_UART_Init+0x4c>)
 80038b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80038b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80038ba:	4b0e      	ldr	r3, [pc, #56]	; (80038f4 <MX_USART3_UART_Init+0x4c>)
 80038bc:	2200      	movs	r2, #0
 80038be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80038c0:	4b0c      	ldr	r3, [pc, #48]	; (80038f4 <MX_USART3_UART_Init+0x4c>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80038c6:	4b0b      	ldr	r3, [pc, #44]	; (80038f4 <MX_USART3_UART_Init+0x4c>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80038cc:	4b09      	ldr	r3, [pc, #36]	; (80038f4 <MX_USART3_UART_Init+0x4c>)
 80038ce:	220c      	movs	r2, #12
 80038d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038d2:	4b08      	ldr	r3, [pc, #32]	; (80038f4 <MX_USART3_UART_Init+0x4c>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80038d8:	4b06      	ldr	r3, [pc, #24]	; (80038f4 <MX_USART3_UART_Init+0x4c>)
 80038da:	2200      	movs	r2, #0
 80038dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80038de:	4805      	ldr	r0, [pc, #20]	; (80038f4 <MX_USART3_UART_Init+0x4c>)
 80038e0:	f005 fe80 	bl	80095e4 <HAL_UART_Init>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80038ea:	f7ff fd4b 	bl	8003384 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80038ee:	bf00      	nop
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	20002280 	.word	0x20002280
 80038f8:	40004800 	.word	0x40004800

080038fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b08e      	sub	sp, #56	; 0x38
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	605a      	str	r2, [r3, #4]
 800390e:	609a      	str	r2, [r3, #8]
 8003910:	60da      	str	r2, [r3, #12]
 8003912:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a96      	ldr	r2, [pc, #600]	; (8003b74 <HAL_UART_MspInit+0x278>)
 800391a:	4293      	cmp	r3, r2
 800391c:	f040 8092 	bne.w	8003a44 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003920:	2300      	movs	r3, #0
 8003922:	623b      	str	r3, [r7, #32]
 8003924:	4b94      	ldr	r3, [pc, #592]	; (8003b78 <HAL_UART_MspInit+0x27c>)
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	4a93      	ldr	r2, [pc, #588]	; (8003b78 <HAL_UART_MspInit+0x27c>)
 800392a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800392e:	6413      	str	r3, [r2, #64]	; 0x40
 8003930:	4b91      	ldr	r3, [pc, #580]	; (8003b78 <HAL_UART_MspInit+0x27c>)
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003938:	623b      	str	r3, [r7, #32]
 800393a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800393c:	2300      	movs	r3, #0
 800393e:	61fb      	str	r3, [r7, #28]
 8003940:	4b8d      	ldr	r3, [pc, #564]	; (8003b78 <HAL_UART_MspInit+0x27c>)
 8003942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003944:	4a8c      	ldr	r2, [pc, #560]	; (8003b78 <HAL_UART_MspInit+0x27c>)
 8003946:	f043 0301 	orr.w	r3, r3, #1
 800394a:	6313      	str	r3, [r2, #48]	; 0x30
 800394c:	4b8a      	ldr	r3, [pc, #552]	; (8003b78 <HAL_UART_MspInit+0x27c>)
 800394e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	61fb      	str	r3, [r7, #28]
 8003956:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003958:	2303      	movs	r3, #3
 800395a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800395c:	2302      	movs	r3, #2
 800395e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003960:	2300      	movs	r3, #0
 8003962:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003964:	2303      	movs	r3, #3
 8003966:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003968:	2308      	movs	r3, #8
 800396a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800396c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003970:	4619      	mov	r1, r3
 8003972:	4882      	ldr	r0, [pc, #520]	; (8003b7c <HAL_UART_MspInit+0x280>)
 8003974:	f001 f8e8 	bl	8004b48 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8003978:	4b81      	ldr	r3, [pc, #516]	; (8003b80 <HAL_UART_MspInit+0x284>)
 800397a:	4a82      	ldr	r2, [pc, #520]	; (8003b84 <HAL_UART_MspInit+0x288>)
 800397c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800397e:	4b80      	ldr	r3, [pc, #512]	; (8003b80 <HAL_UART_MspInit+0x284>)
 8003980:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003984:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003986:	4b7e      	ldr	r3, [pc, #504]	; (8003b80 <HAL_UART_MspInit+0x284>)
 8003988:	2200      	movs	r2, #0
 800398a:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800398c:	4b7c      	ldr	r3, [pc, #496]	; (8003b80 <HAL_UART_MspInit+0x284>)
 800398e:	2200      	movs	r2, #0
 8003990:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003992:	4b7b      	ldr	r3, [pc, #492]	; (8003b80 <HAL_UART_MspInit+0x284>)
 8003994:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003998:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800399a:	4b79      	ldr	r3, [pc, #484]	; (8003b80 <HAL_UART_MspInit+0x284>)
 800399c:	2200      	movs	r2, #0
 800399e:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039a0:	4b77      	ldr	r3, [pc, #476]	; (8003b80 <HAL_UART_MspInit+0x284>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80039a6:	4b76      	ldr	r3, [pc, #472]	; (8003b80 <HAL_UART_MspInit+0x284>)
 80039a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039ac:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80039ae:	4b74      	ldr	r3, [pc, #464]	; (8003b80 <HAL_UART_MspInit+0x284>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039b4:	4b72      	ldr	r3, [pc, #456]	; (8003b80 <HAL_UART_MspInit+0x284>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80039ba:	4871      	ldr	r0, [pc, #452]	; (8003b80 <HAL_UART_MspInit+0x284>)
 80039bc:	f000 fca8 	bl	8004310 <HAL_DMA_Init>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80039c6:	f7ff fcdd 	bl	8003384 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a6c      	ldr	r2, [pc, #432]	; (8003b80 <HAL_UART_MspInit+0x284>)
 80039ce:	639a      	str	r2, [r3, #56]	; 0x38
 80039d0:	4a6b      	ldr	r2, [pc, #428]	; (8003b80 <HAL_UART_MspInit+0x284>)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80039d6:	4b6c      	ldr	r3, [pc, #432]	; (8003b88 <HAL_UART_MspInit+0x28c>)
 80039d8:	4a6c      	ldr	r2, [pc, #432]	; (8003b8c <HAL_UART_MspInit+0x290>)
 80039da:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 80039dc:	4b6a      	ldr	r3, [pc, #424]	; (8003b88 <HAL_UART_MspInit+0x28c>)
 80039de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80039e2:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039e4:	4b68      	ldr	r3, [pc, #416]	; (8003b88 <HAL_UART_MspInit+0x28c>)
 80039e6:	2240      	movs	r2, #64	; 0x40
 80039e8:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039ea:	4b67      	ldr	r3, [pc, #412]	; (8003b88 <HAL_UART_MspInit+0x28c>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80039f0:	4b65      	ldr	r3, [pc, #404]	; (8003b88 <HAL_UART_MspInit+0x28c>)
 80039f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039f6:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039f8:	4b63      	ldr	r3, [pc, #396]	; (8003b88 <HAL_UART_MspInit+0x28c>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039fe:	4b62      	ldr	r3, [pc, #392]	; (8003b88 <HAL_UART_MspInit+0x28c>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8003a04:	4b60      	ldr	r3, [pc, #384]	; (8003b88 <HAL_UART_MspInit+0x28c>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a0a:	4b5f      	ldr	r3, [pc, #380]	; (8003b88 <HAL_UART_MspInit+0x28c>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a10:	4b5d      	ldr	r3, [pc, #372]	; (8003b88 <HAL_UART_MspInit+0x28c>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8003a16:	485c      	ldr	r0, [pc, #368]	; (8003b88 <HAL_UART_MspInit+0x28c>)
 8003a18:	f000 fc7a 	bl	8004310 <HAL_DMA_Init>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8003a22:	f7ff fcaf 	bl	8003384 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a57      	ldr	r2, [pc, #348]	; (8003b88 <HAL_UART_MspInit+0x28c>)
 8003a2a:	635a      	str	r2, [r3, #52]	; 0x34
 8003a2c:	4a56      	ldr	r2, [pc, #344]	; (8003b88 <HAL_UART_MspInit+0x28c>)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003a32:	2200      	movs	r2, #0
 8003a34:	2100      	movs	r1, #0
 8003a36:	2034      	movs	r0, #52	; 0x34
 8003a38:	f000 fc33 	bl	80042a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003a3c:	2034      	movs	r0, #52	; 0x34
 8003a3e:	f000 fc4c 	bl	80042da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003a42:	e149      	b.n	8003cd8 <HAL_UART_MspInit+0x3dc>
  else if(uartHandle->Instance==USART1)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a51      	ldr	r2, [pc, #324]	; (8003b90 <HAL_UART_MspInit+0x294>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	f040 80ac 	bne.w	8003ba8 <HAL_UART_MspInit+0x2ac>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a50:	2300      	movs	r3, #0
 8003a52:	61bb      	str	r3, [r7, #24]
 8003a54:	4b48      	ldr	r3, [pc, #288]	; (8003b78 <HAL_UART_MspInit+0x27c>)
 8003a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a58:	4a47      	ldr	r2, [pc, #284]	; (8003b78 <HAL_UART_MspInit+0x27c>)
 8003a5a:	f043 0310 	orr.w	r3, r3, #16
 8003a5e:	6453      	str	r3, [r2, #68]	; 0x44
 8003a60:	4b45      	ldr	r3, [pc, #276]	; (8003b78 <HAL_UART_MspInit+0x27c>)
 8003a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a64:	f003 0310 	and.w	r3, r3, #16
 8003a68:	61bb      	str	r3, [r7, #24]
 8003a6a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	617b      	str	r3, [r7, #20]
 8003a70:	4b41      	ldr	r3, [pc, #260]	; (8003b78 <HAL_UART_MspInit+0x27c>)
 8003a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a74:	4a40      	ldr	r2, [pc, #256]	; (8003b78 <HAL_UART_MspInit+0x27c>)
 8003a76:	f043 0302 	orr.w	r3, r3, #2
 8003a7a:	6313      	str	r3, [r2, #48]	; 0x30
 8003a7c:	4b3e      	ldr	r3, [pc, #248]	; (8003b78 <HAL_UART_MspInit+0x27c>)
 8003a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	617b      	str	r3, [r7, #20]
 8003a86:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003a88:	23c0      	movs	r3, #192	; 0xc0
 8003a8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a90:	2300      	movs	r3, #0
 8003a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a94:	2303      	movs	r3, #3
 8003a96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a98:	2307      	movs	r3, #7
 8003a9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	483c      	ldr	r0, [pc, #240]	; (8003b94 <HAL_UART_MspInit+0x298>)
 8003aa4:	f001 f850 	bl	8004b48 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003aa8:	4b3b      	ldr	r3, [pc, #236]	; (8003b98 <HAL_UART_MspInit+0x29c>)
 8003aaa:	4a3c      	ldr	r2, [pc, #240]	; (8003b9c <HAL_UART_MspInit+0x2a0>)
 8003aac:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003aae:	4b3a      	ldr	r3, [pc, #232]	; (8003b98 <HAL_UART_MspInit+0x29c>)
 8003ab0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ab4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ab6:	4b38      	ldr	r3, [pc, #224]	; (8003b98 <HAL_UART_MspInit+0x29c>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003abc:	4b36      	ldr	r3, [pc, #216]	; (8003b98 <HAL_UART_MspInit+0x29c>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ac2:	4b35      	ldr	r3, [pc, #212]	; (8003b98 <HAL_UART_MspInit+0x29c>)
 8003ac4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ac8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003aca:	4b33      	ldr	r3, [pc, #204]	; (8003b98 <HAL_UART_MspInit+0x29c>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ad0:	4b31      	ldr	r3, [pc, #196]	; (8003b98 <HAL_UART_MspInit+0x29c>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003ad6:	4b30      	ldr	r3, [pc, #192]	; (8003b98 <HAL_UART_MspInit+0x29c>)
 8003ad8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003adc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003ade:	4b2e      	ldr	r3, [pc, #184]	; (8003b98 <HAL_UART_MspInit+0x29c>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ae4:	4b2c      	ldr	r3, [pc, #176]	; (8003b98 <HAL_UART_MspInit+0x29c>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003aea:	482b      	ldr	r0, [pc, #172]	; (8003b98 <HAL_UART_MspInit+0x29c>)
 8003aec:	f000 fc10 	bl	8004310 <HAL_DMA_Init>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <HAL_UART_MspInit+0x1fe>
      Error_Handler();
 8003af6:	f7ff fc45 	bl	8003384 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a26      	ldr	r2, [pc, #152]	; (8003b98 <HAL_UART_MspInit+0x29c>)
 8003afe:	639a      	str	r2, [r3, #56]	; 0x38
 8003b00:	4a25      	ldr	r2, [pc, #148]	; (8003b98 <HAL_UART_MspInit+0x29c>)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003b06:	4b26      	ldr	r3, [pc, #152]	; (8003ba0 <HAL_UART_MspInit+0x2a4>)
 8003b08:	4a26      	ldr	r2, [pc, #152]	; (8003ba4 <HAL_UART_MspInit+0x2a8>)
 8003b0a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003b0c:	4b24      	ldr	r3, [pc, #144]	; (8003ba0 <HAL_UART_MspInit+0x2a4>)
 8003b0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b12:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b14:	4b22      	ldr	r3, [pc, #136]	; (8003ba0 <HAL_UART_MspInit+0x2a4>)
 8003b16:	2240      	movs	r2, #64	; 0x40
 8003b18:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b1a:	4b21      	ldr	r3, [pc, #132]	; (8003ba0 <HAL_UART_MspInit+0x2a4>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b20:	4b1f      	ldr	r3, [pc, #124]	; (8003ba0 <HAL_UART_MspInit+0x2a4>)
 8003b22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b26:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b28:	4b1d      	ldr	r3, [pc, #116]	; (8003ba0 <HAL_UART_MspInit+0x2a4>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b2e:	4b1c      	ldr	r3, [pc, #112]	; (8003ba0 <HAL_UART_MspInit+0x2a4>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003b34:	4b1a      	ldr	r3, [pc, #104]	; (8003ba0 <HAL_UART_MspInit+0x2a4>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003b3a:	4b19      	ldr	r3, [pc, #100]	; (8003ba0 <HAL_UART_MspInit+0x2a4>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b40:	4b17      	ldr	r3, [pc, #92]	; (8003ba0 <HAL_UART_MspInit+0x2a4>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003b46:	4816      	ldr	r0, [pc, #88]	; (8003ba0 <HAL_UART_MspInit+0x2a4>)
 8003b48:	f000 fbe2 	bl	8004310 <HAL_DMA_Init>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <HAL_UART_MspInit+0x25a>
      Error_Handler();
 8003b52:	f7ff fc17 	bl	8003384 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a11      	ldr	r2, [pc, #68]	; (8003ba0 <HAL_UART_MspInit+0x2a4>)
 8003b5a:	635a      	str	r2, [r3, #52]	; 0x34
 8003b5c:	4a10      	ldr	r2, [pc, #64]	; (8003ba0 <HAL_UART_MspInit+0x2a4>)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003b62:	2200      	movs	r2, #0
 8003b64:	2100      	movs	r1, #0
 8003b66:	2025      	movs	r0, #37	; 0x25
 8003b68:	f000 fb9b 	bl	80042a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003b6c:	2025      	movs	r0, #37	; 0x25
 8003b6e:	f000 fbb4 	bl	80042da <HAL_NVIC_EnableIRQ>
}
 8003b72:	e0b1      	b.n	8003cd8 <HAL_UART_MspInit+0x3dc>
 8003b74:	40004c00 	.word	0x40004c00
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	40020000 	.word	0x40020000
 8003b80:	200021c0 	.word	0x200021c0
 8003b84:	40026040 	.word	0x40026040
 8003b88:	2000246c 	.word	0x2000246c
 8003b8c:	40026070 	.word	0x40026070
 8003b90:	40011000 	.word	0x40011000
 8003b94:	40020400 	.word	0x40020400
 8003b98:	20002384 	.word	0x20002384
 8003b9c:	40026440 	.word	0x40026440
 8003ba0:	20002324 	.word	0x20002324
 8003ba4:	400264b8 	.word	0x400264b8
  else if(uartHandle->Instance==USART3)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a4c      	ldr	r2, [pc, #304]	; (8003ce0 <HAL_UART_MspInit+0x3e4>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	f040 8092 	bne.w	8003cd8 <HAL_UART_MspInit+0x3dc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	613b      	str	r3, [r7, #16]
 8003bb8:	4b4a      	ldr	r3, [pc, #296]	; (8003ce4 <HAL_UART_MspInit+0x3e8>)
 8003bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbc:	4a49      	ldr	r2, [pc, #292]	; (8003ce4 <HAL_UART_MspInit+0x3e8>)
 8003bbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bc2:	6413      	str	r3, [r2, #64]	; 0x40
 8003bc4:	4b47      	ldr	r3, [pc, #284]	; (8003ce4 <HAL_UART_MspInit+0x3e8>)
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bcc:	613b      	str	r3, [r7, #16]
 8003bce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	4b43      	ldr	r3, [pc, #268]	; (8003ce4 <HAL_UART_MspInit+0x3e8>)
 8003bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd8:	4a42      	ldr	r2, [pc, #264]	; (8003ce4 <HAL_UART_MspInit+0x3e8>)
 8003bda:	f043 0302 	orr.w	r3, r3, #2
 8003bde:	6313      	str	r3, [r2, #48]	; 0x30
 8003be0:	4b40      	ldr	r3, [pc, #256]	; (8003ce4 <HAL_UART_MspInit+0x3e8>)
 8003be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	60fb      	str	r3, [r7, #12]
 8003bea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003bec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003bfe:	2307      	movs	r3, #7
 8003c00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c06:	4619      	mov	r1, r3
 8003c08:	4837      	ldr	r0, [pc, #220]	; (8003ce8 <HAL_UART_MspInit+0x3ec>)
 8003c0a:	f000 ff9d 	bl	8004b48 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003c0e:	4b37      	ldr	r3, [pc, #220]	; (8003cec <HAL_UART_MspInit+0x3f0>)
 8003c10:	4a37      	ldr	r2, [pc, #220]	; (8003cf0 <HAL_UART_MspInit+0x3f4>)
 8003c12:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003c14:	4b35      	ldr	r3, [pc, #212]	; (8003cec <HAL_UART_MspInit+0x3f0>)
 8003c16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c1a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c1c:	4b33      	ldr	r3, [pc, #204]	; (8003cec <HAL_UART_MspInit+0x3f0>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c22:	4b32      	ldr	r3, [pc, #200]	; (8003cec <HAL_UART_MspInit+0x3f0>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c28:	4b30      	ldr	r3, [pc, #192]	; (8003cec <HAL_UART_MspInit+0x3f0>)
 8003c2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c2e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c30:	4b2e      	ldr	r3, [pc, #184]	; (8003cec <HAL_UART_MspInit+0x3f0>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c36:	4b2d      	ldr	r3, [pc, #180]	; (8003cec <HAL_UART_MspInit+0x3f0>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003c3c:	4b2b      	ldr	r3, [pc, #172]	; (8003cec <HAL_UART_MspInit+0x3f0>)
 8003c3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c42:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003c44:	4b29      	ldr	r3, [pc, #164]	; (8003cec <HAL_UART_MspInit+0x3f0>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c4a:	4b28      	ldr	r3, [pc, #160]	; (8003cec <HAL_UART_MspInit+0x3f0>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003c50:	4826      	ldr	r0, [pc, #152]	; (8003cec <HAL_UART_MspInit+0x3f0>)
 8003c52:	f000 fb5d 	bl	8004310 <HAL_DMA_Init>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <HAL_UART_MspInit+0x364>
      Error_Handler();
 8003c5c:	f7ff fb92 	bl	8003384 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a22      	ldr	r2, [pc, #136]	; (8003cec <HAL_UART_MspInit+0x3f0>)
 8003c64:	639a      	str	r2, [r3, #56]	; 0x38
 8003c66:	4a21      	ldr	r2, [pc, #132]	; (8003cec <HAL_UART_MspInit+0x3f0>)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003c6c:	4b21      	ldr	r3, [pc, #132]	; (8003cf4 <HAL_UART_MspInit+0x3f8>)
 8003c6e:	4a22      	ldr	r2, [pc, #136]	; (8003cf8 <HAL_UART_MspInit+0x3fc>)
 8003c70:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8003c72:	4b20      	ldr	r3, [pc, #128]	; (8003cf4 <HAL_UART_MspInit+0x3f8>)
 8003c74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c78:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c7a:	4b1e      	ldr	r3, [pc, #120]	; (8003cf4 <HAL_UART_MspInit+0x3f8>)
 8003c7c:	2240      	movs	r2, #64	; 0x40
 8003c7e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c80:	4b1c      	ldr	r3, [pc, #112]	; (8003cf4 <HAL_UART_MspInit+0x3f8>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c86:	4b1b      	ldr	r3, [pc, #108]	; (8003cf4 <HAL_UART_MspInit+0x3f8>)
 8003c88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c8c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c8e:	4b19      	ldr	r3, [pc, #100]	; (8003cf4 <HAL_UART_MspInit+0x3f8>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c94:	4b17      	ldr	r3, [pc, #92]	; (8003cf4 <HAL_UART_MspInit+0x3f8>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003c9a:	4b16      	ldr	r3, [pc, #88]	; (8003cf4 <HAL_UART_MspInit+0x3f8>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003ca0:	4b14      	ldr	r3, [pc, #80]	; (8003cf4 <HAL_UART_MspInit+0x3f8>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ca6:	4b13      	ldr	r3, [pc, #76]	; (8003cf4 <HAL_UART_MspInit+0x3f8>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003cac:	4811      	ldr	r0, [pc, #68]	; (8003cf4 <HAL_UART_MspInit+0x3f8>)
 8003cae:	f000 fb2f 	bl	8004310 <HAL_DMA_Init>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <HAL_UART_MspInit+0x3c0>
      Error_Handler();
 8003cb8:	f7ff fb64 	bl	8003384 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a0d      	ldr	r2, [pc, #52]	; (8003cf4 <HAL_UART_MspInit+0x3f8>)
 8003cc0:	635a      	str	r2, [r3, #52]	; 0x34
 8003cc2:	4a0c      	ldr	r2, [pc, #48]	; (8003cf4 <HAL_UART_MspInit+0x3f8>)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003cc8:	2200      	movs	r2, #0
 8003cca:	2100      	movs	r1, #0
 8003ccc:	2027      	movs	r0, #39	; 0x27
 8003cce:	f000 fae8 	bl	80042a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003cd2:	2027      	movs	r0, #39	; 0x27
 8003cd4:	f000 fb01 	bl	80042da <HAL_NVIC_EnableIRQ>
}
 8003cd8:	bf00      	nop
 8003cda:	3738      	adds	r7, #56	; 0x38
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40004800 	.word	0x40004800
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	40020400 	.word	0x40020400
 8003cec:	20002220 	.word	0x20002220
 8003cf0:	40026028 	.word	0x40026028
 8003cf4:	200022c4 	.word	0x200022c4
 8003cf8:	40026058 	.word	0x40026058

08003cfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003cfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003d00:	480d      	ldr	r0, [pc, #52]	; (8003d38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003d02:	490e      	ldr	r1, [pc, #56]	; (8003d3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003d04:	4a0e      	ldr	r2, [pc, #56]	; (8003d40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d08:	e002      	b.n	8003d10 <LoopCopyDataInit>

08003d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d0e:	3304      	adds	r3, #4

08003d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d14:	d3f9      	bcc.n	8003d0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d16:	4a0b      	ldr	r2, [pc, #44]	; (8003d44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003d18:	4c0b      	ldr	r4, [pc, #44]	; (8003d48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d1c:	e001      	b.n	8003d22 <LoopFillZerobss>

08003d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d20:	3204      	adds	r2, #4

08003d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d24:	d3fb      	bcc.n	8003d1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003d26:	f7ff fc45 	bl	80035b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d2a:	f006 fd97 	bl	800a85c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d2e:	f7ff fa19 	bl	8003164 <main>
  bx  lr    
 8003d32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003d34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d3c:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8003d40:	0800bbbc 	.word	0x0800bbbc
  ldr r2, =_sbss
 8003d44:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8003d48:	200024d0 	.word	0x200024d0

08003d4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d4c:	e7fe      	b.n	8003d4c <ADC_IRQHandler>

08003d4e <SUPERVISOR_Process_Ms>:
#include "../Sensors/Mpu.h"
#include "../Led/Led.h"
#include "../Radio/Radio.h"

void SUPERVISOR_Process_Ms(void)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	af00      	add	r7, sp, #0
	if(!MPU_Is_Ok())
 8003d52:	f7ff f829 	bl	8002da8 <MPU_Is_Ok>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d104      	bne.n	8003d66 <SUPERVISOR_Process_Ms+0x18>
	{
		Led_Set_Sequence(led_eSTATE, led_sequence_eGYRO_OFF);
 8003d5c:	21a0      	movs	r1, #160	; 0xa0
 8003d5e:	2000      	movs	r0, #0
 8003d60:	f7fd fe96 	bl	8001a90 <Led_Set_Sequence>
	}
	else
	{
		Led_Set_Sequence(led_eSTATE, led_sequence_eOK);
	}
}
 8003d64:	e00d      	b.n	8003d82 <SUPERVISOR_Process_Ms+0x34>
	else if(RADIO_Get_State() == radio_state_eTIMEOUT)
 8003d66:	f7fe fdd5 	bl	8002914 <RADIO_Get_State>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d104      	bne.n	8003d7a <SUPERVISOR_Process_Ms+0x2c>
		Led_Set_Sequence(led_eSTATE, led_sequence_eRADIO_TIMEOUT);
 8003d70:	21a8      	movs	r1, #168	; 0xa8
 8003d72:	2000      	movs	r0, #0
 8003d74:	f7fd fe8c 	bl	8001a90 <Led_Set_Sequence>
}
 8003d78:	e003      	b.n	8003d82 <SUPERVISOR_Process_Ms+0x34>
		Led_Set_Sequence(led_eSTATE, led_sequence_eOK);
 8003d7a:	2180      	movs	r1, #128	; 0x80
 8003d7c:	2000      	movs	r0, #0
 8003d7e:	f7fd fe87 	bl	8001a90 <Led_Set_Sequence>
}
 8003d82:	bf00      	nop
 8003d84:	bd80      	pop	{r7, pc}
	...

08003d88 <TASK_MANAGER_Init>:
static task_t task[MAX_NUMBER_OF_TASK] = { 0 };
static bool_e is_initialized = FALSE;
static uint8_t task_count = 0;

void TASK_MANAGER_Init(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
	for(uint8_t t = 0; t < task_count; t++)
 8003d8e:	2300      	movs	r3, #0
 8003d90:	71fb      	strb	r3, [r7, #7]
 8003d92:	e017      	b.n	8003dc4 <TASK_MANAGER_Init+0x3c>
	{
		if(task[t].init.call)
 8003d94:	79fa      	ldrb	r2, [r7, #7]
 8003d96:	4911      	ldr	r1, [pc, #68]	; (8003ddc <TASK_MANAGER_Init+0x54>)
 8003d98:	4613      	mov	r3, r2
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	4413      	add	r3, r2
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	440b      	add	r3, r1
 8003da2:	3308      	adds	r3, #8
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d009      	beq.n	8003dbe <TASK_MANAGER_Init+0x36>
		{
			task[t].init.call();
 8003daa:	79fa      	ldrb	r2, [r7, #7]
 8003dac:	490b      	ldr	r1, [pc, #44]	; (8003ddc <TASK_MANAGER_Init+0x54>)
 8003dae:	4613      	mov	r3, r2
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	4413      	add	r3, r2
 8003db4:	00db      	lsls	r3, r3, #3
 8003db6:	440b      	add	r3, r1
 8003db8:	3308      	adds	r3, #8
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4798      	blx	r3
	for(uint8_t t = 0; t < task_count; t++)
 8003dbe:	79fb      	ldrb	r3, [r7, #7]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	71fb      	strb	r3, [r7, #7]
 8003dc4:	4b06      	ldr	r3, [pc, #24]	; (8003de0 <TASK_MANAGER_Init+0x58>)
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	79fa      	ldrb	r2, [r7, #7]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d3e2      	bcc.n	8003d94 <TASK_MANAGER_Init+0xc>
		}
	}
	is_initialized = TRUE;
 8003dce:	4b05      	ldr	r3, [pc, #20]	; (8003de4 <TASK_MANAGER_Init+0x5c>)
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	701a      	strb	r2, [r3, #0]
}
 8003dd4:	bf00      	nop
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	20001c28 	.word	0x20001c28
 8003de0:	20002061 	.word	0x20002061
 8003de4:	20002060 	.word	0x20002060

08003de8 <TASK_MANAGER_Main>:


void TASK_MANAGER_Main(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
	for(uint8_t t = 0; t < task_count; t++)
 8003dee:	2300      	movs	r3, #0
 8003df0:	71fb      	strb	r3, [r7, #7]
 8003df2:	e017      	b.n	8003e24 <TASK_MANAGER_Main+0x3c>
	{
		if(task[t].main.call)
 8003df4:	79fa      	ldrb	r2, [r7, #7]
 8003df6:	4910      	ldr	r1, [pc, #64]	; (8003e38 <TASK_MANAGER_Main+0x50>)
 8003df8:	4613      	mov	r3, r2
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	4413      	add	r3, r2
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	440b      	add	r3, r1
 8003e02:	3318      	adds	r3, #24
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d009      	beq.n	8003e1e <TASK_MANAGER_Main+0x36>
		{
			task[t].main.call();
 8003e0a:	79fa      	ldrb	r2, [r7, #7]
 8003e0c:	490a      	ldr	r1, [pc, #40]	; (8003e38 <TASK_MANAGER_Main+0x50>)
 8003e0e:	4613      	mov	r3, r2
 8003e10:	00db      	lsls	r3, r3, #3
 8003e12:	4413      	add	r3, r2
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	440b      	add	r3, r1
 8003e18:	3318      	adds	r3, #24
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4798      	blx	r3
	for(uint8_t t = 0; t < task_count; t++)
 8003e1e:	79fb      	ldrb	r3, [r7, #7]
 8003e20:	3301      	adds	r3, #1
 8003e22:	71fb      	strb	r3, [r7, #7]
 8003e24:	4b05      	ldr	r3, [pc, #20]	; (8003e3c <TASK_MANAGER_Main+0x54>)
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	79fa      	ldrb	r2, [r7, #7]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d3e2      	bcc.n	8003df4 <TASK_MANAGER_Main+0xc>
		}
	}
}
 8003e2e:	bf00      	nop
 8003e30:	bf00      	nop
 8003e32:	3708      	adds	r7, #8
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	20001c28 	.word	0x20001c28
 8003e3c:	20002061 	.word	0x20002061

08003e40 <TASK_MANAGER_It_ms>:

void TASK_MANAGER_It_ms(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
	if(!is_initialized)
 8003e46:	4b14      	ldr	r3, [pc, #80]	; (8003e98 <TASK_MANAGER_It_ms+0x58>)
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d020      	beq.n	8003e90 <TASK_MANAGER_It_ms+0x50>
	{
		return;
	}
	for(uint8_t t = 0; t < task_count; t++)
 8003e4e:	2300      	movs	r3, #0
 8003e50:	71fb      	strb	r3, [r7, #7]
 8003e52:	e017      	b.n	8003e84 <TASK_MANAGER_It_ms+0x44>
	{
		if(task[t].it.call)
 8003e54:	79fa      	ldrb	r2, [r7, #7]
 8003e56:	4911      	ldr	r1, [pc, #68]	; (8003e9c <TASK_MANAGER_It_ms+0x5c>)
 8003e58:	4613      	mov	r3, r2
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	4413      	add	r3, r2
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	440b      	add	r3, r1
 8003e62:	3328      	adds	r3, #40	; 0x28
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d009      	beq.n	8003e7e <TASK_MANAGER_It_ms+0x3e>
		{
			task[t].it.call();
 8003e6a:	79fa      	ldrb	r2, [r7, #7]
 8003e6c:	490b      	ldr	r1, [pc, #44]	; (8003e9c <TASK_MANAGER_It_ms+0x5c>)
 8003e6e:	4613      	mov	r3, r2
 8003e70:	00db      	lsls	r3, r3, #3
 8003e72:	4413      	add	r3, r2
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	440b      	add	r3, r1
 8003e78:	3328      	adds	r3, #40	; 0x28
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4798      	blx	r3
	for(uint8_t t = 0; t < task_count; t++)
 8003e7e:	79fb      	ldrb	r3, [r7, #7]
 8003e80:	3301      	adds	r3, #1
 8003e82:	71fb      	strb	r3, [r7, #7]
 8003e84:	4b06      	ldr	r3, [pc, #24]	; (8003ea0 <TASK_MANAGER_It_ms+0x60>)
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	79fa      	ldrb	r2, [r7, #7]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d3e2      	bcc.n	8003e54 <TASK_MANAGER_It_ms+0x14>
 8003e8e:	e000      	b.n	8003e92 <TASK_MANAGER_It_ms+0x52>
		return;
 8003e90:	bf00      	nop
		}
	}
}
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	20002060 	.word	0x20002060
 8003e9c:	20001c28 	.word	0x20001c28
 8003ea0:	20002061 	.word	0x20002061

08003ea4 <TASK_MANAGER_Gyro_Data_Ready>:

void TASK_MANAGER_Gyro_Data_Ready(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
	for(uint8_t t = 0; t < task_count; t++)
 8003eaa:	2300      	movs	r3, #0
 8003eac:	71fb      	strb	r3, [r7, #7]
 8003eae:	e017      	b.n	8003ee0 <TASK_MANAGER_Gyro_Data_Ready+0x3c>
	{
		if(task[t].gyro_data_ready.call)
 8003eb0:	79fa      	ldrb	r2, [r7, #7]
 8003eb2:	4910      	ldr	r1, [pc, #64]	; (8003ef4 <TASK_MANAGER_Gyro_Data_Ready+0x50>)
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	4413      	add	r3, r2
 8003eba:	00db      	lsls	r3, r3, #3
 8003ebc:	440b      	add	r3, r1
 8003ebe:	3338      	adds	r3, #56	; 0x38
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d009      	beq.n	8003eda <TASK_MANAGER_Gyro_Data_Ready+0x36>
		{
			task[t].gyro_data_ready.call();
 8003ec6:	79fa      	ldrb	r2, [r7, #7]
 8003ec8:	490a      	ldr	r1, [pc, #40]	; (8003ef4 <TASK_MANAGER_Gyro_Data_Ready+0x50>)
 8003eca:	4613      	mov	r3, r2
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	4413      	add	r3, r2
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	440b      	add	r3, r1
 8003ed4:	3338      	adds	r3, #56	; 0x38
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4798      	blx	r3
	for(uint8_t t = 0; t < task_count; t++)
 8003eda:	79fb      	ldrb	r3, [r7, #7]
 8003edc:	3301      	adds	r3, #1
 8003ede:	71fb      	strb	r3, [r7, #7]
 8003ee0:	4b05      	ldr	r3, [pc, #20]	; (8003ef8 <TASK_MANAGER_Gyro_Data_Ready+0x54>)
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	79fa      	ldrb	r2, [r7, #7]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d3e2      	bcc.n	8003eb0 <TASK_MANAGER_Gyro_Data_Ready+0xc>
		}
	}
}
 8003eea:	bf00      	nop
 8003eec:	bf00      	nop
 8003eee:	3708      	adds	r7, #8
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	20001c28 	.word	0x20001c28
 8003ef8:	20002061 	.word	0x20002061

08003efc <TASK_MANAGER_Add_Task>:

void TASK_MANAGER_Add_Task(char * name, void(*init)(void), void(*main)(void), void(*it)(void), void(*gyro)(void))
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
 8003f08:	603b      	str	r3, [r7, #0]
	if(task_count == MAX_NUMBER_OF_TASK)
 8003f0a:	4b2b      	ldr	r3, [pc, #172]	; (8003fb8 <TASK_MANAGER_Add_Task+0xbc>)
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	2b0f      	cmp	r3, #15
 8003f10:	d04b      	beq.n	8003faa <TASK_MANAGER_Add_Task+0xae>
	{
		return;
	}
	task[task_count].name = name;
 8003f12:	4b29      	ldr	r3, [pc, #164]	; (8003fb8 <TASK_MANAGER_Add_Task+0xbc>)
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	4619      	mov	r1, r3
 8003f18:	4a28      	ldr	r2, [pc, #160]	; (8003fbc <TASK_MANAGER_Add_Task+0xc0>)
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	00db      	lsls	r3, r3, #3
 8003f1e:	440b      	add	r3, r1
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	4413      	add	r3, r2
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	601a      	str	r2, [r3, #0]
	task[task_count].name_len = sizeof(name) - 1;
 8003f28:	4b23      	ldr	r3, [pc, #140]	; (8003fb8 <TASK_MANAGER_Add_Task+0xbc>)
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4a23      	ldr	r2, [pc, #140]	; (8003fbc <TASK_MANAGER_Add_Task+0xc0>)
 8003f30:	460b      	mov	r3, r1
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	440b      	add	r3, r1
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	4413      	add	r3, r2
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	2203      	movs	r2, #3
 8003f3e:	701a      	strb	r2, [r3, #0]
	task[task_count].init.call = init;
 8003f40:	4b1d      	ldr	r3, [pc, #116]	; (8003fb8 <TASK_MANAGER_Add_Task+0xbc>)
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	4619      	mov	r1, r3
 8003f46:	4a1d      	ldr	r2, [pc, #116]	; (8003fbc <TASK_MANAGER_Add_Task+0xc0>)
 8003f48:	460b      	mov	r3, r1
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	440b      	add	r3, r1
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	4413      	add	r3, r2
 8003f52:	3308      	adds	r3, #8
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	601a      	str	r2, [r3, #0]
	task[task_count].main.call = main;
 8003f58:	4b17      	ldr	r3, [pc, #92]	; (8003fb8 <TASK_MANAGER_Add_Task+0xbc>)
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4a17      	ldr	r2, [pc, #92]	; (8003fbc <TASK_MANAGER_Add_Task+0xc0>)
 8003f60:	460b      	mov	r3, r1
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	440b      	add	r3, r1
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	4413      	add	r3, r2
 8003f6a:	3318      	adds	r3, #24
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	601a      	str	r2, [r3, #0]
	task[task_count].it.call = it;
 8003f70:	4b11      	ldr	r3, [pc, #68]	; (8003fb8 <TASK_MANAGER_Add_Task+0xbc>)
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	4619      	mov	r1, r3
 8003f76:	4a11      	ldr	r2, [pc, #68]	; (8003fbc <TASK_MANAGER_Add_Task+0xc0>)
 8003f78:	460b      	mov	r3, r1
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	440b      	add	r3, r1
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	4413      	add	r3, r2
 8003f82:	3328      	adds	r3, #40	; 0x28
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	601a      	str	r2, [r3, #0]
	task[task_count++].gyro_data_ready.call = gyro;
 8003f88:	4b0b      	ldr	r3, [pc, #44]	; (8003fb8 <TASK_MANAGER_Add_Task+0xbc>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	1c5a      	adds	r2, r3, #1
 8003f8e:	b2d1      	uxtb	r1, r2
 8003f90:	4a09      	ldr	r2, [pc, #36]	; (8003fb8 <TASK_MANAGER_Add_Task+0xbc>)
 8003f92:	7011      	strb	r1, [r2, #0]
 8003f94:	4619      	mov	r1, r3
 8003f96:	4a09      	ldr	r2, [pc, #36]	; (8003fbc <TASK_MANAGER_Add_Task+0xc0>)
 8003f98:	460b      	mov	r3, r1
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	440b      	add	r3, r1
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	4413      	add	r3, r2
 8003fa2:	3338      	adds	r3, #56	; 0x38
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	e000      	b.n	8003fac <TASK_MANAGER_Add_Task+0xb0>
		return;
 8003faa:	bf00      	nop
}
 8003fac:	3714      	adds	r7, #20
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	20002061 	.word	0x20002061
 8003fbc:	20001c28 	.word	0x20001c28

08003fc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003fc4:	4b0e      	ldr	r3, [pc, #56]	; (8004000 <HAL_Init+0x40>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a0d      	ldr	r2, [pc, #52]	; (8004000 <HAL_Init+0x40>)
 8003fca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003fd0:	4b0b      	ldr	r3, [pc, #44]	; (8004000 <HAL_Init+0x40>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a0a      	ldr	r2, [pc, #40]	; (8004000 <HAL_Init+0x40>)
 8003fd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003fdc:	4b08      	ldr	r3, [pc, #32]	; (8004000 <HAL_Init+0x40>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a07      	ldr	r2, [pc, #28]	; (8004000 <HAL_Init+0x40>)
 8003fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fe8:	2003      	movs	r0, #3
 8003fea:	f000 f94f 	bl	800428c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003fee:	200f      	movs	r0, #15
 8003ff0:	f000 f808 	bl	8004004 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ff4:	f7ff f9cc 	bl	8003390 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	40023c00 	.word	0x40023c00

08004004 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800400c:	4b12      	ldr	r3, [pc, #72]	; (8004058 <HAL_InitTick+0x54>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	4b12      	ldr	r3, [pc, #72]	; (800405c <HAL_InitTick+0x58>)
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	4619      	mov	r1, r3
 8004016:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800401a:	fbb3 f3f1 	udiv	r3, r3, r1
 800401e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004022:	4618      	mov	r0, r3
 8004024:	f000 f967 	bl	80042f6 <HAL_SYSTICK_Config>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e00e      	b.n	8004050 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b0f      	cmp	r3, #15
 8004036:	d80a      	bhi.n	800404e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004038:	2200      	movs	r2, #0
 800403a:	6879      	ldr	r1, [r7, #4]
 800403c:	f04f 30ff 	mov.w	r0, #4294967295
 8004040:	f000 f92f 	bl	80042a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004044:	4a06      	ldr	r2, [pc, #24]	; (8004060 <HAL_InitTick+0x5c>)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800404a:	2300      	movs	r3, #0
 800404c:	e000      	b.n	8004050 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
}
 8004050:	4618      	mov	r0, r3
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	20000108 	.word	0x20000108
 800405c:	20000110 	.word	0x20000110
 8004060:	2000010c 	.word	0x2000010c

08004064 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004068:	4b06      	ldr	r3, [pc, #24]	; (8004084 <HAL_IncTick+0x20>)
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	461a      	mov	r2, r3
 800406e:	4b06      	ldr	r3, [pc, #24]	; (8004088 <HAL_IncTick+0x24>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4413      	add	r3, r2
 8004074:	4a04      	ldr	r2, [pc, #16]	; (8004088 <HAL_IncTick+0x24>)
 8004076:	6013      	str	r3, [r2, #0]
}
 8004078:	bf00      	nop
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	20000110 	.word	0x20000110
 8004088:	200024cc 	.word	0x200024cc

0800408c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
  return uwTick;
 8004090:	4b03      	ldr	r3, [pc, #12]	; (80040a0 <HAL_GetTick+0x14>)
 8004092:	681b      	ldr	r3, [r3, #0]
}
 8004094:	4618      	mov	r0, r3
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	200024cc 	.word	0x200024cc

080040a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040ac:	f7ff ffee 	bl	800408c <HAL_GetTick>
 80040b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040bc:	d005      	beq.n	80040ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80040be:	4b0a      	ldr	r3, [pc, #40]	; (80040e8 <HAL_Delay+0x44>)
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	461a      	mov	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4413      	add	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80040ca:	bf00      	nop
 80040cc:	f7ff ffde 	bl	800408c <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d8f7      	bhi.n	80040cc <HAL_Delay+0x28>
  {
  }
}
 80040dc:	bf00      	nop
 80040de:	bf00      	nop
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	20000110 	.word	0x20000110

080040ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f003 0307 	and.w	r3, r3, #7
 80040fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040fc:	4b0c      	ldr	r3, [pc, #48]	; (8004130 <__NVIC_SetPriorityGrouping+0x44>)
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004108:	4013      	ands	r3, r2
 800410a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004114:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800411c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800411e:	4a04      	ldr	r2, [pc, #16]	; (8004130 <__NVIC_SetPriorityGrouping+0x44>)
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	60d3      	str	r3, [r2, #12]
}
 8004124:	bf00      	nop
 8004126:	3714      	adds	r7, #20
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	e000ed00 	.word	0xe000ed00

08004134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004138:	4b04      	ldr	r3, [pc, #16]	; (800414c <__NVIC_GetPriorityGrouping+0x18>)
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	0a1b      	lsrs	r3, r3, #8
 800413e:	f003 0307 	and.w	r3, r3, #7
}
 8004142:	4618      	mov	r0, r3
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	e000ed00 	.word	0xe000ed00

08004150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	4603      	mov	r3, r0
 8004158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800415a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800415e:	2b00      	cmp	r3, #0
 8004160:	db0b      	blt.n	800417a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004162:	79fb      	ldrb	r3, [r7, #7]
 8004164:	f003 021f 	and.w	r2, r3, #31
 8004168:	4907      	ldr	r1, [pc, #28]	; (8004188 <__NVIC_EnableIRQ+0x38>)
 800416a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800416e:	095b      	lsrs	r3, r3, #5
 8004170:	2001      	movs	r0, #1
 8004172:	fa00 f202 	lsl.w	r2, r0, r2
 8004176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	e000e100 	.word	0xe000e100

0800418c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	4603      	mov	r3, r0
 8004194:	6039      	str	r1, [r7, #0]
 8004196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800419c:	2b00      	cmp	r3, #0
 800419e:	db0a      	blt.n	80041b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	b2da      	uxtb	r2, r3
 80041a4:	490c      	ldr	r1, [pc, #48]	; (80041d8 <__NVIC_SetPriority+0x4c>)
 80041a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041aa:	0112      	lsls	r2, r2, #4
 80041ac:	b2d2      	uxtb	r2, r2
 80041ae:	440b      	add	r3, r1
 80041b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041b4:	e00a      	b.n	80041cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	4908      	ldr	r1, [pc, #32]	; (80041dc <__NVIC_SetPriority+0x50>)
 80041bc:	79fb      	ldrb	r3, [r7, #7]
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	3b04      	subs	r3, #4
 80041c4:	0112      	lsls	r2, r2, #4
 80041c6:	b2d2      	uxtb	r2, r2
 80041c8:	440b      	add	r3, r1
 80041ca:	761a      	strb	r2, [r3, #24]
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	e000e100 	.word	0xe000e100
 80041dc:	e000ed00 	.word	0xe000ed00

080041e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b089      	sub	sp, #36	; 0x24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	f1c3 0307 	rsb	r3, r3, #7
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	bf28      	it	cs
 80041fe:	2304      	movcs	r3, #4
 8004200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	3304      	adds	r3, #4
 8004206:	2b06      	cmp	r3, #6
 8004208:	d902      	bls.n	8004210 <NVIC_EncodePriority+0x30>
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	3b03      	subs	r3, #3
 800420e:	e000      	b.n	8004212 <NVIC_EncodePriority+0x32>
 8004210:	2300      	movs	r3, #0
 8004212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004214:	f04f 32ff 	mov.w	r2, #4294967295
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	fa02 f303 	lsl.w	r3, r2, r3
 800421e:	43da      	mvns	r2, r3
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	401a      	ands	r2, r3
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004228:	f04f 31ff 	mov.w	r1, #4294967295
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	fa01 f303 	lsl.w	r3, r1, r3
 8004232:	43d9      	mvns	r1, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004238:	4313      	orrs	r3, r2
         );
}
 800423a:	4618      	mov	r0, r3
 800423c:	3724      	adds	r7, #36	; 0x24
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
	...

08004248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	3b01      	subs	r3, #1
 8004254:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004258:	d301      	bcc.n	800425e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800425a:	2301      	movs	r3, #1
 800425c:	e00f      	b.n	800427e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800425e:	4a0a      	ldr	r2, [pc, #40]	; (8004288 <SysTick_Config+0x40>)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	3b01      	subs	r3, #1
 8004264:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004266:	210f      	movs	r1, #15
 8004268:	f04f 30ff 	mov.w	r0, #4294967295
 800426c:	f7ff ff8e 	bl	800418c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004270:	4b05      	ldr	r3, [pc, #20]	; (8004288 <SysTick_Config+0x40>)
 8004272:	2200      	movs	r2, #0
 8004274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004276:	4b04      	ldr	r3, [pc, #16]	; (8004288 <SysTick_Config+0x40>)
 8004278:	2207      	movs	r2, #7
 800427a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3708      	adds	r7, #8
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	e000e010 	.word	0xe000e010

0800428c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f7ff ff29 	bl	80040ec <__NVIC_SetPriorityGrouping>
}
 800429a:	bf00      	nop
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b086      	sub	sp, #24
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	4603      	mov	r3, r0
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	607a      	str	r2, [r7, #4]
 80042ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042b0:	2300      	movs	r3, #0
 80042b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042b4:	f7ff ff3e 	bl	8004134 <__NVIC_GetPriorityGrouping>
 80042b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	68b9      	ldr	r1, [r7, #8]
 80042be:	6978      	ldr	r0, [r7, #20]
 80042c0:	f7ff ff8e 	bl	80041e0 <NVIC_EncodePriority>
 80042c4:	4602      	mov	r2, r0
 80042c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042ca:	4611      	mov	r1, r2
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff ff5d 	bl	800418c <__NVIC_SetPriority>
}
 80042d2:	bf00      	nop
 80042d4:	3718      	adds	r7, #24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042da:	b580      	push	{r7, lr}
 80042dc:	b082      	sub	sp, #8
 80042de:	af00      	add	r7, sp, #0
 80042e0:	4603      	mov	r3, r0
 80042e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff ff31 	bl	8004150 <__NVIC_EnableIRQ>
}
 80042ee:	bf00      	nop
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b082      	sub	sp, #8
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7ff ffa2 	bl	8004248 <SysTick_Config>
 8004304:	4603      	mov	r3, r0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3708      	adds	r7, #8
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
	...

08004310 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004318:	2300      	movs	r3, #0
 800431a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800431c:	f7ff feb6 	bl	800408c <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e099      	b.n	8004460 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2202      	movs	r2, #2
 8004330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 0201 	bic.w	r2, r2, #1
 800434a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800434c:	e00f      	b.n	800436e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800434e:	f7ff fe9d 	bl	800408c <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b05      	cmp	r3, #5
 800435a:	d908      	bls.n	800436e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2220      	movs	r2, #32
 8004360:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2203      	movs	r2, #3
 8004366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e078      	b.n	8004460 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1e8      	bne.n	800434e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	4b38      	ldr	r3, [pc, #224]	; (8004468 <HAL_DMA_Init+0x158>)
 8004388:	4013      	ands	r3, r2
 800438a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800439a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	4313      	orrs	r3, r2
 80043be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c4:	2b04      	cmp	r3, #4
 80043c6:	d107      	bne.n	80043d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d0:	4313      	orrs	r3, r2
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	f023 0307 	bic.w	r3, r3, #7
 80043ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fe:	2b04      	cmp	r3, #4
 8004400:	d117      	bne.n	8004432 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	4313      	orrs	r3, r2
 800440a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00e      	beq.n	8004432 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 fb1b 	bl	8004a50 <DMA_CheckFifoParam>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d008      	beq.n	8004432 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2240      	movs	r2, #64	; 0x40
 8004424:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800442e:	2301      	movs	r3, #1
 8004430:	e016      	b.n	8004460 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 fad2 	bl	80049e4 <DMA_CalcBaseAndBitshift>
 8004440:	4603      	mov	r3, r0
 8004442:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004448:	223f      	movs	r2, #63	; 0x3f
 800444a:	409a      	lsls	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3718      	adds	r7, #24
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	f010803f 	.word	0xf010803f

0800446c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
 8004478:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800447a:	2300      	movs	r3, #0
 800447c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004482:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800448a:	2b01      	cmp	r3, #1
 800448c:	d101      	bne.n	8004492 <HAL_DMA_Start_IT+0x26>
 800448e:	2302      	movs	r3, #2
 8004490:	e040      	b.n	8004514 <HAL_DMA_Start_IT+0xa8>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d12f      	bne.n	8004506 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2202      	movs	r2, #2
 80044aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	68b9      	ldr	r1, [r7, #8]
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f000 fa64 	bl	8004988 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c4:	223f      	movs	r2, #63	; 0x3f
 80044c6:	409a      	lsls	r2, r3
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f042 0216 	orr.w	r2, r2, #22
 80044da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d007      	beq.n	80044f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f042 0208 	orr.w	r2, r2, #8
 80044f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0201 	orr.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	e005      	b.n	8004512 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800450e:	2302      	movs	r3, #2
 8004510:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004512:	7dfb      	ldrb	r3, [r7, #23]
}
 8004514:	4618      	mov	r0, r3
 8004516:	3718      	adds	r7, #24
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004528:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800452a:	f7ff fdaf 	bl	800408c <HAL_GetTick>
 800452e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d008      	beq.n	800454e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2280      	movs	r2, #128	; 0x80
 8004540:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e052      	b.n	80045f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 0216 	bic.w	r2, r2, #22
 800455c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	695a      	ldr	r2, [r3, #20]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800456c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004572:	2b00      	cmp	r3, #0
 8004574:	d103      	bne.n	800457e <HAL_DMA_Abort+0x62>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800457a:	2b00      	cmp	r3, #0
 800457c:	d007      	beq.n	800458e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 0208 	bic.w	r2, r2, #8
 800458c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0201 	bic.w	r2, r2, #1
 800459c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800459e:	e013      	b.n	80045c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045a0:	f7ff fd74 	bl	800408c <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b05      	cmp	r3, #5
 80045ac:	d90c      	bls.n	80045c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2220      	movs	r2, #32
 80045b2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2203      	movs	r2, #3
 80045b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e015      	b.n	80045f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1e4      	bne.n	80045a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045da:	223f      	movs	r2, #63	; 0x3f
 80045dc:	409a      	lsls	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3710      	adds	r7, #16
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d004      	beq.n	800461a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2280      	movs	r2, #128	; 0x80
 8004614:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e00c      	b.n	8004634 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2205      	movs	r2, #5
 800461e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 0201 	bic.w	r2, r2, #1
 8004630:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004648:	2300      	movs	r3, #0
 800464a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800464c:	4b92      	ldr	r3, [pc, #584]	; (8004898 <HAL_DMA_IRQHandler+0x258>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a92      	ldr	r2, [pc, #584]	; (800489c <HAL_DMA_IRQHandler+0x25c>)
 8004652:	fba2 2303 	umull	r2, r3, r2, r3
 8004656:	0a9b      	lsrs	r3, r3, #10
 8004658:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800465e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466a:	2208      	movs	r2, #8
 800466c:	409a      	lsls	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	4013      	ands	r3, r2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d01a      	beq.n	80046ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0304 	and.w	r3, r3, #4
 8004680:	2b00      	cmp	r3, #0
 8004682:	d013      	beq.n	80046ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 0204 	bic.w	r2, r2, #4
 8004692:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004698:	2208      	movs	r2, #8
 800469a:	409a      	lsls	r2, r3
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a4:	f043 0201 	orr.w	r2, r3, #1
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b0:	2201      	movs	r2, #1
 80046b2:	409a      	lsls	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4013      	ands	r3, r2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d012      	beq.n	80046e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00b      	beq.n	80046e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ce:	2201      	movs	r2, #1
 80046d0:	409a      	lsls	r2, r3
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046da:	f043 0202 	orr.w	r2, r3, #2
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e6:	2204      	movs	r2, #4
 80046e8:	409a      	lsls	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4013      	ands	r3, r2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d012      	beq.n	8004718 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00b      	beq.n	8004718 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004704:	2204      	movs	r2, #4
 8004706:	409a      	lsls	r2, r3
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004710:	f043 0204 	orr.w	r2, r3, #4
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800471c:	2210      	movs	r2, #16
 800471e:	409a      	lsls	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4013      	ands	r3, r2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d043      	beq.n	80047b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0308 	and.w	r3, r3, #8
 8004732:	2b00      	cmp	r3, #0
 8004734:	d03c      	beq.n	80047b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800473a:	2210      	movs	r2, #16
 800473c:	409a      	lsls	r2, r3
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d018      	beq.n	8004782 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d108      	bne.n	8004770 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004762:	2b00      	cmp	r3, #0
 8004764:	d024      	beq.n	80047b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	4798      	blx	r3
 800476e:	e01f      	b.n	80047b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004774:	2b00      	cmp	r3, #0
 8004776:	d01b      	beq.n	80047b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	4798      	blx	r3
 8004780:	e016      	b.n	80047b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800478c:	2b00      	cmp	r3, #0
 800478e:	d107      	bne.n	80047a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0208 	bic.w	r2, r2, #8
 800479e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d003      	beq.n	80047b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b4:	2220      	movs	r2, #32
 80047b6:	409a      	lsls	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4013      	ands	r3, r2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 808e 	beq.w	80048de <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0310 	and.w	r3, r3, #16
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 8086 	beq.w	80048de <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d6:	2220      	movs	r2, #32
 80047d8:	409a      	lsls	r2, r3
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b05      	cmp	r3, #5
 80047e8:	d136      	bne.n	8004858 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 0216 	bic.w	r2, r2, #22
 80047f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	695a      	ldr	r2, [r3, #20]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004808:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	2b00      	cmp	r3, #0
 8004810:	d103      	bne.n	800481a <HAL_DMA_IRQHandler+0x1da>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004816:	2b00      	cmp	r3, #0
 8004818:	d007      	beq.n	800482a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 0208 	bic.w	r2, r2, #8
 8004828:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800482e:	223f      	movs	r2, #63	; 0x3f
 8004830:	409a      	lsls	r2, r3
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800484a:	2b00      	cmp	r3, #0
 800484c:	d07d      	beq.n	800494a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	4798      	blx	r3
        }
        return;
 8004856:	e078      	b.n	800494a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d01c      	beq.n	80048a0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d108      	bne.n	8004886 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004878:	2b00      	cmp	r3, #0
 800487a:	d030      	beq.n	80048de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	4798      	blx	r3
 8004884:	e02b      	b.n	80048de <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488a:	2b00      	cmp	r3, #0
 800488c:	d027      	beq.n	80048de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	4798      	blx	r3
 8004896:	e022      	b.n	80048de <HAL_DMA_IRQHandler+0x29e>
 8004898:	20000108 	.word	0x20000108
 800489c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10f      	bne.n	80048ce <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 0210 	bic.w	r2, r2, #16
 80048bc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d032      	beq.n	800494c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d022      	beq.n	8004938 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2205      	movs	r2, #5
 80048f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0201 	bic.w	r2, r2, #1
 8004908:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	3301      	adds	r3, #1
 800490e:	60bb      	str	r3, [r7, #8]
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	429a      	cmp	r2, r3
 8004914:	d307      	bcc.n	8004926 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1f2      	bne.n	800490a <HAL_DMA_IRQHandler+0x2ca>
 8004924:	e000      	b.n	8004928 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004926:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800493c:	2b00      	cmp	r3, #0
 800493e:	d005      	beq.n	800494c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	4798      	blx	r3
 8004948:	e000      	b.n	800494c <HAL_DMA_IRQHandler+0x30c>
        return;
 800494a:	bf00      	nop
    }
  }
}
 800494c:	3718      	adds	r7, #24
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop

08004954 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004962:	b2db      	uxtb	r3, r3
}
 8004964:	4618      	mov	r0, r3
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800497c:	4618      	mov	r0, r3
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
 8004994:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80049a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	2b40      	cmp	r3, #64	; 0x40
 80049b4:	d108      	bne.n	80049c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80049c6:	e007      	b.n	80049d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	60da      	str	r2, [r3, #12]
}
 80049d8:	bf00      	nop
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	3b10      	subs	r3, #16
 80049f4:	4a14      	ldr	r2, [pc, #80]	; (8004a48 <DMA_CalcBaseAndBitshift+0x64>)
 80049f6:	fba2 2303 	umull	r2, r3, r2, r3
 80049fa:	091b      	lsrs	r3, r3, #4
 80049fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80049fe:	4a13      	ldr	r2, [pc, #76]	; (8004a4c <DMA_CalcBaseAndBitshift+0x68>)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4413      	add	r3, r2
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	461a      	mov	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2b03      	cmp	r3, #3
 8004a10:	d909      	bls.n	8004a26 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a1a:	f023 0303 	bic.w	r3, r3, #3
 8004a1e:	1d1a      	adds	r2, r3, #4
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	659a      	str	r2, [r3, #88]	; 0x58
 8004a24:	e007      	b.n	8004a36 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a2e:	f023 0303 	bic.w	r3, r3, #3
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	aaaaaaab 	.word	0xaaaaaaab
 8004a4c:	0800b7d0 	.word	0x0800b7d0

08004a50 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a60:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d11f      	bne.n	8004aaa <DMA_CheckFifoParam+0x5a>
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	2b03      	cmp	r3, #3
 8004a6e:	d856      	bhi.n	8004b1e <DMA_CheckFifoParam+0xce>
 8004a70:	a201      	add	r2, pc, #4	; (adr r2, 8004a78 <DMA_CheckFifoParam+0x28>)
 8004a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a76:	bf00      	nop
 8004a78:	08004a89 	.word	0x08004a89
 8004a7c:	08004a9b 	.word	0x08004a9b
 8004a80:	08004a89 	.word	0x08004a89
 8004a84:	08004b1f 	.word	0x08004b1f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d046      	beq.n	8004b22 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a98:	e043      	b.n	8004b22 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004aa2:	d140      	bne.n	8004b26 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004aa8:	e03d      	b.n	8004b26 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ab2:	d121      	bne.n	8004af8 <DMA_CheckFifoParam+0xa8>
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2b03      	cmp	r3, #3
 8004ab8:	d837      	bhi.n	8004b2a <DMA_CheckFifoParam+0xda>
 8004aba:	a201      	add	r2, pc, #4	; (adr r2, 8004ac0 <DMA_CheckFifoParam+0x70>)
 8004abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac0:	08004ad1 	.word	0x08004ad1
 8004ac4:	08004ad7 	.word	0x08004ad7
 8004ac8:	08004ad1 	.word	0x08004ad1
 8004acc:	08004ae9 	.word	0x08004ae9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ad4:	e030      	b.n	8004b38 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ada:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d025      	beq.n	8004b2e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ae6:	e022      	b.n	8004b2e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004af0:	d11f      	bne.n	8004b32 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004af6:	e01c      	b.n	8004b32 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d903      	bls.n	8004b06 <DMA_CheckFifoParam+0xb6>
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	2b03      	cmp	r3, #3
 8004b02:	d003      	beq.n	8004b0c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004b04:	e018      	b.n	8004b38 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	73fb      	strb	r3, [r7, #15]
      break;
 8004b0a:	e015      	b.n	8004b38 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00e      	beq.n	8004b36 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b1c:	e00b      	b.n	8004b36 <DMA_CheckFifoParam+0xe6>
      break;
 8004b1e:	bf00      	nop
 8004b20:	e00a      	b.n	8004b38 <DMA_CheckFifoParam+0xe8>
      break;
 8004b22:	bf00      	nop
 8004b24:	e008      	b.n	8004b38 <DMA_CheckFifoParam+0xe8>
      break;
 8004b26:	bf00      	nop
 8004b28:	e006      	b.n	8004b38 <DMA_CheckFifoParam+0xe8>
      break;
 8004b2a:	bf00      	nop
 8004b2c:	e004      	b.n	8004b38 <DMA_CheckFifoParam+0xe8>
      break;
 8004b2e:	bf00      	nop
 8004b30:	e002      	b.n	8004b38 <DMA_CheckFifoParam+0xe8>
      break;   
 8004b32:	bf00      	nop
 8004b34:	e000      	b.n	8004b38 <DMA_CheckFifoParam+0xe8>
      break;
 8004b36:	bf00      	nop
    }
  } 
  
  return status; 
 8004b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3714      	adds	r7, #20
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop

08004b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b089      	sub	sp, #36	; 0x24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b52:	2300      	movs	r3, #0
 8004b54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b5e:	2300      	movs	r3, #0
 8004b60:	61fb      	str	r3, [r7, #28]
 8004b62:	e16b      	b.n	8004e3c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b64:	2201      	movs	r2, #1
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	4013      	ands	r3, r2
 8004b76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	f040 815a 	bne.w	8004e36 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f003 0303 	and.w	r3, r3, #3
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d005      	beq.n	8004b9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d130      	bne.n	8004bfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	005b      	lsls	r3, r3, #1
 8004ba4:	2203      	movs	r2, #3
 8004ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8004baa:	43db      	mvns	r3, r3
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	4013      	ands	r3, r2
 8004bb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	68da      	ldr	r2, [r3, #12]
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	69ba      	ldr	r2, [r7, #24]
 8004bc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd8:	43db      	mvns	r3, r3
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	091b      	lsrs	r3, r3, #4
 8004be6:	f003 0201 	and.w	r2, r3, #1
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf0:	69ba      	ldr	r2, [r7, #24]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f003 0303 	and.w	r3, r3, #3
 8004c04:	2b03      	cmp	r3, #3
 8004c06:	d017      	beq.n	8004c38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	005b      	lsls	r3, r3, #1
 8004c12:	2203      	movs	r2, #3
 8004c14:	fa02 f303 	lsl.w	r3, r2, r3
 8004c18:	43db      	mvns	r3, r3
 8004c1a:	69ba      	ldr	r2, [r7, #24]
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	689a      	ldr	r2, [r3, #8]
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	005b      	lsls	r3, r3, #1
 8004c28:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f003 0303 	and.w	r3, r3, #3
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d123      	bne.n	8004c8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	08da      	lsrs	r2, r3, #3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	3208      	adds	r2, #8
 8004c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	f003 0307 	and.w	r3, r3, #7
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	220f      	movs	r2, #15
 8004c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c60:	43db      	mvns	r3, r3
 8004c62:	69ba      	ldr	r2, [r7, #24]
 8004c64:	4013      	ands	r3, r2
 8004c66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	691a      	ldr	r2, [r3, #16]
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	f003 0307 	and.w	r3, r3, #7
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	fa02 f303 	lsl.w	r3, r2, r3
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	08da      	lsrs	r2, r3, #3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	3208      	adds	r2, #8
 8004c86:	69b9      	ldr	r1, [r7, #24]
 8004c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	005b      	lsls	r3, r3, #1
 8004c96:	2203      	movs	r2, #3
 8004c98:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9c:	43db      	mvns	r3, r3
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f003 0203 	and.w	r2, r3, #3
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 80b4 	beq.w	8004e36 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cce:	2300      	movs	r3, #0
 8004cd0:	60fb      	str	r3, [r7, #12]
 8004cd2:	4b60      	ldr	r3, [pc, #384]	; (8004e54 <HAL_GPIO_Init+0x30c>)
 8004cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd6:	4a5f      	ldr	r2, [pc, #380]	; (8004e54 <HAL_GPIO_Init+0x30c>)
 8004cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8004cde:	4b5d      	ldr	r3, [pc, #372]	; (8004e54 <HAL_GPIO_Init+0x30c>)
 8004ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ce6:	60fb      	str	r3, [r7, #12]
 8004ce8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004cea:	4a5b      	ldr	r2, [pc, #364]	; (8004e58 <HAL_GPIO_Init+0x310>)
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	089b      	lsrs	r3, r3, #2
 8004cf0:	3302      	adds	r3, #2
 8004cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	f003 0303 	and.w	r3, r3, #3
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	220f      	movs	r2, #15
 8004d02:	fa02 f303 	lsl.w	r3, r2, r3
 8004d06:	43db      	mvns	r3, r3
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a52      	ldr	r2, [pc, #328]	; (8004e5c <HAL_GPIO_Init+0x314>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d02b      	beq.n	8004d6e <HAL_GPIO_Init+0x226>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a51      	ldr	r2, [pc, #324]	; (8004e60 <HAL_GPIO_Init+0x318>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d025      	beq.n	8004d6a <HAL_GPIO_Init+0x222>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a50      	ldr	r2, [pc, #320]	; (8004e64 <HAL_GPIO_Init+0x31c>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d01f      	beq.n	8004d66 <HAL_GPIO_Init+0x21e>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a4f      	ldr	r2, [pc, #316]	; (8004e68 <HAL_GPIO_Init+0x320>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d019      	beq.n	8004d62 <HAL_GPIO_Init+0x21a>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a4e      	ldr	r2, [pc, #312]	; (8004e6c <HAL_GPIO_Init+0x324>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d013      	beq.n	8004d5e <HAL_GPIO_Init+0x216>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a4d      	ldr	r2, [pc, #308]	; (8004e70 <HAL_GPIO_Init+0x328>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d00d      	beq.n	8004d5a <HAL_GPIO_Init+0x212>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a4c      	ldr	r2, [pc, #304]	; (8004e74 <HAL_GPIO_Init+0x32c>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d007      	beq.n	8004d56 <HAL_GPIO_Init+0x20e>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a4b      	ldr	r2, [pc, #300]	; (8004e78 <HAL_GPIO_Init+0x330>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d101      	bne.n	8004d52 <HAL_GPIO_Init+0x20a>
 8004d4e:	2307      	movs	r3, #7
 8004d50:	e00e      	b.n	8004d70 <HAL_GPIO_Init+0x228>
 8004d52:	2308      	movs	r3, #8
 8004d54:	e00c      	b.n	8004d70 <HAL_GPIO_Init+0x228>
 8004d56:	2306      	movs	r3, #6
 8004d58:	e00a      	b.n	8004d70 <HAL_GPIO_Init+0x228>
 8004d5a:	2305      	movs	r3, #5
 8004d5c:	e008      	b.n	8004d70 <HAL_GPIO_Init+0x228>
 8004d5e:	2304      	movs	r3, #4
 8004d60:	e006      	b.n	8004d70 <HAL_GPIO_Init+0x228>
 8004d62:	2303      	movs	r3, #3
 8004d64:	e004      	b.n	8004d70 <HAL_GPIO_Init+0x228>
 8004d66:	2302      	movs	r3, #2
 8004d68:	e002      	b.n	8004d70 <HAL_GPIO_Init+0x228>
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e000      	b.n	8004d70 <HAL_GPIO_Init+0x228>
 8004d6e:	2300      	movs	r3, #0
 8004d70:	69fa      	ldr	r2, [r7, #28]
 8004d72:	f002 0203 	and.w	r2, r2, #3
 8004d76:	0092      	lsls	r2, r2, #2
 8004d78:	4093      	lsls	r3, r2
 8004d7a:	69ba      	ldr	r2, [r7, #24]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d80:	4935      	ldr	r1, [pc, #212]	; (8004e58 <HAL_GPIO_Init+0x310>)
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	089b      	lsrs	r3, r3, #2
 8004d86:	3302      	adds	r3, #2
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d8e:	4b3b      	ldr	r3, [pc, #236]	; (8004e7c <HAL_GPIO_Init+0x334>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	43db      	mvns	r3, r3
 8004d98:	69ba      	ldr	r2, [r7, #24]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d003      	beq.n	8004db2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004daa:	69ba      	ldr	r2, [r7, #24]
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004db2:	4a32      	ldr	r2, [pc, #200]	; (8004e7c <HAL_GPIO_Init+0x334>)
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004db8:	4b30      	ldr	r3, [pc, #192]	; (8004e7c <HAL_GPIO_Init+0x334>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	43db      	mvns	r3, r3
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d003      	beq.n	8004ddc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ddc:	4a27      	ldr	r2, [pc, #156]	; (8004e7c <HAL_GPIO_Init+0x334>)
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004de2:	4b26      	ldr	r3, [pc, #152]	; (8004e7c <HAL_GPIO_Init+0x334>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	43db      	mvns	r3, r3
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	4013      	ands	r3, r2
 8004df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d003      	beq.n	8004e06 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e06:	4a1d      	ldr	r2, [pc, #116]	; (8004e7c <HAL_GPIO_Init+0x334>)
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e0c:	4b1b      	ldr	r3, [pc, #108]	; (8004e7c <HAL_GPIO_Init+0x334>)
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	43db      	mvns	r3, r3
 8004e16:	69ba      	ldr	r2, [r7, #24]
 8004e18:	4013      	ands	r3, r2
 8004e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d003      	beq.n	8004e30 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004e28:	69ba      	ldr	r2, [r7, #24]
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004e30:	4a12      	ldr	r2, [pc, #72]	; (8004e7c <HAL_GPIO_Init+0x334>)
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	61fb      	str	r3, [r7, #28]
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	2b0f      	cmp	r3, #15
 8004e40:	f67f ae90 	bls.w	8004b64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e44:	bf00      	nop
 8004e46:	bf00      	nop
 8004e48:	3724      	adds	r7, #36	; 0x24
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	40023800 	.word	0x40023800
 8004e58:	40013800 	.word	0x40013800
 8004e5c:	40020000 	.word	0x40020000
 8004e60:	40020400 	.word	0x40020400
 8004e64:	40020800 	.word	0x40020800
 8004e68:	40020c00 	.word	0x40020c00
 8004e6c:	40021000 	.word	0x40021000
 8004e70:	40021400 	.word	0x40021400
 8004e74:	40021800 	.word	0x40021800
 8004e78:	40021c00 	.word	0x40021c00
 8004e7c:	40013c00 	.word	0x40013c00

08004e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	460b      	mov	r3, r1
 8004e8a:	807b      	strh	r3, [r7, #2]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e90:	787b      	ldrb	r3, [r7, #1]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e96:	887a      	ldrh	r2, [r7, #2]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e9c:	e003      	b.n	8004ea6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e9e:	887b      	ldrh	r3, [r7, #2]
 8004ea0:	041a      	lsls	r2, r3, #16
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	619a      	str	r2, [r3, #24]
}
 8004ea6:	bf00      	nop
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
	...

08004eb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e12b      	b.n	800511e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d106      	bne.n	8004ee0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7fe f884 	bl	8002fe8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2224      	movs	r2, #36	; 0x24
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f022 0201 	bic.w	r2, r2, #1
 8004ef6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004f18:	f003 fc46 	bl	80087a8 <HAL_RCC_GetPCLK1Freq>
 8004f1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	4a81      	ldr	r2, [pc, #516]	; (8005128 <HAL_I2C_Init+0x274>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d807      	bhi.n	8004f38 <HAL_I2C_Init+0x84>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4a80      	ldr	r2, [pc, #512]	; (800512c <HAL_I2C_Init+0x278>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	bf94      	ite	ls
 8004f30:	2301      	movls	r3, #1
 8004f32:	2300      	movhi	r3, #0
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	e006      	b.n	8004f46 <HAL_I2C_Init+0x92>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	4a7d      	ldr	r2, [pc, #500]	; (8005130 <HAL_I2C_Init+0x27c>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	bf94      	ite	ls
 8004f40:	2301      	movls	r3, #1
 8004f42:	2300      	movhi	r3, #0
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e0e7      	b.n	800511e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	4a78      	ldr	r2, [pc, #480]	; (8005134 <HAL_I2C_Init+0x280>)
 8004f52:	fba2 2303 	umull	r2, r3, r2, r3
 8004f56:	0c9b      	lsrs	r3, r3, #18
 8004f58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6a1b      	ldr	r3, [r3, #32]
 8004f74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	4a6a      	ldr	r2, [pc, #424]	; (8005128 <HAL_I2C_Init+0x274>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d802      	bhi.n	8004f88 <HAL_I2C_Init+0xd4>
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	3301      	adds	r3, #1
 8004f86:	e009      	b.n	8004f9c <HAL_I2C_Init+0xe8>
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004f8e:	fb02 f303 	mul.w	r3, r2, r3
 8004f92:	4a69      	ldr	r2, [pc, #420]	; (8005138 <HAL_I2C_Init+0x284>)
 8004f94:	fba2 2303 	umull	r2, r3, r2, r3
 8004f98:	099b      	lsrs	r3, r3, #6
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	6812      	ldr	r2, [r2, #0]
 8004fa0:	430b      	orrs	r3, r1
 8004fa2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004fae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	495c      	ldr	r1, [pc, #368]	; (8005128 <HAL_I2C_Init+0x274>)
 8004fb8:	428b      	cmp	r3, r1
 8004fba:	d819      	bhi.n	8004ff0 <HAL_I2C_Init+0x13c>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	1e59      	subs	r1, r3, #1
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fca:	1c59      	adds	r1, r3, #1
 8004fcc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004fd0:	400b      	ands	r3, r1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00a      	beq.n	8004fec <HAL_I2C_Init+0x138>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	1e59      	subs	r1, r3, #1
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	005b      	lsls	r3, r3, #1
 8004fe0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fea:	e051      	b.n	8005090 <HAL_I2C_Init+0x1dc>
 8004fec:	2304      	movs	r3, #4
 8004fee:	e04f      	b.n	8005090 <HAL_I2C_Init+0x1dc>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d111      	bne.n	800501c <HAL_I2C_Init+0x168>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	1e58      	subs	r0, r3, #1
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6859      	ldr	r1, [r3, #4]
 8005000:	460b      	mov	r3, r1
 8005002:	005b      	lsls	r3, r3, #1
 8005004:	440b      	add	r3, r1
 8005006:	fbb0 f3f3 	udiv	r3, r0, r3
 800500a:	3301      	adds	r3, #1
 800500c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005010:	2b00      	cmp	r3, #0
 8005012:	bf0c      	ite	eq
 8005014:	2301      	moveq	r3, #1
 8005016:	2300      	movne	r3, #0
 8005018:	b2db      	uxtb	r3, r3
 800501a:	e012      	b.n	8005042 <HAL_I2C_Init+0x18e>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	1e58      	subs	r0, r3, #1
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6859      	ldr	r1, [r3, #4]
 8005024:	460b      	mov	r3, r1
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	440b      	add	r3, r1
 800502a:	0099      	lsls	r1, r3, #2
 800502c:	440b      	add	r3, r1
 800502e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005032:	3301      	adds	r3, #1
 8005034:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005038:	2b00      	cmp	r3, #0
 800503a:	bf0c      	ite	eq
 800503c:	2301      	moveq	r3, #1
 800503e:	2300      	movne	r3, #0
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <HAL_I2C_Init+0x196>
 8005046:	2301      	movs	r3, #1
 8005048:	e022      	b.n	8005090 <HAL_I2C_Init+0x1dc>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10e      	bne.n	8005070 <HAL_I2C_Init+0x1bc>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	1e58      	subs	r0, r3, #1
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6859      	ldr	r1, [r3, #4]
 800505a:	460b      	mov	r3, r1
 800505c:	005b      	lsls	r3, r3, #1
 800505e:	440b      	add	r3, r1
 8005060:	fbb0 f3f3 	udiv	r3, r0, r3
 8005064:	3301      	adds	r3, #1
 8005066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800506a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800506e:	e00f      	b.n	8005090 <HAL_I2C_Init+0x1dc>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	1e58      	subs	r0, r3, #1
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6859      	ldr	r1, [r3, #4]
 8005078:	460b      	mov	r3, r1
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	440b      	add	r3, r1
 800507e:	0099      	lsls	r1, r3, #2
 8005080:	440b      	add	r3, r1
 8005082:	fbb0 f3f3 	udiv	r3, r0, r3
 8005086:	3301      	adds	r3, #1
 8005088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800508c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005090:	6879      	ldr	r1, [r7, #4]
 8005092:	6809      	ldr	r1, [r1, #0]
 8005094:	4313      	orrs	r3, r2
 8005096:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	69da      	ldr	r2, [r3, #28]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	431a      	orrs	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	430a      	orrs	r2, r1
 80050b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80050be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	6911      	ldr	r1, [r2, #16]
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	68d2      	ldr	r2, [r2, #12]
 80050ca:	4311      	orrs	r1, r2
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	6812      	ldr	r2, [r2, #0]
 80050d0:	430b      	orrs	r3, r1
 80050d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	695a      	ldr	r2, [r3, #20]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	431a      	orrs	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	430a      	orrs	r2, r1
 80050ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f042 0201 	orr.w	r2, r2, #1
 80050fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2220      	movs	r2, #32
 800510a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	000186a0 	.word	0x000186a0
 800512c:	001e847f 	.word	0x001e847f
 8005130:	003d08ff 	.word	0x003d08ff
 8005134:	431bde83 	.word	0x431bde83
 8005138:	10624dd3 	.word	0x10624dd3

0800513c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b088      	sub	sp, #32
 8005140:	af02      	add	r7, sp, #8
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	4608      	mov	r0, r1
 8005146:	4611      	mov	r1, r2
 8005148:	461a      	mov	r2, r3
 800514a:	4603      	mov	r3, r0
 800514c:	817b      	strh	r3, [r7, #10]
 800514e:	460b      	mov	r3, r1
 8005150:	813b      	strh	r3, [r7, #8]
 8005152:	4613      	mov	r3, r2
 8005154:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005156:	f7fe ff99 	bl	800408c <HAL_GetTick>
 800515a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b20      	cmp	r3, #32
 8005166:	f040 80d9 	bne.w	800531c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	2319      	movs	r3, #25
 8005170:	2201      	movs	r2, #1
 8005172:	496d      	ldr	r1, [pc, #436]	; (8005328 <HAL_I2C_Mem_Write+0x1ec>)
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f002 fccd 	bl	8007b14 <I2C_WaitOnFlagUntilTimeout>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d001      	beq.n	8005184 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005180:	2302      	movs	r3, #2
 8005182:	e0cc      	b.n	800531e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800518a:	2b01      	cmp	r3, #1
 800518c:	d101      	bne.n	8005192 <HAL_I2C_Mem_Write+0x56>
 800518e:	2302      	movs	r3, #2
 8005190:	e0c5      	b.n	800531e <HAL_I2C_Mem_Write+0x1e2>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d007      	beq.n	80051b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f042 0201 	orr.w	r2, r2, #1
 80051b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2221      	movs	r2, #33	; 0x21
 80051cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2240      	movs	r2, #64	; 0x40
 80051d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6a3a      	ldr	r2, [r7, #32]
 80051e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80051e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4a4d      	ldr	r2, [pc, #308]	; (800532c <HAL_I2C_Mem_Write+0x1f0>)
 80051f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051fa:	88f8      	ldrh	r0, [r7, #6]
 80051fc:	893a      	ldrh	r2, [r7, #8]
 80051fe:	8979      	ldrh	r1, [r7, #10]
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	9301      	str	r3, [sp, #4]
 8005204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005206:	9300      	str	r3, [sp, #0]
 8005208:	4603      	mov	r3, r0
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f002 f94a 	bl	80074a4 <I2C_RequestMemoryWrite>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d052      	beq.n	80052bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e081      	b.n	800531e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f002 fd4e 	bl	8007cc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00d      	beq.n	8005246 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	2b04      	cmp	r3, #4
 8005230:	d107      	bne.n	8005242 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005240:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e06b      	b.n	800531e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	781a      	ldrb	r2, [r3, #0]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	1c5a      	adds	r2, r3, #1
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005260:	3b01      	subs	r3, #1
 8005262:	b29a      	uxth	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526c:	b29b      	uxth	r3, r3
 800526e:	3b01      	subs	r3, #1
 8005270:	b29a      	uxth	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	f003 0304 	and.w	r3, r3, #4
 8005280:	2b04      	cmp	r3, #4
 8005282:	d11b      	bne.n	80052bc <HAL_I2C_Mem_Write+0x180>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005288:	2b00      	cmp	r3, #0
 800528a:	d017      	beq.n	80052bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005290:	781a      	ldrb	r2, [r3, #0]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529c:	1c5a      	adds	r2, r3, #1
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a6:	3b01      	subs	r3, #1
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	3b01      	subs	r3, #1
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1aa      	bne.n	800521a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f002 fd3a 	bl	8007d42 <I2C_WaitOnBTFFlagUntilTimeout>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00d      	beq.n	80052f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d8:	2b04      	cmp	r3, #4
 80052da:	d107      	bne.n	80052ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e016      	b.n	800531e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2220      	movs	r2, #32
 8005304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005318:	2300      	movs	r3, #0
 800531a:	e000      	b.n	800531e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800531c:	2302      	movs	r3, #2
  }
}
 800531e:	4618      	mov	r0, r3
 8005320:	3718      	adds	r7, #24
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	00100002 	.word	0x00100002
 800532c:	ffff0000 	.word	0xffff0000

08005330 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b08c      	sub	sp, #48	; 0x30
 8005334:	af02      	add	r7, sp, #8
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	4608      	mov	r0, r1
 800533a:	4611      	mov	r1, r2
 800533c:	461a      	mov	r2, r3
 800533e:	4603      	mov	r3, r0
 8005340:	817b      	strh	r3, [r7, #10]
 8005342:	460b      	mov	r3, r1
 8005344:	813b      	strh	r3, [r7, #8]
 8005346:	4613      	mov	r3, r2
 8005348:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800534a:	f7fe fe9f 	bl	800408c <HAL_GetTick>
 800534e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005356:	b2db      	uxtb	r3, r3
 8005358:	2b20      	cmp	r3, #32
 800535a:	f040 8208 	bne.w	800576e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800535e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	2319      	movs	r3, #25
 8005364:	2201      	movs	r2, #1
 8005366:	497b      	ldr	r1, [pc, #492]	; (8005554 <HAL_I2C_Mem_Read+0x224>)
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f002 fbd3 	bl	8007b14 <I2C_WaitOnFlagUntilTimeout>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005374:	2302      	movs	r3, #2
 8005376:	e1fb      	b.n	8005770 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800537e:	2b01      	cmp	r3, #1
 8005380:	d101      	bne.n	8005386 <HAL_I2C_Mem_Read+0x56>
 8005382:	2302      	movs	r3, #2
 8005384:	e1f4      	b.n	8005770 <HAL_I2C_Mem_Read+0x440>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	2b01      	cmp	r3, #1
 800539a:	d007      	beq.n	80053ac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f042 0201 	orr.w	r2, r2, #1
 80053aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2222      	movs	r2, #34	; 0x22
 80053c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2240      	movs	r2, #64	; 0x40
 80053c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80053dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	4a5b      	ldr	r2, [pc, #364]	; (8005558 <HAL_I2C_Mem_Read+0x228>)
 80053ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80053ee:	88f8      	ldrh	r0, [r7, #6]
 80053f0:	893a      	ldrh	r2, [r7, #8]
 80053f2:	8979      	ldrh	r1, [r7, #10]
 80053f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f6:	9301      	str	r3, [sp, #4]
 80053f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fa:	9300      	str	r3, [sp, #0]
 80053fc:	4603      	mov	r3, r0
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f002 f8e6 	bl	80075d0 <I2C_RequestMemoryRead>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e1b0      	b.n	8005770 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005412:	2b00      	cmp	r3, #0
 8005414:	d113      	bne.n	800543e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005416:	2300      	movs	r3, #0
 8005418:	623b      	str	r3, [r7, #32]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	695b      	ldr	r3, [r3, #20]
 8005420:	623b      	str	r3, [r7, #32]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	623b      	str	r3, [r7, #32]
 800542a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800543a:	601a      	str	r2, [r3, #0]
 800543c:	e184      	b.n	8005748 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005442:	2b01      	cmp	r3, #1
 8005444:	d11b      	bne.n	800547e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005454:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005456:	2300      	movs	r3, #0
 8005458:	61fb      	str	r3, [r7, #28]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	61fb      	str	r3, [r7, #28]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	61fb      	str	r3, [r7, #28]
 800546a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800547a:	601a      	str	r2, [r3, #0]
 800547c:	e164      	b.n	8005748 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005482:	2b02      	cmp	r3, #2
 8005484:	d11b      	bne.n	80054be <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005494:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054a6:	2300      	movs	r3, #0
 80054a8:	61bb      	str	r3, [r7, #24]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	61bb      	str	r3, [r7, #24]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	61bb      	str	r3, [r7, #24]
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	e144      	b.n	8005748 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054be:	2300      	movs	r3, #0
 80054c0:	617b      	str	r3, [r7, #20]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	617b      	str	r3, [r7, #20]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	617b      	str	r3, [r7, #20]
 80054d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80054d4:	e138      	b.n	8005748 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054da:	2b03      	cmp	r3, #3
 80054dc:	f200 80f1 	bhi.w	80056c2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d123      	bne.n	8005530 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	f002 fc9b 	bl	8007e28 <I2C_WaitOnRXNEFlagUntilTimeout>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d001      	beq.n	80054fc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e139      	b.n	8005770 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	691a      	ldr	r2, [r3, #16]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005506:	b2d2      	uxtb	r2, r2
 8005508:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550e:	1c5a      	adds	r2, r3, #1
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005518:	3b01      	subs	r3, #1
 800551a:	b29a      	uxth	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005524:	b29b      	uxth	r3, r3
 8005526:	3b01      	subs	r3, #1
 8005528:	b29a      	uxth	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800552e:	e10b      	b.n	8005748 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005534:	2b02      	cmp	r3, #2
 8005536:	d14e      	bne.n	80055d6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553a:	9300      	str	r3, [sp, #0]
 800553c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553e:	2200      	movs	r2, #0
 8005540:	4906      	ldr	r1, [pc, #24]	; (800555c <HAL_I2C_Mem_Read+0x22c>)
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f002 fae6 	bl	8007b14 <I2C_WaitOnFlagUntilTimeout>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d008      	beq.n	8005560 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e10e      	b.n	8005770 <HAL_I2C_Mem_Read+0x440>
 8005552:	bf00      	nop
 8005554:	00100002 	.word	0x00100002
 8005558:	ffff0000 	.word	0xffff0000
 800555c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800556e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	691a      	ldr	r2, [r3, #16]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557a:	b2d2      	uxtb	r2, r2
 800557c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005582:	1c5a      	adds	r2, r3, #1
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800558c:	3b01      	subs	r3, #1
 800558e:	b29a      	uxth	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005598:	b29b      	uxth	r3, r3
 800559a:	3b01      	subs	r3, #1
 800559c:	b29a      	uxth	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	691a      	ldr	r2, [r3, #16]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ac:	b2d2      	uxtb	r2, r2
 80055ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b4:	1c5a      	adds	r2, r3, #1
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055be:	3b01      	subs	r3, #1
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	3b01      	subs	r3, #1
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80055d4:	e0b8      	b.n	8005748 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80055d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d8:	9300      	str	r3, [sp, #0]
 80055da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055dc:	2200      	movs	r2, #0
 80055de:	4966      	ldr	r1, [pc, #408]	; (8005778 <HAL_I2C_Mem_Read+0x448>)
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f002 fa97 	bl	8007b14 <I2C_WaitOnFlagUntilTimeout>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d001      	beq.n	80055f0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e0bf      	b.n	8005770 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	691a      	ldr	r2, [r3, #16]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560a:	b2d2      	uxtb	r2, r2
 800560c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005612:	1c5a      	adds	r2, r3, #1
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800561c:	3b01      	subs	r3, #1
 800561e:	b29a      	uxth	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005628:	b29b      	uxth	r3, r3
 800562a:	3b01      	subs	r3, #1
 800562c:	b29a      	uxth	r2, r3
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005638:	2200      	movs	r2, #0
 800563a:	494f      	ldr	r1, [pc, #316]	; (8005778 <HAL_I2C_Mem_Read+0x448>)
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f002 fa69 	bl	8007b14 <I2C_WaitOnFlagUntilTimeout>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d001      	beq.n	800564c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e091      	b.n	8005770 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800565a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	691a      	ldr	r2, [r3, #16]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005666:	b2d2      	uxtb	r2, r2
 8005668:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566e:	1c5a      	adds	r2, r3, #1
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005678:	3b01      	subs	r3, #1
 800567a:	b29a      	uxth	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005684:	b29b      	uxth	r3, r3
 8005686:	3b01      	subs	r3, #1
 8005688:	b29a      	uxth	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	691a      	ldr	r2, [r3, #16]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005698:	b2d2      	uxtb	r2, r2
 800569a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a0:	1c5a      	adds	r2, r3, #1
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056aa:	3b01      	subs	r3, #1
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	3b01      	subs	r3, #1
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056c0:	e042      	b.n	8005748 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f002 fbae 	bl	8007e28 <I2C_WaitOnRXNEFlagUntilTimeout>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e04c      	b.n	8005770 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	691a      	ldr	r2, [r3, #16]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e0:	b2d2      	uxtb	r2, r2
 80056e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e8:	1c5a      	adds	r2, r3, #1
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056f2:	3b01      	subs	r3, #1
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056fe:	b29b      	uxth	r3, r3
 8005700:	3b01      	subs	r3, #1
 8005702:	b29a      	uxth	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	f003 0304 	and.w	r3, r3, #4
 8005712:	2b04      	cmp	r3, #4
 8005714:	d118      	bne.n	8005748 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	691a      	ldr	r2, [r3, #16]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005720:	b2d2      	uxtb	r2, r2
 8005722:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005728:	1c5a      	adds	r2, r3, #1
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005732:	3b01      	subs	r3, #1
 8005734:	b29a      	uxth	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800573e:	b29b      	uxth	r3, r3
 8005740:	3b01      	subs	r3, #1
 8005742:	b29a      	uxth	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800574c:	2b00      	cmp	r3, #0
 800574e:	f47f aec2 	bne.w	80054d6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2220      	movs	r2, #32
 8005756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800576a:	2300      	movs	r3, #0
 800576c:	e000      	b.n	8005770 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800576e:	2302      	movs	r3, #2
  }
}
 8005770:	4618      	mov	r0, r3
 8005772:	3728      	adds	r7, #40	; 0x28
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	00010004 	.word	0x00010004

0800577c <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b08c      	sub	sp, #48	; 0x30
 8005780:	af02      	add	r7, sp, #8
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	4608      	mov	r0, r1
 8005786:	4611      	mov	r1, r2
 8005788:	461a      	mov	r2, r3
 800578a:	4603      	mov	r3, r0
 800578c:	817b      	strh	r3, [r7, #10]
 800578e:	460b      	mov	r3, r1
 8005790:	813b      	strh	r3, [r7, #8]
 8005792:	4613      	mov	r3, r2
 8005794:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005796:	f7fe fc79 	bl	800408c <HAL_GetTick>
 800579a:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 800579c:	2300      	movs	r3, #0
 800579e:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	2b20      	cmp	r3, #32
 80057aa:	f040 8176 	bne.w	8005a9a <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80057ae:	4b95      	ldr	r3, [pc, #596]	; (8005a04 <HAL_I2C_Mem_Read_DMA+0x288>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	08db      	lsrs	r3, r3, #3
 80057b4:	4a94      	ldr	r2, [pc, #592]	; (8005a08 <HAL_I2C_Mem_Read_DMA+0x28c>)
 80057b6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ba:	0a1a      	lsrs	r2, r3, #8
 80057bc:	4613      	mov	r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	009a      	lsls	r2, r3, #2
 80057c4:	4413      	add	r3, r2
 80057c6:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	3b01      	subs	r3, #1
 80057cc:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d116      	bne.n	8005802 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2220      	movs	r2, #32
 80057de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ee:	f043 0220 	orr.w	r2, r3, #32
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e14c      	b.n	8005a9c <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	f003 0302 	and.w	r3, r3, #2
 800580c:	2b02      	cmp	r3, #2
 800580e:	d0db      	beq.n	80057c8 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005816:	2b01      	cmp	r3, #1
 8005818:	d101      	bne.n	800581e <HAL_I2C_Mem_Read_DMA+0xa2>
 800581a:	2302      	movs	r3, #2
 800581c:	e13e      	b.n	8005a9c <HAL_I2C_Mem_Read_DMA+0x320>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0301 	and.w	r3, r3, #1
 8005830:	2b01      	cmp	r3, #1
 8005832:	d007      	beq.n	8005844 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f042 0201 	orr.w	r2, r2, #1
 8005842:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005852:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2222      	movs	r2, #34	; 0x22
 8005858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2240      	movs	r2, #64	; 0x40
 8005860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800586e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005874:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800587a:	b29a      	uxth	r2, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	4a62      	ldr	r2, [pc, #392]	; (8005a0c <HAL_I2C_Mem_Read_DMA+0x290>)
 8005884:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8005886:	897a      	ldrh	r2, [r7, #10]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800588c:	893a      	ldrh	r2, [r7, #8]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8005892:	88fa      	ldrh	r2, [r7, #6]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f000 80cc 	beq.w	8005a40 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d02d      	beq.n	800590c <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b4:	4a56      	ldr	r2, [pc, #344]	; (8005a10 <HAL_I2C_Mem_Read_DMA+0x294>)
 80058b6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058bc:	4a55      	ldr	r2, [pc, #340]	; (8005a14 <HAL_I2C_Mem_Read_DMA+0x298>)
 80058be:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c4:	2200      	movs	r2, #0
 80058c6:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058cc:	2200      	movs	r2, #0
 80058ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d4:	2200      	movs	r2, #0
 80058d6:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058dc:	2200      	movs	r2, #0
 80058de:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	3310      	adds	r3, #16
 80058ea:	4619      	mov	r1, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f0:	461a      	mov	r2, r3
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058f6:	f7fe fdb9 	bl	800446c <HAL_DMA_Start_IT>
 80058fa:	4603      	mov	r3, r0
 80058fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005900:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005904:	2b00      	cmp	r3, #0
 8005906:	f040 8087 	bne.w	8005a18 <HAL_I2C_Mem_Read_DMA+0x29c>
 800590a:	e013      	b.n	8005934 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2220      	movs	r2, #32
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005920:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e0b3      	b.n	8005a9c <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005934:	88f8      	ldrh	r0, [r7, #6]
 8005936:	893a      	ldrh	r2, [r7, #8]
 8005938:	8979      	ldrh	r1, [r7, #10]
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	9301      	str	r3, [sp, #4]
 800593e:	2323      	movs	r3, #35	; 0x23
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	4603      	mov	r3, r0
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f001 fe43 	bl	80075d0 <I2C_RequestMemoryRead>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d023      	beq.n	8005998 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005954:	4618      	mov	r0, r3
 8005956:	f7fe fe51 	bl	80045fc <HAL_DMA_Abort_IT>
 800595a:	4603      	mov	r3, r0
 800595c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005964:	2200      	movs	r2, #0
 8005966:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005976:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f022 0201 	bic.w	r2, r2, #1
 8005992:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e081      	b.n	8005a9c <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800599c:	2b01      	cmp	r3, #1
 800599e:	d108      	bne.n	80059b2 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ae:	601a      	str	r2, [r3, #0]
 80059b0:	e007      	b.n	80059c2 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059c0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059c2:	2300      	movs	r3, #0
 80059c4:	61bb      	str	r3, [r7, #24]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	61bb      	str	r3, [r7, #24]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	61bb      	str	r3, [r7, #24]
 80059d6:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059ee:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059fe:	605a      	str	r2, [r3, #4]
 8005a00:	e049      	b.n	8005a96 <HAL_I2C_Mem_Read_DMA+0x31a>
 8005a02:	bf00      	nop
 8005a04:	20000108 	.word	0x20000108
 8005a08:	14f8b589 	.word	0x14f8b589
 8005a0c:	ffff0000 	.word	0xffff0000
 8005a10:	080077a1 	.word	0x080077a1
 8005a14:	0800794b 	.word	0x0800794b
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2c:	f043 0210 	orr.w	r2, r3, #16
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e02d      	b.n	8005a9c <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005a40:	88f8      	ldrh	r0, [r7, #6]
 8005a42:	893a      	ldrh	r2, [r7, #8]
 8005a44:	8979      	ldrh	r1, [r7, #10]
 8005a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a48:	9301      	str	r3, [sp, #4]
 8005a4a:	2323      	movs	r3, #35	; 0x23
 8005a4c:	9300      	str	r3, [sp, #0]
 8005a4e:	4603      	mov	r3, r0
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f001 fdbd 	bl	80075d0 <I2C_RequestMemoryRead>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d001      	beq.n	8005a60 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e01d      	b.n	8005a9c <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a60:	2300      	movs	r3, #0
 8005a62:	617b      	str	r3, [r7, #20]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	617b      	str	r3, [r7, #20]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	617b      	str	r3, [r7, #20]
 8005a74:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a84:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2220      	movs	r2, #32
 8005a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8005a96:	2300      	movs	r3, #0
 8005a98:	e000      	b.n	8005a9c <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 8005a9a:	2302      	movs	r3, #2
  }
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3728      	adds	r7, #40	; 0x28
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b08a      	sub	sp, #40	; 0x28
 8005aa8:	af02      	add	r7, sp, #8
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	607a      	str	r2, [r7, #4]
 8005aae:	603b      	str	r3, [r7, #0]
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005ab4:	f7fe faea 	bl	800408c <HAL_GetTick>
 8005ab8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8005aba:	2301      	movs	r3, #1
 8005abc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	2b20      	cmp	r3, #32
 8005ac8:	f040 8111 	bne.w	8005cee <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	9300      	str	r3, [sp, #0]
 8005ad0:	2319      	movs	r3, #25
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	4988      	ldr	r1, [pc, #544]	; (8005cf8 <HAL_I2C_IsDeviceReady+0x254>)
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f002 f81c 	bl	8007b14 <I2C_WaitOnFlagUntilTimeout>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d001      	beq.n	8005ae6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	e104      	b.n	8005cf0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d101      	bne.n	8005af4 <HAL_I2C_IsDeviceReady+0x50>
 8005af0:	2302      	movs	r3, #2
 8005af2:	e0fd      	b.n	8005cf0 <HAL_I2C_IsDeviceReady+0x24c>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d007      	beq.n	8005b1a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f042 0201 	orr.w	r2, r2, #1
 8005b18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b28:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2224      	movs	r2, #36	; 0x24
 8005b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	4a70      	ldr	r2, [pc, #448]	; (8005cfc <HAL_I2C_IsDeviceReady+0x258>)
 8005b3c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b4c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	f001 ffda 	bl	8007b14 <I2C_WaitOnFlagUntilTimeout>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00d      	beq.n	8005b82 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b74:	d103      	bne.n	8005b7e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b7c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e0b6      	b.n	8005cf0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b82:	897b      	ldrh	r3, [r7, #10]
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	461a      	mov	r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b90:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005b92:	f7fe fa7b 	bl	800408c <HAL_GetTick>
 8005b96:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	f003 0302 	and.w	r3, r3, #2
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	bf0c      	ite	eq
 8005ba6:	2301      	moveq	r3, #1
 8005ba8:	2300      	movne	r3, #0
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bbc:	bf0c      	ite	eq
 8005bbe:	2301      	moveq	r3, #1
 8005bc0:	2300      	movne	r3, #0
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005bc6:	e025      	b.n	8005c14 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005bc8:	f7fe fa60 	bl	800408c <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	683a      	ldr	r2, [r7, #0]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d302      	bcc.n	8005bde <HAL_I2C_IsDeviceReady+0x13a>
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d103      	bne.n	8005be6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	22a0      	movs	r2, #160	; 0xa0
 8005be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	f003 0302 	and.w	r3, r3, #2
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	bf0c      	ite	eq
 8005bf4:	2301      	moveq	r3, #1
 8005bf6:	2300      	movne	r3, #0
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c0a:	bf0c      	ite	eq
 8005c0c:	2301      	moveq	r3, #1
 8005c0e:	2300      	movne	r3, #0
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	2ba0      	cmp	r3, #160	; 0xa0
 8005c1e:	d005      	beq.n	8005c2c <HAL_I2C_IsDeviceReady+0x188>
 8005c20:	7dfb      	ldrb	r3, [r7, #23]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d102      	bne.n	8005c2c <HAL_I2C_IsDeviceReady+0x188>
 8005c26:	7dbb      	ldrb	r3, [r7, #22]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d0cd      	beq.n	8005bc8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2220      	movs	r2, #32
 8005c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d129      	bne.n	8005c96 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c50:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c52:	2300      	movs	r3, #0
 8005c54:	613b      	str	r3, [r7, #16]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	613b      	str	r3, [r7, #16]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	613b      	str	r3, [r7, #16]
 8005c66:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	9300      	str	r3, [sp, #0]
 8005c6c:	2319      	movs	r3, #25
 8005c6e:	2201      	movs	r2, #1
 8005c70:	4921      	ldr	r1, [pc, #132]	; (8005cf8 <HAL_I2C_IsDeviceReady+0x254>)
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f001 ff4e 	bl	8007b14 <I2C_WaitOnFlagUntilTimeout>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d001      	beq.n	8005c82 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e036      	b.n	8005cf0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2220      	movs	r2, #32
 8005c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005c92:	2300      	movs	r3, #0
 8005c94:	e02c      	b.n	8005cf0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ca4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005cae:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	9300      	str	r3, [sp, #0]
 8005cb4:	2319      	movs	r3, #25
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	490f      	ldr	r1, [pc, #60]	; (8005cf8 <HAL_I2C_IsDeviceReady+0x254>)
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f001 ff2a 	bl	8007b14 <I2C_WaitOnFlagUntilTimeout>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d001      	beq.n	8005cca <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e012      	b.n	8005cf0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005cd0:	69ba      	ldr	r2, [r7, #24]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	f4ff af32 	bcc.w	8005b3e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e000      	b.n	8005cf0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005cee:	2302      	movs	r3, #2
  }
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3720      	adds	r7, #32
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	00100002 	.word	0x00100002
 8005cfc:	ffff0000 	.word	0xffff0000

08005d00 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b088      	sub	sp, #32
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d18:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d20:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d28:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005d2a:	7bfb      	ldrb	r3, [r7, #15]
 8005d2c:	2b10      	cmp	r3, #16
 8005d2e:	d003      	beq.n	8005d38 <HAL_I2C_EV_IRQHandler+0x38>
 8005d30:	7bfb      	ldrb	r3, [r7, #15]
 8005d32:	2b40      	cmp	r3, #64	; 0x40
 8005d34:	f040 80c1 	bne.w	8005eba <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10d      	bne.n	8005d6e <HAL_I2C_EV_IRQHandler+0x6e>
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005d58:	d003      	beq.n	8005d62 <HAL_I2C_EV_IRQHandler+0x62>
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005d60:	d101      	bne.n	8005d66 <HAL_I2C_EV_IRQHandler+0x66>
 8005d62:	2301      	movs	r3, #1
 8005d64:	e000      	b.n	8005d68 <HAL_I2C_EV_IRQHandler+0x68>
 8005d66:	2300      	movs	r3, #0
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	f000 8132 	beq.w	8005fd2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	f003 0301 	and.w	r3, r3, #1
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00c      	beq.n	8005d92 <HAL_I2C_EV_IRQHandler+0x92>
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	0a5b      	lsrs	r3, r3, #9
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d006      	beq.n	8005d92 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f002 f8d4 	bl	8007f32 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 fd6f 	bl	800686e <I2C_Master_SB>
 8005d90:	e092      	b.n	8005eb8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	08db      	lsrs	r3, r3, #3
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d009      	beq.n	8005db2 <HAL_I2C_EV_IRQHandler+0xb2>
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	0a5b      	lsrs	r3, r3, #9
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 fde5 	bl	800697a <I2C_Master_ADD10>
 8005db0:	e082      	b.n	8005eb8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	085b      	lsrs	r3, r3, #1
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d009      	beq.n	8005dd2 <HAL_I2C_EV_IRQHandler+0xd2>
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	0a5b      	lsrs	r3, r3, #9
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d003      	beq.n	8005dd2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 fdff 	bl	80069ce <I2C_Master_ADDR>
 8005dd0:	e072      	b.n	8005eb8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	089b      	lsrs	r3, r3, #2
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d03b      	beq.n	8005e56 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005de8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dec:	f000 80f3 	beq.w	8005fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	09db      	lsrs	r3, r3, #7
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00f      	beq.n	8005e1c <HAL_I2C_EV_IRQHandler+0x11c>
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	0a9b      	lsrs	r3, r3, #10
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d009      	beq.n	8005e1c <HAL_I2C_EV_IRQHandler+0x11c>
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	089b      	lsrs	r3, r3, #2
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d103      	bne.n	8005e1c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 f9e9 	bl	80061ec <I2C_MasterTransmit_TXE>
 8005e1a:	e04d      	b.n	8005eb8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	089b      	lsrs	r3, r3, #2
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f000 80d6 	beq.w	8005fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	0a5b      	lsrs	r3, r3, #9
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f000 80cf 	beq.w	8005fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005e38:	7bbb      	ldrb	r3, [r7, #14]
 8005e3a:	2b21      	cmp	r3, #33	; 0x21
 8005e3c:	d103      	bne.n	8005e46 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 fa70 	bl	8006324 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e44:	e0c7      	b.n	8005fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005e46:	7bfb      	ldrb	r3, [r7, #15]
 8005e48:	2b40      	cmp	r3, #64	; 0x40
 8005e4a:	f040 80c4 	bne.w	8005fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 fade 	bl	8006410 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e54:	e0bf      	b.n	8005fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e64:	f000 80b7 	beq.w	8005fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	099b      	lsrs	r3, r3, #6
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00f      	beq.n	8005e94 <HAL_I2C_EV_IRQHandler+0x194>
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	0a9b      	lsrs	r3, r3, #10
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d009      	beq.n	8005e94 <HAL_I2C_EV_IRQHandler+0x194>
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	089b      	lsrs	r3, r3, #2
 8005e84:	f003 0301 	and.w	r3, r3, #1
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d103      	bne.n	8005e94 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 fb53 	bl	8006538 <I2C_MasterReceive_RXNE>
 8005e92:	e011      	b.n	8005eb8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	089b      	lsrs	r3, r3, #2
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f000 809a 	beq.w	8005fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	0a5b      	lsrs	r3, r3, #9
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f000 8093 	beq.w	8005fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 fbf2 	bl	800669a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005eb6:	e08e      	b.n	8005fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005eb8:	e08d      	b.n	8005fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d004      	beq.n	8005ecc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	695b      	ldr	r3, [r3, #20]
 8005ec8:	61fb      	str	r3, [r7, #28]
 8005eca:	e007      	b.n	8005edc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	085b      	lsrs	r3, r3, #1
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d012      	beq.n	8005f0e <HAL_I2C_EV_IRQHandler+0x20e>
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	0a5b      	lsrs	r3, r3, #9
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00c      	beq.n	8005f0e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d003      	beq.n	8005f04 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005f04:	69b9      	ldr	r1, [r7, #24]
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 ffb0 	bl	8006e6c <I2C_Slave_ADDR>
 8005f0c:	e066      	b.n	8005fdc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	091b      	lsrs	r3, r3, #4
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d009      	beq.n	8005f2e <HAL_I2C_EV_IRQHandler+0x22e>
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	0a5b      	lsrs	r3, r3, #9
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d003      	beq.n	8005f2e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 ffea 	bl	8006f00 <I2C_Slave_STOPF>
 8005f2c:	e056      	b.n	8005fdc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005f2e:	7bbb      	ldrb	r3, [r7, #14]
 8005f30:	2b21      	cmp	r3, #33	; 0x21
 8005f32:	d002      	beq.n	8005f3a <HAL_I2C_EV_IRQHandler+0x23a>
 8005f34:	7bbb      	ldrb	r3, [r7, #14]
 8005f36:	2b29      	cmp	r3, #41	; 0x29
 8005f38:	d125      	bne.n	8005f86 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	09db      	lsrs	r3, r3, #7
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00f      	beq.n	8005f66 <HAL_I2C_EV_IRQHandler+0x266>
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	0a9b      	lsrs	r3, r3, #10
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d009      	beq.n	8005f66 <HAL_I2C_EV_IRQHandler+0x266>
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	089b      	lsrs	r3, r3, #2
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d103      	bne.n	8005f66 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 fec6 	bl	8006cf0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005f64:	e039      	b.n	8005fda <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	089b      	lsrs	r3, r3, #2
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d033      	beq.n	8005fda <HAL_I2C_EV_IRQHandler+0x2da>
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	0a5b      	lsrs	r3, r3, #9
 8005f76:	f003 0301 	and.w	r3, r3, #1
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d02d      	beq.n	8005fda <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 fef3 	bl	8006d6a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005f84:	e029      	b.n	8005fda <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	099b      	lsrs	r3, r3, #6
 8005f8a:	f003 0301 	and.w	r3, r3, #1
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00f      	beq.n	8005fb2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	0a9b      	lsrs	r3, r3, #10
 8005f96:	f003 0301 	and.w	r3, r3, #1
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d009      	beq.n	8005fb2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	089b      	lsrs	r3, r3, #2
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d103      	bne.n	8005fb2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 fefe 	bl	8006dac <I2C_SlaveReceive_RXNE>
 8005fb0:	e014      	b.n	8005fdc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	089b      	lsrs	r3, r3, #2
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00e      	beq.n	8005fdc <HAL_I2C_EV_IRQHandler+0x2dc>
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	0a5b      	lsrs	r3, r3, #9
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d008      	beq.n	8005fdc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 ff2c 	bl	8006e28 <I2C_SlaveReceive_BTF>
 8005fd0:	e004      	b.n	8005fdc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005fd2:	bf00      	nop
 8005fd4:	e002      	b.n	8005fdc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005fd6:	bf00      	nop
 8005fd8:	e000      	b.n	8005fdc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005fda:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005fdc:	3720      	adds	r7, #32
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b08a      	sub	sp, #40	; 0x28
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	695b      	ldr	r3, [r3, #20]
 8005ff0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006004:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006006:	6a3b      	ldr	r3, [r7, #32]
 8006008:	0a1b      	lsrs	r3, r3, #8
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00e      	beq.n	8006030 <HAL_I2C_ER_IRQHandler+0x4e>
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	0a1b      	lsrs	r3, r3, #8
 8006016:	f003 0301 	and.w	r3, r3, #1
 800601a:	2b00      	cmp	r3, #0
 800601c:	d008      	beq.n	8006030 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800601e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006020:	f043 0301 	orr.w	r3, r3, #1
 8006024:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800602e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006030:	6a3b      	ldr	r3, [r7, #32]
 8006032:	0a5b      	lsrs	r3, r3, #9
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00e      	beq.n	800605a <HAL_I2C_ER_IRQHandler+0x78>
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	0a1b      	lsrs	r3, r3, #8
 8006040:	f003 0301 	and.w	r3, r3, #1
 8006044:	2b00      	cmp	r3, #0
 8006046:	d008      	beq.n	800605a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604a:	f043 0302 	orr.w	r3, r3, #2
 800604e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006058:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800605a:	6a3b      	ldr	r3, [r7, #32]
 800605c:	0a9b      	lsrs	r3, r3, #10
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	2b00      	cmp	r3, #0
 8006064:	d03f      	beq.n	80060e6 <HAL_I2C_ER_IRQHandler+0x104>
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	0a1b      	lsrs	r3, r3, #8
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	2b00      	cmp	r3, #0
 8006070:	d039      	beq.n	80060e6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006072:	7efb      	ldrb	r3, [r7, #27]
 8006074:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800607a:	b29b      	uxth	r3, r3
 800607c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006084:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800608a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800608c:	7ebb      	ldrb	r3, [r7, #26]
 800608e:	2b20      	cmp	r3, #32
 8006090:	d112      	bne.n	80060b8 <HAL_I2C_ER_IRQHandler+0xd6>
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d10f      	bne.n	80060b8 <HAL_I2C_ER_IRQHandler+0xd6>
 8006098:	7cfb      	ldrb	r3, [r7, #19]
 800609a:	2b21      	cmp	r3, #33	; 0x21
 800609c:	d008      	beq.n	80060b0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800609e:	7cfb      	ldrb	r3, [r7, #19]
 80060a0:	2b29      	cmp	r3, #41	; 0x29
 80060a2:	d005      	beq.n	80060b0 <HAL_I2C_ER_IRQHandler+0xce>
 80060a4:	7cfb      	ldrb	r3, [r7, #19]
 80060a6:	2b28      	cmp	r3, #40	; 0x28
 80060a8:	d106      	bne.n	80060b8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2b21      	cmp	r3, #33	; 0x21
 80060ae:	d103      	bne.n	80060b8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f001 f855 	bl	8007160 <I2C_Slave_AF>
 80060b6:	e016      	b.n	80060e6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80060c0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80060c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c4:	f043 0304 	orr.w	r3, r3, #4
 80060c8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80060ca:	7efb      	ldrb	r3, [r7, #27]
 80060cc:	2b10      	cmp	r3, #16
 80060ce:	d002      	beq.n	80060d6 <HAL_I2C_ER_IRQHandler+0xf4>
 80060d0:	7efb      	ldrb	r3, [r7, #27]
 80060d2:	2b40      	cmp	r3, #64	; 0x40
 80060d4:	d107      	bne.n	80060e6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060e4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80060e6:	6a3b      	ldr	r3, [r7, #32]
 80060e8:	0adb      	lsrs	r3, r3, #11
 80060ea:	f003 0301 	and.w	r3, r3, #1
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00e      	beq.n	8006110 <HAL_I2C_ER_IRQHandler+0x12e>
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	0a1b      	lsrs	r3, r3, #8
 80060f6:	f003 0301 	and.w	r3, r3, #1
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d008      	beq.n	8006110 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80060fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006100:	f043 0308 	orr.w	r3, r3, #8
 8006104:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800610e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006112:	2b00      	cmp	r3, #0
 8006114:	d008      	beq.n	8006128 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	431a      	orrs	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f001 f88c 	bl	8007240 <I2C_ITError>
  }
}
 8006128:	bf00      	nop
 800612a:	3728      	adds	r7, #40	; 0x28
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	460b      	mov	r3, r1
 800618a:	70fb      	strb	r3, [r7, #3]
 800618c:	4613      	mov	r3, r2
 800618e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80061a4:	bf00      	nop
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80061cc:	bf00      	nop
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80061e0:	bf00      	nop
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061fa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006202:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006208:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800620e:	2b00      	cmp	r3, #0
 8006210:	d150      	bne.n	80062b4 <I2C_MasterTransmit_TXE+0xc8>
 8006212:	7bfb      	ldrb	r3, [r7, #15]
 8006214:	2b21      	cmp	r3, #33	; 0x21
 8006216:	d14d      	bne.n	80062b4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	2b08      	cmp	r3, #8
 800621c:	d01d      	beq.n	800625a <I2C_MasterTransmit_TXE+0x6e>
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	2b20      	cmp	r3, #32
 8006222:	d01a      	beq.n	800625a <I2C_MasterTransmit_TXE+0x6e>
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800622a:	d016      	beq.n	800625a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	685a      	ldr	r2, [r3, #4]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800623a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2211      	movs	r2, #17
 8006240:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2220      	movs	r2, #32
 800624e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f7ff ff6c 	bl	8006130 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006258:	e060      	b.n	800631c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	685a      	ldr	r2, [r3, #4]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006268:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006278:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2220      	movs	r2, #32
 8006284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800628e:	b2db      	uxtb	r3, r3
 8006290:	2b40      	cmp	r3, #64	; 0x40
 8006292:	d107      	bne.n	80062a4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f7ff ff87 	bl	80061b0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80062a2:	e03b      	b.n	800631c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f7ff ff3f 	bl	8006130 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80062b2:	e033      	b.n	800631c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80062b4:	7bfb      	ldrb	r3, [r7, #15]
 80062b6:	2b21      	cmp	r3, #33	; 0x21
 80062b8:	d005      	beq.n	80062c6 <I2C_MasterTransmit_TXE+0xda>
 80062ba:	7bbb      	ldrb	r3, [r7, #14]
 80062bc:	2b40      	cmp	r3, #64	; 0x40
 80062be:	d12d      	bne.n	800631c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80062c0:	7bfb      	ldrb	r3, [r7, #15]
 80062c2:	2b22      	cmp	r3, #34	; 0x22
 80062c4:	d12a      	bne.n	800631c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d108      	bne.n	80062e2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685a      	ldr	r2, [r3, #4]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062de:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80062e0:	e01c      	b.n	800631c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b40      	cmp	r3, #64	; 0x40
 80062ec:	d103      	bne.n	80062f6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f88e 	bl	8006410 <I2C_MemoryTransmit_TXE_BTF>
}
 80062f4:	e012      	b.n	800631c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fa:	781a      	ldrb	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006306:	1c5a      	adds	r2, r3, #1
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006310:	b29b      	uxth	r3, r3
 8006312:	3b01      	subs	r3, #1
 8006314:	b29a      	uxth	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800631a:	e7ff      	b.n	800631c <I2C_MasterTransmit_TXE+0x130>
 800631c:	bf00      	nop
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006330:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b21      	cmp	r3, #33	; 0x21
 800633c:	d164      	bne.n	8006408 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006342:	b29b      	uxth	r3, r3
 8006344:	2b00      	cmp	r3, #0
 8006346:	d012      	beq.n	800636e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634c:	781a      	ldrb	r2, [r3, #0]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006358:	1c5a      	adds	r2, r3, #1
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006362:	b29b      	uxth	r3, r3
 8006364:	3b01      	subs	r3, #1
 8006366:	b29a      	uxth	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800636c:	e04c      	b.n	8006408 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2b08      	cmp	r3, #8
 8006372:	d01d      	beq.n	80063b0 <I2C_MasterTransmit_BTF+0x8c>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2b20      	cmp	r3, #32
 8006378:	d01a      	beq.n	80063b0 <I2C_MasterTransmit_BTF+0x8c>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006380:	d016      	beq.n	80063b0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	685a      	ldr	r2, [r3, #4]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006390:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2211      	movs	r2, #17
 8006396:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2220      	movs	r2, #32
 80063a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f7ff fec1 	bl	8006130 <HAL_I2C_MasterTxCpltCallback>
}
 80063ae:	e02b      	b.n	8006408 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	685a      	ldr	r2, [r3, #4]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80063be:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063ce:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2220      	movs	r2, #32
 80063da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b40      	cmp	r3, #64	; 0x40
 80063e8:	d107      	bne.n	80063fa <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f7ff fedc 	bl	80061b0 <HAL_I2C_MemTxCpltCallback>
}
 80063f8:	e006      	b.n	8006408 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f7ff fe94 	bl	8006130 <HAL_I2C_MasterTxCpltCallback>
}
 8006408:	bf00      	nop
 800640a:	3710      	adds	r7, #16
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800641e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006424:	2b00      	cmp	r3, #0
 8006426:	d11d      	bne.n	8006464 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800642c:	2b01      	cmp	r3, #1
 800642e:	d10b      	bne.n	8006448 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006434:	b2da      	uxtb	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006440:	1c9a      	adds	r2, r3, #2
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006446:	e073      	b.n	8006530 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800644c:	b29b      	uxth	r3, r3
 800644e:	121b      	asrs	r3, r3, #8
 8006450:	b2da      	uxtb	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800645c:	1c5a      	adds	r2, r3, #1
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006462:	e065      	b.n	8006530 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006468:	2b01      	cmp	r3, #1
 800646a:	d10b      	bne.n	8006484 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006470:	b2da      	uxtb	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800647c:	1c5a      	adds	r2, r3, #1
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006482:	e055      	b.n	8006530 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006488:	2b02      	cmp	r3, #2
 800648a:	d151      	bne.n	8006530 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800648c:	7bfb      	ldrb	r3, [r7, #15]
 800648e:	2b22      	cmp	r3, #34	; 0x22
 8006490:	d10d      	bne.n	80064ae <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064a0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064a6:	1c5a      	adds	r2, r3, #1
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	651a      	str	r2, [r3, #80]	; 0x50
}
 80064ac:	e040      	b.n	8006530 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d015      	beq.n	80064e4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
 80064ba:	2b21      	cmp	r3, #33	; 0x21
 80064bc:	d112      	bne.n	80064e4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c2:	781a      	ldrb	r2, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ce:	1c5a      	adds	r2, r3, #1
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064d8:	b29b      	uxth	r3, r3
 80064da:	3b01      	subs	r3, #1
 80064dc:	b29a      	uxth	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80064e2:	e025      	b.n	8006530 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d120      	bne.n	8006530 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80064ee:	7bfb      	ldrb	r3, [r7, #15]
 80064f0:	2b21      	cmp	r3, #33	; 0x21
 80064f2:	d11d      	bne.n	8006530 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	685a      	ldr	r2, [r3, #4]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006502:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006512:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2220      	movs	r2, #32
 800651e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f7ff fe40 	bl	80061b0 <HAL_I2C_MemTxCpltCallback>
}
 8006530:	bf00      	nop
 8006532:	3710      	adds	r7, #16
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b22      	cmp	r3, #34	; 0x22
 800654a:	f040 80a2 	bne.w	8006692 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006552:	b29b      	uxth	r3, r3
 8006554:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2b03      	cmp	r3, #3
 800655a:	d921      	bls.n	80065a0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	691a      	ldr	r2, [r3, #16]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006566:	b2d2      	uxtb	r2, r2
 8006568:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656e:	1c5a      	adds	r2, r3, #1
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006578:	b29b      	uxth	r3, r3
 800657a:	3b01      	subs	r3, #1
 800657c:	b29a      	uxth	r2, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006586:	b29b      	uxth	r3, r3
 8006588:	2b03      	cmp	r3, #3
 800658a:	f040 8082 	bne.w	8006692 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	685a      	ldr	r2, [r3, #4]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800659c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800659e:	e078      	b.n	8006692 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d074      	beq.n	8006692 <I2C_MasterReceive_RXNE+0x15a>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d002      	beq.n	80065b4 <I2C_MasterReceive_RXNE+0x7c>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d16e      	bne.n	8006692 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f001 fc05 	bl	8007dc4 <I2C_WaitOnSTOPRequestThroughIT>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d142      	bne.n	8006646 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065ce:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	685a      	ldr	r2, [r3, #4]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80065de:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	691a      	ldr	r2, [r3, #16]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ea:	b2d2      	uxtb	r2, r2
 80065ec:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f2:	1c5a      	adds	r2, r3, #1
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	3b01      	subs	r3, #1
 8006600:	b29a      	uxth	r2, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2220      	movs	r2, #32
 800660a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b40      	cmp	r3, #64	; 0x40
 8006618:	d10a      	bne.n	8006630 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f7fc ffb3 	bl	8003594 <HAL_I2C_MemRxCpltCallback>
}
 800662e:	e030      	b.n	8006692 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2212      	movs	r2, #18
 800663c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f7ff fd80 	bl	8006144 <HAL_I2C_MasterRxCpltCallback>
}
 8006644:	e025      	b.n	8006692 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006654:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	691a      	ldr	r2, [r3, #16]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006660:	b2d2      	uxtb	r2, r2
 8006662:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006668:	1c5a      	adds	r2, r3, #1
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006672:	b29b      	uxth	r3, r3
 8006674:	3b01      	subs	r3, #1
 8006676:	b29a      	uxth	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2220      	movs	r2, #32
 8006680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f7ff fd99 	bl	80061c4 <HAL_I2C_ErrorCallback>
}
 8006692:	bf00      	nop
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b084      	sub	sp, #16
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	2b04      	cmp	r3, #4
 80066b0:	d11b      	bne.n	80066ea <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	685a      	ldr	r2, [r3, #4]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066c0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	691a      	ldr	r2, [r3, #16]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066cc:	b2d2      	uxtb	r2, r2
 80066ce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d4:	1c5a      	adds	r2, r3, #1
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066de:	b29b      	uxth	r3, r3
 80066e0:	3b01      	subs	r3, #1
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80066e8:	e0bd      	b.n	8006866 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	2b03      	cmp	r3, #3
 80066f2:	d129      	bne.n	8006748 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	685a      	ldr	r2, [r3, #4]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006702:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2b04      	cmp	r3, #4
 8006708:	d00a      	beq.n	8006720 <I2C_MasterReceive_BTF+0x86>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2b02      	cmp	r3, #2
 800670e:	d007      	beq.n	8006720 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800671e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	691a      	ldr	r2, [r3, #16]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672a:	b2d2      	uxtb	r2, r2
 800672c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006732:	1c5a      	adds	r2, r3, #1
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800673c:	b29b      	uxth	r3, r3
 800673e:	3b01      	subs	r3, #1
 8006740:	b29a      	uxth	r2, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006746:	e08e      	b.n	8006866 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800674c:	b29b      	uxth	r3, r3
 800674e:	2b02      	cmp	r3, #2
 8006750:	d176      	bne.n	8006840 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d002      	beq.n	800675e <I2C_MasterReceive_BTF+0xc4>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2b10      	cmp	r3, #16
 800675c:	d108      	bne.n	8006770 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800676c:	601a      	str	r2, [r3, #0]
 800676e:	e019      	b.n	80067a4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2b04      	cmp	r3, #4
 8006774:	d002      	beq.n	800677c <I2C_MasterReceive_BTF+0xe2>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2b02      	cmp	r3, #2
 800677a:	d108      	bne.n	800678e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800678a:	601a      	str	r2, [r3, #0]
 800678c:	e00a      	b.n	80067a4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2b10      	cmp	r3, #16
 8006792:	d007      	beq.n	80067a4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067a2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	691a      	ldr	r2, [r3, #16]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ae:	b2d2      	uxtb	r2, r2
 80067b0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b6:	1c5a      	adds	r2, r3, #1
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	3b01      	subs	r3, #1
 80067c4:	b29a      	uxth	r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	691a      	ldr	r2, [r3, #16]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d4:	b2d2      	uxtb	r2, r2
 80067d6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067dc:	1c5a      	adds	r2, r3, #1
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	3b01      	subs	r3, #1
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	685a      	ldr	r2, [r3, #4]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80067fe:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2220      	movs	r2, #32
 8006804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800680e:	b2db      	uxtb	r3, r3
 8006810:	2b40      	cmp	r3, #64	; 0x40
 8006812:	d10a      	bne.n	800682a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f7fc feb6 	bl	8003594 <HAL_I2C_MemRxCpltCallback>
}
 8006828:	e01d      	b.n	8006866 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2212      	movs	r2, #18
 8006836:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f7ff fc83 	bl	8006144 <HAL_I2C_MasterRxCpltCallback>
}
 800683e:	e012      	b.n	8006866 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	691a      	ldr	r2, [r3, #16]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684a:	b2d2      	uxtb	r2, r2
 800684c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006852:	1c5a      	adds	r2, r3, #1
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800685c:	b29b      	uxth	r3, r3
 800685e:	3b01      	subs	r3, #1
 8006860:	b29a      	uxth	r2, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006866:	bf00      	nop
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800686e:	b480      	push	{r7}
 8006870:	b083      	sub	sp, #12
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b40      	cmp	r3, #64	; 0x40
 8006880:	d117      	bne.n	80068b2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006886:	2b00      	cmp	r3, #0
 8006888:	d109      	bne.n	800689e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800688e:	b2db      	uxtb	r3, r3
 8006890:	461a      	mov	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800689a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800689c:	e067      	b.n	800696e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	f043 0301 	orr.w	r3, r3, #1
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	611a      	str	r2, [r3, #16]
}
 80068b0:	e05d      	b.n	800696e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068ba:	d133      	bne.n	8006924 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	2b21      	cmp	r3, #33	; 0x21
 80068c6:	d109      	bne.n	80068dc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	461a      	mov	r2, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80068d8:	611a      	str	r2, [r3, #16]
 80068da:	e008      	b.n	80068ee <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	f043 0301 	orr.w	r3, r3, #1
 80068e6:	b2da      	uxtb	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d004      	beq.n	8006900 <I2C_Master_SB+0x92>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d108      	bne.n	8006912 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006904:	2b00      	cmp	r3, #0
 8006906:	d032      	beq.n	800696e <I2C_Master_SB+0x100>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800690e:	2b00      	cmp	r3, #0
 8006910:	d02d      	beq.n	800696e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	685a      	ldr	r2, [r3, #4]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006920:	605a      	str	r2, [r3, #4]
}
 8006922:	e024      	b.n	800696e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006928:	2b00      	cmp	r3, #0
 800692a:	d10e      	bne.n	800694a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006930:	b29b      	uxth	r3, r3
 8006932:	11db      	asrs	r3, r3, #7
 8006934:	b2db      	uxtb	r3, r3
 8006936:	f003 0306 	and.w	r3, r3, #6
 800693a:	b2db      	uxtb	r3, r3
 800693c:	f063 030f 	orn	r3, r3, #15
 8006940:	b2da      	uxtb	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	611a      	str	r2, [r3, #16]
}
 8006948:	e011      	b.n	800696e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800694e:	2b01      	cmp	r3, #1
 8006950:	d10d      	bne.n	800696e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006956:	b29b      	uxth	r3, r3
 8006958:	11db      	asrs	r3, r3, #7
 800695a:	b2db      	uxtb	r3, r3
 800695c:	f003 0306 	and.w	r3, r3, #6
 8006960:	b2db      	uxtb	r3, r3
 8006962:	f063 030e 	orn	r3, r3, #14
 8006966:	b2da      	uxtb	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	611a      	str	r2, [r3, #16]
}
 800696e:	bf00      	nop
 8006970:	370c      	adds	r7, #12
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr

0800697a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800697a:	b480      	push	{r7}
 800697c:	b083      	sub	sp, #12
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006986:	b2da      	uxtb	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006992:	2b00      	cmp	r3, #0
 8006994:	d004      	beq.n	80069a0 <I2C_Master_ADD10+0x26>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800699a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800699c:	2b00      	cmp	r3, #0
 800699e:	d108      	bne.n	80069b2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00c      	beq.n	80069c2 <I2C_Master_ADD10+0x48>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d007      	beq.n	80069c2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	685a      	ldr	r2, [r3, #4]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069c0:	605a      	str	r2, [r3, #4]
  }
}
 80069c2:	bf00      	nop
 80069c4:	370c      	adds	r7, #12
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr

080069ce <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b091      	sub	sp, #68	; 0x44
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ea:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	2b22      	cmp	r3, #34	; 0x22
 80069f6:	f040 8169 	bne.w	8006ccc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10f      	bne.n	8006a22 <I2C_Master_ADDR+0x54>
 8006a02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006a06:	2b40      	cmp	r3, #64	; 0x40
 8006a08:	d10b      	bne.n	8006a22 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	633b      	str	r3, [r7, #48]	; 0x30
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	695b      	ldr	r3, [r3, #20]
 8006a14:	633b      	str	r3, [r7, #48]	; 0x30
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	633b      	str	r3, [r7, #48]	; 0x30
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a20:	e160      	b.n	8006ce4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d11d      	bne.n	8006a66 <I2C_Master_ADDR+0x98>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006a32:	d118      	bne.n	8006a66 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a34:	2300      	movs	r3, #0
 8006a36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	695b      	ldr	r3, [r3, #20]
 8006a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	699b      	ldr	r3, [r3, #24]
 8006a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a58:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a5e:	1c5a      	adds	r2, r3, #1
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	651a      	str	r2, [r3, #80]	; 0x50
 8006a64:	e13e      	b.n	8006ce4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d113      	bne.n	8006a98 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a70:	2300      	movs	r3, #0
 8006a72:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	695b      	ldr	r3, [r3, #20]
 8006a7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a84:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a94:	601a      	str	r2, [r3, #0]
 8006a96:	e115      	b.n	8006cc4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	f040 808a 	bne.w	8006bb8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006aaa:	d137      	bne.n	8006b1c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aba:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ac6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006aca:	d113      	bne.n	8006af4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ada:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006adc:	2300      	movs	r3, #0
 8006ade:	627b      	str	r3, [r7, #36]	; 0x24
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	627b      	str	r3, [r7, #36]	; 0x24
 8006af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af2:	e0e7      	b.n	8006cc4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006af4:	2300      	movs	r3, #0
 8006af6:	623b      	str	r3, [r7, #32]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	623b      	str	r3, [r7, #32]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	623b      	str	r3, [r7, #32]
 8006b08:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b18:	601a      	str	r2, [r3, #0]
 8006b1a:	e0d3      	b.n	8006cc4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b1e:	2b08      	cmp	r3, #8
 8006b20:	d02e      	beq.n	8006b80 <I2C_Master_ADDR+0x1b2>
 8006b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b24:	2b20      	cmp	r3, #32
 8006b26:	d02b      	beq.n	8006b80 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b2a:	2b12      	cmp	r3, #18
 8006b2c:	d102      	bne.n	8006b34 <I2C_Master_ADDR+0x166>
 8006b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d125      	bne.n	8006b80 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b36:	2b04      	cmp	r3, #4
 8006b38:	d00e      	beq.n	8006b58 <I2C_Master_ADDR+0x18a>
 8006b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	d00b      	beq.n	8006b58 <I2C_Master_ADDR+0x18a>
 8006b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b42:	2b10      	cmp	r3, #16
 8006b44:	d008      	beq.n	8006b58 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b54:	601a      	str	r2, [r3, #0]
 8006b56:	e007      	b.n	8006b68 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b66:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b68:	2300      	movs	r3, #0
 8006b6a:	61fb      	str	r3, [r7, #28]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	61fb      	str	r3, [r7, #28]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	699b      	ldr	r3, [r3, #24]
 8006b7a:	61fb      	str	r3, [r7, #28]
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	e0a1      	b.n	8006cc4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b8e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b90:	2300      	movs	r3, #0
 8006b92:	61bb      	str	r3, [r7, #24]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	695b      	ldr	r3, [r3, #20]
 8006b9a:	61bb      	str	r3, [r7, #24]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	61bb      	str	r3, [r7, #24]
 8006ba4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bb4:	601a      	str	r2, [r3, #0]
 8006bb6:	e085      	b.n	8006cc4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d14d      	bne.n	8006c5e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc4:	2b04      	cmp	r3, #4
 8006bc6:	d016      	beq.n	8006bf6 <I2C_Master_ADDR+0x228>
 8006bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d013      	beq.n	8006bf6 <I2C_Master_ADDR+0x228>
 8006bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd0:	2b10      	cmp	r3, #16
 8006bd2:	d010      	beq.n	8006bf6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006be2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bf2:	601a      	str	r2, [r3, #0]
 8006bf4:	e007      	b.n	8006c06 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c04:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c14:	d117      	bne.n	8006c46 <I2C_Master_ADDR+0x278>
 8006c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006c1c:	d00b      	beq.n	8006c36 <I2C_Master_ADDR+0x268>
 8006c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d008      	beq.n	8006c36 <I2C_Master_ADDR+0x268>
 8006c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c26:	2b08      	cmp	r3, #8
 8006c28:	d005      	beq.n	8006c36 <I2C_Master_ADDR+0x268>
 8006c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c2c:	2b10      	cmp	r3, #16
 8006c2e:	d002      	beq.n	8006c36 <I2C_Master_ADDR+0x268>
 8006c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c32:	2b20      	cmp	r3, #32
 8006c34:	d107      	bne.n	8006c46 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	685a      	ldr	r2, [r3, #4]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c44:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c46:	2300      	movs	r3, #0
 8006c48:	617b      	str	r3, [r7, #20]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	695b      	ldr	r3, [r3, #20]
 8006c50:	617b      	str	r3, [r7, #20]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	699b      	ldr	r3, [r3, #24]
 8006c58:	617b      	str	r3, [r7, #20]
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	e032      	b.n	8006cc4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c6c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c7c:	d117      	bne.n	8006cae <I2C_Master_ADDR+0x2e0>
 8006c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006c84:	d00b      	beq.n	8006c9e <I2C_Master_ADDR+0x2d0>
 8006c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d008      	beq.n	8006c9e <I2C_Master_ADDR+0x2d0>
 8006c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8e:	2b08      	cmp	r3, #8
 8006c90:	d005      	beq.n	8006c9e <I2C_Master_ADDR+0x2d0>
 8006c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c94:	2b10      	cmp	r3, #16
 8006c96:	d002      	beq.n	8006c9e <I2C_Master_ADDR+0x2d0>
 8006c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9a:	2b20      	cmp	r3, #32
 8006c9c:	d107      	bne.n	8006cae <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	685a      	ldr	r2, [r3, #4]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006cac:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cae:	2300      	movs	r3, #0
 8006cb0:	613b      	str	r3, [r7, #16]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	695b      	ldr	r3, [r3, #20]
 8006cb8:	613b      	str	r3, [r7, #16]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	613b      	str	r3, [r7, #16]
 8006cc2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006cca:	e00b      	b.n	8006ce4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ccc:	2300      	movs	r3, #0
 8006cce:	60fb      	str	r3, [r7, #12]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	695b      	ldr	r3, [r3, #20]
 8006cd6:	60fb      	str	r3, [r7, #12]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	60fb      	str	r3, [r7, #12]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
}
 8006ce2:	e7ff      	b.n	8006ce4 <I2C_Master_ADDR+0x316>
 8006ce4:	bf00      	nop
 8006ce6:	3744      	adds	r7, #68	; 0x44
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cfe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d02b      	beq.n	8006d62 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0e:	781a      	ldrb	r2, [r3, #0]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1a:	1c5a      	adds	r2, r3, #1
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	3b01      	subs	r3, #1
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d114      	bne.n	8006d62 <I2C_SlaveTransmit_TXE+0x72>
 8006d38:	7bfb      	ldrb	r3, [r7, #15]
 8006d3a:	2b29      	cmp	r3, #41	; 0x29
 8006d3c:	d111      	bne.n	8006d62 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	685a      	ldr	r2, [r3, #4]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d4c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2221      	movs	r2, #33	; 0x21
 8006d52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2228      	movs	r2, #40	; 0x28
 8006d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f7ff f9fb 	bl	8006158 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006d62:	bf00      	nop
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006d6a:	b480      	push	{r7}
 8006d6c:	b083      	sub	sp, #12
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d011      	beq.n	8006da0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d80:	781a      	ldrb	r2, [r3, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8c:	1c5a      	adds	r2, r3, #1
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006da0:	bf00      	nop
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dba:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d02c      	beq.n	8006e20 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	691a      	ldr	r2, [r3, #16]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd0:	b2d2      	uxtb	r2, r2
 8006dd2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd8:	1c5a      	adds	r2, r3, #1
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	3b01      	subs	r3, #1
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d114      	bne.n	8006e20 <I2C_SlaveReceive_RXNE+0x74>
 8006df6:	7bfb      	ldrb	r3, [r7, #15]
 8006df8:	2b2a      	cmp	r3, #42	; 0x2a
 8006dfa:	d111      	bne.n	8006e20 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	685a      	ldr	r2, [r3, #4]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e0a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2222      	movs	r2, #34	; 0x22
 8006e10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2228      	movs	r2, #40	; 0x28
 8006e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f7ff f9a6 	bl	800616c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006e20:	bf00      	nop
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d012      	beq.n	8006e60 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	691a      	ldr	r2, [r3, #16]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e44:	b2d2      	uxtb	r2, r2
 8006e46:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4c:	1c5a      	adds	r2, r3, #1
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	b29a      	uxth	r2, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006e76:	2300      	movs	r3, #0
 8006e78:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006e86:	2b28      	cmp	r3, #40	; 0x28
 8006e88:	d127      	bne.n	8006eda <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	685a      	ldr	r2, [r3, #4]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e98:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	089b      	lsrs	r3, r3, #2
 8006e9e:	f003 0301 	and.w	r3, r3, #1
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d101      	bne.n	8006eaa <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	09db      	lsrs	r3, r3, #7
 8006eae:	f003 0301 	and.w	r3, r3, #1
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d103      	bne.n	8006ebe <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	81bb      	strh	r3, [r7, #12]
 8006ebc:	e002      	b.n	8006ec4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	699b      	ldr	r3, [r3, #24]
 8006ec2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006ecc:	89ba      	ldrh	r2, [r7, #12]
 8006ece:	7bfb      	ldrb	r3, [r7, #15]
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f7ff f954 	bl	8006180 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006ed8:	e00e      	b.n	8006ef8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006eda:	2300      	movs	r3, #0
 8006edc:	60bb      	str	r3, [r7, #8]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	695b      	ldr	r3, [r3, #20]
 8006ee4:	60bb      	str	r3, [r7, #8]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	699b      	ldr	r3, [r3, #24]
 8006eec:	60bb      	str	r3, [r7, #8]
 8006eee:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006ef8:	bf00      	nop
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f0e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	685a      	ldr	r2, [r3, #4]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f1e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006f20:	2300      	movs	r3, #0
 8006f22:	60bb      	str	r3, [r7, #8]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	695b      	ldr	r3, [r3, #20]
 8006f2a:	60bb      	str	r3, [r7, #8]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f042 0201 	orr.w	r2, r2, #1
 8006f3a:	601a      	str	r2, [r3, #0]
 8006f3c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f4c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f5c:	d172      	bne.n	8007044 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006f5e:	7bfb      	ldrb	r3, [r7, #15]
 8006f60:	2b22      	cmp	r3, #34	; 0x22
 8006f62:	d002      	beq.n	8006f6a <I2C_Slave_STOPF+0x6a>
 8006f64:	7bfb      	ldrb	r3, [r7, #15]
 8006f66:	2b2a      	cmp	r3, #42	; 0x2a
 8006f68:	d135      	bne.n	8006fd6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d005      	beq.n	8006f8e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f86:	f043 0204 	orr.w	r2, r3, #4
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	685a      	ldr	r2, [r3, #4]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f9c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7fd fcd6 	bl	8004954 <HAL_DMA_GetState>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d049      	beq.n	8007042 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb2:	4a69      	ldr	r2, [pc, #420]	; (8007158 <I2C_Slave_STOPF+0x258>)
 8006fb4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7fd fb1e 	bl	80045fc <HAL_DMA_Abort_IT>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d03d      	beq.n	8007042 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006fd0:	4610      	mov	r0, r2
 8006fd2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006fd4:	e035      	b.n	8007042 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	b29a      	uxth	r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d005      	beq.n	8006ffa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff2:	f043 0204 	orr.w	r2, r3, #4
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	685a      	ldr	r2, [r3, #4]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007008:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800700e:	4618      	mov	r0, r3
 8007010:	f7fd fca0 	bl	8004954 <HAL_DMA_GetState>
 8007014:	4603      	mov	r3, r0
 8007016:	2b01      	cmp	r3, #1
 8007018:	d014      	beq.n	8007044 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800701e:	4a4e      	ldr	r2, [pc, #312]	; (8007158 <I2C_Slave_STOPF+0x258>)
 8007020:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007026:	4618      	mov	r0, r3
 8007028:	f7fd fae8 	bl	80045fc <HAL_DMA_Abort_IT>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d008      	beq.n	8007044 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800703c:	4610      	mov	r0, r2
 800703e:	4798      	blx	r3
 8007040:	e000      	b.n	8007044 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007042:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007048:	b29b      	uxth	r3, r3
 800704a:	2b00      	cmp	r3, #0
 800704c:	d03e      	beq.n	80070cc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	695b      	ldr	r3, [r3, #20]
 8007054:	f003 0304 	and.w	r3, r3, #4
 8007058:	2b04      	cmp	r3, #4
 800705a:	d112      	bne.n	8007082 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	691a      	ldr	r2, [r3, #16]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007066:	b2d2      	uxtb	r2, r2
 8007068:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706e:	1c5a      	adds	r2, r3, #1
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007078:	b29b      	uxth	r3, r3
 800707a:	3b01      	subs	r3, #1
 800707c:	b29a      	uxth	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	695b      	ldr	r3, [r3, #20]
 8007088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800708c:	2b40      	cmp	r3, #64	; 0x40
 800708e:	d112      	bne.n	80070b6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	691a      	ldr	r2, [r3, #16]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709a:	b2d2      	uxtb	r2, r2
 800709c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a2:	1c5a      	adds	r2, r3, #1
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	3b01      	subs	r3, #1
 80070b0:	b29a      	uxth	r2, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d005      	beq.n	80070cc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c4:	f043 0204 	orr.w	r2, r3, #4
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d003      	beq.n	80070dc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 f8b3 	bl	8007240 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80070da:	e039      	b.n	8007150 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80070dc:	7bfb      	ldrb	r3, [r7, #15]
 80070de:	2b2a      	cmp	r3, #42	; 0x2a
 80070e0:	d109      	bne.n	80070f6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2228      	movs	r2, #40	; 0x28
 80070ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f7ff f83b 	bl	800616c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	2b28      	cmp	r3, #40	; 0x28
 8007100:	d111      	bne.n	8007126 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a15      	ldr	r2, [pc, #84]	; (800715c <I2C_Slave_STOPF+0x25c>)
 8007106:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2220      	movs	r2, #32
 8007112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f7ff f83c 	bl	800619c <HAL_I2C_ListenCpltCallback>
}
 8007124:	e014      	b.n	8007150 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800712a:	2b22      	cmp	r3, #34	; 0x22
 800712c:	d002      	beq.n	8007134 <I2C_Slave_STOPF+0x234>
 800712e:	7bfb      	ldrb	r3, [r7, #15]
 8007130:	2b22      	cmp	r3, #34	; 0x22
 8007132:	d10d      	bne.n	8007150 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2220      	movs	r2, #32
 800713e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f7ff f80e 	bl	800616c <HAL_I2C_SlaveRxCpltCallback>
}
 8007150:	bf00      	nop
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	080079c5 	.word	0x080079c5
 800715c:	ffff0000 	.word	0xffff0000

08007160 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800716e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007174:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	2b08      	cmp	r3, #8
 800717a:	d002      	beq.n	8007182 <I2C_Slave_AF+0x22>
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	2b20      	cmp	r3, #32
 8007180:	d129      	bne.n	80071d6 <I2C_Slave_AF+0x76>
 8007182:	7bfb      	ldrb	r3, [r7, #15]
 8007184:	2b28      	cmp	r3, #40	; 0x28
 8007186:	d126      	bne.n	80071d6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a2c      	ldr	r2, [pc, #176]	; (800723c <I2C_Slave_AF+0xdc>)
 800718c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	685a      	ldr	r2, [r3, #4]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800719c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80071a6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071b6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2220      	movs	r2, #32
 80071c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f7fe ffe4 	bl	800619c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80071d4:	e02e      	b.n	8007234 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80071d6:	7bfb      	ldrb	r3, [r7, #15]
 80071d8:	2b21      	cmp	r3, #33	; 0x21
 80071da:	d126      	bne.n	800722a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a17      	ldr	r2, [pc, #92]	; (800723c <I2C_Slave_AF+0xdc>)
 80071e0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2221      	movs	r2, #33	; 0x21
 80071e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2220      	movs	r2, #32
 80071ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	685a      	ldr	r2, [r3, #4]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007206:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007210:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007220:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f7fe ff98 	bl	8006158 <HAL_I2C_SlaveTxCpltCallback>
}
 8007228:	e004      	b.n	8007234 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007232:	615a      	str	r2, [r3, #20]
}
 8007234:	bf00      	nop
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	ffff0000 	.word	0xffff0000

08007240 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800724e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007256:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007258:	7bbb      	ldrb	r3, [r7, #14]
 800725a:	2b10      	cmp	r3, #16
 800725c:	d002      	beq.n	8007264 <I2C_ITError+0x24>
 800725e:	7bbb      	ldrb	r3, [r7, #14]
 8007260:	2b40      	cmp	r3, #64	; 0x40
 8007262:	d10a      	bne.n	800727a <I2C_ITError+0x3a>
 8007264:	7bfb      	ldrb	r3, [r7, #15]
 8007266:	2b22      	cmp	r3, #34	; 0x22
 8007268:	d107      	bne.n	800727a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007278:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800727a:	7bfb      	ldrb	r3, [r7, #15]
 800727c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007280:	2b28      	cmp	r3, #40	; 0x28
 8007282:	d107      	bne.n	8007294 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2228      	movs	r2, #40	; 0x28
 800728e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007292:	e015      	b.n	80072c0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800729e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072a2:	d00a      	beq.n	80072ba <I2C_ITError+0x7a>
 80072a4:	7bfb      	ldrb	r3, [r7, #15]
 80072a6:	2b60      	cmp	r3, #96	; 0x60
 80072a8:	d007      	beq.n	80072ba <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2220      	movs	r2, #32
 80072ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072ce:	d162      	bne.n	8007396 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	685a      	ldr	r2, [r3, #4]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072de:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d020      	beq.n	8007330 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072f2:	4a6a      	ldr	r2, [pc, #424]	; (800749c <I2C_ITError+0x25c>)
 80072f4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7fd f97e 	bl	80045fc <HAL_DMA_Abort_IT>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	f000 8089 	beq.w	800741a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f022 0201 	bic.w	r2, r2, #1
 8007316:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2220      	movs	r2, #32
 800731c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800732a:	4610      	mov	r0, r2
 800732c:	4798      	blx	r3
 800732e:	e074      	b.n	800741a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007334:	4a59      	ldr	r2, [pc, #356]	; (800749c <I2C_ITError+0x25c>)
 8007336:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733c:	4618      	mov	r0, r3
 800733e:	f7fd f95d 	bl	80045fc <HAL_DMA_Abort_IT>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d068      	beq.n	800741a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	695b      	ldr	r3, [r3, #20]
 800734e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007352:	2b40      	cmp	r3, #64	; 0x40
 8007354:	d10b      	bne.n	800736e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	691a      	ldr	r2, [r3, #16]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007360:	b2d2      	uxtb	r2, r2
 8007362:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007368:	1c5a      	adds	r2, r3, #1
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f022 0201 	bic.w	r2, r2, #1
 800737c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2220      	movs	r2, #32
 8007382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007390:	4610      	mov	r0, r2
 8007392:	4798      	blx	r3
 8007394:	e041      	b.n	800741a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800739c:	b2db      	uxtb	r3, r3
 800739e:	2b60      	cmp	r3, #96	; 0x60
 80073a0:	d125      	bne.n	80073ee <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2220      	movs	r2, #32
 80073a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	695b      	ldr	r3, [r3, #20]
 80073b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ba:	2b40      	cmp	r3, #64	; 0x40
 80073bc:	d10b      	bne.n	80073d6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	691a      	ldr	r2, [r3, #16]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c8:	b2d2      	uxtb	r2, r2
 80073ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d0:	1c5a      	adds	r2, r3, #1
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f022 0201 	bic.w	r2, r2, #1
 80073e4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f7fe fef6 	bl	80061d8 <HAL_I2C_AbortCpltCallback>
 80073ec:	e015      	b.n	800741a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	695b      	ldr	r3, [r3, #20]
 80073f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073f8:	2b40      	cmp	r3, #64	; 0x40
 80073fa:	d10b      	bne.n	8007414 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	691a      	ldr	r2, [r3, #16]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007406:	b2d2      	uxtb	r2, r2
 8007408:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740e:	1c5a      	adds	r2, r3, #1
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f7fe fed5 	bl	80061c4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	f003 0301 	and.w	r3, r3, #1
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10e      	bne.n	8007448 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007430:	2b00      	cmp	r3, #0
 8007432:	d109      	bne.n	8007448 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800743a:	2b00      	cmp	r3, #0
 800743c:	d104      	bne.n	8007448 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007444:	2b00      	cmp	r3, #0
 8007446:	d007      	beq.n	8007458 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	685a      	ldr	r2, [r3, #4]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007456:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800745e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007464:	f003 0304 	and.w	r3, r3, #4
 8007468:	2b04      	cmp	r3, #4
 800746a:	d113      	bne.n	8007494 <I2C_ITError+0x254>
 800746c:	7bfb      	ldrb	r3, [r7, #15]
 800746e:	2b28      	cmp	r3, #40	; 0x28
 8007470:	d110      	bne.n	8007494 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a0a      	ldr	r2, [pc, #40]	; (80074a0 <I2C_ITError+0x260>)
 8007476:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2220      	movs	r2, #32
 8007482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7fe fe84 	bl	800619c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007494:	bf00      	nop
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}
 800749c:	080079c5 	.word	0x080079c5
 80074a0:	ffff0000 	.word	0xffff0000

080074a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b088      	sub	sp, #32
 80074a8:	af02      	add	r7, sp, #8
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	4608      	mov	r0, r1
 80074ae:	4611      	mov	r1, r2
 80074b0:	461a      	mov	r2, r3
 80074b2:	4603      	mov	r3, r0
 80074b4:	817b      	strh	r3, [r7, #10]
 80074b6:	460b      	mov	r3, r1
 80074b8:	813b      	strh	r3, [r7, #8]
 80074ba:	4613      	mov	r3, r2
 80074bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80074ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d0:	9300      	str	r3, [sp, #0]
 80074d2:	6a3b      	ldr	r3, [r7, #32]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f000 fb1a 	bl	8007b14 <I2C_WaitOnFlagUntilTimeout>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00d      	beq.n	8007502 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074f4:	d103      	bne.n	80074fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80074fe:	2303      	movs	r3, #3
 8007500:	e05f      	b.n	80075c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007502:	897b      	ldrh	r3, [r7, #10]
 8007504:	b2db      	uxtb	r3, r3
 8007506:	461a      	mov	r2, r3
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007510:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007514:	6a3a      	ldr	r2, [r7, #32]
 8007516:	492d      	ldr	r1, [pc, #180]	; (80075cc <I2C_RequestMemoryWrite+0x128>)
 8007518:	68f8      	ldr	r0, [r7, #12]
 800751a:	f000 fb52 	bl	8007bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800751e:	4603      	mov	r3, r0
 8007520:	2b00      	cmp	r3, #0
 8007522:	d001      	beq.n	8007528 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	e04c      	b.n	80075c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007528:	2300      	movs	r3, #0
 800752a:	617b      	str	r3, [r7, #20]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	695b      	ldr	r3, [r3, #20]
 8007532:	617b      	str	r3, [r7, #20]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	699b      	ldr	r3, [r3, #24]
 800753a:	617b      	str	r3, [r7, #20]
 800753c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800753e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007540:	6a39      	ldr	r1, [r7, #32]
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f000 fbbc 	bl	8007cc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00d      	beq.n	800756a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007552:	2b04      	cmp	r3, #4
 8007554:	d107      	bne.n	8007566 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007564:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e02b      	b.n	80075c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800756a:	88fb      	ldrh	r3, [r7, #6]
 800756c:	2b01      	cmp	r3, #1
 800756e:	d105      	bne.n	800757c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007570:	893b      	ldrh	r3, [r7, #8]
 8007572:	b2da      	uxtb	r2, r3
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	611a      	str	r2, [r3, #16]
 800757a:	e021      	b.n	80075c0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800757c:	893b      	ldrh	r3, [r7, #8]
 800757e:	0a1b      	lsrs	r3, r3, #8
 8007580:	b29b      	uxth	r3, r3
 8007582:	b2da      	uxtb	r2, r3
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800758a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800758c:	6a39      	ldr	r1, [r7, #32]
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f000 fb96 	bl	8007cc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00d      	beq.n	80075b6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759e:	2b04      	cmp	r3, #4
 80075a0:	d107      	bne.n	80075b2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e005      	b.n	80075c2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80075b6:	893b      	ldrh	r3, [r7, #8]
 80075b8:	b2da      	uxtb	r2, r3
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3718      	adds	r7, #24
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop
 80075cc:	00010002 	.word	0x00010002

080075d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b088      	sub	sp, #32
 80075d4:	af02      	add	r7, sp, #8
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	4608      	mov	r0, r1
 80075da:	4611      	mov	r1, r2
 80075dc:	461a      	mov	r2, r3
 80075de:	4603      	mov	r3, r0
 80075e0:	817b      	strh	r3, [r7, #10]
 80075e2:	460b      	mov	r3, r1
 80075e4:	813b      	strh	r3, [r7, #8]
 80075e6:	4613      	mov	r3, r2
 80075e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80075f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007608:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800760a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760c:	9300      	str	r3, [sp, #0]
 800760e:	6a3b      	ldr	r3, [r7, #32]
 8007610:	2200      	movs	r2, #0
 8007612:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	f000 fa7c 	bl	8007b14 <I2C_WaitOnFlagUntilTimeout>
 800761c:	4603      	mov	r3, r0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00d      	beq.n	800763e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800762c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007630:	d103      	bne.n	800763a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007638:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e0aa      	b.n	8007794 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800763e:	897b      	ldrh	r3, [r7, #10]
 8007640:	b2db      	uxtb	r3, r3
 8007642:	461a      	mov	r2, r3
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800764c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800764e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007650:	6a3a      	ldr	r2, [r7, #32]
 8007652:	4952      	ldr	r1, [pc, #328]	; (800779c <I2C_RequestMemoryRead+0x1cc>)
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f000 fab4 	bl	8007bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d001      	beq.n	8007664 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	e097      	b.n	8007794 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007664:	2300      	movs	r3, #0
 8007666:	617b      	str	r3, [r7, #20]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	617b      	str	r3, [r7, #20]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	699b      	ldr	r3, [r3, #24]
 8007676:	617b      	str	r3, [r7, #20]
 8007678:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800767a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800767c:	6a39      	ldr	r1, [r7, #32]
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f000 fb1e 	bl	8007cc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00d      	beq.n	80076a6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768e:	2b04      	cmp	r3, #4
 8007690:	d107      	bne.n	80076a2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e076      	b.n	8007794 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80076a6:	88fb      	ldrh	r3, [r7, #6]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d105      	bne.n	80076b8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80076ac:	893b      	ldrh	r3, [r7, #8]
 80076ae:	b2da      	uxtb	r2, r3
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	611a      	str	r2, [r3, #16]
 80076b6:	e021      	b.n	80076fc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80076b8:	893b      	ldrh	r3, [r7, #8]
 80076ba:	0a1b      	lsrs	r3, r3, #8
 80076bc:	b29b      	uxth	r3, r3
 80076be:	b2da      	uxtb	r2, r3
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076c8:	6a39      	ldr	r1, [r7, #32]
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f000 faf8 	bl	8007cc0 <I2C_WaitOnTXEFlagUntilTimeout>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00d      	beq.n	80076f2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076da:	2b04      	cmp	r3, #4
 80076dc:	d107      	bne.n	80076ee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e050      	b.n	8007794 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80076f2:	893b      	ldrh	r3, [r7, #8]
 80076f4:	b2da      	uxtb	r2, r3
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076fe:	6a39      	ldr	r1, [r7, #32]
 8007700:	68f8      	ldr	r0, [r7, #12]
 8007702:	f000 fadd 	bl	8007cc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00d      	beq.n	8007728 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007710:	2b04      	cmp	r3, #4
 8007712:	d107      	bne.n	8007724 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007722:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	e035      	b.n	8007794 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007736:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773a:	9300      	str	r3, [sp, #0]
 800773c:	6a3b      	ldr	r3, [r7, #32]
 800773e:	2200      	movs	r2, #0
 8007740:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	f000 f9e5 	bl	8007b14 <I2C_WaitOnFlagUntilTimeout>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00d      	beq.n	800776c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800775a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800775e:	d103      	bne.n	8007768 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007766:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007768:	2303      	movs	r3, #3
 800776a:	e013      	b.n	8007794 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800776c:	897b      	ldrh	r3, [r7, #10]
 800776e:	b2db      	uxtb	r3, r3
 8007770:	f043 0301 	orr.w	r3, r3, #1
 8007774:	b2da      	uxtb	r2, r3
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800777c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777e:	6a3a      	ldr	r2, [r7, #32]
 8007780:	4906      	ldr	r1, [pc, #24]	; (800779c <I2C_RequestMemoryRead+0x1cc>)
 8007782:	68f8      	ldr	r0, [r7, #12]
 8007784:	f000 fa1d 	bl	8007bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e000      	b.n	8007794 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3718      	adds	r7, #24
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	00010002 	.word	0x00010002

080077a0 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b086      	sub	sp, #24
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ac:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077b4:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077bc:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c2:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	685a      	ldr	r2, [r3, #4]
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80077d2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d003      	beq.n	80077e4 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077e0:	2200      	movs	r2, #0
 80077e2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d003      	beq.n	80077f4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f0:	2200      	movs	r2, #0
 80077f2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80077f4:	7cfb      	ldrb	r3, [r7, #19]
 80077f6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80077fa:	2b21      	cmp	r3, #33	; 0x21
 80077fc:	d007      	beq.n	800780e <I2C_DMAXferCplt+0x6e>
 80077fe:	7cfb      	ldrb	r3, [r7, #19]
 8007800:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8007804:	2b22      	cmp	r3, #34	; 0x22
 8007806:	d131      	bne.n	800786c <I2C_DMAXferCplt+0xcc>
 8007808:	7cbb      	ldrb	r3, [r7, #18]
 800780a:	2b20      	cmp	r3, #32
 800780c:	d12e      	bne.n	800786c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	685a      	ldr	r2, [r3, #4]
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800781c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	2200      	movs	r2, #0
 8007822:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007824:	7cfb      	ldrb	r3, [r7, #19]
 8007826:	2b29      	cmp	r3, #41	; 0x29
 8007828:	d10a      	bne.n	8007840 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	2221      	movs	r2, #33	; 0x21
 800782e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	2228      	movs	r2, #40	; 0x28
 8007834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007838:	6978      	ldr	r0, [r7, #20]
 800783a:	f7fe fc8d 	bl	8006158 <HAL_I2C_SlaveTxCpltCallback>
 800783e:	e00c      	b.n	800785a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007840:	7cfb      	ldrb	r3, [r7, #19]
 8007842:	2b2a      	cmp	r3, #42	; 0x2a
 8007844:	d109      	bne.n	800785a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	2222      	movs	r2, #34	; 0x22
 800784a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	2228      	movs	r2, #40	; 0x28
 8007850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007854:	6978      	ldr	r0, [r7, #20]
 8007856:	f7fe fc89 	bl	800616c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	685a      	ldr	r2, [r3, #4]
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8007868:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800786a:	e06a      	b.n	8007942 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007872:	b2db      	uxtb	r3, r3
 8007874:	2b00      	cmp	r3, #0
 8007876:	d064      	beq.n	8007942 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800787c:	b29b      	uxth	r3, r3
 800787e:	2b01      	cmp	r3, #1
 8007880:	d107      	bne.n	8007892 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007890:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	685a      	ldr	r2, [r3, #4]
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80078a0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80078a8:	d009      	beq.n	80078be <I2C_DMAXferCplt+0x11e>
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2b08      	cmp	r3, #8
 80078ae:	d006      	beq.n	80078be <I2C_DMAXferCplt+0x11e>
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80078b6:	d002      	beq.n	80078be <I2C_DMAXferCplt+0x11e>
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2b20      	cmp	r3, #32
 80078bc:	d107      	bne.n	80078ce <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078cc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	685a      	ldr	r2, [r3, #4]
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80078dc:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	685a      	ldr	r2, [r3, #4]
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078ec:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	2200      	movs	r2, #0
 80078f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d003      	beq.n	8007904 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80078fc:	6978      	ldr	r0, [r7, #20]
 80078fe:	f7fe fc61 	bl	80061c4 <HAL_I2C_ErrorCallback>
}
 8007902:	e01e      	b.n	8007942 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	2220      	movs	r2, #32
 8007908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007912:	b2db      	uxtb	r3, r3
 8007914:	2b40      	cmp	r3, #64	; 0x40
 8007916:	d10a      	bne.n	800792e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	2200      	movs	r2, #0
 800791c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	2200      	movs	r2, #0
 8007924:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8007926:	6978      	ldr	r0, [r7, #20]
 8007928:	f7fb fe34 	bl	8003594 <HAL_I2C_MemRxCpltCallback>
}
 800792c:	e009      	b.n	8007942 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	2212      	movs	r2, #18
 800793a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800793c:	6978      	ldr	r0, [r7, #20]
 800793e:	f7fe fc01 	bl	8006144 <HAL_I2C_MasterRxCpltCallback>
}
 8007942:	bf00      	nop
 8007944:	3718      	adds	r7, #24
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b084      	sub	sp, #16
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007956:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800795c:	2b00      	cmp	r3, #0
 800795e:	d003      	beq.n	8007968 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007964:	2200      	movs	r2, #0
 8007966:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796c:	2b00      	cmp	r3, #0
 800796e:	d003      	beq.n	8007978 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007974:	2200      	movs	r2, #0
 8007976:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f7fc fff9 	bl	8004970 <HAL_DMA_GetError>
 800797e:	4603      	mov	r3, r0
 8007980:	2b02      	cmp	r3, #2
 8007982:	d01b      	beq.n	80079bc <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007992:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2200      	movs	r2, #0
 8007998:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2220      	movs	r2, #32
 800799e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ae:	f043 0210 	orr.w	r2, r3, #16
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	f7fe fc04 	bl	80061c4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80079bc:	bf00      	nop
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b086      	sub	sp, #24
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079cc:	2300      	movs	r3, #0
 80079ce:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079dc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80079de:	4b4b      	ldr	r3, [pc, #300]	; (8007b0c <I2C_DMAAbort+0x148>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	08db      	lsrs	r3, r3, #3
 80079e4:	4a4a      	ldr	r2, [pc, #296]	; (8007b10 <I2C_DMAAbort+0x14c>)
 80079e6:	fba2 2303 	umull	r2, r3, r2, r3
 80079ea:	0a1a      	lsrs	r2, r3, #8
 80079ec:	4613      	mov	r3, r2
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4413      	add	r3, r2
 80079f2:	00da      	lsls	r2, r3, #3
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d106      	bne.n	8007a0c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a02:	f043 0220 	orr.w	r2, r3, #32
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007a0a:	e00a      	b.n	8007a22 <I2C_DMAAbort+0x5e>
    }
    count--;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a20:	d0ea      	beq.n	80079f8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d003      	beq.n	8007a32 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a2e:	2200      	movs	r2, #0
 8007a30:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d003      	beq.n	8007a42 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3e:	2200      	movs	r2, #0
 8007a40:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a50:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	2200      	movs	r2, #0
 8007a56:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d003      	beq.n	8007a68 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a64:	2200      	movs	r2, #0
 8007a66:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d003      	beq.n	8007a78 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a74:	2200      	movs	r2, #0
 8007a76:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f022 0201 	bic.w	r2, r2, #1
 8007a86:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	2b60      	cmp	r3, #96	; 0x60
 8007a92:	d10e      	bne.n	8007ab2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	2220      	movs	r2, #32
 8007a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007aaa:	6978      	ldr	r0, [r7, #20]
 8007aac:	f7fe fb94 	bl	80061d8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007ab0:	e027      	b.n	8007b02 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007ab2:	7cfb      	ldrb	r3, [r7, #19]
 8007ab4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007ab8:	2b28      	cmp	r3, #40	; 0x28
 8007aba:	d117      	bne.n	8007aec <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f042 0201 	orr.w	r2, r2, #1
 8007aca:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007ada:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	2228      	movs	r2, #40	; 0x28
 8007ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007aea:	e007      	b.n	8007afc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	2220      	movs	r2, #32
 8007af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007afc:	6978      	ldr	r0, [r7, #20]
 8007afe:	f7fe fb61 	bl	80061c4 <HAL_I2C_ErrorCallback>
}
 8007b02:	bf00      	nop
 8007b04:	3718      	adds	r7, #24
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	20000108 	.word	0x20000108
 8007b10:	14f8b589 	.word	0x14f8b589

08007b14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	603b      	str	r3, [r7, #0]
 8007b20:	4613      	mov	r3, r2
 8007b22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b24:	e025      	b.n	8007b72 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b2c:	d021      	beq.n	8007b72 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b2e:	f7fc faad 	bl	800408c <HAL_GetTick>
 8007b32:	4602      	mov	r2, r0
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	1ad3      	subs	r3, r2, r3
 8007b38:	683a      	ldr	r2, [r7, #0]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d302      	bcc.n	8007b44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d116      	bne.n	8007b72 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2200      	movs	r2, #0
 8007b48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2220      	movs	r2, #32
 8007b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5e:	f043 0220 	orr.w	r2, r3, #32
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e023      	b.n	8007bba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	0c1b      	lsrs	r3, r3, #16
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d10d      	bne.n	8007b98 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	695b      	ldr	r3, [r3, #20]
 8007b82:	43da      	mvns	r2, r3
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	4013      	ands	r3, r2
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	bf0c      	ite	eq
 8007b8e:	2301      	moveq	r3, #1
 8007b90:	2300      	movne	r3, #0
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	461a      	mov	r2, r3
 8007b96:	e00c      	b.n	8007bb2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	699b      	ldr	r3, [r3, #24]
 8007b9e:	43da      	mvns	r2, r3
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	4013      	ands	r3, r2
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	bf0c      	ite	eq
 8007baa:	2301      	moveq	r3, #1
 8007bac:	2300      	movne	r3, #0
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	79fb      	ldrb	r3, [r7, #7]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d0b6      	beq.n	8007b26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b084      	sub	sp, #16
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	60f8      	str	r0, [r7, #12]
 8007bca:	60b9      	str	r1, [r7, #8]
 8007bcc:	607a      	str	r2, [r7, #4]
 8007bce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007bd0:	e051      	b.n	8007c76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	695b      	ldr	r3, [r3, #20]
 8007bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007be0:	d123      	bne.n	8007c2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bf0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007bfa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2220      	movs	r2, #32
 8007c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c16:	f043 0204 	orr.w	r2, r3, #4
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e046      	b.n	8007cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c30:	d021      	beq.n	8007c76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c32:	f7fc fa2b 	bl	800408c <HAL_GetTick>
 8007c36:	4602      	mov	r2, r0
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	1ad3      	subs	r3, r2, r3
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d302      	bcc.n	8007c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d116      	bne.n	8007c76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2220      	movs	r2, #32
 8007c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c62:	f043 0220 	orr.w	r2, r3, #32
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	e020      	b.n	8007cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	0c1b      	lsrs	r3, r3, #16
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d10c      	bne.n	8007c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	695b      	ldr	r3, [r3, #20]
 8007c86:	43da      	mvns	r2, r3
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	bf14      	ite	ne
 8007c92:	2301      	movne	r3, #1
 8007c94:	2300      	moveq	r3, #0
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	e00b      	b.n	8007cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	699b      	ldr	r3, [r3, #24]
 8007ca0:	43da      	mvns	r2, r3
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	bf14      	ite	ne
 8007cac:	2301      	movne	r3, #1
 8007cae:	2300      	moveq	r3, #0
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d18d      	bne.n	8007bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	60b9      	str	r1, [r7, #8]
 8007cca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ccc:	e02d      	b.n	8007d2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007cce:	68f8      	ldr	r0, [r7, #12]
 8007cd0:	f000 f900 	bl	8007ed4 <I2C_IsAcknowledgeFailed>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d001      	beq.n	8007cde <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e02d      	b.n	8007d3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce4:	d021      	beq.n	8007d2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ce6:	f7fc f9d1 	bl	800408c <HAL_GetTick>
 8007cea:	4602      	mov	r2, r0
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	68ba      	ldr	r2, [r7, #8]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d302      	bcc.n	8007cfc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d116      	bne.n	8007d2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2220      	movs	r2, #32
 8007d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d16:	f043 0220 	orr.w	r2, r3, #32
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e007      	b.n	8007d3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	695b      	ldr	r3, [r3, #20]
 8007d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d34:	2b80      	cmp	r3, #128	; 0x80
 8007d36:	d1ca      	bne.n	8007cce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b084      	sub	sp, #16
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	60f8      	str	r0, [r7, #12]
 8007d4a:	60b9      	str	r1, [r7, #8]
 8007d4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007d4e:	e02d      	b.n	8007dac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f000 f8bf 	bl	8007ed4 <I2C_IsAcknowledgeFailed>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d001      	beq.n	8007d60 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e02d      	b.n	8007dbc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d66:	d021      	beq.n	8007dac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d68:	f7fc f990 	bl	800408c <HAL_GetTick>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	1ad3      	subs	r3, r2, r3
 8007d72:	68ba      	ldr	r2, [r7, #8]
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d302      	bcc.n	8007d7e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d116      	bne.n	8007dac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2200      	movs	r2, #0
 8007d82:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2220      	movs	r2, #32
 8007d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d98:	f043 0220 	orr.w	r2, r3, #32
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	e007      	b.n	8007dbc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	695b      	ldr	r3, [r3, #20]
 8007db2:	f003 0304 	and.w	r3, r3, #4
 8007db6:	2b04      	cmp	r3, #4
 8007db8:	d1ca      	bne.n	8007d50 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007dd0:	4b13      	ldr	r3, [pc, #76]	; (8007e20 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	08db      	lsrs	r3, r3, #3
 8007dd6:	4a13      	ldr	r2, [pc, #76]	; (8007e24 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8007ddc:	0a1a      	lsrs	r2, r3, #8
 8007dde:	4613      	mov	r3, r2
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	4413      	add	r3, r2
 8007de4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	3b01      	subs	r3, #1
 8007dea:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d107      	bne.n	8007e02 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df6:	f043 0220 	orr.w	r2, r3, #32
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e008      	b.n	8007e14 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e10:	d0e9      	beq.n	8007de6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007e12:	2300      	movs	r3, #0
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3714      	adds	r7, #20
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr
 8007e20:	20000108 	.word	0x20000108
 8007e24:	14f8b589 	.word	0x14f8b589

08007e28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	60b9      	str	r1, [r7, #8]
 8007e32:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007e34:	e042      	b.n	8007ebc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	695b      	ldr	r3, [r3, #20]
 8007e3c:	f003 0310 	and.w	r3, r3, #16
 8007e40:	2b10      	cmp	r3, #16
 8007e42:	d119      	bne.n	8007e78 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f06f 0210 	mvn.w	r2, #16
 8007e4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2200      	movs	r2, #0
 8007e52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2220      	movs	r2, #32
 8007e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007e74:	2301      	movs	r3, #1
 8007e76:	e029      	b.n	8007ecc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e78:	f7fc f908 	bl	800408c <HAL_GetTick>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	68ba      	ldr	r2, [r7, #8]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d302      	bcc.n	8007e8e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d116      	bne.n	8007ebc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2200      	movs	r2, #0
 8007e92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2220      	movs	r2, #32
 8007e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea8:	f043 0220 	orr.w	r2, r3, #32
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e007      	b.n	8007ecc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	695b      	ldr	r3, [r3, #20]
 8007ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ec6:	2b40      	cmp	r3, #64	; 0x40
 8007ec8:	d1b5      	bne.n	8007e36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	695b      	ldr	r3, [r3, #20]
 8007ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eea:	d11b      	bne.n	8007f24 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007ef4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2220      	movs	r2, #32
 8007f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f10:	f043 0204 	orr.w	r2, r3, #4
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	e000      	b.n	8007f26 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	370c      	adds	r7, #12
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b083      	sub	sp, #12
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f3e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007f42:	d103      	bne.n	8007f4c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007f4a:	e007      	b.n	8007f5c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f50:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007f54:	d102      	bne.n	8007f5c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2208      	movs	r2, #8
 8007f5a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007f5c:	bf00      	nop
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b086      	sub	sp, #24
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d101      	bne.n	8007f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	e264      	b.n	8008444 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 0301 	and.w	r3, r3, #1
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d075      	beq.n	8008072 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f86:	4ba3      	ldr	r3, [pc, #652]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	f003 030c 	and.w	r3, r3, #12
 8007f8e:	2b04      	cmp	r3, #4
 8007f90:	d00c      	beq.n	8007fac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f92:	4ba0      	ldr	r3, [pc, #640]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f9a:	2b08      	cmp	r3, #8
 8007f9c:	d112      	bne.n	8007fc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f9e:	4b9d      	ldr	r3, [pc, #628]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007faa:	d10b      	bne.n	8007fc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fac:	4b99      	ldr	r3, [pc, #612]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d05b      	beq.n	8008070 <HAL_RCC_OscConfig+0x108>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d157      	bne.n	8008070 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e23f      	b.n	8008444 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fcc:	d106      	bne.n	8007fdc <HAL_RCC_OscConfig+0x74>
 8007fce:	4b91      	ldr	r3, [pc, #580]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a90      	ldr	r2, [pc, #576]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 8007fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fd8:	6013      	str	r3, [r2, #0]
 8007fda:	e01d      	b.n	8008018 <HAL_RCC_OscConfig+0xb0>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007fe4:	d10c      	bne.n	8008000 <HAL_RCC_OscConfig+0x98>
 8007fe6:	4b8b      	ldr	r3, [pc, #556]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a8a      	ldr	r2, [pc, #552]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 8007fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ff0:	6013      	str	r3, [r2, #0]
 8007ff2:	4b88      	ldr	r3, [pc, #544]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a87      	ldr	r2, [pc, #540]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 8007ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ffc:	6013      	str	r3, [r2, #0]
 8007ffe:	e00b      	b.n	8008018 <HAL_RCC_OscConfig+0xb0>
 8008000:	4b84      	ldr	r3, [pc, #528]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a83      	ldr	r2, [pc, #524]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 8008006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800800a:	6013      	str	r3, [r2, #0]
 800800c:	4b81      	ldr	r3, [pc, #516]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a80      	ldr	r2, [pc, #512]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 8008012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d013      	beq.n	8008048 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008020:	f7fc f834 	bl	800408c <HAL_GetTick>
 8008024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008026:	e008      	b.n	800803a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008028:	f7fc f830 	bl	800408c <HAL_GetTick>
 800802c:	4602      	mov	r2, r0
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	1ad3      	subs	r3, r2, r3
 8008032:	2b64      	cmp	r3, #100	; 0x64
 8008034:	d901      	bls.n	800803a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008036:	2303      	movs	r3, #3
 8008038:	e204      	b.n	8008444 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800803a:	4b76      	ldr	r3, [pc, #472]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008042:	2b00      	cmp	r3, #0
 8008044:	d0f0      	beq.n	8008028 <HAL_RCC_OscConfig+0xc0>
 8008046:	e014      	b.n	8008072 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008048:	f7fc f820 	bl	800408c <HAL_GetTick>
 800804c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800804e:	e008      	b.n	8008062 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008050:	f7fc f81c 	bl	800408c <HAL_GetTick>
 8008054:	4602      	mov	r2, r0
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	1ad3      	subs	r3, r2, r3
 800805a:	2b64      	cmp	r3, #100	; 0x64
 800805c:	d901      	bls.n	8008062 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800805e:	2303      	movs	r3, #3
 8008060:	e1f0      	b.n	8008444 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008062:	4b6c      	ldr	r3, [pc, #432]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800806a:	2b00      	cmp	r3, #0
 800806c:	d1f0      	bne.n	8008050 <HAL_RCC_OscConfig+0xe8>
 800806e:	e000      	b.n	8008072 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f003 0302 	and.w	r3, r3, #2
 800807a:	2b00      	cmp	r3, #0
 800807c:	d063      	beq.n	8008146 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800807e:	4b65      	ldr	r3, [pc, #404]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	f003 030c 	and.w	r3, r3, #12
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00b      	beq.n	80080a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800808a:	4b62      	ldr	r3, [pc, #392]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008092:	2b08      	cmp	r3, #8
 8008094:	d11c      	bne.n	80080d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008096:	4b5f      	ldr	r3, [pc, #380]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d116      	bne.n	80080d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080a2:	4b5c      	ldr	r3, [pc, #368]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f003 0302 	and.w	r3, r3, #2
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d005      	beq.n	80080ba <HAL_RCC_OscConfig+0x152>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	68db      	ldr	r3, [r3, #12]
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d001      	beq.n	80080ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	e1c4      	b.n	8008444 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080ba:	4b56      	ldr	r3, [pc, #344]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	00db      	lsls	r3, r3, #3
 80080c8:	4952      	ldr	r1, [pc, #328]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 80080ca:	4313      	orrs	r3, r2
 80080cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080ce:	e03a      	b.n	8008146 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d020      	beq.n	800811a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80080d8:	4b4f      	ldr	r3, [pc, #316]	; (8008218 <HAL_RCC_OscConfig+0x2b0>)
 80080da:	2201      	movs	r2, #1
 80080dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080de:	f7fb ffd5 	bl	800408c <HAL_GetTick>
 80080e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080e4:	e008      	b.n	80080f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080e6:	f7fb ffd1 	bl	800408c <HAL_GetTick>
 80080ea:	4602      	mov	r2, r0
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	1ad3      	subs	r3, r2, r3
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	d901      	bls.n	80080f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80080f4:	2303      	movs	r3, #3
 80080f6:	e1a5      	b.n	8008444 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080f8:	4b46      	ldr	r3, [pc, #280]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f003 0302 	and.w	r3, r3, #2
 8008100:	2b00      	cmp	r3, #0
 8008102:	d0f0      	beq.n	80080e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008104:	4b43      	ldr	r3, [pc, #268]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	691b      	ldr	r3, [r3, #16]
 8008110:	00db      	lsls	r3, r3, #3
 8008112:	4940      	ldr	r1, [pc, #256]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 8008114:	4313      	orrs	r3, r2
 8008116:	600b      	str	r3, [r1, #0]
 8008118:	e015      	b.n	8008146 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800811a:	4b3f      	ldr	r3, [pc, #252]	; (8008218 <HAL_RCC_OscConfig+0x2b0>)
 800811c:	2200      	movs	r2, #0
 800811e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008120:	f7fb ffb4 	bl	800408c <HAL_GetTick>
 8008124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008126:	e008      	b.n	800813a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008128:	f7fb ffb0 	bl	800408c <HAL_GetTick>
 800812c:	4602      	mov	r2, r0
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	2b02      	cmp	r3, #2
 8008134:	d901      	bls.n	800813a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008136:	2303      	movs	r3, #3
 8008138:	e184      	b.n	8008444 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800813a:	4b36      	ldr	r3, [pc, #216]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f003 0302 	and.w	r3, r3, #2
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1f0      	bne.n	8008128 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f003 0308 	and.w	r3, r3, #8
 800814e:	2b00      	cmp	r3, #0
 8008150:	d030      	beq.n	80081b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	695b      	ldr	r3, [r3, #20]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d016      	beq.n	8008188 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800815a:	4b30      	ldr	r3, [pc, #192]	; (800821c <HAL_RCC_OscConfig+0x2b4>)
 800815c:	2201      	movs	r2, #1
 800815e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008160:	f7fb ff94 	bl	800408c <HAL_GetTick>
 8008164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008166:	e008      	b.n	800817a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008168:	f7fb ff90 	bl	800408c <HAL_GetTick>
 800816c:	4602      	mov	r2, r0
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	2b02      	cmp	r3, #2
 8008174:	d901      	bls.n	800817a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008176:	2303      	movs	r3, #3
 8008178:	e164      	b.n	8008444 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800817a:	4b26      	ldr	r3, [pc, #152]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 800817c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800817e:	f003 0302 	and.w	r3, r3, #2
 8008182:	2b00      	cmp	r3, #0
 8008184:	d0f0      	beq.n	8008168 <HAL_RCC_OscConfig+0x200>
 8008186:	e015      	b.n	80081b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008188:	4b24      	ldr	r3, [pc, #144]	; (800821c <HAL_RCC_OscConfig+0x2b4>)
 800818a:	2200      	movs	r2, #0
 800818c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800818e:	f7fb ff7d 	bl	800408c <HAL_GetTick>
 8008192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008194:	e008      	b.n	80081a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008196:	f7fb ff79 	bl	800408c <HAL_GetTick>
 800819a:	4602      	mov	r2, r0
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	1ad3      	subs	r3, r2, r3
 80081a0:	2b02      	cmp	r3, #2
 80081a2:	d901      	bls.n	80081a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80081a4:	2303      	movs	r3, #3
 80081a6:	e14d      	b.n	8008444 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80081a8:	4b1a      	ldr	r3, [pc, #104]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 80081aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081ac:	f003 0302 	and.w	r3, r3, #2
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1f0      	bne.n	8008196 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f003 0304 	and.w	r3, r3, #4
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f000 80a0 	beq.w	8008302 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80081c2:	2300      	movs	r3, #0
 80081c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80081c6:	4b13      	ldr	r3, [pc, #76]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 80081c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d10f      	bne.n	80081f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081d2:	2300      	movs	r3, #0
 80081d4:	60bb      	str	r3, [r7, #8]
 80081d6:	4b0f      	ldr	r3, [pc, #60]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 80081d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081da:	4a0e      	ldr	r2, [pc, #56]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 80081dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081e0:	6413      	str	r3, [r2, #64]	; 0x40
 80081e2:	4b0c      	ldr	r3, [pc, #48]	; (8008214 <HAL_RCC_OscConfig+0x2ac>)
 80081e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081ea:	60bb      	str	r3, [r7, #8]
 80081ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80081ee:	2301      	movs	r3, #1
 80081f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081f2:	4b0b      	ldr	r3, [pc, #44]	; (8008220 <HAL_RCC_OscConfig+0x2b8>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d121      	bne.n	8008242 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80081fe:	4b08      	ldr	r3, [pc, #32]	; (8008220 <HAL_RCC_OscConfig+0x2b8>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a07      	ldr	r2, [pc, #28]	; (8008220 <HAL_RCC_OscConfig+0x2b8>)
 8008204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008208:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800820a:	f7fb ff3f 	bl	800408c <HAL_GetTick>
 800820e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008210:	e011      	b.n	8008236 <HAL_RCC_OscConfig+0x2ce>
 8008212:	bf00      	nop
 8008214:	40023800 	.word	0x40023800
 8008218:	42470000 	.word	0x42470000
 800821c:	42470e80 	.word	0x42470e80
 8008220:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008224:	f7fb ff32 	bl	800408c <HAL_GetTick>
 8008228:	4602      	mov	r2, r0
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	1ad3      	subs	r3, r2, r3
 800822e:	2b02      	cmp	r3, #2
 8008230:	d901      	bls.n	8008236 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008232:	2303      	movs	r3, #3
 8008234:	e106      	b.n	8008444 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008236:	4b85      	ldr	r3, [pc, #532]	; (800844c <HAL_RCC_OscConfig+0x4e4>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800823e:	2b00      	cmp	r3, #0
 8008240:	d0f0      	beq.n	8008224 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	2b01      	cmp	r3, #1
 8008248:	d106      	bne.n	8008258 <HAL_RCC_OscConfig+0x2f0>
 800824a:	4b81      	ldr	r3, [pc, #516]	; (8008450 <HAL_RCC_OscConfig+0x4e8>)
 800824c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800824e:	4a80      	ldr	r2, [pc, #512]	; (8008450 <HAL_RCC_OscConfig+0x4e8>)
 8008250:	f043 0301 	orr.w	r3, r3, #1
 8008254:	6713      	str	r3, [r2, #112]	; 0x70
 8008256:	e01c      	b.n	8008292 <HAL_RCC_OscConfig+0x32a>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	2b05      	cmp	r3, #5
 800825e:	d10c      	bne.n	800827a <HAL_RCC_OscConfig+0x312>
 8008260:	4b7b      	ldr	r3, [pc, #492]	; (8008450 <HAL_RCC_OscConfig+0x4e8>)
 8008262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008264:	4a7a      	ldr	r2, [pc, #488]	; (8008450 <HAL_RCC_OscConfig+0x4e8>)
 8008266:	f043 0304 	orr.w	r3, r3, #4
 800826a:	6713      	str	r3, [r2, #112]	; 0x70
 800826c:	4b78      	ldr	r3, [pc, #480]	; (8008450 <HAL_RCC_OscConfig+0x4e8>)
 800826e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008270:	4a77      	ldr	r2, [pc, #476]	; (8008450 <HAL_RCC_OscConfig+0x4e8>)
 8008272:	f043 0301 	orr.w	r3, r3, #1
 8008276:	6713      	str	r3, [r2, #112]	; 0x70
 8008278:	e00b      	b.n	8008292 <HAL_RCC_OscConfig+0x32a>
 800827a:	4b75      	ldr	r3, [pc, #468]	; (8008450 <HAL_RCC_OscConfig+0x4e8>)
 800827c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800827e:	4a74      	ldr	r2, [pc, #464]	; (8008450 <HAL_RCC_OscConfig+0x4e8>)
 8008280:	f023 0301 	bic.w	r3, r3, #1
 8008284:	6713      	str	r3, [r2, #112]	; 0x70
 8008286:	4b72      	ldr	r3, [pc, #456]	; (8008450 <HAL_RCC_OscConfig+0x4e8>)
 8008288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800828a:	4a71      	ldr	r2, [pc, #452]	; (8008450 <HAL_RCC_OscConfig+0x4e8>)
 800828c:	f023 0304 	bic.w	r3, r3, #4
 8008290:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d015      	beq.n	80082c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800829a:	f7fb fef7 	bl	800408c <HAL_GetTick>
 800829e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082a0:	e00a      	b.n	80082b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082a2:	f7fb fef3 	bl	800408c <HAL_GetTick>
 80082a6:	4602      	mov	r2, r0
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	1ad3      	subs	r3, r2, r3
 80082ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d901      	bls.n	80082b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80082b4:	2303      	movs	r3, #3
 80082b6:	e0c5      	b.n	8008444 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082b8:	4b65      	ldr	r3, [pc, #404]	; (8008450 <HAL_RCC_OscConfig+0x4e8>)
 80082ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082bc:	f003 0302 	and.w	r3, r3, #2
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d0ee      	beq.n	80082a2 <HAL_RCC_OscConfig+0x33a>
 80082c4:	e014      	b.n	80082f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082c6:	f7fb fee1 	bl	800408c <HAL_GetTick>
 80082ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082cc:	e00a      	b.n	80082e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082ce:	f7fb fedd 	bl	800408c <HAL_GetTick>
 80082d2:	4602      	mov	r2, r0
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	1ad3      	subs	r3, r2, r3
 80082d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80082dc:	4293      	cmp	r3, r2
 80082de:	d901      	bls.n	80082e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80082e0:	2303      	movs	r3, #3
 80082e2:	e0af      	b.n	8008444 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082e4:	4b5a      	ldr	r3, [pc, #360]	; (8008450 <HAL_RCC_OscConfig+0x4e8>)
 80082e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082e8:	f003 0302 	and.w	r3, r3, #2
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d1ee      	bne.n	80082ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80082f0:	7dfb      	ldrb	r3, [r7, #23]
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d105      	bne.n	8008302 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80082f6:	4b56      	ldr	r3, [pc, #344]	; (8008450 <HAL_RCC_OscConfig+0x4e8>)
 80082f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082fa:	4a55      	ldr	r2, [pc, #340]	; (8008450 <HAL_RCC_OscConfig+0x4e8>)
 80082fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008300:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	699b      	ldr	r3, [r3, #24]
 8008306:	2b00      	cmp	r3, #0
 8008308:	f000 809b 	beq.w	8008442 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800830c:	4b50      	ldr	r3, [pc, #320]	; (8008450 <HAL_RCC_OscConfig+0x4e8>)
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	f003 030c 	and.w	r3, r3, #12
 8008314:	2b08      	cmp	r3, #8
 8008316:	d05c      	beq.n	80083d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	699b      	ldr	r3, [r3, #24]
 800831c:	2b02      	cmp	r3, #2
 800831e:	d141      	bne.n	80083a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008320:	4b4c      	ldr	r3, [pc, #304]	; (8008454 <HAL_RCC_OscConfig+0x4ec>)
 8008322:	2200      	movs	r2, #0
 8008324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008326:	f7fb feb1 	bl	800408c <HAL_GetTick>
 800832a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800832c:	e008      	b.n	8008340 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800832e:	f7fb fead 	bl	800408c <HAL_GetTick>
 8008332:	4602      	mov	r2, r0
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	1ad3      	subs	r3, r2, r3
 8008338:	2b02      	cmp	r3, #2
 800833a:	d901      	bls.n	8008340 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800833c:	2303      	movs	r3, #3
 800833e:	e081      	b.n	8008444 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008340:	4b43      	ldr	r3, [pc, #268]	; (8008450 <HAL_RCC_OscConfig+0x4e8>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008348:	2b00      	cmp	r3, #0
 800834a:	d1f0      	bne.n	800832e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	69da      	ldr	r2, [r3, #28]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6a1b      	ldr	r3, [r3, #32]
 8008354:	431a      	orrs	r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835a:	019b      	lsls	r3, r3, #6
 800835c:	431a      	orrs	r2, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008362:	085b      	lsrs	r3, r3, #1
 8008364:	3b01      	subs	r3, #1
 8008366:	041b      	lsls	r3, r3, #16
 8008368:	431a      	orrs	r2, r3
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800836e:	061b      	lsls	r3, r3, #24
 8008370:	4937      	ldr	r1, [pc, #220]	; (8008450 <HAL_RCC_OscConfig+0x4e8>)
 8008372:	4313      	orrs	r3, r2
 8008374:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008376:	4b37      	ldr	r3, [pc, #220]	; (8008454 <HAL_RCC_OscConfig+0x4ec>)
 8008378:	2201      	movs	r2, #1
 800837a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800837c:	f7fb fe86 	bl	800408c <HAL_GetTick>
 8008380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008382:	e008      	b.n	8008396 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008384:	f7fb fe82 	bl	800408c <HAL_GetTick>
 8008388:	4602      	mov	r2, r0
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	1ad3      	subs	r3, r2, r3
 800838e:	2b02      	cmp	r3, #2
 8008390:	d901      	bls.n	8008396 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008392:	2303      	movs	r3, #3
 8008394:	e056      	b.n	8008444 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008396:	4b2e      	ldr	r3, [pc, #184]	; (8008450 <HAL_RCC_OscConfig+0x4e8>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d0f0      	beq.n	8008384 <HAL_RCC_OscConfig+0x41c>
 80083a2:	e04e      	b.n	8008442 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083a4:	4b2b      	ldr	r3, [pc, #172]	; (8008454 <HAL_RCC_OscConfig+0x4ec>)
 80083a6:	2200      	movs	r2, #0
 80083a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083aa:	f7fb fe6f 	bl	800408c <HAL_GetTick>
 80083ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083b0:	e008      	b.n	80083c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083b2:	f7fb fe6b 	bl	800408c <HAL_GetTick>
 80083b6:	4602      	mov	r2, r0
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	1ad3      	subs	r3, r2, r3
 80083bc:	2b02      	cmp	r3, #2
 80083be:	d901      	bls.n	80083c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80083c0:	2303      	movs	r3, #3
 80083c2:	e03f      	b.n	8008444 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083c4:	4b22      	ldr	r3, [pc, #136]	; (8008450 <HAL_RCC_OscConfig+0x4e8>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d1f0      	bne.n	80083b2 <HAL_RCC_OscConfig+0x44a>
 80083d0:	e037      	b.n	8008442 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	699b      	ldr	r3, [r3, #24]
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d101      	bne.n	80083de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	e032      	b.n	8008444 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80083de:	4b1c      	ldr	r3, [pc, #112]	; (8008450 <HAL_RCC_OscConfig+0x4e8>)
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	699b      	ldr	r3, [r3, #24]
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d028      	beq.n	800843e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d121      	bne.n	800843e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008404:	429a      	cmp	r2, r3
 8008406:	d11a      	bne.n	800843e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008408:	68fa      	ldr	r2, [r7, #12]
 800840a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800840e:	4013      	ands	r3, r2
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008414:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008416:	4293      	cmp	r3, r2
 8008418:	d111      	bne.n	800843e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008424:	085b      	lsrs	r3, r3, #1
 8008426:	3b01      	subs	r3, #1
 8008428:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800842a:	429a      	cmp	r2, r3
 800842c:	d107      	bne.n	800843e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008438:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800843a:	429a      	cmp	r2, r3
 800843c:	d001      	beq.n	8008442 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800843e:	2301      	movs	r3, #1
 8008440:	e000      	b.n	8008444 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8008442:	2300      	movs	r3, #0
}
 8008444:	4618      	mov	r0, r3
 8008446:	3718      	adds	r7, #24
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}
 800844c:	40007000 	.word	0x40007000
 8008450:	40023800 	.word	0x40023800
 8008454:	42470060 	.word	0x42470060

08008458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d101      	bne.n	800846c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	e0cc      	b.n	8008606 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800846c:	4b68      	ldr	r3, [pc, #416]	; (8008610 <HAL_RCC_ClockConfig+0x1b8>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f003 0307 	and.w	r3, r3, #7
 8008474:	683a      	ldr	r2, [r7, #0]
 8008476:	429a      	cmp	r2, r3
 8008478:	d90c      	bls.n	8008494 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800847a:	4b65      	ldr	r3, [pc, #404]	; (8008610 <HAL_RCC_ClockConfig+0x1b8>)
 800847c:	683a      	ldr	r2, [r7, #0]
 800847e:	b2d2      	uxtb	r2, r2
 8008480:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008482:	4b63      	ldr	r3, [pc, #396]	; (8008610 <HAL_RCC_ClockConfig+0x1b8>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f003 0307 	and.w	r3, r3, #7
 800848a:	683a      	ldr	r2, [r7, #0]
 800848c:	429a      	cmp	r2, r3
 800848e:	d001      	beq.n	8008494 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	e0b8      	b.n	8008606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f003 0302 	and.w	r3, r3, #2
 800849c:	2b00      	cmp	r3, #0
 800849e:	d020      	beq.n	80084e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 0304 	and.w	r3, r3, #4
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d005      	beq.n	80084b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80084ac:	4b59      	ldr	r3, [pc, #356]	; (8008614 <HAL_RCC_ClockConfig+0x1bc>)
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	4a58      	ldr	r2, [pc, #352]	; (8008614 <HAL_RCC_ClockConfig+0x1bc>)
 80084b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80084b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 0308 	and.w	r3, r3, #8
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d005      	beq.n	80084d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80084c4:	4b53      	ldr	r3, [pc, #332]	; (8008614 <HAL_RCC_ClockConfig+0x1bc>)
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	4a52      	ldr	r2, [pc, #328]	; (8008614 <HAL_RCC_ClockConfig+0x1bc>)
 80084ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80084ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084d0:	4b50      	ldr	r3, [pc, #320]	; (8008614 <HAL_RCC_ClockConfig+0x1bc>)
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	494d      	ldr	r1, [pc, #308]	; (8008614 <HAL_RCC_ClockConfig+0x1bc>)
 80084de:	4313      	orrs	r3, r2
 80084e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f003 0301 	and.w	r3, r3, #1
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d044      	beq.n	8008578 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d107      	bne.n	8008506 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084f6:	4b47      	ldr	r3, [pc, #284]	; (8008614 <HAL_RCC_ClockConfig+0x1bc>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d119      	bne.n	8008536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008502:	2301      	movs	r3, #1
 8008504:	e07f      	b.n	8008606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	2b02      	cmp	r3, #2
 800850c:	d003      	beq.n	8008516 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008512:	2b03      	cmp	r3, #3
 8008514:	d107      	bne.n	8008526 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008516:	4b3f      	ldr	r3, [pc, #252]	; (8008614 <HAL_RCC_ClockConfig+0x1bc>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800851e:	2b00      	cmp	r3, #0
 8008520:	d109      	bne.n	8008536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	e06f      	b.n	8008606 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008526:	4b3b      	ldr	r3, [pc, #236]	; (8008614 <HAL_RCC_ClockConfig+0x1bc>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f003 0302 	and.w	r3, r3, #2
 800852e:	2b00      	cmp	r3, #0
 8008530:	d101      	bne.n	8008536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	e067      	b.n	8008606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008536:	4b37      	ldr	r3, [pc, #220]	; (8008614 <HAL_RCC_ClockConfig+0x1bc>)
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	f023 0203 	bic.w	r2, r3, #3
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	4934      	ldr	r1, [pc, #208]	; (8008614 <HAL_RCC_ClockConfig+0x1bc>)
 8008544:	4313      	orrs	r3, r2
 8008546:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008548:	f7fb fda0 	bl	800408c <HAL_GetTick>
 800854c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800854e:	e00a      	b.n	8008566 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008550:	f7fb fd9c 	bl	800408c <HAL_GetTick>
 8008554:	4602      	mov	r2, r0
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	1ad3      	subs	r3, r2, r3
 800855a:	f241 3288 	movw	r2, #5000	; 0x1388
 800855e:	4293      	cmp	r3, r2
 8008560:	d901      	bls.n	8008566 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008562:	2303      	movs	r3, #3
 8008564:	e04f      	b.n	8008606 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008566:	4b2b      	ldr	r3, [pc, #172]	; (8008614 <HAL_RCC_ClockConfig+0x1bc>)
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	f003 020c 	and.w	r2, r3, #12
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	429a      	cmp	r2, r3
 8008576:	d1eb      	bne.n	8008550 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008578:	4b25      	ldr	r3, [pc, #148]	; (8008610 <HAL_RCC_ClockConfig+0x1b8>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f003 0307 	and.w	r3, r3, #7
 8008580:	683a      	ldr	r2, [r7, #0]
 8008582:	429a      	cmp	r2, r3
 8008584:	d20c      	bcs.n	80085a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008586:	4b22      	ldr	r3, [pc, #136]	; (8008610 <HAL_RCC_ClockConfig+0x1b8>)
 8008588:	683a      	ldr	r2, [r7, #0]
 800858a:	b2d2      	uxtb	r2, r2
 800858c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800858e:	4b20      	ldr	r3, [pc, #128]	; (8008610 <HAL_RCC_ClockConfig+0x1b8>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f003 0307 	and.w	r3, r3, #7
 8008596:	683a      	ldr	r2, [r7, #0]
 8008598:	429a      	cmp	r2, r3
 800859a:	d001      	beq.n	80085a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	e032      	b.n	8008606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f003 0304 	and.w	r3, r3, #4
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d008      	beq.n	80085be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80085ac:	4b19      	ldr	r3, [pc, #100]	; (8008614 <HAL_RCC_ClockConfig+0x1bc>)
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	68db      	ldr	r3, [r3, #12]
 80085b8:	4916      	ldr	r1, [pc, #88]	; (8008614 <HAL_RCC_ClockConfig+0x1bc>)
 80085ba:	4313      	orrs	r3, r2
 80085bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f003 0308 	and.w	r3, r3, #8
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d009      	beq.n	80085de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80085ca:	4b12      	ldr	r3, [pc, #72]	; (8008614 <HAL_RCC_ClockConfig+0x1bc>)
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	691b      	ldr	r3, [r3, #16]
 80085d6:	00db      	lsls	r3, r3, #3
 80085d8:	490e      	ldr	r1, [pc, #56]	; (8008614 <HAL_RCC_ClockConfig+0x1bc>)
 80085da:	4313      	orrs	r3, r2
 80085dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80085de:	f000 f821 	bl	8008624 <HAL_RCC_GetSysClockFreq>
 80085e2:	4602      	mov	r2, r0
 80085e4:	4b0b      	ldr	r3, [pc, #44]	; (8008614 <HAL_RCC_ClockConfig+0x1bc>)
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	091b      	lsrs	r3, r3, #4
 80085ea:	f003 030f 	and.w	r3, r3, #15
 80085ee:	490a      	ldr	r1, [pc, #40]	; (8008618 <HAL_RCC_ClockConfig+0x1c0>)
 80085f0:	5ccb      	ldrb	r3, [r1, r3]
 80085f2:	fa22 f303 	lsr.w	r3, r2, r3
 80085f6:	4a09      	ldr	r2, [pc, #36]	; (800861c <HAL_RCC_ClockConfig+0x1c4>)
 80085f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80085fa:	4b09      	ldr	r3, [pc, #36]	; (8008620 <HAL_RCC_ClockConfig+0x1c8>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4618      	mov	r0, r3
 8008600:	f7fb fd00 	bl	8004004 <HAL_InitTick>

  return HAL_OK;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	40023c00 	.word	0x40023c00
 8008614:	40023800 	.word	0x40023800
 8008618:	0800b7b8 	.word	0x0800b7b8
 800861c:	20000108 	.word	0x20000108
 8008620:	2000010c 	.word	0x2000010c

08008624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008624:	b5b0      	push	{r4, r5, r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800862a:	2100      	movs	r1, #0
 800862c:	6079      	str	r1, [r7, #4]
 800862e:	2100      	movs	r1, #0
 8008630:	60f9      	str	r1, [r7, #12]
 8008632:	2100      	movs	r1, #0
 8008634:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008636:	2100      	movs	r1, #0
 8008638:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800863a:	4952      	ldr	r1, [pc, #328]	; (8008784 <HAL_RCC_GetSysClockFreq+0x160>)
 800863c:	6889      	ldr	r1, [r1, #8]
 800863e:	f001 010c 	and.w	r1, r1, #12
 8008642:	2908      	cmp	r1, #8
 8008644:	d00d      	beq.n	8008662 <HAL_RCC_GetSysClockFreq+0x3e>
 8008646:	2908      	cmp	r1, #8
 8008648:	f200 8094 	bhi.w	8008774 <HAL_RCC_GetSysClockFreq+0x150>
 800864c:	2900      	cmp	r1, #0
 800864e:	d002      	beq.n	8008656 <HAL_RCC_GetSysClockFreq+0x32>
 8008650:	2904      	cmp	r1, #4
 8008652:	d003      	beq.n	800865c <HAL_RCC_GetSysClockFreq+0x38>
 8008654:	e08e      	b.n	8008774 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008656:	4b4c      	ldr	r3, [pc, #304]	; (8008788 <HAL_RCC_GetSysClockFreq+0x164>)
 8008658:	60bb      	str	r3, [r7, #8]
       break;
 800865a:	e08e      	b.n	800877a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800865c:	4b4b      	ldr	r3, [pc, #300]	; (800878c <HAL_RCC_GetSysClockFreq+0x168>)
 800865e:	60bb      	str	r3, [r7, #8]
      break;
 8008660:	e08b      	b.n	800877a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008662:	4948      	ldr	r1, [pc, #288]	; (8008784 <HAL_RCC_GetSysClockFreq+0x160>)
 8008664:	6849      	ldr	r1, [r1, #4]
 8008666:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800866a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800866c:	4945      	ldr	r1, [pc, #276]	; (8008784 <HAL_RCC_GetSysClockFreq+0x160>)
 800866e:	6849      	ldr	r1, [r1, #4]
 8008670:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8008674:	2900      	cmp	r1, #0
 8008676:	d024      	beq.n	80086c2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008678:	4942      	ldr	r1, [pc, #264]	; (8008784 <HAL_RCC_GetSysClockFreq+0x160>)
 800867a:	6849      	ldr	r1, [r1, #4]
 800867c:	0989      	lsrs	r1, r1, #6
 800867e:	4608      	mov	r0, r1
 8008680:	f04f 0100 	mov.w	r1, #0
 8008684:	f240 14ff 	movw	r4, #511	; 0x1ff
 8008688:	f04f 0500 	mov.w	r5, #0
 800868c:	ea00 0204 	and.w	r2, r0, r4
 8008690:	ea01 0305 	and.w	r3, r1, r5
 8008694:	493d      	ldr	r1, [pc, #244]	; (800878c <HAL_RCC_GetSysClockFreq+0x168>)
 8008696:	fb01 f003 	mul.w	r0, r1, r3
 800869a:	2100      	movs	r1, #0
 800869c:	fb01 f102 	mul.w	r1, r1, r2
 80086a0:	1844      	adds	r4, r0, r1
 80086a2:	493a      	ldr	r1, [pc, #232]	; (800878c <HAL_RCC_GetSysClockFreq+0x168>)
 80086a4:	fba2 0101 	umull	r0, r1, r2, r1
 80086a8:	1863      	adds	r3, r4, r1
 80086aa:	4619      	mov	r1, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	461a      	mov	r2, r3
 80086b0:	f04f 0300 	mov.w	r3, #0
 80086b4:	f7f7 fd88 	bl	80001c8 <__aeabi_uldivmod>
 80086b8:	4602      	mov	r2, r0
 80086ba:	460b      	mov	r3, r1
 80086bc:	4613      	mov	r3, r2
 80086be:	60fb      	str	r3, [r7, #12]
 80086c0:	e04a      	b.n	8008758 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80086c2:	4b30      	ldr	r3, [pc, #192]	; (8008784 <HAL_RCC_GetSysClockFreq+0x160>)
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	099b      	lsrs	r3, r3, #6
 80086c8:	461a      	mov	r2, r3
 80086ca:	f04f 0300 	mov.w	r3, #0
 80086ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80086d2:	f04f 0100 	mov.w	r1, #0
 80086d6:	ea02 0400 	and.w	r4, r2, r0
 80086da:	ea03 0501 	and.w	r5, r3, r1
 80086de:	4620      	mov	r0, r4
 80086e0:	4629      	mov	r1, r5
 80086e2:	f04f 0200 	mov.w	r2, #0
 80086e6:	f04f 0300 	mov.w	r3, #0
 80086ea:	014b      	lsls	r3, r1, #5
 80086ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80086f0:	0142      	lsls	r2, r0, #5
 80086f2:	4610      	mov	r0, r2
 80086f4:	4619      	mov	r1, r3
 80086f6:	1b00      	subs	r0, r0, r4
 80086f8:	eb61 0105 	sbc.w	r1, r1, r5
 80086fc:	f04f 0200 	mov.w	r2, #0
 8008700:	f04f 0300 	mov.w	r3, #0
 8008704:	018b      	lsls	r3, r1, #6
 8008706:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800870a:	0182      	lsls	r2, r0, #6
 800870c:	1a12      	subs	r2, r2, r0
 800870e:	eb63 0301 	sbc.w	r3, r3, r1
 8008712:	f04f 0000 	mov.w	r0, #0
 8008716:	f04f 0100 	mov.w	r1, #0
 800871a:	00d9      	lsls	r1, r3, #3
 800871c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008720:	00d0      	lsls	r0, r2, #3
 8008722:	4602      	mov	r2, r0
 8008724:	460b      	mov	r3, r1
 8008726:	1912      	adds	r2, r2, r4
 8008728:	eb45 0303 	adc.w	r3, r5, r3
 800872c:	f04f 0000 	mov.w	r0, #0
 8008730:	f04f 0100 	mov.w	r1, #0
 8008734:	0299      	lsls	r1, r3, #10
 8008736:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800873a:	0290      	lsls	r0, r2, #10
 800873c:	4602      	mov	r2, r0
 800873e:	460b      	mov	r3, r1
 8008740:	4610      	mov	r0, r2
 8008742:	4619      	mov	r1, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	461a      	mov	r2, r3
 8008748:	f04f 0300 	mov.w	r3, #0
 800874c:	f7f7 fd3c 	bl	80001c8 <__aeabi_uldivmod>
 8008750:	4602      	mov	r2, r0
 8008752:	460b      	mov	r3, r1
 8008754:	4613      	mov	r3, r2
 8008756:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008758:	4b0a      	ldr	r3, [pc, #40]	; (8008784 <HAL_RCC_GetSysClockFreq+0x160>)
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	0c1b      	lsrs	r3, r3, #16
 800875e:	f003 0303 	and.w	r3, r3, #3
 8008762:	3301      	adds	r3, #1
 8008764:	005b      	lsls	r3, r3, #1
 8008766:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008770:	60bb      	str	r3, [r7, #8]
      break;
 8008772:	e002      	b.n	800877a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008774:	4b04      	ldr	r3, [pc, #16]	; (8008788 <HAL_RCC_GetSysClockFreq+0x164>)
 8008776:	60bb      	str	r3, [r7, #8]
      break;
 8008778:	bf00      	nop
    }
  }
  return sysclockfreq;
 800877a:	68bb      	ldr	r3, [r7, #8]
}
 800877c:	4618      	mov	r0, r3
 800877e:	3710      	adds	r7, #16
 8008780:	46bd      	mov	sp, r7
 8008782:	bdb0      	pop	{r4, r5, r7, pc}
 8008784:	40023800 	.word	0x40023800
 8008788:	00f42400 	.word	0x00f42400
 800878c:	017d7840 	.word	0x017d7840

08008790 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008790:	b480      	push	{r7}
 8008792:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008794:	4b03      	ldr	r3, [pc, #12]	; (80087a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8008796:	681b      	ldr	r3, [r3, #0]
}
 8008798:	4618      	mov	r0, r3
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop
 80087a4:	20000108 	.word	0x20000108

080087a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80087ac:	f7ff fff0 	bl	8008790 <HAL_RCC_GetHCLKFreq>
 80087b0:	4602      	mov	r2, r0
 80087b2:	4b05      	ldr	r3, [pc, #20]	; (80087c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	0a9b      	lsrs	r3, r3, #10
 80087b8:	f003 0307 	and.w	r3, r3, #7
 80087bc:	4903      	ldr	r1, [pc, #12]	; (80087cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80087be:	5ccb      	ldrb	r3, [r1, r3]
 80087c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	40023800 	.word	0x40023800
 80087cc:	0800b7c8 	.word	0x0800b7c8

080087d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80087d4:	f7ff ffdc 	bl	8008790 <HAL_RCC_GetHCLKFreq>
 80087d8:	4602      	mov	r2, r0
 80087da:	4b05      	ldr	r3, [pc, #20]	; (80087f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	0b5b      	lsrs	r3, r3, #13
 80087e0:	f003 0307 	and.w	r3, r3, #7
 80087e4:	4903      	ldr	r1, [pc, #12]	; (80087f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80087e6:	5ccb      	ldrb	r3, [r1, r3]
 80087e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	40023800 	.word	0x40023800
 80087f4:	0800b7c8 	.word	0x0800b7c8

080087f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d101      	bne.n	800880a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008806:	2301      	movs	r3, #1
 8008808:	e041      	b.n	800888e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008810:	b2db      	uxtb	r3, r3
 8008812:	2b00      	cmp	r3, #0
 8008814:	d106      	bne.n	8008824 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f7fa ff72 	bl	8003708 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2202      	movs	r2, #2
 8008828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	3304      	adds	r3, #4
 8008834:	4619      	mov	r1, r3
 8008836:	4610      	mov	r0, r2
 8008838:	f000 fb48 	bl	8008ecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2201      	movs	r2, #1
 8008848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2201      	movs	r2, #1
 8008858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b082      	sub	sp, #8
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d101      	bne.n	80088a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	e041      	b.n	800892c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d106      	bne.n	80088c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 f839 	bl	8008934 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2202      	movs	r2, #2
 80088c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	3304      	adds	r3, #4
 80088d2:	4619      	mov	r1, r3
 80088d4:	4610      	mov	r0, r2
 80088d6:	f000 faf9 	bl	8008ecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2201      	movs	r2, #1
 80088de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2201      	movs	r2, #1
 80088e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2201      	movs	r2, #1
 80088ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2201      	movs	r2, #1
 80088f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2201      	movs	r2, #1
 80088fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2201      	movs	r2, #1
 8008906:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2201      	movs	r2, #1
 800890e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2201      	movs	r2, #1
 8008916:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2201      	movs	r2, #1
 800891e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2201      	movs	r2, #1
 8008926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800892a:	2300      	movs	r3, #0
}
 800892c:	4618      	mov	r0, r3
 800892e:	3708      	adds	r7, #8
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800893c:	bf00      	nop
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d109      	bne.n	800896c <HAL_TIM_PWM_Start+0x24>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800895e:	b2db      	uxtb	r3, r3
 8008960:	2b01      	cmp	r3, #1
 8008962:	bf14      	ite	ne
 8008964:	2301      	movne	r3, #1
 8008966:	2300      	moveq	r3, #0
 8008968:	b2db      	uxtb	r3, r3
 800896a:	e022      	b.n	80089b2 <HAL_TIM_PWM_Start+0x6a>
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	2b04      	cmp	r3, #4
 8008970:	d109      	bne.n	8008986 <HAL_TIM_PWM_Start+0x3e>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008978:	b2db      	uxtb	r3, r3
 800897a:	2b01      	cmp	r3, #1
 800897c:	bf14      	ite	ne
 800897e:	2301      	movne	r3, #1
 8008980:	2300      	moveq	r3, #0
 8008982:	b2db      	uxtb	r3, r3
 8008984:	e015      	b.n	80089b2 <HAL_TIM_PWM_Start+0x6a>
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	2b08      	cmp	r3, #8
 800898a:	d109      	bne.n	80089a0 <HAL_TIM_PWM_Start+0x58>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008992:	b2db      	uxtb	r3, r3
 8008994:	2b01      	cmp	r3, #1
 8008996:	bf14      	ite	ne
 8008998:	2301      	movne	r3, #1
 800899a:	2300      	moveq	r3, #0
 800899c:	b2db      	uxtb	r3, r3
 800899e:	e008      	b.n	80089b2 <HAL_TIM_PWM_Start+0x6a>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	bf14      	ite	ne
 80089ac:	2301      	movne	r3, #1
 80089ae:	2300      	moveq	r3, #0
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d001      	beq.n	80089ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	e07c      	b.n	8008ab4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d104      	bne.n	80089ca <HAL_TIM_PWM_Start+0x82>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2202      	movs	r2, #2
 80089c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089c8:	e013      	b.n	80089f2 <HAL_TIM_PWM_Start+0xaa>
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	2b04      	cmp	r3, #4
 80089ce:	d104      	bne.n	80089da <HAL_TIM_PWM_Start+0x92>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2202      	movs	r2, #2
 80089d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089d8:	e00b      	b.n	80089f2 <HAL_TIM_PWM_Start+0xaa>
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	2b08      	cmp	r3, #8
 80089de:	d104      	bne.n	80089ea <HAL_TIM_PWM_Start+0xa2>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2202      	movs	r2, #2
 80089e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089e8:	e003      	b.n	80089f2 <HAL_TIM_PWM_Start+0xaa>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2202      	movs	r2, #2
 80089ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2201      	movs	r2, #1
 80089f8:	6839      	ldr	r1, [r7, #0]
 80089fa:	4618      	mov	r0, r3
 80089fc:	f000 fd50 	bl	80094a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a2d      	ldr	r2, [pc, #180]	; (8008abc <HAL_TIM_PWM_Start+0x174>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d004      	beq.n	8008a14 <HAL_TIM_PWM_Start+0xcc>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a2c      	ldr	r2, [pc, #176]	; (8008ac0 <HAL_TIM_PWM_Start+0x178>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d101      	bne.n	8008a18 <HAL_TIM_PWM_Start+0xd0>
 8008a14:	2301      	movs	r3, #1
 8008a16:	e000      	b.n	8008a1a <HAL_TIM_PWM_Start+0xd2>
 8008a18:	2300      	movs	r3, #0
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d007      	beq.n	8008a2e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a22      	ldr	r2, [pc, #136]	; (8008abc <HAL_TIM_PWM_Start+0x174>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d022      	beq.n	8008a7e <HAL_TIM_PWM_Start+0x136>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a40:	d01d      	beq.n	8008a7e <HAL_TIM_PWM_Start+0x136>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a1f      	ldr	r2, [pc, #124]	; (8008ac4 <HAL_TIM_PWM_Start+0x17c>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d018      	beq.n	8008a7e <HAL_TIM_PWM_Start+0x136>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a1d      	ldr	r2, [pc, #116]	; (8008ac8 <HAL_TIM_PWM_Start+0x180>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d013      	beq.n	8008a7e <HAL_TIM_PWM_Start+0x136>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a1c      	ldr	r2, [pc, #112]	; (8008acc <HAL_TIM_PWM_Start+0x184>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d00e      	beq.n	8008a7e <HAL_TIM_PWM_Start+0x136>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a16      	ldr	r2, [pc, #88]	; (8008ac0 <HAL_TIM_PWM_Start+0x178>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d009      	beq.n	8008a7e <HAL_TIM_PWM_Start+0x136>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a18      	ldr	r2, [pc, #96]	; (8008ad0 <HAL_TIM_PWM_Start+0x188>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d004      	beq.n	8008a7e <HAL_TIM_PWM_Start+0x136>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a16      	ldr	r2, [pc, #88]	; (8008ad4 <HAL_TIM_PWM_Start+0x18c>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d111      	bne.n	8008aa2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	f003 0307 	and.w	r3, r3, #7
 8008a88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2b06      	cmp	r3, #6
 8008a8e:	d010      	beq.n	8008ab2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f042 0201 	orr.w	r2, r2, #1
 8008a9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aa0:	e007      	b.n	8008ab2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f042 0201 	orr.w	r2, r2, #1
 8008ab0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3710      	adds	r7, #16
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	40010000 	.word	0x40010000
 8008ac0:	40010400 	.word	0x40010400
 8008ac4:	40000400 	.word	0x40000400
 8008ac8:	40000800 	.word	0x40000800
 8008acc:	40000c00 	.word	0x40000c00
 8008ad0:	40014000 	.word	0x40014000
 8008ad4:	40001800 	.word	0x40001800

08008ad8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	6839      	ldr	r1, [r7, #0]
 8008aea:	4618      	mov	r0, r3
 8008aec:	f000 fcd8 	bl	80094a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a2e      	ldr	r2, [pc, #184]	; (8008bb0 <HAL_TIM_PWM_Stop+0xd8>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d004      	beq.n	8008b04 <HAL_TIM_PWM_Stop+0x2c>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a2d      	ldr	r2, [pc, #180]	; (8008bb4 <HAL_TIM_PWM_Stop+0xdc>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d101      	bne.n	8008b08 <HAL_TIM_PWM_Stop+0x30>
 8008b04:	2301      	movs	r3, #1
 8008b06:	e000      	b.n	8008b0a <HAL_TIM_PWM_Stop+0x32>
 8008b08:	2300      	movs	r3, #0
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d017      	beq.n	8008b3e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	6a1a      	ldr	r2, [r3, #32]
 8008b14:	f241 1311 	movw	r3, #4369	; 0x1111
 8008b18:	4013      	ands	r3, r2
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d10f      	bne.n	8008b3e <HAL_TIM_PWM_Stop+0x66>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	6a1a      	ldr	r2, [r3, #32]
 8008b24:	f240 4344 	movw	r3, #1092	; 0x444
 8008b28:	4013      	ands	r3, r2
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d107      	bne.n	8008b3e <HAL_TIM_PWM_Stop+0x66>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008b3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	6a1a      	ldr	r2, [r3, #32]
 8008b44:	f241 1311 	movw	r3, #4369	; 0x1111
 8008b48:	4013      	ands	r3, r2
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d10f      	bne.n	8008b6e <HAL_TIM_PWM_Stop+0x96>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	6a1a      	ldr	r2, [r3, #32]
 8008b54:	f240 4344 	movw	r3, #1092	; 0x444
 8008b58:	4013      	ands	r3, r2
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d107      	bne.n	8008b6e <HAL_TIM_PWM_Stop+0x96>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f022 0201 	bic.w	r2, r2, #1
 8008b6c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d104      	bne.n	8008b7e <HAL_TIM_PWM_Stop+0xa6>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b7c:	e013      	b.n	8008ba6 <HAL_TIM_PWM_Stop+0xce>
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	2b04      	cmp	r3, #4
 8008b82:	d104      	bne.n	8008b8e <HAL_TIM_PWM_Stop+0xb6>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b8c:	e00b      	b.n	8008ba6 <HAL_TIM_PWM_Stop+0xce>
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	2b08      	cmp	r3, #8
 8008b92:	d104      	bne.n	8008b9e <HAL_TIM_PWM_Stop+0xc6>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b9c:	e003      	b.n	8008ba6 <HAL_TIM_PWM_Stop+0xce>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8008ba6:	2300      	movs	r3, #0
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3708      	adds	r7, #8
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	40010000 	.word	0x40010000
 8008bb4:	40010400 	.word	0x40010400

08008bb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b086      	sub	sp, #24
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d101      	bne.n	8008bd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008bd2:	2302      	movs	r3, #2
 8008bd4:	e0ae      	b.n	8008d34 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2b0c      	cmp	r3, #12
 8008be2:	f200 809f 	bhi.w	8008d24 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008be6:	a201      	add	r2, pc, #4	; (adr r2, 8008bec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bec:	08008c21 	.word	0x08008c21
 8008bf0:	08008d25 	.word	0x08008d25
 8008bf4:	08008d25 	.word	0x08008d25
 8008bf8:	08008d25 	.word	0x08008d25
 8008bfc:	08008c61 	.word	0x08008c61
 8008c00:	08008d25 	.word	0x08008d25
 8008c04:	08008d25 	.word	0x08008d25
 8008c08:	08008d25 	.word	0x08008d25
 8008c0c:	08008ca3 	.word	0x08008ca3
 8008c10:	08008d25 	.word	0x08008d25
 8008c14:	08008d25 	.word	0x08008d25
 8008c18:	08008d25 	.word	0x08008d25
 8008c1c:	08008ce3 	.word	0x08008ce3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	68b9      	ldr	r1, [r7, #8]
 8008c26:	4618      	mov	r0, r3
 8008c28:	f000 f9f0 	bl	800900c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	699a      	ldr	r2, [r3, #24]
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f042 0208 	orr.w	r2, r2, #8
 8008c3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	699a      	ldr	r2, [r3, #24]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f022 0204 	bic.w	r2, r2, #4
 8008c4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	6999      	ldr	r1, [r3, #24]
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	691a      	ldr	r2, [r3, #16]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	430a      	orrs	r2, r1
 8008c5c:	619a      	str	r2, [r3, #24]
      break;
 8008c5e:	e064      	b.n	8008d2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	68b9      	ldr	r1, [r7, #8]
 8008c66:	4618      	mov	r0, r3
 8008c68:	f000 fa40 	bl	80090ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	699a      	ldr	r2, [r3, #24]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	699a      	ldr	r2, [r3, #24]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	6999      	ldr	r1, [r3, #24]
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	691b      	ldr	r3, [r3, #16]
 8008c96:	021a      	lsls	r2, r3, #8
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	430a      	orrs	r2, r1
 8008c9e:	619a      	str	r2, [r3, #24]
      break;
 8008ca0:	e043      	b.n	8008d2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	68b9      	ldr	r1, [r7, #8]
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f000 fa95 	bl	80091d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	69da      	ldr	r2, [r3, #28]
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f042 0208 	orr.w	r2, r2, #8
 8008cbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	69da      	ldr	r2, [r3, #28]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f022 0204 	bic.w	r2, r2, #4
 8008ccc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	69d9      	ldr	r1, [r3, #28]
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	691a      	ldr	r2, [r3, #16]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	430a      	orrs	r2, r1
 8008cde:	61da      	str	r2, [r3, #28]
      break;
 8008ce0:	e023      	b.n	8008d2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	68b9      	ldr	r1, [r7, #8]
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f000 fae9 	bl	80092c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	69da      	ldr	r2, [r3, #28]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008cfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	69da      	ldr	r2, [r3, #28]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	69d9      	ldr	r1, [r3, #28]
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	691b      	ldr	r3, [r3, #16]
 8008d18:	021a      	lsls	r2, r3, #8
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	430a      	orrs	r2, r1
 8008d20:	61da      	str	r2, [r3, #28]
      break;
 8008d22:	e002      	b.n	8008d2a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	75fb      	strb	r3, [r7, #23]
      break;
 8008d28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3718      	adds	r7, #24
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008d46:	2300      	movs	r3, #0
 8008d48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d101      	bne.n	8008d58 <HAL_TIM_ConfigClockSource+0x1c>
 8008d54:	2302      	movs	r3, #2
 8008d56:	e0b4      	b.n	8008ec2 <HAL_TIM_ConfigClockSource+0x186>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2202      	movs	r2, #2
 8008d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008d76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	68ba      	ldr	r2, [r7, #8]
 8008d86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d90:	d03e      	beq.n	8008e10 <HAL_TIM_ConfigClockSource+0xd4>
 8008d92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d96:	f200 8087 	bhi.w	8008ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8008d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d9e:	f000 8086 	beq.w	8008eae <HAL_TIM_ConfigClockSource+0x172>
 8008da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008da6:	d87f      	bhi.n	8008ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8008da8:	2b70      	cmp	r3, #112	; 0x70
 8008daa:	d01a      	beq.n	8008de2 <HAL_TIM_ConfigClockSource+0xa6>
 8008dac:	2b70      	cmp	r3, #112	; 0x70
 8008dae:	d87b      	bhi.n	8008ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8008db0:	2b60      	cmp	r3, #96	; 0x60
 8008db2:	d050      	beq.n	8008e56 <HAL_TIM_ConfigClockSource+0x11a>
 8008db4:	2b60      	cmp	r3, #96	; 0x60
 8008db6:	d877      	bhi.n	8008ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8008db8:	2b50      	cmp	r3, #80	; 0x50
 8008dba:	d03c      	beq.n	8008e36 <HAL_TIM_ConfigClockSource+0xfa>
 8008dbc:	2b50      	cmp	r3, #80	; 0x50
 8008dbe:	d873      	bhi.n	8008ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8008dc0:	2b40      	cmp	r3, #64	; 0x40
 8008dc2:	d058      	beq.n	8008e76 <HAL_TIM_ConfigClockSource+0x13a>
 8008dc4:	2b40      	cmp	r3, #64	; 0x40
 8008dc6:	d86f      	bhi.n	8008ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8008dc8:	2b30      	cmp	r3, #48	; 0x30
 8008dca:	d064      	beq.n	8008e96 <HAL_TIM_ConfigClockSource+0x15a>
 8008dcc:	2b30      	cmp	r3, #48	; 0x30
 8008dce:	d86b      	bhi.n	8008ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8008dd0:	2b20      	cmp	r3, #32
 8008dd2:	d060      	beq.n	8008e96 <HAL_TIM_ConfigClockSource+0x15a>
 8008dd4:	2b20      	cmp	r3, #32
 8008dd6:	d867      	bhi.n	8008ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d05c      	beq.n	8008e96 <HAL_TIM_ConfigClockSource+0x15a>
 8008ddc:	2b10      	cmp	r3, #16
 8008dde:	d05a      	beq.n	8008e96 <HAL_TIM_ConfigClockSource+0x15a>
 8008de0:	e062      	b.n	8008ea8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6818      	ldr	r0, [r3, #0]
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	6899      	ldr	r1, [r3, #8]
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	685a      	ldr	r2, [r3, #4]
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	f000 fb35 	bl	8009460 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	689b      	ldr	r3, [r3, #8]
 8008dfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008e04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	68ba      	ldr	r2, [r7, #8]
 8008e0c:	609a      	str	r2, [r3, #8]
      break;
 8008e0e:	e04f      	b.n	8008eb0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6818      	ldr	r0, [r3, #0]
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	6899      	ldr	r1, [r3, #8]
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	685a      	ldr	r2, [r3, #4]
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	68db      	ldr	r3, [r3, #12]
 8008e20:	f000 fb1e 	bl	8009460 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	689a      	ldr	r2, [r3, #8]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e32:	609a      	str	r2, [r3, #8]
      break;
 8008e34:	e03c      	b.n	8008eb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6818      	ldr	r0, [r3, #0]
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	6859      	ldr	r1, [r3, #4]
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	461a      	mov	r2, r3
 8008e44:	f000 fa92 	bl	800936c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2150      	movs	r1, #80	; 0x50
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f000 faeb 	bl	800942a <TIM_ITRx_SetConfig>
      break;
 8008e54:	e02c      	b.n	8008eb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6818      	ldr	r0, [r3, #0]
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	6859      	ldr	r1, [r3, #4]
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	461a      	mov	r2, r3
 8008e64:	f000 fab1 	bl	80093ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2160      	movs	r1, #96	; 0x60
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f000 fadb 	bl	800942a <TIM_ITRx_SetConfig>
      break;
 8008e74:	e01c      	b.n	8008eb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6818      	ldr	r0, [r3, #0]
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	6859      	ldr	r1, [r3, #4]
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	68db      	ldr	r3, [r3, #12]
 8008e82:	461a      	mov	r2, r3
 8008e84:	f000 fa72 	bl	800936c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	2140      	movs	r1, #64	; 0x40
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f000 facb 	bl	800942a <TIM_ITRx_SetConfig>
      break;
 8008e94:	e00c      	b.n	8008eb0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	4610      	mov	r0, r2
 8008ea2:	f000 fac2 	bl	800942a <TIM_ITRx_SetConfig>
      break;
 8008ea6:	e003      	b.n	8008eb0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	73fb      	strb	r3, [r7, #15]
      break;
 8008eac:	e000      	b.n	8008eb0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008eae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3710      	adds	r7, #16
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
	...

08008ecc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b085      	sub	sp, #20
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	4a40      	ldr	r2, [pc, #256]	; (8008fe0 <TIM_Base_SetConfig+0x114>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d013      	beq.n	8008f0c <TIM_Base_SetConfig+0x40>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eea:	d00f      	beq.n	8008f0c <TIM_Base_SetConfig+0x40>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	4a3d      	ldr	r2, [pc, #244]	; (8008fe4 <TIM_Base_SetConfig+0x118>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d00b      	beq.n	8008f0c <TIM_Base_SetConfig+0x40>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	4a3c      	ldr	r2, [pc, #240]	; (8008fe8 <TIM_Base_SetConfig+0x11c>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d007      	beq.n	8008f0c <TIM_Base_SetConfig+0x40>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	4a3b      	ldr	r2, [pc, #236]	; (8008fec <TIM_Base_SetConfig+0x120>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d003      	beq.n	8008f0c <TIM_Base_SetConfig+0x40>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	4a3a      	ldr	r2, [pc, #232]	; (8008ff0 <TIM_Base_SetConfig+0x124>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d108      	bne.n	8008f1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	68fa      	ldr	r2, [r7, #12]
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	4a2f      	ldr	r2, [pc, #188]	; (8008fe0 <TIM_Base_SetConfig+0x114>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d02b      	beq.n	8008f7e <TIM_Base_SetConfig+0xb2>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f2c:	d027      	beq.n	8008f7e <TIM_Base_SetConfig+0xb2>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	4a2c      	ldr	r2, [pc, #176]	; (8008fe4 <TIM_Base_SetConfig+0x118>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d023      	beq.n	8008f7e <TIM_Base_SetConfig+0xb2>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	4a2b      	ldr	r2, [pc, #172]	; (8008fe8 <TIM_Base_SetConfig+0x11c>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d01f      	beq.n	8008f7e <TIM_Base_SetConfig+0xb2>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	4a2a      	ldr	r2, [pc, #168]	; (8008fec <TIM_Base_SetConfig+0x120>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d01b      	beq.n	8008f7e <TIM_Base_SetConfig+0xb2>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	4a29      	ldr	r2, [pc, #164]	; (8008ff0 <TIM_Base_SetConfig+0x124>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d017      	beq.n	8008f7e <TIM_Base_SetConfig+0xb2>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	4a28      	ldr	r2, [pc, #160]	; (8008ff4 <TIM_Base_SetConfig+0x128>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d013      	beq.n	8008f7e <TIM_Base_SetConfig+0xb2>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	4a27      	ldr	r2, [pc, #156]	; (8008ff8 <TIM_Base_SetConfig+0x12c>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d00f      	beq.n	8008f7e <TIM_Base_SetConfig+0xb2>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	4a26      	ldr	r2, [pc, #152]	; (8008ffc <TIM_Base_SetConfig+0x130>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d00b      	beq.n	8008f7e <TIM_Base_SetConfig+0xb2>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	4a25      	ldr	r2, [pc, #148]	; (8009000 <TIM_Base_SetConfig+0x134>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d007      	beq.n	8008f7e <TIM_Base_SetConfig+0xb2>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	4a24      	ldr	r2, [pc, #144]	; (8009004 <TIM_Base_SetConfig+0x138>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d003      	beq.n	8008f7e <TIM_Base_SetConfig+0xb2>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	4a23      	ldr	r2, [pc, #140]	; (8009008 <TIM_Base_SetConfig+0x13c>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d108      	bne.n	8008f90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	68fa      	ldr	r2, [r7, #12]
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	695b      	ldr	r3, [r3, #20]
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	68fa      	ldr	r2, [r7, #12]
 8008fa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	689a      	ldr	r2, [r3, #8]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	4a0a      	ldr	r2, [pc, #40]	; (8008fe0 <TIM_Base_SetConfig+0x114>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d003      	beq.n	8008fc4 <TIM_Base_SetConfig+0xf8>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	4a0c      	ldr	r2, [pc, #48]	; (8008ff0 <TIM_Base_SetConfig+0x124>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d103      	bne.n	8008fcc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	691a      	ldr	r2, [r3, #16]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	615a      	str	r2, [r3, #20]
}
 8008fd2:	bf00      	nop
 8008fd4:	3714      	adds	r7, #20
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop
 8008fe0:	40010000 	.word	0x40010000
 8008fe4:	40000400 	.word	0x40000400
 8008fe8:	40000800 	.word	0x40000800
 8008fec:	40000c00 	.word	0x40000c00
 8008ff0:	40010400 	.word	0x40010400
 8008ff4:	40014000 	.word	0x40014000
 8008ff8:	40014400 	.word	0x40014400
 8008ffc:	40014800 	.word	0x40014800
 8009000:	40001800 	.word	0x40001800
 8009004:	40001c00 	.word	0x40001c00
 8009008:	40002000 	.word	0x40002000

0800900c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800900c:	b480      	push	{r7}
 800900e:	b087      	sub	sp, #28
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6a1b      	ldr	r3, [r3, #32]
 800901a:	f023 0201 	bic.w	r2, r3, #1
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6a1b      	ldr	r3, [r3, #32]
 8009026:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	699b      	ldr	r3, [r3, #24]
 8009032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800903a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f023 0303 	bic.w	r3, r3, #3
 8009042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	4313      	orrs	r3, r2
 800904c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	f023 0302 	bic.w	r3, r3, #2
 8009054:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	689b      	ldr	r3, [r3, #8]
 800905a:	697a      	ldr	r2, [r7, #20]
 800905c:	4313      	orrs	r3, r2
 800905e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	4a20      	ldr	r2, [pc, #128]	; (80090e4 <TIM_OC1_SetConfig+0xd8>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d003      	beq.n	8009070 <TIM_OC1_SetConfig+0x64>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	4a1f      	ldr	r2, [pc, #124]	; (80090e8 <TIM_OC1_SetConfig+0xdc>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d10c      	bne.n	800908a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	f023 0308 	bic.w	r3, r3, #8
 8009076:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	697a      	ldr	r2, [r7, #20]
 800907e:	4313      	orrs	r3, r2
 8009080:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	f023 0304 	bic.w	r3, r3, #4
 8009088:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	4a15      	ldr	r2, [pc, #84]	; (80090e4 <TIM_OC1_SetConfig+0xd8>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d003      	beq.n	800909a <TIM_OC1_SetConfig+0x8e>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4a14      	ldr	r2, [pc, #80]	; (80090e8 <TIM_OC1_SetConfig+0xdc>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d111      	bne.n	80090be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80090a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	695b      	ldr	r3, [r3, #20]
 80090ae:	693a      	ldr	r2, [r7, #16]
 80090b0:	4313      	orrs	r3, r2
 80090b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	699b      	ldr	r3, [r3, #24]
 80090b8:	693a      	ldr	r2, [r7, #16]
 80090ba:	4313      	orrs	r3, r2
 80090bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	693a      	ldr	r2, [r7, #16]
 80090c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	68fa      	ldr	r2, [r7, #12]
 80090c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	685a      	ldr	r2, [r3, #4]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	697a      	ldr	r2, [r7, #20]
 80090d6:	621a      	str	r2, [r3, #32]
}
 80090d8:	bf00      	nop
 80090da:	371c      	adds	r7, #28
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr
 80090e4:	40010000 	.word	0x40010000
 80090e8:	40010400 	.word	0x40010400

080090ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b087      	sub	sp, #28
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6a1b      	ldr	r3, [r3, #32]
 80090fa:	f023 0210 	bic.w	r2, r3, #16
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6a1b      	ldr	r3, [r3, #32]
 8009106:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	699b      	ldr	r3, [r3, #24]
 8009112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800911a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009122:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	021b      	lsls	r3, r3, #8
 800912a:	68fa      	ldr	r2, [r7, #12]
 800912c:	4313      	orrs	r3, r2
 800912e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	f023 0320 	bic.w	r3, r3, #32
 8009136:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	011b      	lsls	r3, r3, #4
 800913e:	697a      	ldr	r2, [r7, #20]
 8009140:	4313      	orrs	r3, r2
 8009142:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	4a22      	ldr	r2, [pc, #136]	; (80091d0 <TIM_OC2_SetConfig+0xe4>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d003      	beq.n	8009154 <TIM_OC2_SetConfig+0x68>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	4a21      	ldr	r2, [pc, #132]	; (80091d4 <TIM_OC2_SetConfig+0xe8>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d10d      	bne.n	8009170 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800915a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	68db      	ldr	r3, [r3, #12]
 8009160:	011b      	lsls	r3, r3, #4
 8009162:	697a      	ldr	r2, [r7, #20]
 8009164:	4313      	orrs	r3, r2
 8009166:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800916e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	4a17      	ldr	r2, [pc, #92]	; (80091d0 <TIM_OC2_SetConfig+0xe4>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d003      	beq.n	8009180 <TIM_OC2_SetConfig+0x94>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	4a16      	ldr	r2, [pc, #88]	; (80091d4 <TIM_OC2_SetConfig+0xe8>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d113      	bne.n	80091a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009186:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800918e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	695b      	ldr	r3, [r3, #20]
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	693a      	ldr	r2, [r7, #16]
 8009198:	4313      	orrs	r3, r2
 800919a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	699b      	ldr	r3, [r3, #24]
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	693a      	ldr	r2, [r7, #16]
 80091a4:	4313      	orrs	r3, r2
 80091a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	693a      	ldr	r2, [r7, #16]
 80091ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	68fa      	ldr	r2, [r7, #12]
 80091b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	685a      	ldr	r2, [r3, #4]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	697a      	ldr	r2, [r7, #20]
 80091c0:	621a      	str	r2, [r3, #32]
}
 80091c2:	bf00      	nop
 80091c4:	371c      	adds	r7, #28
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr
 80091ce:	bf00      	nop
 80091d0:	40010000 	.word	0x40010000
 80091d4:	40010400 	.word	0x40010400

080091d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091d8:	b480      	push	{r7}
 80091da:	b087      	sub	sp, #28
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6a1b      	ldr	r3, [r3, #32]
 80091e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6a1b      	ldr	r3, [r3, #32]
 80091f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	69db      	ldr	r3, [r3, #28]
 80091fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f023 0303 	bic.w	r3, r3, #3
 800920e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	68fa      	ldr	r2, [r7, #12]
 8009216:	4313      	orrs	r3, r2
 8009218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009220:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	021b      	lsls	r3, r3, #8
 8009228:	697a      	ldr	r2, [r7, #20]
 800922a:	4313      	orrs	r3, r2
 800922c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	4a21      	ldr	r2, [pc, #132]	; (80092b8 <TIM_OC3_SetConfig+0xe0>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d003      	beq.n	800923e <TIM_OC3_SetConfig+0x66>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	4a20      	ldr	r2, [pc, #128]	; (80092bc <TIM_OC3_SetConfig+0xe4>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d10d      	bne.n	800925a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009244:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	021b      	lsls	r3, r3, #8
 800924c:	697a      	ldr	r2, [r7, #20]
 800924e:	4313      	orrs	r3, r2
 8009250:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009258:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4a16      	ldr	r2, [pc, #88]	; (80092b8 <TIM_OC3_SetConfig+0xe0>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d003      	beq.n	800926a <TIM_OC3_SetConfig+0x92>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	4a15      	ldr	r2, [pc, #84]	; (80092bc <TIM_OC3_SetConfig+0xe4>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d113      	bne.n	8009292 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009270:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009278:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	695b      	ldr	r3, [r3, #20]
 800927e:	011b      	lsls	r3, r3, #4
 8009280:	693a      	ldr	r2, [r7, #16]
 8009282:	4313      	orrs	r3, r2
 8009284:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	699b      	ldr	r3, [r3, #24]
 800928a:	011b      	lsls	r3, r3, #4
 800928c:	693a      	ldr	r2, [r7, #16]
 800928e:	4313      	orrs	r3, r2
 8009290:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	693a      	ldr	r2, [r7, #16]
 8009296:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	68fa      	ldr	r2, [r7, #12]
 800929c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	685a      	ldr	r2, [r3, #4]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	697a      	ldr	r2, [r7, #20]
 80092aa:	621a      	str	r2, [r3, #32]
}
 80092ac:	bf00      	nop
 80092ae:	371c      	adds	r7, #28
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr
 80092b8:	40010000 	.word	0x40010000
 80092bc:	40010400 	.word	0x40010400

080092c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b087      	sub	sp, #28
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6a1b      	ldr	r3, [r3, #32]
 80092ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a1b      	ldr	r3, [r3, #32]
 80092da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	69db      	ldr	r3, [r3, #28]
 80092e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	021b      	lsls	r3, r3, #8
 80092fe:	68fa      	ldr	r2, [r7, #12]
 8009300:	4313      	orrs	r3, r2
 8009302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800930a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	031b      	lsls	r3, r3, #12
 8009312:	693a      	ldr	r2, [r7, #16]
 8009314:	4313      	orrs	r3, r2
 8009316:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	4a12      	ldr	r2, [pc, #72]	; (8009364 <TIM_OC4_SetConfig+0xa4>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d003      	beq.n	8009328 <TIM_OC4_SetConfig+0x68>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	4a11      	ldr	r2, [pc, #68]	; (8009368 <TIM_OC4_SetConfig+0xa8>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d109      	bne.n	800933c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800932e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	695b      	ldr	r3, [r3, #20]
 8009334:	019b      	lsls	r3, r3, #6
 8009336:	697a      	ldr	r2, [r7, #20]
 8009338:	4313      	orrs	r3, r2
 800933a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	697a      	ldr	r2, [r7, #20]
 8009340:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	68fa      	ldr	r2, [r7, #12]
 8009346:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	685a      	ldr	r2, [r3, #4]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	693a      	ldr	r2, [r7, #16]
 8009354:	621a      	str	r2, [r3, #32]
}
 8009356:	bf00      	nop
 8009358:	371c      	adds	r7, #28
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr
 8009362:	bf00      	nop
 8009364:	40010000 	.word	0x40010000
 8009368:	40010400 	.word	0x40010400

0800936c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800936c:	b480      	push	{r7}
 800936e:	b087      	sub	sp, #28
 8009370:	af00      	add	r7, sp, #0
 8009372:	60f8      	str	r0, [r7, #12]
 8009374:	60b9      	str	r1, [r7, #8]
 8009376:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	6a1b      	ldr	r3, [r3, #32]
 800937c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	6a1b      	ldr	r3, [r3, #32]
 8009382:	f023 0201 	bic.w	r2, r3, #1
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	699b      	ldr	r3, [r3, #24]
 800938e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009396:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	011b      	lsls	r3, r3, #4
 800939c:	693a      	ldr	r2, [r7, #16]
 800939e:	4313      	orrs	r3, r2
 80093a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	f023 030a 	bic.w	r3, r3, #10
 80093a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80093aa:	697a      	ldr	r2, [r7, #20]
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	4313      	orrs	r3, r2
 80093b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	693a      	ldr	r2, [r7, #16]
 80093b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	697a      	ldr	r2, [r7, #20]
 80093bc:	621a      	str	r2, [r3, #32]
}
 80093be:	bf00      	nop
 80093c0:	371c      	adds	r7, #28
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr

080093ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80093ca:	b480      	push	{r7}
 80093cc:	b087      	sub	sp, #28
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	60f8      	str	r0, [r7, #12]
 80093d2:	60b9      	str	r1, [r7, #8]
 80093d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	6a1b      	ldr	r3, [r3, #32]
 80093da:	f023 0210 	bic.w	r2, r3, #16
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	699b      	ldr	r3, [r3, #24]
 80093e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	6a1b      	ldr	r3, [r3, #32]
 80093ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80093f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	031b      	lsls	r3, r3, #12
 80093fa:	697a      	ldr	r2, [r7, #20]
 80093fc:	4313      	orrs	r3, r2
 80093fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009406:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	011b      	lsls	r3, r3, #4
 800940c:	693a      	ldr	r2, [r7, #16]
 800940e:	4313      	orrs	r3, r2
 8009410:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	697a      	ldr	r2, [r7, #20]
 8009416:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	693a      	ldr	r2, [r7, #16]
 800941c:	621a      	str	r2, [r3, #32]
}
 800941e:	bf00      	nop
 8009420:	371c      	adds	r7, #28
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr

0800942a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800942a:	b480      	push	{r7}
 800942c:	b085      	sub	sp, #20
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
 8009432:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	689b      	ldr	r3, [r3, #8]
 8009438:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009440:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009442:	683a      	ldr	r2, [r7, #0]
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	4313      	orrs	r3, r2
 8009448:	f043 0307 	orr.w	r3, r3, #7
 800944c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	68fa      	ldr	r2, [r7, #12]
 8009452:	609a      	str	r2, [r3, #8]
}
 8009454:	bf00      	nop
 8009456:	3714      	adds	r7, #20
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009460:	b480      	push	{r7}
 8009462:	b087      	sub	sp, #28
 8009464:	af00      	add	r7, sp, #0
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	60b9      	str	r1, [r7, #8]
 800946a:	607a      	str	r2, [r7, #4]
 800946c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800947a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	021a      	lsls	r2, r3, #8
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	431a      	orrs	r2, r3
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	4313      	orrs	r3, r2
 8009488:	697a      	ldr	r2, [r7, #20]
 800948a:	4313      	orrs	r3, r2
 800948c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	697a      	ldr	r2, [r7, #20]
 8009492:	609a      	str	r2, [r3, #8]
}
 8009494:	bf00      	nop
 8009496:	371c      	adds	r7, #28
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b087      	sub	sp, #28
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	f003 031f 	and.w	r3, r3, #31
 80094b2:	2201      	movs	r2, #1
 80094b4:	fa02 f303 	lsl.w	r3, r2, r3
 80094b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	6a1a      	ldr	r2, [r3, #32]
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	43db      	mvns	r3, r3
 80094c2:	401a      	ands	r2, r3
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	6a1a      	ldr	r2, [r3, #32]
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	f003 031f 	and.w	r3, r3, #31
 80094d2:	6879      	ldr	r1, [r7, #4]
 80094d4:	fa01 f303 	lsl.w	r3, r1, r3
 80094d8:	431a      	orrs	r2, r3
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	621a      	str	r2, [r3, #32]
}
 80094de:	bf00      	nop
 80094e0:	371c      	adds	r7, #28
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr
	...

080094ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b085      	sub	sp, #20
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d101      	bne.n	8009504 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009500:	2302      	movs	r3, #2
 8009502:	e05a      	b.n	80095ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2201      	movs	r2, #1
 8009508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2202      	movs	r2, #2
 8009510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800952a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	4313      	orrs	r3, r2
 8009534:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	68fa      	ldr	r2, [r7, #12]
 800953c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4a21      	ldr	r2, [pc, #132]	; (80095c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d022      	beq.n	800958e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009550:	d01d      	beq.n	800958e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a1d      	ldr	r2, [pc, #116]	; (80095cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d018      	beq.n	800958e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a1b      	ldr	r2, [pc, #108]	; (80095d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d013      	beq.n	800958e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a1a      	ldr	r2, [pc, #104]	; (80095d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d00e      	beq.n	800958e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a18      	ldr	r2, [pc, #96]	; (80095d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d009      	beq.n	800958e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a17      	ldr	r2, [pc, #92]	; (80095dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d004      	beq.n	800958e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a15      	ldr	r2, [pc, #84]	; (80095e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d10c      	bne.n	80095a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009594:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	68ba      	ldr	r2, [r7, #8]
 800959c:	4313      	orrs	r3, r2
 800959e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	68ba      	ldr	r2, [r7, #8]
 80095a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2201      	movs	r2, #1
 80095ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095b8:	2300      	movs	r3, #0
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3714      	adds	r7, #20
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr
 80095c6:	bf00      	nop
 80095c8:	40010000 	.word	0x40010000
 80095cc:	40000400 	.word	0x40000400
 80095d0:	40000800 	.word	0x40000800
 80095d4:	40000c00 	.word	0x40000c00
 80095d8:	40010400 	.word	0x40010400
 80095dc:	40014000 	.word	0x40014000
 80095e0:	40001800 	.word	0x40001800

080095e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d101      	bne.n	80095f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80095f2:	2301      	movs	r3, #1
 80095f4:	e03f      	b.n	8009676 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d106      	bne.n	8009610 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f7fa f976 	bl	80038fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2224      	movs	r2, #36	; 0x24
 8009614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	68da      	ldr	r2, [r3, #12]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009626:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 ff49 	bl	800a4c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	691a      	ldr	r2, [r3, #16]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800963c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	695a      	ldr	r2, [r3, #20]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800964c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	68da      	ldr	r2, [r3, #12]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800965c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2220      	movs	r2, #32
 8009668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2220      	movs	r2, #32
 8009670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009674:	2300      	movs	r3, #0
}
 8009676:	4618      	mov	r0, r3
 8009678:	3708      	adds	r7, #8
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
	...

08009680 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b08c      	sub	sp, #48	; 0x30
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	4613      	mov	r3, r2
 800968c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009694:	b2db      	uxtb	r3, r3
 8009696:	2b20      	cmp	r3, #32
 8009698:	d165      	bne.n	8009766 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d002      	beq.n	80096a6 <HAL_UART_Transmit_DMA+0x26>
 80096a0:	88fb      	ldrh	r3, [r7, #6]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d101      	bne.n	80096aa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80096a6:	2301      	movs	r3, #1
 80096a8:	e05e      	b.n	8009768 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d101      	bne.n	80096b8 <HAL_UART_Transmit_DMA+0x38>
 80096b4:	2302      	movs	r3, #2
 80096b6:	e057      	b.n	8009768 <HAL_UART_Transmit_DMA+0xe8>
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2201      	movs	r2, #1
 80096bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80096c0:	68ba      	ldr	r2, [r7, #8]
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	88fa      	ldrh	r2, [r7, #6]
 80096ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	88fa      	ldrh	r2, [r7, #6]
 80096d0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2200      	movs	r2, #0
 80096d6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2221      	movs	r2, #33	; 0x21
 80096dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096e4:	4a22      	ldr	r2, [pc, #136]	; (8009770 <HAL_UART_Transmit_DMA+0xf0>)
 80096e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ec:	4a21      	ldr	r2, [pc, #132]	; (8009774 <HAL_UART_Transmit_DMA+0xf4>)
 80096ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096f4:	4a20      	ldr	r2, [pc, #128]	; (8009778 <HAL_UART_Transmit_DMA+0xf8>)
 80096f6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096fc:	2200      	movs	r2, #0
 80096fe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8009700:	f107 0308 	add.w	r3, r7, #8
 8009704:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800970a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800970c:	6819      	ldr	r1, [r3, #0]
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	3304      	adds	r3, #4
 8009714:	461a      	mov	r2, r3
 8009716:	88fb      	ldrh	r3, [r7, #6]
 8009718:	f7fa fea8 	bl	800446c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009724:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2200      	movs	r2, #0
 800972a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	3314      	adds	r3, #20
 8009734:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009736:	69bb      	ldr	r3, [r7, #24]
 8009738:	e853 3f00 	ldrex	r3, [r3]
 800973c:	617b      	str	r3, [r7, #20]
   return(result);
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009744:	62bb      	str	r3, [r7, #40]	; 0x28
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	3314      	adds	r3, #20
 800974c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800974e:	627a      	str	r2, [r7, #36]	; 0x24
 8009750:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009752:	6a39      	ldr	r1, [r7, #32]
 8009754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009756:	e841 2300 	strex	r3, r2, [r1]
 800975a:	61fb      	str	r3, [r7, #28]
   return(result);
 800975c:	69fb      	ldr	r3, [r7, #28]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d1e5      	bne.n	800972e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8009762:	2300      	movs	r3, #0
 8009764:	e000      	b.n	8009768 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8009766:	2302      	movs	r3, #2
  }
}
 8009768:	4618      	mov	r0, r3
 800976a:	3730      	adds	r7, #48	; 0x30
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}
 8009770:	08009d61 	.word	0x08009d61
 8009774:	08009dfb 	.word	0x08009dfb
 8009778:	08009f73 	.word	0x08009f73

0800977c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	4613      	mov	r3, r2
 8009788:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009790:	b2db      	uxtb	r3, r3
 8009792:	2b20      	cmp	r3, #32
 8009794:	d11d      	bne.n	80097d2 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d002      	beq.n	80097a2 <HAL_UART_Receive_DMA+0x26>
 800979c:	88fb      	ldrh	r3, [r7, #6]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d101      	bne.n	80097a6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80097a2:	2301      	movs	r3, #1
 80097a4:	e016      	b.n	80097d4 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d101      	bne.n	80097b4 <HAL_UART_Receive_DMA+0x38>
 80097b0:	2302      	movs	r3, #2
 80097b2:	e00f      	b.n	80097d4 <HAL_UART_Receive_DMA+0x58>
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2201      	movs	r2, #1
 80097b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2200      	movs	r2, #0
 80097c0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80097c2:	88fb      	ldrh	r3, [r7, #6]
 80097c4:	461a      	mov	r2, r3
 80097c6:	68b9      	ldr	r1, [r7, #8]
 80097c8:	68f8      	ldr	r0, [r7, #12]
 80097ca:	f000 fc1d 	bl	800a008 <UART_Start_Receive_DMA>
 80097ce:	4603      	mov	r3, r0
 80097d0:	e000      	b.n	80097d4 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80097d2:	2302      	movs	r3, #2
  }
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3710      	adds	r7, #16
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b0ba      	sub	sp, #232	; 0xe8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	695b      	ldr	r3, [r3, #20]
 80097fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009802:	2300      	movs	r3, #0
 8009804:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009808:	2300      	movs	r3, #0
 800980a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800980e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009812:	f003 030f 	and.w	r3, r3, #15
 8009816:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800981a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800981e:	2b00      	cmp	r3, #0
 8009820:	d10f      	bne.n	8009842 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009826:	f003 0320 	and.w	r3, r3, #32
 800982a:	2b00      	cmp	r3, #0
 800982c:	d009      	beq.n	8009842 <HAL_UART_IRQHandler+0x66>
 800982e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009832:	f003 0320 	and.w	r3, r3, #32
 8009836:	2b00      	cmp	r3, #0
 8009838:	d003      	beq.n	8009842 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 fd85 	bl	800a34a <UART_Receive_IT>
      return;
 8009840:	e256      	b.n	8009cf0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009842:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009846:	2b00      	cmp	r3, #0
 8009848:	f000 80de 	beq.w	8009a08 <HAL_UART_IRQHandler+0x22c>
 800984c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009850:	f003 0301 	and.w	r3, r3, #1
 8009854:	2b00      	cmp	r3, #0
 8009856:	d106      	bne.n	8009866 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800985c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009860:	2b00      	cmp	r3, #0
 8009862:	f000 80d1 	beq.w	8009a08 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800986a:	f003 0301 	and.w	r3, r3, #1
 800986e:	2b00      	cmp	r3, #0
 8009870:	d00b      	beq.n	800988a <HAL_UART_IRQHandler+0xae>
 8009872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800987a:	2b00      	cmp	r3, #0
 800987c:	d005      	beq.n	800988a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009882:	f043 0201 	orr.w	r2, r3, #1
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800988a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800988e:	f003 0304 	and.w	r3, r3, #4
 8009892:	2b00      	cmp	r3, #0
 8009894:	d00b      	beq.n	80098ae <HAL_UART_IRQHandler+0xd2>
 8009896:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800989a:	f003 0301 	and.w	r3, r3, #1
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d005      	beq.n	80098ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098a6:	f043 0202 	orr.w	r2, r3, #2
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80098ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098b2:	f003 0302 	and.w	r3, r3, #2
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d00b      	beq.n	80098d2 <HAL_UART_IRQHandler+0xf6>
 80098ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098be:	f003 0301 	and.w	r3, r3, #1
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d005      	beq.n	80098d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ca:	f043 0204 	orr.w	r2, r3, #4
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80098d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098d6:	f003 0308 	and.w	r3, r3, #8
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d011      	beq.n	8009902 <HAL_UART_IRQHandler+0x126>
 80098de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098e2:	f003 0320 	and.w	r3, r3, #32
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d105      	bne.n	80098f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80098ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098ee:	f003 0301 	and.w	r3, r3, #1
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d005      	beq.n	8009902 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098fa:	f043 0208 	orr.w	r2, r3, #8
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009906:	2b00      	cmp	r3, #0
 8009908:	f000 81ed 	beq.w	8009ce6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800990c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009910:	f003 0320 	and.w	r3, r3, #32
 8009914:	2b00      	cmp	r3, #0
 8009916:	d008      	beq.n	800992a <HAL_UART_IRQHandler+0x14e>
 8009918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800991c:	f003 0320 	and.w	r3, r3, #32
 8009920:	2b00      	cmp	r3, #0
 8009922:	d002      	beq.n	800992a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 fd10 	bl	800a34a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	695b      	ldr	r3, [r3, #20]
 8009930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009934:	2b40      	cmp	r3, #64	; 0x40
 8009936:	bf0c      	ite	eq
 8009938:	2301      	moveq	r3, #1
 800993a:	2300      	movne	r3, #0
 800993c:	b2db      	uxtb	r3, r3
 800993e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009946:	f003 0308 	and.w	r3, r3, #8
 800994a:	2b00      	cmp	r3, #0
 800994c:	d103      	bne.n	8009956 <HAL_UART_IRQHandler+0x17a>
 800994e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009952:	2b00      	cmp	r3, #0
 8009954:	d04f      	beq.n	80099f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 fc18 	bl	800a18c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	695b      	ldr	r3, [r3, #20]
 8009962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009966:	2b40      	cmp	r3, #64	; 0x40
 8009968:	d141      	bne.n	80099ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	3314      	adds	r3, #20
 8009970:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009974:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009978:	e853 3f00 	ldrex	r3, [r3]
 800997c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009980:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009988:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	3314      	adds	r3, #20
 8009992:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009996:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800999a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800999e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80099a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80099a6:	e841 2300 	strex	r3, r2, [r1]
 80099aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80099ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d1d9      	bne.n	800996a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d013      	beq.n	80099e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c2:	4a7d      	ldr	r2, [pc, #500]	; (8009bb8 <HAL_UART_IRQHandler+0x3dc>)
 80099c4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7fa fe16 	bl	80045fc <HAL_DMA_Abort_IT>
 80099d0:	4603      	mov	r3, r0
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d016      	beq.n	8009a04 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80099e0:	4610      	mov	r0, r2
 80099e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099e4:	e00e      	b.n	8009a04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 f9a4 	bl	8009d34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099ec:	e00a      	b.n	8009a04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 f9a0 	bl	8009d34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099f4:	e006      	b.n	8009a04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f000 f99c 	bl	8009d34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009a02:	e170      	b.n	8009ce6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a04:	bf00      	nop
    return;
 8009a06:	e16e      	b.n	8009ce6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	f040 814a 	bne.w	8009ca6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a16:	f003 0310 	and.w	r3, r3, #16
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	f000 8143 	beq.w	8009ca6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a24:	f003 0310 	and.w	r3, r3, #16
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	f000 813c 	beq.w	8009ca6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009a2e:	2300      	movs	r3, #0
 8009a30:	60bb      	str	r3, [r7, #8]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	60bb      	str	r3, [r7, #8]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	60bb      	str	r3, [r7, #8]
 8009a42:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	695b      	ldr	r3, [r3, #20]
 8009a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a4e:	2b40      	cmp	r3, #64	; 0x40
 8009a50:	f040 80b4 	bne.w	8009bbc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009a60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	f000 8140 	beq.w	8009cea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009a6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009a72:	429a      	cmp	r2, r3
 8009a74:	f080 8139 	bcs.w	8009cea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009a7e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a84:	69db      	ldr	r3, [r3, #28]
 8009a86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a8a:	f000 8088 	beq.w	8009b9e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	330c      	adds	r3, #12
 8009a94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a9c:	e853 3f00 	ldrex	r3, [r3]
 8009aa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009aa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009aa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009aac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	330c      	adds	r3, #12
 8009ab6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009aba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009abe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009ac6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009aca:	e841 2300 	strex	r3, r2, [r1]
 8009ace:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009ad2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d1d9      	bne.n	8009a8e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	3314      	adds	r3, #20
 8009ae0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ae4:	e853 3f00 	ldrex	r3, [r3]
 8009ae8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009aea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009aec:	f023 0301 	bic.w	r3, r3, #1
 8009af0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	3314      	adds	r3, #20
 8009afa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009afe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009b02:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b04:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009b06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009b0a:	e841 2300 	strex	r3, r2, [r1]
 8009b0e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009b10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d1e1      	bne.n	8009ada <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	3314      	adds	r3, #20
 8009b1c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b20:	e853 3f00 	ldrex	r3, [r3]
 8009b24:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009b26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	3314      	adds	r3, #20
 8009b36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009b3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009b3c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b3e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009b40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009b42:	e841 2300 	strex	r3, r2, [r1]
 8009b46:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009b48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d1e3      	bne.n	8009b16 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2220      	movs	r2, #32
 8009b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	330c      	adds	r3, #12
 8009b62:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b66:	e853 3f00 	ldrex	r3, [r3]
 8009b6a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009b6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b6e:	f023 0310 	bic.w	r3, r3, #16
 8009b72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	330c      	adds	r3, #12
 8009b7c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009b80:	65ba      	str	r2, [r7, #88]	; 0x58
 8009b82:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009b86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b88:	e841 2300 	strex	r3, r2, [r1]
 8009b8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d1e3      	bne.n	8009b5c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7fa fcbf 	bl	800451c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	1ad3      	subs	r3, r2, r3
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	4619      	mov	r1, r3
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 f8ca 	bl	8009d48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009bb4:	e099      	b.n	8009cea <HAL_UART_IRQHandler+0x50e>
 8009bb6:	bf00      	nop
 8009bb8:	0800a253 	.word	0x0800a253
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	1ad3      	subs	r3, r2, r3
 8009bc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	f000 808b 	beq.w	8009cee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009bd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	f000 8086 	beq.w	8009cee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	330c      	adds	r3, #12
 8009be8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bec:	e853 3f00 	ldrex	r3, [r3]
 8009bf0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bf4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009bf8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	330c      	adds	r3, #12
 8009c02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009c06:	647a      	str	r2, [r7, #68]	; 0x44
 8009c08:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009c0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c0e:	e841 2300 	strex	r3, r2, [r1]
 8009c12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d1e3      	bne.n	8009be2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	3314      	adds	r3, #20
 8009c20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c24:	e853 3f00 	ldrex	r3, [r3]
 8009c28:	623b      	str	r3, [r7, #32]
   return(result);
 8009c2a:	6a3b      	ldr	r3, [r7, #32]
 8009c2c:	f023 0301 	bic.w	r3, r3, #1
 8009c30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	3314      	adds	r3, #20
 8009c3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009c3e:	633a      	str	r2, [r7, #48]	; 0x30
 8009c40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c46:	e841 2300 	strex	r3, r2, [r1]
 8009c4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d1e3      	bne.n	8009c1a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2220      	movs	r2, #32
 8009c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	330c      	adds	r3, #12
 8009c66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	e853 3f00 	ldrex	r3, [r3]
 8009c6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f023 0310 	bic.w	r3, r3, #16
 8009c76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	330c      	adds	r3, #12
 8009c80:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009c84:	61fa      	str	r2, [r7, #28]
 8009c86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c88:	69b9      	ldr	r1, [r7, #24]
 8009c8a:	69fa      	ldr	r2, [r7, #28]
 8009c8c:	e841 2300 	strex	r3, r2, [r1]
 8009c90:	617b      	str	r3, [r7, #20]
   return(result);
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d1e3      	bne.n	8009c60 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009c98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 f852 	bl	8009d48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009ca4:	e023      	b.n	8009cee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d009      	beq.n	8009cc6 <HAL_UART_IRQHandler+0x4ea>
 8009cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d003      	beq.n	8009cc6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 fadb 	bl	800a27a <UART_Transmit_IT>
    return;
 8009cc4:	e014      	b.n	8009cf0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d00e      	beq.n	8009cf0 <HAL_UART_IRQHandler+0x514>
 8009cd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d008      	beq.n	8009cf0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 fb1b 	bl	800a31a <UART_EndTransmit_IT>
    return;
 8009ce4:	e004      	b.n	8009cf0 <HAL_UART_IRQHandler+0x514>
    return;
 8009ce6:	bf00      	nop
 8009ce8:	e002      	b.n	8009cf0 <HAL_UART_IRQHandler+0x514>
      return;
 8009cea:	bf00      	nop
 8009cec:	e000      	b.n	8009cf0 <HAL_UART_IRQHandler+0x514>
      return;
 8009cee:	bf00      	nop
  }
}
 8009cf0:	37e8      	adds	r7, #232	; 0xe8
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop

08009cf8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b083      	sub	sp, #12
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009d00:	bf00      	nop
 8009d02:	370c      	adds	r7, #12
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr

08009d0c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b083      	sub	sp, #12
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009d14:	bf00      	nop
 8009d16:	370c      	adds	r7, #12
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr

08009d20 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b083      	sub	sp, #12
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009d28:	bf00      	nop
 8009d2a:	370c      	adds	r7, #12
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009d3c:	bf00      	nop
 8009d3e:	370c      	adds	r7, #12
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr

08009d48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	460b      	mov	r3, r1
 8009d52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009d54:	bf00      	nop
 8009d56:	370c      	adds	r7, #12
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr

08009d60 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b090      	sub	sp, #64	; 0x40
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d137      	bne.n	8009dec <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d7e:	2200      	movs	r2, #0
 8009d80:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	3314      	adds	r3, #20
 8009d88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8c:	e853 3f00 	ldrex	r3, [r3]
 8009d90:	623b      	str	r3, [r7, #32]
   return(result);
 8009d92:	6a3b      	ldr	r3, [r7, #32]
 8009d94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d98:	63bb      	str	r3, [r7, #56]	; 0x38
 8009d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	3314      	adds	r3, #20
 8009da0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009da2:	633a      	str	r2, [r7, #48]	; 0x30
 8009da4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009daa:	e841 2300 	strex	r3, r2, [r1]
 8009dae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d1e5      	bne.n	8009d82 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	330c      	adds	r3, #12
 8009dbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	e853 3f00 	ldrex	r3, [r3]
 8009dc4:	60fb      	str	r3, [r7, #12]
   return(result);
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dcc:	637b      	str	r3, [r7, #52]	; 0x34
 8009dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	330c      	adds	r3, #12
 8009dd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009dd6:	61fa      	str	r2, [r7, #28]
 8009dd8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dda:	69b9      	ldr	r1, [r7, #24]
 8009ddc:	69fa      	ldr	r2, [r7, #28]
 8009dde:	e841 2300 	strex	r3, r2, [r1]
 8009de2:	617b      	str	r3, [r7, #20]
   return(result);
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d1e5      	bne.n	8009db6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009dea:	e002      	b.n	8009df2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009dec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009dee:	f7f9 fbab 	bl	8003548 <HAL_UART_TxCpltCallback>
}
 8009df2:	bf00      	nop
 8009df4:	3740      	adds	r7, #64	; 0x40
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}

08009dfa <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009dfa:	b580      	push	{r7, lr}
 8009dfc:	b084      	sub	sp, #16
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e06:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009e08:	68f8      	ldr	r0, [r7, #12]
 8009e0a:	f7ff ff75 	bl	8009cf8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e0e:	bf00      	nop
 8009e10:	3710      	adds	r7, #16
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}

08009e16 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009e16:	b580      	push	{r7, lr}
 8009e18:	b09c      	sub	sp, #112	; 0x70
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e22:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d172      	bne.n	8009f18 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e34:	2200      	movs	r2, #0
 8009e36:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	330c      	adds	r3, #12
 8009e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e42:	e853 3f00 	ldrex	r3, [r3]
 8009e46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009e48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	330c      	adds	r3, #12
 8009e56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009e58:	65ba      	str	r2, [r7, #88]	; 0x58
 8009e5a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009e5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009e60:	e841 2300 	strex	r3, r2, [r1]
 8009e64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009e66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d1e5      	bne.n	8009e38 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	3314      	adds	r3, #20
 8009e72:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e76:	e853 3f00 	ldrex	r3, [r3]
 8009e7a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e7e:	f023 0301 	bic.w	r3, r3, #1
 8009e82:	667b      	str	r3, [r7, #100]	; 0x64
 8009e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	3314      	adds	r3, #20
 8009e8a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009e8c:	647a      	str	r2, [r7, #68]	; 0x44
 8009e8e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009e92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e94:	e841 2300 	strex	r3, r2, [r1]
 8009e98:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d1e5      	bne.n	8009e6c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	3314      	adds	r3, #20
 8009ea6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eaa:	e853 3f00 	ldrex	r3, [r3]
 8009eae:	623b      	str	r3, [r7, #32]
   return(result);
 8009eb0:	6a3b      	ldr	r3, [r7, #32]
 8009eb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009eb6:	663b      	str	r3, [r7, #96]	; 0x60
 8009eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	3314      	adds	r3, #20
 8009ebe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009ec0:	633a      	str	r2, [r7, #48]	; 0x30
 8009ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ec6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ec8:	e841 2300 	strex	r3, r2, [r1]
 8009ecc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d1e5      	bne.n	8009ea0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ed6:	2220      	movs	r2, #32
 8009ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d119      	bne.n	8009f18 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	330c      	adds	r3, #12
 8009eea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	e853 3f00 	ldrex	r3, [r3]
 8009ef2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f023 0310 	bic.w	r3, r3, #16
 8009efa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	330c      	adds	r3, #12
 8009f02:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009f04:	61fa      	str	r2, [r7, #28]
 8009f06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f08:	69b9      	ldr	r1, [r7, #24]
 8009f0a:	69fa      	ldr	r2, [r7, #28]
 8009f0c:	e841 2300 	strex	r3, r2, [r1]
 8009f10:	617b      	str	r3, [r7, #20]
   return(result);
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d1e5      	bne.n	8009ee4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d106      	bne.n	8009f2e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f22:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009f24:	4619      	mov	r1, r3
 8009f26:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009f28:	f7ff ff0e 	bl	8009d48 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009f2c:	e002      	b.n	8009f34 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009f2e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009f30:	f7ff feec 	bl	8009d0c <HAL_UART_RxCpltCallback>
}
 8009f34:	bf00      	nop
 8009f36:	3770      	adds	r7, #112	; 0x70
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f48:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d108      	bne.n	8009f64 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009f56:	085b      	lsrs	r3, r3, #1
 8009f58:	b29b      	uxth	r3, r3
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	68f8      	ldr	r0, [r7, #12]
 8009f5e:	f7ff fef3 	bl	8009d48 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009f62:	e002      	b.n	8009f6a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009f64:	68f8      	ldr	r0, [r7, #12]
 8009f66:	f7ff fedb 	bl	8009d20 <HAL_UART_RxHalfCpltCallback>
}
 8009f6a:	bf00      	nop
 8009f6c:	3710      	adds	r7, #16
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}

08009f72 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009f72:	b580      	push	{r7, lr}
 8009f74:	b084      	sub	sp, #16
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f82:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	695b      	ldr	r3, [r3, #20]
 8009f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f8e:	2b80      	cmp	r3, #128	; 0x80
 8009f90:	bf0c      	ite	eq
 8009f92:	2301      	moveq	r3, #1
 8009f94:	2300      	movne	r3, #0
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fa0:	b2db      	uxtb	r3, r3
 8009fa2:	2b21      	cmp	r3, #33	; 0x21
 8009fa4:	d108      	bne.n	8009fb8 <UART_DMAError+0x46>
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d005      	beq.n	8009fb8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009fb2:	68b8      	ldr	r0, [r7, #8]
 8009fb4:	f000 f8c2 	bl	800a13c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	695b      	ldr	r3, [r3, #20]
 8009fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fc2:	2b40      	cmp	r3, #64	; 0x40
 8009fc4:	bf0c      	ite	eq
 8009fc6:	2301      	moveq	r3, #1
 8009fc8:	2300      	movne	r3, #0
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	2b22      	cmp	r3, #34	; 0x22
 8009fd8:	d108      	bne.n	8009fec <UART_DMAError+0x7a>
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d005      	beq.n	8009fec <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009fe6:	68b8      	ldr	r0, [r7, #8]
 8009fe8:	f000 f8d0 	bl	800a18c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff0:	f043 0210 	orr.w	r2, r3, #16
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ff8:	68b8      	ldr	r0, [r7, #8]
 8009ffa:	f7ff fe9b 	bl	8009d34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ffe:	bf00      	nop
 800a000:	3710      	adds	r7, #16
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
	...

0800a008 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b098      	sub	sp, #96	; 0x60
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	60b9      	str	r1, [r7, #8]
 800a012:	4613      	mov	r3, r2
 800a014:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a016:	68ba      	ldr	r2, [r7, #8]
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	88fa      	ldrh	r2, [r7, #6]
 800a020:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2200      	movs	r2, #0
 800a026:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2222      	movs	r2, #34	; 0x22
 800a02c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a034:	4a3e      	ldr	r2, [pc, #248]	; (800a130 <UART_Start_Receive_DMA+0x128>)
 800a036:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a03c:	4a3d      	ldr	r2, [pc, #244]	; (800a134 <UART_Start_Receive_DMA+0x12c>)
 800a03e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a044:	4a3c      	ldr	r2, [pc, #240]	; (800a138 <UART_Start_Receive_DMA+0x130>)
 800a046:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a04c:	2200      	movs	r2, #0
 800a04e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a050:	f107 0308 	add.w	r3, r7, #8
 800a054:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	3304      	adds	r3, #4
 800a060:	4619      	mov	r1, r3
 800a062:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a064:	681a      	ldr	r2, [r3, #0]
 800a066:	88fb      	ldrh	r3, [r7, #6]
 800a068:	f7fa fa00 	bl	800446c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a06c:	2300      	movs	r3, #0
 800a06e:	613b      	str	r3, [r7, #16]
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	613b      	str	r3, [r7, #16]
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	613b      	str	r3, [r7, #16]
 800a080:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2200      	movs	r2, #0
 800a086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	330c      	adds	r3, #12
 800a090:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a094:	e853 3f00 	ldrex	r3, [r3]
 800a098:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a09a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a09c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0a0:	65bb      	str	r3, [r7, #88]	; 0x58
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	330c      	adds	r3, #12
 800a0a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a0aa:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a0ac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a0b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a0b2:	e841 2300 	strex	r3, r2, [r1]
 800a0b6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a0b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d1e5      	bne.n	800a08a <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	3314      	adds	r3, #20
 800a0c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c8:	e853 3f00 	ldrex	r3, [r3]
 800a0cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d0:	f043 0301 	orr.w	r3, r3, #1
 800a0d4:	657b      	str	r3, [r7, #84]	; 0x54
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	3314      	adds	r3, #20
 800a0dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a0de:	63ba      	str	r2, [r7, #56]	; 0x38
 800a0e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a0e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0e6:	e841 2300 	strex	r3, r2, [r1]
 800a0ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d1e5      	bne.n	800a0be <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	3314      	adds	r3, #20
 800a0f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0fa:	69bb      	ldr	r3, [r7, #24]
 800a0fc:	e853 3f00 	ldrex	r3, [r3]
 800a100:	617b      	str	r3, [r7, #20]
   return(result);
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a108:	653b      	str	r3, [r7, #80]	; 0x50
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	3314      	adds	r3, #20
 800a110:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a112:	627a      	str	r2, [r7, #36]	; 0x24
 800a114:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a116:	6a39      	ldr	r1, [r7, #32]
 800a118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a11a:	e841 2300 	strex	r3, r2, [r1]
 800a11e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a120:	69fb      	ldr	r3, [r7, #28]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d1e5      	bne.n	800a0f2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800a126:	2300      	movs	r3, #0
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3760      	adds	r7, #96	; 0x60
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}
 800a130:	08009e17 	.word	0x08009e17
 800a134:	08009f3d 	.word	0x08009f3d
 800a138:	08009f73 	.word	0x08009f73

0800a13c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b089      	sub	sp, #36	; 0x24
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	330c      	adds	r3, #12
 800a14a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	e853 3f00 	ldrex	r3, [r3]
 800a152:	60bb      	str	r3, [r7, #8]
   return(result);
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a15a:	61fb      	str	r3, [r7, #28]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	330c      	adds	r3, #12
 800a162:	69fa      	ldr	r2, [r7, #28]
 800a164:	61ba      	str	r2, [r7, #24]
 800a166:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a168:	6979      	ldr	r1, [r7, #20]
 800a16a:	69ba      	ldr	r2, [r7, #24]
 800a16c:	e841 2300 	strex	r3, r2, [r1]
 800a170:	613b      	str	r3, [r7, #16]
   return(result);
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d1e5      	bne.n	800a144 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2220      	movs	r2, #32
 800a17c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a180:	bf00      	nop
 800a182:	3724      	adds	r7, #36	; 0x24
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr

0800a18c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b095      	sub	sp, #84	; 0x54
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	330c      	adds	r3, #12
 800a19a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a19c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a19e:	e853 3f00 	ldrex	r3, [r3]
 800a1a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a1aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	330c      	adds	r3, #12
 800a1b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a1b4:	643a      	str	r2, [r7, #64]	; 0x40
 800a1b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a1ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a1bc:	e841 2300 	strex	r3, r2, [r1]
 800a1c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d1e5      	bne.n	800a194 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	3314      	adds	r3, #20
 800a1ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d0:	6a3b      	ldr	r3, [r7, #32]
 800a1d2:	e853 3f00 	ldrex	r3, [r3]
 800a1d6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1d8:	69fb      	ldr	r3, [r7, #28]
 800a1da:	f023 0301 	bic.w	r3, r3, #1
 800a1de:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	3314      	adds	r3, #20
 800a1e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a1e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a1ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1f0:	e841 2300 	strex	r3, r2, [r1]
 800a1f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d1e5      	bne.n	800a1c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a200:	2b01      	cmp	r3, #1
 800a202:	d119      	bne.n	800a238 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	330c      	adds	r3, #12
 800a20a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	e853 3f00 	ldrex	r3, [r3]
 800a212:	60bb      	str	r3, [r7, #8]
   return(result);
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	f023 0310 	bic.w	r3, r3, #16
 800a21a:	647b      	str	r3, [r7, #68]	; 0x44
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	330c      	adds	r3, #12
 800a222:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a224:	61ba      	str	r2, [r7, #24]
 800a226:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a228:	6979      	ldr	r1, [r7, #20]
 800a22a:	69ba      	ldr	r2, [r7, #24]
 800a22c:	e841 2300 	strex	r3, r2, [r1]
 800a230:	613b      	str	r3, [r7, #16]
   return(result);
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d1e5      	bne.n	800a204 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2220      	movs	r2, #32
 800a23c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2200      	movs	r2, #0
 800a244:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a246:	bf00      	nop
 800a248:	3754      	adds	r7, #84	; 0x54
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr

0800a252 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a252:	b580      	push	{r7, lr}
 800a254:	b084      	sub	sp, #16
 800a256:	af00      	add	r7, sp, #0
 800a258:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a25e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2200      	movs	r2, #0
 800a264:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2200      	movs	r2, #0
 800a26a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a26c:	68f8      	ldr	r0, [r7, #12]
 800a26e:	f7ff fd61 	bl	8009d34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a272:	bf00      	nop
 800a274:	3710      	adds	r7, #16
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}

0800a27a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a27a:	b480      	push	{r7}
 800a27c:	b085      	sub	sp, #20
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	2b21      	cmp	r3, #33	; 0x21
 800a28c:	d13e      	bne.n	800a30c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	689b      	ldr	r3, [r3, #8]
 800a292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a296:	d114      	bne.n	800a2c2 <UART_Transmit_IT+0x48>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	691b      	ldr	r3, [r3, #16]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d110      	bne.n	800a2c2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6a1b      	ldr	r3, [r3, #32]
 800a2a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	881b      	ldrh	r3, [r3, #0]
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a2b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6a1b      	ldr	r3, [r3, #32]
 800a2ba:	1c9a      	adds	r2, r3, #2
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	621a      	str	r2, [r3, #32]
 800a2c0:	e008      	b.n	800a2d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6a1b      	ldr	r3, [r3, #32]
 800a2c6:	1c59      	adds	r1, r3, #1
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	6211      	str	r1, [r2, #32]
 800a2cc:	781a      	ldrb	r2, [r3, #0]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a2d8:	b29b      	uxth	r3, r3
 800a2da:	3b01      	subs	r3, #1
 800a2dc:	b29b      	uxth	r3, r3
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	4619      	mov	r1, r3
 800a2e2:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d10f      	bne.n	800a308 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	68da      	ldr	r2, [r3, #12]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a2f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	68da      	ldr	r2, [r3, #12]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a306:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a308:	2300      	movs	r3, #0
 800a30a:	e000      	b.n	800a30e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a30c:	2302      	movs	r3, #2
  }
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3714      	adds	r7, #20
 800a312:	46bd      	mov	sp, r7
 800a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a318:	4770      	bx	lr

0800a31a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a31a:	b580      	push	{r7, lr}
 800a31c:	b082      	sub	sp, #8
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	68da      	ldr	r2, [r3, #12]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a330:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2220      	movs	r2, #32
 800a336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f7f9 f904 	bl	8003548 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a340:	2300      	movs	r3, #0
}
 800a342:	4618      	mov	r0, r3
 800a344:	3708      	adds	r7, #8
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}

0800a34a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a34a:	b580      	push	{r7, lr}
 800a34c:	b08c      	sub	sp, #48	; 0x30
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a358:	b2db      	uxtb	r3, r3
 800a35a:	2b22      	cmp	r3, #34	; 0x22
 800a35c:	f040 80ab 	bne.w	800a4b6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	689b      	ldr	r3, [r3, #8]
 800a364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a368:	d117      	bne.n	800a39a <UART_Receive_IT+0x50>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	691b      	ldr	r3, [r3, #16]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d113      	bne.n	800a39a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a372:	2300      	movs	r3, #0
 800a374:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a37a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	b29b      	uxth	r3, r3
 800a384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a388:	b29a      	uxth	r2, r3
 800a38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a38c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a392:	1c9a      	adds	r2, r3, #2
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	629a      	str	r2, [r3, #40]	; 0x28
 800a398:	e026      	b.n	800a3e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a39e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	689b      	ldr	r3, [r3, #8]
 800a3a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3ac:	d007      	beq.n	800a3be <UART_Receive_IT+0x74>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	689b      	ldr	r3, [r3, #8]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d10a      	bne.n	800a3cc <UART_Receive_IT+0x82>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	691b      	ldr	r3, [r3, #16]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d106      	bne.n	800a3cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	685b      	ldr	r3, [r3, #4]
 800a3c4:	b2da      	uxtb	r2, r3
 800a3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c8:	701a      	strb	r2, [r3, #0]
 800a3ca:	e008      	b.n	800a3de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	685b      	ldr	r3, [r3, #4]
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3d8:	b2da      	uxtb	r2, r3
 800a3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3e2:	1c5a      	adds	r2, r3, #1
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	3b01      	subs	r3, #1
 800a3f0:	b29b      	uxth	r3, r3
 800a3f2:	687a      	ldr	r2, [r7, #4]
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d15a      	bne.n	800a4b2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	68da      	ldr	r2, [r3, #12]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f022 0220 	bic.w	r2, r2, #32
 800a40a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	68da      	ldr	r2, [r3, #12]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a41a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	695a      	ldr	r2, [r3, #20]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f022 0201 	bic.w	r2, r2, #1
 800a42a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2220      	movs	r2, #32
 800a430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d135      	bne.n	800a4a8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2200      	movs	r2, #0
 800a440:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	330c      	adds	r3, #12
 800a448:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	e853 3f00 	ldrex	r3, [r3]
 800a450:	613b      	str	r3, [r7, #16]
   return(result);
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	f023 0310 	bic.w	r3, r3, #16
 800a458:	627b      	str	r3, [r7, #36]	; 0x24
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	330c      	adds	r3, #12
 800a460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a462:	623a      	str	r2, [r7, #32]
 800a464:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a466:	69f9      	ldr	r1, [r7, #28]
 800a468:	6a3a      	ldr	r2, [r7, #32]
 800a46a:	e841 2300 	strex	r3, r2, [r1]
 800a46e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a470:	69bb      	ldr	r3, [r7, #24]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d1e5      	bne.n	800a442 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f003 0310 	and.w	r3, r3, #16
 800a480:	2b10      	cmp	r3, #16
 800a482:	d10a      	bne.n	800a49a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a484:	2300      	movs	r3, #0
 800a486:	60fb      	str	r3, [r7, #12]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	60fb      	str	r3, [r7, #12]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	60fb      	str	r3, [r7, #12]
 800a498:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a49e:	4619      	mov	r1, r3
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f7ff fc51 	bl	8009d48 <HAL_UARTEx_RxEventCallback>
 800a4a6:	e002      	b.n	800a4ae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f7ff fc2f 	bl	8009d0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	e002      	b.n	800a4b8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	e000      	b.n	800a4b8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a4b6:	2302      	movs	r3, #2
  }
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3730      	adds	r7, #48	; 0x30
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4c4:	b09f      	sub	sp, #124	; 0x7c
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a4ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	691b      	ldr	r3, [r3, #16]
 800a4d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a4d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4d6:	68d9      	ldr	r1, [r3, #12]
 800a4d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4da:	681a      	ldr	r2, [r3, #0]
 800a4dc:	ea40 0301 	orr.w	r3, r0, r1
 800a4e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a4e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4e4:	689a      	ldr	r2, [r3, #8]
 800a4e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4e8:	691b      	ldr	r3, [r3, #16]
 800a4ea:	431a      	orrs	r2, r3
 800a4ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4ee:	695b      	ldr	r3, [r3, #20]
 800a4f0:	431a      	orrs	r2, r3
 800a4f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4f4:	69db      	ldr	r3, [r3, #28]
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a4fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	68db      	ldr	r3, [r3, #12]
 800a500:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a504:	f021 010c 	bic.w	r1, r1, #12
 800a508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a50a:	681a      	ldr	r2, [r3, #0]
 800a50c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a50e:	430b      	orrs	r3, r1
 800a510:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	695b      	ldr	r3, [r3, #20]
 800a518:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a51c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a51e:	6999      	ldr	r1, [r3, #24]
 800a520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a522:	681a      	ldr	r2, [r3, #0]
 800a524:	ea40 0301 	orr.w	r3, r0, r1
 800a528:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a52a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a52c:	681a      	ldr	r2, [r3, #0]
 800a52e:	4bc5      	ldr	r3, [pc, #788]	; (800a844 <UART_SetConfig+0x384>)
 800a530:	429a      	cmp	r2, r3
 800a532:	d004      	beq.n	800a53e <UART_SetConfig+0x7e>
 800a534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a536:	681a      	ldr	r2, [r3, #0]
 800a538:	4bc3      	ldr	r3, [pc, #780]	; (800a848 <UART_SetConfig+0x388>)
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d103      	bne.n	800a546 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a53e:	f7fe f947 	bl	80087d0 <HAL_RCC_GetPCLK2Freq>
 800a542:	6778      	str	r0, [r7, #116]	; 0x74
 800a544:	e002      	b.n	800a54c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a546:	f7fe f92f 	bl	80087a8 <HAL_RCC_GetPCLK1Freq>
 800a54a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a54c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a54e:	69db      	ldr	r3, [r3, #28]
 800a550:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a554:	f040 80b6 	bne.w	800a6c4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a558:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a55a:	461c      	mov	r4, r3
 800a55c:	f04f 0500 	mov.w	r5, #0
 800a560:	4622      	mov	r2, r4
 800a562:	462b      	mov	r3, r5
 800a564:	1891      	adds	r1, r2, r2
 800a566:	6439      	str	r1, [r7, #64]	; 0x40
 800a568:	415b      	adcs	r3, r3
 800a56a:	647b      	str	r3, [r7, #68]	; 0x44
 800a56c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a570:	1912      	adds	r2, r2, r4
 800a572:	eb45 0303 	adc.w	r3, r5, r3
 800a576:	f04f 0000 	mov.w	r0, #0
 800a57a:	f04f 0100 	mov.w	r1, #0
 800a57e:	00d9      	lsls	r1, r3, #3
 800a580:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a584:	00d0      	lsls	r0, r2, #3
 800a586:	4602      	mov	r2, r0
 800a588:	460b      	mov	r3, r1
 800a58a:	1911      	adds	r1, r2, r4
 800a58c:	6639      	str	r1, [r7, #96]	; 0x60
 800a58e:	416b      	adcs	r3, r5
 800a590:	667b      	str	r3, [r7, #100]	; 0x64
 800a592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	461a      	mov	r2, r3
 800a598:	f04f 0300 	mov.w	r3, #0
 800a59c:	1891      	adds	r1, r2, r2
 800a59e:	63b9      	str	r1, [r7, #56]	; 0x38
 800a5a0:	415b      	adcs	r3, r3
 800a5a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a5a8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a5ac:	f7f5 fe0c 	bl	80001c8 <__aeabi_uldivmod>
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	460b      	mov	r3, r1
 800a5b4:	4ba5      	ldr	r3, [pc, #660]	; (800a84c <UART_SetConfig+0x38c>)
 800a5b6:	fba3 2302 	umull	r2, r3, r3, r2
 800a5ba:	095b      	lsrs	r3, r3, #5
 800a5bc:	011e      	lsls	r6, r3, #4
 800a5be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5c0:	461c      	mov	r4, r3
 800a5c2:	f04f 0500 	mov.w	r5, #0
 800a5c6:	4622      	mov	r2, r4
 800a5c8:	462b      	mov	r3, r5
 800a5ca:	1891      	adds	r1, r2, r2
 800a5cc:	6339      	str	r1, [r7, #48]	; 0x30
 800a5ce:	415b      	adcs	r3, r3
 800a5d0:	637b      	str	r3, [r7, #52]	; 0x34
 800a5d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a5d6:	1912      	adds	r2, r2, r4
 800a5d8:	eb45 0303 	adc.w	r3, r5, r3
 800a5dc:	f04f 0000 	mov.w	r0, #0
 800a5e0:	f04f 0100 	mov.w	r1, #0
 800a5e4:	00d9      	lsls	r1, r3, #3
 800a5e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a5ea:	00d0      	lsls	r0, r2, #3
 800a5ec:	4602      	mov	r2, r0
 800a5ee:	460b      	mov	r3, r1
 800a5f0:	1911      	adds	r1, r2, r4
 800a5f2:	65b9      	str	r1, [r7, #88]	; 0x58
 800a5f4:	416b      	adcs	r3, r5
 800a5f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a5f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	f04f 0300 	mov.w	r3, #0
 800a602:	1891      	adds	r1, r2, r2
 800a604:	62b9      	str	r1, [r7, #40]	; 0x28
 800a606:	415b      	adcs	r3, r3
 800a608:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a60a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a60e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a612:	f7f5 fdd9 	bl	80001c8 <__aeabi_uldivmod>
 800a616:	4602      	mov	r2, r0
 800a618:	460b      	mov	r3, r1
 800a61a:	4b8c      	ldr	r3, [pc, #560]	; (800a84c <UART_SetConfig+0x38c>)
 800a61c:	fba3 1302 	umull	r1, r3, r3, r2
 800a620:	095b      	lsrs	r3, r3, #5
 800a622:	2164      	movs	r1, #100	; 0x64
 800a624:	fb01 f303 	mul.w	r3, r1, r3
 800a628:	1ad3      	subs	r3, r2, r3
 800a62a:	00db      	lsls	r3, r3, #3
 800a62c:	3332      	adds	r3, #50	; 0x32
 800a62e:	4a87      	ldr	r2, [pc, #540]	; (800a84c <UART_SetConfig+0x38c>)
 800a630:	fba2 2303 	umull	r2, r3, r2, r3
 800a634:	095b      	lsrs	r3, r3, #5
 800a636:	005b      	lsls	r3, r3, #1
 800a638:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a63c:	441e      	add	r6, r3
 800a63e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a640:	4618      	mov	r0, r3
 800a642:	f04f 0100 	mov.w	r1, #0
 800a646:	4602      	mov	r2, r0
 800a648:	460b      	mov	r3, r1
 800a64a:	1894      	adds	r4, r2, r2
 800a64c:	623c      	str	r4, [r7, #32]
 800a64e:	415b      	adcs	r3, r3
 800a650:	627b      	str	r3, [r7, #36]	; 0x24
 800a652:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a656:	1812      	adds	r2, r2, r0
 800a658:	eb41 0303 	adc.w	r3, r1, r3
 800a65c:	f04f 0400 	mov.w	r4, #0
 800a660:	f04f 0500 	mov.w	r5, #0
 800a664:	00dd      	lsls	r5, r3, #3
 800a666:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a66a:	00d4      	lsls	r4, r2, #3
 800a66c:	4622      	mov	r2, r4
 800a66e:	462b      	mov	r3, r5
 800a670:	1814      	adds	r4, r2, r0
 800a672:	653c      	str	r4, [r7, #80]	; 0x50
 800a674:	414b      	adcs	r3, r1
 800a676:	657b      	str	r3, [r7, #84]	; 0x54
 800a678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a67a:	685b      	ldr	r3, [r3, #4]
 800a67c:	461a      	mov	r2, r3
 800a67e:	f04f 0300 	mov.w	r3, #0
 800a682:	1891      	adds	r1, r2, r2
 800a684:	61b9      	str	r1, [r7, #24]
 800a686:	415b      	adcs	r3, r3
 800a688:	61fb      	str	r3, [r7, #28]
 800a68a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a68e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a692:	f7f5 fd99 	bl	80001c8 <__aeabi_uldivmod>
 800a696:	4602      	mov	r2, r0
 800a698:	460b      	mov	r3, r1
 800a69a:	4b6c      	ldr	r3, [pc, #432]	; (800a84c <UART_SetConfig+0x38c>)
 800a69c:	fba3 1302 	umull	r1, r3, r3, r2
 800a6a0:	095b      	lsrs	r3, r3, #5
 800a6a2:	2164      	movs	r1, #100	; 0x64
 800a6a4:	fb01 f303 	mul.w	r3, r1, r3
 800a6a8:	1ad3      	subs	r3, r2, r3
 800a6aa:	00db      	lsls	r3, r3, #3
 800a6ac:	3332      	adds	r3, #50	; 0x32
 800a6ae:	4a67      	ldr	r2, [pc, #412]	; (800a84c <UART_SetConfig+0x38c>)
 800a6b0:	fba2 2303 	umull	r2, r3, r2, r3
 800a6b4:	095b      	lsrs	r3, r3, #5
 800a6b6:	f003 0207 	and.w	r2, r3, #7
 800a6ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4432      	add	r2, r6
 800a6c0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a6c2:	e0b9      	b.n	800a838 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a6c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a6c6:	461c      	mov	r4, r3
 800a6c8:	f04f 0500 	mov.w	r5, #0
 800a6cc:	4622      	mov	r2, r4
 800a6ce:	462b      	mov	r3, r5
 800a6d0:	1891      	adds	r1, r2, r2
 800a6d2:	6139      	str	r1, [r7, #16]
 800a6d4:	415b      	adcs	r3, r3
 800a6d6:	617b      	str	r3, [r7, #20]
 800a6d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a6dc:	1912      	adds	r2, r2, r4
 800a6de:	eb45 0303 	adc.w	r3, r5, r3
 800a6e2:	f04f 0000 	mov.w	r0, #0
 800a6e6:	f04f 0100 	mov.w	r1, #0
 800a6ea:	00d9      	lsls	r1, r3, #3
 800a6ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a6f0:	00d0      	lsls	r0, r2, #3
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	eb12 0804 	adds.w	r8, r2, r4
 800a6fa:	eb43 0905 	adc.w	r9, r3, r5
 800a6fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	4618      	mov	r0, r3
 800a704:	f04f 0100 	mov.w	r1, #0
 800a708:	f04f 0200 	mov.w	r2, #0
 800a70c:	f04f 0300 	mov.w	r3, #0
 800a710:	008b      	lsls	r3, r1, #2
 800a712:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a716:	0082      	lsls	r2, r0, #2
 800a718:	4640      	mov	r0, r8
 800a71a:	4649      	mov	r1, r9
 800a71c:	f7f5 fd54 	bl	80001c8 <__aeabi_uldivmod>
 800a720:	4602      	mov	r2, r0
 800a722:	460b      	mov	r3, r1
 800a724:	4b49      	ldr	r3, [pc, #292]	; (800a84c <UART_SetConfig+0x38c>)
 800a726:	fba3 2302 	umull	r2, r3, r3, r2
 800a72a:	095b      	lsrs	r3, r3, #5
 800a72c:	011e      	lsls	r6, r3, #4
 800a72e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a730:	4618      	mov	r0, r3
 800a732:	f04f 0100 	mov.w	r1, #0
 800a736:	4602      	mov	r2, r0
 800a738:	460b      	mov	r3, r1
 800a73a:	1894      	adds	r4, r2, r2
 800a73c:	60bc      	str	r4, [r7, #8]
 800a73e:	415b      	adcs	r3, r3
 800a740:	60fb      	str	r3, [r7, #12]
 800a742:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a746:	1812      	adds	r2, r2, r0
 800a748:	eb41 0303 	adc.w	r3, r1, r3
 800a74c:	f04f 0400 	mov.w	r4, #0
 800a750:	f04f 0500 	mov.w	r5, #0
 800a754:	00dd      	lsls	r5, r3, #3
 800a756:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a75a:	00d4      	lsls	r4, r2, #3
 800a75c:	4622      	mov	r2, r4
 800a75e:	462b      	mov	r3, r5
 800a760:	1814      	adds	r4, r2, r0
 800a762:	64bc      	str	r4, [r7, #72]	; 0x48
 800a764:	414b      	adcs	r3, r1
 800a766:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a76a:	685b      	ldr	r3, [r3, #4]
 800a76c:	4618      	mov	r0, r3
 800a76e:	f04f 0100 	mov.w	r1, #0
 800a772:	f04f 0200 	mov.w	r2, #0
 800a776:	f04f 0300 	mov.w	r3, #0
 800a77a:	008b      	lsls	r3, r1, #2
 800a77c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a780:	0082      	lsls	r2, r0, #2
 800a782:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a786:	f7f5 fd1f 	bl	80001c8 <__aeabi_uldivmod>
 800a78a:	4602      	mov	r2, r0
 800a78c:	460b      	mov	r3, r1
 800a78e:	4b2f      	ldr	r3, [pc, #188]	; (800a84c <UART_SetConfig+0x38c>)
 800a790:	fba3 1302 	umull	r1, r3, r3, r2
 800a794:	095b      	lsrs	r3, r3, #5
 800a796:	2164      	movs	r1, #100	; 0x64
 800a798:	fb01 f303 	mul.w	r3, r1, r3
 800a79c:	1ad3      	subs	r3, r2, r3
 800a79e:	011b      	lsls	r3, r3, #4
 800a7a0:	3332      	adds	r3, #50	; 0x32
 800a7a2:	4a2a      	ldr	r2, [pc, #168]	; (800a84c <UART_SetConfig+0x38c>)
 800a7a4:	fba2 2303 	umull	r2, r3, r2, r3
 800a7a8:	095b      	lsrs	r3, r3, #5
 800a7aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a7ae:	441e      	add	r6, r3
 800a7b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f04f 0100 	mov.w	r1, #0
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	460b      	mov	r3, r1
 800a7bc:	1894      	adds	r4, r2, r2
 800a7be:	603c      	str	r4, [r7, #0]
 800a7c0:	415b      	adcs	r3, r3
 800a7c2:	607b      	str	r3, [r7, #4]
 800a7c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7c8:	1812      	adds	r2, r2, r0
 800a7ca:	eb41 0303 	adc.w	r3, r1, r3
 800a7ce:	f04f 0400 	mov.w	r4, #0
 800a7d2:	f04f 0500 	mov.w	r5, #0
 800a7d6:	00dd      	lsls	r5, r3, #3
 800a7d8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a7dc:	00d4      	lsls	r4, r2, #3
 800a7de:	4622      	mov	r2, r4
 800a7e0:	462b      	mov	r3, r5
 800a7e2:	eb12 0a00 	adds.w	sl, r2, r0
 800a7e6:	eb43 0b01 	adc.w	fp, r3, r1
 800a7ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f04f 0100 	mov.w	r1, #0
 800a7f4:	f04f 0200 	mov.w	r2, #0
 800a7f8:	f04f 0300 	mov.w	r3, #0
 800a7fc:	008b      	lsls	r3, r1, #2
 800a7fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a802:	0082      	lsls	r2, r0, #2
 800a804:	4650      	mov	r0, sl
 800a806:	4659      	mov	r1, fp
 800a808:	f7f5 fcde 	bl	80001c8 <__aeabi_uldivmod>
 800a80c:	4602      	mov	r2, r0
 800a80e:	460b      	mov	r3, r1
 800a810:	4b0e      	ldr	r3, [pc, #56]	; (800a84c <UART_SetConfig+0x38c>)
 800a812:	fba3 1302 	umull	r1, r3, r3, r2
 800a816:	095b      	lsrs	r3, r3, #5
 800a818:	2164      	movs	r1, #100	; 0x64
 800a81a:	fb01 f303 	mul.w	r3, r1, r3
 800a81e:	1ad3      	subs	r3, r2, r3
 800a820:	011b      	lsls	r3, r3, #4
 800a822:	3332      	adds	r3, #50	; 0x32
 800a824:	4a09      	ldr	r2, [pc, #36]	; (800a84c <UART_SetConfig+0x38c>)
 800a826:	fba2 2303 	umull	r2, r3, r2, r3
 800a82a:	095b      	lsrs	r3, r3, #5
 800a82c:	f003 020f 	and.w	r2, r3, #15
 800a830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4432      	add	r2, r6
 800a836:	609a      	str	r2, [r3, #8]
}
 800a838:	bf00      	nop
 800a83a:	377c      	adds	r7, #124	; 0x7c
 800a83c:	46bd      	mov	sp, r7
 800a83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a842:	bf00      	nop
 800a844:	40011000 	.word	0x40011000
 800a848:	40011400 	.word	0x40011400
 800a84c:	51eb851f 	.word	0x51eb851f

0800a850 <__errno>:
 800a850:	4b01      	ldr	r3, [pc, #4]	; (800a858 <__errno+0x8>)
 800a852:	6818      	ldr	r0, [r3, #0]
 800a854:	4770      	bx	lr
 800a856:	bf00      	nop
 800a858:	20000114 	.word	0x20000114

0800a85c <__libc_init_array>:
 800a85c:	b570      	push	{r4, r5, r6, lr}
 800a85e:	4d0d      	ldr	r5, [pc, #52]	; (800a894 <__libc_init_array+0x38>)
 800a860:	4c0d      	ldr	r4, [pc, #52]	; (800a898 <__libc_init_array+0x3c>)
 800a862:	1b64      	subs	r4, r4, r5
 800a864:	10a4      	asrs	r4, r4, #2
 800a866:	2600      	movs	r6, #0
 800a868:	42a6      	cmp	r6, r4
 800a86a:	d109      	bne.n	800a880 <__libc_init_array+0x24>
 800a86c:	4d0b      	ldr	r5, [pc, #44]	; (800a89c <__libc_init_array+0x40>)
 800a86e:	4c0c      	ldr	r4, [pc, #48]	; (800a8a0 <__libc_init_array+0x44>)
 800a870:	f000 fee2 	bl	800b638 <_init>
 800a874:	1b64      	subs	r4, r4, r5
 800a876:	10a4      	asrs	r4, r4, #2
 800a878:	2600      	movs	r6, #0
 800a87a:	42a6      	cmp	r6, r4
 800a87c:	d105      	bne.n	800a88a <__libc_init_array+0x2e>
 800a87e:	bd70      	pop	{r4, r5, r6, pc}
 800a880:	f855 3b04 	ldr.w	r3, [r5], #4
 800a884:	4798      	blx	r3
 800a886:	3601      	adds	r6, #1
 800a888:	e7ee      	b.n	800a868 <__libc_init_array+0xc>
 800a88a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a88e:	4798      	blx	r3
 800a890:	3601      	adds	r6, #1
 800a892:	e7f2      	b.n	800a87a <__libc_init_array+0x1e>
 800a894:	0800bbb4 	.word	0x0800bbb4
 800a898:	0800bbb4 	.word	0x0800bbb4
 800a89c:	0800bbb4 	.word	0x0800bbb4
 800a8a0:	0800bbb8 	.word	0x0800bbb8

0800a8a4 <memcpy>:
 800a8a4:	440a      	add	r2, r1
 800a8a6:	4291      	cmp	r1, r2
 800a8a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a8ac:	d100      	bne.n	800a8b0 <memcpy+0xc>
 800a8ae:	4770      	bx	lr
 800a8b0:	b510      	push	{r4, lr}
 800a8b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8ba:	4291      	cmp	r1, r2
 800a8bc:	d1f9      	bne.n	800a8b2 <memcpy+0xe>
 800a8be:	bd10      	pop	{r4, pc}

0800a8c0 <memset>:
 800a8c0:	4402      	add	r2, r0
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d100      	bne.n	800a8ca <memset+0xa>
 800a8c8:	4770      	bx	lr
 800a8ca:	f803 1b01 	strb.w	r1, [r3], #1
 800a8ce:	e7f9      	b.n	800a8c4 <memset+0x4>

0800a8d0 <sinf>:
 800a8d0:	ee10 3a10 	vmov	r3, s0
 800a8d4:	b507      	push	{r0, r1, r2, lr}
 800a8d6:	4a1d      	ldr	r2, [pc, #116]	; (800a94c <sinf+0x7c>)
 800a8d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	dc05      	bgt.n	800a8ec <sinf+0x1c>
 800a8e0:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800a950 <sinf+0x80>
 800a8e4:	2000      	movs	r0, #0
 800a8e6:	f000 fd9d 	bl	800b424 <__kernel_sinf>
 800a8ea:	e004      	b.n	800a8f6 <sinf+0x26>
 800a8ec:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a8f0:	db04      	blt.n	800a8fc <sinf+0x2c>
 800a8f2:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a8f6:	b003      	add	sp, #12
 800a8f8:	f85d fb04 	ldr.w	pc, [sp], #4
 800a8fc:	4668      	mov	r0, sp
 800a8fe:	f000 f967 	bl	800abd0 <__ieee754_rem_pio2f>
 800a902:	f000 0003 	and.w	r0, r0, #3
 800a906:	2801      	cmp	r0, #1
 800a908:	d008      	beq.n	800a91c <sinf+0x4c>
 800a90a:	2802      	cmp	r0, #2
 800a90c:	d00d      	beq.n	800a92a <sinf+0x5a>
 800a90e:	b9b0      	cbnz	r0, 800a93e <sinf+0x6e>
 800a910:	eddd 0a01 	vldr	s1, [sp, #4]
 800a914:	ed9d 0a00 	vldr	s0, [sp]
 800a918:	2001      	movs	r0, #1
 800a91a:	e7e4      	b.n	800a8e6 <sinf+0x16>
 800a91c:	eddd 0a01 	vldr	s1, [sp, #4]
 800a920:	ed9d 0a00 	vldr	s0, [sp]
 800a924:	f000 fa94 	bl	800ae50 <__kernel_cosf>
 800a928:	e7e5      	b.n	800a8f6 <sinf+0x26>
 800a92a:	eddd 0a01 	vldr	s1, [sp, #4]
 800a92e:	ed9d 0a00 	vldr	s0, [sp]
 800a932:	2001      	movs	r0, #1
 800a934:	f000 fd76 	bl	800b424 <__kernel_sinf>
 800a938:	eeb1 0a40 	vneg.f32	s0, s0
 800a93c:	e7db      	b.n	800a8f6 <sinf+0x26>
 800a93e:	eddd 0a01 	vldr	s1, [sp, #4]
 800a942:	ed9d 0a00 	vldr	s0, [sp]
 800a946:	f000 fa83 	bl	800ae50 <__kernel_cosf>
 800a94a:	e7f5      	b.n	800a938 <sinf+0x68>
 800a94c:	3f490fd8 	.word	0x3f490fd8
 800a950:	00000000 	.word	0x00000000

0800a954 <asinf>:
 800a954:	b508      	push	{r3, lr}
 800a956:	ed2d 8b02 	vpush	{d8}
 800a95a:	eeb0 8a40 	vmov.f32	s16, s0
 800a95e:	f000 f851 	bl	800aa04 <__ieee754_asinf>
 800a962:	4b13      	ldr	r3, [pc, #76]	; (800a9b0 <asinf+0x5c>)
 800a964:	f993 3000 	ldrsb.w	r3, [r3]
 800a968:	3301      	adds	r3, #1
 800a96a:	eef0 8a40 	vmov.f32	s17, s0
 800a96e:	d01a      	beq.n	800a9a6 <asinf+0x52>
 800a970:	eeb4 8a48 	vcmp.f32	s16, s16
 800a974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a978:	d615      	bvs.n	800a9a6 <asinf+0x52>
 800a97a:	eeb0 0a48 	vmov.f32	s0, s16
 800a97e:	f000 fd99 	bl	800b4b4 <fabsf>
 800a982:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a986:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800a98a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a98e:	dd0a      	ble.n	800a9a6 <asinf+0x52>
 800a990:	f7ff ff5e 	bl	800a850 <__errno>
 800a994:	ecbd 8b02 	vpop	{d8}
 800a998:	2321      	movs	r3, #33	; 0x21
 800a99a:	6003      	str	r3, [r0, #0]
 800a99c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a9a0:	4804      	ldr	r0, [pc, #16]	; (800a9b4 <asinf+0x60>)
 800a9a2:	f000 bdd1 	b.w	800b548 <nanf>
 800a9a6:	eeb0 0a68 	vmov.f32	s0, s17
 800a9aa:	ecbd 8b02 	vpop	{d8}
 800a9ae:	bd08      	pop	{r3, pc}
 800a9b0:	20000178 	.word	0x20000178
 800a9b4:	0800b7d8 	.word	0x0800b7d8

0800a9b8 <sqrtf>:
 800a9b8:	b508      	push	{r3, lr}
 800a9ba:	ed2d 8b02 	vpush	{d8}
 800a9be:	eeb0 8a40 	vmov.f32	s16, s0
 800a9c2:	f000 fa41 	bl	800ae48 <__ieee754_sqrtf>
 800a9c6:	4b0d      	ldr	r3, [pc, #52]	; (800a9fc <sqrtf+0x44>)
 800a9c8:	f993 3000 	ldrsb.w	r3, [r3]
 800a9cc:	3301      	adds	r3, #1
 800a9ce:	d011      	beq.n	800a9f4 <sqrtf+0x3c>
 800a9d0:	eeb4 8a48 	vcmp.f32	s16, s16
 800a9d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9d8:	d60c      	bvs.n	800a9f4 <sqrtf+0x3c>
 800a9da:	eddf 8a09 	vldr	s17, [pc, #36]	; 800aa00 <sqrtf+0x48>
 800a9de:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a9e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9e6:	d505      	bpl.n	800a9f4 <sqrtf+0x3c>
 800a9e8:	f7ff ff32 	bl	800a850 <__errno>
 800a9ec:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a9f0:	2321      	movs	r3, #33	; 0x21
 800a9f2:	6003      	str	r3, [r0, #0]
 800a9f4:	ecbd 8b02 	vpop	{d8}
 800a9f8:	bd08      	pop	{r3, pc}
 800a9fa:	bf00      	nop
 800a9fc:	20000178 	.word	0x20000178
 800aa00:	00000000 	.word	0x00000000

0800aa04 <__ieee754_asinf>:
 800aa04:	b538      	push	{r3, r4, r5, lr}
 800aa06:	ee10 5a10 	vmov	r5, s0
 800aa0a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800aa0e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800aa12:	ed2d 8b04 	vpush	{d8-d9}
 800aa16:	d10c      	bne.n	800aa32 <__ieee754_asinf+0x2e>
 800aa18:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800ab90 <__ieee754_asinf+0x18c>
 800aa1c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800ab94 <__ieee754_asinf+0x190>
 800aa20:	ee60 7a27 	vmul.f32	s15, s0, s15
 800aa24:	eee0 7a07 	vfma.f32	s15, s0, s14
 800aa28:	eeb0 0a67 	vmov.f32	s0, s15
 800aa2c:	ecbd 8b04 	vpop	{d8-d9}
 800aa30:	bd38      	pop	{r3, r4, r5, pc}
 800aa32:	dd04      	ble.n	800aa3e <__ieee754_asinf+0x3a>
 800aa34:	ee70 7a40 	vsub.f32	s15, s0, s0
 800aa38:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800aa3c:	e7f6      	b.n	800aa2c <__ieee754_asinf+0x28>
 800aa3e:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800aa42:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800aa46:	da0b      	bge.n	800aa60 <__ieee754_asinf+0x5c>
 800aa48:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800aa4c:	da52      	bge.n	800aaf4 <__ieee754_asinf+0xf0>
 800aa4e:	eddf 7a52 	vldr	s15, [pc, #328]	; 800ab98 <__ieee754_asinf+0x194>
 800aa52:	ee70 7a27 	vadd.f32	s15, s0, s15
 800aa56:	eef4 7ae8 	vcmpe.f32	s15, s17
 800aa5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa5e:	dce5      	bgt.n	800aa2c <__ieee754_asinf+0x28>
 800aa60:	f000 fd28 	bl	800b4b4 <fabsf>
 800aa64:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800aa68:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800aa6c:	ee20 8a08 	vmul.f32	s16, s0, s16
 800aa70:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800ab9c <__ieee754_asinf+0x198>
 800aa74:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800aba0 <__ieee754_asinf+0x19c>
 800aa78:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800aba4 <__ieee754_asinf+0x1a0>
 800aa7c:	eea8 7a27 	vfma.f32	s14, s16, s15
 800aa80:	eddf 7a49 	vldr	s15, [pc, #292]	; 800aba8 <__ieee754_asinf+0x1a4>
 800aa84:	eee7 7a08 	vfma.f32	s15, s14, s16
 800aa88:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800abac <__ieee754_asinf+0x1a8>
 800aa8c:	eea7 7a88 	vfma.f32	s14, s15, s16
 800aa90:	eddf 7a47 	vldr	s15, [pc, #284]	; 800abb0 <__ieee754_asinf+0x1ac>
 800aa94:	eee7 7a08 	vfma.f32	s15, s14, s16
 800aa98:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800abb4 <__ieee754_asinf+0x1b0>
 800aa9c:	eea7 9a88 	vfma.f32	s18, s15, s16
 800aaa0:	eddf 7a45 	vldr	s15, [pc, #276]	; 800abb8 <__ieee754_asinf+0x1b4>
 800aaa4:	eee8 7a07 	vfma.f32	s15, s16, s14
 800aaa8:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800abbc <__ieee754_asinf+0x1b8>
 800aaac:	eea7 7a88 	vfma.f32	s14, s15, s16
 800aab0:	eddf 7a43 	vldr	s15, [pc, #268]	; 800abc0 <__ieee754_asinf+0x1bc>
 800aab4:	eee7 7a08 	vfma.f32	s15, s14, s16
 800aab8:	eeb0 0a48 	vmov.f32	s0, s16
 800aabc:	eee7 8a88 	vfma.f32	s17, s15, s16
 800aac0:	f000 f9c2 	bl	800ae48 <__ieee754_sqrtf>
 800aac4:	4b3f      	ldr	r3, [pc, #252]	; (800abc4 <__ieee754_asinf+0x1c0>)
 800aac6:	ee29 9a08 	vmul.f32	s18, s18, s16
 800aaca:	429c      	cmp	r4, r3
 800aacc:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800aad0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800aad4:	dd3d      	ble.n	800ab52 <__ieee754_asinf+0x14e>
 800aad6:	eea0 0a06 	vfma.f32	s0, s0, s12
 800aada:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800abc8 <__ieee754_asinf+0x1c4>
 800aade:	eee0 7a26 	vfma.f32	s15, s0, s13
 800aae2:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800ab94 <__ieee754_asinf+0x190>
 800aae6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800aaea:	2d00      	cmp	r5, #0
 800aaec:	bfd8      	it	le
 800aaee:	eeb1 0a40 	vnegle.f32	s0, s0
 800aaf2:	e79b      	b.n	800aa2c <__ieee754_asinf+0x28>
 800aaf4:	ee60 7a00 	vmul.f32	s15, s0, s0
 800aaf8:	eddf 6a28 	vldr	s13, [pc, #160]	; 800ab9c <__ieee754_asinf+0x198>
 800aafc:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800aba0 <__ieee754_asinf+0x19c>
 800ab00:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800abb4 <__ieee754_asinf+0x1b0>
 800ab04:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800ab08:	eddf 6a27 	vldr	s13, [pc, #156]	; 800aba8 <__ieee754_asinf+0x1a4>
 800ab0c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ab10:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800abac <__ieee754_asinf+0x1a8>
 800ab14:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ab18:	eddf 6a25 	vldr	s13, [pc, #148]	; 800abb0 <__ieee754_asinf+0x1ac>
 800ab1c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ab20:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800aba4 <__ieee754_asinf+0x1a0>
 800ab24:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ab28:	eddf 6a23 	vldr	s13, [pc, #140]	; 800abb8 <__ieee754_asinf+0x1b4>
 800ab2c:	eee7 6a86 	vfma.f32	s13, s15, s12
 800ab30:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800abbc <__ieee754_asinf+0x1b8>
 800ab34:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800ab38:	eddf 6a21 	vldr	s13, [pc, #132]	; 800abc0 <__ieee754_asinf+0x1bc>
 800ab3c:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ab40:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab44:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800ab48:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800ab4c:	eea0 0a27 	vfma.f32	s0, s0, s15
 800ab50:	e76c      	b.n	800aa2c <__ieee754_asinf+0x28>
 800ab52:	ee10 3a10 	vmov	r3, s0
 800ab56:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ab5a:	f023 030f 	bic.w	r3, r3, #15
 800ab5e:	ee07 3a10 	vmov	s14, r3
 800ab62:	eea7 8a47 	vfms.f32	s16, s14, s14
 800ab66:	ee70 7a07 	vadd.f32	s15, s0, s14
 800ab6a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ab6e:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800ab72:	eddf 7a07 	vldr	s15, [pc, #28]	; 800ab90 <__ieee754_asinf+0x18c>
 800ab76:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800ab7a:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800ab7e:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800abcc <__ieee754_asinf+0x1c8>
 800ab82:	eeb0 6a40 	vmov.f32	s12, s0
 800ab86:	eea7 6a66 	vfms.f32	s12, s14, s13
 800ab8a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ab8e:	e7aa      	b.n	800aae6 <__ieee754_asinf+0xe2>
 800ab90:	b33bbd2e 	.word	0xb33bbd2e
 800ab94:	3fc90fdb 	.word	0x3fc90fdb
 800ab98:	7149f2ca 	.word	0x7149f2ca
 800ab9c:	3811ef08 	.word	0x3811ef08
 800aba0:	3a4f7f04 	.word	0x3a4f7f04
 800aba4:	3e2aaaab 	.word	0x3e2aaaab
 800aba8:	bd241146 	.word	0xbd241146
 800abac:	3e4e0aa8 	.word	0x3e4e0aa8
 800abb0:	bea6b090 	.word	0xbea6b090
 800abb4:	3d9dc62e 	.word	0x3d9dc62e
 800abb8:	bf303361 	.word	0xbf303361
 800abbc:	4001572d 	.word	0x4001572d
 800abc0:	c019d139 	.word	0xc019d139
 800abc4:	3f799999 	.word	0x3f799999
 800abc8:	333bbd2e 	.word	0x333bbd2e
 800abcc:	3f490fdb 	.word	0x3f490fdb

0800abd0 <__ieee754_rem_pio2f>:
 800abd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abd2:	ee10 6a10 	vmov	r6, s0
 800abd6:	4b8e      	ldr	r3, [pc, #568]	; (800ae10 <__ieee754_rem_pio2f+0x240>)
 800abd8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800abdc:	429d      	cmp	r5, r3
 800abde:	b087      	sub	sp, #28
 800abe0:	eef0 7a40 	vmov.f32	s15, s0
 800abe4:	4604      	mov	r4, r0
 800abe6:	dc05      	bgt.n	800abf4 <__ieee754_rem_pio2f+0x24>
 800abe8:	2300      	movs	r3, #0
 800abea:	ed80 0a00 	vstr	s0, [r0]
 800abee:	6043      	str	r3, [r0, #4]
 800abf0:	2000      	movs	r0, #0
 800abf2:	e01a      	b.n	800ac2a <__ieee754_rem_pio2f+0x5a>
 800abf4:	4b87      	ldr	r3, [pc, #540]	; (800ae14 <__ieee754_rem_pio2f+0x244>)
 800abf6:	429d      	cmp	r5, r3
 800abf8:	dc46      	bgt.n	800ac88 <__ieee754_rem_pio2f+0xb8>
 800abfa:	2e00      	cmp	r6, #0
 800abfc:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800ae18 <__ieee754_rem_pio2f+0x248>
 800ac00:	4b86      	ldr	r3, [pc, #536]	; (800ae1c <__ieee754_rem_pio2f+0x24c>)
 800ac02:	f025 050f 	bic.w	r5, r5, #15
 800ac06:	dd1f      	ble.n	800ac48 <__ieee754_rem_pio2f+0x78>
 800ac08:	429d      	cmp	r5, r3
 800ac0a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ac0e:	d00e      	beq.n	800ac2e <__ieee754_rem_pio2f+0x5e>
 800ac10:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800ae20 <__ieee754_rem_pio2f+0x250>
 800ac14:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800ac18:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ac1c:	ed80 0a00 	vstr	s0, [r0]
 800ac20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ac24:	2001      	movs	r0, #1
 800ac26:	edc4 7a01 	vstr	s15, [r4, #4]
 800ac2a:	b007      	add	sp, #28
 800ac2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac2e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800ae24 <__ieee754_rem_pio2f+0x254>
 800ac32:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800ae28 <__ieee754_rem_pio2f+0x258>
 800ac36:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ac3a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800ac3e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ac42:	edc0 6a00 	vstr	s13, [r0]
 800ac46:	e7eb      	b.n	800ac20 <__ieee754_rem_pio2f+0x50>
 800ac48:	429d      	cmp	r5, r3
 800ac4a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800ac4e:	d00e      	beq.n	800ac6e <__ieee754_rem_pio2f+0x9e>
 800ac50:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800ae20 <__ieee754_rem_pio2f+0x250>
 800ac54:	ee37 0a87 	vadd.f32	s0, s15, s14
 800ac58:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ac5c:	ed80 0a00 	vstr	s0, [r0]
 800ac60:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ac64:	f04f 30ff 	mov.w	r0, #4294967295
 800ac68:	edc4 7a01 	vstr	s15, [r4, #4]
 800ac6c:	e7dd      	b.n	800ac2a <__ieee754_rem_pio2f+0x5a>
 800ac6e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800ae24 <__ieee754_rem_pio2f+0x254>
 800ac72:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800ae28 <__ieee754_rem_pio2f+0x258>
 800ac76:	ee77 7a80 	vadd.f32	s15, s15, s0
 800ac7a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ac7e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ac82:	edc0 6a00 	vstr	s13, [r0]
 800ac86:	e7eb      	b.n	800ac60 <__ieee754_rem_pio2f+0x90>
 800ac88:	4b68      	ldr	r3, [pc, #416]	; (800ae2c <__ieee754_rem_pio2f+0x25c>)
 800ac8a:	429d      	cmp	r5, r3
 800ac8c:	dc72      	bgt.n	800ad74 <__ieee754_rem_pio2f+0x1a4>
 800ac8e:	f000 fc11 	bl	800b4b4 <fabsf>
 800ac92:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800ae30 <__ieee754_rem_pio2f+0x260>
 800ac96:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ac9a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ac9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aca2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aca6:	ee17 0a90 	vmov	r0, s15
 800acaa:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800ae18 <__ieee754_rem_pio2f+0x248>
 800acae:	eea7 0a67 	vfms.f32	s0, s14, s15
 800acb2:	281f      	cmp	r0, #31
 800acb4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800ae20 <__ieee754_rem_pio2f+0x250>
 800acb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acbc:	eeb1 6a47 	vneg.f32	s12, s14
 800acc0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800acc4:	ee16 2a90 	vmov	r2, s13
 800acc8:	dc1c      	bgt.n	800ad04 <__ieee754_rem_pio2f+0x134>
 800acca:	495a      	ldr	r1, [pc, #360]	; (800ae34 <__ieee754_rem_pio2f+0x264>)
 800accc:	1e47      	subs	r7, r0, #1
 800acce:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800acd2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800acd6:	428b      	cmp	r3, r1
 800acd8:	d014      	beq.n	800ad04 <__ieee754_rem_pio2f+0x134>
 800acda:	6022      	str	r2, [r4, #0]
 800acdc:	ed94 7a00 	vldr	s14, [r4]
 800ace0:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ace4:	2e00      	cmp	r6, #0
 800ace6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800acea:	ed84 0a01 	vstr	s0, [r4, #4]
 800acee:	da9c      	bge.n	800ac2a <__ieee754_rem_pio2f+0x5a>
 800acf0:	eeb1 7a47 	vneg.f32	s14, s14
 800acf4:	eeb1 0a40 	vneg.f32	s0, s0
 800acf8:	ed84 7a00 	vstr	s14, [r4]
 800acfc:	ed84 0a01 	vstr	s0, [r4, #4]
 800ad00:	4240      	negs	r0, r0
 800ad02:	e792      	b.n	800ac2a <__ieee754_rem_pio2f+0x5a>
 800ad04:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800ad08:	15eb      	asrs	r3, r5, #23
 800ad0a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800ad0e:	2d08      	cmp	r5, #8
 800ad10:	dde3      	ble.n	800acda <__ieee754_rem_pio2f+0x10a>
 800ad12:	eddf 7a44 	vldr	s15, [pc, #272]	; 800ae24 <__ieee754_rem_pio2f+0x254>
 800ad16:	eef0 6a40 	vmov.f32	s13, s0
 800ad1a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ad1e:	ee30 0a66 	vsub.f32	s0, s0, s13
 800ad22:	eea6 0a27 	vfma.f32	s0, s12, s15
 800ad26:	eddf 7a40 	vldr	s15, [pc, #256]	; 800ae28 <__ieee754_rem_pio2f+0x258>
 800ad2a:	ee97 0a27 	vfnms.f32	s0, s14, s15
 800ad2e:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800ad32:	eef0 7a40 	vmov.f32	s15, s0
 800ad36:	ee15 2a90 	vmov	r2, s11
 800ad3a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800ad3e:	1a5b      	subs	r3, r3, r1
 800ad40:	2b19      	cmp	r3, #25
 800ad42:	dc04      	bgt.n	800ad4e <__ieee754_rem_pio2f+0x17e>
 800ad44:	edc4 5a00 	vstr	s11, [r4]
 800ad48:	eeb0 0a66 	vmov.f32	s0, s13
 800ad4c:	e7c6      	b.n	800acdc <__ieee754_rem_pio2f+0x10c>
 800ad4e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800ae38 <__ieee754_rem_pio2f+0x268>
 800ad52:	eeb0 0a66 	vmov.f32	s0, s13
 800ad56:	eea6 0a25 	vfma.f32	s0, s12, s11
 800ad5a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800ad5e:	eddf 6a37 	vldr	s13, [pc, #220]	; 800ae3c <__ieee754_rem_pio2f+0x26c>
 800ad62:	eee6 7a25 	vfma.f32	s15, s12, s11
 800ad66:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800ad6a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ad6e:	ed84 7a00 	vstr	s14, [r4]
 800ad72:	e7b3      	b.n	800acdc <__ieee754_rem_pio2f+0x10c>
 800ad74:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800ad78:	db06      	blt.n	800ad88 <__ieee754_rem_pio2f+0x1b8>
 800ad7a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ad7e:	edc0 7a01 	vstr	s15, [r0, #4]
 800ad82:	edc0 7a00 	vstr	s15, [r0]
 800ad86:	e733      	b.n	800abf0 <__ieee754_rem_pio2f+0x20>
 800ad88:	15ea      	asrs	r2, r5, #23
 800ad8a:	3a86      	subs	r2, #134	; 0x86
 800ad8c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800ad90:	ee07 3a90 	vmov	s15, r3
 800ad94:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ad98:	eddf 6a29 	vldr	s13, [pc, #164]	; 800ae40 <__ieee754_rem_pio2f+0x270>
 800ad9c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ada0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ada4:	ed8d 7a03 	vstr	s14, [sp, #12]
 800ada8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800adac:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800adb0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800adb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800adb8:	ed8d 7a04 	vstr	s14, [sp, #16]
 800adbc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800adc0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800adc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adc8:	edcd 7a05 	vstr	s15, [sp, #20]
 800adcc:	d11e      	bne.n	800ae0c <__ieee754_rem_pio2f+0x23c>
 800adce:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800add2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800add6:	bf14      	ite	ne
 800add8:	2302      	movne	r3, #2
 800adda:	2301      	moveq	r3, #1
 800addc:	4919      	ldr	r1, [pc, #100]	; (800ae44 <__ieee754_rem_pio2f+0x274>)
 800adde:	9101      	str	r1, [sp, #4]
 800ade0:	2102      	movs	r1, #2
 800ade2:	9100      	str	r1, [sp, #0]
 800ade4:	a803      	add	r0, sp, #12
 800ade6:	4621      	mov	r1, r4
 800ade8:	f000 f892 	bl	800af10 <__kernel_rem_pio2f>
 800adec:	2e00      	cmp	r6, #0
 800adee:	f6bf af1c 	bge.w	800ac2a <__ieee754_rem_pio2f+0x5a>
 800adf2:	edd4 7a00 	vldr	s15, [r4]
 800adf6:	eef1 7a67 	vneg.f32	s15, s15
 800adfa:	edc4 7a00 	vstr	s15, [r4]
 800adfe:	edd4 7a01 	vldr	s15, [r4, #4]
 800ae02:	eef1 7a67 	vneg.f32	s15, s15
 800ae06:	edc4 7a01 	vstr	s15, [r4, #4]
 800ae0a:	e779      	b.n	800ad00 <__ieee754_rem_pio2f+0x130>
 800ae0c:	2303      	movs	r3, #3
 800ae0e:	e7e5      	b.n	800addc <__ieee754_rem_pio2f+0x20c>
 800ae10:	3f490fd8 	.word	0x3f490fd8
 800ae14:	4016cbe3 	.word	0x4016cbe3
 800ae18:	3fc90f80 	.word	0x3fc90f80
 800ae1c:	3fc90fd0 	.word	0x3fc90fd0
 800ae20:	37354443 	.word	0x37354443
 800ae24:	37354400 	.word	0x37354400
 800ae28:	2e85a308 	.word	0x2e85a308
 800ae2c:	43490f80 	.word	0x43490f80
 800ae30:	3f22f984 	.word	0x3f22f984
 800ae34:	0800b7dc 	.word	0x0800b7dc
 800ae38:	2e85a300 	.word	0x2e85a300
 800ae3c:	248d3132 	.word	0x248d3132
 800ae40:	43800000 	.word	0x43800000
 800ae44:	0800b85c 	.word	0x0800b85c

0800ae48 <__ieee754_sqrtf>:
 800ae48:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ae4c:	4770      	bx	lr
	...

0800ae50 <__kernel_cosf>:
 800ae50:	ee10 3a10 	vmov	r3, s0
 800ae54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae58:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800ae5c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800ae60:	da05      	bge.n	800ae6e <__kernel_cosf+0x1e>
 800ae62:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ae66:	ee17 2a90 	vmov	r2, s15
 800ae6a:	2a00      	cmp	r2, #0
 800ae6c:	d03d      	beq.n	800aeea <__kernel_cosf+0x9a>
 800ae6e:	ee60 5a00 	vmul.f32	s11, s0, s0
 800ae72:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800aef0 <__kernel_cosf+0xa0>
 800ae76:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800aef4 <__kernel_cosf+0xa4>
 800ae7a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800aef8 <__kernel_cosf+0xa8>
 800ae7e:	4a1f      	ldr	r2, [pc, #124]	; (800aefc <__kernel_cosf+0xac>)
 800ae80:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800ae84:	4293      	cmp	r3, r2
 800ae86:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800af00 <__kernel_cosf+0xb0>
 800ae8a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800ae8e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800af04 <__kernel_cosf+0xb4>
 800ae92:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800ae96:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800af08 <__kernel_cosf+0xb8>
 800ae9a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800ae9e:	eeb0 7a66 	vmov.f32	s14, s13
 800aea2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800aea6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800aeaa:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800aeae:	ee67 6a25 	vmul.f32	s13, s14, s11
 800aeb2:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800aeb6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800aeba:	dc04      	bgt.n	800aec6 <__kernel_cosf+0x76>
 800aebc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800aec0:	ee36 0a47 	vsub.f32	s0, s12, s14
 800aec4:	4770      	bx	lr
 800aec6:	4a11      	ldr	r2, [pc, #68]	; (800af0c <__kernel_cosf+0xbc>)
 800aec8:	4293      	cmp	r3, r2
 800aeca:	bfda      	itte	le
 800aecc:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800aed0:	ee06 3a90 	vmovle	s13, r3
 800aed4:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800aed8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800aedc:	ee36 0a66 	vsub.f32	s0, s12, s13
 800aee0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aee4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800aee8:	4770      	bx	lr
 800aeea:	eeb0 0a46 	vmov.f32	s0, s12
 800aeee:	4770      	bx	lr
 800aef0:	ad47d74e 	.word	0xad47d74e
 800aef4:	310f74f6 	.word	0x310f74f6
 800aef8:	3d2aaaab 	.word	0x3d2aaaab
 800aefc:	3e999999 	.word	0x3e999999
 800af00:	b493f27c 	.word	0xb493f27c
 800af04:	37d00d01 	.word	0x37d00d01
 800af08:	bab60b61 	.word	0xbab60b61
 800af0c:	3f480000 	.word	0x3f480000

0800af10 <__kernel_rem_pio2f>:
 800af10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af14:	ed2d 8b04 	vpush	{d8-d9}
 800af18:	b0d7      	sub	sp, #348	; 0x15c
 800af1a:	4616      	mov	r6, r2
 800af1c:	4698      	mov	r8, r3
 800af1e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800af20:	4bbb      	ldr	r3, [pc, #748]	; (800b210 <__kernel_rem_pio2f+0x300>)
 800af22:	9001      	str	r0, [sp, #4]
 800af24:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 800af28:	1d33      	adds	r3, r6, #4
 800af2a:	460d      	mov	r5, r1
 800af2c:	f108 39ff 	add.w	r9, r8, #4294967295
 800af30:	db29      	blt.n	800af86 <__kernel_rem_pio2f+0x76>
 800af32:	1ef1      	subs	r1, r6, #3
 800af34:	bf48      	it	mi
 800af36:	1d31      	addmi	r1, r6, #4
 800af38:	10c9      	asrs	r1, r1, #3
 800af3a:	1c4c      	adds	r4, r1, #1
 800af3c:	00e3      	lsls	r3, r4, #3
 800af3e:	9302      	str	r3, [sp, #8]
 800af40:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800af42:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800b220 <__kernel_rem_pio2f+0x310>
 800af46:	eba1 0009 	sub.w	r0, r1, r9
 800af4a:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 800af4e:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 800af52:	eb07 0c09 	add.w	ip, r7, r9
 800af56:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 800af5a:	2300      	movs	r3, #0
 800af5c:	4563      	cmp	r3, ip
 800af5e:	dd14      	ble.n	800af8a <__kernel_rem_pio2f+0x7a>
 800af60:	ab1a      	add	r3, sp, #104	; 0x68
 800af62:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800af66:	46cc      	mov	ip, r9
 800af68:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 800af6c:	f1c8 0b01 	rsb	fp, r8, #1
 800af70:	eb0b 020c 	add.w	r2, fp, ip
 800af74:	4297      	cmp	r7, r2
 800af76:	db27      	blt.n	800afc8 <__kernel_rem_pio2f+0xb8>
 800af78:	f8dd e004 	ldr.w	lr, [sp, #4]
 800af7c:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800b220 <__kernel_rem_pio2f+0x310>
 800af80:	4618      	mov	r0, r3
 800af82:	2200      	movs	r2, #0
 800af84:	e016      	b.n	800afb4 <__kernel_rem_pio2f+0xa4>
 800af86:	2100      	movs	r1, #0
 800af88:	e7d7      	b.n	800af3a <__kernel_rem_pio2f+0x2a>
 800af8a:	42d8      	cmn	r0, r3
 800af8c:	bf5d      	ittte	pl
 800af8e:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 800af92:	ee07 2a90 	vmovpl	s15, r2
 800af96:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800af9a:	eef0 7a47 	vmovmi.f32	s15, s14
 800af9e:	ecea 7a01 	vstmia	sl!, {s15}
 800afa2:	3301      	adds	r3, #1
 800afa4:	e7da      	b.n	800af5c <__kernel_rem_pio2f+0x4c>
 800afa6:	ecfe 6a01 	vldmia	lr!, {s13}
 800afaa:	ed90 7a00 	vldr	s14, [r0]
 800afae:	eee6 7a87 	vfma.f32	s15, s13, s14
 800afb2:	3201      	adds	r2, #1
 800afb4:	454a      	cmp	r2, r9
 800afb6:	f1a0 0004 	sub.w	r0, r0, #4
 800afba:	ddf4      	ble.n	800afa6 <__kernel_rem_pio2f+0x96>
 800afbc:	ecea 7a01 	vstmia	sl!, {s15}
 800afc0:	3304      	adds	r3, #4
 800afc2:	f10c 0c01 	add.w	ip, ip, #1
 800afc6:	e7d3      	b.n	800af70 <__kernel_rem_pio2f+0x60>
 800afc8:	ab06      	add	r3, sp, #24
 800afca:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800afce:	9304      	str	r3, [sp, #16]
 800afd0:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800afd2:	eddf 8a92 	vldr	s17, [pc, #584]	; 800b21c <__kernel_rem_pio2f+0x30c>
 800afd6:	ed9f 9a90 	vldr	s18, [pc, #576]	; 800b218 <__kernel_rem_pio2f+0x308>
 800afda:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800afde:	9303      	str	r3, [sp, #12]
 800afe0:	46ba      	mov	sl, r7
 800afe2:	ab56      	add	r3, sp, #344	; 0x158
 800afe4:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800afe8:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800afec:	ab06      	add	r3, sp, #24
 800afee:	4618      	mov	r0, r3
 800aff0:	4652      	mov	r2, sl
 800aff2:	2a00      	cmp	r2, #0
 800aff4:	dc51      	bgt.n	800b09a <__kernel_rem_pio2f+0x18a>
 800aff6:	4620      	mov	r0, r4
 800aff8:	9305      	str	r3, [sp, #20]
 800affa:	f000 faab 	bl	800b554 <scalbnf>
 800affe:	eeb0 8a40 	vmov.f32	s16, s0
 800b002:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800b006:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b00a:	f000 fa5b 	bl	800b4c4 <floorf>
 800b00e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800b012:	eea0 8a67 	vfms.f32	s16, s0, s15
 800b016:	2c00      	cmp	r4, #0
 800b018:	9b05      	ldr	r3, [sp, #20]
 800b01a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800b01e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800b022:	edcd 7a00 	vstr	s15, [sp]
 800b026:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b02a:	dd4b      	ble.n	800b0c4 <__kernel_rem_pio2f+0x1b4>
 800b02c:	f10a 3cff 	add.w	ip, sl, #4294967295
 800b030:	aa06      	add	r2, sp, #24
 800b032:	f1c4 0e08 	rsb	lr, r4, #8
 800b036:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800b03a:	ee17 1a90 	vmov	r1, s15
 800b03e:	fa42 f00e 	asr.w	r0, r2, lr
 800b042:	4401      	add	r1, r0
 800b044:	9100      	str	r1, [sp, #0]
 800b046:	fa00 f00e 	lsl.w	r0, r0, lr
 800b04a:	a906      	add	r1, sp, #24
 800b04c:	1a12      	subs	r2, r2, r0
 800b04e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800b052:	f1c4 0007 	rsb	r0, r4, #7
 800b056:	fa42 fb00 	asr.w	fp, r2, r0
 800b05a:	f1bb 0f00 	cmp.w	fp, #0
 800b05e:	dd43      	ble.n	800b0e8 <__kernel_rem_pio2f+0x1d8>
 800b060:	9a00      	ldr	r2, [sp, #0]
 800b062:	f04f 0e00 	mov.w	lr, #0
 800b066:	3201      	adds	r2, #1
 800b068:	9200      	str	r2, [sp, #0]
 800b06a:	4670      	mov	r0, lr
 800b06c:	45f2      	cmp	sl, lr
 800b06e:	dc6c      	bgt.n	800b14a <__kernel_rem_pio2f+0x23a>
 800b070:	2c00      	cmp	r4, #0
 800b072:	dd04      	ble.n	800b07e <__kernel_rem_pio2f+0x16e>
 800b074:	2c01      	cmp	r4, #1
 800b076:	d079      	beq.n	800b16c <__kernel_rem_pio2f+0x25c>
 800b078:	2c02      	cmp	r4, #2
 800b07a:	f000 8082 	beq.w	800b182 <__kernel_rem_pio2f+0x272>
 800b07e:	f1bb 0f02 	cmp.w	fp, #2
 800b082:	d131      	bne.n	800b0e8 <__kernel_rem_pio2f+0x1d8>
 800b084:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b088:	ee30 8a48 	vsub.f32	s16, s0, s16
 800b08c:	b360      	cbz	r0, 800b0e8 <__kernel_rem_pio2f+0x1d8>
 800b08e:	4620      	mov	r0, r4
 800b090:	f000 fa60 	bl	800b554 <scalbnf>
 800b094:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b098:	e026      	b.n	800b0e8 <__kernel_rem_pio2f+0x1d8>
 800b09a:	ee60 7a28 	vmul.f32	s15, s0, s17
 800b09e:	3a01      	subs	r2, #1
 800b0a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b0a4:	a942      	add	r1, sp, #264	; 0x108
 800b0a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b0aa:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800b0ae:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800b0b2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b0b6:	eca0 0a01 	vstmia	r0!, {s0}
 800b0ba:	ed9c 0a00 	vldr	s0, [ip]
 800b0be:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b0c2:	e796      	b.n	800aff2 <__kernel_rem_pio2f+0xe2>
 800b0c4:	d107      	bne.n	800b0d6 <__kernel_rem_pio2f+0x1c6>
 800b0c6:	f10a 32ff 	add.w	r2, sl, #4294967295
 800b0ca:	a906      	add	r1, sp, #24
 800b0cc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b0d0:	ea4f 2b22 	mov.w	fp, r2, asr #8
 800b0d4:	e7c1      	b.n	800b05a <__kernel_rem_pio2f+0x14a>
 800b0d6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b0da:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b0de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0e2:	da2f      	bge.n	800b144 <__kernel_rem_pio2f+0x234>
 800b0e4:	f04f 0b00 	mov.w	fp, #0
 800b0e8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b0ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0f0:	f040 8098 	bne.w	800b224 <__kernel_rem_pio2f+0x314>
 800b0f4:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b0f8:	469c      	mov	ip, r3
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	45bc      	cmp	ip, r7
 800b0fe:	da48      	bge.n	800b192 <__kernel_rem_pio2f+0x282>
 800b100:	2a00      	cmp	r2, #0
 800b102:	d05f      	beq.n	800b1c4 <__kernel_rem_pio2f+0x2b4>
 800b104:	aa06      	add	r2, sp, #24
 800b106:	3c08      	subs	r4, #8
 800b108:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b10c:	2900      	cmp	r1, #0
 800b10e:	d07d      	beq.n	800b20c <__kernel_rem_pio2f+0x2fc>
 800b110:	4620      	mov	r0, r4
 800b112:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b116:	9301      	str	r3, [sp, #4]
 800b118:	f000 fa1c 	bl	800b554 <scalbnf>
 800b11c:	9b01      	ldr	r3, [sp, #4]
 800b11e:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800b21c <__kernel_rem_pio2f+0x30c>
 800b122:	4619      	mov	r1, r3
 800b124:	2900      	cmp	r1, #0
 800b126:	f280 80af 	bge.w	800b288 <__kernel_rem_pio2f+0x378>
 800b12a:	4618      	mov	r0, r3
 800b12c:	2400      	movs	r4, #0
 800b12e:	2800      	cmp	r0, #0
 800b130:	f2c0 80d0 	blt.w	800b2d4 <__kernel_rem_pio2f+0x3c4>
 800b134:	a942      	add	r1, sp, #264	; 0x108
 800b136:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 800b13a:	4a36      	ldr	r2, [pc, #216]	; (800b214 <__kernel_rem_pio2f+0x304>)
 800b13c:	eddf 7a38 	vldr	s15, [pc, #224]	; 800b220 <__kernel_rem_pio2f+0x310>
 800b140:	2100      	movs	r1, #0
 800b142:	e0bb      	b.n	800b2bc <__kernel_rem_pio2f+0x3ac>
 800b144:	f04f 0b02 	mov.w	fp, #2
 800b148:	e78a      	b.n	800b060 <__kernel_rem_pio2f+0x150>
 800b14a:	681a      	ldr	r2, [r3, #0]
 800b14c:	b948      	cbnz	r0, 800b162 <__kernel_rem_pio2f+0x252>
 800b14e:	b11a      	cbz	r2, 800b158 <__kernel_rem_pio2f+0x248>
 800b150:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 800b154:	601a      	str	r2, [r3, #0]
 800b156:	2201      	movs	r2, #1
 800b158:	f10e 0e01 	add.w	lr, lr, #1
 800b15c:	3304      	adds	r3, #4
 800b15e:	4610      	mov	r0, r2
 800b160:	e784      	b.n	800b06c <__kernel_rem_pio2f+0x15c>
 800b162:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800b166:	601a      	str	r2, [r3, #0]
 800b168:	4602      	mov	r2, r0
 800b16a:	e7f5      	b.n	800b158 <__kernel_rem_pio2f+0x248>
 800b16c:	f10a 3cff 	add.w	ip, sl, #4294967295
 800b170:	ab06      	add	r3, sp, #24
 800b172:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800b176:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b17a:	aa06      	add	r2, sp, #24
 800b17c:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 800b180:	e77d      	b.n	800b07e <__kernel_rem_pio2f+0x16e>
 800b182:	f10a 3cff 	add.w	ip, sl, #4294967295
 800b186:	ab06      	add	r3, sp, #24
 800b188:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800b18c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b190:	e7f3      	b.n	800b17a <__kernel_rem_pio2f+0x26a>
 800b192:	a906      	add	r1, sp, #24
 800b194:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 800b198:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b19c:	4302      	orrs	r2, r0
 800b19e:	e7ad      	b.n	800b0fc <__kernel_rem_pio2f+0x1ec>
 800b1a0:	3001      	adds	r0, #1
 800b1a2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b1a6:	2a00      	cmp	r2, #0
 800b1a8:	d0fa      	beq.n	800b1a0 <__kernel_rem_pio2f+0x290>
 800b1aa:	a91a      	add	r1, sp, #104	; 0x68
 800b1ac:	eb0a 0208 	add.w	r2, sl, r8
 800b1b0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800b1b4:	f10a 0301 	add.w	r3, sl, #1
 800b1b8:	eb0a 0100 	add.w	r1, sl, r0
 800b1bc:	4299      	cmp	r1, r3
 800b1be:	da04      	bge.n	800b1ca <__kernel_rem_pio2f+0x2ba>
 800b1c0:	468a      	mov	sl, r1
 800b1c2:	e70e      	b.n	800afe2 <__kernel_rem_pio2f+0xd2>
 800b1c4:	9b04      	ldr	r3, [sp, #16]
 800b1c6:	2001      	movs	r0, #1
 800b1c8:	e7eb      	b.n	800b1a2 <__kernel_rem_pio2f+0x292>
 800b1ca:	9803      	ldr	r0, [sp, #12]
 800b1cc:	f8dd c004 	ldr.w	ip, [sp, #4]
 800b1d0:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800b1d4:	9000      	str	r0, [sp, #0]
 800b1d6:	ee07 0a90 	vmov	s15, r0
 800b1da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b1de:	2000      	movs	r0, #0
 800b1e0:	ece2 7a01 	vstmia	r2!, {s15}
 800b1e4:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800b220 <__kernel_rem_pio2f+0x310>
 800b1e8:	4696      	mov	lr, r2
 800b1ea:	4548      	cmp	r0, r9
 800b1ec:	dd06      	ble.n	800b1fc <__kernel_rem_pio2f+0x2ec>
 800b1ee:	a842      	add	r0, sp, #264	; 0x108
 800b1f0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800b1f4:	edc0 7a00 	vstr	s15, [r0]
 800b1f8:	3301      	adds	r3, #1
 800b1fa:	e7df      	b.n	800b1bc <__kernel_rem_pio2f+0x2ac>
 800b1fc:	ecfc 6a01 	vldmia	ip!, {s13}
 800b200:	ed3e 7a01 	vldmdb	lr!, {s14}
 800b204:	3001      	adds	r0, #1
 800b206:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b20a:	e7ee      	b.n	800b1ea <__kernel_rem_pio2f+0x2da>
 800b20c:	3b01      	subs	r3, #1
 800b20e:	e779      	b.n	800b104 <__kernel_rem_pio2f+0x1f4>
 800b210:	0800bba0 	.word	0x0800bba0
 800b214:	0800bb74 	.word	0x0800bb74
 800b218:	43800000 	.word	0x43800000
 800b21c:	3b800000 	.word	0x3b800000
 800b220:	00000000 	.word	0x00000000
 800b224:	9b02      	ldr	r3, [sp, #8]
 800b226:	eeb0 0a48 	vmov.f32	s0, s16
 800b22a:	1b98      	subs	r0, r3, r6
 800b22c:	f000 f992 	bl	800b554 <scalbnf>
 800b230:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800b218 <__kernel_rem_pio2f+0x308>
 800b234:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800b238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b23c:	db1b      	blt.n	800b276 <__kernel_rem_pio2f+0x366>
 800b23e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800b21c <__kernel_rem_pio2f+0x30c>
 800b242:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b246:	aa06      	add	r2, sp, #24
 800b248:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b24c:	a906      	add	r1, sp, #24
 800b24e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b252:	3408      	adds	r4, #8
 800b254:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800b258:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b25c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b260:	ee10 3a10 	vmov	r3, s0
 800b264:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800b268:	ee17 2a90 	vmov	r2, s15
 800b26c:	f10a 0301 	add.w	r3, sl, #1
 800b270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b274:	e74c      	b.n	800b110 <__kernel_rem_pio2f+0x200>
 800b276:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b27a:	aa06      	add	r2, sp, #24
 800b27c:	ee10 3a10 	vmov	r3, s0
 800b280:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800b284:	4653      	mov	r3, sl
 800b286:	e743      	b.n	800b110 <__kernel_rem_pio2f+0x200>
 800b288:	aa42      	add	r2, sp, #264	; 0x108
 800b28a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800b28e:	aa06      	add	r2, sp, #24
 800b290:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800b294:	9201      	str	r2, [sp, #4]
 800b296:	ee07 2a90 	vmov	s15, r2
 800b29a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b29e:	3901      	subs	r1, #1
 800b2a0:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b2a4:	ee20 0a07 	vmul.f32	s0, s0, s14
 800b2a8:	edc0 7a00 	vstr	s15, [r0]
 800b2ac:	e73a      	b.n	800b124 <__kernel_rem_pio2f+0x214>
 800b2ae:	ecf2 6a01 	vldmia	r2!, {s13}
 800b2b2:	ecb6 7a01 	vldmia	r6!, {s14}
 800b2b6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b2ba:	3101      	adds	r1, #1
 800b2bc:	42b9      	cmp	r1, r7
 800b2be:	dc01      	bgt.n	800b2c4 <__kernel_rem_pio2f+0x3b4>
 800b2c0:	428c      	cmp	r4, r1
 800b2c2:	daf4      	bge.n	800b2ae <__kernel_rem_pio2f+0x39e>
 800b2c4:	aa56      	add	r2, sp, #344	; 0x158
 800b2c6:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800b2ca:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800b2ce:	3801      	subs	r0, #1
 800b2d0:	3401      	adds	r4, #1
 800b2d2:	e72c      	b.n	800b12e <__kernel_rem_pio2f+0x21e>
 800b2d4:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800b2d6:	2a02      	cmp	r2, #2
 800b2d8:	dc0a      	bgt.n	800b2f0 <__kernel_rem_pio2f+0x3e0>
 800b2da:	2a00      	cmp	r2, #0
 800b2dc:	dc61      	bgt.n	800b3a2 <__kernel_rem_pio2f+0x492>
 800b2de:	d03c      	beq.n	800b35a <__kernel_rem_pio2f+0x44a>
 800b2e0:	9b00      	ldr	r3, [sp, #0]
 800b2e2:	f003 0007 	and.w	r0, r3, #7
 800b2e6:	b057      	add	sp, #348	; 0x15c
 800b2e8:	ecbd 8b04 	vpop	{d8-d9}
 800b2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2f0:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800b2f2:	2a03      	cmp	r2, #3
 800b2f4:	d1f4      	bne.n	800b2e0 <__kernel_rem_pio2f+0x3d0>
 800b2f6:	aa2e      	add	r2, sp, #184	; 0xb8
 800b2f8:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800b2fc:	4608      	mov	r0, r1
 800b2fe:	461c      	mov	r4, r3
 800b300:	2c00      	cmp	r4, #0
 800b302:	f1a0 0004 	sub.w	r0, r0, #4
 800b306:	dc59      	bgt.n	800b3bc <__kernel_rem_pio2f+0x4ac>
 800b308:	4618      	mov	r0, r3
 800b30a:	2801      	cmp	r0, #1
 800b30c:	f1a1 0104 	sub.w	r1, r1, #4
 800b310:	dc64      	bgt.n	800b3dc <__kernel_rem_pio2f+0x4cc>
 800b312:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 800b220 <__kernel_rem_pio2f+0x310>
 800b316:	2b01      	cmp	r3, #1
 800b318:	dc70      	bgt.n	800b3fc <__kernel_rem_pio2f+0x4ec>
 800b31a:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800b31e:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800b322:	f1bb 0f00 	cmp.w	fp, #0
 800b326:	d172      	bne.n	800b40e <__kernel_rem_pio2f+0x4fe>
 800b328:	edc5 6a00 	vstr	s13, [r5]
 800b32c:	ed85 7a01 	vstr	s14, [r5, #4]
 800b330:	edc5 7a02 	vstr	s15, [r5, #8]
 800b334:	e7d4      	b.n	800b2e0 <__kernel_rem_pio2f+0x3d0>
 800b336:	aa2e      	add	r2, sp, #184	; 0xb8
 800b338:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800b33c:	ed91 7a00 	vldr	s14, [r1]
 800b340:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b344:	3b01      	subs	r3, #1
 800b346:	2b00      	cmp	r3, #0
 800b348:	daf5      	bge.n	800b336 <__kernel_rem_pio2f+0x426>
 800b34a:	f1bb 0f00 	cmp.w	fp, #0
 800b34e:	d001      	beq.n	800b354 <__kernel_rem_pio2f+0x444>
 800b350:	eef1 7a67 	vneg.f32	s15, s15
 800b354:	edc5 7a00 	vstr	s15, [r5]
 800b358:	e7c2      	b.n	800b2e0 <__kernel_rem_pio2f+0x3d0>
 800b35a:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800b220 <__kernel_rem_pio2f+0x310>
 800b35e:	e7f2      	b.n	800b346 <__kernel_rem_pio2f+0x436>
 800b360:	aa2e      	add	r2, sp, #184	; 0xb8
 800b362:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800b366:	edd0 7a00 	vldr	s15, [r0]
 800b36a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b36e:	3901      	subs	r1, #1
 800b370:	2900      	cmp	r1, #0
 800b372:	daf5      	bge.n	800b360 <__kernel_rem_pio2f+0x450>
 800b374:	f1bb 0f00 	cmp.w	fp, #0
 800b378:	d017      	beq.n	800b3aa <__kernel_rem_pio2f+0x49a>
 800b37a:	eef1 7a47 	vneg.f32	s15, s14
 800b37e:	edc5 7a00 	vstr	s15, [r5]
 800b382:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800b386:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b38a:	a82f      	add	r0, sp, #188	; 0xbc
 800b38c:	2101      	movs	r1, #1
 800b38e:	428b      	cmp	r3, r1
 800b390:	da0e      	bge.n	800b3b0 <__kernel_rem_pio2f+0x4a0>
 800b392:	f1bb 0f00 	cmp.w	fp, #0
 800b396:	d001      	beq.n	800b39c <__kernel_rem_pio2f+0x48c>
 800b398:	eef1 7a67 	vneg.f32	s15, s15
 800b39c:	edc5 7a01 	vstr	s15, [r5, #4]
 800b3a0:	e79e      	b.n	800b2e0 <__kernel_rem_pio2f+0x3d0>
 800b3a2:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 800b220 <__kernel_rem_pio2f+0x310>
 800b3a6:	4619      	mov	r1, r3
 800b3a8:	e7e2      	b.n	800b370 <__kernel_rem_pio2f+0x460>
 800b3aa:	eef0 7a47 	vmov.f32	s15, s14
 800b3ae:	e7e6      	b.n	800b37e <__kernel_rem_pio2f+0x46e>
 800b3b0:	ecb0 7a01 	vldmia	r0!, {s14}
 800b3b4:	3101      	adds	r1, #1
 800b3b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b3ba:	e7e8      	b.n	800b38e <__kernel_rem_pio2f+0x47e>
 800b3bc:	edd0 7a00 	vldr	s15, [r0]
 800b3c0:	edd0 6a01 	vldr	s13, [r0, #4]
 800b3c4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b3c8:	3c01      	subs	r4, #1
 800b3ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b3ce:	ed80 7a00 	vstr	s14, [r0]
 800b3d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3d6:	edc0 7a01 	vstr	s15, [r0, #4]
 800b3da:	e791      	b.n	800b300 <__kernel_rem_pio2f+0x3f0>
 800b3dc:	edd1 7a00 	vldr	s15, [r1]
 800b3e0:	edd1 6a01 	vldr	s13, [r1, #4]
 800b3e4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b3e8:	3801      	subs	r0, #1
 800b3ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b3ee:	ed81 7a00 	vstr	s14, [r1]
 800b3f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3f6:	edc1 7a01 	vstr	s15, [r1, #4]
 800b3fa:	e786      	b.n	800b30a <__kernel_rem_pio2f+0x3fa>
 800b3fc:	aa2e      	add	r2, sp, #184	; 0xb8
 800b3fe:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800b402:	ed91 7a00 	vldr	s14, [r1]
 800b406:	3b01      	subs	r3, #1
 800b408:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b40c:	e783      	b.n	800b316 <__kernel_rem_pio2f+0x406>
 800b40e:	eef1 6a66 	vneg.f32	s13, s13
 800b412:	eeb1 7a47 	vneg.f32	s14, s14
 800b416:	edc5 6a00 	vstr	s13, [r5]
 800b41a:	ed85 7a01 	vstr	s14, [r5, #4]
 800b41e:	eef1 7a67 	vneg.f32	s15, s15
 800b422:	e785      	b.n	800b330 <__kernel_rem_pio2f+0x420>

0800b424 <__kernel_sinf>:
 800b424:	ee10 3a10 	vmov	r3, s0
 800b428:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b42c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800b430:	da04      	bge.n	800b43c <__kernel_sinf+0x18>
 800b432:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b436:	ee17 3a90 	vmov	r3, s15
 800b43a:	b35b      	cbz	r3, 800b494 <__kernel_sinf+0x70>
 800b43c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b440:	eddf 7a15 	vldr	s15, [pc, #84]	; 800b498 <__kernel_sinf+0x74>
 800b444:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800b49c <__kernel_sinf+0x78>
 800b448:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b44c:	eddf 7a14 	vldr	s15, [pc, #80]	; 800b4a0 <__kernel_sinf+0x7c>
 800b450:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b454:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800b4a4 <__kernel_sinf+0x80>
 800b458:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b45c:	eddf 7a12 	vldr	s15, [pc, #72]	; 800b4a8 <__kernel_sinf+0x84>
 800b460:	ee60 6a07 	vmul.f32	s13, s0, s14
 800b464:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b468:	b930      	cbnz	r0, 800b478 <__kernel_sinf+0x54>
 800b46a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800b4ac <__kernel_sinf+0x88>
 800b46e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b472:	eea6 0a26 	vfma.f32	s0, s12, s13
 800b476:	4770      	bx	lr
 800b478:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b47c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800b480:	eee0 7a86 	vfma.f32	s15, s1, s12
 800b484:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800b488:	eddf 7a09 	vldr	s15, [pc, #36]	; 800b4b0 <__kernel_sinf+0x8c>
 800b48c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800b490:	ee30 0a60 	vsub.f32	s0, s0, s1
 800b494:	4770      	bx	lr
 800b496:	bf00      	nop
 800b498:	2f2ec9d3 	.word	0x2f2ec9d3
 800b49c:	b2d72f34 	.word	0xb2d72f34
 800b4a0:	3638ef1b 	.word	0x3638ef1b
 800b4a4:	b9500d01 	.word	0xb9500d01
 800b4a8:	3c088889 	.word	0x3c088889
 800b4ac:	be2aaaab 	.word	0xbe2aaaab
 800b4b0:	3e2aaaab 	.word	0x3e2aaaab

0800b4b4 <fabsf>:
 800b4b4:	ee10 3a10 	vmov	r3, s0
 800b4b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b4bc:	ee00 3a10 	vmov	s0, r3
 800b4c0:	4770      	bx	lr
	...

0800b4c4 <floorf>:
 800b4c4:	ee10 3a10 	vmov	r3, s0
 800b4c8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b4cc:	3a7f      	subs	r2, #127	; 0x7f
 800b4ce:	2a16      	cmp	r2, #22
 800b4d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b4d4:	dc2a      	bgt.n	800b52c <floorf+0x68>
 800b4d6:	2a00      	cmp	r2, #0
 800b4d8:	da11      	bge.n	800b4fe <floorf+0x3a>
 800b4da:	eddf 7a18 	vldr	s15, [pc, #96]	; 800b53c <floorf+0x78>
 800b4de:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b4e2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b4e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4ea:	dd05      	ble.n	800b4f8 <floorf+0x34>
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	da23      	bge.n	800b538 <floorf+0x74>
 800b4f0:	4a13      	ldr	r2, [pc, #76]	; (800b540 <floorf+0x7c>)
 800b4f2:	2900      	cmp	r1, #0
 800b4f4:	bf18      	it	ne
 800b4f6:	4613      	movne	r3, r2
 800b4f8:	ee00 3a10 	vmov	s0, r3
 800b4fc:	4770      	bx	lr
 800b4fe:	4911      	ldr	r1, [pc, #68]	; (800b544 <floorf+0x80>)
 800b500:	4111      	asrs	r1, r2
 800b502:	420b      	tst	r3, r1
 800b504:	d0fa      	beq.n	800b4fc <floorf+0x38>
 800b506:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800b53c <floorf+0x78>
 800b50a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b50e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b516:	ddef      	ble.n	800b4f8 <floorf+0x34>
 800b518:	2b00      	cmp	r3, #0
 800b51a:	bfbe      	ittt	lt
 800b51c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800b520:	fa40 f202 	asrlt.w	r2, r0, r2
 800b524:	189b      	addlt	r3, r3, r2
 800b526:	ea23 0301 	bic.w	r3, r3, r1
 800b52a:	e7e5      	b.n	800b4f8 <floorf+0x34>
 800b52c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b530:	d3e4      	bcc.n	800b4fc <floorf+0x38>
 800b532:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b536:	4770      	bx	lr
 800b538:	2300      	movs	r3, #0
 800b53a:	e7dd      	b.n	800b4f8 <floorf+0x34>
 800b53c:	7149f2ca 	.word	0x7149f2ca
 800b540:	bf800000 	.word	0xbf800000
 800b544:	007fffff 	.word	0x007fffff

0800b548 <nanf>:
 800b548:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b550 <nanf+0x8>
 800b54c:	4770      	bx	lr
 800b54e:	bf00      	nop
 800b550:	7fc00000 	.word	0x7fc00000

0800b554 <scalbnf>:
 800b554:	ee10 3a10 	vmov	r3, s0
 800b558:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800b55c:	d025      	beq.n	800b5aa <scalbnf+0x56>
 800b55e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b562:	d302      	bcc.n	800b56a <scalbnf+0x16>
 800b564:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b568:	4770      	bx	lr
 800b56a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800b56e:	d122      	bne.n	800b5b6 <scalbnf+0x62>
 800b570:	4b2a      	ldr	r3, [pc, #168]	; (800b61c <scalbnf+0xc8>)
 800b572:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800b620 <scalbnf+0xcc>
 800b576:	4298      	cmp	r0, r3
 800b578:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b57c:	db16      	blt.n	800b5ac <scalbnf+0x58>
 800b57e:	ee10 3a10 	vmov	r3, s0
 800b582:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b586:	3a19      	subs	r2, #25
 800b588:	4402      	add	r2, r0
 800b58a:	2afe      	cmp	r2, #254	; 0xfe
 800b58c:	dd15      	ble.n	800b5ba <scalbnf+0x66>
 800b58e:	ee10 3a10 	vmov	r3, s0
 800b592:	eddf 7a24 	vldr	s15, [pc, #144]	; 800b624 <scalbnf+0xd0>
 800b596:	eddf 6a24 	vldr	s13, [pc, #144]	; 800b628 <scalbnf+0xd4>
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	eeb0 7a67 	vmov.f32	s14, s15
 800b5a0:	bfb8      	it	lt
 800b5a2:	eef0 7a66 	vmovlt.f32	s15, s13
 800b5a6:	ee27 0a27 	vmul.f32	s0, s14, s15
 800b5aa:	4770      	bx	lr
 800b5ac:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b62c <scalbnf+0xd8>
 800b5b0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b5b4:	4770      	bx	lr
 800b5b6:	0dd2      	lsrs	r2, r2, #23
 800b5b8:	e7e6      	b.n	800b588 <scalbnf+0x34>
 800b5ba:	2a00      	cmp	r2, #0
 800b5bc:	dd06      	ble.n	800b5cc <scalbnf+0x78>
 800b5be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b5c2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b5c6:	ee00 3a10 	vmov	s0, r3
 800b5ca:	4770      	bx	lr
 800b5cc:	f112 0f16 	cmn.w	r2, #22
 800b5d0:	da1a      	bge.n	800b608 <scalbnf+0xb4>
 800b5d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b5d6:	4298      	cmp	r0, r3
 800b5d8:	ee10 3a10 	vmov	r3, s0
 800b5dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b5e0:	dd0a      	ble.n	800b5f8 <scalbnf+0xa4>
 800b5e2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800b624 <scalbnf+0xd0>
 800b5e6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800b628 <scalbnf+0xd4>
 800b5ea:	eef0 7a40 	vmov.f32	s15, s0
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	bf18      	it	ne
 800b5f2:	eeb0 0a47 	vmovne.f32	s0, s14
 800b5f6:	e7db      	b.n	800b5b0 <scalbnf+0x5c>
 800b5f8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800b62c <scalbnf+0xd8>
 800b5fc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800b630 <scalbnf+0xdc>
 800b600:	eef0 7a40 	vmov.f32	s15, s0
 800b604:	2b00      	cmp	r3, #0
 800b606:	e7f3      	b.n	800b5f0 <scalbnf+0x9c>
 800b608:	3219      	adds	r2, #25
 800b60a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b60e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b612:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b634 <scalbnf+0xe0>
 800b616:	ee07 3a10 	vmov	s14, r3
 800b61a:	e7c4      	b.n	800b5a6 <scalbnf+0x52>
 800b61c:	ffff3cb0 	.word	0xffff3cb0
 800b620:	4c000000 	.word	0x4c000000
 800b624:	7149f2ca 	.word	0x7149f2ca
 800b628:	f149f2ca 	.word	0xf149f2ca
 800b62c:	0da24260 	.word	0x0da24260
 800b630:	8da24260 	.word	0x8da24260
 800b634:	33000000 	.word	0x33000000

0800b638 <_init>:
 800b638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b63a:	bf00      	nop
 800b63c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b63e:	bc08      	pop	{r3}
 800b640:	469e      	mov	lr, r3
 800b642:	4770      	bx	lr

0800b644 <_fini>:
 800b644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b646:	bf00      	nop
 800b648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b64a:	bc08      	pop	{r3}
 800b64c:	469e      	mov	lr, r3
 800b64e:	4770      	bx	lr
