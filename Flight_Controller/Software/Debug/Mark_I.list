
Mark_I.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b50  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08006cd8  08006cd8  00016cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d38  08006d38  0002038c  2**0
                  CONTENTS
  4 .ARM          00000008  08006d38  08006d38  00016d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d40  08006d40  0002038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d40  08006d40  00016d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d44  08006d44  00016d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000038c  20000000  08006d48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002038c  2**0
                  CONTENTS
 10 .bss          00000c94  2000038c  2000038c  0002038c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001020  20001020  0002038c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002038c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bb17  00000000  00000000  000203bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b81  00000000  00000000  0003bed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001190  00000000  00000000  0003fa58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ff8  00000000  00000000  00040be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022a2c  00000000  00000000  00041be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018ab5  00000000  00000000  0006460c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3c27  00000000  00000000  0007d0c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00140ce8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000046c8  00000000  00000000  00140d3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000038c 	.word	0x2000038c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006cc0 	.word	0x08006cc0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000390 	.word	0x20000390
 80001c4:	08006cc0 	.word	0x08006cc0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <DATA_LOGGER_Init>:
/*
 * @brief Declare every data
 * @param mark1_ pointer to a system_t structure
 */
void DATA_LOGGER_Init(system_t * mark1_)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	mark1 = mark1_;
 80004c8:	4a2e      	ldr	r2, [pc, #184]	; (8000584 <DATA_LOGGER_Init+0xc4>)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	6013      	str	r3, [r2, #0]
	/* -------------- Outputs ----------------- */
	DEFINE_DATA(data_id_eMCU_LOAD,
 80004ce:	4b2e      	ldr	r3, [pc, #184]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 80004d0:	2203      	movs	r2, #3
 80004d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80004d6:	4b2b      	ldr	r3, [pc, #172]	; (8000584 <DATA_LOGGER_Init+0xc4>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	461a      	mov	r2, r3
 80004dc:	4b2a      	ldr	r3, [pc, #168]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 80004de:	641a      	str	r2, [r3, #64]	; 0x40
 80004e0:	4b29      	ldr	r3, [pc, #164]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 80004e2:	222a      	movs	r2, #42	; 0x2a
 80004e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80004e8:	4b27      	ldr	r3, [pc, #156]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 80004ea:	4a28      	ldr	r2, [pc, #160]	; (800058c <DATA_LOGGER_Init+0xcc>)
 80004ec:	649a      	str	r2, [r3, #72]	; 0x48
 80004ee:	4b26      	ldr	r3, [pc, #152]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 80004f0:	2208      	movs	r2, #8
 80004f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 80004f6:	4b24      	ldr	r3, [pc, #144]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				(void*)&mark1->software.cpu_load,
				data_format_e16B_FLOAT_2D,
				"Mcu Load",
				use_format_eAS_OUTPUT);
	/* -------------- Inputs ----------------- */
	DEFINE_DATA(data_id_eCONFIG_REQUEST,
 80004fe:	4b22      	ldr	r3, [pc, #136]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 8000500:	2200      	movs	r2, #0
 8000502:	721a      	strb	r2, [r3, #8]
 8000504:	4b20      	ldr	r3, [pc, #128]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 8000506:	2200      	movs	r2, #0
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	4b1f      	ldr	r3, [pc, #124]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 800050c:	2200      	movs	r2, #0
 800050e:	725a      	strb	r2, [r3, #9]
 8000510:	4b1d      	ldr	r3, [pc, #116]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 8000512:	4a1f      	ldr	r2, [pc, #124]	; (8000590 <DATA_LOGGER_Init+0xd0>)
 8000514:	60da      	str	r2, [r3, #12]
 8000516:	4b1c      	ldr	r3, [pc, #112]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 8000518:	2212      	movs	r2, #18
 800051a:	741a      	strb	r2, [r3, #16]
 800051c:	4b1a      	ldr	r3, [pc, #104]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 800051e:	2202      	movs	r2, #2
 8000520:	745a      	strb	r2, [r3, #17]
				NULL,
				data_format_e0B_BUTTON,
				"Send Configuration",
				use_format_eAS_INPUT);
	DEFINE_DATA(data_id_eSTART_TRANSFER,
 8000522:	4b19      	ldr	r3, [pc, #100]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 8000524:	2201      	movs	r2, #1
 8000526:	771a      	strb	r2, [r3, #28]
 8000528:	4b17      	ldr	r3, [pc, #92]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 800052a:	2200      	movs	r2, #0
 800052c:	619a      	str	r2, [r3, #24]
 800052e:	4b16      	ldr	r3, [pc, #88]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 8000530:	2200      	movs	r2, #0
 8000532:	775a      	strb	r2, [r3, #29]
 8000534:	4b14      	ldr	r3, [pc, #80]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 8000536:	4a17      	ldr	r2, [pc, #92]	; (8000594 <DATA_LOGGER_Init+0xd4>)
 8000538:	621a      	str	r2, [r3, #32]
 800053a:	4b13      	ldr	r3, [pc, #76]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 800053c:	220e      	movs	r2, #14
 800053e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000542:	4b11      	ldr	r3, [pc, #68]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 8000544:	2202      	movs	r2, #2
 8000546:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				NULL,
				data_format_e0B_BUTTON,
				"Start Transfer",
				use_format_eAS_INPUT);
	DEFINE_DATA(data_id_eSTOP_TRANSFER,
 800054a:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 800054c:	2202      	movs	r2, #2
 800054e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8000552:	4b0d      	ldr	r3, [pc, #52]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 8000554:	2200      	movs	r2, #0
 8000556:	62da      	str	r2, [r3, #44]	; 0x2c
 8000558:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 800055a:	2200      	movs	r2, #0
 800055c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8000560:	4b09      	ldr	r3, [pc, #36]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 8000562:	4a0d      	ldr	r2, [pc, #52]	; (8000598 <DATA_LOGGER_Init+0xd8>)
 8000564:	635a      	str	r2, [r3, #52]	; 0x34
 8000566:	4b08      	ldr	r3, [pc, #32]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 8000568:	220d      	movs	r2, #13
 800056a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800056e:	4b06      	ldr	r3, [pc, #24]	; (8000588 <DATA_LOGGER_Init+0xc8>)
 8000570:	2202      	movs	r2, #2
 8000572:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
				NULL,
				data_format_e0B_BUTTON,
				"Stop Transfer",
				use_format_eAS_INPUT);
}
 8000576:	bf00      	nop
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	200003a8 	.word	0x200003a8
 8000588:	200003ac 	.word	0x200003ac
 800058c:	08006cd8 	.word	0x08006cd8
 8000590:	08006ce4 	.word	0x08006ce4
 8000594:	08006cf8 	.word	0x08006cf8
 8000598:	08006d08 	.word	0x08006d08

0800059c <DATA_LOGGER_Start>:
/*
 * @brief Request to start logging data
 */
void DATA_LOGGER_Start()
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
	start_flag = TRUE;
 80005a0:	4b03      	ldr	r3, [pc, #12]	; (80005b0 <DATA_LOGGER_Start+0x14>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	701a      	strb	r2, [r3, #0]
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	200003fc 	.word	0x200003fc

080005b4 <DATA_LOGGER_Stop>:
/*
 * @brief Request to stop logging data
 */
void DATA_LOGGER_Stop()
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
	stop_flag = TRUE;
 80005b8:	4b03      	ldr	r3, [pc, #12]	; (80005c8 <DATA_LOGGER_Stop+0x14>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	701a      	strb	r2, [r3, #0]
}
 80005be:	bf00      	nop
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	200003fe 	.word	0x200003fe

080005cc <DATA_LOGGER_Main>:

/*
 * @brief Call the state machine and the uart parser
 */
void DATA_LOGGER_Main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	state_machine();
 80005d0:	f000 fab0 	bl	8000b34 <state_machine>
	parse_uart();
 80005d4:	f000 fbb4 	bl	8000d40 <parse_uart>
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}

080005dc <DATA_LOGGER_Reception>:
/*
 * @brief Parse input data
 * @param input_buffer Buffer to use to parse the data
 */
void DATA_LOGGER_Reception(uint8_t * input_buffer)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	uint8_t id = input_buffer[0];
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp_uint_16 = 0 ;
 80005ea:	2300      	movs	r3, #0
 80005ec:	81bb      	strh	r3, [r7, #12]
	int16_t tmp_int_16 = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	817b      	strh	r3, [r7, #10]
	switch(data_list[id].format)
 80005f2:	7bfa      	ldrb	r2, [r7, #15]
 80005f4:	4954      	ldr	r1, [pc, #336]	; (8000748 <DATA_LOGGER_Reception+0x16c>)
 80005f6:	4613      	mov	r3, r2
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	4413      	add	r3, r2
 80005fc:	009b      	lsls	r3, r3, #2
 80005fe:	440b      	add	r3, r1
 8000600:	3309      	adds	r3, #9
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b2d      	cmp	r3, #45	; 0x2d
 8000606:	f200 809a 	bhi.w	800073e <DATA_LOGGER_Reception+0x162>
 800060a:	a201      	add	r2, pc, #4	; (adr r2, 8000610 <DATA_LOGGER_Reception+0x34>)
 800060c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000610:	080006c9 	.word	0x080006c9
 8000614:	0800073f 	.word	0x0800073f
 8000618:	0800073f 	.word	0x0800073f
 800061c:	0800073f 	.word	0x0800073f
 8000620:	0800073f 	.word	0x0800073f
 8000624:	0800073f 	.word	0x0800073f
 8000628:	0800073f 	.word	0x0800073f
 800062c:	0800073f 	.word	0x0800073f
 8000630:	0800073f 	.word	0x0800073f
 8000634:	0800073f 	.word	0x0800073f
 8000638:	0800073f 	.word	0x0800073f
 800063c:	0800073f 	.word	0x0800073f
 8000640:	0800073f 	.word	0x0800073f
 8000644:	0800073f 	.word	0x0800073f
 8000648:	0800073f 	.word	0x0800073f
 800064c:	0800073f 	.word	0x0800073f
 8000650:	0800073f 	.word	0x0800073f
 8000654:	0800073f 	.word	0x0800073f
 8000658:	0800073f 	.word	0x0800073f
 800065c:	0800073f 	.word	0x0800073f
 8000660:	0800073f 	.word	0x0800073f
 8000664:	080006f5 	.word	0x080006f5
 8000668:	0800073f 	.word	0x0800073f
 800066c:	0800073f 	.word	0x0800073f
 8000670:	0800073f 	.word	0x0800073f
 8000674:	0800073f 	.word	0x0800073f
 8000678:	0800073f 	.word	0x0800073f
 800067c:	0800073f 	.word	0x0800073f
 8000680:	0800073f 	.word	0x0800073f
 8000684:	0800073f 	.word	0x0800073f
 8000688:	0800073f 	.word	0x0800073f
 800068c:	0800073f 	.word	0x0800073f
 8000690:	0800073f 	.word	0x0800073f
 8000694:	0800073f 	.word	0x0800073f
 8000698:	0800073f 	.word	0x0800073f
 800069c:	0800073f 	.word	0x0800073f
 80006a0:	0800073f 	.word	0x0800073f
 80006a4:	0800073f 	.word	0x0800073f
 80006a8:	0800073f 	.word	0x0800073f
 80006ac:	0800073f 	.word	0x0800073f
 80006b0:	0800073f 	.word	0x0800073f
 80006b4:	0800073f 	.word	0x0800073f
 80006b8:	0800073f 	.word	0x0800073f
 80006bc:	0800073f 	.word	0x0800073f
 80006c0:	08000721 	.word	0x08000721
 80006c4:	08000703 	.word	0x08000703
	{
		case data_format_e0B_BUTTON:
			/* Link an action to each id */
			switch(id)
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
 80006ca:	2b02      	cmp	r3, #2
 80006cc:	d00d      	beq.n	80006ea <DATA_LOGGER_Reception+0x10e>
 80006ce:	2b02      	cmp	r3, #2
 80006d0:	dc0e      	bgt.n	80006f0 <DATA_LOGGER_Reception+0x114>
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d002      	beq.n	80006dc <DATA_LOGGER_Reception+0x100>
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d004      	beq.n	80006e4 <DATA_LOGGER_Reception+0x108>
			{
				default:
					break;
 80006da:	e009      	b.n	80006f0 <DATA_LOGGER_Reception+0x114>
				case data_id_eCONFIG_REQUEST:
					send_config_flag = TRUE;
 80006dc:	4b1b      	ldr	r3, [pc, #108]	; (800074c <DATA_LOGGER_Reception+0x170>)
 80006de:	2201      	movs	r2, #1
 80006e0:	701a      	strb	r2, [r3, #0]
					break;
 80006e2:	e006      	b.n	80006f2 <DATA_LOGGER_Reception+0x116>
				case data_id_eSTART_TRANSFER:
					DATA_LOGGER_Start();
 80006e4:	f7ff ff5a 	bl	800059c <DATA_LOGGER_Start>
					break;
 80006e8:	e003      	b.n	80006f2 <DATA_LOGGER_Reception+0x116>
				case data_id_eSTOP_TRANSFER:
					DATA_LOGGER_Stop();
 80006ea:	f7ff ff63 	bl	80005b4 <DATA_LOGGER_Stop>
					break;
 80006ee:	e000      	b.n	80006f2 <DATA_LOGGER_Reception+0x116>
					break;
 80006f0:	bf00      	nop
			}
			break;
 80006f2:	e025      	b.n	8000740 <DATA_LOGGER_Reception+0x164>
		case data_format_e8B_FLOAT_0D:
			break;
		case data_format_e8B_FLOAT_1D:
			break;
		case data_format_e8B_PWM:
			tmp_uint_16 = 4*input_buffer[1];
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	3301      	adds	r3, #1
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	81bb      	strh	r3, [r7, #12]
			break;
 8000700:	e01e      	b.n	8000740 <DATA_LOGGER_Reception+0x164>
		case data_format_e16B_INT16:
			tmp_int_16 = (int16_t)input_buffer[1] << 8;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	3301      	adds	r3, #1
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	021b      	lsls	r3, r3, #8
 800070a:	817b      	strh	r3, [r7, #10]
			tmp_int_16 += (int16_t)input_buffer[2];
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	3302      	adds	r3, #2
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	b29a      	uxth	r2, r3
 8000714:	897b      	ldrh	r3, [r7, #10]
 8000716:	4413      	add	r3, r2
 8000718:	b29b      	uxth	r3, r3
 800071a:	817b      	strh	r3, [r7, #10]
			switch(id)
			{
				default:
					break;
 800071c:	bf00      	nop
			}

			break;
 800071e:	e00f      	b.n	8000740 <DATA_LOGGER_Reception+0x164>
		case data_format_e16B_UINT16:
			tmp_uint_16 = (uint16_t)input_buffer[1] << 8;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	3301      	adds	r3, #1
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	b29b      	uxth	r3, r3
 8000728:	021b      	lsls	r3, r3, #8
 800072a:	81bb      	strh	r3, [r7, #12]
			tmp_uint_16 += (uint16_t)input_buffer[2];
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3302      	adds	r3, #2
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	b29a      	uxth	r2, r3
 8000734:	89bb      	ldrh	r3, [r7, #12]
 8000736:	4413      	add	r3, r2
 8000738:	81bb      	strh	r3, [r7, #12]
			switch(id)
			{
				default:
					break;
 800073a:	bf00      	nop
			}

		case data_format_e16B_FLOAT_1D:
			break;
 800073c:	e000      	b.n	8000740 <DATA_LOGGER_Reception+0x164>
		default:
			break;
 800073e:	bf00      	nop

	}
}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	200003ac 	.word	0x200003ac
 800074c:	200003fd 	.word	0x200003fd

08000750 <DATA_LOGGER_Get_Data_Value>:
 * @param id Id of the data
 * @param buffer Buffer array
 * @return Number of bytes written
 */
uint8_t DATA_LOGGER_Get_Data_Value(data_id_e id, uint8_t * buffer)
{
 8000750:	b480      	push	{r7}
 8000752:	b087      	sub	sp, #28
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	73fb      	strb	r3, [r7, #15]

	/* Local temporary variables */
	int16_t tmp_16 = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	82fb      	strh	r3, [r7, #22]
	float tmp_float = 0;
 8000760:	f04f 0300 	mov.w	r3, #0
 8000764:	613b      	str	r3, [r7, #16]

	/* First byte is reserved for the id */
	buffer[0] = id ;
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	7bfa      	ldrb	r2, [r7, #15]
 800076a:	701a      	strb	r2, [r3, #0]
	switch(data_list[id].format)
 800076c:	7bfa      	ldrb	r2, [r7, #15]
 800076e:	498f      	ldr	r1, [pc, #572]	; (80009ac <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000770:	4613      	mov	r3, r2
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	4413      	add	r3, r2
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	440b      	add	r3, r1
 800077a:	3309      	adds	r3, #9
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	3b14      	subs	r3, #20
 8000780:	2b19      	cmp	r3, #25
 8000782:	f200 80fb 	bhi.w	800097c <DATA_LOGGER_Get_Data_Value+0x22c>
 8000786:	a201      	add	r2, pc, #4	; (adr r2, 800078c <DATA_LOGGER_Get_Data_Value+0x3c>)
 8000788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800078c:	080007f5 	.word	0x080007f5
 8000790:	0800097d 	.word	0x0800097d
 8000794:	0800097d 	.word	0x0800097d
 8000798:	08000811 	.word	0x08000811
 800079c:	0800097d 	.word	0x0800097d
 80007a0:	0800097d 	.word	0x0800097d
 80007a4:	0800097d 	.word	0x0800097d
 80007a8:	0800097d 	.word	0x0800097d
 80007ac:	0800097d 	.word	0x0800097d
 80007b0:	0800097d 	.word	0x0800097d
 80007b4:	0800097d 	.word	0x0800097d
 80007b8:	0800097d 	.word	0x0800097d
 80007bc:	0800097d 	.word	0x0800097d
 80007c0:	0800097d 	.word	0x0800097d
 80007c4:	0800097d 	.word	0x0800097d
 80007c8:	0800097d 	.word	0x0800097d
 80007cc:	0800097d 	.word	0x0800097d
 80007d0:	0800097d 	.word	0x0800097d
 80007d4:	0800097d 	.word	0x0800097d
 80007d8:	0800097d 	.word	0x0800097d
 80007dc:	0800097d 	.word	0x0800097d
 80007e0:	08000841 	.word	0x08000841
 80007e4:	08000889 	.word	0x08000889
 80007e8:	080008d1 	.word	0x080008d1
 80007ec:	08000919 	.word	0x08000919
 80007f0:	0800094b 	.word	0x0800094b
	{
		case data_format_e8B:
			buffer[1] = *(uint8_t*)data_list[id].data ;
 80007f4:	7bfa      	ldrb	r2, [r7, #15]
 80007f6:	496d      	ldr	r1, [pc, #436]	; (80009ac <DATA_LOGGER_Get_Data_Value+0x25c>)
 80007f8:	4613      	mov	r3, r2
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	4413      	add	r3, r2
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	440b      	add	r3, r1
 8000802:	3304      	adds	r3, #4
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	3301      	adds	r3, #1
 800080a:	7812      	ldrb	r2, [r2, #0]
 800080c:	701a      	strb	r2, [r3, #0]
			break;
 800080e:	e0b6      	b.n	800097e <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e8B_PWM:
			break;
		case data_format_e8B_FLOAT_0D:
			tmp_float = *(float*)data_list[id].data ;
 8000810:	7bfa      	ldrb	r2, [r7, #15]
 8000812:	4966      	ldr	r1, [pc, #408]	; (80009ac <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000814:	4613      	mov	r3, r2
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	4413      	add	r3, r2
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	440b      	add	r3, r1
 800081e:	3304      	adds	r3, #4
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	613b      	str	r3, [r7, #16]
			buffer[1] = (int8_t)tmp_float;
 8000826:	edd7 7a04 	vldr	s15, [r7, #16]
 800082a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800082e:	edc7 7a01 	vstr	s15, [r7, #4]
 8000832:	793b      	ldrb	r3, [r7, #4]
 8000834:	b25a      	sxtb	r2, r3
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	3301      	adds	r3, #1
 800083a:	b2d2      	uxtb	r2, r2
 800083c:	701a      	strb	r2, [r3, #0]
			break;
 800083e:	e09e      	b.n	800097e <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e8B_FLOAT_1D:
			break;
		case data_format_e16B:
			break;
		case data_format_e16B_FLOAT_1D:
			tmp_float = *(float*)data_list[id].data;
 8000840:	7bfa      	ldrb	r2, [r7, #15]
 8000842:	495a      	ldr	r1, [pc, #360]	; (80009ac <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000844:	4613      	mov	r3, r2
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	4413      	add	r3, r2
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	440b      	add	r3, r1
 800084e:	3304      	adds	r3, #4
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 10;
 8000856:	edd7 7a04 	vldr	s15, [r7, #16]
 800085a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800085e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000862:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000866:	ee17 3a90 	vmov	r3, s15
 800086a:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 800086c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000870:	121b      	asrs	r3, r3, #8
 8000872:	b21a      	sxth	r2, r3
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	3301      	adds	r3, #1
 8000878:	b2d2      	uxtb	r2, r2
 800087a:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	3302      	adds	r3, #2
 8000880:	8afa      	ldrh	r2, [r7, #22]
 8000882:	b2d2      	uxtb	r2, r2
 8000884:	701a      	strb	r2, [r3, #0]
			break;
 8000886:	e07a      	b.n	800097e <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e16B_FLOAT_2D:
			tmp_float = *(float*)data_list[id].data;
 8000888:	7bfa      	ldrb	r2, [r7, #15]
 800088a:	4948      	ldr	r1, [pc, #288]	; (80009ac <DATA_LOGGER_Get_Data_Value+0x25c>)
 800088c:	4613      	mov	r3, r2
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	4413      	add	r3, r2
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	440b      	add	r3, r1
 8000896:	3304      	adds	r3, #4
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 100;
 800089e:	edd7 7a04 	vldr	s15, [r7, #16]
 80008a2:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80009b0 <DATA_LOGGER_Get_Data_Value+0x260>
 80008a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008ae:	ee17 3a90 	vmov	r3, s15
 80008b2:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 80008b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80008b8:	121b      	asrs	r3, r3, #8
 80008ba:	b21a      	sxth	r2, r3
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	3301      	adds	r3, #1
 80008c0:	b2d2      	uxtb	r2, r2
 80008c2:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	3302      	adds	r3, #2
 80008c8:	8afa      	ldrh	r2, [r7, #22]
 80008ca:	b2d2      	uxtb	r2, r2
 80008cc:	701a      	strb	r2, [r3, #0]
			break;
 80008ce:	e056      	b.n	800097e <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e16B_FLOAT_3D:
			tmp_float = *(float*)data_list[id].data;
 80008d0:	7bfa      	ldrb	r2, [r7, #15]
 80008d2:	4936      	ldr	r1, [pc, #216]	; (80009ac <DATA_LOGGER_Get_Data_Value+0x25c>)
 80008d4:	4613      	mov	r3, r2
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	4413      	add	r3, r2
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	440b      	add	r3, r1
 80008de:	3304      	adds	r3, #4
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 1000;
 80008e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80008ea:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80009b4 <DATA_LOGGER_Get_Data_Value+0x264>
 80008ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008f6:	ee17 3a90 	vmov	r3, s15
 80008fa:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 80008fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000900:	121b      	asrs	r3, r3, #8
 8000902:	b21a      	sxth	r2, r3
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	3301      	adds	r3, #1
 8000908:	b2d2      	uxtb	r2, r2
 800090a:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	3302      	adds	r3, #2
 8000910:	8afa      	ldrh	r2, [r7, #22]
 8000912:	b2d2      	uxtb	r2, r2
 8000914:	701a      	strb	r2, [r3, #0]
			break;
 8000916:	e032      	b.n	800097e <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e16B_UINT16:
			tmp_16 = *(uint16_t*)data_list[id].data ;
 8000918:	7bfa      	ldrb	r2, [r7, #15]
 800091a:	4924      	ldr	r1, [pc, #144]	; (80009ac <DATA_LOGGER_Get_Data_Value+0x25c>)
 800091c:	4613      	mov	r3, r2
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	4413      	add	r3, r2
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	440b      	add	r3, r1
 8000926:	3304      	adds	r3, #4
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	881b      	ldrh	r3, [r3, #0]
 800092c:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 800092e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000932:	121b      	asrs	r3, r3, #8
 8000934:	b21a      	sxth	r2, r3
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	3301      	adds	r3, #1
 800093a:	b2d2      	uxtb	r2, r2
 800093c:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	3302      	adds	r3, #2
 8000942:	8afa      	ldrh	r2, [r7, #22]
 8000944:	b2d2      	uxtb	r2, r2
 8000946:	701a      	strb	r2, [r3, #0]
			break;
 8000948:	e019      	b.n	800097e <DATA_LOGGER_Get_Data_Value+0x22e>
		case data_format_e16B_INT16:
			tmp_16 = *(int16_t*)data_list[id].data ;
 800094a:	7bfa      	ldrb	r2, [r7, #15]
 800094c:	4917      	ldr	r1, [pc, #92]	; (80009ac <DATA_LOGGER_Get_Data_Value+0x25c>)
 800094e:	4613      	mov	r3, r2
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	4413      	add	r3, r2
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	440b      	add	r3, r1
 8000958:	3304      	adds	r3, #4
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	881b      	ldrh	r3, [r3, #0]
 800095e:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8000960:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000964:	121b      	asrs	r3, r3, #8
 8000966:	b21a      	sxth	r2, r3
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	3301      	adds	r3, #1
 800096c:	b2d2      	uxtb	r2, r2
 800096e:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	3302      	adds	r3, #2
 8000974:	8afa      	ldrh	r2, [r7, #22]
 8000976:	b2d2      	uxtb	r2, r2
 8000978:	701a      	strb	r2, [r3, #0]
			break;
 800097a:	e000      	b.n	800097e <DATA_LOGGER_Get_Data_Value+0x22e>
		default:
			break;
 800097c:	bf00      	nop
	}
	/* Length of the data array */
	return (data_list[id].format / 20) + 1;
 800097e:	7bfa      	ldrb	r2, [r7, #15]
 8000980:	490a      	ldr	r1, [pc, #40]	; (80009ac <DATA_LOGGER_Get_Data_Value+0x25c>)
 8000982:	4613      	mov	r3, r2
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	4413      	add	r3, r2
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	440b      	add	r3, r1
 800098c:	3309      	adds	r3, #9
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	4a09      	ldr	r2, [pc, #36]	; (80009b8 <DATA_LOGGER_Get_Data_Value+0x268>)
 8000992:	fba2 2303 	umull	r2, r3, r2, r3
 8000996:	091b      	lsrs	r3, r3, #4
 8000998:	b2db      	uxtb	r3, r3
 800099a:	3301      	adds	r3, #1
 800099c:	b2db      	uxtb	r3, r3
}
 800099e:	4618      	mov	r0, r3
 80009a0:	371c      	adds	r7, #28
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	200003ac 	.word	0x200003ac
 80009b0:	42c80000 	.word	0x42c80000
 80009b4:	447a0000 	.word	0x447a0000
 80009b8:	cccccccd 	.word	0xcccccccd

080009bc <DATA_LOGGER_Get_Data_Config>:
 * @param id Id of the data
 * @param buffer Buffer array to write the configuration into
 * @return Number of bytes we wrote in the buffer
 */
uint8_t DATA_LOGGER_Get_Data_Config(data_id_e id, uint8_t * buffer)
{
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	6039      	str	r1, [r7, #0]
 80009c6:	71fb      	strb	r3, [r7, #7]
	/* We send a configuration so it must start with 0xFF */
	buffer[0] = 0xFF;
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	22ff      	movs	r2, #255	; 0xff
 80009cc:	701a      	strb	r2, [r3, #0]
	/* Then we put the length of the name */
	buffer[1] = data_list[id].len_name;
 80009ce:	79fa      	ldrb	r2, [r7, #7]
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	1c59      	adds	r1, r3, #1
 80009d4:	4828      	ldr	r0, [pc, #160]	; (8000a78 <DATA_LOGGER_Get_Data_Config+0xbc>)
 80009d6:	4613      	mov	r3, r2
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	4413      	add	r3, r2
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	4403      	add	r3, r0
 80009e0:	3310      	adds	r3, #16
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	700b      	strb	r3, [r1, #0]
	/* Then we write the data format */
	buffer[2] = data_list[id].format;
 80009e6:	79fa      	ldrb	r2, [r7, #7]
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	1c99      	adds	r1, r3, #2
 80009ec:	4822      	ldr	r0, [pc, #136]	; (8000a78 <DATA_LOGGER_Get_Data_Config+0xbc>)
 80009ee:	4613      	mov	r3, r2
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	4413      	add	r3, r2
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	4403      	add	r3, r0
 80009f8:	3309      	adds	r3, #9
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	700b      	strb	r3, [r1, #0]
	/* Then the id of the data */
	buffer[3] = id;
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	3303      	adds	r3, #3
 8000a02:	79fa      	ldrb	r2, [r7, #7]
 8000a04:	701a      	strb	r2, [r3, #0]
	/* When the data is used as output, we add 128 to the id */
	if(data_list[id].use_format == use_format_eAS_INPUT)
 8000a06:	79fa      	ldrb	r2, [r7, #7]
 8000a08:	491b      	ldr	r1, [pc, #108]	; (8000a78 <DATA_LOGGER_Get_Data_Config+0xbc>)
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	4413      	add	r3, r2
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	440b      	add	r3, r1
 8000a14:	3311      	adds	r3, #17
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	d107      	bne.n	8000a2c <DATA_LOGGER_Get_Data_Config+0x70>
	{
		buffer[3] += 128 ;
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	3303      	adds	r3, #3
 8000a20:	781a      	ldrb	r2, [r3, #0]
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	3303      	adds	r3, #3
 8000a26:	3a80      	subs	r2, #128	; 0x80
 8000a28:	b2d2      	uxtb	r2, r2
 8000a2a:	701a      	strb	r2, [r3, #0]
	}
	/* Finally we write the name */
	memcpy(&buffer[4], data_list[id].name, data_list[id].len_name);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	1d18      	adds	r0, r3, #4
 8000a30:	79fa      	ldrb	r2, [r7, #7]
 8000a32:	4911      	ldr	r1, [pc, #68]	; (8000a78 <DATA_LOGGER_Get_Data_Config+0xbc>)
 8000a34:	4613      	mov	r3, r2
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	4413      	add	r3, r2
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	440b      	add	r3, r1
 8000a3e:	330c      	adds	r3, #12
 8000a40:	6819      	ldr	r1, [r3, #0]
 8000a42:	79fa      	ldrb	r2, [r7, #7]
 8000a44:	4c0c      	ldr	r4, [pc, #48]	; (8000a78 <DATA_LOGGER_Get_Data_Config+0xbc>)
 8000a46:	4613      	mov	r3, r2
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	4413      	add	r3, r2
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	4423      	add	r3, r4
 8000a50:	3310      	adds	r3, #16
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	461a      	mov	r2, r3
 8000a56:	f006 f903 	bl	8006c60 <memcpy>

	return 4 + data_list[id].len_name ;
 8000a5a:	79fa      	ldrb	r2, [r7, #7]
 8000a5c:	4906      	ldr	r1, [pc, #24]	; (8000a78 <DATA_LOGGER_Get_Data_Config+0xbc>)
 8000a5e:	4613      	mov	r3, r2
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	4413      	add	r3, r2
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	440b      	add	r3, r1
 8000a68:	3310      	adds	r3, #16
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	3304      	adds	r3, #4
 8000a6e:	b2db      	uxtb	r3, r3
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd90      	pop	{r4, r7, pc}
 8000a78:	200003ac 	.word	0x200003ac

08000a7c <DATA_LOGGER_Get_Data>:
 * @brief Get data
 * @param id Id of the data
 * @return pointer to the data structure with the corresponding ID
 */
data_t * DATA_LOGGER_Get_Data(data_id_e id)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]
	return &data_list[id];
 8000a86:	79fa      	ldrb	r2, [r7, #7]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	4413      	add	r3, r2
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	4a03      	ldr	r2, [pc, #12]	; (8000aa0 <DATA_LOGGER_Get_Data+0x24>)
 8000a92:	4413      	add	r3, r2
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	200003ac 	.word	0x200003ac

08000aa4 <push_data_to_uart>:
 * @brief Add the start byte and checksum to a message
 * @param buffer Data array to send
 * @param len Number of bytes to send
 */
void push_data_to_uart(uint8_t * buffer, uint8_t len)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b090      	sub	sp, #64	; 0x40
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	460b      	mov	r3, r1
 8000aae:	70fb      	strb	r3, [r7, #3]
	uint8_t buffer_new[50];
	uint32_t checksum = 0 ;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
	buffer_new[0] = '$';
 8000ab4:	2324      	movs	r3, #36	; 0x24
 8000ab6:	723b      	strb	r3, [r7, #8]
	for(uint8_t b = 0; b < len; b++)
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8000abe:	e01d      	b.n	8000afc <push_data_to_uart+0x58>
	{
		buffer_new[1 + b] = buffer[b];
 8000ac0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	441a      	add	r2, r3
 8000ac8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000acc:	3301      	adds	r3, #1
 8000ace:	7812      	ldrb	r2, [r2, #0]
 8000ad0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000ad4:	440b      	add	r3, r1
 8000ad6:	f803 2c38 	strb.w	r2, [r3, #-56]
		checksum += (uint32_t)buffer_new[1 + b];
 8000ada:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000ade:	3301      	adds	r3, #1
 8000ae0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000ae4:	4413      	add	r3, r2
 8000ae6:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8000aea:	461a      	mov	r2, r3
 8000aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000aee:	4413      	add	r3, r2
 8000af0:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(uint8_t b = 0; b < len; b++)
 8000af2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000af6:	3301      	adds	r3, #1
 8000af8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8000afc:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8000b00:	78fb      	ldrb	r3, [r7, #3]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d3dc      	bcc.n	8000ac0 <push_data_to_uart+0x1c>
	}
	buffer_new[1 + len] = (uint8_t)(checksum % 256) ;
 8000b06:	78fb      	ldrb	r3, [r7, #3]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000b0c:	b2d2      	uxtb	r2, r2
 8000b0e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000b12:	440b      	add	r3, r1
 8000b14:	f803 2c38 	strb.w	r2, [r3, #-56]
	UART_Transmit(uart_eTELEMETRY, buffer_new, len+2);
 8000b18:	78fb      	ldrb	r3, [r7, #3]
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	3302      	adds	r3, #2
 8000b1e:	b29a      	uxth	r2, r3
 8000b20:	f107 0308 	add.w	r3, r7, #8
 8000b24:	4619      	mov	r1, r3
 8000b26:	2000      	movs	r0, #0
 8000b28:	f001 f810 	bl	8001b4c <UART_Transmit>
}
 8000b2c:	bf00      	nop
 8000b2e:	3740      	adds	r7, #64	; 0x40
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <state_machine>:

/*
 * @brief data logger state machine
 */
static void state_machine(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
	static data_logger_state_e state = data_logger_state_eIDLE;
	static data_logger_state_e previous_state = data_logger_state_eTRANSMIT_CONFIG ;
	bool_e entrance = previous_state != state ;
 8000b3a:	4b74      	ldr	r3, [pc, #464]	; (8000d0c <state_machine+0x1d8>)
 8000b3c:	781a      	ldrb	r2, [r3, #0]
 8000b3e:	4b74      	ldr	r3, [pc, #464]	; (8000d10 <state_machine+0x1dc>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	bf14      	ite	ne
 8000b46:	2301      	movne	r3, #1
 8000b48:	2300      	moveq	r3, #0
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	71bb      	strb	r3, [r7, #6]
	previous_state = state ;
 8000b4e:	4b70      	ldr	r3, [pc, #448]	; (8000d10 <state_machine+0x1dc>)
 8000b50:	781a      	ldrb	r2, [r3, #0]
 8000b52:	4b6e      	ldr	r3, [pc, #440]	; (8000d0c <state_machine+0x1d8>)
 8000b54:	701a      	strb	r2, [r3, #0]
	switch(state)
 8000b56:	4b6e      	ldr	r3, [pc, #440]	; (8000d10 <state_machine+0x1dc>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b02      	cmp	r3, #2
 8000b5c:	f000 8092 	beq.w	8000c84 <state_machine+0x150>
 8000b60:	2b02      	cmp	r3, #2
 8000b62:	f300 80ce 	bgt.w	8000d02 <state_machine+0x1ce>
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d002      	beq.n	8000b70 <state_machine+0x3c>
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d043      	beq.n	8000bf6 <state_machine+0xc2>
					push_data_to_uart(tmp, tmp_len);
				}
			}
			break;
	}
}
 8000b6e:	e0c8      	b.n	8000d02 <state_machine+0x1ce>
			if(entrance)
 8000b70:	79bb      	ldrb	r3, [r7, #6]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d003      	beq.n	8000b7e <state_machine+0x4a>
				SCHEDULER_reschedule_task(task_ids_eDATA_LOGGER, PERIODE_PING);
 8000b76:	4967      	ldr	r1, [pc, #412]	; (8000d14 <state_machine+0x1e0>)
 8000b78:	2002      	movs	r0, #2
 8000b7a:	f000 fb25 	bl	80011c8 <SCHEDULER_reschedule_task>
			tmp_len = DATA_LOGGER_Get_Data_Config(data_id_eCONFIG_REQUEST, tmp);
 8000b7e:	4966      	ldr	r1, [pc, #408]	; (8000d18 <state_machine+0x1e4>)
 8000b80:	2000      	movs	r0, #0
 8000b82:	f7ff ff1b 	bl	80009bc <DATA_LOGGER_Get_Data_Config>
 8000b86:	4603      	mov	r3, r0
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b64      	ldr	r3, [pc, #400]	; (8000d1c <state_machine+0x1e8>)
 8000b8c:	701a      	strb	r2, [r3, #0]
			push_data_to_uart(tmp, tmp_len);
 8000b8e:	4b63      	ldr	r3, [pc, #396]	; (8000d1c <state_machine+0x1e8>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	4619      	mov	r1, r3
 8000b94:	4860      	ldr	r0, [pc, #384]	; (8000d18 <state_machine+0x1e4>)
 8000b96:	f7ff ff85 	bl	8000aa4 <push_data_to_uart>
			if(send_config_flag)
 8000b9a:	4b61      	ldr	r3, [pc, #388]	; (8000d20 <state_machine+0x1ec>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d01a      	beq.n	8000bd8 <state_machine+0xa4>
				start_flag = FALSE;
 8000ba2:	4b60      	ldr	r3, [pc, #384]	; (8000d24 <state_machine+0x1f0>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	701a      	strb	r2, [r3, #0]
				stop_flag = FALSE;
 8000ba8:	4b5f      	ldr	r3, [pc, #380]	; (8000d28 <state_machine+0x1f4>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	701a      	strb	r2, [r3, #0]
				send_config_flag = FALSE;
 8000bae:	4b5c      	ldr	r3, [pc, #368]	; (8000d20 <state_machine+0x1ec>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	701a      	strb	r2, [r3, #0]
				if(config_not_sent)
 8000bb4:	4b5d      	ldr	r3, [pc, #372]	; (8000d2c <state_machine+0x1f8>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d009      	beq.n	8000bd0 <state_machine+0x9c>
					id_init_counter = 0;
 8000bbc:	4b5c      	ldr	r3, [pc, #368]	; (8000d30 <state_machine+0x1fc>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
					is_any_data_used = FALSE;
 8000bc2:	4b5c      	ldr	r3, [pc, #368]	; (8000d34 <state_machine+0x200>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
					state = data_logger_state_eTRANSMIT_CONFIG;
 8000bc8:	4b51      	ldr	r3, [pc, #324]	; (8000d10 <state_machine+0x1dc>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	701a      	strb	r2, [r3, #0]
			break;
 8000bce:	e097      	b.n	8000d00 <state_machine+0x1cc>
					state = data_logger_state_eLOG;
 8000bd0:	4b4f      	ldr	r3, [pc, #316]	; (8000d10 <state_machine+0x1dc>)
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	701a      	strb	r2, [r3, #0]
			break;
 8000bd6:	e093      	b.n	8000d00 <state_machine+0x1cc>
			else if(start_flag)
 8000bd8:	4b52      	ldr	r3, [pc, #328]	; (8000d24 <state_machine+0x1f0>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	f000 808f 	beq.w	8000d00 <state_machine+0x1cc>
				start_flag = FALSE;
 8000be2:	4b50      	ldr	r3, [pc, #320]	; (8000d24 <state_machine+0x1f0>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	701a      	strb	r2, [r3, #0]
				stop_flag = FALSE;
 8000be8:	4b4f      	ldr	r3, [pc, #316]	; (8000d28 <state_machine+0x1f4>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	701a      	strb	r2, [r3, #0]
				state = data_logger_state_eLOG;
 8000bee:	4b48      	ldr	r3, [pc, #288]	; (8000d10 <state_machine+0x1dc>)
 8000bf0:	2202      	movs	r2, #2
 8000bf2:	701a      	strb	r2, [r3, #0]
			break;
 8000bf4:	e084      	b.n	8000d00 <state_machine+0x1cc>
			if(entrance)
 8000bf6:	79bb      	ldrb	r3, [r7, #6]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d00a      	beq.n	8000c12 <state_machine+0xde>
				SCHEDULER_reschedule_task(task_ids_eDATA_LOGGER, PERIODE_CONFIG_SEND);
 8000bfc:	494e      	ldr	r1, [pc, #312]	; (8000d38 <state_machine+0x204>)
 8000bfe:	2002      	movs	r0, #2
 8000c00:	f000 fae2 	bl	80011c8 <SCHEDULER_reschedule_task>
			while(data_list[id_init_counter].use_format == use_format_eNOT_USED && id_init_counter < data_id_eCOUNT)
 8000c04:	e005      	b.n	8000c12 <state_machine+0xde>
				id_init_counter ++ ;
 8000c06:	4b4a      	ldr	r3, [pc, #296]	; (8000d30 <state_machine+0x1fc>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	4b48      	ldr	r3, [pc, #288]	; (8000d30 <state_machine+0x1fc>)
 8000c10:	701a      	strb	r2, [r3, #0]
			while(data_list[id_init_counter].use_format == use_format_eNOT_USED && id_init_counter < data_id_eCOUNT)
 8000c12:	4b47      	ldr	r3, [pc, #284]	; (8000d30 <state_machine+0x1fc>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	4619      	mov	r1, r3
 8000c18:	4a48      	ldr	r2, [pc, #288]	; (8000d3c <state_machine+0x208>)
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	440b      	add	r3, r1
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	4413      	add	r3, r2
 8000c24:	3311      	adds	r3, #17
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d103      	bne.n	8000c34 <state_machine+0x100>
 8000c2c:	4b40      	ldr	r3, [pc, #256]	; (8000d30 <state_machine+0x1fc>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b03      	cmp	r3, #3
 8000c32:	d9e8      	bls.n	8000c06 <state_machine+0xd2>
			if(id_init_counter < data_id_eCOUNT)
 8000c34:	4b3e      	ldr	r3, [pc, #248]	; (8000d30 <state_machine+0x1fc>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b03      	cmp	r3, #3
 8000c3a:	d817      	bhi.n	8000c6c <state_machine+0x138>
				is_any_data_used = TRUE;
 8000c3c:	4b3d      	ldr	r3, [pc, #244]	; (8000d34 <state_machine+0x200>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	701a      	strb	r2, [r3, #0]
				tmp_len = DATA_LOGGER_Get_Data_Config(id_init_counter++, tmp);
 8000c42:	4b3b      	ldr	r3, [pc, #236]	; (8000d30 <state_machine+0x1fc>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	1c5a      	adds	r2, r3, #1
 8000c48:	b2d1      	uxtb	r1, r2
 8000c4a:	4a39      	ldr	r2, [pc, #228]	; (8000d30 <state_machine+0x1fc>)
 8000c4c:	7011      	strb	r1, [r2, #0]
 8000c4e:	4932      	ldr	r1, [pc, #200]	; (8000d18 <state_machine+0x1e4>)
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff feb3 	bl	80009bc <DATA_LOGGER_Get_Data_Config>
 8000c56:	4603      	mov	r3, r0
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4b30      	ldr	r3, [pc, #192]	; (8000d1c <state_machine+0x1e8>)
 8000c5c:	701a      	strb	r2, [r3, #0]
				push_data_to_uart(tmp, tmp_len);
 8000c5e:	4b2f      	ldr	r3, [pc, #188]	; (8000d1c <state_machine+0x1e8>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	4619      	mov	r1, r3
 8000c64:	482c      	ldr	r0, [pc, #176]	; (8000d18 <state_machine+0x1e4>)
 8000c66:	f7ff ff1d 	bl	8000aa4 <push_data_to_uart>
			break;
 8000c6a:	e04a      	b.n	8000d02 <state_machine+0x1ce>
				if(is_any_data_used)
 8000c6c:	4b31      	ldr	r3, [pc, #196]	; (8000d34 <state_machine+0x200>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d003      	beq.n	8000c7c <state_machine+0x148>
					state = data_logger_state_eLOG ;
 8000c74:	4b26      	ldr	r3, [pc, #152]	; (8000d10 <state_machine+0x1dc>)
 8000c76:	2202      	movs	r2, #2
 8000c78:	701a      	strb	r2, [r3, #0]
			break;
 8000c7a:	e042      	b.n	8000d02 <state_machine+0x1ce>
					state = data_logger_state_eIDLE ;
 8000c7c:	4b24      	ldr	r3, [pc, #144]	; (8000d10 <state_machine+0x1dc>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	701a      	strb	r2, [r3, #0]
			break;
 8000c82:	e03e      	b.n	8000d02 <state_machine+0x1ce>
			if(entrance)
 8000c84:	79bb      	ldrb	r3, [r7, #6]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d004      	beq.n	8000c94 <state_machine+0x160>
				SCHEDULER_reschedule_task(task_ids_eDATA_LOGGER, PERIODE_SEND);
 8000c8a:	f242 7110 	movw	r1, #10000	; 0x2710
 8000c8e:	2002      	movs	r0, #2
 8000c90:	f000 fa9a 	bl	80011c8 <SCHEDULER_reschedule_task>
			if(stop_flag)
 8000c94:	4b24      	ldr	r3, [pc, #144]	; (8000d28 <state_machine+0x1f4>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d002      	beq.n	8000ca2 <state_machine+0x16e>
				state = data_logger_state_eIDLE;
 8000c9c:	4b1c      	ldr	r3, [pc, #112]	; (8000d10 <state_machine+0x1dc>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	701a      	strb	r2, [r3, #0]
			for(uint8_t d = 0; d < data_id_eCOUNT; d++)
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	71fb      	strb	r3, [r7, #7]
 8000ca6:	e027      	b.n	8000cf8 <state_machine+0x1c4>
				if(data_list[d].use_format == use_format_eAS_OUTPUT && (data_list[d].data != NULL))
 8000ca8:	79fa      	ldrb	r2, [r7, #7]
 8000caa:	4924      	ldr	r1, [pc, #144]	; (8000d3c <state_machine+0x208>)
 8000cac:	4613      	mov	r3, r2
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	4413      	add	r3, r2
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	440b      	add	r3, r1
 8000cb6:	3311      	adds	r3, #17
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d119      	bne.n	8000cf2 <state_machine+0x1be>
 8000cbe:	79fa      	ldrb	r2, [r7, #7]
 8000cc0:	491e      	ldr	r1, [pc, #120]	; (8000d3c <state_machine+0x208>)
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	4413      	add	r3, r2
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	440b      	add	r3, r1
 8000ccc:	3304      	adds	r3, #4
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d00e      	beq.n	8000cf2 <state_machine+0x1be>
					tmp_len = DATA_LOGGER_Get_Data_Value(d, tmp);
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	4910      	ldr	r1, [pc, #64]	; (8000d18 <state_machine+0x1e4>)
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fd39 	bl	8000750 <DATA_LOGGER_Get_Data_Value>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <state_machine+0x1e8>)
 8000ce4:	701a      	strb	r2, [r3, #0]
					push_data_to_uart(tmp, tmp_len);
 8000ce6:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <state_machine+0x1e8>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	4619      	mov	r1, r3
 8000cec:	480a      	ldr	r0, [pc, #40]	; (8000d18 <state_machine+0x1e4>)
 8000cee:	f7ff fed9 	bl	8000aa4 <push_data_to_uart>
			for(uint8_t d = 0; d < data_id_eCOUNT; d++)
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	71fb      	strb	r3, [r7, #7]
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	2b03      	cmp	r3, #3
 8000cfc:	d9d4      	bls.n	8000ca8 <state_machine+0x174>
			break;
 8000cfe:	e000      	b.n	8000d02 <state_machine+0x1ce>
			break;
 8000d00:	bf00      	nop
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000001 	.word	0x20000001
 8000d10:	20000435 	.word	0x20000435
 8000d14:	0007a120 	.word	0x0007a120
 8000d18:	20000400 	.word	0x20000400
 8000d1c:	20000432 	.word	0x20000432
 8000d20:	200003fd 	.word	0x200003fd
 8000d24:	200003fc 	.word	0x200003fc
 8000d28:	200003fe 	.word	0x200003fe
 8000d2c:	20000000 	.word	0x20000000
 8000d30:	20000433 	.word	0x20000433
 8000d34:	20000434 	.word	0x20000434
 8000d38:	000186a0 	.word	0x000186a0
 8000d3c:	200003ac 	.word	0x200003ac

08000d40 <parse_uart>:

/*
 * @brief Parse incoming bytes
 */
static void parse_uart(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
	static uint8_t trame[20] = { 0 };
	static uint8_t nb_byte_to_buffer = 0;
	static uint8_t buffer_counter = 0;
	static uint16_t checksum = 0;
	/* Check for available data */
	if(UART_Availables(uart_eTELEMETRY))
 8000d46:	2000      	movs	r0, #0
 8000d48:	f000 fe5c 	bl	8001a04 <UART_Availables>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d06c      	beq.n	8000e2c <parse_uart+0xec>
	{
		uint8_t c;
		UART_Get(uart_eTELEMETRY, &c);
 8000d52:	1dfb      	adds	r3, r7, #7
 8000d54:	4619      	mov	r1, r3
 8000d56:	2000      	movs	r0, #0
 8000d58:	f000 fe62 	bl	8001a20 <UART_Get>
		switch(state)
 8000d5c:	4b35      	ldr	r3, [pc, #212]	; (8000e34 <parse_uart+0xf4>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b03      	cmp	r3, #3
 8000d62:	d863      	bhi.n	8000e2c <parse_uart+0xec>
 8000d64:	a201      	add	r2, pc, #4	; (adr r2, 8000d6c <parse_uart+0x2c>)
 8000d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d6a:	bf00      	nop
 8000d6c:	08000d7d 	.word	0x08000d7d
 8000d70:	08000d8b 	.word	0x08000d8b
 8000d74:	08000dd1 	.word	0x08000dd1
 8000d78:	08000e09 	.word	0x08000e09
		{
			case parser_state_eSTART_BYTE:
				if(c == '$')
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	2b24      	cmp	r3, #36	; 0x24
 8000d80:	d14f      	bne.n	8000e22 <parse_uart+0xe2>
				{
					state = parser_state_eID;
 8000d82:	4b2c      	ldr	r3, [pc, #176]	; (8000e34 <parse_uart+0xf4>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000d88:	e04b      	b.n	8000e22 <parse_uart+0xe2>

			case parser_state_eID:
				if(c < data_id_eCOUNT)
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	2b03      	cmp	r3, #3
 8000d8e:	d84a      	bhi.n	8000e26 <parse_uart+0xe6>
				{
					/* Store the id for later use */
					trame[0] = c;
 8000d90:	79fa      	ldrb	r2, [r7, #7]
 8000d92:	4b29      	ldr	r3, [pc, #164]	; (8000e38 <parse_uart+0xf8>)
 8000d94:	701a      	strb	r2, [r3, #0]
					/* Reset the checksum */
					checksum = c;
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	4b28      	ldr	r3, [pc, #160]	; (8000e3c <parse_uart+0xfc>)
 8000d9c:	801a      	strh	r2, [r3, #0]
					/* Get the data length according to the data format */
					nb_byte_to_buffer = (DATA_LOGGER_Get_Data(c)->format / 20);
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fe6b 	bl	8000a7c <DATA_LOGGER_Get_Data>
 8000da6:	4603      	mov	r3, r0
 8000da8:	7a5b      	ldrb	r3, [r3, #9]
 8000daa:	4a25      	ldr	r2, [pc, #148]	; (8000e40 <parse_uart+0x100>)
 8000dac:	fba2 2303 	umull	r2, r3, r2, r3
 8000db0:	091b      	lsrs	r3, r3, #4
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	4b23      	ldr	r3, [pc, #140]	; (8000e44 <parse_uart+0x104>)
 8000db6:	701a      	strb	r2, [r3, #0]
					if(nb_byte_to_buffer)
 8000db8:	4b22      	ldr	r3, [pc, #136]	; (8000e44 <parse_uart+0x104>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d003      	beq.n	8000dc8 <parse_uart+0x88>
					{
						state = parser_state_eDATA;
 8000dc0:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <parse_uart+0xf4>)
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	701a      	strb	r2, [r3, #0]
					else
					{
						state = parser_state_eCHECKSUM;
					}
				}
				break;
 8000dc6:	e02e      	b.n	8000e26 <parse_uart+0xe6>
						state = parser_state_eCHECKSUM;
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <parse_uart+0xf4>)
 8000dca:	2203      	movs	r2, #3
 8000dcc:	701a      	strb	r2, [r3, #0]
				break;
 8000dce:	e02a      	b.n	8000e26 <parse_uart+0xe6>
			case parser_state_eDATA:
				trame[1+buffer_counter++] = c;
 8000dd0:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <parse_uart+0x108>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	1c5a      	adds	r2, r3, #1
 8000dd6:	b2d1      	uxtb	r1, r2
 8000dd8:	4a1b      	ldr	r2, [pc, #108]	; (8000e48 <parse_uart+0x108>)
 8000dda:	7011      	strb	r1, [r2, #0]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	79f9      	ldrb	r1, [r7, #7]
 8000de0:	4a15      	ldr	r2, [pc, #84]	; (8000e38 <parse_uart+0xf8>)
 8000de2:	54d1      	strb	r1, [r2, r3]
				checksum += c;
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <parse_uart+0xfc>)
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	4413      	add	r3, r2
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <parse_uart+0xfc>)
 8000df2:	801a      	strh	r2, [r3, #0]
				if(buffer_counter == nb_byte_to_buffer)
 8000df4:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <parse_uart+0x108>)
 8000df6:	781a      	ldrb	r2, [r3, #0]
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <parse_uart+0x104>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d114      	bne.n	8000e2a <parse_uart+0xea>
				{
					state = parser_state_eCHECKSUM;
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <parse_uart+0xf4>)
 8000e02:	2203      	movs	r2, #3
 8000e04:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000e06:	e010      	b.n	8000e2a <parse_uart+0xea>
			case parser_state_eCHECKSUM:
				if(checksum == c)
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <parse_uart+0xfc>)
 8000e0e:	881b      	ldrh	r3, [r3, #0]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d102      	bne.n	8000e1a <parse_uart+0xda>
				{
					DATA_LOGGER_Reception(trame);
 8000e14:	4808      	ldr	r0, [pc, #32]	; (8000e38 <parse_uart+0xf8>)
 8000e16:	f7ff fbe1 	bl	80005dc <DATA_LOGGER_Reception>
				}
				state = parser_state_eSTART_BYTE;
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <parse_uart+0xf4>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	701a      	strb	r2, [r3, #0]
				break;
 8000e20:	e004      	b.n	8000e2c <parse_uart+0xec>
				break;
 8000e22:	bf00      	nop
 8000e24:	e002      	b.n	8000e2c <parse_uart+0xec>
				break;
 8000e26:	bf00      	nop
 8000e28:	e000      	b.n	8000e2c <parse_uart+0xec>
				break;
 8000e2a:	bf00      	nop


		}
	}

}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000436 	.word	0x20000436
 8000e38:	20000438 	.word	0x20000438
 8000e3c:	2000044c 	.word	0x2000044c
 8000e40:	cccccccd 	.word	0xcccccccd
 8000e44:	2000044e 	.word	0x2000044e
 8000e48:	2000044f 	.word	0x2000044f

08000e4c <EVENT_process>:

/*
 * @brief check if any event has been triggered
 * @param test_all False to test only low level events
 */
void EVENT_process(bool_e test_all){
 8000e4c:	b590      	push	{r4, r7, lr}
 8000e4e:	b087      	sub	sp, #28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	71fb      	strb	r3, [r7, #7]
	if(new_flag)
 8000e56:	4b42      	ldr	r3, [pc, #264]	; (8000f60 <EVENT_process+0x114>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d07a      	beq.n	8000f56 <EVENT_process+0x10a>
	{
		new_flag = FALSE;
 8000e60:	4b3f      	ldr	r3, [pc, #252]	; (8000f60 <EVENT_process+0x114>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	701a      	strb	r2, [r3, #0]
		/* Number of events to test */
		uint8_t max = EVENT_LOW_LVL_COUNT ;
 8000e66:	2300      	movs	r3, #0
 8000e68:	75fb      	strb	r3, [r7, #23]
		if(test_all)
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <EVENT_process+0x28>
		{
			max = EVENT_COUNT ;
 8000e70:	2301      	movs	r3, #1
 8000e72:	75fb      	strb	r3, [r7, #23]
		}

		/* For each events */
		for(uint32_t e = 0; e < max; e ++)
 8000e74:	2300      	movs	r3, #0
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	e069      	b.n	8000f4e <EVENT_process+0x102>
		{

			uint32_t m = 0 ;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
			bool_e function_did_run_once = FALSE ;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	72fb      	strb	r3, [r7, #11]

			/* For each masks */
			while(m < events_main[e].nb_mask && !function_did_run_once && events_main[e].state == event_state_eENABLED)
 8000e82:	e049      	b.n	8000f18 <EVENT_process+0xcc>
			{
				if(Mask_test_and(events_main[e].mask_and[m], flags))			/* Mask "and" test */
 8000e84:	4837      	ldr	r0, [pc, #220]	; (8000f64 <EVENT_process+0x118>)
 8000e86:	4938      	ldr	r1, [pc, #224]	; (8000f68 <EVENT_process+0x11c>)
 8000e88:	68fa      	ldr	r2, [r7, #12]
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	00d2      	lsls	r2, r2, #3
 8000e8e:	24b4      	movs	r4, #180	; 0xb4
 8000e90:	fb04 f303 	mul.w	r3, r4, r3
 8000e94:	4413      	add	r3, r2
 8000e96:	4419      	add	r1, r3
 8000e98:	e890 000c 	ldmia.w	r0, {r2, r3}
 8000e9c:	c903      	ldmia	r1, {r0, r1}
 8000e9e:	f000 f865 	bl	8000f6c <Mask_test_and>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d034      	beq.n	8000f12 <EVENT_process+0xc6>
				{
					if(Mask_test_or(events_main[e].mask_or[m], flags))			/* Mask "or" test */
 8000ea8:	482e      	ldr	r0, [pc, #184]	; (8000f64 <EVENT_process+0x118>)
 8000eaa:	492f      	ldr	r1, [pc, #188]	; (8000f68 <EVENT_process+0x11c>)
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	1dda      	adds	r2, r3, #7
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	00d2      	lsls	r2, r2, #3
 8000eb4:	24b4      	movs	r4, #180	; 0xb4
 8000eb6:	fb04 f303 	mul.w	r3, r4, r3
 8000eba:	4413      	add	r3, r2
 8000ebc:	4419      	add	r1, r3
 8000ebe:	e890 000c 	ldmia.w	r0, {r2, r3}
 8000ec2:	c903      	ldmia	r1, {r0, r1}
 8000ec4:	f000 f885 	bl	8000fd2 <Mask_test_or>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d021      	beq.n	8000f12 <EVENT_process+0xc6>
					{
						if(!Mask_test_or(events_main[e].mask_not[m], flags))	/* Mask "not" test */
 8000ece:	4825      	ldr	r0, [pc, #148]	; (8000f64 <EVENT_process+0x118>)
 8000ed0:	4925      	ldr	r1, [pc, #148]	; (8000f68 <EVENT_process+0x11c>)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f103 020e 	add.w	r2, r3, #14
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	00d2      	lsls	r2, r2, #3
 8000edc:	24b4      	movs	r4, #180	; 0xb4
 8000ede:	fb04 f303 	mul.w	r3, r4, r3
 8000ee2:	4413      	add	r3, r2
 8000ee4:	4419      	add	r1, r3
 8000ee6:	e890 000c 	ldmia.w	r0, {r2, r3}
 8000eea:	c903      	ldmia	r1, {r0, r1}
 8000eec:	f000 f871 	bl	8000fd2 <Mask_test_or>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d10d      	bne.n	8000f12 <EVENT_process+0xc6>
						{
							events_main[e].function(m);
 8000ef6:	4a1c      	ldr	r2, [pc, #112]	; (8000f68 <EVENT_process+0x11c>)
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	21b4      	movs	r1, #180	; 0xb4
 8000efc:	fb01 f303 	mul.w	r3, r1, r3
 8000f00:	4413      	add	r3, r2
 8000f02:	33b0      	adds	r3, #176	; 0xb0
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	4610      	mov	r0, r2
 8000f0c:	4798      	blx	r3
							function_did_run_once = TRUE ;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	72fb      	strb	r3, [r7, #11]
						}
					}
				}
				m++ ;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	3301      	adds	r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
			while(m < events_main[e].nb_mask && !function_did_run_once && events_main[e].state == event_state_eENABLED)
 8000f18:	4a13      	ldr	r2, [pc, #76]	; (8000f68 <EVENT_process+0x11c>)
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	21b4      	movs	r1, #180	; 0xb4
 8000f1e:	fb01 f303 	mul.w	r3, r1, r3
 8000f22:	4413      	add	r3, r2
 8000f24:	33a8      	adds	r3, #168	; 0xa8
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	68fa      	ldr	r2, [r7, #12]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d20c      	bcs.n	8000f48 <EVENT_process+0xfc>
 8000f2e:	7afb      	ldrb	r3, [r7, #11]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d109      	bne.n	8000f48 <EVENT_process+0xfc>
 8000f34:	4a0c      	ldr	r2, [pc, #48]	; (8000f68 <EVENT_process+0x11c>)
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	21b4      	movs	r1, #180	; 0xb4
 8000f3a:	fb01 f303 	mul.w	r3, r1, r3
 8000f3e:	4413      	add	r3, r2
 8000f40:	33ac      	adds	r3, #172	; 0xac
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d09d      	beq.n	8000e84 <EVENT_process+0x38>
		for(uint32_t e = 0; e < max; e ++)
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	613b      	str	r3, [r7, #16]
 8000f4e:	7dfb      	ldrb	r3, [r7, #23]
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d391      	bcc.n	8000e7a <EVENT_process+0x2e>
			}
		}
	}
}
 8000f56:	bf00      	nop
 8000f58:	371c      	adds	r7, #28
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd90      	pop	{r4, r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000458 	.word	0x20000458
 8000f64:	20000450 	.word	0x20000450
 8000f68:	2000045c 	.word	0x2000045c

08000f6c <Mask_test_and>:
 * @param mask_test The test mask
 * @param mask_ref The ref mask
 * @return True ...
 */
bool_e Mask_test_and(Mask_t mask_test, Mask_t mask_ref)
{
 8000f6c:	b490      	push	{r4, r7}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	f107 0408 	add.w	r4, r7, #8
 8000f76:	e884 0003 	stmia.w	r4, {r0, r1}
 8000f7a:	4639      	mov	r1, r7
 8000f7c:	e881 000c 	stmia.w	r1, {r2, r3}
	for(uint32_t m = 0; m < NB_ARRAY_MASK; m++)
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	e01c      	b.n	8000fc0 <Mask_test_and+0x54>
	{
		if((mask_test.array[m] & mask_ref.array[m]) != mask_test.array[m])
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	f107 0218 	add.w	r2, r7, #24
 8000f8e:	4413      	add	r3, r2
 8000f90:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	f107 0118 	add.w	r1, r7, #24
 8000f9c:	440b      	add	r3, r1
 8000f9e:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	f107 0118 	add.w	r1, r7, #24
 8000fac:	440b      	add	r3, r1
 8000fae:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d001      	beq.n	8000fba <Mask_test_and+0x4e>
		{
			return FALSE ;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e006      	b.n	8000fc8 <Mask_test_and+0x5c>
	for(uint32_t m = 0; m < NB_ARRAY_MASK; m++)
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d9df      	bls.n	8000f86 <Mask_test_and+0x1a>
		}
	}
	return TRUE ;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc90      	pop	{r4, r7}
 8000fd0:	4770      	bx	lr

08000fd2 <Mask_test_or>:
 * @brief Check if one of the bit in the ref_mask is in the test_mask
 * @param mask_test The test mask
 * @param mask_ref The ref mask
 * @return True if we found one corresponding bit
 */
bool_e Mask_test_or(Mask_t mask_test, Mask_t mask_ref){
 8000fd2:	b490      	push	{r4, r7}
 8000fd4:	b086      	sub	sp, #24
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	f107 0408 	add.w	r4, r7, #8
 8000fdc:	e884 0003 	stmia.w	r4, {r0, r1}
 8000fe0:	4639      	mov	r1, r7
 8000fe2:	e881 000c 	stmia.w	r1, {r2, r3}
	bool_e to_return = FALSE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	75fb      	strb	r3, [r7, #23]
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	e015      	b.n	800101c <Mask_test_or+0x4a>
	{
		if(mask_test.array[m] & mask_ref.array[m])
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	f107 0218 	add.w	r2, r7, #24
 8000ff8:	4413      	add	r3, r2
 8000ffa:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	f107 0118 	add.w	r1, r7, #24
 8001006:	440b      	add	r3, r1
 8001008:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800100c:	4013      	ands	r3, r2
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <Mask_test_or+0x44>
		{
			to_return = TRUE;
 8001012:	2301      	movs	r3, #1
 8001014:	75fb      	strb	r3, [r7, #23]
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	3301      	adds	r3, #1
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	2b01      	cmp	r3, #1
 8001020:	dde6      	ble.n	8000ff0 <Mask_test_or+0x1e>
		}
	}
	return to_return ;
 8001022:	7dfb      	ldrb	r3, [r7, #23]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bc90      	pop	{r4, r7}
 800102c:	4770      	bx	lr
	...

08001030 <SCHEDULER_init>:
/*
 * @brief Must be called after TASK_init function
 * 	      Store the pointer to the scheduler and event task to buy time
 */
void SCHEDULER_init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	task_scheduler = TASK_get_task(task_ids_eSCHEDULER);
 8001034:	2000      	movs	r0, #0
 8001036:	f000 fb05 	bl	8001644 <TASK_get_task>
 800103a:	4603      	mov	r3, r0
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <SCHEDULER_init+0x20>)
 800103e:	6013      	str	r3, [r2, #0]
	task_event = TASK_get_task(task_ids_eEVENTS);
 8001040:	2001      	movs	r0, #1
 8001042:	f000 faff 	bl	8001644 <TASK_get_task>
 8001046:	4603      	mov	r3, r0
 8001048:	4a02      	ldr	r2, [pc, #8]	; (8001054 <SCHEDULER_init+0x24>)
 800104a:	6013      	str	r3, [r2, #0]
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000540 	.word	0x20000540
 8001054:	20000544 	.word	0x20000544

08001058 <SCHEDULER_run>:

/*
 * @brief It calls tasks one after another according to their priorities and current modes
 */
void SCHEDULER_run(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
	uint32_t current_time_us = TIME_us();
 800105e:	f000 fb05 	bl	800166c <TIME_us>
 8001062:	60f8      	str	r0, [r7, #12]
	task_t * task = get_first_task();
 8001064:	f000 f8c2 	bl	80011ec <get_first_task>
 8001068:	60b8      	str	r0, [r7, #8]
	bool_e task_executed = FALSE ;
 800106a:	2300      	movs	r3, #0
 800106c:	71fb      	strb	r3, [r7, #7]
	while(task_queu_position < task_queu_size && task != NULL)
 800106e:	e04d      	b.n	800110c <SCHEDULER_run+0xb4>
	{

		switch(task->mode)
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	789b      	ldrb	r3, [r3, #2]
 8001074:	2b03      	cmp	r3, #3
 8001076:	d006      	beq.n	8001086 <SCHEDULER_run+0x2e>
 8001078:	2b03      	cmp	r3, #3
 800107a:	dc32      	bgt.n	80010e2 <SCHEDULER_run+0x8a>
 800107c:	2b01      	cmp	r3, #1
 800107e:	d00a      	beq.n	8001096 <SCHEDULER_run+0x3e>
 8001080:	2b02      	cmp	r3, #2
 8001082:	d023      	beq.n	80010cc <SCHEDULER_run+0x74>
				task->mode = task_mode_eWAIT ;
				break;
			case task_mode_eTIMMER :
			case task_mode_eWAIT:
			default:
				break;
 8001084:	e02d      	b.n	80010e2 <SCHEDULER_run+0x8a>
				current_time_us = task_process(task, current_time_us);
 8001086:	68f9      	ldr	r1, [r7, #12]
 8001088:	68b8      	ldr	r0, [r7, #8]
 800108a:	f000 f8d5 	bl	8001238 <task_process>
 800108e:	60f8      	str	r0, [r7, #12]
				task_executed = TRUE ;
 8001090:	2301      	movs	r3, #1
 8001092:	71fb      	strb	r3, [r7, #7]
				break;
 8001094:	e028      	b.n	80010e8 <SCHEDULER_run+0x90>
				if(current_time_us >= task->desired_next_start_us){
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	6a1b      	ldr	r3, [r3, #32]
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	429a      	cmp	r2, r3
 800109e:	d322      	bcc.n	80010e6 <SCHEDULER_run+0x8e>
					current_time_us = task_process(task, current_time_us);
 80010a0:	68f9      	ldr	r1, [r7, #12]
 80010a2:	68b8      	ldr	r0, [r7, #8]
 80010a4:	f000 f8c8 	bl	8001238 <task_process>
 80010a8:	60f8      	str	r0, [r7, #12]
					task->desired_next_start_us = task->desired_period_us - (int32_t)task->lag_average + current_time_us ;
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	edd2 7a02 	vldr	s15, [r2, #8]
 80010b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010b8:	ee17 2a90 	vmov	r2, s15
 80010bc:	1a9a      	subs	r2, r3, r2
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	441a      	add	r2, r3
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	621a      	str	r2, [r3, #32]
					task_executed = TRUE ;
 80010c6:	2301      	movs	r3, #1
 80010c8:	71fb      	strb	r3, [r7, #7]
				break;
 80010ca:	e00c      	b.n	80010e6 <SCHEDULER_run+0x8e>
				current_time_us = task_process(task, current_time_us);
 80010cc:	68f9      	ldr	r1, [r7, #12]
 80010ce:	68b8      	ldr	r0, [r7, #8]
 80010d0:	f000 f8b2 	bl	8001238 <task_process>
 80010d4:	60f8      	str	r0, [r7, #12]
				task_executed = TRUE ;
 80010d6:	2301      	movs	r3, #1
 80010d8:	71fb      	strb	r3, [r7, #7]
				task->mode = task_mode_eWAIT ;
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	2200      	movs	r2, #0
 80010de:	709a      	strb	r2, [r3, #2]
				break;
 80010e0:	e002      	b.n	80010e8 <SCHEDULER_run+0x90>
				break;
 80010e2:	bf00      	nop
 80010e4:	e000      	b.n	80010e8 <SCHEDULER_run+0x90>
				break;
 80010e6:	bf00      	nop
		}
		/* Stop the while loop when once a task gets executed */
		if(task_executed && (task != task_scheduler) && (task != task_event))
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d009      	beq.n	8001102 <SCHEDULER_run+0xaa>
 80010ee:	4b0f      	ldr	r3, [pc, #60]	; (800112c <SCHEDULER_run+0xd4>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d004      	beq.n	8001102 <SCHEDULER_run+0xaa>
 80010f8:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <SCHEDULER_run+0xd8>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	68ba      	ldr	r2, [r7, #8]
 80010fe:	429a      	cmp	r2, r3
 8001100:	d10e      	bne.n	8001120 <SCHEDULER_run+0xc8>
		{
			break;
		}
		task_executed = FALSE ;
 8001102:	2300      	movs	r3, #0
 8001104:	71fb      	strb	r3, [r7, #7]
		task = get_next_task();
 8001106:	f000 f881 	bl	800120c <get_next_task>
 800110a:	60b8      	str	r0, [r7, #8]
	while(task_queu_position < task_queu_size && task != NULL)
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <SCHEDULER_run+0xdc>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <SCHEDULER_run+0xe0>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	429a      	cmp	r2, r3
 8001116:	d204      	bcs.n	8001122 <SCHEDULER_run+0xca>
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1a8      	bne.n	8001070 <SCHEDULER_run+0x18>
	}
}
 800111e:	e000      	b.n	8001122 <SCHEDULER_run+0xca>
			break;
 8001120:	bf00      	nop
}
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000540 	.word	0x20000540
 8001130:	20000544 	.word	0x20000544
 8001134:	20000524 	.word	0x20000524
 8001138:	20000520 	.word	0x20000520

0800113c <SCHEDULER_task>:

/*
 * @brief Check for some tasks that requires to change of mode
 */
void SCHEDULER_task(void)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
	for(uint8_t t = 0; t < task_to_moove_counter; t++)
 8001142:	2300      	movs	r3, #0
 8001144:	71fb      	strb	r3, [r7, #7]
 8001146:	e00a      	b.n	800115e <SCHEDULER_task+0x22>
	{
		task_to_change[t]->mode = change_mode[t] ;
 8001148:	79fa      	ldrb	r2, [r7, #7]
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	490b      	ldr	r1, [pc, #44]	; (800117c <SCHEDULER_task+0x40>)
 800114e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001152:	490b      	ldr	r1, [pc, #44]	; (8001180 <SCHEDULER_task+0x44>)
 8001154:	5c8a      	ldrb	r2, [r1, r2]
 8001156:	709a      	strb	r2, [r3, #2]
	for(uint8_t t = 0; t < task_to_moove_counter; t++)
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	3301      	adds	r3, #1
 800115c:	71fb      	strb	r3, [r7, #7]
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <SCHEDULER_task+0x48>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	79fa      	ldrb	r2, [r7, #7]
 8001164:	429a      	cmp	r2, r3
 8001166:	d3ef      	bcc.n	8001148 <SCHEDULER_task+0xc>
	}
	task_to_moove_counter = 0 ;
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <SCHEDULER_task+0x48>)
 800116a:	2200      	movs	r2, #0
 800116c:	701a      	strb	r2, [r3, #0]
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20000528 	.word	0x20000528
 8001180:	20000538 	.word	0x20000538
 8001184:	2000053c 	.word	0x2000053c

08001188 <SCHEDULER_enable_task>:
 * @brief Add or remove a task to / from the queue
 * @param id The id of the task
 * @param enable Enable (Add) or disable (remove) a task
 */
void SCHEDULER_enable_task(task_ids_e id, bool_e enable)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	460a      	mov	r2, r1
 8001192:	71fb      	strb	r3, [r7, #7]
 8001194:	4613      	mov	r3, r2
 8001196:	71bb      	strb	r3, [r7, #6]
	if(enable)
 8001198:	79bb      	ldrb	r3, [r7, #6]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d008      	beq.n	80011b0 <SCHEDULER_enable_task+0x28>
	{
		queu_add(TASK_get_task(id));
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 fa4f 	bl	8001644 <TASK_get_task>
 80011a6:	4603      	mov	r3, r0
 80011a8:	4618      	mov	r0, r3
 80011aa:	f000 f963 	bl	8001474 <queu_add>
	}
	else
	{
		queu_remove(TASK_get_task(id));
	}
}
 80011ae:	e007      	b.n	80011c0 <SCHEDULER_enable_task+0x38>
		queu_remove(TASK_get_task(id));
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 fa46 	bl	8001644 <TASK_get_task>
 80011b8:	4603      	mov	r3, r0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 f9b8 	bl	8001530 <queu_remove>
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <SCHEDULER_reschedule_task>:
 * @brief Change the execution period of a task
 * @param id The id of the task
 * @param new_period_us The new desired period
 */
void SCHEDULER_reschedule_task(task_ids_e id, uint32_t new_period_us)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	71fb      	strb	r3, [r7, #7]
	task_t * task = TASK_get_task(id);
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 fa34 	bl	8001644 <TASK_get_task>
 80011dc:	60f8      	str	r0, [r7, #12]
	task->desired_period_us = new_period_us ;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	615a      	str	r2, [r3, #20]
}
 80011e4:	bf00      	nop
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <get_first_task>:

/*
 * @brief get the first task of the queue
 */
static task_t * get_first_task(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
	task_queu_position = 0 ;
 80011f0:	4b04      	ldr	r3, [pc, #16]	; (8001204 <get_first_task+0x18>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
	return task_queu[0] ;
 80011f6:	4b04      	ldr	r3, [pc, #16]	; (8001208 <get_first_task+0x1c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	20000524 	.word	0x20000524
 8001208:	20000510 	.word	0x20000510

0800120c <get_next_task>:
/*
 * @brief get the next task in the queue
 * @return the next task
 */
static task_t * get_next_task(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
	return task_queu[++task_queu_position];
 8001210:	4b07      	ldr	r3, [pc, #28]	; (8001230 <get_next_task+0x24>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	3301      	adds	r3, #1
 8001216:	4a06      	ldr	r2, [pc, #24]	; (8001230 <get_next_task+0x24>)
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	4b05      	ldr	r3, [pc, #20]	; (8001230 <get_next_task+0x24>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a05      	ldr	r2, [pc, #20]	; (8001234 <get_next_task+0x28>)
 8001220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001224:	4618      	mov	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20000524 	.word	0x20000524
 8001234:	20000510 	.word	0x20000510

08001238 <task_process>:

static uint32_t task_process(task_t * task, uint32_t current_time_us){
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]

	/* If the task has no process associated, we just stop here before making a mistake .. */
	if(task->process == NULL)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <task_process+0x16>
	{
		return current_time_us ;
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	e0e4      	b.n	8001418 <task_process+0x1e0>
	}

	/* Compute the real period using the moving average */
	task->real_period_us_average_sum -= task->real_period_us_average_array[task->average_index];
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001258:	6879      	ldr	r1, [r7, #4]
 800125a:	3308      	adds	r3, #8
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	440b      	add	r3, r1
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	1ad2      	subs	r2, r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	675a      	str	r2, [r3, #116]	; 0x74
	task->real_period_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69da      	ldr	r2, [r3, #28]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001272:	6839      	ldr	r1, [r7, #0]
 8001274:	1a8a      	subs	r2, r1, r2
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	3308      	adds	r3, #8
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	440b      	add	r3, r1
 800127e:	605a      	str	r2, [r3, #4]
	task->real_period_us_average_sum += task->real_period_us_average_array[task->average_index] ;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	3308      	adds	r3, #8
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	440b      	add	r3, r1
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	441a      	add	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	675a      	str	r2, [r3, #116]	; 0x74
	task->real_period_us = task->real_period_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800129e:	4a60      	ldr	r2, [pc, #384]	; (8001420 <task_process+0x1e8>)
 80012a0:	fba2 2303 	umull	r2, r3, r2, r3
 80012a4:	091a      	lsrs	r2, r3, #4
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	619a      	str	r2, [r3, #24]

	/* Lag compensation */
	if(task->mode == task_mode_eTIME)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	789b      	ldrb	r3, [r3, #2]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d142      	bne.n	8001338 <task_process+0x100>
	{
		if(task->real_period_us_average_array[task->average_index] > task->desired_period_us)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	3308      	adds	r3, #8
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	4413      	add	r3, r2
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d91b      	bls.n	8001302 <task_process+0xca>
		{
			task->lag_average += (float)(task->real_period_us_average_array[task->average_index] - task->desired_period_us) * 0.5f ;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	ed93 7a02 	vldr	s14, [r3, #8]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	3308      	adds	r3, #8
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	4413      	add	r3, r2
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	ee07 3a90 	vmov	s15, r3
 80012ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012ee:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80012f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80012f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	edc3 7a02 	vstr	s15, [r3, #8]
 8001300:	e01a      	b.n	8001338 <task_process+0x100>
		}

		else
		{
			task->lag_average -= (float)(task->desired_period_us - task->real_period_us_average_array[task->average_index]) * 0.5f ;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	ed93 7a02 	vldr	s14, [r3, #8]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	695a      	ldr	r2, [r3, #20]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	3308      	adds	r3, #8
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	440b      	add	r3, r1
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	ee07 3a90 	vmov	s15, r3
 8001322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001326:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800132a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800132e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	edc3 7a02 	vstr	s15, [r3, #8]
		}
	}
	task->last_execution_us = current_time_us ;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	61da      	str	r2, [r3, #28]
	task->process(current_time_us);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	6838      	ldr	r0, [r7, #0]
 8001344:	4798      	blx	r3
	current_time_us = TIME_us();
 8001346:	f000 f991 	bl	800166c <TIME_us>
 800134a:	6038      	str	r0, [r7, #0]
	/* Compute the "burst time" with the moving average */
	task->duration_us_average_sum -= task->duration_us_average_array[task->average_index];
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	311e      	adds	r1, #30
 800135c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001360:	1ad2      	subs	r2, r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	task->duration_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	69db      	ldr	r3, [r3, #28]
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	f8d2 20cc 	ldr.w	r2, [r2, #204]	; 0xcc
 8001372:	6839      	ldr	r1, [r7, #0]
 8001374:	1ac9      	subs	r1, r1, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	321e      	adds	r2, #30
 800137a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	task->duration_us_worst = MAX(task->duration_us_average_array[task->average_index] , task->duration_us_worst);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	691a      	ldr	r2, [r3, #16]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	311e      	adds	r1, #30
 800138c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001390:	429a      	cmp	r2, r3
 8001392:	bf38      	it	cc
 8001394:	461a      	movcc	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	611a      	str	r2, [r3, #16]
	task->duration_us_average_sum += task->duration_us_average_array[task->average_index];
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	311e      	adds	r1, #30
 80013aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80013ae:	441a      	add	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	task->duration_us = task->duration_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80013bc:	4a18      	ldr	r2, [pc, #96]	; (8001420 <task_process+0x1e8>)
 80013be:	fba2 2303 	umull	r2, r3, r2, r3
 80013c2:	091a      	lsrs	r2, r3, #4
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	60da      	str	r2, [r3, #12]

	if(task->duration_us_average_array[task->average_index] > 1000)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	321e      	adds	r2, #30
 80013d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013da:	d90c      	bls.n	80013f6 <task_process+0x1be>
		task->duration_us_average_array[task->average_index] ++ ;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	f103 011e 	add.w	r1, r3, #30
 80013e8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80013ec:	1c51      	adds	r1, r2, #1
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	331e      	adds	r3, #30
 80013f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if(++task->average_index == TASK_STAT_AVERAGE_OVER)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80013fc:	1c5a      	adds	r2, r3, #1
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800140a:	2b14      	cmp	r3, #20
 800140c:	d103      	bne.n	8001416 <task_process+0x1de>
		task->average_index = 0 ;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	return current_time_us ;
 8001416:	683b      	ldr	r3, [r7, #0]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	cccccccd 	.word	0xcccccccd

08001424 <queu_contains>:
 * @brief Check if the given task is currently in the queue
 * @param task pointer to a task
 * @return true when it does contains the task, false otherwise
 */
static bool_e queu_contains(task_t * task)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	if(task == NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <queu_contains+0x12>
	{
		return FALSE ;
 8001432:	2300      	movs	r3, #0
 8001434:	e014      	b.n	8001460 <queu_contains+0x3c>
	}
	for(uint32_t t = 0; t < task_queu_size; t++)
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	e00b      	b.n	8001454 <queu_contains+0x30>
	{
		if(task_queu[t] == task)
 800143c:	4a0b      	ldr	r2, [pc, #44]	; (800146c <queu_contains+0x48>)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	429a      	cmp	r2, r3
 8001448:	d101      	bne.n	800144e <queu_contains+0x2a>
			{
				return TRUE ;
 800144a:	2301      	movs	r3, #1
 800144c:	e008      	b.n	8001460 <queu_contains+0x3c>
	for(uint32_t t = 0; t < task_queu_size; t++)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	3301      	adds	r3, #1
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <queu_contains+0x4c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	429a      	cmp	r2, r3
 800145c:	d3ee      	bcc.n	800143c <queu_contains+0x18>
			}
	}

	return FALSE ;
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	20000510 	.word	0x20000510
 8001470:	20000520 	.word	0x20000520

08001474 <queu_add>:
 * @brief Add a task to the queue
 * @param task pointer to the task to add
 * @return true when added, false otherwise
 */
static bool_e queu_add(task_t * task)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]

	if(queu_contains(task) || task_queu_size >= task_ids_eCOUNT || task == NULL)
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff ffd1 	bl	8001424 <queu_contains>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d106      	bne.n	8001496 <queu_add+0x22>
 8001488:	4b27      	ldr	r3, [pc, #156]	; (8001528 <queu_add+0xb4>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b03      	cmp	r3, #3
 800148e:	d802      	bhi.n	8001496 <queu_add+0x22>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d101      	bne.n	800149a <queu_add+0x26>
	{
		return FALSE ;
 8001496:	2300      	movs	r3, #0
 8001498:	e041      	b.n	800151e <queu_add+0xaa>
	}
	uint32_t t = 0 ;
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
	while(t < task_ids_eCOUNT)
 800149e:	e03a      	b.n	8001516 <queu_add+0xa2>
	{
		if(task_queu[t] == NULL)
 80014a0:	4a22      	ldr	r2, [pc, #136]	; (800152c <queu_add+0xb8>)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d10b      	bne.n	80014c4 <queu_add+0x50>
		{
			task_queu[t] = task ;
 80014ac:	491f      	ldr	r1, [pc, #124]	; (800152c <queu_add+0xb8>)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			task_queu_size ++ ;
 80014b6:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <queu_add+0xb4>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	3301      	adds	r3, #1
 80014bc:	4a1a      	ldr	r2, [pc, #104]	; (8001528 <queu_add+0xb4>)
 80014be:	6013      	str	r3, [r2, #0]
			return TRUE;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e02c      	b.n	800151e <queu_add+0xaa>
		}
		else if(task->static_priority > task_queu[t]->static_priority){
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	781a      	ldrb	r2, [r3, #0]
 80014c8:	4918      	ldr	r1, [pc, #96]	; (800152c <queu_add+0xb8>)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d91c      	bls.n	8001510 <queu_add+0x9c>
			memmove(&task_queu[t+1], &task_queu[t], sizeof(task) * (task_queu_size - t));
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	3301      	adds	r3, #1
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4a13      	ldr	r2, [pc, #76]	; (800152c <queu_add+0xb8>)
 80014de:	1898      	adds	r0, r3, r2
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4a11      	ldr	r2, [pc, #68]	; (800152c <queu_add+0xb8>)
 80014e6:	1899      	adds	r1, r3, r2
 80014e8:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <queu_add+0xb4>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	461a      	mov	r2, r3
 80014f4:	f005 fbc2 	bl	8006c7c <memmove>
			task_queu[t] = task ;
 80014f8:	490c      	ldr	r1, [pc, #48]	; (800152c <queu_add+0xb8>)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			task_queu_size ++ ;
 8001502:	4b09      	ldr	r3, [pc, #36]	; (8001528 <queu_add+0xb4>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	3301      	adds	r3, #1
 8001508:	4a07      	ldr	r2, [pc, #28]	; (8001528 <queu_add+0xb4>)
 800150a:	6013      	str	r3, [r2, #0]
			return TRUE ;
 800150c:	2301      	movs	r3, #1
 800150e:	e006      	b.n	800151e <queu_add+0xaa>
		}
		t++;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	3301      	adds	r3, #1
 8001514:	60fb      	str	r3, [r7, #12]
	while(t < task_ids_eCOUNT)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2b03      	cmp	r3, #3
 800151a:	d9c1      	bls.n	80014a0 <queu_add+0x2c>
	}
	return FALSE ;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000520 	.word	0x20000520
 800152c:	20000510 	.word	0x20000510

08001530 <queu_remove>:
 * @brief remove a task from the queue
 * @param task pointer to the task to remove
 * @return true if the task was removed, false otherwise
 */
static bool_e queu_remove(task_t * task)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	if(!queu_contains(task) || task == NULL)
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff ff73 	bl	8001424 <queu_contains>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d002      	beq.n	800154a <queu_remove+0x1a>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <queu_remove+0x1e>
	{
		return FALSE ;
 800154a:	2300      	movs	r3, #0
 800154c:	e02a      	b.n	80015a4 <queu_remove+0x74>
	}
	for(uint32_t t = 0; t < task_queu_size; t ++)
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	e021      	b.n	8001598 <queu_remove+0x68>
	{
		if(task == task_queu[t])
 8001554:	4a15      	ldr	r2, [pc, #84]	; (80015ac <queu_remove+0x7c>)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	429a      	cmp	r2, r3
 8001560:	d117      	bne.n	8001592 <queu_remove+0x62>
		{
			memmove(&task_queu[t], &task_queu[t+1], sizeof(task) * (task_queu_size - t));
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4a11      	ldr	r2, [pc, #68]	; (80015ac <queu_remove+0x7c>)
 8001568:	1898      	adds	r0, r3, r2
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	3301      	adds	r3, #1
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4a0e      	ldr	r2, [pc, #56]	; (80015ac <queu_remove+0x7c>)
 8001572:	1899      	adds	r1, r3, r2
 8001574:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <queu_remove+0x80>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	461a      	mov	r2, r3
 8001580:	f005 fb7c 	bl	8006c7c <memmove>
			task_queu_size -- ;
 8001584:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <queu_remove+0x80>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	3b01      	subs	r3, #1
 800158a:	4a09      	ldr	r2, [pc, #36]	; (80015b0 <queu_remove+0x80>)
 800158c:	6013      	str	r3, [r2, #0]
			return TRUE ;
 800158e:	2301      	movs	r3, #1
 8001590:	e008      	b.n	80015a4 <queu_remove+0x74>
	for(uint32_t t = 0; t < task_queu_size; t ++)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	3301      	adds	r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <queu_remove+0x80>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d3d8      	bcc.n	8001554 <queu_remove+0x24>
		}
	}
	return FALSE ;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000510 	.word	0x20000510
 80015b0:	20000520 	.word	0x20000520

080015b4 <TASK_Init>:
/*
 * @brief Initialization of every task
 * @param mark1_ pointer to a system_t structure
 */
void TASK_Init(system_t * mark1_)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	mark1 = mark1_;
 80015bc:	4a0b      	ldr	r2, [pc, #44]	; (80015ec <TASK_Init+0x38>)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6013      	str	r3, [r2, #0]
	SCHEDULER_enable_task(task_ids_eEVENTS, TRUE);
 80015c2:	2101      	movs	r1, #1
 80015c4:	2001      	movs	r0, #1
 80015c6:	f7ff fddf 	bl	8001188 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(task_ids_eSCHEDULER, TRUE);
 80015ca:	2101      	movs	r1, #1
 80015cc:	2000      	movs	r0, #0
 80015ce:	f7ff fddb 	bl	8001188 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(task_ids_eGYRO_UPDATE, TRUE);
 80015d2:	2101      	movs	r1, #1
 80015d4:	2003      	movs	r0, #3
 80015d6:	f7ff fdd7 	bl	8001188 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(task_ids_eDATA_LOGGER, TRUE);
 80015da:	2101      	movs	r1, #1
 80015dc:	2002      	movs	r0, #2
 80015de:	f7ff fdd3 	bl	8001188 <SCHEDULER_enable_task>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000548 	.word	0x20000548

080015f0 <process_scheduler>:

/*
 * @brief Call the scheduler main function
 */
static void process_scheduler(uint32_t current_time_us)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	SCHEDULER_task();
 80015f8:	f7ff fda0 	bl	800113c <SCHEDULER_task>
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <process_events>:

/*
 * @brief Call the scheduler main function
 */
static void process_events(uint32_t current_time_us)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	UNUSED(current_time_us);
	EVENT_process(FALSE);
 800160c:	2000      	movs	r0, #0
 800160e:	f7ff fc1d 	bl	8000e4c <EVENT_process>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <process_data_logger>:

/*
 * @brief Call the data logger main function
 */
static void process_data_logger(uint32_t current_time_us)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
	UNUSED(current_time_us);
	DATA_LOGGER_Main();
 8001622:	f7fe ffd3 	bl	80005cc <DATA_LOGGER_Main>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <process_gyro_update>:

/*
 * @brief Measure new data from the gyro
 */
static void process_gyro_update(uint32_t current_time_us)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
	MPU_Read_All();
 8001636:	f000 fcb3 	bl	8001fa0 <MPU_Read_All>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <TASK_get_task>:
 * @brief Return a pointer to a task for a given task id
 * @param id Id of the task
 * @return Pointer to the task
 */
task_t * TASK_get_task(task_ids_e id)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
	return &tasks[id];
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	22d0      	movs	r2, #208	; 0xd0
 8001652:	fb02 f303 	mul.w	r3, r2, r3
 8001656:	4a04      	ldr	r2, [pc, #16]	; (8001668 <TASK_get_task+0x24>)
 8001658:	4413      	add	r3, r2
}
 800165a:	4618      	mov	r0, r3
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	20000004 	.word	0x20000004

0800166c <TIME_us>:

#include "time.h"


uint32_t TIME_us(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001672:	b672      	cpsid	i
}
 8001674:	bf00      	nop

	uint32_t t_us;
	static uint32_t previous_t_us = 0;
	__disable_irq();
	t_us = HAL_GetTick() * 1000 + 1000 - SysTick->VAL / 168;
 8001676:	f001 fa81 	bl	8002b7c <HAL_GetTick>
 800167a:	4603      	mov	r3, r0
 800167c:	3301      	adds	r3, #1
 800167e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001682:	fb02 f203 	mul.w	r2, r2, r3
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <TIME_us+0x54>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	08db      	lsrs	r3, r3, #3
 800168c:	490d      	ldr	r1, [pc, #52]	; (80016c4 <TIME_us+0x58>)
 800168e:	fba1 1303 	umull	r1, r3, r1, r3
 8001692:	085b      	lsrs	r3, r3, #1
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8001698:	b662      	cpsie	i
}
 800169a:	bf00      	nop
	__enable_irq();

	if(previous_t_us > t_us)
 800169c:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <TIME_us+0x5c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d203      	bcs.n	80016ae <TIME_us+0x42>
		t_us += 1000;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80016ac:	607b      	str	r3, [r7, #4]
	previous_t_us = t_us ;
 80016ae:	4a06      	ldr	r2, [pc, #24]	; (80016c8 <TIME_us+0x5c>)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6013      	str	r3, [r2, #0]

	return t_us;
 80016b4:	687b      	ldr	r3, [r7, #4]
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	e000e010 	.word	0xe000e010
 80016c4:	18618619 	.word	0x18618619
 80016c8:	2000054c 	.word	0x2000054c

080016cc <SPI_Transmit>:
 * @param cs_id Which chip select
 * @param data data array to transmit
 * @param len number of bytes
 */
void SPI_Transmit(spi_e spi_id, cs_e cs_id, uint8_t * data, uint8_t len)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	603a      	str	r2, [r7, #0]
 80016d4:	461a      	mov	r2, r3
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
 80016da:	460b      	mov	r3, r1
 80016dc:	71bb      	strb	r3, [r7, #6]
 80016de:	4613      	mov	r3, r2
 80016e0:	717b      	strb	r3, [r7, #5]
	/* Lock the chip */
	HAL_GPIO_WritePin(cs[cs_id].port, cs[cs_id].pin_high, GPIO_PIN_RESET);
 80016e2:	79ba      	ldrb	r2, [r7, #6]
 80016e4:	491c      	ldr	r1, [pc, #112]	; (8001758 <SPI_Transmit+0x8c>)
 80016e6:	4613      	mov	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	4413      	add	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	440b      	add	r3, r1
 80016f0:	6818      	ldr	r0, [r3, #0]
 80016f2:	79ba      	ldrb	r2, [r7, #6]
 80016f4:	4918      	ldr	r1, [pc, #96]	; (8001758 <SPI_Transmit+0x8c>)
 80016f6:	4613      	mov	r3, r2
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	4413      	add	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	440b      	add	r3, r1
 8001700:	3304      	adds	r3, #4
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	b29b      	uxth	r3, r3
 8001706:	2200      	movs	r2, #0
 8001708:	4619      	mov	r1, r3
 800170a:	f002 f917 	bl	800393c <HAL_GPIO_WritePin>
	/* Send data */
	HAL_SPI_Transmit(spi[spi_id].hspi, data, len, SPI_TRANSMIT_TIMEOUT);
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	4a12      	ldr	r2, [pc, #72]	; (800175c <SPI_Transmit+0x90>)
 8001712:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001716:	797b      	ldrb	r3, [r7, #5]
 8001718:	b29a      	uxth	r2, r3
 800171a:	2305      	movs	r3, #5
 800171c:	6839      	ldr	r1, [r7, #0]
 800171e:	f002 fdf8 	bl	8004312 <HAL_SPI_Transmit>
	/* Unlock the chip */
	HAL_GPIO_WritePin(cs[cs_id].port, cs[cs_id].pin_high, GPIO_PIN_SET);
 8001722:	79ba      	ldrb	r2, [r7, #6]
 8001724:	490c      	ldr	r1, [pc, #48]	; (8001758 <SPI_Transmit+0x8c>)
 8001726:	4613      	mov	r3, r2
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	4413      	add	r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	440b      	add	r3, r1
 8001730:	6818      	ldr	r0, [r3, #0]
 8001732:	79ba      	ldrb	r2, [r7, #6]
 8001734:	4908      	ldr	r1, [pc, #32]	; (8001758 <SPI_Transmit+0x8c>)
 8001736:	4613      	mov	r3, r2
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	4413      	add	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	440b      	add	r3, r1
 8001740:	3304      	adds	r3, #4
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	b29b      	uxth	r3, r3
 8001746:	2201      	movs	r2, #1
 8001748:	4619      	mov	r1, r3
 800174a:	f002 f8f7 	bl	800393c <HAL_GPIO_WritePin>
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000344 	.word	0x20000344
 800175c:	20000350 	.word	0x20000350

08001760 <SPI_Transmit_Receive>:
 * @param transmit Data to transmit
 * @param receive Buffer to put the data
 * @param len Number of byte
 */
void SPI_Transmit_Receive(spi_e spi_id, cs_e cs_id, uint8_t * transmit, uint8_t * receive, uint16_t len)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af02      	add	r7, sp, #8
 8001766:	60ba      	str	r2, [r7, #8]
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	4603      	mov	r3, r0
 800176c:	73fb      	strb	r3, [r7, #15]
 800176e:	460b      	mov	r3, r1
 8001770:	73bb      	strb	r3, [r7, #14]
	/* Lock the chip */
	HAL_GPIO_WritePin(cs[cs_id].port, cs[cs_id].pin_high, GPIO_PIN_RESET);
 8001772:	7bba      	ldrb	r2, [r7, #14]
 8001774:	491c      	ldr	r1, [pc, #112]	; (80017e8 <SPI_Transmit_Receive+0x88>)
 8001776:	4613      	mov	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4413      	add	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	440b      	add	r3, r1
 8001780:	6818      	ldr	r0, [r3, #0]
 8001782:	7bba      	ldrb	r2, [r7, #14]
 8001784:	4918      	ldr	r1, [pc, #96]	; (80017e8 <SPI_Transmit_Receive+0x88>)
 8001786:	4613      	mov	r3, r2
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	4413      	add	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	440b      	add	r3, r1
 8001790:	3304      	adds	r3, #4
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	b29b      	uxth	r3, r3
 8001796:	2200      	movs	r2, #0
 8001798:	4619      	mov	r1, r3
 800179a:	f002 f8cf 	bl	800393c <HAL_GPIO_WritePin>
	/* Send data */
	HAL_SPI_TransmitReceive(spi[spi_id].hspi, transmit, receive, len, SPI_TRANSMIT_TIMEOUT);
 800179e:	7bfb      	ldrb	r3, [r7, #15]
 80017a0:	4a12      	ldr	r2, [pc, #72]	; (80017ec <SPI_Transmit_Receive+0x8c>)
 80017a2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017a6:	8b3b      	ldrh	r3, [r7, #24]
 80017a8:	2205      	movs	r2, #5
 80017aa:	9200      	str	r2, [sp, #0]
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	68b9      	ldr	r1, [r7, #8]
 80017b0:	f002 feeb 	bl	800458a <HAL_SPI_TransmitReceive>
	/* Unlock the chip */
	HAL_GPIO_WritePin(cs[cs_id].port, cs[cs_id].pin_high, GPIO_PIN_SET);
 80017b4:	7bba      	ldrb	r2, [r7, #14]
 80017b6:	490c      	ldr	r1, [pc, #48]	; (80017e8 <SPI_Transmit_Receive+0x88>)
 80017b8:	4613      	mov	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4413      	add	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	440b      	add	r3, r1
 80017c2:	6818      	ldr	r0, [r3, #0]
 80017c4:	7bba      	ldrb	r2, [r7, #14]
 80017c6:	4908      	ldr	r1, [pc, #32]	; (80017e8 <SPI_Transmit_Receive+0x88>)
 80017c8:	4613      	mov	r3, r2
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	4413      	add	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	440b      	add	r3, r1
 80017d2:	3304      	adds	r3, #4
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	2201      	movs	r2, #1
 80017da:	4619      	mov	r1, r3
 80017dc:	f002 f8ae 	bl	800393c <HAL_GPIO_WritePin>
}
 80017e0:	bf00      	nop
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000344 	.word	0x20000344
 80017ec:	20000350 	.word	0x20000350

080017f0 <TIMER_Start>:
 * @brief Start channels of a timer
 * @param timer_id The timer
 * @param channel The channel
 */
void TIMER_Start(timer_e timer_id, uint16_t channel)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	460a      	mov	r2, r1
 80017fa:	71fb      	strb	r3, [r7, #7]
 80017fc:	4613      	mov	r3, r2
 80017fe:	80bb      	strh	r3, [r7, #4]
	HAL_TIM_PWM_Start(timer[timer_id].htim, channel);
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	4a06      	ldr	r2, [pc, #24]	; (800181c <TIMER_Start+0x2c>)
 8001804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001808:	88ba      	ldrh	r2, [r7, #4]
 800180a:	4611      	mov	r1, r2
 800180c:	4618      	mov	r0, r3
 800180e:	f003 faef 	bl	8004df0 <HAL_TIM_PWM_Start>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000354 	.word	0x20000354

08001820 <UART_Idle_Line_Callback>:
/* -------------------------- Public callback functions -------------------------- */
/*
 * @brief Update the read index when the idle flag is raised
 */
void UART_Idle_Line_Callback(uart_e id)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
	if(__HAL_UART_GET_FLAG(uart[id].huart, UART_FLAG_IDLE))
 800182a:	79fa      	ldrb	r2, [r7, #7]
 800182c:	4922      	ldr	r1, [pc, #136]	; (80018b8 <UART_Idle_Line_Callback+0x98>)
 800182e:	4613      	mov	r3, r2
 8001830:	019b      	lsls	r3, r3, #6
 8001832:	4413      	add	r3, r2
 8001834:	011b      	lsls	r3, r3, #4
 8001836:	440b      	add	r3, r1
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0310 	and.w	r3, r3, #16
 8001842:	2b10      	cmp	r3, #16
 8001844:	d132      	bne.n	80018ac <UART_Idle_Line_Callback+0x8c>
	{
		uart[id].index_write_rx = LEN_BUFFER - uart[id].huart->hdmarx->Instance->NDTR ;
 8001846:	79fa      	ldrb	r2, [r7, #7]
 8001848:	491b      	ldr	r1, [pc, #108]	; (80018b8 <UART_Idle_Line_Callback+0x98>)
 800184a:	4613      	mov	r3, r2
 800184c:	019b      	lsls	r3, r3, #6
 800184e:	4413      	add	r3, r2
 8001850:	011b      	lsls	r3, r3, #4
 8001852:	440b      	add	r3, r1
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	b29b      	uxth	r3, r3
 800185e:	79fa      	ldrb	r2, [r7, #7]
 8001860:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001864:	b298      	uxth	r0, r3
 8001866:	4914      	ldr	r1, [pc, #80]	; (80018b8 <UART_Idle_Line_Callback+0x98>)
 8001868:	4613      	mov	r3, r2
 800186a:	019b      	lsls	r3, r3, #6
 800186c:	4413      	add	r3, r2
 800186e:	011b      	lsls	r3, r3, #4
 8001870:	440b      	add	r3, r1
 8001872:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8001876:	4602      	mov	r2, r0
 8001878:	801a      	strh	r2, [r3, #0]
	  __HAL_UART_CLEAR_IDLEFLAG(uart[id].huart);
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	79fa      	ldrb	r2, [r7, #7]
 8001880:	490d      	ldr	r1, [pc, #52]	; (80018b8 <UART_Idle_Line_Callback+0x98>)
 8001882:	4613      	mov	r3, r2
 8001884:	019b      	lsls	r3, r3, #6
 8001886:	4413      	add	r3, r2
 8001888:	011b      	lsls	r3, r3, #4
 800188a:	440b      	add	r3, r1
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	79fa      	ldrb	r2, [r7, #7]
 8001896:	4908      	ldr	r1, [pc, #32]	; (80018b8 <UART_Idle_Line_Callback+0x98>)
 8001898:	4613      	mov	r3, r2
 800189a:	019b      	lsls	r3, r3, #6
 800189c:	4413      	add	r3, r2
 800189e:	011b      	lsls	r3, r3, #4
 80018a0:	440b      	add	r3, r1
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	68fb      	ldr	r3, [r7, #12]
	}
}
 80018ac:	bf00      	nop
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	20000550 	.word	0x20000550

080018bc <UART_Transfer_Complete_Callback>:

/*
 * @brief Re start the dma transfer if there is data to send or reset the transmission state to idle
 */
void UART_Transfer_Complete_Callback(uart_e id)
{
 80018bc:	b590      	push	{r4, r7, lr}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
	if(uart[id].index_write_tx != uart[id].index_read_tx)
 80018c6:	79fa      	ldrb	r2, [r7, #7]
 80018c8:	494d      	ldr	r1, [pc, #308]	; (8001a00 <UART_Transfer_Complete_Callback+0x144>)
 80018ca:	4613      	mov	r3, r2
 80018cc:	019b      	lsls	r3, r3, #6
 80018ce:	4413      	add	r3, r2
 80018d0:	011b      	lsls	r3, r3, #4
 80018d2:	440b      	add	r3, r1
 80018d4:	f203 2306 	addw	r3, r3, #518	; 0x206
 80018d8:	8819      	ldrh	r1, [r3, #0]
 80018da:	79fa      	ldrb	r2, [r7, #7]
 80018dc:	4848      	ldr	r0, [pc, #288]	; (8001a00 <UART_Transfer_Complete_Callback+0x144>)
 80018de:	4613      	mov	r3, r2
 80018e0:	019b      	lsls	r3, r3, #6
 80018e2:	4413      	add	r3, r2
 80018e4:	011b      	lsls	r3, r3, #4
 80018e6:	4403      	add	r3, r0
 80018e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	4299      	cmp	r1, r3
 80018f0:	d077      	beq.n	80019e2 <UART_Transfer_Complete_Callback+0x126>
	{
		uint16_t nb_bytes_to_read = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	81fb      	strh	r3, [r7, #14]
		if(uart[id].index_write_tx > uart[id].index_read_rx)
 80018f6:	79fa      	ldrb	r2, [r7, #7]
 80018f8:	4941      	ldr	r1, [pc, #260]	; (8001a00 <UART_Transfer_Complete_Callback+0x144>)
 80018fa:	4613      	mov	r3, r2
 80018fc:	019b      	lsls	r3, r3, #6
 80018fe:	4413      	add	r3, r2
 8001900:	011b      	lsls	r3, r3, #4
 8001902:	440b      	add	r3, r1
 8001904:	f203 2306 	addw	r3, r3, #518	; 0x206
 8001908:	8819      	ldrh	r1, [r3, #0]
 800190a:	79fa      	ldrb	r2, [r7, #7]
 800190c:	483c      	ldr	r0, [pc, #240]	; (8001a00 <UART_Transfer_Complete_Callback+0x144>)
 800190e:	4613      	mov	r3, r2
 8001910:	019b      	lsls	r3, r3, #6
 8001912:	4413      	add	r3, r2
 8001914:	011b      	lsls	r3, r3, #4
 8001916:	4403      	add	r3, r0
 8001918:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	4299      	cmp	r1, r3
 8001920:	d916      	bls.n	8001950 <UART_Transfer_Complete_Callback+0x94>
		{
			nb_bytes_to_read = uart[id].index_write_tx - uart[id].index_read_tx;
 8001922:	79fa      	ldrb	r2, [r7, #7]
 8001924:	4936      	ldr	r1, [pc, #216]	; (8001a00 <UART_Transfer_Complete_Callback+0x144>)
 8001926:	4613      	mov	r3, r2
 8001928:	019b      	lsls	r3, r3, #6
 800192a:	4413      	add	r3, r2
 800192c:	011b      	lsls	r3, r3, #4
 800192e:	440b      	add	r3, r1
 8001930:	f203 2306 	addw	r3, r3, #518	; 0x206
 8001934:	8819      	ldrh	r1, [r3, #0]
 8001936:	79fa      	ldrb	r2, [r7, #7]
 8001938:	4831      	ldr	r0, [pc, #196]	; (8001a00 <UART_Transfer_Complete_Callback+0x144>)
 800193a:	4613      	mov	r3, r2
 800193c:	019b      	lsls	r3, r3, #6
 800193e:	4413      	add	r3, r2
 8001940:	011b      	lsls	r3, r3, #4
 8001942:	4403      	add	r3, r0
 8001944:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001948:	881b      	ldrh	r3, [r3, #0]
 800194a:	1acb      	subs	r3, r1, r3
 800194c:	81fb      	strh	r3, [r7, #14]
 800194e:	e00c      	b.n	800196a <UART_Transfer_Complete_Callback+0xae>
		}
		else
		{
			nb_bytes_to_read = LEN_BUFFER - uart[id].index_read_tx;
 8001950:	79fa      	ldrb	r2, [r7, #7]
 8001952:	492b      	ldr	r1, [pc, #172]	; (8001a00 <UART_Transfer_Complete_Callback+0x144>)
 8001954:	4613      	mov	r3, r2
 8001956:	019b      	lsls	r3, r3, #6
 8001958:	4413      	add	r3, r2
 800195a:	011b      	lsls	r3, r3, #4
 800195c:	440b      	add	r3, r1
 800195e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001962:	881b      	ldrh	r3, [r3, #0]
 8001964:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001968:	81fb      	strh	r3, [r7, #14]
		}
		HAL_UART_Transmit_DMA(uart[id].huart, &uart[id].buffer_tx[uart[id].index_read_tx], nb_bytes_to_read);
 800196a:	79fa      	ldrb	r2, [r7, #7]
 800196c:	4924      	ldr	r1, [pc, #144]	; (8001a00 <UART_Transfer_Complete_Callback+0x144>)
 800196e:	4613      	mov	r3, r2
 8001970:	019b      	lsls	r3, r3, #6
 8001972:	4413      	add	r3, r2
 8001974:	011b      	lsls	r3, r3, #4
 8001976:	440b      	add	r3, r1
 8001978:	6818      	ldr	r0, [r3, #0]
 800197a:	79fa      	ldrb	r2, [r7, #7]
 800197c:	79f9      	ldrb	r1, [r7, #7]
 800197e:	4c20      	ldr	r4, [pc, #128]	; (8001a00 <UART_Transfer_Complete_Callback+0x144>)
 8001980:	460b      	mov	r3, r1
 8001982:	019b      	lsls	r3, r3, #6
 8001984:	440b      	add	r3, r1
 8001986:	011b      	lsls	r3, r3, #4
 8001988:	4423      	add	r3, r4
 800198a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800198e:	881b      	ldrh	r3, [r3, #0]
 8001990:	4619      	mov	r1, r3
 8001992:	4613      	mov	r3, r2
 8001994:	019b      	lsls	r3, r3, #6
 8001996:	4413      	add	r3, r2
 8001998:	011b      	lsls	r3, r3, #4
 800199a:	440b      	add	r3, r1
 800199c:	4a18      	ldr	r2, [pc, #96]	; (8001a00 <UART_Transfer_Complete_Callback+0x144>)
 800199e:	4413      	add	r3, r2
 80019a0:	3306      	adds	r3, #6
 80019a2:	89fa      	ldrh	r2, [r7, #14]
 80019a4:	4619      	mov	r1, r3
 80019a6:	f004 f84f 	bl	8005a48 <HAL_UART_Transmit_DMA>
		uart[id].index_read_tx = (uart[id].index_read_tx + nb_bytes_to_read) % LEN_BUFFER;
 80019aa:	79fa      	ldrb	r2, [r7, #7]
 80019ac:	4914      	ldr	r1, [pc, #80]	; (8001a00 <UART_Transfer_Complete_Callback+0x144>)
 80019ae:	4613      	mov	r3, r2
 80019b0:	019b      	lsls	r3, r3, #6
 80019b2:	4413      	add	r3, r2
 80019b4:	011b      	lsls	r3, r3, #4
 80019b6:	440b      	add	r3, r1
 80019b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80019bc:	881a      	ldrh	r2, [r3, #0]
 80019be:	89fb      	ldrh	r3, [r7, #14]
 80019c0:	4413      	add	r3, r2
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	79fa      	ldrb	r2, [r7, #7]
 80019c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019ca:	b298      	uxth	r0, r3
 80019cc:	490c      	ldr	r1, [pc, #48]	; (8001a00 <UART_Transfer_Complete_Callback+0x144>)
 80019ce:	4613      	mov	r3, r2
 80019d0:	019b      	lsls	r3, r3, #6
 80019d2:	4413      	add	r3, r2
 80019d4:	011b      	lsls	r3, r3, #4
 80019d6:	440b      	add	r3, r1
 80019d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80019dc:	4602      	mov	r2, r0
 80019de:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		uart[id].transmission_state = transmission_state_eIDLE;
	}
}
 80019e0:	e009      	b.n	80019f6 <UART_Transfer_Complete_Callback+0x13a>
		uart[id].transmission_state = transmission_state_eIDLE;
 80019e2:	79fa      	ldrb	r2, [r7, #7]
 80019e4:	4906      	ldr	r1, [pc, #24]	; (8001a00 <UART_Transfer_Complete_Callback+0x144>)
 80019e6:	4613      	mov	r3, r2
 80019e8:	019b      	lsls	r3, r3, #6
 80019ea:	4413      	add	r3, r2
 80019ec:	011b      	lsls	r3, r3, #4
 80019ee:	440b      	add	r3, r1
 80019f0:	3305      	adds	r3, #5
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]
}
 80019f6:	bf00      	nop
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd90      	pop	{r4, r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000550 	.word	0x20000550

08001a04 <UART_Availables>:
 * @brief Number of byte available in the RX buffer
 * @param id Id of the uart we are interested in
 * @return Number of bytes
 */
uint16_t UART_Availables(uart_e id)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
	return get_nb_bytes_available(id);
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f000 f94f 	bl	8001cb4 <get_nb_bytes_available>
 8001a16:	4603      	mov	r3, r0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <UART_Get>:
 * 		  Does nothing if there are no characters available
 * @param id Id of the uart
 * @param c Buffer to write the character into
 */
void UART_Get(uart_e id, uint8_t * c)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	6039      	str	r1, [r7, #0]
 8001a2a:	71fb      	strb	r3, [r7, #7]
	if(get_nb_bytes_available(id))
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f000 f940 	bl	8001cb4 <get_nb_bytes_available>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d035      	beq.n	8001aa6 <UART_Get+0x86>
	{
		*c = uart[id].buffer_rx[uart[id].index_read_rx];
 8001a3a:	79fa      	ldrb	r2, [r7, #7]
 8001a3c:	79f9      	ldrb	r1, [r7, #7]
 8001a3e:	481c      	ldr	r0, [pc, #112]	; (8001ab0 <UART_Get+0x90>)
 8001a40:	460b      	mov	r3, r1
 8001a42:	019b      	lsls	r3, r3, #6
 8001a44:	440b      	add	r3, r1
 8001a46:	011b      	lsls	r3, r3, #4
 8001a48:	4403      	add	r3, r0
 8001a4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	4917      	ldr	r1, [pc, #92]	; (8001ab0 <UART_Get+0x90>)
 8001a54:	4613      	mov	r3, r2
 8001a56:	019b      	lsls	r3, r3, #6
 8001a58:	4413      	add	r3, r2
 8001a5a:	011b      	lsls	r3, r3, #4
 8001a5c:	440b      	add	r3, r1
 8001a5e:	4403      	add	r3, r0
 8001a60:	f203 230a 	addw	r3, r3, #522	; 0x20a
 8001a64:	781a      	ldrb	r2, [r3, #0]
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	701a      	strb	r2, [r3, #0]
		uart[id].index_read_rx = (uart[id].index_read_rx + 1) % LEN_BUFFER;
 8001a6a:	79fa      	ldrb	r2, [r7, #7]
 8001a6c:	4910      	ldr	r1, [pc, #64]	; (8001ab0 <UART_Get+0x90>)
 8001a6e:	4613      	mov	r3, r2
 8001a70:	019b      	lsls	r3, r3, #6
 8001a72:	4413      	add	r3, r2
 8001a74:	011b      	lsls	r3, r3, #4
 8001a76:	440b      	add	r3, r1
 8001a78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	425a      	negs	r2, r3
 8001a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a8a:	bf58      	it	pl
 8001a8c:	4253      	negpl	r3, r2
 8001a8e:	79fa      	ldrb	r2, [r7, #7]
 8001a90:	b298      	uxth	r0, r3
 8001a92:	4907      	ldr	r1, [pc, #28]	; (8001ab0 <UART_Get+0x90>)
 8001a94:	4613      	mov	r3, r2
 8001a96:	019b      	lsls	r3, r3, #6
 8001a98:	4413      	add	r3, r2
 8001a9a:	011b      	lsls	r3, r3, #4
 8001a9c:	440b      	add	r3, r1
 8001a9e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	801a      	strh	r2, [r3, #0]
	}
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000550 	.word	0x20000550

08001ab4 <UART_Init>:

/*
 * @brief Initialize every uarts and start dma reception
 */
void UART_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
	/* Link  huarts to the right uarts structures */
	uart[uart_e1].huart = &huart1;
 8001aba:	4b21      	ldr	r3, [pc, #132]	; (8001b40 <UART_Init+0x8c>)
 8001abc:	4a21      	ldr	r2, [pc, #132]	; (8001b44 <UART_Init+0x90>)
 8001abe:	601a      	str	r2, [r3, #0]
	uart[uart_e4].huart = &huart4;
 8001ac0:	4b1f      	ldr	r3, [pc, #124]	; (8001b40 <UART_Init+0x8c>)
 8001ac2:	4a21      	ldr	r2, [pc, #132]	; (8001b48 <UART_Init+0x94>)
 8001ac4:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410

	/* Initialization */
	for(uint8_t u = 0; u < uart_eCOUNT; u ++)
 8001ac8:	2300      	movs	r3, #0
 8001aca:	71fb      	strb	r3, [r7, #7]
 8001acc:	e02f      	b.n	8001b2e <UART_Init+0x7a>
	{
		__HAL_UART_ENABLE_IT(uart[u].huart, UART_IT_IDLE);
 8001ace:	79fa      	ldrb	r2, [r7, #7]
 8001ad0:	491b      	ldr	r1, [pc, #108]	; (8001b40 <UART_Init+0x8c>)
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	019b      	lsls	r3, r3, #6
 8001ad6:	4413      	add	r3, r2
 8001ad8:	011b      	lsls	r3, r3, #4
 8001ada:	440b      	add	r3, r1
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68d9      	ldr	r1, [r3, #12]
 8001ae2:	79fa      	ldrb	r2, [r7, #7]
 8001ae4:	4816      	ldr	r0, [pc, #88]	; (8001b40 <UART_Init+0x8c>)
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	019b      	lsls	r3, r3, #6
 8001aea:	4413      	add	r3, r2
 8001aec:	011b      	lsls	r3, r3, #4
 8001aee:	4403      	add	r3, r0
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f041 0210 	orr.w	r2, r1, #16
 8001af8:	60da      	str	r2, [r3, #12]
		HAL_UART_Receive_DMA(uart[u].huart, uart[u].buffer_rx, LEN_BUFFER);
 8001afa:	79fa      	ldrb	r2, [r7, #7]
 8001afc:	4910      	ldr	r1, [pc, #64]	; (8001b40 <UART_Init+0x8c>)
 8001afe:	4613      	mov	r3, r2
 8001b00:	019b      	lsls	r3, r3, #6
 8001b02:	4413      	add	r3, r2
 8001b04:	011b      	lsls	r3, r3, #4
 8001b06:	440b      	add	r3, r1
 8001b08:	6818      	ldr	r0, [r3, #0]
 8001b0a:	79fa      	ldrb	r2, [r7, #7]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	019b      	lsls	r3, r3, #6
 8001b10:	4413      	add	r3, r2
 8001b12:	011b      	lsls	r3, r3, #4
 8001b14:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b18:	4a09      	ldr	r2, [pc, #36]	; (8001b40 <UART_Init+0x8c>)
 8001b1a:	4413      	add	r3, r2
 8001b1c:	3302      	adds	r3, #2
 8001b1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b22:	4619      	mov	r1, r3
 8001b24:	f004 f80e 	bl	8005b44 <HAL_UART_Receive_DMA>
	for(uint8_t u = 0; u < uart_eCOUNT; u ++)
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	71fb      	strb	r3, [r7, #7]
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d9cc      	bls.n	8001ace <UART_Init+0x1a>
	}
}
 8001b34:	bf00      	nop
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000550 	.word	0x20000550
 8001b44:	20000f34 	.word	0x20000f34
 8001b48:	20000f78 	.word	0x20000f78

08001b4c <UART_Transmit>:
 * @param id Id of the uart to use
 * @param data Array with the data
 * @param len Length of the data array
 */
void UART_Transmit(uart_e id, uint8_t * data, uint16_t len)
{
 8001b4c:	b590      	push	{r4, r7, lr}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	6039      	str	r1, [r7, #0]
 8001b56:	71fb      	strb	r3, [r7, #7]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	80bb      	strh	r3, [r7, #4]
	for(uint16_t c = 0; c < len; c ++)
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	81fb      	strh	r3, [r7, #14]
 8001b60:	e020      	b.n	8001ba4 <UART_Transmit+0x58>
	{
		uart[id].buffer_tx[(uart[id].index_write_tx + c) % LEN_BUFFER] = data[c];
 8001b62:	89fb      	ldrh	r3, [r7, #14]
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	18d0      	adds	r0, r2, r3
 8001b68:	79fa      	ldrb	r2, [r7, #7]
 8001b6a:	79f9      	ldrb	r1, [r7, #7]
 8001b6c:	4c50      	ldr	r4, [pc, #320]	; (8001cb0 <UART_Transmit+0x164>)
 8001b6e:	460b      	mov	r3, r1
 8001b70:	019b      	lsls	r3, r3, #6
 8001b72:	440b      	add	r3, r1
 8001b74:	011b      	lsls	r3, r3, #4
 8001b76:	4423      	add	r3, r4
 8001b78:	f203 2306 	addw	r3, r3, #518	; 0x206
 8001b7c:	8819      	ldrh	r1, [r3, #0]
 8001b7e:	89fb      	ldrh	r3, [r7, #14]
 8001b80:	440b      	add	r3, r1
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8001b88:	7804      	ldrb	r4, [r0, #0]
 8001b8a:	4849      	ldr	r0, [pc, #292]	; (8001cb0 <UART_Transmit+0x164>)
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	019b      	lsls	r3, r3, #6
 8001b90:	4413      	add	r3, r2
 8001b92:	011b      	lsls	r3, r3, #4
 8001b94:	4403      	add	r3, r0
 8001b96:	440b      	add	r3, r1
 8001b98:	3306      	adds	r3, #6
 8001b9a:	4622      	mov	r2, r4
 8001b9c:	701a      	strb	r2, [r3, #0]
	for(uint16_t c = 0; c < len; c ++)
 8001b9e:	89fb      	ldrh	r3, [r7, #14]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	81fb      	strh	r3, [r7, #14]
 8001ba4:	89fa      	ldrh	r2, [r7, #14]
 8001ba6:	88bb      	ldrh	r3, [r7, #4]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d3da      	bcc.n	8001b62 <UART_Transmit+0x16>
	}
	uart[id].index_write_tx = (uart[id].index_write_tx + len) % LEN_BUFFER;
 8001bac:	79fa      	ldrb	r2, [r7, #7]
 8001bae:	4940      	ldr	r1, [pc, #256]	; (8001cb0 <UART_Transmit+0x164>)
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	019b      	lsls	r3, r3, #6
 8001bb4:	4413      	add	r3, r2
 8001bb6:	011b      	lsls	r3, r3, #4
 8001bb8:	440b      	add	r3, r1
 8001bba:	f203 2306 	addw	r3, r3, #518	; 0x206
 8001bbe:	881a      	ldrh	r2, [r3, #0]
 8001bc0:	88bb      	ldrh	r3, [r7, #4]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	79fa      	ldrb	r2, [r7, #7]
 8001bc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bcc:	b298      	uxth	r0, r3
 8001bce:	4938      	ldr	r1, [pc, #224]	; (8001cb0 <UART_Transmit+0x164>)
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	019b      	lsls	r3, r3, #6
 8001bd4:	4413      	add	r3, r2
 8001bd6:	011b      	lsls	r3, r3, #4
 8001bd8:	440b      	add	r3, r1
 8001bda:	f203 2306 	addw	r3, r3, #518	; 0x206
 8001bde:	4602      	mov	r2, r0
 8001be0:	801a      	strh	r2, [r3, #0]
	if(uart[id].transmission_state == transmission_state_eIDLE)
 8001be2:	79fa      	ldrb	r2, [r7, #7]
 8001be4:	4932      	ldr	r1, [pc, #200]	; (8001cb0 <UART_Transmit+0x164>)
 8001be6:	4613      	mov	r3, r2
 8001be8:	019b      	lsls	r3, r3, #6
 8001bea:	4413      	add	r3, r2
 8001bec:	011b      	lsls	r3, r3, #4
 8001bee:	440b      	add	r3, r1
 8001bf0:	3305      	adds	r3, #5
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d157      	bne.n	8001ca8 <UART_Transmit+0x15c>
	{
		uart[id].transmission_state = transmission_state_eIN_PROGRESS;
 8001bf8:	79fa      	ldrb	r2, [r7, #7]
 8001bfa:	492d      	ldr	r1, [pc, #180]	; (8001cb0 <UART_Transmit+0x164>)
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	019b      	lsls	r3, r3, #6
 8001c00:	4413      	add	r3, r2
 8001c02:	011b      	lsls	r3, r3, #4
 8001c04:	440b      	add	r3, r1
 8001c06:	3305      	adds	r3, #5
 8001c08:	2201      	movs	r2, #1
 8001c0a:	701a      	strb	r2, [r3, #0]
		uint16_t nb_bytes_before_end_of_buffer = LEN_BUFFER - uart[id].index_read_tx;
 8001c0c:	79fa      	ldrb	r2, [r7, #7]
 8001c0e:	4928      	ldr	r1, [pc, #160]	; (8001cb0 <UART_Transmit+0x164>)
 8001c10:	4613      	mov	r3, r2
 8001c12:	019b      	lsls	r3, r3, #6
 8001c14:	4413      	add	r3, r2
 8001c16:	011b      	lsls	r3, r3, #4
 8001c18:	440b      	add	r3, r1
 8001c1a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001c24:	81bb      	strh	r3, [r7, #12]
		len = MIN(len, nb_bytes_before_end_of_buffer);
 8001c26:	88ba      	ldrh	r2, [r7, #4]
 8001c28:	89bb      	ldrh	r3, [r7, #12]
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	bf28      	it	cs
 8001c2e:	4613      	movcs	r3, r2
 8001c30:	80bb      	strh	r3, [r7, #4]
		HAL_UART_Transmit_DMA(uart[id].huart, &uart[id].buffer_tx[uart[id].index_read_tx], len);
 8001c32:	79fa      	ldrb	r2, [r7, #7]
 8001c34:	491e      	ldr	r1, [pc, #120]	; (8001cb0 <UART_Transmit+0x164>)
 8001c36:	4613      	mov	r3, r2
 8001c38:	019b      	lsls	r3, r3, #6
 8001c3a:	4413      	add	r3, r2
 8001c3c:	011b      	lsls	r3, r3, #4
 8001c3e:	440b      	add	r3, r1
 8001c40:	6818      	ldr	r0, [r3, #0]
 8001c42:	79fa      	ldrb	r2, [r7, #7]
 8001c44:	79f9      	ldrb	r1, [r7, #7]
 8001c46:	4c1a      	ldr	r4, [pc, #104]	; (8001cb0 <UART_Transmit+0x164>)
 8001c48:	460b      	mov	r3, r1
 8001c4a:	019b      	lsls	r3, r3, #6
 8001c4c:	440b      	add	r3, r1
 8001c4e:	011b      	lsls	r3, r3, #4
 8001c50:	4423      	add	r3, r4
 8001c52:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	019b      	lsls	r3, r3, #6
 8001c5e:	4413      	add	r3, r2
 8001c60:	011b      	lsls	r3, r3, #4
 8001c62:	440b      	add	r3, r1
 8001c64:	4a12      	ldr	r2, [pc, #72]	; (8001cb0 <UART_Transmit+0x164>)
 8001c66:	4413      	add	r3, r2
 8001c68:	3306      	adds	r3, #6
 8001c6a:	88ba      	ldrh	r2, [r7, #4]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f003 feeb 	bl	8005a48 <HAL_UART_Transmit_DMA>
		uart[id].index_read_tx = (uart[id].index_read_tx + len) % LEN_BUFFER;
 8001c72:	79fa      	ldrb	r2, [r7, #7]
 8001c74:	490e      	ldr	r1, [pc, #56]	; (8001cb0 <UART_Transmit+0x164>)
 8001c76:	4613      	mov	r3, r2
 8001c78:	019b      	lsls	r3, r3, #6
 8001c7a:	4413      	add	r3, r2
 8001c7c:	011b      	lsls	r3, r3, #4
 8001c7e:	440b      	add	r3, r1
 8001c80:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c84:	881a      	ldrh	r2, [r3, #0]
 8001c86:	88bb      	ldrh	r3, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	79fa      	ldrb	r2, [r7, #7]
 8001c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c92:	b298      	uxth	r0, r3
 8001c94:	4906      	ldr	r1, [pc, #24]	; (8001cb0 <UART_Transmit+0x164>)
 8001c96:	4613      	mov	r3, r2
 8001c98:	019b      	lsls	r3, r3, #6
 8001c9a:	4413      	add	r3, r2
 8001c9c:	011b      	lsls	r3, r3, #4
 8001c9e:	440b      	add	r3, r1
 8001ca0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	801a      	strh	r2, [r3, #0]
	}
}
 8001ca8:	bf00      	nop
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd90      	pop	{r4, r7, pc}
 8001cb0:	20000550 	.word	0x20000550

08001cb4 <get_nb_bytes_available>:
 * @brief Compute the numbers of byte available in the buffer
 * @param id Id of the uart
 * @return nb of bytes available
 */
uint16_t get_nb_bytes_available(uart_e id)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	71fb      	strb	r3, [r7, #7]
	uint16_t nb = 0 ;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	81fb      	strh	r3, [r7, #14]
	if(uart[id].index_write_rx > uart[id].index_read_rx)
 8001cc2:	79fa      	ldrb	r2, [r7, #7]
 8001cc4:	4932      	ldr	r1, [pc, #200]	; (8001d90 <get_nb_bytes_available+0xdc>)
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	019b      	lsls	r3, r3, #6
 8001cca:	4413      	add	r3, r2
 8001ccc:	011b      	lsls	r3, r3, #4
 8001cce:	440b      	add	r3, r1
 8001cd0:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	b299      	uxth	r1, r3
 8001cd8:	79fa      	ldrb	r2, [r7, #7]
 8001cda:	482d      	ldr	r0, [pc, #180]	; (8001d90 <get_nb_bytes_available+0xdc>)
 8001cdc:	4613      	mov	r3, r2
 8001cde:	019b      	lsls	r3, r3, #6
 8001ce0:	4413      	add	r3, r2
 8001ce2:	011b      	lsls	r3, r3, #4
 8001ce4:	4403      	add	r3, r0
 8001ce6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	4299      	cmp	r1, r3
 8001cee:	d917      	bls.n	8001d20 <get_nb_bytes_available+0x6c>
	{
		nb = uart[id].index_write_rx - uart[id].index_read_rx ;
 8001cf0:	79fa      	ldrb	r2, [r7, #7]
 8001cf2:	4927      	ldr	r1, [pc, #156]	; (8001d90 <get_nb_bytes_available+0xdc>)
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	019b      	lsls	r3, r3, #6
 8001cf8:	4413      	add	r3, r2
 8001cfa:	011b      	lsls	r3, r3, #4
 8001cfc:	440b      	add	r3, r1
 8001cfe:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	b299      	uxth	r1, r3
 8001d06:	79fa      	ldrb	r2, [r7, #7]
 8001d08:	4821      	ldr	r0, [pc, #132]	; (8001d90 <get_nb_bytes_available+0xdc>)
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	019b      	lsls	r3, r3, #6
 8001d0e:	4413      	add	r3, r2
 8001d10:	011b      	lsls	r3, r3, #4
 8001d12:	4403      	add	r3, r0
 8001d14:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d18:	881b      	ldrh	r3, [r3, #0]
 8001d1a:	1acb      	subs	r3, r1, r3
 8001d1c:	81fb      	strh	r3, [r7, #14]
 8001d1e:	e030      	b.n	8001d82 <get_nb_bytes_available+0xce>
	}
	else if(uart[id].index_write_rx < uart[id].index_read_rx)
 8001d20:	79fa      	ldrb	r2, [r7, #7]
 8001d22:	491b      	ldr	r1, [pc, #108]	; (8001d90 <get_nb_bytes_available+0xdc>)
 8001d24:	4613      	mov	r3, r2
 8001d26:	019b      	lsls	r3, r3, #6
 8001d28:	4413      	add	r3, r2
 8001d2a:	011b      	lsls	r3, r3, #4
 8001d2c:	440b      	add	r3, r1
 8001d2e:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	b299      	uxth	r1, r3
 8001d36:	79fa      	ldrb	r2, [r7, #7]
 8001d38:	4815      	ldr	r0, [pc, #84]	; (8001d90 <get_nb_bytes_available+0xdc>)
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	019b      	lsls	r3, r3, #6
 8001d3e:	4413      	add	r3, r2
 8001d40:	011b      	lsls	r3, r3, #4
 8001d42:	4403      	add	r3, r0
 8001d44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d48:	881b      	ldrh	r3, [r3, #0]
 8001d4a:	4299      	cmp	r1, r3
 8001d4c:	d219      	bcs.n	8001d82 <get_nb_bytes_available+0xce>
	{
		nb = LEN_BUFFER - uart[id].index_read_rx + uart[id].index_write_rx ;
 8001d4e:	79fa      	ldrb	r2, [r7, #7]
 8001d50:	490f      	ldr	r1, [pc, #60]	; (8001d90 <get_nb_bytes_available+0xdc>)
 8001d52:	4613      	mov	r3, r2
 8001d54:	019b      	lsls	r3, r3, #6
 8001d56:	4413      	add	r3, r2
 8001d58:	011b      	lsls	r3, r3, #4
 8001d5a:	440b      	add	r3, r1
 8001d5c:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8001d60:	881b      	ldrh	r3, [r3, #0]
 8001d62:	b299      	uxth	r1, r3
 8001d64:	79fa      	ldrb	r2, [r7, #7]
 8001d66:	480a      	ldr	r0, [pc, #40]	; (8001d90 <get_nb_bytes_available+0xdc>)
 8001d68:	4613      	mov	r3, r2
 8001d6a:	019b      	lsls	r3, r3, #6
 8001d6c:	4413      	add	r3, r2
 8001d6e:	011b      	lsls	r3, r3, #4
 8001d70:	4403      	add	r3, r0
 8001d72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d76:	881b      	ldrh	r3, [r3, #0]
 8001d78:	1acb      	subs	r3, r1, r3
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001d80:	81fb      	strh	r3, [r7, #14]
	}
	return nb;
 8001d82:	89fb      	ldrh	r3, [r7, #14]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	20000550 	.word	0x20000550

08001d94 <MPU_Init>:
/*
 * @brief Wake up the MPU6000
 *		  Configure the Gyroscope and the Accelerometer
 */
void MPU_Init(void)
{
 8001d94:	b590      	push	{r4, r7, lr}
 8001d96:	b089      	sub	sp, #36	; 0x24
 8001d98:	af02      	add	r7, sp, #8
	/* Set the Gyroscope and Accelerometer data buffer */
	mpu.gyro_data = &mpu.readings[8];
 8001d9a:	4b7a      	ldr	r3, [pc, #488]	; (8001f84 <MPU_Init+0x1f0>)
 8001d9c:	4a7a      	ldr	r2, [pc, #488]	; (8001f88 <MPU_Init+0x1f4>)
 8001d9e:	615a      	str	r2, [r3, #20]
	mpu.acc_data = &mpu.readings[0];
 8001da0:	4b78      	ldr	r3, [pc, #480]	; (8001f84 <MPU_Init+0x1f0>)
 8001da2:	4a7a      	ldr	r2, [pc, #488]	; (8001f8c <MPU_Init+0x1f8>)
 8001da4:	61da      	str	r2, [r3, #28]
	/* --------------------- MPU6000 initialization --------------------------- */
	/* Disable I2C */
	uint8_t mpu_disable_i2c[] = {MPU6050_USER_CTRL, 0x10};
 8001da6:	f241 036a 	movw	r3, #4202	; 0x106a
 8001daa:	82bb      	strh	r3, [r7, #20]
	SPI_Transmit(mpu.spi, mpu.cs, mpu_disable_i2c, 2);
 8001dac:	4b75      	ldr	r3, [pc, #468]	; (8001f84 <MPU_Init+0x1f0>)
 8001dae:	7818      	ldrb	r0, [r3, #0]
 8001db0:	4b74      	ldr	r3, [pc, #464]	; (8001f84 <MPU_Init+0x1f0>)
 8001db2:	7859      	ldrb	r1, [r3, #1]
 8001db4:	f107 0214 	add.w	r2, r7, #20
 8001db8:	2302      	movs	r3, #2
 8001dba:	f7ff fc87 	bl	80016cc <SPI_Transmit>
	HAL_Delay(150);
 8001dbe:	2096      	movs	r0, #150	; 0x96
 8001dc0:	f000 fee8 	bl	8002b94 <HAL_Delay>
	/* Restart MPU */
	uint8_t wakeup_data[] = {MPU6050_PWR_MGMT_1, 0x80} ;
 8001dc4:	f248 036b 	movw	r3, #32875	; 0x806b
 8001dc8:	823b      	strh	r3, [r7, #16]
	SPI_Transmit(mpu.spi, mpu.cs, wakeup_data, 2);
 8001dca:	4b6e      	ldr	r3, [pc, #440]	; (8001f84 <MPU_Init+0x1f0>)
 8001dcc:	7818      	ldrb	r0, [r3, #0]
 8001dce:	4b6d      	ldr	r3, [pc, #436]	; (8001f84 <MPU_Init+0x1f0>)
 8001dd0:	7859      	ldrb	r1, [r3, #1]
 8001dd2:	f107 0210 	add.w	r2, r7, #16
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	f7ff fc78 	bl	80016cc <SPI_Transmit>
	HAL_Delay(1000);
 8001ddc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001de0:	f000 fed8 	bl	8002b94 <HAL_Delay>
	/* Clock select */
	uint8_t mpu_clock_sel_pll_gyroz[] = {MPU6050_PWR_MGMT_1, 0x03};
 8001de4:	f240 336b 	movw	r3, #875	; 0x36b
 8001de8:	81bb      	strh	r3, [r7, #12]
	SPI_Transmit(mpu.spi, mpu.cs, mpu_clock_sel_pll_gyroz, 2);
 8001dea:	4b66      	ldr	r3, [pc, #408]	; (8001f84 <MPU_Init+0x1f0>)
 8001dec:	7818      	ldrb	r0, [r3, #0]
 8001dee:	4b65      	ldr	r3, [pc, #404]	; (8001f84 <MPU_Init+0x1f0>)
 8001df0:	7859      	ldrb	r1, [r3, #1]
 8001df2:	f107 020c 	add.w	r2, r7, #12
 8001df6:	2302      	movs	r3, #2
 8001df8:	f7ff fc68 	bl	80016cc <SPI_Transmit>
	HAL_Delay(150);
 8001dfc:	2096      	movs	r0, #150	; 0x96
 8001dfe:	f000 fec9 	bl	8002b94 <HAL_Delay>
	/* Disable I2C */
	SPI_Transmit(mpu.spi, mpu.cs, mpu_disable_i2c, 2);
 8001e02:	4b60      	ldr	r3, [pc, #384]	; (8001f84 <MPU_Init+0x1f0>)
 8001e04:	7818      	ldrb	r0, [r3, #0]
 8001e06:	4b5f      	ldr	r3, [pc, #380]	; (8001f84 <MPU_Init+0x1f0>)
 8001e08:	7859      	ldrb	r1, [r3, #1]
 8001e0a:	f107 0214 	add.w	r2, r7, #20
 8001e0e:	2302      	movs	r3, #2
 8001e10:	f7ff fc5c 	bl	80016cc <SPI_Transmit>
	HAL_Delay(150);
 8001e14:	2096      	movs	r0, #150	; 0x96
 8001e16:	f000 febd 	bl	8002b94 <HAL_Delay>
	/* -------------------- Gyroscope initialization --------------------------- */
	uint8_t temp_write[2];
	uint8_t temp_read[2];
	temp_write[0] = MPU6050_GYRO_CONFIG | MPU6050_READ ;
 8001e1a:	239b      	movs	r3, #155	; 0x9b
 8001e1c:	723b      	strb	r3, [r7, #8]
	SPI_Transmit_Receive(mpu.spi, mpu.cs, temp_write, temp_read, 2);
 8001e1e:	4b59      	ldr	r3, [pc, #356]	; (8001f84 <MPU_Init+0x1f0>)
 8001e20:	7818      	ldrb	r0, [r3, #0]
 8001e22:	4b58      	ldr	r3, [pc, #352]	; (8001f84 <MPU_Init+0x1f0>)
 8001e24:	7859      	ldrb	r1, [r3, #1]
 8001e26:	1d3b      	adds	r3, r7, #4
 8001e28:	f107 0208 	add.w	r2, r7, #8
 8001e2c:	2402      	movs	r4, #2
 8001e2e:	9400      	str	r4, [sp, #0]
 8001e30:	f7ff fc96 	bl	8001760 <SPI_Transmit_Receive>
	HAL_Delay(150);
 8001e34:	2096      	movs	r0, #150	; 0x96
 8001e36:	f000 fead 	bl	8002b94 <HAL_Delay>
	/* If there is no answer, then there is no MPU ..*/
	if(temp_read[0] == 0 || temp_read[1] == 0)
 8001e3a:	793b      	ldrb	r3, [r7, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d002      	beq.n	8001e46 <MPU_Init+0xb2>
 8001e40:	797b      	ldrb	r3, [r7, #5]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d103      	bne.n	8001e4e <MPU_Init+0xba>
	{
		mpu.state = mpu_state_eNO_ANSWER;
 8001e46:	4b4f      	ldr	r3, [pc, #316]	; (8001f84 <MPU_Init+0x1f0>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	709a      	strb	r2, [r3, #2]
		return;
 8001e4c:	e096      	b.n	8001f7c <MPU_Init+0x1e8>
	}
	/* Sensitivity configuration */
	temp_write[0] = MPU6050_GYRO_CONFIG;
 8001e4e:	231b      	movs	r3, #27
 8001e50:	723b      	strb	r3, [r7, #8]
	temp_write[1] = (temp_read[1] & 0xE7) | (uint8_t)mpu.gyro_range << 3;
 8001e52:	797b      	ldrb	r3, [r7, #5]
 8001e54:	b25b      	sxtb	r3, r3
 8001e56:	f023 0318 	bic.w	r3, r3, #24
 8001e5a:	b25a      	sxtb	r2, r3
 8001e5c:	4b49      	ldr	r3, [pc, #292]	; (8001f84 <MPU_Init+0x1f0>)
 8001e5e:	7c5b      	ldrb	r3, [r3, #17]
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	b25b      	sxtb	r3, r3
 8001e64:	4313      	orrs	r3, r2
 8001e66:	b25b      	sxtb	r3, r3
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	727b      	strb	r3, [r7, #9]
	SPI_Transmit(mpu.spi, mpu.cs, temp_write, 2);
 8001e6c:	4b45      	ldr	r3, [pc, #276]	; (8001f84 <MPU_Init+0x1f0>)
 8001e6e:	7818      	ldrb	r0, [r3, #0]
 8001e70:	4b44      	ldr	r3, [pc, #272]	; (8001f84 <MPU_Init+0x1f0>)
 8001e72:	7859      	ldrb	r1, [r3, #1]
 8001e74:	f107 0208 	add.w	r2, r7, #8
 8001e78:	2302      	movs	r3, #2
 8001e7a:	f7ff fc27 	bl	80016cc <SPI_Transmit>
	HAL_Delay(150);
 8001e7e:	2096      	movs	r0, #150	; 0x96
 8001e80:	f000 fe88 	bl	8002b94 <HAL_Delay>
	switch(mpu.gyro_range)
 8001e84:	4b3f      	ldr	r3, [pc, #252]	; (8001f84 <MPU_Init+0x1f0>)
 8001e86:	7c5b      	ldrb	r3, [r3, #17]
 8001e88:	2b03      	cmp	r3, #3
 8001e8a:	d81b      	bhi.n	8001ec4 <MPU_Init+0x130>
 8001e8c:	a201      	add	r2, pc, #4	; (adr r2, 8001e94 <MPU_Init+0x100>)
 8001e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e92:	bf00      	nop
 8001e94:	08001ea5 	.word	0x08001ea5
 8001e98:	08001ead 	.word	0x08001ead
 8001e9c:	08001eb5 	.word	0x08001eb5
 8001ea0:	08001ebd 	.word	0x08001ebd
	{
		case MPU_GYRO_250s :
			mpu.gyro_conversion = (float)1 / MPU6050_GYRO_SENS_250 ;
 8001ea4:	4b37      	ldr	r3, [pc, #220]	; (8001f84 <MPU_Init+0x1f0>)
 8001ea6:	4a3a      	ldr	r2, [pc, #232]	; (8001f90 <MPU_Init+0x1fc>)
 8001ea8:	619a      	str	r2, [r3, #24]
			break;
 8001eaa:	e00b      	b.n	8001ec4 <MPU_Init+0x130>
		case MPU_GYRO_500s :
			mpu.gyro_conversion = (float)1 / MPU6050_GYRO_SENS_500 ;
 8001eac:	4b35      	ldr	r3, [pc, #212]	; (8001f84 <MPU_Init+0x1f0>)
 8001eae:	4a39      	ldr	r2, [pc, #228]	; (8001f94 <MPU_Init+0x200>)
 8001eb0:	619a      	str	r2, [r3, #24]
			break;
 8001eb2:	e007      	b.n	8001ec4 <MPU_Init+0x130>
		case MPU_GYRO_1000s :
			mpu.gyro_conversion = (float)1 / MPU6050_GYRO_SENS_1000 ;
 8001eb4:	4b33      	ldr	r3, [pc, #204]	; (8001f84 <MPU_Init+0x1f0>)
 8001eb6:	4a38      	ldr	r2, [pc, #224]	; (8001f98 <MPU_Init+0x204>)
 8001eb8:	619a      	str	r2, [r3, #24]
			break;
 8001eba:	e003      	b.n	8001ec4 <MPU_Init+0x130>
		case MPU_GYRO_2000s :
			mpu.gyro_conversion = (float)1 / MPU6050_GYRO_SENS_2000 ;
 8001ebc:	4b31      	ldr	r3, [pc, #196]	; (8001f84 <MPU_Init+0x1f0>)
 8001ebe:	4a37      	ldr	r2, [pc, #220]	; (8001f9c <MPU_Init+0x208>)
 8001ec0:	619a      	str	r2, [r3, #24]
			break;
 8001ec2:	bf00      	nop
	}
	/* -------------------- Accelerometer initialization --------------------------- */
	temp_write[0] = MPU6050_ACCEL_CONFIG | MPU6050_READ ;
 8001ec4:	239c      	movs	r3, #156	; 0x9c
 8001ec6:	723b      	strb	r3, [r7, #8]
	temp_write[1] = 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	727b      	strb	r3, [r7, #9]
	SPI_Transmit_Receive(mpu.spi, mpu.cs, temp_write, temp_read, 2);
 8001ecc:	4b2d      	ldr	r3, [pc, #180]	; (8001f84 <MPU_Init+0x1f0>)
 8001ece:	7818      	ldrb	r0, [r3, #0]
 8001ed0:	4b2c      	ldr	r3, [pc, #176]	; (8001f84 <MPU_Init+0x1f0>)
 8001ed2:	7859      	ldrb	r1, [r3, #1]
 8001ed4:	1d3b      	adds	r3, r7, #4
 8001ed6:	f107 0208 	add.w	r2, r7, #8
 8001eda:	2402      	movs	r4, #2
 8001edc:	9400      	str	r4, [sp, #0]
 8001ede:	f7ff fc3f 	bl	8001760 <SPI_Transmit_Receive>
	/* If there is no answer, then there is no MPU ..*/
	if(temp_read[0] == 0 || temp_read[1] == 0)
 8001ee2:	793b      	ldrb	r3, [r7, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d002      	beq.n	8001eee <MPU_Init+0x15a>
 8001ee8:	797b      	ldrb	r3, [r7, #5]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d103      	bne.n	8001ef6 <MPU_Init+0x162>
	{
		mpu.state = mpu_state_eNO_ANSWER;
 8001eee:	4b25      	ldr	r3, [pc, #148]	; (8001f84 <MPU_Init+0x1f0>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	709a      	strb	r2, [r3, #2]
		return;
 8001ef4:	e042      	b.n	8001f7c <MPU_Init+0x1e8>
	}
	HAL_Delay(150);
 8001ef6:	2096      	movs	r0, #150	; 0x96
 8001ef8:	f000 fe4c 	bl	8002b94 <HAL_Delay>
	/* Sensitivity configuration */
	temp_write[0] = MPU6050_ACCEL_CONFIG;
 8001efc:	231c      	movs	r3, #28
 8001efe:	723b      	strb	r3, [r7, #8]
	temp_write[1] = (temp_read[1] & 0xE7) | (uint8_t)mpu.acc_range << 3;
 8001f00:	797b      	ldrb	r3, [r7, #5]
 8001f02:	b25b      	sxtb	r3, r3
 8001f04:	f023 0318 	bic.w	r3, r3, #24
 8001f08:	b25a      	sxtb	r2, r3
 8001f0a:	4b1e      	ldr	r3, [pc, #120]	; (8001f84 <MPU_Init+0x1f0>)
 8001f0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	b25b      	sxtb	r3, r3
 8001f14:	4313      	orrs	r3, r2
 8001f16:	b25b      	sxtb	r3, r3
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	727b      	strb	r3, [r7, #9]
	SPI_Transmit(mpu.spi, mpu.cs, temp_write, 2);
 8001f1c:	4b19      	ldr	r3, [pc, #100]	; (8001f84 <MPU_Init+0x1f0>)
 8001f1e:	7818      	ldrb	r0, [r3, #0]
 8001f20:	4b18      	ldr	r3, [pc, #96]	; (8001f84 <MPU_Init+0x1f0>)
 8001f22:	7859      	ldrb	r1, [r3, #1]
 8001f24:	f107 0208 	add.w	r2, r7, #8
 8001f28:	2302      	movs	r3, #2
 8001f2a:	f7ff fbcf 	bl	80016cc <SPI_Transmit>
	HAL_Delay(150);
 8001f2e:	2096      	movs	r0, #150	; 0x96
 8001f30:	f000 fe30 	bl	8002b94 <HAL_Delay>
	switch(mpu.acc_range)
 8001f34:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <MPU_Init+0x1f0>)
 8001f36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f3a:	2b03      	cmp	r3, #3
 8001f3c:	d81e      	bhi.n	8001f7c <MPU_Init+0x1e8>
 8001f3e:	a201      	add	r2, pc, #4	; (adr r2, 8001f44 <MPU_Init+0x1b0>)
 8001f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f44:	08001f55 	.word	0x08001f55
 8001f48:	08001f5f 	.word	0x08001f5f
 8001f4c:	08001f69 	.word	0x08001f69
 8001f50:	08001f73 	.word	0x08001f73
	{
		case MPU_ACC_2G :
			mpu.acc_conversion = (float)1 / MPU6050_ACCE_SENS_2 ;
 8001f54:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <MPU_Init+0x1f0>)
 8001f56:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8001f5a:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8001f5c:	e00e      	b.n	8001f7c <MPU_Init+0x1e8>
		case MPU_ACC_4G :
			mpu.acc_conversion = (float)1 / MPU6050_ACCE_SENS_4 ;
 8001f5e:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <MPU_Init+0x1f0>)
 8001f60:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001f64:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8001f66:	e009      	b.n	8001f7c <MPU_Init+0x1e8>
		case MPU_ACC_8G :
			mpu.acc_conversion = (float)1 / MPU6050_ACCE_SENS_8 ;
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <MPU_Init+0x1f0>)
 8001f6a:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8001f6e:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8001f70:	e004      	b.n	8001f7c <MPU_Init+0x1e8>
		case MPU_ACC_16G :
			mpu.acc_conversion = (float)1 / MPU6050_ACCE_SENS_16 ;
 8001f72:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <MPU_Init+0x1f0>)
 8001f74:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001f78:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8001f7a:	bf00      	nop
	}
}
 8001f7c:	371c      	adds	r7, #28
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd90      	pop	{r4, r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000358 	.word	0x20000358
 8001f88:	20000363 	.word	0x20000363
 8001f8c:	2000035b 	.word	0x2000035b
 8001f90:	3bfa232d 	.word	0x3bfa232d
 8001f94:	3c7a232d 	.word	0x3c7a232d
 8001f98:	3cf9c190 	.word	0x3cf9c190
 8001f9c:	3d79c190 	.word	0x3d79c190

08001fa0 <MPU_Read_All>:
void MPU_Read_All(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af02      	add	r7, sp, #8
	uint8_t registers [14] = {MPU6050_ACCEL_XOUT_H | MPU6050_READ};
 8001fa6:	23bb      	movs	r3, #187	; 0xbb
 8001fa8:	603b      	str	r3, [r7, #0]
 8001faa:	1d3b      	adds	r3, r7, #4
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	811a      	strh	r2, [r3, #8]
	SPI_Transmit_Receive(mpu.spi, mpu.cs, registers, mpu.readings, 14);
 8001fb4:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <MPU_Read_All+0x30>)
 8001fb6:	7818      	ldrb	r0, [r3, #0]
 8001fb8:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <MPU_Read_All+0x30>)
 8001fba:	7859      	ldrb	r1, [r3, #1]
 8001fbc:	463a      	mov	r2, r7
 8001fbe:	230e      	movs	r3, #14
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <MPU_Read_All+0x34>)
 8001fc4:	f7ff fbcc 	bl	8001760 <SPI_Transmit_Receive>
}
 8001fc8:	bf00      	nop
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20000358 	.word	0x20000358
 8001fd4:	2000035b 	.word	0x2000035b

08001fd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	607b      	str	r3, [r7, #4]
 8001fe2:	4b1f      	ldr	r3, [pc, #124]	; (8002060 <MX_DMA_Init+0x88>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	4a1e      	ldr	r2, [pc, #120]	; (8002060 <MX_DMA_Init+0x88>)
 8001fe8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fec:	6313      	str	r3, [r2, #48]	; 0x30
 8001fee:	4b1c      	ldr	r3, [pc, #112]	; (8002060 <MX_DMA_Init+0x88>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff6:	607b      	str	r3, [r7, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	603b      	str	r3, [r7, #0]
 8001ffe:	4b18      	ldr	r3, [pc, #96]	; (8002060 <MX_DMA_Init+0x88>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	4a17      	ldr	r2, [pc, #92]	; (8002060 <MX_DMA_Init+0x88>)
 8002004:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002008:	6313      	str	r3, [r2, #48]	; 0x30
 800200a:	4b15      	ldr	r3, [pc, #84]	; (8002060 <MX_DMA_Init+0x88>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002012:	603b      	str	r3, [r7, #0]
 8002014:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002016:	2200      	movs	r2, #0
 8002018:	2100      	movs	r1, #0
 800201a:	200d      	movs	r0, #13
 800201c:	f000 feb9 	bl	8002d92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002020:	200d      	movs	r0, #13
 8002022:	f000 fed2 	bl	8002dca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002026:	2200      	movs	r2, #0
 8002028:	2100      	movs	r1, #0
 800202a:	200f      	movs	r0, #15
 800202c:	f000 feb1 	bl	8002d92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002030:	200f      	movs	r0, #15
 8002032:	f000 feca 	bl	8002dca <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002036:	2200      	movs	r2, #0
 8002038:	2100      	movs	r1, #0
 800203a:	203a      	movs	r0, #58	; 0x3a
 800203c:	f000 fea9 	bl	8002d92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002040:	203a      	movs	r0, #58	; 0x3a
 8002042:	f000 fec2 	bl	8002dca <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	2100      	movs	r1, #0
 800204a:	2046      	movs	r0, #70	; 0x46
 800204c:	f000 fea1 	bl	8002d92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002050:	2046      	movs	r0, #70	; 0x46
 8002052:	f000 feba 	bl	8002dca <HAL_NVIC_EnableIRQ>

}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800

08002064 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206a:	f107 030c 	add.w	r3, r7, #12
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	605a      	str	r2, [r3, #4]
 8002074:	609a      	str	r2, [r3, #8]
 8002076:	60da      	str	r2, [r3, #12]
 8002078:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	4b20      	ldr	r3, [pc, #128]	; (8002100 <MX_GPIO_Init+0x9c>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	4a1f      	ldr	r2, [pc, #124]	; (8002100 <MX_GPIO_Init+0x9c>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	6313      	str	r3, [r2, #48]	; 0x30
 800208a:	4b1d      	ldr	r3, [pc, #116]	; (8002100 <MX_GPIO_Init+0x9c>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	607b      	str	r3, [r7, #4]
 800209a:	4b19      	ldr	r3, [pc, #100]	; (8002100 <MX_GPIO_Init+0x9c>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	4a18      	ldr	r2, [pc, #96]	; (8002100 <MX_GPIO_Init+0x9c>)
 80020a0:	f043 0302 	orr.w	r3, r3, #2
 80020a4:	6313      	str	r3, [r2, #48]	; 0x30
 80020a6:	4b16      	ldr	r3, [pc, #88]	; (8002100 <MX_GPIO_Init+0x9c>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	607b      	str	r3, [r7, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	603b      	str	r3, [r7, #0]
 80020b6:	4b12      	ldr	r3, [pc, #72]	; (8002100 <MX_GPIO_Init+0x9c>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4a11      	ldr	r2, [pc, #68]	; (8002100 <MX_GPIO_Init+0x9c>)
 80020bc:	f043 0304 	orr.w	r3, r3, #4
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4b0f      	ldr	r3, [pc, #60]	; (8002100 <MX_GPIO_Init+0x9c>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0304 	and.w	r3, r3, #4
 80020ca:	603b      	str	r3, [r7, #0]
 80020cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MPU_CS_GPIO_Port, MPU_CS_Pin, GPIO_PIN_RESET);
 80020ce:	2200      	movs	r2, #0
 80020d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020d4:	480b      	ldr	r0, [pc, #44]	; (8002104 <MX_GPIO_Init+0xa0>)
 80020d6:	f001 fc31 	bl	800393c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MPU_CS_Pin;
 80020da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e0:	2301      	movs	r3, #1
 80020e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e8:	2300      	movs	r3, #0
 80020ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MPU_CS_GPIO_Port, &GPIO_InitStruct);
 80020ec:	f107 030c 	add.w	r3, r7, #12
 80020f0:	4619      	mov	r1, r3
 80020f2:	4804      	ldr	r0, [pc, #16]	; (8002104 <MX_GPIO_Init+0xa0>)
 80020f4:	f001 fa86 	bl	8003604 <HAL_GPIO_Init>

}
 80020f8:	bf00      	nop
 80020fa:	3720      	adds	r7, #32
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40023800 	.word	0x40023800
 8002104:	40020000 	.word	0x40020000

08002108 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800210c:	f000 fcd0 	bl	8002ab0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002110:	f000 f822 	bl	8002158 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002114:	f7ff ffa6 	bl	8002064 <MX_GPIO_Init>
  MX_DMA_Init();
 8002118:	f7ff ff5e 	bl	8001fd8 <MX_DMA_Init>
  MX_UART4_Init();
 800211c:	f000 faf0 	bl	8002700 <MX_UART4_Init>
  MX_SPI3_Init();
 8002120:	f000 f88a 	bl	8002238 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8002124:	f000 fb16 	bl	8002754 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002128:	f000 f9d6 	bl	80024d8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* Peripherals initialization */
  UART_Init();
 800212c:	f7ff fcc2 	bl	8001ab4 <UART_Init>
//  SPI_Init(); C est de la merde ça marche pas :!!!!!!!!!!!!!!!!!!!!!!!!!!! dsfng:;jnsdfgkdfsg
  /* Sensors initialization */
  MPU_Init();
 8002130:	f7ff fe30 	bl	8001d94 <MPU_Init>

  /* System initialization */
  DATA_LOGGER_Init(&mark1);
 8002134:	4807      	ldr	r0, [pc, #28]	; (8002154 <main+0x4c>)
 8002136:	f7fe f9c3 	bl	80004c0 <DATA_LOGGER_Init>
  TASK_Init(&mark1);
 800213a:	4806      	ldr	r0, [pc, #24]	; (8002154 <main+0x4c>)
 800213c:	f7ff fa3a 	bl	80015b4 <TASK_Init>
  SCHEDULER_init();
 8002140:	f7fe ff76 	bl	8001030 <SCHEDULER_init>
  TIMER_Start(timer_eMOTORS, TIM_CHANNEL_ALL);
 8002144:	213c      	movs	r1, #60	; 0x3c
 8002146:	2000      	movs	r0, #0
 8002148:	f7ff fb52 	bl	80017f0 <TIMER_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCHEDULER_run();
 800214c:	f7fe ff84 	bl	8001058 <SCHEDULER_run>
 8002150:	e7fc      	b.n	800214c <main+0x44>
 8002152:	bf00      	nop
 8002154:	20000d70 	.word	0x20000d70

08002158 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b094      	sub	sp, #80	; 0x50
 800215c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800215e:	f107 0320 	add.w	r3, r7, #32
 8002162:	2230      	movs	r2, #48	; 0x30
 8002164:	2100      	movs	r1, #0
 8002166:	4618      	mov	r0, r3
 8002168:	f004 fda2 	bl	8006cb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800216c:	f107 030c 	add.w	r3, r7, #12
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800217c:	2300      	movs	r3, #0
 800217e:	60bb      	str	r3, [r7, #8]
 8002180:	4b28      	ldr	r3, [pc, #160]	; (8002224 <SystemClock_Config+0xcc>)
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	4a27      	ldr	r2, [pc, #156]	; (8002224 <SystemClock_Config+0xcc>)
 8002186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800218a:	6413      	str	r3, [r2, #64]	; 0x40
 800218c:	4b25      	ldr	r3, [pc, #148]	; (8002224 <SystemClock_Config+0xcc>)
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002198:	2300      	movs	r3, #0
 800219a:	607b      	str	r3, [r7, #4]
 800219c:	4b22      	ldr	r3, [pc, #136]	; (8002228 <SystemClock_Config+0xd0>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a21      	ldr	r2, [pc, #132]	; (8002228 <SystemClock_Config+0xd0>)
 80021a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	4b1f      	ldr	r3, [pc, #124]	; (8002228 <SystemClock_Config+0xd0>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021b0:	607b      	str	r3, [r7, #4]
 80021b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021b4:	2302      	movs	r3, #2
 80021b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021b8:	2301      	movs	r3, #1
 80021ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021bc:	2310      	movs	r3, #16
 80021be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021c0:	2302      	movs	r3, #2
 80021c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021c4:	2300      	movs	r3, #0
 80021c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80021c8:	2308      	movs	r3, #8
 80021ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80021cc:	23a8      	movs	r3, #168	; 0xa8
 80021ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021d0:	2302      	movs	r3, #2
 80021d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80021d4:	2304      	movs	r3, #4
 80021d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021d8:	f107 0320 	add.w	r3, r7, #32
 80021dc:	4618      	mov	r0, r3
 80021de:	f001 fbc7 	bl	8003970 <HAL_RCC_OscConfig>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80021e8:	f000 f820 	bl	800222c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021ec:	230f      	movs	r3, #15
 80021ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021f0:	2302      	movs	r3, #2
 80021f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80021f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80021fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002202:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002204:	f107 030c 	add.w	r3, r7, #12
 8002208:	2105      	movs	r1, #5
 800220a:	4618      	mov	r0, r3
 800220c:	f001 fe28 	bl	8003e60 <HAL_RCC_ClockConfig>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002216:	f000 f809 	bl	800222c <Error_Handler>
  }
}
 800221a:	bf00      	nop
 800221c:	3750      	adds	r7, #80	; 0x50
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40023800 	.word	0x40023800
 8002228:	40007000 	.word	0x40007000

0800222c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002230:	b672      	cpsid	i
}
 8002232:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002234:	e7fe      	b.n	8002234 <Error_Handler+0x8>
	...

08002238 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800223c:	4b17      	ldr	r3, [pc, #92]	; (800229c <MX_SPI3_Init+0x64>)
 800223e:	4a18      	ldr	r2, [pc, #96]	; (80022a0 <MX_SPI3_Init+0x68>)
 8002240:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002242:	4b16      	ldr	r3, [pc, #88]	; (800229c <MX_SPI3_Init+0x64>)
 8002244:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002248:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800224a:	4b14      	ldr	r3, [pc, #80]	; (800229c <MX_SPI3_Init+0x64>)
 800224c:	2200      	movs	r2, #0
 800224e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002250:	4b12      	ldr	r3, [pc, #72]	; (800229c <MX_SPI3_Init+0x64>)
 8002252:	2200      	movs	r2, #0
 8002254:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002256:	4b11      	ldr	r3, [pc, #68]	; (800229c <MX_SPI3_Init+0x64>)
 8002258:	2200      	movs	r2, #0
 800225a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800225c:	4b0f      	ldr	r3, [pc, #60]	; (800229c <MX_SPI3_Init+0x64>)
 800225e:	2200      	movs	r2, #0
 8002260:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002262:	4b0e      	ldr	r3, [pc, #56]	; (800229c <MX_SPI3_Init+0x64>)
 8002264:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002268:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800226a:	4b0c      	ldr	r3, [pc, #48]	; (800229c <MX_SPI3_Init+0x64>)
 800226c:	2230      	movs	r2, #48	; 0x30
 800226e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002270:	4b0a      	ldr	r3, [pc, #40]	; (800229c <MX_SPI3_Init+0x64>)
 8002272:	2200      	movs	r2, #0
 8002274:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002276:	4b09      	ldr	r3, [pc, #36]	; (800229c <MX_SPI3_Init+0x64>)
 8002278:	2200      	movs	r2, #0
 800227a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800227c:	4b07      	ldr	r3, [pc, #28]	; (800229c <MX_SPI3_Init+0x64>)
 800227e:	2200      	movs	r2, #0
 8002280:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002282:	4b06      	ldr	r3, [pc, #24]	; (800229c <MX_SPI3_Init+0x64>)
 8002284:	220a      	movs	r2, #10
 8002286:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002288:	4804      	ldr	r0, [pc, #16]	; (800229c <MX_SPI3_Init+0x64>)
 800228a:	f001 ffb9 	bl	8004200 <HAL_SPI_Init>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002294:	f7ff ffca 	bl	800222c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002298:	bf00      	nop
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20000d74 	.word	0x20000d74
 80022a0:	40003c00 	.word	0x40003c00

080022a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08a      	sub	sp, #40	; 0x28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ac:	f107 0314 	add.w	r3, r7, #20
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a1d      	ldr	r2, [pc, #116]	; (8002338 <HAL_SPI_MspInit+0x94>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d134      	bne.n	8002330 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
 80022ca:	4b1c      	ldr	r3, [pc, #112]	; (800233c <HAL_SPI_MspInit+0x98>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	4a1b      	ldr	r2, [pc, #108]	; (800233c <HAL_SPI_MspInit+0x98>)
 80022d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022d4:	6413      	str	r3, [r2, #64]	; 0x40
 80022d6:	4b19      	ldr	r3, [pc, #100]	; (800233c <HAL_SPI_MspInit+0x98>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	4b15      	ldr	r3, [pc, #84]	; (800233c <HAL_SPI_MspInit+0x98>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	4a14      	ldr	r2, [pc, #80]	; (800233c <HAL_SPI_MspInit+0x98>)
 80022ec:	f043 0304 	orr.w	r3, r3, #4
 80022f0:	6313      	str	r3, [r2, #48]	; 0x30
 80022f2:	4b12      	ldr	r3, [pc, #72]	; (800233c <HAL_SPI_MspInit+0x98>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	f003 0304 	and.w	r3, r3, #4
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80022fe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002304:	2302      	movs	r3, #2
 8002306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002308:	2300      	movs	r3, #0
 800230a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800230c:	2303      	movs	r3, #3
 800230e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002310:	2306      	movs	r3, #6
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002314:	f107 0314 	add.w	r3, r7, #20
 8002318:	4619      	mov	r1, r3
 800231a:	4809      	ldr	r0, [pc, #36]	; (8002340 <HAL_SPI_MspInit+0x9c>)
 800231c:	f001 f972 	bl	8003604 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8002320:	2200      	movs	r2, #0
 8002322:	2100      	movs	r1, #0
 8002324:	2033      	movs	r0, #51	; 0x33
 8002326:	f000 fd34 	bl	8002d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800232a:	2033      	movs	r0, #51	; 0x33
 800232c:	f000 fd4d 	bl	8002dca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002330:	bf00      	nop
 8002332:	3728      	adds	r7, #40	; 0x28
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40003c00 	.word	0x40003c00
 800233c:	40023800 	.word	0x40023800
 8002340:	40020800 	.word	0x40020800

08002344 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	607b      	str	r3, [r7, #4]
 800234e:	4b10      	ldr	r3, [pc, #64]	; (8002390 <HAL_MspInit+0x4c>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002352:	4a0f      	ldr	r2, [pc, #60]	; (8002390 <HAL_MspInit+0x4c>)
 8002354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002358:	6453      	str	r3, [r2, #68]	; 0x44
 800235a:	4b0d      	ldr	r3, [pc, #52]	; (8002390 <HAL_MspInit+0x4c>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002362:	607b      	str	r3, [r7, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	603b      	str	r3, [r7, #0]
 800236a:	4b09      	ldr	r3, [pc, #36]	; (8002390 <HAL_MspInit+0x4c>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	4a08      	ldr	r2, [pc, #32]	; (8002390 <HAL_MspInit+0x4c>)
 8002370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002374:	6413      	str	r3, [r2, #64]	; 0x40
 8002376:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_MspInit+0x4c>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237e:	603b      	str	r3, [r7, #0]
 8002380:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	40023800 	.word	0x40023800

08002394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002398:	e7fe      	b.n	8002398 <NMI_Handler+0x4>

0800239a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800239a:	b480      	push	{r7}
 800239c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800239e:	e7fe      	b.n	800239e <HardFault_Handler+0x4>

080023a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023a4:	e7fe      	b.n	80023a4 <MemManage_Handler+0x4>

080023a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023a6:	b480      	push	{r7}
 80023a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023aa:	e7fe      	b.n	80023aa <BusFault_Handler+0x4>

080023ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023b0:	e7fe      	b.n	80023b0 <UsageFault_Handler+0x4>

080023b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023b2:	b480      	push	{r7}
 80023b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ce:	b480      	push	{r7}
 80023d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023e0:	f000 fbb8 	bl	8002b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023e4:	bf00      	nop
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80023ec:	4802      	ldr	r0, [pc, #8]	; (80023f8 <DMA1_Stream2_IRQHandler+0x10>)
 80023ee:	f000 fe9f 	bl	8003130 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000e14 	.word	0x20000e14

080023fc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002400:	4802      	ldr	r0, [pc, #8]	; (800240c <DMA1_Stream4_IRQHandler+0x10>)
 8002402:	f000 fe95 	bl	8003130 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20000fbc 	.word	0x20000fbc

08002410 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002414:	4803      	ldr	r0, [pc, #12]	; (8002424 <USART1_IRQHandler+0x14>)
 8002416:	f003 fbc5 	bl	8005ba4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  UART_Idle_Line_Callback(uart_e1);
 800241a:	2000      	movs	r0, #0
 800241c:	f7ff fa00 	bl	8001820 <UART_Idle_Line_Callback>
  /* USER CODE END USART1_IRQn 1 */
}
 8002420:	bf00      	nop
 8002422:	bd80      	pop	{r7, pc}
 8002424:	20000f34 	.word	0x20000f34

08002428 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800242c:	4802      	ldr	r0, [pc, #8]	; (8002438 <SPI3_IRQHandler+0x10>)
 800242e:	f002 fa4f 	bl	80048d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20000d74 	.word	0x20000d74

0800243c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002440:	4803      	ldr	r0, [pc, #12]	; (8002450 <UART4_IRQHandler+0x14>)
 8002442:	f003 fbaf 	bl	8005ba4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  UART_Idle_Line_Callback(uart_e4);
 8002446:	2001      	movs	r0, #1
 8002448:	f7ff f9ea 	bl	8001820 <UART_Idle_Line_Callback>
  /* USER CODE END UART4_IRQn 1 */
}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}
 8002450:	20000f78 	.word	0x20000f78

08002454 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002458:	4802      	ldr	r0, [pc, #8]	; (8002464 <DMA2_Stream2_IRQHandler+0x10>)
 800245a:	f000 fe69 	bl	8003130 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20000ed4 	.word	0x20000ed4

08002468 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800246c:	4802      	ldr	r0, [pc, #8]	; (8002478 <DMA2_Stream7_IRQHandler+0x10>)
 800246e:	f000 fe5f 	bl	8003130 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000e74 	.word	0x20000e74

0800247c <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
	if(huart == &huart4)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a09      	ldr	r2, [pc, #36]	; (80024ac <HAL_UART_TxCpltCallback+0x30>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d103      	bne.n	8002494 <HAL_UART_TxCpltCallback+0x18>
	{
		UART_Transfer_Complete_Callback(uart_e4);
 800248c:	2001      	movs	r0, #1
 800248e:	f7ff fa15 	bl	80018bc <UART_Transfer_Complete_Callback>
	}
	else if(huart == &huart1)
	{
		UART_Transfer_Complete_Callback(uart_e1 );
	}
}
 8002492:	e006      	b.n	80024a2 <HAL_UART_TxCpltCallback+0x26>
	else if(huart == &huart1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a06      	ldr	r2, [pc, #24]	; (80024b0 <HAL_UART_TxCpltCallback+0x34>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d102      	bne.n	80024a2 <HAL_UART_TxCpltCallback+0x26>
		UART_Transfer_Complete_Callback(uart_e1 );
 800249c:	2000      	movs	r0, #0
 800249e:	f7ff fa0d 	bl	80018bc <UART_Transfer_Complete_Callback>
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	20000f78 	.word	0x20000f78
 80024b0:	20000f34 	.word	0x20000f34

080024b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <SystemInit+0x20>)
 80024ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024be:	4a05      	ldr	r2, [pc, #20]	; (80024d4 <SystemInit+0x20>)
 80024c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	e000ed00 	.word	0xe000ed00

080024d8 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b08e      	sub	sp, #56	; 0x38
 80024dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	605a      	str	r2, [r3, #4]
 80024e8:	609a      	str	r2, [r3, #8]
 80024ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024ec:	f107 0320 	add.w	r3, r7, #32
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024f6:	1d3b      	adds	r3, r7, #4
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	605a      	str	r2, [r3, #4]
 80024fe:	609a      	str	r2, [r3, #8]
 8002500:	60da      	str	r2, [r3, #12]
 8002502:	611a      	str	r2, [r3, #16]
 8002504:	615a      	str	r2, [r3, #20]
 8002506:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002508:	4b3d      	ldr	r3, [pc, #244]	; (8002600 <MX_TIM3_Init+0x128>)
 800250a:	4a3e      	ldr	r2, [pc, #248]	; (8002604 <MX_TIM3_Init+0x12c>)
 800250c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 159;
 800250e:	4b3c      	ldr	r3, [pc, #240]	; (8002600 <MX_TIM3_Init+0x128>)
 8002510:	229f      	movs	r2, #159	; 0x9f
 8002512:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002514:	4b3a      	ldr	r3, [pc, #232]	; (8002600 <MX_TIM3_Init+0x128>)
 8002516:	2200      	movs	r2, #0
 8002518:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3999;
 800251a:	4b39      	ldr	r3, [pc, #228]	; (8002600 <MX_TIM3_Init+0x128>)
 800251c:	f640 729f 	movw	r2, #3999	; 0xf9f
 8002520:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002522:	4b37      	ldr	r3, [pc, #220]	; (8002600 <MX_TIM3_Init+0x128>)
 8002524:	2200      	movs	r2, #0
 8002526:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002528:	4b35      	ldr	r3, [pc, #212]	; (8002600 <MX_TIM3_Init+0x128>)
 800252a:	2280      	movs	r2, #128	; 0x80
 800252c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800252e:	4834      	ldr	r0, [pc, #208]	; (8002600 <MX_TIM3_Init+0x128>)
 8002530:	f002 fbb6 	bl	8004ca0 <HAL_TIM_Base_Init>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800253a:	f7ff fe77 	bl	800222c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800253e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002542:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002544:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002548:	4619      	mov	r1, r3
 800254a:	482d      	ldr	r0, [pc, #180]	; (8002600 <MX_TIM3_Init+0x128>)
 800254c:	f002 fdda 	bl	8005104 <HAL_TIM_ConfigClockSource>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002556:	f7ff fe69 	bl	800222c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800255a:	4829      	ldr	r0, [pc, #164]	; (8002600 <MX_TIM3_Init+0x128>)
 800255c:	f002 fbef 	bl	8004d3e <HAL_TIM_PWM_Init>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002566:	f7ff fe61 	bl	800222c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800256a:	2300      	movs	r3, #0
 800256c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800256e:	2300      	movs	r3, #0
 8002570:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002572:	f107 0320 	add.w	r3, r7, #32
 8002576:	4619      	mov	r1, r3
 8002578:	4821      	ldr	r0, [pc, #132]	; (8002600 <MX_TIM3_Init+0x128>)
 800257a:	f003 f99b 	bl	80058b4 <HAL_TIMEx_MasterConfigSynchronization>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002584:	f7ff fe52 	bl	800222c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002588:	2360      	movs	r3, #96	; 0x60
 800258a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 999;
 800258c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002590:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002592:	2300      	movs	r3, #0
 8002594:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800259a:	1d3b      	adds	r3, r7, #4
 800259c:	2200      	movs	r2, #0
 800259e:	4619      	mov	r1, r3
 80025a0:	4817      	ldr	r0, [pc, #92]	; (8002600 <MX_TIM3_Init+0x128>)
 80025a2:	f002 fced 	bl	8004f80 <HAL_TIM_PWM_ConfigChannel>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80025ac:	f7ff fe3e 	bl	800222c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025b0:	1d3b      	adds	r3, r7, #4
 80025b2:	2204      	movs	r2, #4
 80025b4:	4619      	mov	r1, r3
 80025b6:	4812      	ldr	r0, [pc, #72]	; (8002600 <MX_TIM3_Init+0x128>)
 80025b8:	f002 fce2 	bl	8004f80 <HAL_TIM_PWM_ConfigChannel>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80025c2:	f7ff fe33 	bl	800222c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80025c6:	1d3b      	adds	r3, r7, #4
 80025c8:	2208      	movs	r2, #8
 80025ca:	4619      	mov	r1, r3
 80025cc:	480c      	ldr	r0, [pc, #48]	; (8002600 <MX_TIM3_Init+0x128>)
 80025ce:	f002 fcd7 	bl	8004f80 <HAL_TIM_PWM_ConfigChannel>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80025d8:	f7ff fe28 	bl	800222c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80025dc:	1d3b      	adds	r3, r7, #4
 80025de:	220c      	movs	r2, #12
 80025e0:	4619      	mov	r1, r3
 80025e2:	4807      	ldr	r0, [pc, #28]	; (8002600 <MX_TIM3_Init+0x128>)
 80025e4:	f002 fccc 	bl	8004f80 <HAL_TIM_PWM_ConfigChannel>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 80025ee:	f7ff fe1d 	bl	800222c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80025f2:	4803      	ldr	r0, [pc, #12]	; (8002600 <MX_TIM3_Init+0x128>)
 80025f4:	f000 f82a 	bl	800264c <HAL_TIM_MspPostInit>

}
 80025f8:	bf00      	nop
 80025fa:	3738      	adds	r7, #56	; 0x38
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	20000dcc 	.word	0x20000dcc
 8002604:	40000400 	.word	0x40000400

08002608 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a0b      	ldr	r2, [pc, #44]	; (8002644 <HAL_TIM_Base_MspInit+0x3c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d10d      	bne.n	8002636 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <HAL_TIM_Base_MspInit+0x40>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	4a09      	ldr	r2, [pc, #36]	; (8002648 <HAL_TIM_Base_MspInit+0x40>)
 8002624:	f043 0302 	orr.w	r3, r3, #2
 8002628:	6413      	str	r3, [r2, #64]	; 0x40
 800262a:	4b07      	ldr	r3, [pc, #28]	; (8002648 <HAL_TIM_Base_MspInit+0x40>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002636:	bf00      	nop
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40000400 	.word	0x40000400
 8002648:	40023800 	.word	0x40023800

0800264c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08a      	sub	sp, #40	; 0x28
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002654:	f107 0314 	add.w	r3, r7, #20
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	60da      	str	r2, [r3, #12]
 8002662:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a21      	ldr	r2, [pc, #132]	; (80026f0 <HAL_TIM_MspPostInit+0xa4>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d13b      	bne.n	80026e6 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	613b      	str	r3, [r7, #16]
 8002672:	4b20      	ldr	r3, [pc, #128]	; (80026f4 <HAL_TIM_MspPostInit+0xa8>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	4a1f      	ldr	r2, [pc, #124]	; (80026f4 <HAL_TIM_MspPostInit+0xa8>)
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	6313      	str	r3, [r2, #48]	; 0x30
 800267e:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <HAL_TIM_MspPostInit+0xa8>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	613b      	str	r3, [r7, #16]
 8002688:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <HAL_TIM_MspPostInit+0xa8>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	4a18      	ldr	r2, [pc, #96]	; (80026f4 <HAL_TIM_MspPostInit+0xa8>)
 8002694:	f043 0302 	orr.w	r3, r3, #2
 8002698:	6313      	str	r3, [r2, #48]	; 0x30
 800269a:	4b16      	ldr	r3, [pc, #88]	; (80026f4 <HAL_TIM_MspPostInit+0xa8>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026a6:	23c0      	movs	r3, #192	; 0xc0
 80026a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026aa:	2302      	movs	r3, #2
 80026ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b2:	2300      	movs	r3, #0
 80026b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026b6:	2302      	movs	r3, #2
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ba:	f107 0314 	add.w	r3, r7, #20
 80026be:	4619      	mov	r1, r3
 80026c0:	480d      	ldr	r0, [pc, #52]	; (80026f8 <HAL_TIM_MspPostInit+0xac>)
 80026c2:	f000 ff9f 	bl	8003604 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026c6:	2303      	movs	r3, #3
 80026c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ca:	2302      	movs	r3, #2
 80026cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d2:	2300      	movs	r3, #0
 80026d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026d6:	2302      	movs	r3, #2
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026da:	f107 0314 	add.w	r3, r7, #20
 80026de:	4619      	mov	r1, r3
 80026e0:	4806      	ldr	r0, [pc, #24]	; (80026fc <HAL_TIM_MspPostInit+0xb0>)
 80026e2:	f000 ff8f 	bl	8003604 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80026e6:	bf00      	nop
 80026e8:	3728      	adds	r7, #40	; 0x28
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40000400 	.word	0x40000400
 80026f4:	40023800 	.word	0x40023800
 80026f8:	40020000 	.word	0x40020000
 80026fc:	40020400 	.word	0x40020400

08002700 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart1_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002704:	4b11      	ldr	r3, [pc, #68]	; (800274c <MX_UART4_Init+0x4c>)
 8002706:	4a12      	ldr	r2, [pc, #72]	; (8002750 <MX_UART4_Init+0x50>)
 8002708:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 230400;
 800270a:	4b10      	ldr	r3, [pc, #64]	; (800274c <MX_UART4_Init+0x4c>)
 800270c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8002710:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002712:	4b0e      	ldr	r3, [pc, #56]	; (800274c <MX_UART4_Init+0x4c>)
 8002714:	2200      	movs	r2, #0
 8002716:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002718:	4b0c      	ldr	r3, [pc, #48]	; (800274c <MX_UART4_Init+0x4c>)
 800271a:	2200      	movs	r2, #0
 800271c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800271e:	4b0b      	ldr	r3, [pc, #44]	; (800274c <MX_UART4_Init+0x4c>)
 8002720:	2200      	movs	r2, #0
 8002722:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002724:	4b09      	ldr	r3, [pc, #36]	; (800274c <MX_UART4_Init+0x4c>)
 8002726:	220c      	movs	r2, #12
 8002728:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800272a:	4b08      	ldr	r3, [pc, #32]	; (800274c <MX_UART4_Init+0x4c>)
 800272c:	2200      	movs	r2, #0
 800272e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002730:	4b06      	ldr	r3, [pc, #24]	; (800274c <MX_UART4_Init+0x4c>)
 8002732:	2200      	movs	r2, #0
 8002734:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002736:	4805      	ldr	r0, [pc, #20]	; (800274c <MX_UART4_Init+0x4c>)
 8002738:	f003 f938 	bl	80059ac <HAL_UART_Init>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002742:	f7ff fd73 	bl	800222c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000f78 	.word	0x20000f78
 8002750:	40004c00 	.word	0x40004c00

08002754 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002758:	4b11      	ldr	r3, [pc, #68]	; (80027a0 <MX_USART1_UART_Init+0x4c>)
 800275a:	4a12      	ldr	r2, [pc, #72]	; (80027a4 <MX_USART1_UART_Init+0x50>)
 800275c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 800275e:	4b10      	ldr	r3, [pc, #64]	; (80027a0 <MX_USART1_UART_Init+0x4c>)
 8002760:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8002764:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002766:	4b0e      	ldr	r3, [pc, #56]	; (80027a0 <MX_USART1_UART_Init+0x4c>)
 8002768:	2200      	movs	r2, #0
 800276a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800276c:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <MX_USART1_UART_Init+0x4c>)
 800276e:	2200      	movs	r2, #0
 8002770:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002772:	4b0b      	ldr	r3, [pc, #44]	; (80027a0 <MX_USART1_UART_Init+0x4c>)
 8002774:	2200      	movs	r2, #0
 8002776:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002778:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <MX_USART1_UART_Init+0x4c>)
 800277a:	220c      	movs	r2, #12
 800277c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800277e:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <MX_USART1_UART_Init+0x4c>)
 8002780:	2200      	movs	r2, #0
 8002782:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002784:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <MX_USART1_UART_Init+0x4c>)
 8002786:	2200      	movs	r2, #0
 8002788:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800278a:	4805      	ldr	r0, [pc, #20]	; (80027a0 <MX_USART1_UART_Init+0x4c>)
 800278c:	f003 f90e 	bl	80059ac <HAL_UART_Init>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002796:	f7ff fd49 	bl	800222c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000f34 	.word	0x20000f34
 80027a4:	40011000 	.word	0x40011000

080027a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b08c      	sub	sp, #48	; 0x30
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b0:	f107 031c 	add.w	r3, r7, #28
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	609a      	str	r2, [r3, #8]
 80027bc:	60da      	str	r2, [r3, #12]
 80027be:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a98      	ldr	r2, [pc, #608]	; (8002a28 <HAL_UART_MspInit+0x280>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	f040 8092 	bne.w	80028f0 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80027cc:	2300      	movs	r3, #0
 80027ce:	61bb      	str	r3, [r7, #24]
 80027d0:	4b96      	ldr	r3, [pc, #600]	; (8002a2c <HAL_UART_MspInit+0x284>)
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	4a95      	ldr	r2, [pc, #596]	; (8002a2c <HAL_UART_MspInit+0x284>)
 80027d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80027da:	6413      	str	r3, [r2, #64]	; 0x40
 80027dc:	4b93      	ldr	r3, [pc, #588]	; (8002a2c <HAL_UART_MspInit+0x284>)
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027e4:	61bb      	str	r3, [r7, #24]
 80027e6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e8:	2300      	movs	r3, #0
 80027ea:	617b      	str	r3, [r7, #20]
 80027ec:	4b8f      	ldr	r3, [pc, #572]	; (8002a2c <HAL_UART_MspInit+0x284>)
 80027ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f0:	4a8e      	ldr	r2, [pc, #568]	; (8002a2c <HAL_UART_MspInit+0x284>)
 80027f2:	f043 0301 	orr.w	r3, r3, #1
 80027f6:	6313      	str	r3, [r2, #48]	; 0x30
 80027f8:	4b8c      	ldr	r3, [pc, #560]	; (8002a2c <HAL_UART_MspInit+0x284>)
 80027fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	617b      	str	r3, [r7, #20]
 8002802:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002804:	2303      	movs	r3, #3
 8002806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002808:	2302      	movs	r3, #2
 800280a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280c:	2300      	movs	r3, #0
 800280e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002810:	2303      	movs	r3, #3
 8002812:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002814:	2308      	movs	r3, #8
 8002816:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002818:	f107 031c 	add.w	r3, r7, #28
 800281c:	4619      	mov	r1, r3
 800281e:	4884      	ldr	r0, [pc, #528]	; (8002a30 <HAL_UART_MspInit+0x288>)
 8002820:	f000 fef0 	bl	8003604 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8002824:	4b83      	ldr	r3, [pc, #524]	; (8002a34 <HAL_UART_MspInit+0x28c>)
 8002826:	4a84      	ldr	r2, [pc, #528]	; (8002a38 <HAL_UART_MspInit+0x290>)
 8002828:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800282a:	4b82      	ldr	r3, [pc, #520]	; (8002a34 <HAL_UART_MspInit+0x28c>)
 800282c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002830:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002832:	4b80      	ldr	r3, [pc, #512]	; (8002a34 <HAL_UART_MspInit+0x28c>)
 8002834:	2200      	movs	r2, #0
 8002836:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002838:	4b7e      	ldr	r3, [pc, #504]	; (8002a34 <HAL_UART_MspInit+0x28c>)
 800283a:	2200      	movs	r2, #0
 800283c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800283e:	4b7d      	ldr	r3, [pc, #500]	; (8002a34 <HAL_UART_MspInit+0x28c>)
 8002840:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002844:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002846:	4b7b      	ldr	r3, [pc, #492]	; (8002a34 <HAL_UART_MspInit+0x28c>)
 8002848:	2200      	movs	r2, #0
 800284a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800284c:	4b79      	ldr	r3, [pc, #484]	; (8002a34 <HAL_UART_MspInit+0x28c>)
 800284e:	2200      	movs	r2, #0
 8002850:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8002852:	4b78      	ldr	r3, [pc, #480]	; (8002a34 <HAL_UART_MspInit+0x28c>)
 8002854:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002858:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800285a:	4b76      	ldr	r3, [pc, #472]	; (8002a34 <HAL_UART_MspInit+0x28c>)
 800285c:	2200      	movs	r2, #0
 800285e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002860:	4b74      	ldr	r3, [pc, #464]	; (8002a34 <HAL_UART_MspInit+0x28c>)
 8002862:	2200      	movs	r2, #0
 8002864:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002866:	4873      	ldr	r0, [pc, #460]	; (8002a34 <HAL_UART_MspInit+0x28c>)
 8002868:	f000 faca 	bl	8002e00 <HAL_DMA_Init>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002872:	f7ff fcdb 	bl	800222c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a6e      	ldr	r2, [pc, #440]	; (8002a34 <HAL_UART_MspInit+0x28c>)
 800287a:	639a      	str	r2, [r3, #56]	; 0x38
 800287c:	4a6d      	ldr	r2, [pc, #436]	; (8002a34 <HAL_UART_MspInit+0x28c>)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8002882:	4b6e      	ldr	r3, [pc, #440]	; (8002a3c <HAL_UART_MspInit+0x294>)
 8002884:	4a6e      	ldr	r2, [pc, #440]	; (8002a40 <HAL_UART_MspInit+0x298>)
 8002886:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8002888:	4b6c      	ldr	r3, [pc, #432]	; (8002a3c <HAL_UART_MspInit+0x294>)
 800288a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800288e:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002890:	4b6a      	ldr	r3, [pc, #424]	; (8002a3c <HAL_UART_MspInit+0x294>)
 8002892:	2240      	movs	r2, #64	; 0x40
 8002894:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002896:	4b69      	ldr	r3, [pc, #420]	; (8002a3c <HAL_UART_MspInit+0x294>)
 8002898:	2200      	movs	r2, #0
 800289a:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800289c:	4b67      	ldr	r3, [pc, #412]	; (8002a3c <HAL_UART_MspInit+0x294>)
 800289e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028a2:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028a4:	4b65      	ldr	r3, [pc, #404]	; (8002a3c <HAL_UART_MspInit+0x294>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028aa:	4b64      	ldr	r3, [pc, #400]	; (8002a3c <HAL_UART_MspInit+0x294>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80028b0:	4b62      	ldr	r3, [pc, #392]	; (8002a3c <HAL_UART_MspInit+0x294>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028b6:	4b61      	ldr	r3, [pc, #388]	; (8002a3c <HAL_UART_MspInit+0x294>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028bc:	4b5f      	ldr	r3, [pc, #380]	; (8002a3c <HAL_UART_MspInit+0x294>)
 80028be:	2200      	movs	r2, #0
 80028c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80028c2:	485e      	ldr	r0, [pc, #376]	; (8002a3c <HAL_UART_MspInit+0x294>)
 80028c4:	f000 fa9c 	bl	8002e00 <HAL_DMA_Init>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80028ce:	f7ff fcad 	bl	800222c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a59      	ldr	r2, [pc, #356]	; (8002a3c <HAL_UART_MspInit+0x294>)
 80028d6:	635a      	str	r2, [r3, #52]	; 0x34
 80028d8:	4a58      	ldr	r2, [pc, #352]	; (8002a3c <HAL_UART_MspInit+0x294>)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80028de:	2200      	movs	r2, #0
 80028e0:	2100      	movs	r1, #0
 80028e2:	2034      	movs	r0, #52	; 0x34
 80028e4:	f000 fa55 	bl	8002d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80028e8:	2034      	movs	r0, #52	; 0x34
 80028ea:	f000 fa6e 	bl	8002dca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80028ee:	e096      	b.n	8002a1e <HAL_UART_MspInit+0x276>
  else if(uartHandle->Instance==USART1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a53      	ldr	r2, [pc, #332]	; (8002a44 <HAL_UART_MspInit+0x29c>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	f040 8091 	bne.w	8002a1e <HAL_UART_MspInit+0x276>
    __HAL_RCC_USART1_CLK_ENABLE();
 80028fc:	2300      	movs	r3, #0
 80028fe:	613b      	str	r3, [r7, #16]
 8002900:	4b4a      	ldr	r3, [pc, #296]	; (8002a2c <HAL_UART_MspInit+0x284>)
 8002902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002904:	4a49      	ldr	r2, [pc, #292]	; (8002a2c <HAL_UART_MspInit+0x284>)
 8002906:	f043 0310 	orr.w	r3, r3, #16
 800290a:	6453      	str	r3, [r2, #68]	; 0x44
 800290c:	4b47      	ldr	r3, [pc, #284]	; (8002a2c <HAL_UART_MspInit+0x284>)
 800290e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002910:	f003 0310 	and.w	r3, r3, #16
 8002914:	613b      	str	r3, [r7, #16]
 8002916:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002918:	2300      	movs	r3, #0
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	4b43      	ldr	r3, [pc, #268]	; (8002a2c <HAL_UART_MspInit+0x284>)
 800291e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002920:	4a42      	ldr	r2, [pc, #264]	; (8002a2c <HAL_UART_MspInit+0x284>)
 8002922:	f043 0302 	orr.w	r3, r3, #2
 8002926:	6313      	str	r3, [r2, #48]	; 0x30
 8002928:	4b40      	ldr	r3, [pc, #256]	; (8002a2c <HAL_UART_MspInit+0x284>)
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002934:	23c0      	movs	r3, #192	; 0xc0
 8002936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002938:	2302      	movs	r3, #2
 800293a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293c:	2300      	movs	r3, #0
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002940:	2303      	movs	r3, #3
 8002942:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002944:	2307      	movs	r3, #7
 8002946:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002948:	f107 031c 	add.w	r3, r7, #28
 800294c:	4619      	mov	r1, r3
 800294e:	483e      	ldr	r0, [pc, #248]	; (8002a48 <HAL_UART_MspInit+0x2a0>)
 8002950:	f000 fe58 	bl	8003604 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002954:	4b3d      	ldr	r3, [pc, #244]	; (8002a4c <HAL_UART_MspInit+0x2a4>)
 8002956:	4a3e      	ldr	r2, [pc, #248]	; (8002a50 <HAL_UART_MspInit+0x2a8>)
 8002958:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800295a:	4b3c      	ldr	r3, [pc, #240]	; (8002a4c <HAL_UART_MspInit+0x2a4>)
 800295c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002960:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002962:	4b3a      	ldr	r3, [pc, #232]	; (8002a4c <HAL_UART_MspInit+0x2a4>)
 8002964:	2200      	movs	r2, #0
 8002966:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002968:	4b38      	ldr	r3, [pc, #224]	; (8002a4c <HAL_UART_MspInit+0x2a4>)
 800296a:	2200      	movs	r2, #0
 800296c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800296e:	4b37      	ldr	r3, [pc, #220]	; (8002a4c <HAL_UART_MspInit+0x2a4>)
 8002970:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002974:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002976:	4b35      	ldr	r3, [pc, #212]	; (8002a4c <HAL_UART_MspInit+0x2a4>)
 8002978:	2200      	movs	r2, #0
 800297a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800297c:	4b33      	ldr	r3, [pc, #204]	; (8002a4c <HAL_UART_MspInit+0x2a4>)
 800297e:	2200      	movs	r2, #0
 8002980:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002982:	4b32      	ldr	r3, [pc, #200]	; (8002a4c <HAL_UART_MspInit+0x2a4>)
 8002984:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002988:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800298a:	4b30      	ldr	r3, [pc, #192]	; (8002a4c <HAL_UART_MspInit+0x2a4>)
 800298c:	2200      	movs	r2, #0
 800298e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002990:	4b2e      	ldr	r3, [pc, #184]	; (8002a4c <HAL_UART_MspInit+0x2a4>)
 8002992:	2200      	movs	r2, #0
 8002994:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002996:	482d      	ldr	r0, [pc, #180]	; (8002a4c <HAL_UART_MspInit+0x2a4>)
 8002998:	f000 fa32 	bl	8002e00 <HAL_DMA_Init>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_UART_MspInit+0x1fe>
      Error_Handler();
 80029a2:	f7ff fc43 	bl	800222c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a28      	ldr	r2, [pc, #160]	; (8002a4c <HAL_UART_MspInit+0x2a4>)
 80029aa:	639a      	str	r2, [r3, #56]	; 0x38
 80029ac:	4a27      	ldr	r2, [pc, #156]	; (8002a4c <HAL_UART_MspInit+0x2a4>)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80029b2:	4b28      	ldr	r3, [pc, #160]	; (8002a54 <HAL_UART_MspInit+0x2ac>)
 80029b4:	4a28      	ldr	r2, [pc, #160]	; (8002a58 <HAL_UART_MspInit+0x2b0>)
 80029b6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80029b8:	4b26      	ldr	r3, [pc, #152]	; (8002a54 <HAL_UART_MspInit+0x2ac>)
 80029ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029be:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029c0:	4b24      	ldr	r3, [pc, #144]	; (8002a54 <HAL_UART_MspInit+0x2ac>)
 80029c2:	2240      	movs	r2, #64	; 0x40
 80029c4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029c6:	4b23      	ldr	r3, [pc, #140]	; (8002a54 <HAL_UART_MspInit+0x2ac>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029cc:	4b21      	ldr	r3, [pc, #132]	; (8002a54 <HAL_UART_MspInit+0x2ac>)
 80029ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029d2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029d4:	4b1f      	ldr	r3, [pc, #124]	; (8002a54 <HAL_UART_MspInit+0x2ac>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029da:	4b1e      	ldr	r3, [pc, #120]	; (8002a54 <HAL_UART_MspInit+0x2ac>)
 80029dc:	2200      	movs	r2, #0
 80029de:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80029e0:	4b1c      	ldr	r3, [pc, #112]	; (8002a54 <HAL_UART_MspInit+0x2ac>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029e6:	4b1b      	ldr	r3, [pc, #108]	; (8002a54 <HAL_UART_MspInit+0x2ac>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029ec:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <HAL_UART_MspInit+0x2ac>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80029f2:	4818      	ldr	r0, [pc, #96]	; (8002a54 <HAL_UART_MspInit+0x2ac>)
 80029f4:	f000 fa04 	bl	8002e00 <HAL_DMA_Init>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <HAL_UART_MspInit+0x25a>
      Error_Handler();
 80029fe:	f7ff fc15 	bl	800222c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a13      	ldr	r2, [pc, #76]	; (8002a54 <HAL_UART_MspInit+0x2ac>)
 8002a06:	635a      	str	r2, [r3, #52]	; 0x34
 8002a08:	4a12      	ldr	r2, [pc, #72]	; (8002a54 <HAL_UART_MspInit+0x2ac>)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2100      	movs	r1, #0
 8002a12:	2025      	movs	r0, #37	; 0x25
 8002a14:	f000 f9bd 	bl	8002d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a18:	2025      	movs	r0, #37	; 0x25
 8002a1a:	f000 f9d6 	bl	8002dca <HAL_NVIC_EnableIRQ>
}
 8002a1e:	bf00      	nop
 8002a20:	3730      	adds	r7, #48	; 0x30
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40004c00 	.word	0x40004c00
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	40020000 	.word	0x40020000
 8002a34:	20000e14 	.word	0x20000e14
 8002a38:	40026040 	.word	0x40026040
 8002a3c:	20000fbc 	.word	0x20000fbc
 8002a40:	40026070 	.word	0x40026070
 8002a44:	40011000 	.word	0x40011000
 8002a48:	40020400 	.word	0x40020400
 8002a4c:	20000ed4 	.word	0x20000ed4
 8002a50:	40026440 	.word	0x40026440
 8002a54:	20000e74 	.word	0x20000e74
 8002a58:	400264b8 	.word	0x400264b8

08002a5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002a5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a60:	480d      	ldr	r0, [pc, #52]	; (8002a98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a62:	490e      	ldr	r1, [pc, #56]	; (8002a9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a64:	4a0e      	ldr	r2, [pc, #56]	; (8002aa0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a68:	e002      	b.n	8002a70 <LoopCopyDataInit>

08002a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a6e:	3304      	adds	r3, #4

08002a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a74:	d3f9      	bcc.n	8002a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a76:	4a0b      	ldr	r2, [pc, #44]	; (8002aa4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a78:	4c0b      	ldr	r4, [pc, #44]	; (8002aa8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a7c:	e001      	b.n	8002a82 <LoopFillZerobss>

08002a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a80:	3204      	adds	r2, #4

08002a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a84:	d3fb      	bcc.n	8002a7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a86:	f7ff fd15 	bl	80024b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a8a:	f004 f8c5 	bl	8006c18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a8e:	f7ff fb3b 	bl	8002108 <main>
  bx  lr    
 8002a92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a9c:	2000038c 	.word	0x2000038c
  ldr r2, =_sidata
 8002aa0:	08006d48 	.word	0x08006d48
  ldr r2, =_sbss
 8002aa4:	2000038c 	.word	0x2000038c
  ldr r4, =_ebss
 8002aa8:	20001020 	.word	0x20001020

08002aac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002aac:	e7fe      	b.n	8002aac <ADC_IRQHandler>
	...

08002ab0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ab4:	4b0e      	ldr	r3, [pc, #56]	; (8002af0 <HAL_Init+0x40>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a0d      	ldr	r2, [pc, #52]	; (8002af0 <HAL_Init+0x40>)
 8002aba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002abe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ac0:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <HAL_Init+0x40>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a0a      	ldr	r2, [pc, #40]	; (8002af0 <HAL_Init+0x40>)
 8002ac6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002aca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002acc:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <HAL_Init+0x40>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a07      	ldr	r2, [pc, #28]	; (8002af0 <HAL_Init+0x40>)
 8002ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ad8:	2003      	movs	r0, #3
 8002ada:	f000 f94f 	bl	8002d7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ade:	200f      	movs	r0, #15
 8002ae0:	f000 f808 	bl	8002af4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ae4:	f7ff fc2e 	bl	8002344 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40023c00 	.word	0x40023c00

08002af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002afc:	4b12      	ldr	r3, [pc, #72]	; (8002b48 <HAL_InitTick+0x54>)
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	4b12      	ldr	r3, [pc, #72]	; (8002b4c <HAL_InitTick+0x58>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	4619      	mov	r1, r3
 8002b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 f967 	bl	8002de6 <HAL_SYSTICK_Config>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e00e      	b.n	8002b40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b0f      	cmp	r3, #15
 8002b26:	d80a      	bhi.n	8002b3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b28:	2200      	movs	r2, #0
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b30:	f000 f92f 	bl	8002d92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b34:	4a06      	ldr	r2, [pc, #24]	; (8002b50 <HAL_InitTick+0x5c>)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	e000      	b.n	8002b40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	20000380 	.word	0x20000380
 8002b4c:	20000388 	.word	0x20000388
 8002b50:	20000384 	.word	0x20000384

08002b54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b58:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <HAL_IncTick+0x20>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <HAL_IncTick+0x24>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4413      	add	r3, r2
 8002b64:	4a04      	ldr	r2, [pc, #16]	; (8002b78 <HAL_IncTick+0x24>)
 8002b66:	6013      	str	r3, [r2, #0]
}
 8002b68:	bf00      	nop
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	20000388 	.word	0x20000388
 8002b78:	2000101c 	.word	0x2000101c

08002b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b80:	4b03      	ldr	r3, [pc, #12]	; (8002b90 <HAL_GetTick+0x14>)
 8002b82:	681b      	ldr	r3, [r3, #0]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	2000101c 	.word	0x2000101c

08002b94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b9c:	f7ff ffee 	bl	8002b7c <HAL_GetTick>
 8002ba0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bac:	d005      	beq.n	8002bba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bae:	4b0a      	ldr	r3, [pc, #40]	; (8002bd8 <HAL_Delay+0x44>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bba:	bf00      	nop
 8002bbc:	f7ff ffde 	bl	8002b7c <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d8f7      	bhi.n	8002bbc <HAL_Delay+0x28>
  {
  }
}
 8002bcc:	bf00      	nop
 8002bce:	bf00      	nop
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	20000388 	.word	0x20000388

08002bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bec:	4b0c      	ldr	r3, [pc, #48]	; (8002c20 <__NVIC_SetPriorityGrouping+0x44>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c0e:	4a04      	ldr	r2, [pc, #16]	; (8002c20 <__NVIC_SetPriorityGrouping+0x44>)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	60d3      	str	r3, [r2, #12]
}
 8002c14:	bf00      	nop
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	e000ed00 	.word	0xe000ed00

08002c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c28:	4b04      	ldr	r3, [pc, #16]	; (8002c3c <__NVIC_GetPriorityGrouping+0x18>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	0a1b      	lsrs	r3, r3, #8
 8002c2e:	f003 0307 	and.w	r3, r3, #7
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	e000ed00 	.word	0xe000ed00

08002c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	db0b      	blt.n	8002c6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c52:	79fb      	ldrb	r3, [r7, #7]
 8002c54:	f003 021f 	and.w	r2, r3, #31
 8002c58:	4907      	ldr	r1, [pc, #28]	; (8002c78 <__NVIC_EnableIRQ+0x38>)
 8002c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5e:	095b      	lsrs	r3, r3, #5
 8002c60:	2001      	movs	r0, #1
 8002c62:	fa00 f202 	lsl.w	r2, r0, r2
 8002c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	e000e100 	.word	0xe000e100

08002c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4603      	mov	r3, r0
 8002c84:	6039      	str	r1, [r7, #0]
 8002c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	db0a      	blt.n	8002ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	490c      	ldr	r1, [pc, #48]	; (8002cc8 <__NVIC_SetPriority+0x4c>)
 8002c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9a:	0112      	lsls	r2, r2, #4
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	440b      	add	r3, r1
 8002ca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ca4:	e00a      	b.n	8002cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	4908      	ldr	r1, [pc, #32]	; (8002ccc <__NVIC_SetPriority+0x50>)
 8002cac:	79fb      	ldrb	r3, [r7, #7]
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	3b04      	subs	r3, #4
 8002cb4:	0112      	lsls	r2, r2, #4
 8002cb6:	b2d2      	uxtb	r2, r2
 8002cb8:	440b      	add	r3, r1
 8002cba:	761a      	strb	r2, [r3, #24]
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	e000e100 	.word	0xe000e100
 8002ccc:	e000ed00 	.word	0xe000ed00

08002cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b089      	sub	sp, #36	; 0x24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f1c3 0307 	rsb	r3, r3, #7
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	bf28      	it	cs
 8002cee:	2304      	movcs	r3, #4
 8002cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	2b06      	cmp	r3, #6
 8002cf8:	d902      	bls.n	8002d00 <NVIC_EncodePriority+0x30>
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	3b03      	subs	r3, #3
 8002cfe:	e000      	b.n	8002d02 <NVIC_EncodePriority+0x32>
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d04:	f04f 32ff 	mov.w	r2, #4294967295
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43da      	mvns	r2, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	401a      	ands	r2, r3
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d18:	f04f 31ff 	mov.w	r1, #4294967295
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d22:	43d9      	mvns	r1, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d28:	4313      	orrs	r3, r2
         );
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3724      	adds	r7, #36	; 0x24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
	...

08002d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3b01      	subs	r3, #1
 8002d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d48:	d301      	bcc.n	8002d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e00f      	b.n	8002d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d4e:	4a0a      	ldr	r2, [pc, #40]	; (8002d78 <SysTick_Config+0x40>)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d56:	210f      	movs	r1, #15
 8002d58:	f04f 30ff 	mov.w	r0, #4294967295
 8002d5c:	f7ff ff8e 	bl	8002c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d60:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <SysTick_Config+0x40>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d66:	4b04      	ldr	r3, [pc, #16]	; (8002d78 <SysTick_Config+0x40>)
 8002d68:	2207      	movs	r2, #7
 8002d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	e000e010 	.word	0xe000e010

08002d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7ff ff29 	bl	8002bdc <__NVIC_SetPriorityGrouping>
}
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b086      	sub	sp, #24
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	4603      	mov	r3, r0
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	607a      	str	r2, [r7, #4]
 8002d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002da4:	f7ff ff3e 	bl	8002c24 <__NVIC_GetPriorityGrouping>
 8002da8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	68b9      	ldr	r1, [r7, #8]
 8002dae:	6978      	ldr	r0, [r7, #20]
 8002db0:	f7ff ff8e 	bl	8002cd0 <NVIC_EncodePriority>
 8002db4:	4602      	mov	r2, r0
 8002db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dba:	4611      	mov	r1, r2
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff ff5d 	bl	8002c7c <__NVIC_SetPriority>
}
 8002dc2:	bf00      	nop
 8002dc4:	3718      	adds	r7, #24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b082      	sub	sp, #8
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff ff31 	bl	8002c40 <__NVIC_EnableIRQ>
}
 8002dde:	bf00      	nop
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b082      	sub	sp, #8
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7ff ffa2 	bl	8002d38 <SysTick_Config>
 8002df4:	4603      	mov	r3, r0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e0c:	f7ff feb6 	bl	8002b7c <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e099      	b.n	8002f50 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 0201 	bic.w	r2, r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e3c:	e00f      	b.n	8002e5e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e3e:	f7ff fe9d 	bl	8002b7c <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b05      	cmp	r3, #5
 8002e4a:	d908      	bls.n	8002e5e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2203      	movs	r2, #3
 8002e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e078      	b.n	8002f50 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1e8      	bne.n	8002e3e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	4b38      	ldr	r3, [pc, #224]	; (8002f58 <HAL_DMA_Init+0x158>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ea2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb4:	2b04      	cmp	r3, #4
 8002eb6:	d107      	bne.n	8002ec8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	f023 0307 	bic.w	r3, r3, #7
 8002ede:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	d117      	bne.n	8002f22 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00e      	beq.n	8002f22 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 fb01 	bl	800350c <DMA_CheckFifoParam>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d008      	beq.n	8002f22 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2240      	movs	r2, #64	; 0x40
 8002f14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e016      	b.n	8002f50 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 fab8 	bl	80034a0 <DMA_CalcBaseAndBitshift>
 8002f30:	4603      	mov	r3, r0
 8002f32:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f38:	223f      	movs	r2, #63	; 0x3f
 8002f3a:	409a      	lsls	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	f010803f 	.word	0xf010803f

08002f5c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
 8002f68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f72:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d101      	bne.n	8002f82 <HAL_DMA_Start_IT+0x26>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	e040      	b.n	8003004 <HAL_DMA_Start_IT+0xa8>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d12f      	bne.n	8002ff6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2202      	movs	r2, #2
 8002f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	68b9      	ldr	r1, [r7, #8]
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 fa4a 	bl	8003444 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb4:	223f      	movs	r2, #63	; 0x3f
 8002fb6:	409a      	lsls	r2, r3
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f042 0216 	orr.w	r2, r2, #22
 8002fca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d007      	beq.n	8002fe4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0208 	orr.w	r2, r2, #8
 8002fe2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f042 0201 	orr.w	r2, r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	e005      	b.n	8003002 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002ffe:	2302      	movs	r3, #2
 8003000:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003002:	7dfb      	ldrb	r3, [r7, #23]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003018:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800301a:	f7ff fdaf 	bl	8002b7c <HAL_GetTick>
 800301e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d008      	beq.n	800303e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2280      	movs	r2, #128	; 0x80
 8003030:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e052      	b.n	80030e4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 0216 	bic.w	r2, r2, #22
 800304c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	695a      	ldr	r2, [r3, #20]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800305c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	2b00      	cmp	r3, #0
 8003064:	d103      	bne.n	800306e <HAL_DMA_Abort+0x62>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800306a:	2b00      	cmp	r3, #0
 800306c:	d007      	beq.n	800307e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 0208 	bic.w	r2, r2, #8
 800307c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 0201 	bic.w	r2, r2, #1
 800308c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800308e:	e013      	b.n	80030b8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003090:	f7ff fd74 	bl	8002b7c <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b05      	cmp	r3, #5
 800309c:	d90c      	bls.n	80030b8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2220      	movs	r2, #32
 80030a2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2203      	movs	r2, #3
 80030a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e015      	b.n	80030e4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1e4      	bne.n	8003090 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ca:	223f      	movs	r2, #63	; 0x3f
 80030cc:	409a      	lsls	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d004      	beq.n	800310a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2280      	movs	r2, #128	; 0x80
 8003104:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e00c      	b.n	8003124 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2205      	movs	r2, #5
 800310e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 0201 	bic.w	r2, r2, #1
 8003120:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800313c:	4b92      	ldr	r3, [pc, #584]	; (8003388 <HAL_DMA_IRQHandler+0x258>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a92      	ldr	r2, [pc, #584]	; (800338c <HAL_DMA_IRQHandler+0x25c>)
 8003142:	fba2 2303 	umull	r2, r3, r2, r3
 8003146:	0a9b      	lsrs	r3, r3, #10
 8003148:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315a:	2208      	movs	r2, #8
 800315c:	409a      	lsls	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	4013      	ands	r3, r2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d01a      	beq.n	800319c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b00      	cmp	r3, #0
 8003172:	d013      	beq.n	800319c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0204 	bic.w	r2, r2, #4
 8003182:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003188:	2208      	movs	r2, #8
 800318a:	409a      	lsls	r2, r3
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003194:	f043 0201 	orr.w	r2, r3, #1
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a0:	2201      	movs	r2, #1
 80031a2:	409a      	lsls	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	4013      	ands	r3, r2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d012      	beq.n	80031d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00b      	beq.n	80031d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031be:	2201      	movs	r2, #1
 80031c0:	409a      	lsls	r2, r3
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ca:	f043 0202 	orr.w	r2, r3, #2
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d6:	2204      	movs	r2, #4
 80031d8:	409a      	lsls	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	4013      	ands	r3, r2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d012      	beq.n	8003208 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00b      	beq.n	8003208 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f4:	2204      	movs	r2, #4
 80031f6:	409a      	lsls	r2, r3
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003200:	f043 0204 	orr.w	r2, r3, #4
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800320c:	2210      	movs	r2, #16
 800320e:	409a      	lsls	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4013      	ands	r3, r2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d043      	beq.n	80032a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	2b00      	cmp	r3, #0
 8003224:	d03c      	beq.n	80032a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322a:	2210      	movs	r2, #16
 800322c:	409a      	lsls	r2, r3
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d018      	beq.n	8003272 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d108      	bne.n	8003260 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	2b00      	cmp	r3, #0
 8003254:	d024      	beq.n	80032a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	4798      	blx	r3
 800325e:	e01f      	b.n	80032a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003264:	2b00      	cmp	r3, #0
 8003266:	d01b      	beq.n	80032a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	4798      	blx	r3
 8003270:	e016      	b.n	80032a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327c:	2b00      	cmp	r3, #0
 800327e:	d107      	bne.n	8003290 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0208 	bic.w	r2, r2, #8
 800328e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a4:	2220      	movs	r2, #32
 80032a6:	409a      	lsls	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4013      	ands	r3, r2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 808e 	beq.w	80033ce <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0310 	and.w	r3, r3, #16
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 8086 	beq.w	80033ce <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c6:	2220      	movs	r2, #32
 80032c8:	409a      	lsls	r2, r3
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b05      	cmp	r3, #5
 80032d8:	d136      	bne.n	8003348 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 0216 	bic.w	r2, r2, #22
 80032e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695a      	ldr	r2, [r3, #20]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d103      	bne.n	800330a <HAL_DMA_IRQHandler+0x1da>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003306:	2b00      	cmp	r3, #0
 8003308:	d007      	beq.n	800331a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0208 	bic.w	r2, r2, #8
 8003318:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800331e:	223f      	movs	r2, #63	; 0x3f
 8003320:	409a      	lsls	r2, r3
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800333a:	2b00      	cmp	r3, #0
 800333c:	d07d      	beq.n	800343a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	4798      	blx	r3
        }
        return;
 8003346:	e078      	b.n	800343a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d01c      	beq.n	8003390 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d108      	bne.n	8003376 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003368:	2b00      	cmp	r3, #0
 800336a:	d030      	beq.n	80033ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	4798      	blx	r3
 8003374:	e02b      	b.n	80033ce <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800337a:	2b00      	cmp	r3, #0
 800337c:	d027      	beq.n	80033ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	4798      	blx	r3
 8003386:	e022      	b.n	80033ce <HAL_DMA_IRQHandler+0x29e>
 8003388:	20000380 	.word	0x20000380
 800338c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10f      	bne.n	80033be <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0210 	bic.w	r2, r2, #16
 80033ac:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d032      	beq.n	800343c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d022      	beq.n	8003428 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2205      	movs	r2, #5
 80033e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 0201 	bic.w	r2, r2, #1
 80033f8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	3301      	adds	r3, #1
 80033fe:	60bb      	str	r3, [r7, #8]
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	429a      	cmp	r2, r3
 8003404:	d307      	bcc.n	8003416 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1f2      	bne.n	80033fa <HAL_DMA_IRQHandler+0x2ca>
 8003414:	e000      	b.n	8003418 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003416:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800342c:	2b00      	cmp	r3, #0
 800342e:	d005      	beq.n	800343c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	4798      	blx	r3
 8003438:	e000      	b.n	800343c <HAL_DMA_IRQHandler+0x30c>
        return;
 800343a:	bf00      	nop
    }
  }
}
 800343c:	3718      	adds	r7, #24
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop

08003444 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
 8003450:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003460:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	2b40      	cmp	r3, #64	; 0x40
 8003470:	d108      	bne.n	8003484 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003482:	e007      	b.n	8003494 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	60da      	str	r2, [r3, #12]
}
 8003494:	bf00      	nop
 8003496:	3714      	adds	r7, #20
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	3b10      	subs	r3, #16
 80034b0:	4a14      	ldr	r2, [pc, #80]	; (8003504 <DMA_CalcBaseAndBitshift+0x64>)
 80034b2:	fba2 2303 	umull	r2, r3, r2, r3
 80034b6:	091b      	lsrs	r3, r3, #4
 80034b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034ba:	4a13      	ldr	r2, [pc, #76]	; (8003508 <DMA_CalcBaseAndBitshift+0x68>)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4413      	add	r3, r2
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	461a      	mov	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2b03      	cmp	r3, #3
 80034cc:	d909      	bls.n	80034e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034d6:	f023 0303 	bic.w	r3, r3, #3
 80034da:	1d1a      	adds	r2, r3, #4
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	659a      	str	r2, [r3, #88]	; 0x58
 80034e0:	e007      	b.n	80034f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034ea:	f023 0303 	bic.w	r3, r3, #3
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	aaaaaaab 	.word	0xaaaaaaab
 8003508:	08006d30 	.word	0x08006d30

0800350c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003514:	2300      	movs	r3, #0
 8003516:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d11f      	bne.n	8003566 <DMA_CheckFifoParam+0x5a>
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	2b03      	cmp	r3, #3
 800352a:	d856      	bhi.n	80035da <DMA_CheckFifoParam+0xce>
 800352c:	a201      	add	r2, pc, #4	; (adr r2, 8003534 <DMA_CheckFifoParam+0x28>)
 800352e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003532:	bf00      	nop
 8003534:	08003545 	.word	0x08003545
 8003538:	08003557 	.word	0x08003557
 800353c:	08003545 	.word	0x08003545
 8003540:	080035db 	.word	0x080035db
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003548:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d046      	beq.n	80035de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003554:	e043      	b.n	80035de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800355e:	d140      	bne.n	80035e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003564:	e03d      	b.n	80035e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800356e:	d121      	bne.n	80035b4 <DMA_CheckFifoParam+0xa8>
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2b03      	cmp	r3, #3
 8003574:	d837      	bhi.n	80035e6 <DMA_CheckFifoParam+0xda>
 8003576:	a201      	add	r2, pc, #4	; (adr r2, 800357c <DMA_CheckFifoParam+0x70>)
 8003578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357c:	0800358d 	.word	0x0800358d
 8003580:	08003593 	.word	0x08003593
 8003584:	0800358d 	.word	0x0800358d
 8003588:	080035a5 	.word	0x080035a5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	73fb      	strb	r3, [r7, #15]
      break;
 8003590:	e030      	b.n	80035f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003596:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d025      	beq.n	80035ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035a2:	e022      	b.n	80035ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035ac:	d11f      	bne.n	80035ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035b2:	e01c      	b.n	80035ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d903      	bls.n	80035c2 <DMA_CheckFifoParam+0xb6>
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	2b03      	cmp	r3, #3
 80035be:	d003      	beq.n	80035c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035c0:	e018      	b.n	80035f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	73fb      	strb	r3, [r7, #15]
      break;
 80035c6:	e015      	b.n	80035f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00e      	beq.n	80035f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	73fb      	strb	r3, [r7, #15]
      break;
 80035d8:	e00b      	b.n	80035f2 <DMA_CheckFifoParam+0xe6>
      break;
 80035da:	bf00      	nop
 80035dc:	e00a      	b.n	80035f4 <DMA_CheckFifoParam+0xe8>
      break;
 80035de:	bf00      	nop
 80035e0:	e008      	b.n	80035f4 <DMA_CheckFifoParam+0xe8>
      break;
 80035e2:	bf00      	nop
 80035e4:	e006      	b.n	80035f4 <DMA_CheckFifoParam+0xe8>
      break;
 80035e6:	bf00      	nop
 80035e8:	e004      	b.n	80035f4 <DMA_CheckFifoParam+0xe8>
      break;
 80035ea:	bf00      	nop
 80035ec:	e002      	b.n	80035f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80035ee:	bf00      	nop
 80035f0:	e000      	b.n	80035f4 <DMA_CheckFifoParam+0xe8>
      break;
 80035f2:	bf00      	nop
    }
  } 
  
  return status; 
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop

08003604 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003604:	b480      	push	{r7}
 8003606:	b089      	sub	sp, #36	; 0x24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800360e:	2300      	movs	r3, #0
 8003610:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003612:	2300      	movs	r3, #0
 8003614:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003616:	2300      	movs	r3, #0
 8003618:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800361a:	2300      	movs	r3, #0
 800361c:	61fb      	str	r3, [r7, #28]
 800361e:	e16b      	b.n	80038f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003620:	2201      	movs	r2, #1
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	4013      	ands	r3, r2
 8003632:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	429a      	cmp	r2, r3
 800363a:	f040 815a 	bne.w	80038f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	2b01      	cmp	r3, #1
 8003648:	d005      	beq.n	8003656 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003652:	2b02      	cmp	r3, #2
 8003654:	d130      	bne.n	80036b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	2203      	movs	r2, #3
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	43db      	mvns	r3, r3
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	4013      	ands	r3, r2
 800366c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	4313      	orrs	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800368c:	2201      	movs	r2, #1
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	43db      	mvns	r3, r3
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	4013      	ands	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	091b      	lsrs	r3, r3, #4
 80036a2:	f003 0201 	and.w	r2, r3, #1
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f003 0303 	and.w	r3, r3, #3
 80036c0:	2b03      	cmp	r3, #3
 80036c2:	d017      	beq.n	80036f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	2203      	movs	r2, #3
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	43db      	mvns	r3, r3
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	4013      	ands	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f003 0303 	and.w	r3, r3, #3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d123      	bne.n	8003748 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	08da      	lsrs	r2, r3, #3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3208      	adds	r2, #8
 8003708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800370c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	f003 0307 	and.w	r3, r3, #7
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	220f      	movs	r2, #15
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	43db      	mvns	r3, r3
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	4013      	ands	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	691a      	ldr	r2, [r3, #16]
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	f003 0307 	and.w	r3, r3, #7
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	4313      	orrs	r3, r2
 8003738:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	08da      	lsrs	r2, r3, #3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	3208      	adds	r2, #8
 8003742:	69b9      	ldr	r1, [r7, #24]
 8003744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	2203      	movs	r2, #3
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	43db      	mvns	r3, r3
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4013      	ands	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f003 0203 	and.w	r2, r3, #3
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	4313      	orrs	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 80b4 	beq.w	80038f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800378a:	2300      	movs	r3, #0
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	4b60      	ldr	r3, [pc, #384]	; (8003910 <HAL_GPIO_Init+0x30c>)
 8003790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003792:	4a5f      	ldr	r2, [pc, #380]	; (8003910 <HAL_GPIO_Init+0x30c>)
 8003794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003798:	6453      	str	r3, [r2, #68]	; 0x44
 800379a:	4b5d      	ldr	r3, [pc, #372]	; (8003910 <HAL_GPIO_Init+0x30c>)
 800379c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037a6:	4a5b      	ldr	r2, [pc, #364]	; (8003914 <HAL_GPIO_Init+0x310>)
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	089b      	lsrs	r3, r3, #2
 80037ac:	3302      	adds	r3, #2
 80037ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	220f      	movs	r2, #15
 80037be:	fa02 f303 	lsl.w	r3, r2, r3
 80037c2:	43db      	mvns	r3, r3
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	4013      	ands	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a52      	ldr	r2, [pc, #328]	; (8003918 <HAL_GPIO_Init+0x314>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d02b      	beq.n	800382a <HAL_GPIO_Init+0x226>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a51      	ldr	r2, [pc, #324]	; (800391c <HAL_GPIO_Init+0x318>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d025      	beq.n	8003826 <HAL_GPIO_Init+0x222>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a50      	ldr	r2, [pc, #320]	; (8003920 <HAL_GPIO_Init+0x31c>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d01f      	beq.n	8003822 <HAL_GPIO_Init+0x21e>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a4f      	ldr	r2, [pc, #316]	; (8003924 <HAL_GPIO_Init+0x320>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d019      	beq.n	800381e <HAL_GPIO_Init+0x21a>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a4e      	ldr	r2, [pc, #312]	; (8003928 <HAL_GPIO_Init+0x324>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d013      	beq.n	800381a <HAL_GPIO_Init+0x216>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a4d      	ldr	r2, [pc, #308]	; (800392c <HAL_GPIO_Init+0x328>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d00d      	beq.n	8003816 <HAL_GPIO_Init+0x212>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a4c      	ldr	r2, [pc, #304]	; (8003930 <HAL_GPIO_Init+0x32c>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d007      	beq.n	8003812 <HAL_GPIO_Init+0x20e>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a4b      	ldr	r2, [pc, #300]	; (8003934 <HAL_GPIO_Init+0x330>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d101      	bne.n	800380e <HAL_GPIO_Init+0x20a>
 800380a:	2307      	movs	r3, #7
 800380c:	e00e      	b.n	800382c <HAL_GPIO_Init+0x228>
 800380e:	2308      	movs	r3, #8
 8003810:	e00c      	b.n	800382c <HAL_GPIO_Init+0x228>
 8003812:	2306      	movs	r3, #6
 8003814:	e00a      	b.n	800382c <HAL_GPIO_Init+0x228>
 8003816:	2305      	movs	r3, #5
 8003818:	e008      	b.n	800382c <HAL_GPIO_Init+0x228>
 800381a:	2304      	movs	r3, #4
 800381c:	e006      	b.n	800382c <HAL_GPIO_Init+0x228>
 800381e:	2303      	movs	r3, #3
 8003820:	e004      	b.n	800382c <HAL_GPIO_Init+0x228>
 8003822:	2302      	movs	r3, #2
 8003824:	e002      	b.n	800382c <HAL_GPIO_Init+0x228>
 8003826:	2301      	movs	r3, #1
 8003828:	e000      	b.n	800382c <HAL_GPIO_Init+0x228>
 800382a:	2300      	movs	r3, #0
 800382c:	69fa      	ldr	r2, [r7, #28]
 800382e:	f002 0203 	and.w	r2, r2, #3
 8003832:	0092      	lsls	r2, r2, #2
 8003834:	4093      	lsls	r3, r2
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	4313      	orrs	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800383c:	4935      	ldr	r1, [pc, #212]	; (8003914 <HAL_GPIO_Init+0x310>)
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	089b      	lsrs	r3, r3, #2
 8003842:	3302      	adds	r3, #2
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800384a:	4b3b      	ldr	r3, [pc, #236]	; (8003938 <HAL_GPIO_Init+0x334>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	43db      	mvns	r3, r3
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4013      	ands	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	4313      	orrs	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800386e:	4a32      	ldr	r2, [pc, #200]	; (8003938 <HAL_GPIO_Init+0x334>)
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003874:	4b30      	ldr	r3, [pc, #192]	; (8003938 <HAL_GPIO_Init+0x334>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	43db      	mvns	r3, r3
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	4013      	ands	r3, r2
 8003882:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003898:	4a27      	ldr	r2, [pc, #156]	; (8003938 <HAL_GPIO_Init+0x334>)
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800389e:	4b26      	ldr	r3, [pc, #152]	; (8003938 <HAL_GPIO_Init+0x334>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	43db      	mvns	r3, r3
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	4013      	ands	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	4313      	orrs	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038c2:	4a1d      	ldr	r2, [pc, #116]	; (8003938 <HAL_GPIO_Init+0x334>)
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038c8:	4b1b      	ldr	r3, [pc, #108]	; (8003938 <HAL_GPIO_Init+0x334>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	43db      	mvns	r3, r3
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	4013      	ands	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038ec:	4a12      	ldr	r2, [pc, #72]	; (8003938 <HAL_GPIO_Init+0x334>)
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	3301      	adds	r3, #1
 80038f6:	61fb      	str	r3, [r7, #28]
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	2b0f      	cmp	r3, #15
 80038fc:	f67f ae90 	bls.w	8003620 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003900:	bf00      	nop
 8003902:	bf00      	nop
 8003904:	3724      	adds	r7, #36	; 0x24
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	40023800 	.word	0x40023800
 8003914:	40013800 	.word	0x40013800
 8003918:	40020000 	.word	0x40020000
 800391c:	40020400 	.word	0x40020400
 8003920:	40020800 	.word	0x40020800
 8003924:	40020c00 	.word	0x40020c00
 8003928:	40021000 	.word	0x40021000
 800392c:	40021400 	.word	0x40021400
 8003930:	40021800 	.word	0x40021800
 8003934:	40021c00 	.word	0x40021c00
 8003938:	40013c00 	.word	0x40013c00

0800393c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	460b      	mov	r3, r1
 8003946:	807b      	strh	r3, [r7, #2]
 8003948:	4613      	mov	r3, r2
 800394a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800394c:	787b      	ldrb	r3, [r7, #1]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003952:	887a      	ldrh	r2, [r7, #2]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003958:	e003      	b.n	8003962 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800395a:	887b      	ldrh	r3, [r7, #2]
 800395c:	041a      	lsls	r2, r3, #16
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	619a      	str	r2, [r3, #24]
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
	...

08003970 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e264      	b.n	8003e4c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b00      	cmp	r3, #0
 800398c:	d075      	beq.n	8003a7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800398e:	4ba3      	ldr	r3, [pc, #652]	; (8003c1c <HAL_RCC_OscConfig+0x2ac>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 030c 	and.w	r3, r3, #12
 8003996:	2b04      	cmp	r3, #4
 8003998:	d00c      	beq.n	80039b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800399a:	4ba0      	ldr	r3, [pc, #640]	; (8003c1c <HAL_RCC_OscConfig+0x2ac>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039a2:	2b08      	cmp	r3, #8
 80039a4:	d112      	bne.n	80039cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039a6:	4b9d      	ldr	r3, [pc, #628]	; (8003c1c <HAL_RCC_OscConfig+0x2ac>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039b2:	d10b      	bne.n	80039cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b4:	4b99      	ldr	r3, [pc, #612]	; (8003c1c <HAL_RCC_OscConfig+0x2ac>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d05b      	beq.n	8003a78 <HAL_RCC_OscConfig+0x108>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d157      	bne.n	8003a78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e23f      	b.n	8003e4c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d4:	d106      	bne.n	80039e4 <HAL_RCC_OscConfig+0x74>
 80039d6:	4b91      	ldr	r3, [pc, #580]	; (8003c1c <HAL_RCC_OscConfig+0x2ac>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a90      	ldr	r2, [pc, #576]	; (8003c1c <HAL_RCC_OscConfig+0x2ac>)
 80039dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e0:	6013      	str	r3, [r2, #0]
 80039e2:	e01d      	b.n	8003a20 <HAL_RCC_OscConfig+0xb0>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039ec:	d10c      	bne.n	8003a08 <HAL_RCC_OscConfig+0x98>
 80039ee:	4b8b      	ldr	r3, [pc, #556]	; (8003c1c <HAL_RCC_OscConfig+0x2ac>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a8a      	ldr	r2, [pc, #552]	; (8003c1c <HAL_RCC_OscConfig+0x2ac>)
 80039f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	4b88      	ldr	r3, [pc, #544]	; (8003c1c <HAL_RCC_OscConfig+0x2ac>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a87      	ldr	r2, [pc, #540]	; (8003c1c <HAL_RCC_OscConfig+0x2ac>)
 8003a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	e00b      	b.n	8003a20 <HAL_RCC_OscConfig+0xb0>
 8003a08:	4b84      	ldr	r3, [pc, #528]	; (8003c1c <HAL_RCC_OscConfig+0x2ac>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a83      	ldr	r2, [pc, #524]	; (8003c1c <HAL_RCC_OscConfig+0x2ac>)
 8003a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a12:	6013      	str	r3, [r2, #0]
 8003a14:	4b81      	ldr	r3, [pc, #516]	; (8003c1c <HAL_RCC_OscConfig+0x2ac>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a80      	ldr	r2, [pc, #512]	; (8003c1c <HAL_RCC_OscConfig+0x2ac>)
 8003a1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d013      	beq.n	8003a50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a28:	f7ff f8a8 	bl	8002b7c <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a30:	f7ff f8a4 	bl	8002b7c <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b64      	cmp	r3, #100	; 0x64
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e204      	b.n	8003e4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a42:	4b76      	ldr	r3, [pc, #472]	; (8003c1c <HAL_RCC_OscConfig+0x2ac>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0f0      	beq.n	8003a30 <HAL_RCC_OscConfig+0xc0>
 8003a4e:	e014      	b.n	8003a7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a50:	f7ff f894 	bl	8002b7c <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a58:	f7ff f890 	bl	8002b7c <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b64      	cmp	r3, #100	; 0x64
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e1f0      	b.n	8003e4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a6a:	4b6c      	ldr	r3, [pc, #432]	; (8003c1c <HAL_RCC_OscConfig+0x2ac>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1f0      	bne.n	8003a58 <HAL_RCC_OscConfig+0xe8>
 8003a76:	e000      	b.n	8003a7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d063      	beq.n	8003b4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a86:	4b65      	ldr	r3, [pc, #404]	; (8003c1c <HAL_RCC_OscConfig+0x2ac>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 030c 	and.w	r3, r3, #12
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00b      	beq.n	8003aaa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a92:	4b62      	ldr	r3, [pc, #392]	; (8003c1c <HAL_RCC_OscConfig+0x2ac>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a9a:	2b08      	cmp	r3, #8
 8003a9c:	d11c      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a9e:	4b5f      	ldr	r3, [pc, #380]	; (8003c1c <HAL_RCC_OscConfig+0x2ac>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d116      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aaa:	4b5c      	ldr	r3, [pc, #368]	; (8003c1c <HAL_RCC_OscConfig+0x2ac>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d005      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x152>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d001      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e1c4      	b.n	8003e4c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac2:	4b56      	ldr	r3, [pc, #344]	; (8003c1c <HAL_RCC_OscConfig+0x2ac>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	4952      	ldr	r1, [pc, #328]	; (8003c1c <HAL_RCC_OscConfig+0x2ac>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ad6:	e03a      	b.n	8003b4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d020      	beq.n	8003b22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ae0:	4b4f      	ldr	r3, [pc, #316]	; (8003c20 <HAL_RCC_OscConfig+0x2b0>)
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae6:	f7ff f849 	bl	8002b7c <HAL_GetTick>
 8003aea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aec:	e008      	b.n	8003b00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aee:	f7ff f845 	bl	8002b7c <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d901      	bls.n	8003b00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e1a5      	b.n	8003e4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b00:	4b46      	ldr	r3, [pc, #280]	; (8003c1c <HAL_RCC_OscConfig+0x2ac>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0f0      	beq.n	8003aee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b0c:	4b43      	ldr	r3, [pc, #268]	; (8003c1c <HAL_RCC_OscConfig+0x2ac>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	4940      	ldr	r1, [pc, #256]	; (8003c1c <HAL_RCC_OscConfig+0x2ac>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	600b      	str	r3, [r1, #0]
 8003b20:	e015      	b.n	8003b4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b22:	4b3f      	ldr	r3, [pc, #252]	; (8003c20 <HAL_RCC_OscConfig+0x2b0>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b28:	f7ff f828 	bl	8002b7c <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b30:	f7ff f824 	bl	8002b7c <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e184      	b.n	8003e4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b42:	4b36      	ldr	r3, [pc, #216]	; (8003c1c <HAL_RCC_OscConfig+0x2ac>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1f0      	bne.n	8003b30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0308 	and.w	r3, r3, #8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d030      	beq.n	8003bbc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d016      	beq.n	8003b90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b62:	4b30      	ldr	r3, [pc, #192]	; (8003c24 <HAL_RCC_OscConfig+0x2b4>)
 8003b64:	2201      	movs	r2, #1
 8003b66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b68:	f7ff f808 	bl	8002b7c <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b70:	f7ff f804 	bl	8002b7c <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e164      	b.n	8003e4c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b82:	4b26      	ldr	r3, [pc, #152]	; (8003c1c <HAL_RCC_OscConfig+0x2ac>)
 8003b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0f0      	beq.n	8003b70 <HAL_RCC_OscConfig+0x200>
 8003b8e:	e015      	b.n	8003bbc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b90:	4b24      	ldr	r3, [pc, #144]	; (8003c24 <HAL_RCC_OscConfig+0x2b4>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b96:	f7fe fff1 	bl	8002b7c <HAL_GetTick>
 8003b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b9c:	e008      	b.n	8003bb0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b9e:	f7fe ffed 	bl	8002b7c <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e14d      	b.n	8003e4c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bb0:	4b1a      	ldr	r3, [pc, #104]	; (8003c1c <HAL_RCC_OscConfig+0x2ac>)
 8003bb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1f0      	bne.n	8003b9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f000 80a0 	beq.w	8003d0a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bce:	4b13      	ldr	r3, [pc, #76]	; (8003c1c <HAL_RCC_OscConfig+0x2ac>)
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10f      	bne.n	8003bfa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60bb      	str	r3, [r7, #8]
 8003bde:	4b0f      	ldr	r3, [pc, #60]	; (8003c1c <HAL_RCC_OscConfig+0x2ac>)
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	4a0e      	ldr	r2, [pc, #56]	; (8003c1c <HAL_RCC_OscConfig+0x2ac>)
 8003be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be8:	6413      	str	r3, [r2, #64]	; 0x40
 8003bea:	4b0c      	ldr	r3, [pc, #48]	; (8003c1c <HAL_RCC_OscConfig+0x2ac>)
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf2:	60bb      	str	r3, [r7, #8]
 8003bf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bfa:	4b0b      	ldr	r3, [pc, #44]	; (8003c28 <HAL_RCC_OscConfig+0x2b8>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d121      	bne.n	8003c4a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c06:	4b08      	ldr	r3, [pc, #32]	; (8003c28 <HAL_RCC_OscConfig+0x2b8>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a07      	ldr	r2, [pc, #28]	; (8003c28 <HAL_RCC_OscConfig+0x2b8>)
 8003c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c12:	f7fe ffb3 	bl	8002b7c <HAL_GetTick>
 8003c16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c18:	e011      	b.n	8003c3e <HAL_RCC_OscConfig+0x2ce>
 8003c1a:	bf00      	nop
 8003c1c:	40023800 	.word	0x40023800
 8003c20:	42470000 	.word	0x42470000
 8003c24:	42470e80 	.word	0x42470e80
 8003c28:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c2c:	f7fe ffa6 	bl	8002b7c <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e106      	b.n	8003e4c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c3e:	4b85      	ldr	r3, [pc, #532]	; (8003e54 <HAL_RCC_OscConfig+0x4e4>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0f0      	beq.n	8003c2c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d106      	bne.n	8003c60 <HAL_RCC_OscConfig+0x2f0>
 8003c52:	4b81      	ldr	r3, [pc, #516]	; (8003e58 <HAL_RCC_OscConfig+0x4e8>)
 8003c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c56:	4a80      	ldr	r2, [pc, #512]	; (8003e58 <HAL_RCC_OscConfig+0x4e8>)
 8003c58:	f043 0301 	orr.w	r3, r3, #1
 8003c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c5e:	e01c      	b.n	8003c9a <HAL_RCC_OscConfig+0x32a>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	2b05      	cmp	r3, #5
 8003c66:	d10c      	bne.n	8003c82 <HAL_RCC_OscConfig+0x312>
 8003c68:	4b7b      	ldr	r3, [pc, #492]	; (8003e58 <HAL_RCC_OscConfig+0x4e8>)
 8003c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6c:	4a7a      	ldr	r2, [pc, #488]	; (8003e58 <HAL_RCC_OscConfig+0x4e8>)
 8003c6e:	f043 0304 	orr.w	r3, r3, #4
 8003c72:	6713      	str	r3, [r2, #112]	; 0x70
 8003c74:	4b78      	ldr	r3, [pc, #480]	; (8003e58 <HAL_RCC_OscConfig+0x4e8>)
 8003c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c78:	4a77      	ldr	r2, [pc, #476]	; (8003e58 <HAL_RCC_OscConfig+0x4e8>)
 8003c7a:	f043 0301 	orr.w	r3, r3, #1
 8003c7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c80:	e00b      	b.n	8003c9a <HAL_RCC_OscConfig+0x32a>
 8003c82:	4b75      	ldr	r3, [pc, #468]	; (8003e58 <HAL_RCC_OscConfig+0x4e8>)
 8003c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c86:	4a74      	ldr	r2, [pc, #464]	; (8003e58 <HAL_RCC_OscConfig+0x4e8>)
 8003c88:	f023 0301 	bic.w	r3, r3, #1
 8003c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c8e:	4b72      	ldr	r3, [pc, #456]	; (8003e58 <HAL_RCC_OscConfig+0x4e8>)
 8003c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c92:	4a71      	ldr	r2, [pc, #452]	; (8003e58 <HAL_RCC_OscConfig+0x4e8>)
 8003c94:	f023 0304 	bic.w	r3, r3, #4
 8003c98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d015      	beq.n	8003cce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca2:	f7fe ff6b 	bl	8002b7c <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca8:	e00a      	b.n	8003cc0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003caa:	f7fe ff67 	bl	8002b7c <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e0c5      	b.n	8003e4c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc0:	4b65      	ldr	r3, [pc, #404]	; (8003e58 <HAL_RCC_OscConfig+0x4e8>)
 8003cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0ee      	beq.n	8003caa <HAL_RCC_OscConfig+0x33a>
 8003ccc:	e014      	b.n	8003cf8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cce:	f7fe ff55 	bl	8002b7c <HAL_GetTick>
 8003cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cd4:	e00a      	b.n	8003cec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cd6:	f7fe ff51 	bl	8002b7c <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e0af      	b.n	8003e4c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cec:	4b5a      	ldr	r3, [pc, #360]	; (8003e58 <HAL_RCC_OscConfig+0x4e8>)
 8003cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1ee      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cf8:	7dfb      	ldrb	r3, [r7, #23]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d105      	bne.n	8003d0a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cfe:	4b56      	ldr	r3, [pc, #344]	; (8003e58 <HAL_RCC_OscConfig+0x4e8>)
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	4a55      	ldr	r2, [pc, #340]	; (8003e58 <HAL_RCC_OscConfig+0x4e8>)
 8003d04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 809b 	beq.w	8003e4a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d14:	4b50      	ldr	r3, [pc, #320]	; (8003e58 <HAL_RCC_OscConfig+0x4e8>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f003 030c 	and.w	r3, r3, #12
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d05c      	beq.n	8003dda <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d141      	bne.n	8003dac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d28:	4b4c      	ldr	r3, [pc, #304]	; (8003e5c <HAL_RCC_OscConfig+0x4ec>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2e:	f7fe ff25 	bl	8002b7c <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d34:	e008      	b.n	8003d48 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d36:	f7fe ff21 	bl	8002b7c <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e081      	b.n	8003e4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d48:	4b43      	ldr	r3, [pc, #268]	; (8003e58 <HAL_RCC_OscConfig+0x4e8>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1f0      	bne.n	8003d36 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	69da      	ldr	r2, [r3, #28]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	019b      	lsls	r3, r3, #6
 8003d64:	431a      	orrs	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6a:	085b      	lsrs	r3, r3, #1
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	041b      	lsls	r3, r3, #16
 8003d70:	431a      	orrs	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d76:	061b      	lsls	r3, r3, #24
 8003d78:	4937      	ldr	r1, [pc, #220]	; (8003e58 <HAL_RCC_OscConfig+0x4e8>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d7e:	4b37      	ldr	r3, [pc, #220]	; (8003e5c <HAL_RCC_OscConfig+0x4ec>)
 8003d80:	2201      	movs	r2, #1
 8003d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d84:	f7fe fefa 	bl	8002b7c <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d8c:	f7fe fef6 	bl	8002b7c <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e056      	b.n	8003e4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d9e:	4b2e      	ldr	r3, [pc, #184]	; (8003e58 <HAL_RCC_OscConfig+0x4e8>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d0f0      	beq.n	8003d8c <HAL_RCC_OscConfig+0x41c>
 8003daa:	e04e      	b.n	8003e4a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dac:	4b2b      	ldr	r3, [pc, #172]	; (8003e5c <HAL_RCC_OscConfig+0x4ec>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db2:	f7fe fee3 	bl	8002b7c <HAL_GetTick>
 8003db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003db8:	e008      	b.n	8003dcc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dba:	f7fe fedf 	bl	8002b7c <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e03f      	b.n	8003e4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dcc:	4b22      	ldr	r3, [pc, #136]	; (8003e58 <HAL_RCC_OscConfig+0x4e8>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1f0      	bne.n	8003dba <HAL_RCC_OscConfig+0x44a>
 8003dd8:	e037      	b.n	8003e4a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d101      	bne.n	8003de6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e032      	b.n	8003e4c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003de6:	4b1c      	ldr	r3, [pc, #112]	; (8003e58 <HAL_RCC_OscConfig+0x4e8>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d028      	beq.n	8003e46 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d121      	bne.n	8003e46 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d11a      	bne.n	8003e46 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e16:	4013      	ands	r3, r2
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e1c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d111      	bne.n	8003e46 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2c:	085b      	lsrs	r3, r3, #1
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d107      	bne.n	8003e46 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e40:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d001      	beq.n	8003e4a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e000      	b.n	8003e4c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3718      	adds	r7, #24
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	40007000 	.word	0x40007000
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	42470060 	.word	0x42470060

08003e60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d101      	bne.n	8003e74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e0cc      	b.n	800400e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e74:	4b68      	ldr	r3, [pc, #416]	; (8004018 <HAL_RCC_ClockConfig+0x1b8>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0307 	and.w	r3, r3, #7
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d90c      	bls.n	8003e9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e82:	4b65      	ldr	r3, [pc, #404]	; (8004018 <HAL_RCC_ClockConfig+0x1b8>)
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	b2d2      	uxtb	r2, r2
 8003e88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e8a:	4b63      	ldr	r3, [pc, #396]	; (8004018 <HAL_RCC_ClockConfig+0x1b8>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d001      	beq.n	8003e9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e0b8      	b.n	800400e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d020      	beq.n	8003eea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d005      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003eb4:	4b59      	ldr	r3, [pc, #356]	; (800401c <HAL_RCC_ClockConfig+0x1bc>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	4a58      	ldr	r2, [pc, #352]	; (800401c <HAL_RCC_ClockConfig+0x1bc>)
 8003eba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ebe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0308 	and.w	r3, r3, #8
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d005      	beq.n	8003ed8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ecc:	4b53      	ldr	r3, [pc, #332]	; (800401c <HAL_RCC_ClockConfig+0x1bc>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	4a52      	ldr	r2, [pc, #328]	; (800401c <HAL_RCC_ClockConfig+0x1bc>)
 8003ed2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ed6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ed8:	4b50      	ldr	r3, [pc, #320]	; (800401c <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	494d      	ldr	r1, [pc, #308]	; (800401c <HAL_RCC_ClockConfig+0x1bc>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d044      	beq.n	8003f80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d107      	bne.n	8003f0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003efe:	4b47      	ldr	r3, [pc, #284]	; (800401c <HAL_RCC_ClockConfig+0x1bc>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d119      	bne.n	8003f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e07f      	b.n	800400e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d003      	beq.n	8003f1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f1a:	2b03      	cmp	r3, #3
 8003f1c:	d107      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f1e:	4b3f      	ldr	r3, [pc, #252]	; (800401c <HAL_RCC_ClockConfig+0x1bc>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d109      	bne.n	8003f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e06f      	b.n	800400e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f2e:	4b3b      	ldr	r3, [pc, #236]	; (800401c <HAL_RCC_ClockConfig+0x1bc>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e067      	b.n	800400e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f3e:	4b37      	ldr	r3, [pc, #220]	; (800401c <HAL_RCC_ClockConfig+0x1bc>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f023 0203 	bic.w	r2, r3, #3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	4934      	ldr	r1, [pc, #208]	; (800401c <HAL_RCC_ClockConfig+0x1bc>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f50:	f7fe fe14 	bl	8002b7c <HAL_GetTick>
 8003f54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f56:	e00a      	b.n	8003f6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f58:	f7fe fe10 	bl	8002b7c <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e04f      	b.n	800400e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f6e:	4b2b      	ldr	r3, [pc, #172]	; (800401c <HAL_RCC_ClockConfig+0x1bc>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 020c 	and.w	r2, r3, #12
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d1eb      	bne.n	8003f58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f80:	4b25      	ldr	r3, [pc, #148]	; (8004018 <HAL_RCC_ClockConfig+0x1b8>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0307 	and.w	r3, r3, #7
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d20c      	bcs.n	8003fa8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f8e:	4b22      	ldr	r3, [pc, #136]	; (8004018 <HAL_RCC_ClockConfig+0x1b8>)
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	b2d2      	uxtb	r2, r2
 8003f94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f96:	4b20      	ldr	r3, [pc, #128]	; (8004018 <HAL_RCC_ClockConfig+0x1b8>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d001      	beq.n	8003fa8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e032      	b.n	800400e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0304 	and.w	r3, r3, #4
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d008      	beq.n	8003fc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fb4:	4b19      	ldr	r3, [pc, #100]	; (800401c <HAL_RCC_ClockConfig+0x1bc>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	4916      	ldr	r1, [pc, #88]	; (800401c <HAL_RCC_ClockConfig+0x1bc>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0308 	and.w	r3, r3, #8
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d009      	beq.n	8003fe6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fd2:	4b12      	ldr	r3, [pc, #72]	; (800401c <HAL_RCC_ClockConfig+0x1bc>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	490e      	ldr	r1, [pc, #56]	; (800401c <HAL_RCC_ClockConfig+0x1bc>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fe6:	f000 f821 	bl	800402c <HAL_RCC_GetSysClockFreq>
 8003fea:	4602      	mov	r2, r0
 8003fec:	4b0b      	ldr	r3, [pc, #44]	; (800401c <HAL_RCC_ClockConfig+0x1bc>)
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	091b      	lsrs	r3, r3, #4
 8003ff2:	f003 030f 	and.w	r3, r3, #15
 8003ff6:	490a      	ldr	r1, [pc, #40]	; (8004020 <HAL_RCC_ClockConfig+0x1c0>)
 8003ff8:	5ccb      	ldrb	r3, [r1, r3]
 8003ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8003ffe:	4a09      	ldr	r2, [pc, #36]	; (8004024 <HAL_RCC_ClockConfig+0x1c4>)
 8004000:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004002:	4b09      	ldr	r3, [pc, #36]	; (8004028 <HAL_RCC_ClockConfig+0x1c8>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4618      	mov	r0, r3
 8004008:	f7fe fd74 	bl	8002af4 <HAL_InitTick>

  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	40023c00 	.word	0x40023c00
 800401c:	40023800 	.word	0x40023800
 8004020:	08006d18 	.word	0x08006d18
 8004024:	20000380 	.word	0x20000380
 8004028:	20000384 	.word	0x20000384

0800402c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800402c:	b5b0      	push	{r4, r5, r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004032:	2100      	movs	r1, #0
 8004034:	6079      	str	r1, [r7, #4]
 8004036:	2100      	movs	r1, #0
 8004038:	60f9      	str	r1, [r7, #12]
 800403a:	2100      	movs	r1, #0
 800403c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800403e:	2100      	movs	r1, #0
 8004040:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004042:	4952      	ldr	r1, [pc, #328]	; (800418c <HAL_RCC_GetSysClockFreq+0x160>)
 8004044:	6889      	ldr	r1, [r1, #8]
 8004046:	f001 010c 	and.w	r1, r1, #12
 800404a:	2908      	cmp	r1, #8
 800404c:	d00d      	beq.n	800406a <HAL_RCC_GetSysClockFreq+0x3e>
 800404e:	2908      	cmp	r1, #8
 8004050:	f200 8094 	bhi.w	800417c <HAL_RCC_GetSysClockFreq+0x150>
 8004054:	2900      	cmp	r1, #0
 8004056:	d002      	beq.n	800405e <HAL_RCC_GetSysClockFreq+0x32>
 8004058:	2904      	cmp	r1, #4
 800405a:	d003      	beq.n	8004064 <HAL_RCC_GetSysClockFreq+0x38>
 800405c:	e08e      	b.n	800417c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800405e:	4b4c      	ldr	r3, [pc, #304]	; (8004190 <HAL_RCC_GetSysClockFreq+0x164>)
 8004060:	60bb      	str	r3, [r7, #8]
       break;
 8004062:	e08e      	b.n	8004182 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004064:	4b4b      	ldr	r3, [pc, #300]	; (8004194 <HAL_RCC_GetSysClockFreq+0x168>)
 8004066:	60bb      	str	r3, [r7, #8]
      break;
 8004068:	e08b      	b.n	8004182 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800406a:	4948      	ldr	r1, [pc, #288]	; (800418c <HAL_RCC_GetSysClockFreq+0x160>)
 800406c:	6849      	ldr	r1, [r1, #4]
 800406e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004072:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004074:	4945      	ldr	r1, [pc, #276]	; (800418c <HAL_RCC_GetSysClockFreq+0x160>)
 8004076:	6849      	ldr	r1, [r1, #4]
 8004078:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800407c:	2900      	cmp	r1, #0
 800407e:	d024      	beq.n	80040ca <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004080:	4942      	ldr	r1, [pc, #264]	; (800418c <HAL_RCC_GetSysClockFreq+0x160>)
 8004082:	6849      	ldr	r1, [r1, #4]
 8004084:	0989      	lsrs	r1, r1, #6
 8004086:	4608      	mov	r0, r1
 8004088:	f04f 0100 	mov.w	r1, #0
 800408c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004090:	f04f 0500 	mov.w	r5, #0
 8004094:	ea00 0204 	and.w	r2, r0, r4
 8004098:	ea01 0305 	and.w	r3, r1, r5
 800409c:	493d      	ldr	r1, [pc, #244]	; (8004194 <HAL_RCC_GetSysClockFreq+0x168>)
 800409e:	fb01 f003 	mul.w	r0, r1, r3
 80040a2:	2100      	movs	r1, #0
 80040a4:	fb01 f102 	mul.w	r1, r1, r2
 80040a8:	1844      	adds	r4, r0, r1
 80040aa:	493a      	ldr	r1, [pc, #232]	; (8004194 <HAL_RCC_GetSysClockFreq+0x168>)
 80040ac:	fba2 0101 	umull	r0, r1, r2, r1
 80040b0:	1863      	adds	r3, r4, r1
 80040b2:	4619      	mov	r1, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	461a      	mov	r2, r3
 80040b8:	f04f 0300 	mov.w	r3, #0
 80040bc:	f7fc f884 	bl	80001c8 <__aeabi_uldivmod>
 80040c0:	4602      	mov	r2, r0
 80040c2:	460b      	mov	r3, r1
 80040c4:	4613      	mov	r3, r2
 80040c6:	60fb      	str	r3, [r7, #12]
 80040c8:	e04a      	b.n	8004160 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ca:	4b30      	ldr	r3, [pc, #192]	; (800418c <HAL_RCC_GetSysClockFreq+0x160>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	099b      	lsrs	r3, r3, #6
 80040d0:	461a      	mov	r2, r3
 80040d2:	f04f 0300 	mov.w	r3, #0
 80040d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80040da:	f04f 0100 	mov.w	r1, #0
 80040de:	ea02 0400 	and.w	r4, r2, r0
 80040e2:	ea03 0501 	and.w	r5, r3, r1
 80040e6:	4620      	mov	r0, r4
 80040e8:	4629      	mov	r1, r5
 80040ea:	f04f 0200 	mov.w	r2, #0
 80040ee:	f04f 0300 	mov.w	r3, #0
 80040f2:	014b      	lsls	r3, r1, #5
 80040f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80040f8:	0142      	lsls	r2, r0, #5
 80040fa:	4610      	mov	r0, r2
 80040fc:	4619      	mov	r1, r3
 80040fe:	1b00      	subs	r0, r0, r4
 8004100:	eb61 0105 	sbc.w	r1, r1, r5
 8004104:	f04f 0200 	mov.w	r2, #0
 8004108:	f04f 0300 	mov.w	r3, #0
 800410c:	018b      	lsls	r3, r1, #6
 800410e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004112:	0182      	lsls	r2, r0, #6
 8004114:	1a12      	subs	r2, r2, r0
 8004116:	eb63 0301 	sbc.w	r3, r3, r1
 800411a:	f04f 0000 	mov.w	r0, #0
 800411e:	f04f 0100 	mov.w	r1, #0
 8004122:	00d9      	lsls	r1, r3, #3
 8004124:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004128:	00d0      	lsls	r0, r2, #3
 800412a:	4602      	mov	r2, r0
 800412c:	460b      	mov	r3, r1
 800412e:	1912      	adds	r2, r2, r4
 8004130:	eb45 0303 	adc.w	r3, r5, r3
 8004134:	f04f 0000 	mov.w	r0, #0
 8004138:	f04f 0100 	mov.w	r1, #0
 800413c:	0299      	lsls	r1, r3, #10
 800413e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004142:	0290      	lsls	r0, r2, #10
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	4610      	mov	r0, r2
 800414a:	4619      	mov	r1, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	461a      	mov	r2, r3
 8004150:	f04f 0300 	mov.w	r3, #0
 8004154:	f7fc f838 	bl	80001c8 <__aeabi_uldivmod>
 8004158:	4602      	mov	r2, r0
 800415a:	460b      	mov	r3, r1
 800415c:	4613      	mov	r3, r2
 800415e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004160:	4b0a      	ldr	r3, [pc, #40]	; (800418c <HAL_RCC_GetSysClockFreq+0x160>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	0c1b      	lsrs	r3, r3, #16
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	3301      	adds	r3, #1
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	fbb2 f3f3 	udiv	r3, r2, r3
 8004178:	60bb      	str	r3, [r7, #8]
      break;
 800417a:	e002      	b.n	8004182 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800417c:	4b04      	ldr	r3, [pc, #16]	; (8004190 <HAL_RCC_GetSysClockFreq+0x164>)
 800417e:	60bb      	str	r3, [r7, #8]
      break;
 8004180:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004182:	68bb      	ldr	r3, [r7, #8]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bdb0      	pop	{r4, r5, r7, pc}
 800418c:	40023800 	.word	0x40023800
 8004190:	00f42400 	.word	0x00f42400
 8004194:	017d7840 	.word	0x017d7840

08004198 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800419c:	4b03      	ldr	r3, [pc, #12]	; (80041ac <HAL_RCC_GetHCLKFreq+0x14>)
 800419e:	681b      	ldr	r3, [r3, #0]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	20000380 	.word	0x20000380

080041b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041b4:	f7ff fff0 	bl	8004198 <HAL_RCC_GetHCLKFreq>
 80041b8:	4602      	mov	r2, r0
 80041ba:	4b05      	ldr	r3, [pc, #20]	; (80041d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	0a9b      	lsrs	r3, r3, #10
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	4903      	ldr	r1, [pc, #12]	; (80041d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041c6:	5ccb      	ldrb	r3, [r1, r3]
 80041c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	40023800 	.word	0x40023800
 80041d4:	08006d28 	.word	0x08006d28

080041d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041dc:	f7ff ffdc 	bl	8004198 <HAL_RCC_GetHCLKFreq>
 80041e0:	4602      	mov	r2, r0
 80041e2:	4b05      	ldr	r3, [pc, #20]	; (80041f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	0b5b      	lsrs	r3, r3, #13
 80041e8:	f003 0307 	and.w	r3, r3, #7
 80041ec:	4903      	ldr	r1, [pc, #12]	; (80041fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80041ee:	5ccb      	ldrb	r3, [r1, r3]
 80041f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	40023800 	.word	0x40023800
 80041fc:	08006d28 	.word	0x08006d28

08004200 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e07b      	b.n	800430a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004216:	2b00      	cmp	r3, #0
 8004218:	d108      	bne.n	800422c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004222:	d009      	beq.n	8004238 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	61da      	str	r2, [r3, #28]
 800422a:	e005      	b.n	8004238 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d106      	bne.n	8004258 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7fe f826 	bl	80022a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2202      	movs	r2, #2
 800425c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800426e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004280:	431a      	orrs	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800428a:	431a      	orrs	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	431a      	orrs	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	431a      	orrs	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042a8:	431a      	orrs	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	69db      	ldr	r3, [r3, #28]
 80042ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042b2:	431a      	orrs	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042bc:	ea42 0103 	orr.w	r1, r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	430a      	orrs	r2, r1
 80042ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	0c1b      	lsrs	r3, r3, #16
 80042d6:	f003 0104 	and.w	r1, r3, #4
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	f003 0210 	and.w	r2, r3, #16
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	69da      	ldr	r2, [r3, #28]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b088      	sub	sp, #32
 8004316:	af00      	add	r7, sp, #0
 8004318:	60f8      	str	r0, [r7, #12]
 800431a:	60b9      	str	r1, [r7, #8]
 800431c:	603b      	str	r3, [r7, #0]
 800431e:	4613      	mov	r3, r2
 8004320:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004322:	2300      	movs	r3, #0
 8004324:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800432c:	2b01      	cmp	r3, #1
 800432e:	d101      	bne.n	8004334 <HAL_SPI_Transmit+0x22>
 8004330:	2302      	movs	r3, #2
 8004332:	e126      	b.n	8004582 <HAL_SPI_Transmit+0x270>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800433c:	f7fe fc1e 	bl	8002b7c <HAL_GetTick>
 8004340:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004342:	88fb      	ldrh	r3, [r7, #6]
 8004344:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b01      	cmp	r3, #1
 8004350:	d002      	beq.n	8004358 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004352:	2302      	movs	r3, #2
 8004354:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004356:	e10b      	b.n	8004570 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d002      	beq.n	8004364 <HAL_SPI_Transmit+0x52>
 800435e:	88fb      	ldrh	r3, [r7, #6]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d102      	bne.n	800436a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004368:	e102      	b.n	8004570 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2203      	movs	r2, #3
 800436e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	88fa      	ldrh	r2, [r7, #6]
 8004382:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	88fa      	ldrh	r2, [r7, #6]
 8004388:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043b0:	d10f      	bne.n	80043d2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043dc:	2b40      	cmp	r3, #64	; 0x40
 80043de:	d007      	beq.n	80043f0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043f8:	d14b      	bne.n	8004492 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d002      	beq.n	8004408 <HAL_SPI_Transmit+0xf6>
 8004402:	8afb      	ldrh	r3, [r7, #22]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d13e      	bne.n	8004486 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440c:	881a      	ldrh	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004418:	1c9a      	adds	r2, r3, #2
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004422:	b29b      	uxth	r3, r3
 8004424:	3b01      	subs	r3, #1
 8004426:	b29a      	uxth	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800442c:	e02b      	b.n	8004486 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b02      	cmp	r3, #2
 800443a:	d112      	bne.n	8004462 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004440:	881a      	ldrh	r2, [r3, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444c:	1c9a      	adds	r2, r3, #2
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004456:	b29b      	uxth	r3, r3
 8004458:	3b01      	subs	r3, #1
 800445a:	b29a      	uxth	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004460:	e011      	b.n	8004486 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004462:	f7fe fb8b 	bl	8002b7c <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	429a      	cmp	r2, r3
 8004470:	d803      	bhi.n	800447a <HAL_SPI_Transmit+0x168>
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004478:	d102      	bne.n	8004480 <HAL_SPI_Transmit+0x16e>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d102      	bne.n	8004486 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004484:	e074      	b.n	8004570 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800448a:	b29b      	uxth	r3, r3
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1ce      	bne.n	800442e <HAL_SPI_Transmit+0x11c>
 8004490:	e04c      	b.n	800452c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d002      	beq.n	80044a0 <HAL_SPI_Transmit+0x18e>
 800449a:	8afb      	ldrh	r3, [r7, #22]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d140      	bne.n	8004522 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	330c      	adds	r3, #12
 80044aa:	7812      	ldrb	r2, [r2, #0]
 80044ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b2:	1c5a      	adds	r2, r3, #1
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044bc:	b29b      	uxth	r3, r3
 80044be:	3b01      	subs	r3, #1
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80044c6:	e02c      	b.n	8004522 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d113      	bne.n	80044fe <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	330c      	adds	r3, #12
 80044e0:	7812      	ldrb	r2, [r2, #0]
 80044e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e8:	1c5a      	adds	r2, r3, #1
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80044fc:	e011      	b.n	8004522 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044fe:	f7fe fb3d 	bl	8002b7c <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	429a      	cmp	r2, r3
 800450c:	d803      	bhi.n	8004516 <HAL_SPI_Transmit+0x204>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004514:	d102      	bne.n	800451c <HAL_SPI_Transmit+0x20a>
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d102      	bne.n	8004522 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004520:	e026      	b.n	8004570 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004526:	b29b      	uxth	r3, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1cd      	bne.n	80044c8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	6839      	ldr	r1, [r7, #0]
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 fb73 	bl	8004c1c <SPI_EndRxTxTransaction>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d002      	beq.n	8004542 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2220      	movs	r2, #32
 8004540:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10a      	bne.n	8004560 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800454a:	2300      	movs	r3, #0
 800454c:	613b      	str	r3, [r7, #16]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	613b      	str	r3, [r7, #16]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	613b      	str	r3, [r7, #16]
 800455e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004564:	2b00      	cmp	r3, #0
 8004566:	d002      	beq.n	800456e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	77fb      	strb	r3, [r7, #31]
 800456c:	e000      	b.n	8004570 <HAL_SPI_Transmit+0x25e>
  }

error:
 800456e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004580:	7ffb      	ldrb	r3, [r7, #31]
}
 8004582:	4618      	mov	r0, r3
 8004584:	3720      	adds	r7, #32
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b08c      	sub	sp, #48	; 0x30
 800458e:	af00      	add	r7, sp, #0
 8004590:	60f8      	str	r0, [r7, #12]
 8004592:	60b9      	str	r1, [r7, #8]
 8004594:	607a      	str	r2, [r7, #4]
 8004596:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004598:	2301      	movs	r3, #1
 800459a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800459c:	2300      	movs	r3, #0
 800459e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d101      	bne.n	80045b0 <HAL_SPI_TransmitReceive+0x26>
 80045ac:	2302      	movs	r3, #2
 80045ae:	e18a      	b.n	80048c6 <HAL_SPI_TransmitReceive+0x33c>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045b8:	f7fe fae0 	bl	8002b7c <HAL_GetTick>
 80045bc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80045ce:	887b      	ldrh	r3, [r7, #2]
 80045d0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80045d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d00f      	beq.n	80045fa <HAL_SPI_TransmitReceive+0x70>
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045e0:	d107      	bne.n	80045f2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d103      	bne.n	80045f2 <HAL_SPI_TransmitReceive+0x68>
 80045ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d003      	beq.n	80045fa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80045f2:	2302      	movs	r3, #2
 80045f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80045f8:	e15b      	b.n	80048b2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d005      	beq.n	800460c <HAL_SPI_TransmitReceive+0x82>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d002      	beq.n	800460c <HAL_SPI_TransmitReceive+0x82>
 8004606:	887b      	ldrh	r3, [r7, #2]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d103      	bne.n	8004614 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004612:	e14e      	b.n	80048b2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b04      	cmp	r3, #4
 800461e:	d003      	beq.n	8004628 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2205      	movs	r2, #5
 8004624:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	887a      	ldrh	r2, [r7, #2]
 8004638:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	887a      	ldrh	r2, [r7, #2]
 800463e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	887a      	ldrh	r2, [r7, #2]
 800464a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	887a      	ldrh	r2, [r7, #2]
 8004650:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004668:	2b40      	cmp	r3, #64	; 0x40
 800466a:	d007      	beq.n	800467c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800467a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004684:	d178      	bne.n	8004778 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d002      	beq.n	8004694 <HAL_SPI_TransmitReceive+0x10a>
 800468e:	8b7b      	ldrh	r3, [r7, #26]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d166      	bne.n	8004762 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004698:	881a      	ldrh	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a4:	1c9a      	adds	r2, r3, #2
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	3b01      	subs	r3, #1
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046b8:	e053      	b.n	8004762 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f003 0302 	and.w	r3, r3, #2
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d11b      	bne.n	8004700 <HAL_SPI_TransmitReceive+0x176>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d016      	beq.n	8004700 <HAL_SPI_TransmitReceive+0x176>
 80046d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d113      	bne.n	8004700 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046dc:	881a      	ldrh	r2, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e8:	1c9a      	adds	r2, r3, #2
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	3b01      	subs	r3, #1
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046fc:	2300      	movs	r3, #0
 80046fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b01      	cmp	r3, #1
 800470c:	d119      	bne.n	8004742 <HAL_SPI_TransmitReceive+0x1b8>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004712:	b29b      	uxth	r3, r3
 8004714:	2b00      	cmp	r3, #0
 8004716:	d014      	beq.n	8004742 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68da      	ldr	r2, [r3, #12]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004722:	b292      	uxth	r2, r2
 8004724:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472a:	1c9a      	adds	r2, r3, #2
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004734:	b29b      	uxth	r3, r3
 8004736:	3b01      	subs	r3, #1
 8004738:	b29a      	uxth	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800473e:	2301      	movs	r3, #1
 8004740:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004742:	f7fe fa1b 	bl	8002b7c <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800474e:	429a      	cmp	r2, r3
 8004750:	d807      	bhi.n	8004762 <HAL_SPI_TransmitReceive+0x1d8>
 8004752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004758:	d003      	beq.n	8004762 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004760:	e0a7      	b.n	80048b2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004766:	b29b      	uxth	r3, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1a6      	bne.n	80046ba <HAL_SPI_TransmitReceive+0x130>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004770:	b29b      	uxth	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1a1      	bne.n	80046ba <HAL_SPI_TransmitReceive+0x130>
 8004776:	e07c      	b.n	8004872 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d002      	beq.n	8004786 <HAL_SPI_TransmitReceive+0x1fc>
 8004780:	8b7b      	ldrh	r3, [r7, #26]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d16b      	bne.n	800485e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	330c      	adds	r3, #12
 8004790:	7812      	ldrb	r2, [r2, #0]
 8004792:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004798:	1c5a      	adds	r2, r3, #1
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	3b01      	subs	r3, #1
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047ac:	e057      	b.n	800485e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d11c      	bne.n	80047f6 <HAL_SPI_TransmitReceive+0x26c>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d017      	beq.n	80047f6 <HAL_SPI_TransmitReceive+0x26c>
 80047c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d114      	bne.n	80047f6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	330c      	adds	r3, #12
 80047d6:	7812      	ldrb	r2, [r2, #0]
 80047d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047de:	1c5a      	adds	r2, r3, #1
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	3b01      	subs	r3, #1
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047f2:	2300      	movs	r3, #0
 80047f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b01      	cmp	r3, #1
 8004802:	d119      	bne.n	8004838 <HAL_SPI_TransmitReceive+0x2ae>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004808:	b29b      	uxth	r3, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	d014      	beq.n	8004838 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68da      	ldr	r2, [r3, #12]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004818:	b2d2      	uxtb	r2, r2
 800481a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004820:	1c5a      	adds	r2, r3, #1
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800482a:	b29b      	uxth	r3, r3
 800482c:	3b01      	subs	r3, #1
 800482e:	b29a      	uxth	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004834:	2301      	movs	r3, #1
 8004836:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004838:	f7fe f9a0 	bl	8002b7c <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004844:	429a      	cmp	r2, r3
 8004846:	d803      	bhi.n	8004850 <HAL_SPI_TransmitReceive+0x2c6>
 8004848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800484a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800484e:	d102      	bne.n	8004856 <HAL_SPI_TransmitReceive+0x2cc>
 8004850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004852:	2b00      	cmp	r3, #0
 8004854:	d103      	bne.n	800485e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800485c:	e029      	b.n	80048b2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004862:	b29b      	uxth	r3, r3
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1a2      	bne.n	80047ae <HAL_SPI_TransmitReceive+0x224>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800486c:	b29b      	uxth	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d19d      	bne.n	80047ae <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004874:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f000 f9d0 	bl	8004c1c <SPI_EndRxTxTransaction>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d006      	beq.n	8004890 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2220      	movs	r2, #32
 800488c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800488e:	e010      	b.n	80048b2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10b      	bne.n	80048b0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004898:	2300      	movs	r3, #0
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	617b      	str	r3, [r7, #20]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	617b      	str	r3, [r7, #20]
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	e000      	b.n	80048b2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80048b0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80048c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3730      	adds	r7, #48	; 0x30
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
	...

080048d0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b088      	sub	sp, #32
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	099b      	lsrs	r3, r3, #6
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10f      	bne.n	8004914 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00a      	beq.n	8004914 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	099b      	lsrs	r3, r3, #6
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d004      	beq.n	8004914 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	4798      	blx	r3
    return;
 8004912:	e0d7      	b.n	8004ac4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	085b      	lsrs	r3, r3, #1
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00a      	beq.n	8004936 <HAL_SPI_IRQHandler+0x66>
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	09db      	lsrs	r3, r3, #7
 8004924:	f003 0301 	and.w	r3, r3, #1
 8004928:	2b00      	cmp	r3, #0
 800492a:	d004      	beq.n	8004936 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	4798      	blx	r3
    return;
 8004934:	e0c6      	b.n	8004ac4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	095b      	lsrs	r3, r3, #5
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10c      	bne.n	800495c <HAL_SPI_IRQHandler+0x8c>
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	099b      	lsrs	r3, r3, #6
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d106      	bne.n	800495c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	0a1b      	lsrs	r3, r3, #8
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	f000 80b4 	beq.w	8004ac4 <HAL_SPI_IRQHandler+0x1f4>
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	095b      	lsrs	r3, r3, #5
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 80ad 	beq.w	8004ac4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	099b      	lsrs	r3, r3, #6
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	d023      	beq.n	80049be <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b03      	cmp	r3, #3
 8004980:	d011      	beq.n	80049a6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004986:	f043 0204 	orr.w	r2, r3, #4
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800498e:	2300      	movs	r3, #0
 8004990:	617b      	str	r3, [r7, #20]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	617b      	str	r3, [r7, #20]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	617b      	str	r3, [r7, #20]
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	e00b      	b.n	80049be <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049a6:	2300      	movs	r3, #0
 80049a8:	613b      	str	r3, [r7, #16]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	613b      	str	r3, [r7, #16]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	613b      	str	r3, [r7, #16]
 80049ba:	693b      	ldr	r3, [r7, #16]
        return;
 80049bc:	e082      	b.n	8004ac4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	095b      	lsrs	r3, r3, #5
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d014      	beq.n	80049f4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ce:	f043 0201 	orr.w	r2, r3, #1
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80049d6:	2300      	movs	r3, #0
 80049d8:	60fb      	str	r3, [r7, #12]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	60fb      	str	r3, [r7, #12]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049f0:	601a      	str	r2, [r3, #0]
 80049f2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	0a1b      	lsrs	r3, r3, #8
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00c      	beq.n	8004a1a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a04:	f043 0208 	orr.w	r2, r3, #8
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	60bb      	str	r3, [r7, #8]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	60bb      	str	r3, [r7, #8]
 8004a18:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d04f      	beq.n	8004ac2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a30:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d104      	bne.n	8004a4e <HAL_SPI_IRQHandler+0x17e>
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d034      	beq.n	8004ab8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 0203 	bic.w	r2, r2, #3
 8004a5c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d011      	beq.n	8004a8a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a6a:	4a18      	ldr	r2, [pc, #96]	; (8004acc <HAL_SPI_IRQHandler+0x1fc>)
 8004a6c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7fe fb3a 	bl	80030ec <HAL_DMA_Abort_IT>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d005      	beq.n	8004a8a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d016      	beq.n	8004ac0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a96:	4a0d      	ldr	r2, [pc, #52]	; (8004acc <HAL_SPI_IRQHandler+0x1fc>)
 8004a98:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7fe fb24 	bl	80030ec <HAL_DMA_Abort_IT>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00a      	beq.n	8004ac0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004ab6:	e003      	b.n	8004ac0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 f809 	bl	8004ad0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004abe:	e000      	b.n	8004ac2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004ac0:	bf00      	nop
    return;
 8004ac2:	bf00      	nop
  }
}
 8004ac4:	3720      	adds	r7, #32
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	08004ae5 	.word	0x08004ae5

08004ad0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f7ff ffe6 	bl	8004ad0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004b04:	bf00      	nop
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b088      	sub	sp, #32
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	603b      	str	r3, [r7, #0]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b1c:	f7fe f82e 	bl	8002b7c <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b24:	1a9b      	subs	r3, r3, r2
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	4413      	add	r3, r2
 8004b2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b2c:	f7fe f826 	bl	8002b7c <HAL_GetTick>
 8004b30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b32:	4b39      	ldr	r3, [pc, #228]	; (8004c18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	015b      	lsls	r3, r3, #5
 8004b38:	0d1b      	lsrs	r3, r3, #20
 8004b3a:	69fa      	ldr	r2, [r7, #28]
 8004b3c:	fb02 f303 	mul.w	r3, r2, r3
 8004b40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b42:	e054      	b.n	8004bee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4a:	d050      	beq.n	8004bee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b4c:	f7fe f816 	bl	8002b7c <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	69fa      	ldr	r2, [r7, #28]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d902      	bls.n	8004b62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d13d      	bne.n	8004bde <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b7a:	d111      	bne.n	8004ba0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b84:	d004      	beq.n	8004b90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b8e:	d107      	bne.n	8004ba0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ba8:	d10f      	bne.n	8004bca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bb8:	601a      	str	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bc8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e017      	b.n	8004c0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d101      	bne.n	8004be8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	3b01      	subs	r3, #1
 8004bec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	bf0c      	ite	eq
 8004bfe:	2301      	moveq	r3, #1
 8004c00:	2300      	movne	r3, #0
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	461a      	mov	r2, r3
 8004c06:	79fb      	ldrb	r3, [r7, #7]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d19b      	bne.n	8004b44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3720      	adds	r7, #32
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	20000380 	.word	0x20000380

08004c1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b088      	sub	sp, #32
 8004c20:	af02      	add	r7, sp, #8
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c28:	4b1b      	ldr	r3, [pc, #108]	; (8004c98 <SPI_EndRxTxTransaction+0x7c>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a1b      	ldr	r2, [pc, #108]	; (8004c9c <SPI_EndRxTxTransaction+0x80>)
 8004c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c32:	0d5b      	lsrs	r3, r3, #21
 8004c34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c38:	fb02 f303 	mul.w	r3, r2, r3
 8004c3c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c46:	d112      	bne.n	8004c6e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	9300      	str	r3, [sp, #0]
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	2180      	movs	r1, #128	; 0x80
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f7ff ff5a 	bl	8004b0c <SPI_WaitFlagStateUntilTimeout>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d016      	beq.n	8004c8c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c62:	f043 0220 	orr.w	r2, r3, #32
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e00f      	b.n	8004c8e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00a      	beq.n	8004c8a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c84:	2b80      	cmp	r3, #128	; 0x80
 8004c86:	d0f2      	beq.n	8004c6e <SPI_EndRxTxTransaction+0x52>
 8004c88:	e000      	b.n	8004c8c <SPI_EndRxTxTransaction+0x70>
        break;
 8004c8a:	bf00      	nop
  }

  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3718      	adds	r7, #24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	20000380 	.word	0x20000380
 8004c9c:	165e9f81 	.word	0x165e9f81

08004ca0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e041      	b.n	8004d36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d106      	bne.n	8004ccc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7fd fc9e 	bl	8002608 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	3304      	adds	r3, #4
 8004cdc:	4619      	mov	r1, r3
 8004cde:	4610      	mov	r0, r2
 8004ce0:	f000 fad8 	bl	8005294 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b082      	sub	sp, #8
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d101      	bne.n	8004d50 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e041      	b.n	8004dd4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d106      	bne.n	8004d6a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 f839 	bl	8004ddc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2202      	movs	r2, #2
 8004d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	3304      	adds	r3, #4
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	4610      	mov	r0, r2
 8004d7e:	f000 fa89 	bl	8005294 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d109      	bne.n	8004e14 <HAL_TIM_PWM_Start+0x24>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	bf14      	ite	ne
 8004e0c:	2301      	movne	r3, #1
 8004e0e:	2300      	moveq	r3, #0
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	e022      	b.n	8004e5a <HAL_TIM_PWM_Start+0x6a>
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	2b04      	cmp	r3, #4
 8004e18:	d109      	bne.n	8004e2e <HAL_TIM_PWM_Start+0x3e>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	bf14      	ite	ne
 8004e26:	2301      	movne	r3, #1
 8004e28:	2300      	moveq	r3, #0
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	e015      	b.n	8004e5a <HAL_TIM_PWM_Start+0x6a>
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b08      	cmp	r3, #8
 8004e32:	d109      	bne.n	8004e48 <HAL_TIM_PWM_Start+0x58>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	bf14      	ite	ne
 8004e40:	2301      	movne	r3, #1
 8004e42:	2300      	moveq	r3, #0
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	e008      	b.n	8004e5a <HAL_TIM_PWM_Start+0x6a>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	bf14      	ite	ne
 8004e54:	2301      	movne	r3, #1
 8004e56:	2300      	moveq	r3, #0
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d001      	beq.n	8004e62 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e07c      	b.n	8004f5c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d104      	bne.n	8004e72 <HAL_TIM_PWM_Start+0x82>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e70:	e013      	b.n	8004e9a <HAL_TIM_PWM_Start+0xaa>
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	2b04      	cmp	r3, #4
 8004e76:	d104      	bne.n	8004e82 <HAL_TIM_PWM_Start+0x92>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e80:	e00b      	b.n	8004e9a <HAL_TIM_PWM_Start+0xaa>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d104      	bne.n	8004e92 <HAL_TIM_PWM_Start+0xa2>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e90:	e003      	b.n	8004e9a <HAL_TIM_PWM_Start+0xaa>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2202      	movs	r2, #2
 8004e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	6839      	ldr	r1, [r7, #0]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 fce0 	bl	8005868 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a2d      	ldr	r2, [pc, #180]	; (8004f64 <HAL_TIM_PWM_Start+0x174>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d004      	beq.n	8004ebc <HAL_TIM_PWM_Start+0xcc>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a2c      	ldr	r2, [pc, #176]	; (8004f68 <HAL_TIM_PWM_Start+0x178>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d101      	bne.n	8004ec0 <HAL_TIM_PWM_Start+0xd0>
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e000      	b.n	8004ec2 <HAL_TIM_PWM_Start+0xd2>
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d007      	beq.n	8004ed6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ed4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a22      	ldr	r2, [pc, #136]	; (8004f64 <HAL_TIM_PWM_Start+0x174>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d022      	beq.n	8004f26 <HAL_TIM_PWM_Start+0x136>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee8:	d01d      	beq.n	8004f26 <HAL_TIM_PWM_Start+0x136>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a1f      	ldr	r2, [pc, #124]	; (8004f6c <HAL_TIM_PWM_Start+0x17c>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d018      	beq.n	8004f26 <HAL_TIM_PWM_Start+0x136>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a1d      	ldr	r2, [pc, #116]	; (8004f70 <HAL_TIM_PWM_Start+0x180>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d013      	beq.n	8004f26 <HAL_TIM_PWM_Start+0x136>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a1c      	ldr	r2, [pc, #112]	; (8004f74 <HAL_TIM_PWM_Start+0x184>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d00e      	beq.n	8004f26 <HAL_TIM_PWM_Start+0x136>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a16      	ldr	r2, [pc, #88]	; (8004f68 <HAL_TIM_PWM_Start+0x178>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d009      	beq.n	8004f26 <HAL_TIM_PWM_Start+0x136>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a18      	ldr	r2, [pc, #96]	; (8004f78 <HAL_TIM_PWM_Start+0x188>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d004      	beq.n	8004f26 <HAL_TIM_PWM_Start+0x136>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a16      	ldr	r2, [pc, #88]	; (8004f7c <HAL_TIM_PWM_Start+0x18c>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d111      	bne.n	8004f4a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f003 0307 	and.w	r3, r3, #7
 8004f30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2b06      	cmp	r3, #6
 8004f36:	d010      	beq.n	8004f5a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 0201 	orr.w	r2, r2, #1
 8004f46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f48:	e007      	b.n	8004f5a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f042 0201 	orr.w	r2, r2, #1
 8004f58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3710      	adds	r7, #16
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	40010000 	.word	0x40010000
 8004f68:	40010400 	.word	0x40010400
 8004f6c:	40000400 	.word	0x40000400
 8004f70:	40000800 	.word	0x40000800
 8004f74:	40000c00 	.word	0x40000c00
 8004f78:	40014000 	.word	0x40014000
 8004f7c:	40001800 	.word	0x40001800

08004f80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d101      	bne.n	8004f9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f9a:	2302      	movs	r3, #2
 8004f9c:	e0ae      	b.n	80050fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b0c      	cmp	r3, #12
 8004faa:	f200 809f 	bhi.w	80050ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004fae:	a201      	add	r2, pc, #4	; (adr r2, 8004fb4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb4:	08004fe9 	.word	0x08004fe9
 8004fb8:	080050ed 	.word	0x080050ed
 8004fbc:	080050ed 	.word	0x080050ed
 8004fc0:	080050ed 	.word	0x080050ed
 8004fc4:	08005029 	.word	0x08005029
 8004fc8:	080050ed 	.word	0x080050ed
 8004fcc:	080050ed 	.word	0x080050ed
 8004fd0:	080050ed 	.word	0x080050ed
 8004fd4:	0800506b 	.word	0x0800506b
 8004fd8:	080050ed 	.word	0x080050ed
 8004fdc:	080050ed 	.word	0x080050ed
 8004fe0:	080050ed 	.word	0x080050ed
 8004fe4:	080050ab 	.word	0x080050ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68b9      	ldr	r1, [r7, #8]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 f9f0 	bl	80053d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	699a      	ldr	r2, [r3, #24]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f042 0208 	orr.w	r2, r2, #8
 8005002:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	699a      	ldr	r2, [r3, #24]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 0204 	bic.w	r2, r2, #4
 8005012:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6999      	ldr	r1, [r3, #24]
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	691a      	ldr	r2, [r3, #16]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	430a      	orrs	r2, r1
 8005024:	619a      	str	r2, [r3, #24]
      break;
 8005026:	e064      	b.n	80050f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68b9      	ldr	r1, [r7, #8]
 800502e:	4618      	mov	r0, r3
 8005030:	f000 fa40 	bl	80054b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	699a      	ldr	r2, [r3, #24]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005042:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	699a      	ldr	r2, [r3, #24]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005052:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6999      	ldr	r1, [r3, #24]
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	021a      	lsls	r2, r3, #8
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	430a      	orrs	r2, r1
 8005066:	619a      	str	r2, [r3, #24]
      break;
 8005068:	e043      	b.n	80050f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68b9      	ldr	r1, [r7, #8]
 8005070:	4618      	mov	r0, r3
 8005072:	f000 fa95 	bl	80055a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	69da      	ldr	r2, [r3, #28]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f042 0208 	orr.w	r2, r2, #8
 8005084:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	69da      	ldr	r2, [r3, #28]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f022 0204 	bic.w	r2, r2, #4
 8005094:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	69d9      	ldr	r1, [r3, #28]
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	691a      	ldr	r2, [r3, #16]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	61da      	str	r2, [r3, #28]
      break;
 80050a8:	e023      	b.n	80050f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68b9      	ldr	r1, [r7, #8]
 80050b0:	4618      	mov	r0, r3
 80050b2:	f000 fae9 	bl	8005688 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	69da      	ldr	r2, [r3, #28]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	69da      	ldr	r2, [r3, #28]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	69d9      	ldr	r1, [r3, #28]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	021a      	lsls	r2, r3, #8
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	61da      	str	r2, [r3, #28]
      break;
 80050ea:	e002      	b.n	80050f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	75fb      	strb	r3, [r7, #23]
      break;
 80050f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3718      	adds	r7, #24
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800510e:	2300      	movs	r3, #0
 8005110:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005118:	2b01      	cmp	r3, #1
 800511a:	d101      	bne.n	8005120 <HAL_TIM_ConfigClockSource+0x1c>
 800511c:	2302      	movs	r3, #2
 800511e:	e0b4      	b.n	800528a <HAL_TIM_ConfigClockSource+0x186>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2202      	movs	r2, #2
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800513e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005146:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005158:	d03e      	beq.n	80051d8 <HAL_TIM_ConfigClockSource+0xd4>
 800515a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800515e:	f200 8087 	bhi.w	8005270 <HAL_TIM_ConfigClockSource+0x16c>
 8005162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005166:	f000 8086 	beq.w	8005276 <HAL_TIM_ConfigClockSource+0x172>
 800516a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800516e:	d87f      	bhi.n	8005270 <HAL_TIM_ConfigClockSource+0x16c>
 8005170:	2b70      	cmp	r3, #112	; 0x70
 8005172:	d01a      	beq.n	80051aa <HAL_TIM_ConfigClockSource+0xa6>
 8005174:	2b70      	cmp	r3, #112	; 0x70
 8005176:	d87b      	bhi.n	8005270 <HAL_TIM_ConfigClockSource+0x16c>
 8005178:	2b60      	cmp	r3, #96	; 0x60
 800517a:	d050      	beq.n	800521e <HAL_TIM_ConfigClockSource+0x11a>
 800517c:	2b60      	cmp	r3, #96	; 0x60
 800517e:	d877      	bhi.n	8005270 <HAL_TIM_ConfigClockSource+0x16c>
 8005180:	2b50      	cmp	r3, #80	; 0x50
 8005182:	d03c      	beq.n	80051fe <HAL_TIM_ConfigClockSource+0xfa>
 8005184:	2b50      	cmp	r3, #80	; 0x50
 8005186:	d873      	bhi.n	8005270 <HAL_TIM_ConfigClockSource+0x16c>
 8005188:	2b40      	cmp	r3, #64	; 0x40
 800518a:	d058      	beq.n	800523e <HAL_TIM_ConfigClockSource+0x13a>
 800518c:	2b40      	cmp	r3, #64	; 0x40
 800518e:	d86f      	bhi.n	8005270 <HAL_TIM_ConfigClockSource+0x16c>
 8005190:	2b30      	cmp	r3, #48	; 0x30
 8005192:	d064      	beq.n	800525e <HAL_TIM_ConfigClockSource+0x15a>
 8005194:	2b30      	cmp	r3, #48	; 0x30
 8005196:	d86b      	bhi.n	8005270 <HAL_TIM_ConfigClockSource+0x16c>
 8005198:	2b20      	cmp	r3, #32
 800519a:	d060      	beq.n	800525e <HAL_TIM_ConfigClockSource+0x15a>
 800519c:	2b20      	cmp	r3, #32
 800519e:	d867      	bhi.n	8005270 <HAL_TIM_ConfigClockSource+0x16c>
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d05c      	beq.n	800525e <HAL_TIM_ConfigClockSource+0x15a>
 80051a4:	2b10      	cmp	r3, #16
 80051a6:	d05a      	beq.n	800525e <HAL_TIM_ConfigClockSource+0x15a>
 80051a8:	e062      	b.n	8005270 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6818      	ldr	r0, [r3, #0]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	6899      	ldr	r1, [r3, #8]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	f000 fb35 	bl	8005828 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	609a      	str	r2, [r3, #8]
      break;
 80051d6:	e04f      	b.n	8005278 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6818      	ldr	r0, [r3, #0]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	6899      	ldr	r1, [r3, #8]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	f000 fb1e 	bl	8005828 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689a      	ldr	r2, [r3, #8]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051fa:	609a      	str	r2, [r3, #8]
      break;
 80051fc:	e03c      	b.n	8005278 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6818      	ldr	r0, [r3, #0]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	6859      	ldr	r1, [r3, #4]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	461a      	mov	r2, r3
 800520c:	f000 fa92 	bl	8005734 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2150      	movs	r1, #80	; 0x50
 8005216:	4618      	mov	r0, r3
 8005218:	f000 faeb 	bl	80057f2 <TIM_ITRx_SetConfig>
      break;
 800521c:	e02c      	b.n	8005278 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6818      	ldr	r0, [r3, #0]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	6859      	ldr	r1, [r3, #4]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	461a      	mov	r2, r3
 800522c:	f000 fab1 	bl	8005792 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2160      	movs	r1, #96	; 0x60
 8005236:	4618      	mov	r0, r3
 8005238:	f000 fadb 	bl	80057f2 <TIM_ITRx_SetConfig>
      break;
 800523c:	e01c      	b.n	8005278 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6818      	ldr	r0, [r3, #0]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	6859      	ldr	r1, [r3, #4]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	461a      	mov	r2, r3
 800524c:	f000 fa72 	bl	8005734 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2140      	movs	r1, #64	; 0x40
 8005256:	4618      	mov	r0, r3
 8005258:	f000 facb 	bl	80057f2 <TIM_ITRx_SetConfig>
      break;
 800525c:	e00c      	b.n	8005278 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4619      	mov	r1, r3
 8005268:	4610      	mov	r0, r2
 800526a:	f000 fac2 	bl	80057f2 <TIM_ITRx_SetConfig>
      break;
 800526e:	e003      	b.n	8005278 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	73fb      	strb	r3, [r7, #15]
      break;
 8005274:	e000      	b.n	8005278 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005276:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005288:	7bfb      	ldrb	r3, [r7, #15]
}
 800528a:	4618      	mov	r0, r3
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
	...

08005294 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a40      	ldr	r2, [pc, #256]	; (80053a8 <TIM_Base_SetConfig+0x114>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d013      	beq.n	80052d4 <TIM_Base_SetConfig+0x40>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052b2:	d00f      	beq.n	80052d4 <TIM_Base_SetConfig+0x40>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a3d      	ldr	r2, [pc, #244]	; (80053ac <TIM_Base_SetConfig+0x118>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d00b      	beq.n	80052d4 <TIM_Base_SetConfig+0x40>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a3c      	ldr	r2, [pc, #240]	; (80053b0 <TIM_Base_SetConfig+0x11c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d007      	beq.n	80052d4 <TIM_Base_SetConfig+0x40>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a3b      	ldr	r2, [pc, #236]	; (80053b4 <TIM_Base_SetConfig+0x120>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d003      	beq.n	80052d4 <TIM_Base_SetConfig+0x40>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a3a      	ldr	r2, [pc, #232]	; (80053b8 <TIM_Base_SetConfig+0x124>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d108      	bne.n	80052e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a2f      	ldr	r2, [pc, #188]	; (80053a8 <TIM_Base_SetConfig+0x114>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d02b      	beq.n	8005346 <TIM_Base_SetConfig+0xb2>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052f4:	d027      	beq.n	8005346 <TIM_Base_SetConfig+0xb2>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a2c      	ldr	r2, [pc, #176]	; (80053ac <TIM_Base_SetConfig+0x118>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d023      	beq.n	8005346 <TIM_Base_SetConfig+0xb2>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a2b      	ldr	r2, [pc, #172]	; (80053b0 <TIM_Base_SetConfig+0x11c>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d01f      	beq.n	8005346 <TIM_Base_SetConfig+0xb2>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a2a      	ldr	r2, [pc, #168]	; (80053b4 <TIM_Base_SetConfig+0x120>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d01b      	beq.n	8005346 <TIM_Base_SetConfig+0xb2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a29      	ldr	r2, [pc, #164]	; (80053b8 <TIM_Base_SetConfig+0x124>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d017      	beq.n	8005346 <TIM_Base_SetConfig+0xb2>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a28      	ldr	r2, [pc, #160]	; (80053bc <TIM_Base_SetConfig+0x128>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d013      	beq.n	8005346 <TIM_Base_SetConfig+0xb2>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a27      	ldr	r2, [pc, #156]	; (80053c0 <TIM_Base_SetConfig+0x12c>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d00f      	beq.n	8005346 <TIM_Base_SetConfig+0xb2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a26      	ldr	r2, [pc, #152]	; (80053c4 <TIM_Base_SetConfig+0x130>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d00b      	beq.n	8005346 <TIM_Base_SetConfig+0xb2>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a25      	ldr	r2, [pc, #148]	; (80053c8 <TIM_Base_SetConfig+0x134>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d007      	beq.n	8005346 <TIM_Base_SetConfig+0xb2>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a24      	ldr	r2, [pc, #144]	; (80053cc <TIM_Base_SetConfig+0x138>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d003      	beq.n	8005346 <TIM_Base_SetConfig+0xb2>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a23      	ldr	r2, [pc, #140]	; (80053d0 <TIM_Base_SetConfig+0x13c>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d108      	bne.n	8005358 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800534c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	4313      	orrs	r3, r2
 8005356:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	4313      	orrs	r3, r2
 8005364:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	689a      	ldr	r2, [r3, #8]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a0a      	ldr	r2, [pc, #40]	; (80053a8 <TIM_Base_SetConfig+0x114>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d003      	beq.n	800538c <TIM_Base_SetConfig+0xf8>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a0c      	ldr	r2, [pc, #48]	; (80053b8 <TIM_Base_SetConfig+0x124>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d103      	bne.n	8005394 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	691a      	ldr	r2, [r3, #16]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	615a      	str	r2, [r3, #20]
}
 800539a:	bf00      	nop
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	40010000 	.word	0x40010000
 80053ac:	40000400 	.word	0x40000400
 80053b0:	40000800 	.word	0x40000800
 80053b4:	40000c00 	.word	0x40000c00
 80053b8:	40010400 	.word	0x40010400
 80053bc:	40014000 	.word	0x40014000
 80053c0:	40014400 	.word	0x40014400
 80053c4:	40014800 	.word	0x40014800
 80053c8:	40001800 	.word	0x40001800
 80053cc:	40001c00 	.word	0x40001c00
 80053d0:	40002000 	.word	0x40002000

080053d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b087      	sub	sp, #28
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	f023 0201 	bic.w	r2, r3, #1
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f023 0303 	bic.w	r3, r3, #3
 800540a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	4313      	orrs	r3, r2
 8005414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f023 0302 	bic.w	r3, r3, #2
 800541c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	4313      	orrs	r3, r2
 8005426:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a20      	ldr	r2, [pc, #128]	; (80054ac <TIM_OC1_SetConfig+0xd8>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d003      	beq.n	8005438 <TIM_OC1_SetConfig+0x64>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a1f      	ldr	r2, [pc, #124]	; (80054b0 <TIM_OC1_SetConfig+0xdc>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d10c      	bne.n	8005452 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	f023 0308 	bic.w	r3, r3, #8
 800543e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	4313      	orrs	r3, r2
 8005448:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f023 0304 	bic.w	r3, r3, #4
 8005450:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a15      	ldr	r2, [pc, #84]	; (80054ac <TIM_OC1_SetConfig+0xd8>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d003      	beq.n	8005462 <TIM_OC1_SetConfig+0x8e>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a14      	ldr	r2, [pc, #80]	; (80054b0 <TIM_OC1_SetConfig+0xdc>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d111      	bne.n	8005486 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005468:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005470:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	4313      	orrs	r3, r2
 800547a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	4313      	orrs	r3, r2
 8005484:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	621a      	str	r2, [r3, #32]
}
 80054a0:	bf00      	nop
 80054a2:	371c      	adds	r7, #28
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr
 80054ac:	40010000 	.word	0x40010000
 80054b0:	40010400 	.word	0x40010400

080054b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b087      	sub	sp, #28
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	f023 0210 	bic.w	r2, r3, #16
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	021b      	lsls	r3, r3, #8
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f023 0320 	bic.w	r3, r3, #32
 80054fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	011b      	lsls	r3, r3, #4
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	4313      	orrs	r3, r2
 800550a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a22      	ldr	r2, [pc, #136]	; (8005598 <TIM_OC2_SetConfig+0xe4>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d003      	beq.n	800551c <TIM_OC2_SetConfig+0x68>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a21      	ldr	r2, [pc, #132]	; (800559c <TIM_OC2_SetConfig+0xe8>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d10d      	bne.n	8005538 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005522:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	011b      	lsls	r3, r3, #4
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	4313      	orrs	r3, r2
 800552e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005536:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a17      	ldr	r2, [pc, #92]	; (8005598 <TIM_OC2_SetConfig+0xe4>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d003      	beq.n	8005548 <TIM_OC2_SetConfig+0x94>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a16      	ldr	r2, [pc, #88]	; (800559c <TIM_OC2_SetConfig+0xe8>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d113      	bne.n	8005570 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800554e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005556:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	4313      	orrs	r3, r2
 8005562:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	4313      	orrs	r3, r2
 800556e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	693a      	ldr	r2, [r7, #16]
 8005574:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	621a      	str	r2, [r3, #32]
}
 800558a:	bf00      	nop
 800558c:	371c      	adds	r7, #28
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	40010000 	.word	0x40010000
 800559c:	40010400 	.word	0x40010400

080055a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b087      	sub	sp, #28
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f023 0303 	bic.w	r3, r3, #3
 80055d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	4313      	orrs	r3, r2
 80055e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	021b      	lsls	r3, r3, #8
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a21      	ldr	r2, [pc, #132]	; (8005680 <TIM_OC3_SetConfig+0xe0>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d003      	beq.n	8005606 <TIM_OC3_SetConfig+0x66>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a20      	ldr	r2, [pc, #128]	; (8005684 <TIM_OC3_SetConfig+0xe4>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d10d      	bne.n	8005622 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800560c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	021b      	lsls	r3, r3, #8
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	4313      	orrs	r3, r2
 8005618:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005620:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a16      	ldr	r2, [pc, #88]	; (8005680 <TIM_OC3_SetConfig+0xe0>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d003      	beq.n	8005632 <TIM_OC3_SetConfig+0x92>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a15      	ldr	r2, [pc, #84]	; (8005684 <TIM_OC3_SetConfig+0xe4>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d113      	bne.n	800565a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005638:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005640:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	011b      	lsls	r3, r3, #4
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	4313      	orrs	r3, r2
 800564c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	011b      	lsls	r3, r3, #4
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	4313      	orrs	r3, r2
 8005658:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	685a      	ldr	r2, [r3, #4]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	621a      	str	r2, [r3, #32]
}
 8005674:	bf00      	nop
 8005676:	371c      	adds	r7, #28
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr
 8005680:	40010000 	.word	0x40010000
 8005684:	40010400 	.word	0x40010400

08005688 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005688:	b480      	push	{r7}
 800568a:	b087      	sub	sp, #28
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	021b      	lsls	r3, r3, #8
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	031b      	lsls	r3, r3, #12
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	4313      	orrs	r3, r2
 80056de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a12      	ldr	r2, [pc, #72]	; (800572c <TIM_OC4_SetConfig+0xa4>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d003      	beq.n	80056f0 <TIM_OC4_SetConfig+0x68>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a11      	ldr	r2, [pc, #68]	; (8005730 <TIM_OC4_SetConfig+0xa8>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d109      	bne.n	8005704 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	019b      	lsls	r3, r3, #6
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	4313      	orrs	r3, r2
 8005702:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	685a      	ldr	r2, [r3, #4]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	621a      	str	r2, [r3, #32]
}
 800571e:	bf00      	nop
 8005720:	371c      	adds	r7, #28
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	40010000 	.word	0x40010000
 8005730:	40010400 	.word	0x40010400

08005734 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005734:	b480      	push	{r7}
 8005736:	b087      	sub	sp, #28
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6a1b      	ldr	r3, [r3, #32]
 8005744:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	f023 0201 	bic.w	r2, r3, #1
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800575e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	011b      	lsls	r3, r3, #4
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	4313      	orrs	r3, r2
 8005768:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	f023 030a 	bic.w	r3, r3, #10
 8005770:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	4313      	orrs	r3, r2
 8005778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	621a      	str	r2, [r3, #32]
}
 8005786:	bf00      	nop
 8005788:	371c      	adds	r7, #28
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005792:	b480      	push	{r7}
 8005794:	b087      	sub	sp, #28
 8005796:	af00      	add	r7, sp, #0
 8005798:	60f8      	str	r0, [r7, #12]
 800579a:	60b9      	str	r1, [r7, #8]
 800579c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	f023 0210 	bic.w	r2, r3, #16
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6a1b      	ldr	r3, [r3, #32]
 80057b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	031b      	lsls	r3, r3, #12
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	011b      	lsls	r3, r3, #4
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	621a      	str	r2, [r3, #32]
}
 80057e6:	bf00      	nop
 80057e8:	371c      	adds	r7, #28
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057f2:	b480      	push	{r7}
 80057f4:	b085      	sub	sp, #20
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
 80057fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005808:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800580a:	683a      	ldr	r2, [r7, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	4313      	orrs	r3, r2
 8005810:	f043 0307 	orr.w	r3, r3, #7
 8005814:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	609a      	str	r2, [r3, #8]
}
 800581c:	bf00      	nop
 800581e:	3714      	adds	r7, #20
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005828:	b480      	push	{r7}
 800582a:	b087      	sub	sp, #28
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
 8005834:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005842:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	021a      	lsls	r2, r3, #8
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	431a      	orrs	r2, r3
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	4313      	orrs	r3, r2
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	4313      	orrs	r3, r2
 8005854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	609a      	str	r2, [r3, #8]
}
 800585c:	bf00      	nop
 800585e:	371c      	adds	r7, #28
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005868:	b480      	push	{r7}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	f003 031f 	and.w	r3, r3, #31
 800587a:	2201      	movs	r2, #1
 800587c:	fa02 f303 	lsl.w	r3, r2, r3
 8005880:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6a1a      	ldr	r2, [r3, #32]
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	43db      	mvns	r3, r3
 800588a:	401a      	ands	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6a1a      	ldr	r2, [r3, #32]
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	f003 031f 	and.w	r3, r3, #31
 800589a:	6879      	ldr	r1, [r7, #4]
 800589c:	fa01 f303 	lsl.w	r3, r1, r3
 80058a0:	431a      	orrs	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	621a      	str	r2, [r3, #32]
}
 80058a6:	bf00      	nop
 80058a8:	371c      	adds	r7, #28
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
	...

080058b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d101      	bne.n	80058cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058c8:	2302      	movs	r3, #2
 80058ca:	e05a      	b.n	8005982 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2202      	movs	r2, #2
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a21      	ldr	r2, [pc, #132]	; (8005990 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d022      	beq.n	8005956 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005918:	d01d      	beq.n	8005956 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a1d      	ldr	r2, [pc, #116]	; (8005994 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d018      	beq.n	8005956 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a1b      	ldr	r2, [pc, #108]	; (8005998 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d013      	beq.n	8005956 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a1a      	ldr	r2, [pc, #104]	; (800599c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d00e      	beq.n	8005956 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a18      	ldr	r2, [pc, #96]	; (80059a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d009      	beq.n	8005956 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a17      	ldr	r2, [pc, #92]	; (80059a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d004      	beq.n	8005956 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a15      	ldr	r2, [pc, #84]	; (80059a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d10c      	bne.n	8005970 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800595c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	4313      	orrs	r3, r2
 8005966:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	40010000 	.word	0x40010000
 8005994:	40000400 	.word	0x40000400
 8005998:	40000800 	.word	0x40000800
 800599c:	40000c00 	.word	0x40000c00
 80059a0:	40010400 	.word	0x40010400
 80059a4:	40014000 	.word	0x40014000
 80059a8:	40001800 	.word	0x40001800

080059ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d101      	bne.n	80059be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e03f      	b.n	8005a3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d106      	bne.n	80059d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f7fc fee8 	bl	80027a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2224      	movs	r2, #36	; 0x24
 80059dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68da      	ldr	r2, [r3, #12]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 ff49 	bl	8006888 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	691a      	ldr	r2, [r3, #16]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	695a      	ldr	r2, [r3, #20]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68da      	ldr	r2, [r3, #12]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2220      	movs	r2, #32
 8005a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3708      	adds	r7, #8
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
	...

08005a48 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b08c      	sub	sp, #48	; 0x30
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	4613      	mov	r3, r2
 8005a54:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b20      	cmp	r3, #32
 8005a60:	d165      	bne.n	8005b2e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d002      	beq.n	8005a6e <HAL_UART_Transmit_DMA+0x26>
 8005a68:	88fb      	ldrh	r3, [r7, #6]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d101      	bne.n	8005a72 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e05e      	b.n	8005b30 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d101      	bne.n	8005a80 <HAL_UART_Transmit_DMA+0x38>
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	e057      	b.n	8005b30 <HAL_UART_Transmit_DMA+0xe8>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	88fa      	ldrh	r2, [r7, #6]
 8005a92:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	88fa      	ldrh	r2, [r7, #6]
 8005a98:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2221      	movs	r2, #33	; 0x21
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aac:	4a22      	ldr	r2, [pc, #136]	; (8005b38 <HAL_UART_Transmit_DMA+0xf0>)
 8005aae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab4:	4a21      	ldr	r2, [pc, #132]	; (8005b3c <HAL_UART_Transmit_DMA+0xf4>)
 8005ab6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005abc:	4a20      	ldr	r2, [pc, #128]	; (8005b40 <HAL_UART_Transmit_DMA+0xf8>)
 8005abe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8005ac8:	f107 0308 	add.w	r3, r7, #8
 8005acc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad4:	6819      	ldr	r1, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	3304      	adds	r3, #4
 8005adc:	461a      	mov	r2, r3
 8005ade:	88fb      	ldrh	r3, [r7, #6]
 8005ae0:	f7fd fa3c 	bl	8002f5c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005aec:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	3314      	adds	r3, #20
 8005afc:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	e853 3f00 	ldrex	r3, [r3]
 8005b04:	617b      	str	r3, [r7, #20]
   return(result);
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	3314      	adds	r3, #20
 8005b14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b16:	627a      	str	r2, [r7, #36]	; 0x24
 8005b18:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1a:	6a39      	ldr	r1, [r7, #32]
 8005b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b1e:	e841 2300 	strex	r3, r2, [r1]
 8005b22:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1e5      	bne.n	8005af6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	e000      	b.n	8005b30 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8005b2e:	2302      	movs	r3, #2
  }
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3730      	adds	r7, #48	; 0x30
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	08006129 	.word	0x08006129
 8005b3c:	080061c3 	.word	0x080061c3
 8005b40:	0800633b 	.word	0x0800633b

08005b44 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b20      	cmp	r3, #32
 8005b5c:	d11d      	bne.n	8005b9a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d002      	beq.n	8005b6a <HAL_UART_Receive_DMA+0x26>
 8005b64:	88fb      	ldrh	r3, [r7, #6]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d101      	bne.n	8005b6e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e016      	b.n	8005b9c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d101      	bne.n	8005b7c <HAL_UART_Receive_DMA+0x38>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	e00f      	b.n	8005b9c <HAL_UART_Receive_DMA+0x58>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005b8a:	88fb      	ldrh	r3, [r7, #6]
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	68b9      	ldr	r1, [r7, #8]
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f000 fc1d 	bl	80063d0 <UART_Start_Receive_DMA>
 8005b96:	4603      	mov	r3, r0
 8005b98:	e000      	b.n	8005b9c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005b9a:	2302      	movs	r3, #2
  }
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3710      	adds	r7, #16
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b0ba      	sub	sp, #232	; 0xe8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bda:	f003 030f 	and.w	r3, r3, #15
 8005bde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005be2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10f      	bne.n	8005c0a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bee:	f003 0320 	and.w	r3, r3, #32
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d009      	beq.n	8005c0a <HAL_UART_IRQHandler+0x66>
 8005bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bfa:	f003 0320 	and.w	r3, r3, #32
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d003      	beq.n	8005c0a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fd85 	bl	8006712 <UART_Receive_IT>
      return;
 8005c08:	e256      	b.n	80060b8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005c0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	f000 80de 	beq.w	8005dd0 <HAL_UART_IRQHandler+0x22c>
 8005c14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c18:	f003 0301 	and.w	r3, r3, #1
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d106      	bne.n	8005c2e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c24:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f000 80d1 	beq.w	8005dd0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00b      	beq.n	8005c52 <HAL_UART_IRQHandler+0xae>
 8005c3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d005      	beq.n	8005c52 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4a:	f043 0201 	orr.w	r2, r3, #1
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c56:	f003 0304 	and.w	r3, r3, #4
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00b      	beq.n	8005c76 <HAL_UART_IRQHandler+0xd2>
 8005c5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d005      	beq.n	8005c76 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6e:	f043 0202 	orr.w	r2, r3, #2
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c7a:	f003 0302 	and.w	r3, r3, #2
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00b      	beq.n	8005c9a <HAL_UART_IRQHandler+0xf6>
 8005c82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d005      	beq.n	8005c9a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c92:	f043 0204 	orr.w	r2, r3, #4
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c9e:	f003 0308 	and.w	r3, r3, #8
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d011      	beq.n	8005cca <HAL_UART_IRQHandler+0x126>
 8005ca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005caa:	f003 0320 	and.w	r3, r3, #32
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d105      	bne.n	8005cbe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005cb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d005      	beq.n	8005cca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc2:	f043 0208 	orr.w	r2, r3, #8
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f000 81ed 	beq.w	80060ae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cd8:	f003 0320 	and.w	r3, r3, #32
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d008      	beq.n	8005cf2 <HAL_UART_IRQHandler+0x14e>
 8005ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ce4:	f003 0320 	and.w	r3, r3, #32
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d002      	beq.n	8005cf2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 fd10 	bl	8006712 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	695b      	ldr	r3, [r3, #20]
 8005cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cfc:	2b40      	cmp	r3, #64	; 0x40
 8005cfe:	bf0c      	ite	eq
 8005d00:	2301      	moveq	r3, #1
 8005d02:	2300      	movne	r3, #0
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0e:	f003 0308 	and.w	r3, r3, #8
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d103      	bne.n	8005d1e <HAL_UART_IRQHandler+0x17a>
 8005d16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d04f      	beq.n	8005dbe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 fc18 	bl	8006554 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d2e:	2b40      	cmp	r3, #64	; 0x40
 8005d30:	d141      	bne.n	8005db6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	3314      	adds	r3, #20
 8005d38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d40:	e853 3f00 	ldrex	r3, [r3]
 8005d44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005d48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	3314      	adds	r3, #20
 8005d5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005d62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d6e:	e841 2300 	strex	r3, r2, [r1]
 8005d72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1d9      	bne.n	8005d32 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d013      	beq.n	8005dae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8a:	4a7d      	ldr	r2, [pc, #500]	; (8005f80 <HAL_UART_IRQHandler+0x3dc>)
 8005d8c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7fd f9aa 	bl	80030ec <HAL_DMA_Abort_IT>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d016      	beq.n	8005dcc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005da8:	4610      	mov	r0, r2
 8005daa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dac:	e00e      	b.n	8005dcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f9a4 	bl	80060fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005db4:	e00a      	b.n	8005dcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f9a0 	bl	80060fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dbc:	e006      	b.n	8005dcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 f99c 	bl	80060fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005dca:	e170      	b.n	80060ae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dcc:	bf00      	nop
    return;
 8005dce:	e16e      	b.n	80060ae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	f040 814a 	bne.w	800606e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dde:	f003 0310 	and.w	r3, r3, #16
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f000 8143 	beq.w	800606e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dec:	f003 0310 	and.w	r3, r3, #16
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f000 813c 	beq.w	800606e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005df6:	2300      	movs	r3, #0
 8005df8:	60bb      	str	r3, [r7, #8]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	60bb      	str	r3, [r7, #8]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	60bb      	str	r3, [r7, #8]
 8005e0a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e16:	2b40      	cmp	r3, #64	; 0x40
 8005e18:	f040 80b4 	bne.w	8005f84 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 8140 	beq.w	80060b2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	f080 8139 	bcs.w	80060b2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e46:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4c:	69db      	ldr	r3, [r3, #28]
 8005e4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e52:	f000 8088 	beq.w	8005f66 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	330c      	adds	r3, #12
 8005e5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e64:	e853 3f00 	ldrex	r3, [r3]
 8005e68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	330c      	adds	r3, #12
 8005e7e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005e82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e92:	e841 2300 	strex	r3, r2, [r1]
 8005e96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1d9      	bne.n	8005e56 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	3314      	adds	r3, #20
 8005ea8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005eac:	e853 3f00 	ldrex	r3, [r3]
 8005eb0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005eb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005eb4:	f023 0301 	bic.w	r3, r3, #1
 8005eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	3314      	adds	r3, #20
 8005ec2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005ec6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005eca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ecc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005ece:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005ed2:	e841 2300 	strex	r3, r2, [r1]
 8005ed6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ed8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1e1      	bne.n	8005ea2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	3314      	adds	r3, #20
 8005ee4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ee8:	e853 3f00 	ldrex	r3, [r3]
 8005eec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005eee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ef0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ef4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	3314      	adds	r3, #20
 8005efe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005f02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005f04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f0a:	e841 2300 	strex	r3, r2, [r1]
 8005f0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1e3      	bne.n	8005ede <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2220      	movs	r2, #32
 8005f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	330c      	adds	r3, #12
 8005f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f2e:	e853 3f00 	ldrex	r3, [r3]
 8005f32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f36:	f023 0310 	bic.w	r3, r3, #16
 8005f3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	330c      	adds	r3, #12
 8005f44:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005f48:	65ba      	str	r2, [r7, #88]	; 0x58
 8005f4a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f50:	e841 2300 	strex	r3, r2, [r1]
 8005f54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d1e3      	bne.n	8005f24 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7fd f853 	bl	800300c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	4619      	mov	r1, r3
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 f8ca 	bl	8006110 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f7c:	e099      	b.n	80060b2 <HAL_UART_IRQHandler+0x50e>
 8005f7e:	bf00      	nop
 8005f80:	0800661b 	.word	0x0800661b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	f000 808b 	beq.w	80060b6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005fa0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f000 8086 	beq.w	80060b6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	330c      	adds	r3, #12
 8005fb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb4:	e853 3f00 	ldrex	r3, [r3]
 8005fb8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	330c      	adds	r3, #12
 8005fca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005fce:	647a      	str	r2, [r7, #68]	; 0x44
 8005fd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fd6:	e841 2300 	strex	r3, r2, [r1]
 8005fda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1e3      	bne.n	8005faa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	3314      	adds	r3, #20
 8005fe8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	e853 3f00 	ldrex	r3, [r3]
 8005ff0:	623b      	str	r3, [r7, #32]
   return(result);
 8005ff2:	6a3b      	ldr	r3, [r7, #32]
 8005ff4:	f023 0301 	bic.w	r3, r3, #1
 8005ff8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	3314      	adds	r3, #20
 8006002:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006006:	633a      	str	r2, [r7, #48]	; 0x30
 8006008:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800600c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800600e:	e841 2300 	strex	r3, r2, [r1]
 8006012:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1e3      	bne.n	8005fe2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2220      	movs	r2, #32
 800601e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	330c      	adds	r3, #12
 800602e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	e853 3f00 	ldrex	r3, [r3]
 8006036:	60fb      	str	r3, [r7, #12]
   return(result);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f023 0310 	bic.w	r3, r3, #16
 800603e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	330c      	adds	r3, #12
 8006048:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800604c:	61fa      	str	r2, [r7, #28]
 800604e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006050:	69b9      	ldr	r1, [r7, #24]
 8006052:	69fa      	ldr	r2, [r7, #28]
 8006054:	e841 2300 	strex	r3, r2, [r1]
 8006058:	617b      	str	r3, [r7, #20]
   return(result);
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1e3      	bne.n	8006028 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006060:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006064:	4619      	mov	r1, r3
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f852 	bl	8006110 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800606c:	e023      	b.n	80060b6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800606e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006076:	2b00      	cmp	r3, #0
 8006078:	d009      	beq.n	800608e <HAL_UART_IRQHandler+0x4ea>
 800607a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800607e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006082:	2b00      	cmp	r3, #0
 8006084:	d003      	beq.n	800608e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 fadb 	bl	8006642 <UART_Transmit_IT>
    return;
 800608c:	e014      	b.n	80060b8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800608e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00e      	beq.n	80060b8 <HAL_UART_IRQHandler+0x514>
 800609a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800609e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d008      	beq.n	80060b8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 fb1b 	bl	80066e2 <UART_EndTransmit_IT>
    return;
 80060ac:	e004      	b.n	80060b8 <HAL_UART_IRQHandler+0x514>
    return;
 80060ae:	bf00      	nop
 80060b0:	e002      	b.n	80060b8 <HAL_UART_IRQHandler+0x514>
      return;
 80060b2:	bf00      	nop
 80060b4:	e000      	b.n	80060b8 <HAL_UART_IRQHandler+0x514>
      return;
 80060b6:	bf00      	nop
  }
}
 80060b8:	37e8      	adds	r7, #232	; 0xe8
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop

080060c0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	460b      	mov	r3, r1
 800611a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b090      	sub	sp, #64	; 0x40
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006134:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006140:	2b00      	cmp	r3, #0
 8006142:	d137      	bne.n	80061b4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006146:	2200      	movs	r2, #0
 8006148:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800614a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	3314      	adds	r3, #20
 8006150:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006154:	e853 3f00 	ldrex	r3, [r3]
 8006158:	623b      	str	r3, [r7, #32]
   return(result);
 800615a:	6a3b      	ldr	r3, [r7, #32]
 800615c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006160:	63bb      	str	r3, [r7, #56]	; 0x38
 8006162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	3314      	adds	r3, #20
 8006168:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800616a:	633a      	str	r2, [r7, #48]	; 0x30
 800616c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006172:	e841 2300 	strex	r3, r2, [r1]
 8006176:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1e5      	bne.n	800614a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800617e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	330c      	adds	r3, #12
 8006184:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	e853 3f00 	ldrex	r3, [r3]
 800618c:	60fb      	str	r3, [r7, #12]
   return(result);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006194:	637b      	str	r3, [r7, #52]	; 0x34
 8006196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	330c      	adds	r3, #12
 800619c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800619e:	61fa      	str	r2, [r7, #28]
 80061a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a2:	69b9      	ldr	r1, [r7, #24]
 80061a4:	69fa      	ldr	r2, [r7, #28]
 80061a6:	e841 2300 	strex	r3, r2, [r1]
 80061aa:	617b      	str	r3, [r7, #20]
   return(result);
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1e5      	bne.n	800617e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80061b2:	e002      	b.n	80061ba <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80061b4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80061b6:	f7fc f961 	bl	800247c <HAL_UART_TxCpltCallback>
}
 80061ba:	bf00      	nop
 80061bc:	3740      	adds	r7, #64	; 0x40
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b084      	sub	sp, #16
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ce:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f7ff ff75 	bl	80060c0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061d6:	bf00      	nop
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b09c      	sub	sp, #112	; 0x70
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d172      	bne.n	80062e0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80061fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061fc:	2200      	movs	r2, #0
 80061fe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	330c      	adds	r3, #12
 8006206:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800620a:	e853 3f00 	ldrex	r3, [r3]
 800620e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006212:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006216:	66bb      	str	r3, [r7, #104]	; 0x68
 8006218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	330c      	adds	r3, #12
 800621e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006220:	65ba      	str	r2, [r7, #88]	; 0x58
 8006222:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006224:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006226:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006228:	e841 2300 	strex	r3, r2, [r1]
 800622c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800622e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1e5      	bne.n	8006200 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	3314      	adds	r3, #20
 800623a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623e:	e853 3f00 	ldrex	r3, [r3]
 8006242:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006246:	f023 0301 	bic.w	r3, r3, #1
 800624a:	667b      	str	r3, [r7, #100]	; 0x64
 800624c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	3314      	adds	r3, #20
 8006252:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006254:	647a      	str	r2, [r7, #68]	; 0x44
 8006256:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006258:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800625a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800625c:	e841 2300 	strex	r3, r2, [r1]
 8006260:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1e5      	bne.n	8006234 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	3314      	adds	r3, #20
 800626e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006272:	e853 3f00 	ldrex	r3, [r3]
 8006276:	623b      	str	r3, [r7, #32]
   return(result);
 8006278:	6a3b      	ldr	r3, [r7, #32]
 800627a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800627e:	663b      	str	r3, [r7, #96]	; 0x60
 8006280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	3314      	adds	r3, #20
 8006286:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006288:	633a      	str	r2, [r7, #48]	; 0x30
 800628a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800628e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006290:	e841 2300 	strex	r3, r2, [r1]
 8006294:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006298:	2b00      	cmp	r3, #0
 800629a:	d1e5      	bne.n	8006268 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800629c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800629e:	2220      	movs	r2, #32
 80062a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d119      	bne.n	80062e0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	330c      	adds	r3, #12
 80062b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	e853 3f00 	ldrex	r3, [r3]
 80062ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f023 0310 	bic.w	r3, r3, #16
 80062c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	330c      	adds	r3, #12
 80062ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80062cc:	61fa      	str	r2, [r7, #28]
 80062ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d0:	69b9      	ldr	r1, [r7, #24]
 80062d2:	69fa      	ldr	r2, [r7, #28]
 80062d4:	e841 2300 	strex	r3, r2, [r1]
 80062d8:	617b      	str	r3, [r7, #20]
   return(result);
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d1e5      	bne.n	80062ac <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d106      	bne.n	80062f6 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062ec:	4619      	mov	r1, r3
 80062ee:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80062f0:	f7ff ff0e 	bl	8006110 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80062f4:	e002      	b.n	80062fc <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80062f6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80062f8:	f7ff feec 	bl	80060d4 <HAL_UART_RxCpltCallback>
}
 80062fc:	bf00      	nop
 80062fe:	3770      	adds	r7, #112	; 0x70
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006310:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006316:	2b01      	cmp	r3, #1
 8006318:	d108      	bne.n	800632c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800631e:	085b      	lsrs	r3, r3, #1
 8006320:	b29b      	uxth	r3, r3
 8006322:	4619      	mov	r1, r3
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f7ff fef3 	bl	8006110 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800632a:	e002      	b.n	8006332 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f7ff fedb 	bl	80060e8 <HAL_UART_RxHalfCpltCallback>
}
 8006332:	bf00      	nop
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b084      	sub	sp, #16
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006342:	2300      	movs	r3, #0
 8006344:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006356:	2b80      	cmp	r3, #128	; 0x80
 8006358:	bf0c      	ite	eq
 800635a:	2301      	moveq	r3, #1
 800635c:	2300      	movne	r3, #0
 800635e:	b2db      	uxtb	r3, r3
 8006360:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b21      	cmp	r3, #33	; 0x21
 800636c:	d108      	bne.n	8006380 <UART_DMAError+0x46>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d005      	beq.n	8006380 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	2200      	movs	r2, #0
 8006378:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800637a:	68b8      	ldr	r0, [r7, #8]
 800637c:	f000 f8c2 	bl	8006504 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800638a:	2b40      	cmp	r3, #64	; 0x40
 800638c:	bf0c      	ite	eq
 800638e:	2301      	moveq	r3, #1
 8006390:	2300      	movne	r3, #0
 8006392:	b2db      	uxtb	r3, r3
 8006394:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b22      	cmp	r3, #34	; 0x22
 80063a0:	d108      	bne.n	80063b4 <UART_DMAError+0x7a>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d005      	beq.n	80063b4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	2200      	movs	r2, #0
 80063ac:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80063ae:	68b8      	ldr	r0, [r7, #8]
 80063b0:	f000 f8d0 	bl	8006554 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b8:	f043 0210 	orr.w	r2, r3, #16
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063c0:	68b8      	ldr	r0, [r7, #8]
 80063c2:	f7ff fe9b 	bl	80060fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063c6:	bf00      	nop
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
	...

080063d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b098      	sub	sp, #96	; 0x60
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	4613      	mov	r3, r2
 80063dc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	88fa      	ldrh	r2, [r7, #6]
 80063e8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2222      	movs	r2, #34	; 0x22
 80063f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fc:	4a3e      	ldr	r2, [pc, #248]	; (80064f8 <UART_Start_Receive_DMA+0x128>)
 80063fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006404:	4a3d      	ldr	r2, [pc, #244]	; (80064fc <UART_Start_Receive_DMA+0x12c>)
 8006406:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640c:	4a3c      	ldr	r2, [pc, #240]	; (8006500 <UART_Start_Receive_DMA+0x130>)
 800640e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006414:	2200      	movs	r2, #0
 8006416:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006418:	f107 0308 	add.w	r3, r7, #8
 800641c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	3304      	adds	r3, #4
 8006428:	4619      	mov	r1, r3
 800642a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	88fb      	ldrh	r3, [r7, #6]
 8006430:	f7fc fd94 	bl	8002f5c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006434:	2300      	movs	r3, #0
 8006436:	613b      	str	r3, [r7, #16]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	613b      	str	r3, [r7, #16]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	613b      	str	r3, [r7, #16]
 8006448:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	330c      	adds	r3, #12
 8006458:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800645c:	e853 3f00 	ldrex	r3, [r3]
 8006460:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006468:	65bb      	str	r3, [r7, #88]	; 0x58
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	330c      	adds	r3, #12
 8006470:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006472:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006474:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006476:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006478:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800647a:	e841 2300 	strex	r3, r2, [r1]
 800647e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1e5      	bne.n	8006452 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	3314      	adds	r3, #20
 800648c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006490:	e853 3f00 	ldrex	r3, [r3]
 8006494:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006498:	f043 0301 	orr.w	r3, r3, #1
 800649c:	657b      	str	r3, [r7, #84]	; 0x54
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	3314      	adds	r3, #20
 80064a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80064a6:	63ba      	str	r2, [r7, #56]	; 0x38
 80064a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80064ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064ae:	e841 2300 	strex	r3, r2, [r1]
 80064b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80064b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1e5      	bne.n	8006486 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	3314      	adds	r3, #20
 80064c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	e853 3f00 	ldrex	r3, [r3]
 80064c8:	617b      	str	r3, [r7, #20]
   return(result);
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064d0:	653b      	str	r3, [r7, #80]	; 0x50
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	3314      	adds	r3, #20
 80064d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80064da:	627a      	str	r2, [r7, #36]	; 0x24
 80064dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064de:	6a39      	ldr	r1, [r7, #32]
 80064e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064e2:	e841 2300 	strex	r3, r2, [r1]
 80064e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1e5      	bne.n	80064ba <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3760      	adds	r7, #96	; 0x60
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	080061df 	.word	0x080061df
 80064fc:	08006305 	.word	0x08006305
 8006500:	0800633b 	.word	0x0800633b

08006504 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006504:	b480      	push	{r7}
 8006506:	b089      	sub	sp, #36	; 0x24
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	330c      	adds	r3, #12
 8006512:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	e853 3f00 	ldrex	r3, [r3]
 800651a:	60bb      	str	r3, [r7, #8]
   return(result);
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006522:	61fb      	str	r3, [r7, #28]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	330c      	adds	r3, #12
 800652a:	69fa      	ldr	r2, [r7, #28]
 800652c:	61ba      	str	r2, [r7, #24]
 800652e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006530:	6979      	ldr	r1, [r7, #20]
 8006532:	69ba      	ldr	r2, [r7, #24]
 8006534:	e841 2300 	strex	r3, r2, [r1]
 8006538:	613b      	str	r3, [r7, #16]
   return(result);
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d1e5      	bne.n	800650c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2220      	movs	r2, #32
 8006544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006548:	bf00      	nop
 800654a:	3724      	adds	r7, #36	; 0x24
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006554:	b480      	push	{r7}
 8006556:	b095      	sub	sp, #84	; 0x54
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	330c      	adds	r3, #12
 8006562:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006566:	e853 3f00 	ldrex	r3, [r3]
 800656a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800656c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006572:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	330c      	adds	r3, #12
 800657a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800657c:	643a      	str	r2, [r7, #64]	; 0x40
 800657e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006580:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006582:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006584:	e841 2300 	strex	r3, r2, [r1]
 8006588:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800658a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658c:	2b00      	cmp	r3, #0
 800658e:	d1e5      	bne.n	800655c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	3314      	adds	r3, #20
 8006596:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006598:	6a3b      	ldr	r3, [r7, #32]
 800659a:	e853 3f00 	ldrex	r3, [r3]
 800659e:	61fb      	str	r3, [r7, #28]
   return(result);
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	f023 0301 	bic.w	r3, r3, #1
 80065a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	3314      	adds	r3, #20
 80065ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065b8:	e841 2300 	strex	r3, r2, [r1]
 80065bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1e5      	bne.n	8006590 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d119      	bne.n	8006600 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	330c      	adds	r3, #12
 80065d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	e853 3f00 	ldrex	r3, [r3]
 80065da:	60bb      	str	r3, [r7, #8]
   return(result);
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	f023 0310 	bic.w	r3, r3, #16
 80065e2:	647b      	str	r3, [r7, #68]	; 0x44
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	330c      	adds	r3, #12
 80065ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065ec:	61ba      	str	r2, [r7, #24]
 80065ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f0:	6979      	ldr	r1, [r7, #20]
 80065f2:	69ba      	ldr	r2, [r7, #24]
 80065f4:	e841 2300 	strex	r3, r2, [r1]
 80065f8:	613b      	str	r3, [r7, #16]
   return(result);
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1e5      	bne.n	80065cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2220      	movs	r2, #32
 8006604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800660e:	bf00      	nop
 8006610:	3754      	adds	r7, #84	; 0x54
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b084      	sub	sp, #16
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006626:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f7ff fd61 	bl	80060fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800663a:	bf00      	nop
 800663c:	3710      	adds	r7, #16
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006642:	b480      	push	{r7}
 8006644:	b085      	sub	sp, #20
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006650:	b2db      	uxtb	r3, r3
 8006652:	2b21      	cmp	r3, #33	; 0x21
 8006654:	d13e      	bne.n	80066d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800665e:	d114      	bne.n	800668a <UART_Transmit_IT+0x48>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d110      	bne.n	800668a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a1b      	ldr	r3, [r3, #32]
 800666c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	461a      	mov	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800667c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	1c9a      	adds	r2, r3, #2
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	621a      	str	r2, [r3, #32]
 8006688:	e008      	b.n	800669c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	1c59      	adds	r1, r3, #1
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	6211      	str	r1, [r2, #32]
 8006694:	781a      	ldrb	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	3b01      	subs	r3, #1
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	4619      	mov	r1, r3
 80066aa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10f      	bne.n	80066d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68da      	ldr	r2, [r3, #12]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68da      	ldr	r2, [r3, #12]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80066d0:	2300      	movs	r3, #0
 80066d2:	e000      	b.n	80066d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80066d4:	2302      	movs	r3, #2
  }
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr

080066e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b082      	sub	sp, #8
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68da      	ldr	r2, [r3, #12]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2220      	movs	r2, #32
 80066fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f7fb feba 	bl	800247c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b08c      	sub	sp, #48	; 0x30
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b22      	cmp	r3, #34	; 0x22
 8006724:	f040 80ab 	bne.w	800687e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006730:	d117      	bne.n	8006762 <UART_Receive_IT+0x50>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d113      	bne.n	8006762 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800673a:	2300      	movs	r3, #0
 800673c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006742:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	b29b      	uxth	r3, r3
 800674c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006750:	b29a      	uxth	r2, r3
 8006752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006754:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800675a:	1c9a      	adds	r2, r3, #2
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	629a      	str	r2, [r3, #40]	; 0x28
 8006760:	e026      	b.n	80067b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006766:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006768:	2300      	movs	r3, #0
 800676a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006774:	d007      	beq.n	8006786 <UART_Receive_IT+0x74>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10a      	bne.n	8006794 <UART_Receive_IT+0x82>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d106      	bne.n	8006794 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	b2da      	uxtb	r2, r3
 800678e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006790:	701a      	strb	r2, [r3, #0]
 8006792:	e008      	b.n	80067a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	b2db      	uxtb	r3, r3
 800679c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067a0:	b2da      	uxtb	r2, r3
 80067a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067aa:	1c5a      	adds	r2, r3, #1
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	3b01      	subs	r3, #1
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	4619      	mov	r1, r3
 80067be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d15a      	bne.n	800687a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68da      	ldr	r2, [r3, #12]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f022 0220 	bic.w	r2, r2, #32
 80067d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68da      	ldr	r2, [r3, #12]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	695a      	ldr	r2, [r3, #20]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f022 0201 	bic.w	r2, r2, #1
 80067f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2220      	movs	r2, #32
 80067f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006800:	2b01      	cmp	r3, #1
 8006802:	d135      	bne.n	8006870 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	330c      	adds	r3, #12
 8006810:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	e853 3f00 	ldrex	r3, [r3]
 8006818:	613b      	str	r3, [r7, #16]
   return(result);
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	f023 0310 	bic.w	r3, r3, #16
 8006820:	627b      	str	r3, [r7, #36]	; 0x24
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	330c      	adds	r3, #12
 8006828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800682a:	623a      	str	r2, [r7, #32]
 800682c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682e:	69f9      	ldr	r1, [r7, #28]
 8006830:	6a3a      	ldr	r2, [r7, #32]
 8006832:	e841 2300 	strex	r3, r2, [r1]
 8006836:	61bb      	str	r3, [r7, #24]
   return(result);
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1e5      	bne.n	800680a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 0310 	and.w	r3, r3, #16
 8006848:	2b10      	cmp	r3, #16
 800684a:	d10a      	bne.n	8006862 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800684c:	2300      	movs	r3, #0
 800684e:	60fb      	str	r3, [r7, #12]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	60fb      	str	r3, [r7, #12]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	60fb      	str	r3, [r7, #12]
 8006860:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006866:	4619      	mov	r1, r3
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f7ff fc51 	bl	8006110 <HAL_UARTEx_RxEventCallback>
 800686e:	e002      	b.n	8006876 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f7ff fc2f 	bl	80060d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006876:	2300      	movs	r3, #0
 8006878:	e002      	b.n	8006880 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800687a:	2300      	movs	r3, #0
 800687c:	e000      	b.n	8006880 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800687e:	2302      	movs	r3, #2
  }
}
 8006880:	4618      	mov	r0, r3
 8006882:	3730      	adds	r7, #48	; 0x30
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800688c:	b09f      	sub	sp, #124	; 0x7c
 800688e:	af00      	add	r7, sp, #0
 8006890:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800689c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800689e:	68d9      	ldr	r1, [r3, #12]
 80068a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	ea40 0301 	orr.w	r3, r0, r1
 80068a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80068aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068ac:	689a      	ldr	r2, [r3, #8]
 80068ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	431a      	orrs	r2, r3
 80068b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068b6:	695b      	ldr	r3, [r3, #20]
 80068b8:	431a      	orrs	r2, r3
 80068ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068bc:	69db      	ldr	r3, [r3, #28]
 80068be:	4313      	orrs	r3, r2
 80068c0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80068c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80068cc:	f021 010c 	bic.w	r1, r1, #12
 80068d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068d6:	430b      	orrs	r3, r1
 80068d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	695b      	ldr	r3, [r3, #20]
 80068e0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80068e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068e6:	6999      	ldr	r1, [r3, #24]
 80068e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	ea40 0301 	orr.w	r3, r0, r1
 80068f0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80068f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	4bc5      	ldr	r3, [pc, #788]	; (8006c0c <UART_SetConfig+0x384>)
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d004      	beq.n	8006906 <UART_SetConfig+0x7e>
 80068fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	4bc3      	ldr	r3, [pc, #780]	; (8006c10 <UART_SetConfig+0x388>)
 8006902:	429a      	cmp	r2, r3
 8006904:	d103      	bne.n	800690e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006906:	f7fd fc67 	bl	80041d8 <HAL_RCC_GetPCLK2Freq>
 800690a:	6778      	str	r0, [r7, #116]	; 0x74
 800690c:	e002      	b.n	8006914 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800690e:	f7fd fc4f 	bl	80041b0 <HAL_RCC_GetPCLK1Freq>
 8006912:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006916:	69db      	ldr	r3, [r3, #28]
 8006918:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800691c:	f040 80b6 	bne.w	8006a8c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006920:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006922:	461c      	mov	r4, r3
 8006924:	f04f 0500 	mov.w	r5, #0
 8006928:	4622      	mov	r2, r4
 800692a:	462b      	mov	r3, r5
 800692c:	1891      	adds	r1, r2, r2
 800692e:	6439      	str	r1, [r7, #64]	; 0x40
 8006930:	415b      	adcs	r3, r3
 8006932:	647b      	str	r3, [r7, #68]	; 0x44
 8006934:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006938:	1912      	adds	r2, r2, r4
 800693a:	eb45 0303 	adc.w	r3, r5, r3
 800693e:	f04f 0000 	mov.w	r0, #0
 8006942:	f04f 0100 	mov.w	r1, #0
 8006946:	00d9      	lsls	r1, r3, #3
 8006948:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800694c:	00d0      	lsls	r0, r2, #3
 800694e:	4602      	mov	r2, r0
 8006950:	460b      	mov	r3, r1
 8006952:	1911      	adds	r1, r2, r4
 8006954:	6639      	str	r1, [r7, #96]	; 0x60
 8006956:	416b      	adcs	r3, r5
 8006958:	667b      	str	r3, [r7, #100]	; 0x64
 800695a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	461a      	mov	r2, r3
 8006960:	f04f 0300 	mov.w	r3, #0
 8006964:	1891      	adds	r1, r2, r2
 8006966:	63b9      	str	r1, [r7, #56]	; 0x38
 8006968:	415b      	adcs	r3, r3
 800696a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800696c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006970:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006974:	f7f9 fc28 	bl	80001c8 <__aeabi_uldivmod>
 8006978:	4602      	mov	r2, r0
 800697a:	460b      	mov	r3, r1
 800697c:	4ba5      	ldr	r3, [pc, #660]	; (8006c14 <UART_SetConfig+0x38c>)
 800697e:	fba3 2302 	umull	r2, r3, r3, r2
 8006982:	095b      	lsrs	r3, r3, #5
 8006984:	011e      	lsls	r6, r3, #4
 8006986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006988:	461c      	mov	r4, r3
 800698a:	f04f 0500 	mov.w	r5, #0
 800698e:	4622      	mov	r2, r4
 8006990:	462b      	mov	r3, r5
 8006992:	1891      	adds	r1, r2, r2
 8006994:	6339      	str	r1, [r7, #48]	; 0x30
 8006996:	415b      	adcs	r3, r3
 8006998:	637b      	str	r3, [r7, #52]	; 0x34
 800699a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800699e:	1912      	adds	r2, r2, r4
 80069a0:	eb45 0303 	adc.w	r3, r5, r3
 80069a4:	f04f 0000 	mov.w	r0, #0
 80069a8:	f04f 0100 	mov.w	r1, #0
 80069ac:	00d9      	lsls	r1, r3, #3
 80069ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80069b2:	00d0      	lsls	r0, r2, #3
 80069b4:	4602      	mov	r2, r0
 80069b6:	460b      	mov	r3, r1
 80069b8:	1911      	adds	r1, r2, r4
 80069ba:	65b9      	str	r1, [r7, #88]	; 0x58
 80069bc:	416b      	adcs	r3, r5
 80069be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	461a      	mov	r2, r3
 80069c6:	f04f 0300 	mov.w	r3, #0
 80069ca:	1891      	adds	r1, r2, r2
 80069cc:	62b9      	str	r1, [r7, #40]	; 0x28
 80069ce:	415b      	adcs	r3, r3
 80069d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80069d6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80069da:	f7f9 fbf5 	bl	80001c8 <__aeabi_uldivmod>
 80069de:	4602      	mov	r2, r0
 80069e0:	460b      	mov	r3, r1
 80069e2:	4b8c      	ldr	r3, [pc, #560]	; (8006c14 <UART_SetConfig+0x38c>)
 80069e4:	fba3 1302 	umull	r1, r3, r3, r2
 80069e8:	095b      	lsrs	r3, r3, #5
 80069ea:	2164      	movs	r1, #100	; 0x64
 80069ec:	fb01 f303 	mul.w	r3, r1, r3
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	00db      	lsls	r3, r3, #3
 80069f4:	3332      	adds	r3, #50	; 0x32
 80069f6:	4a87      	ldr	r2, [pc, #540]	; (8006c14 <UART_SetConfig+0x38c>)
 80069f8:	fba2 2303 	umull	r2, r3, r2, r3
 80069fc:	095b      	lsrs	r3, r3, #5
 80069fe:	005b      	lsls	r3, r3, #1
 8006a00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a04:	441e      	add	r6, r3
 8006a06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f04f 0100 	mov.w	r1, #0
 8006a0e:	4602      	mov	r2, r0
 8006a10:	460b      	mov	r3, r1
 8006a12:	1894      	adds	r4, r2, r2
 8006a14:	623c      	str	r4, [r7, #32]
 8006a16:	415b      	adcs	r3, r3
 8006a18:	627b      	str	r3, [r7, #36]	; 0x24
 8006a1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a1e:	1812      	adds	r2, r2, r0
 8006a20:	eb41 0303 	adc.w	r3, r1, r3
 8006a24:	f04f 0400 	mov.w	r4, #0
 8006a28:	f04f 0500 	mov.w	r5, #0
 8006a2c:	00dd      	lsls	r5, r3, #3
 8006a2e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006a32:	00d4      	lsls	r4, r2, #3
 8006a34:	4622      	mov	r2, r4
 8006a36:	462b      	mov	r3, r5
 8006a38:	1814      	adds	r4, r2, r0
 8006a3a:	653c      	str	r4, [r7, #80]	; 0x50
 8006a3c:	414b      	adcs	r3, r1
 8006a3e:	657b      	str	r3, [r7, #84]	; 0x54
 8006a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	461a      	mov	r2, r3
 8006a46:	f04f 0300 	mov.w	r3, #0
 8006a4a:	1891      	adds	r1, r2, r2
 8006a4c:	61b9      	str	r1, [r7, #24]
 8006a4e:	415b      	adcs	r3, r3
 8006a50:	61fb      	str	r3, [r7, #28]
 8006a52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a56:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006a5a:	f7f9 fbb5 	bl	80001c8 <__aeabi_uldivmod>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	460b      	mov	r3, r1
 8006a62:	4b6c      	ldr	r3, [pc, #432]	; (8006c14 <UART_SetConfig+0x38c>)
 8006a64:	fba3 1302 	umull	r1, r3, r3, r2
 8006a68:	095b      	lsrs	r3, r3, #5
 8006a6a:	2164      	movs	r1, #100	; 0x64
 8006a6c:	fb01 f303 	mul.w	r3, r1, r3
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	00db      	lsls	r3, r3, #3
 8006a74:	3332      	adds	r3, #50	; 0x32
 8006a76:	4a67      	ldr	r2, [pc, #412]	; (8006c14 <UART_SetConfig+0x38c>)
 8006a78:	fba2 2303 	umull	r2, r3, r2, r3
 8006a7c:	095b      	lsrs	r3, r3, #5
 8006a7e:	f003 0207 	and.w	r2, r3, #7
 8006a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4432      	add	r2, r6
 8006a88:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a8a:	e0b9      	b.n	8006c00 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a8e:	461c      	mov	r4, r3
 8006a90:	f04f 0500 	mov.w	r5, #0
 8006a94:	4622      	mov	r2, r4
 8006a96:	462b      	mov	r3, r5
 8006a98:	1891      	adds	r1, r2, r2
 8006a9a:	6139      	str	r1, [r7, #16]
 8006a9c:	415b      	adcs	r3, r3
 8006a9e:	617b      	str	r3, [r7, #20]
 8006aa0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006aa4:	1912      	adds	r2, r2, r4
 8006aa6:	eb45 0303 	adc.w	r3, r5, r3
 8006aaa:	f04f 0000 	mov.w	r0, #0
 8006aae:	f04f 0100 	mov.w	r1, #0
 8006ab2:	00d9      	lsls	r1, r3, #3
 8006ab4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006ab8:	00d0      	lsls	r0, r2, #3
 8006aba:	4602      	mov	r2, r0
 8006abc:	460b      	mov	r3, r1
 8006abe:	eb12 0804 	adds.w	r8, r2, r4
 8006ac2:	eb43 0905 	adc.w	r9, r3, r5
 8006ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	4618      	mov	r0, r3
 8006acc:	f04f 0100 	mov.w	r1, #0
 8006ad0:	f04f 0200 	mov.w	r2, #0
 8006ad4:	f04f 0300 	mov.w	r3, #0
 8006ad8:	008b      	lsls	r3, r1, #2
 8006ada:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006ade:	0082      	lsls	r2, r0, #2
 8006ae0:	4640      	mov	r0, r8
 8006ae2:	4649      	mov	r1, r9
 8006ae4:	f7f9 fb70 	bl	80001c8 <__aeabi_uldivmod>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	460b      	mov	r3, r1
 8006aec:	4b49      	ldr	r3, [pc, #292]	; (8006c14 <UART_SetConfig+0x38c>)
 8006aee:	fba3 2302 	umull	r2, r3, r3, r2
 8006af2:	095b      	lsrs	r3, r3, #5
 8006af4:	011e      	lsls	r6, r3, #4
 8006af6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006af8:	4618      	mov	r0, r3
 8006afa:	f04f 0100 	mov.w	r1, #0
 8006afe:	4602      	mov	r2, r0
 8006b00:	460b      	mov	r3, r1
 8006b02:	1894      	adds	r4, r2, r2
 8006b04:	60bc      	str	r4, [r7, #8]
 8006b06:	415b      	adcs	r3, r3
 8006b08:	60fb      	str	r3, [r7, #12]
 8006b0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b0e:	1812      	adds	r2, r2, r0
 8006b10:	eb41 0303 	adc.w	r3, r1, r3
 8006b14:	f04f 0400 	mov.w	r4, #0
 8006b18:	f04f 0500 	mov.w	r5, #0
 8006b1c:	00dd      	lsls	r5, r3, #3
 8006b1e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006b22:	00d4      	lsls	r4, r2, #3
 8006b24:	4622      	mov	r2, r4
 8006b26:	462b      	mov	r3, r5
 8006b28:	1814      	adds	r4, r2, r0
 8006b2a:	64bc      	str	r4, [r7, #72]	; 0x48
 8006b2c:	414b      	adcs	r3, r1
 8006b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	4618      	mov	r0, r3
 8006b36:	f04f 0100 	mov.w	r1, #0
 8006b3a:	f04f 0200 	mov.w	r2, #0
 8006b3e:	f04f 0300 	mov.w	r3, #0
 8006b42:	008b      	lsls	r3, r1, #2
 8006b44:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006b48:	0082      	lsls	r2, r0, #2
 8006b4a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006b4e:	f7f9 fb3b 	bl	80001c8 <__aeabi_uldivmod>
 8006b52:	4602      	mov	r2, r0
 8006b54:	460b      	mov	r3, r1
 8006b56:	4b2f      	ldr	r3, [pc, #188]	; (8006c14 <UART_SetConfig+0x38c>)
 8006b58:	fba3 1302 	umull	r1, r3, r3, r2
 8006b5c:	095b      	lsrs	r3, r3, #5
 8006b5e:	2164      	movs	r1, #100	; 0x64
 8006b60:	fb01 f303 	mul.w	r3, r1, r3
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	011b      	lsls	r3, r3, #4
 8006b68:	3332      	adds	r3, #50	; 0x32
 8006b6a:	4a2a      	ldr	r2, [pc, #168]	; (8006c14 <UART_SetConfig+0x38c>)
 8006b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b70:	095b      	lsrs	r3, r3, #5
 8006b72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b76:	441e      	add	r6, r3
 8006b78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f04f 0100 	mov.w	r1, #0
 8006b80:	4602      	mov	r2, r0
 8006b82:	460b      	mov	r3, r1
 8006b84:	1894      	adds	r4, r2, r2
 8006b86:	603c      	str	r4, [r7, #0]
 8006b88:	415b      	adcs	r3, r3
 8006b8a:	607b      	str	r3, [r7, #4]
 8006b8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b90:	1812      	adds	r2, r2, r0
 8006b92:	eb41 0303 	adc.w	r3, r1, r3
 8006b96:	f04f 0400 	mov.w	r4, #0
 8006b9a:	f04f 0500 	mov.w	r5, #0
 8006b9e:	00dd      	lsls	r5, r3, #3
 8006ba0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006ba4:	00d4      	lsls	r4, r2, #3
 8006ba6:	4622      	mov	r2, r4
 8006ba8:	462b      	mov	r3, r5
 8006baa:	eb12 0a00 	adds.w	sl, r2, r0
 8006bae:	eb43 0b01 	adc.w	fp, r3, r1
 8006bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f04f 0100 	mov.w	r1, #0
 8006bbc:	f04f 0200 	mov.w	r2, #0
 8006bc0:	f04f 0300 	mov.w	r3, #0
 8006bc4:	008b      	lsls	r3, r1, #2
 8006bc6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006bca:	0082      	lsls	r2, r0, #2
 8006bcc:	4650      	mov	r0, sl
 8006bce:	4659      	mov	r1, fp
 8006bd0:	f7f9 fafa 	bl	80001c8 <__aeabi_uldivmod>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	4b0e      	ldr	r3, [pc, #56]	; (8006c14 <UART_SetConfig+0x38c>)
 8006bda:	fba3 1302 	umull	r1, r3, r3, r2
 8006bde:	095b      	lsrs	r3, r3, #5
 8006be0:	2164      	movs	r1, #100	; 0x64
 8006be2:	fb01 f303 	mul.w	r3, r1, r3
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	011b      	lsls	r3, r3, #4
 8006bea:	3332      	adds	r3, #50	; 0x32
 8006bec:	4a09      	ldr	r2, [pc, #36]	; (8006c14 <UART_SetConfig+0x38c>)
 8006bee:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf2:	095b      	lsrs	r3, r3, #5
 8006bf4:	f003 020f 	and.w	r2, r3, #15
 8006bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4432      	add	r2, r6
 8006bfe:	609a      	str	r2, [r3, #8]
}
 8006c00:	bf00      	nop
 8006c02:	377c      	adds	r7, #124	; 0x7c
 8006c04:	46bd      	mov	sp, r7
 8006c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c0a:	bf00      	nop
 8006c0c:	40011000 	.word	0x40011000
 8006c10:	40011400 	.word	0x40011400
 8006c14:	51eb851f 	.word	0x51eb851f

08006c18 <__libc_init_array>:
 8006c18:	b570      	push	{r4, r5, r6, lr}
 8006c1a:	4d0d      	ldr	r5, [pc, #52]	; (8006c50 <__libc_init_array+0x38>)
 8006c1c:	4c0d      	ldr	r4, [pc, #52]	; (8006c54 <__libc_init_array+0x3c>)
 8006c1e:	1b64      	subs	r4, r4, r5
 8006c20:	10a4      	asrs	r4, r4, #2
 8006c22:	2600      	movs	r6, #0
 8006c24:	42a6      	cmp	r6, r4
 8006c26:	d109      	bne.n	8006c3c <__libc_init_array+0x24>
 8006c28:	4d0b      	ldr	r5, [pc, #44]	; (8006c58 <__libc_init_array+0x40>)
 8006c2a:	4c0c      	ldr	r4, [pc, #48]	; (8006c5c <__libc_init_array+0x44>)
 8006c2c:	f000 f848 	bl	8006cc0 <_init>
 8006c30:	1b64      	subs	r4, r4, r5
 8006c32:	10a4      	asrs	r4, r4, #2
 8006c34:	2600      	movs	r6, #0
 8006c36:	42a6      	cmp	r6, r4
 8006c38:	d105      	bne.n	8006c46 <__libc_init_array+0x2e>
 8006c3a:	bd70      	pop	{r4, r5, r6, pc}
 8006c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c40:	4798      	blx	r3
 8006c42:	3601      	adds	r6, #1
 8006c44:	e7ee      	b.n	8006c24 <__libc_init_array+0xc>
 8006c46:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c4a:	4798      	blx	r3
 8006c4c:	3601      	adds	r6, #1
 8006c4e:	e7f2      	b.n	8006c36 <__libc_init_array+0x1e>
 8006c50:	08006d40 	.word	0x08006d40
 8006c54:	08006d40 	.word	0x08006d40
 8006c58:	08006d40 	.word	0x08006d40
 8006c5c:	08006d44 	.word	0x08006d44

08006c60 <memcpy>:
 8006c60:	440a      	add	r2, r1
 8006c62:	4291      	cmp	r1, r2
 8006c64:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c68:	d100      	bne.n	8006c6c <memcpy+0xc>
 8006c6a:	4770      	bx	lr
 8006c6c:	b510      	push	{r4, lr}
 8006c6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c76:	4291      	cmp	r1, r2
 8006c78:	d1f9      	bne.n	8006c6e <memcpy+0xe>
 8006c7a:	bd10      	pop	{r4, pc}

08006c7c <memmove>:
 8006c7c:	4288      	cmp	r0, r1
 8006c7e:	b510      	push	{r4, lr}
 8006c80:	eb01 0402 	add.w	r4, r1, r2
 8006c84:	d902      	bls.n	8006c8c <memmove+0x10>
 8006c86:	4284      	cmp	r4, r0
 8006c88:	4623      	mov	r3, r4
 8006c8a:	d807      	bhi.n	8006c9c <memmove+0x20>
 8006c8c:	1e43      	subs	r3, r0, #1
 8006c8e:	42a1      	cmp	r1, r4
 8006c90:	d008      	beq.n	8006ca4 <memmove+0x28>
 8006c92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c9a:	e7f8      	b.n	8006c8e <memmove+0x12>
 8006c9c:	4402      	add	r2, r0
 8006c9e:	4601      	mov	r1, r0
 8006ca0:	428a      	cmp	r2, r1
 8006ca2:	d100      	bne.n	8006ca6 <memmove+0x2a>
 8006ca4:	bd10      	pop	{r4, pc}
 8006ca6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006caa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006cae:	e7f7      	b.n	8006ca0 <memmove+0x24>

08006cb0 <memset>:
 8006cb0:	4402      	add	r2, r0
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d100      	bne.n	8006cba <memset+0xa>
 8006cb8:	4770      	bx	lr
 8006cba:	f803 1b01 	strb.w	r1, [r3], #1
 8006cbe:	e7f9      	b.n	8006cb4 <memset+0x4>

08006cc0 <_init>:
 8006cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cc2:	bf00      	nop
 8006cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cc6:	bc08      	pop	{r3}
 8006cc8:	469e      	mov	lr, r3
 8006cca:	4770      	bx	lr

08006ccc <_fini>:
 8006ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cce:	bf00      	nop
 8006cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cd2:	bc08      	pop	{r3}
 8006cd4:	469e      	mov	lr, r3
 8006cd6:	4770      	bx	lr
